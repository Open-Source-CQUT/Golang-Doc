const{entries:$}=Object,{fromEntries:st}=Object,nt="ENTRIES",D="KEYS",W="VALUES",_="";class S{set;_type;_path;constructor(t,s){const n=t._tree,o=Array.from(n.keys());this.set=t,this._type=s,this._path=o.length>0?[{node:n,keys:o}]:[]}next(){const t=this.dive();return this.backtrack(),t}dive(){if(this._path.length===0)return{done:!0,value:void 0};const{node:t,keys:s}=b(this._path);if(b(s)===_)return{done:!1,value:this.result()};const n=t.get(b(s));return this._path.push({node:n,keys:Array.from(n.keys())}),this.dive()}backtrack(){if(this._path.length===0)return;const t=b(this._path).keys;t.pop(),!(t.length>0)&&(this._path.pop(),this.backtrack())}key(){return this.set._prefix+this._path.map(({keys:t})=>b(t)).filter(t=>t!==_).join("")}value(){return b(this._path).node.get(_)}result(){switch(this._type){case W:return this.value();case D:return this.key();default:return[this.key(),this.value()]}}[Symbol.iterator](){return this}}const b=e=>e[e.length-1],ot=(e,t,s)=>{const n=new Map;if(typeof t!="string")return n;const o=t.length+1,r=o+s,i=new Uint8Array(r*o).fill(s+1);for(let c=0;c<o;++c)i[c]=c;for(let c=1;c<r;++c)i[c*o]=c;return q(e,t,s,n,i,1,o,""),n},q=(e,t,s,n,o,r,i,c)=>{const l=r*i;t:for(const u of e.keys())if(u===_){const h=o[l-1];h<=s&&n.set(c,[e.get(u),h])}else{let h=r;for(let f=0;f<u.length;++f,++h){const m=u[f],g=i*h,y=g-i;let d=o[g];const a=Math.max(0,h-s-1),x=Math.min(i-1,h+s);for(let p=a;p<x;++p){const O=m!==t[p],C=o[y+p]+ +O,k=o[y+p+1]+1,z=o[g+p]+1,v=o[g+p+1]=Math.min(C,k,z);v<d&&(d=v)}if(d>s)continue t}q(e.get(u),t,s,n,o,h,i,c+u)}};class w{_tree;_prefix;_size=void 0;constructor(t=new Map,s=""){this._tree=t,this._prefix=s}atPrefix(t){if(!t.startsWith(this._prefix))throw new Error("Mismatched prefix");const[s,n]=I(this._tree,t.slice(this._prefix.length));if(s===void 0){const[o,r]=L(n);for(const i of o.keys())if(i!==_&&i.startsWith(r)){const c=new Map;return c.set(i.slice(r.length),o.get(i)),new w(c,t)}}return new w(s,t)}clear(){this._size=void 0,this._tree.clear()}delete(t){return this._size=void 0,rt(this._tree,t)}entries(){return new S(this,nt)}forEach(t){for(const[s,n]of this)t(s,n,this)}fuzzyGet(t,s){return ot(this._tree,t,s)}get(t){const s=F(this._tree,t);return s!==void 0?s.get(_):void 0}has(t){return F(this._tree,t)?.has(_)??!1}keys(){return new S(this,D)}set(t,s){if(typeof t!="string")throw new Error("key must be a string");return this._size=void 0,E(this._tree,t).set(_,s),this}get size(){if(this._size)return this._size;this._size=0;const t=this.entries();for(;!t.next().done;)this._size+=1;return this._size}update(t,s){if(typeof t!="string")throw new Error("key must be a string");this._size=void 0;const n=E(this._tree,t);return n.set(_,s(n.get(_))),this}fetch(t,s){if(typeof t!="string")throw new Error("key must be a string");this._size=void 0;const n=E(this._tree,t);let o=n.get(_);return o===void 0&&n.set(_,o=s()),o}values(){return new S(this,W)}[Symbol.iterator](){return this.entries()}static from(t){const s=new w;for(const[n,o]of t)s.set(n,o);return s}static fromObject(t){return w.from(Object.entries(t))}}const I=(e,t,s=[])=>{if(t.length===0||e==null)return[e,s];for(const n of e.keys())if(n!==_&&t.startsWith(n))return s.push([e,n]),I(e.get(n),t.slice(n.length),s);return s.push([e,t]),I(void 0,"",s)},F=(e,t)=>{if(t.length===0||!e)return e;for(const s of e.keys())if(s!==_&&t.startsWith(s))return F(e.get(s),t.slice(s.length))},E=(e,t)=>{const s=t.length;t:for(let n=0;e&&n<s;){for(const r of e.keys())if(r!==_&&t[n]===r[0]){const i=Math.min(s-n,r.length);let c=1;for(;c<i&&t[n+c]===r[c];)++c;const l=e.get(r);if(c===r.length)e=l;else{const u=new Map;u.set(r.slice(c),l),e.set(t.slice(n,n+c),u),e.delete(r),e=u}n+=c;continue t}const o=new Map;return e.set(t.slice(n),o),o}return e},rt=(e,t)=>{const[s,n]=I(e,t);if(s!==void 0){if(s.delete(_),s.size===0)R(n);else if(s.size===1){const[o,r]=s.entries().next().value;A(n,o,r)}}},R=e=>{if(e.length===0)return;const[t,s]=L(e);if(t.delete(s),t.size===0)R(e.slice(0,-1));else if(t.size===1){const[n,o]=t.entries().next().value;n!==_&&A(e.slice(0,-1),n,o)}},A=(e,t,s)=>{if(e.length===0)return;const[n,o]=L(e);n.set(o+t,s),n.delete(o)},L=e=>e[e.length-1],it=(e,t)=>{const s=e._idToShortId.get(t);if(s!=null)return e._storedFields.get(s)},ct=/[\n\r\p{Z}\p{P}]+/u,j="or",N="and",ut="and_not",ht=(e,t)=>{e.includes(t)||e.push(t)},B=(e,t)=>{for(const s of t)e.includes(s)||e.push(s)},P=({score:e},{score:t})=>t-e,lt=()=>new Map,M=e=>{const t=new Map;for(const s of Object.keys(e))t.set(parseInt(s,10),e[s]);return t},G=(e,t)=>Object.prototype.hasOwnProperty.call(e,t)?e[t]:void 0,H={[j]:(e,t)=>{for(const s of t.keys()){const n=e.get(s);if(n==null)e.set(s,t.get(s));else{const{score:o,terms:r,match:i}=t.get(s);n.score=n.score+o,n.match=Object.assign(n.match,i),B(n.terms,r)}}return e},[N]:(e,t)=>{const s=new Map;for(const n of t.keys()){const o=e.get(n);if(o==null)continue;const{score:r,terms:i,match:c}=t.get(n);B(o.terms,i),s.set(n,{score:o.score+r,terms:o.terms,match:Object.assign(o.match,c)})}return s},[ut]:(e,t)=>{for(const s of t.keys())e.delete(s);return e}},dt=(e,t,s,n,o,r)=>{const{k:i,b:c,d:l}=r;return Math.log(1+(s-t+.5)/(t+.5))*(l+e*(i+1)/(e+i*(1-c+c*n/o)))},at=e=>(t,s,n)=>({term:t,fuzzy:typeof e.fuzzy=="function"?e.fuzzy(t,s,n):e.fuzzy??!1,prefix:typeof e.prefix=="function"?e.prefix(t,s,n):e.prefix===!0,termBoost:typeof e.boostTerm=="function"?e.boostTerm(t,s,n):1}),J=(e,t,s,n)=>{for(const o of Object.keys(e._fieldIds))if(e._fieldIds[o]===s){e._options.logger("warn",`SlimSearch: document with ID ${e._documentIds.get(t)} has changed before removal: term "${n}" was not present in field "${o}". Removing a document after it has changed can corrupt the index!`,"version_conflict");return}},ft=(e,t,s,n)=>{if(!e._index.has(n)){J(e,s,t,n);return}const o=e._index.fetch(n,lt),r=o.get(t),i=r?.get(s);!r||typeof i>"u"?J(e,s,t,n):i<=1?r.size<=1?o.delete(t):r.delete(s):r.set(s,i-1),e._index.get(n).size===0&&e._index.delete(n)},mt={k:1.2,b:.7,d:.5},gt={idField:"id",extractField:(e,t)=>e[t],tokenize:e=>e.split(ct),processTerm:e=>e.toLowerCase(),fields:void 0,searchOptions:void 0,storeFields:[],logger:(e,t)=>{console?.[e]?.(t)},autoVacuum:!0},Y={combineWith:j,prefix:!1,fuzzy:!1,maxFuzzy:6,boost:{},weights:{fuzzy:.45,prefix:.375},bm25:mt},pt={combineWith:N,prefix:(e,t,s)=>t===s.length-1},_t={batchSize:1e3,batchWait:10},K={minDirtFactor:.1,minDirtCount:20},yt={..._t,...K},U=Symbol("*"),xt=(e,t)=>{const s=new Map,n={...e._options.searchOptions,...t};for(const[o,r]of e._documentIds){const i=n.boostDocument?n.boostDocument(r,"",e._storedFields.get(o)):1;s.set(o,{score:i,terms:[],match:{}})}return s},Q=(e,t=j)=>{if(e.length===0)return new Map;const s=t.toLowerCase();if(!(s in H))throw new Error(`Invalid combination operator: ${t}`);return e.reduce(H[s])},T=(e,t,s,n,o,r,i,c,l,u=new Map)=>{if(r==null)return u;for(const h of Object.keys(i)){const f=i[h],m=e._fieldIds[h],g=r.get(m);if(g==null)continue;let y=g.size;const d=e._avgFieldLength[m];for(const a of g.keys()){if(!e._documentIds.has(a)){ft(e,m,a,s),y-=1;continue}const x=c?c(e._documentIds.get(a),s,e._storedFields.get(a)):1;if(!x)continue;const p=g.get(a),O=e._fieldLength.get(a)[m],C=dt(p,y,e._documentCount,O,d,l),k=n*o*f*x*C,z=u.get(a);if(z){z.score+=k,ht(z.terms,t);const v=G(z.match,s);v?v.push(h):z.match[s]=[h]}else u.set(a,{score:k,terms:[t],match:{[s]:[h]}})}}return u},zt=(e,t,s)=>{const n={...e._options.searchOptions,...s},o=(n.fields??e._options.fields).reduce((d,a)=>({...d,[a]:G(n.boost,a)||1}),{}),{boostDocument:r,weights:i,maxFuzzy:c,bm25:l}=n,{fuzzy:u,prefix:h}={...Y.weights,...i},f=e._index.get(t.term),m=T(e,t.term,t.term,1,t.termBoost,f,o,r,l);let g,y;if(t.prefix&&(g=e._index.atPrefix(t.term)),t.fuzzy){const d=t.fuzzy===!0?.2:t.fuzzy,a=d<1?Math.min(c,Math.round(t.term.length*d)):d;a&&(y=e._index.fuzzyGet(t.term,a))}if(g)for(const[d,a]of g){const x=d.length-t.term.length;if(!x)continue;y?.delete(d);const p=h*d.length/(d.length+.3*x);T(e,t.term,d,p,t.termBoost,a,o,r,l,m)}if(y)for(const d of y.keys()){const[a,x]=y.get(d);if(!x)continue;const p=u*d.length/(d.length+x);T(e,t.term,d,p,t.termBoost,a,o,r,l,m)}return m},X=(e,t,s={})=>{if(t===U)return xt(e,s);if(typeof t!="string"){const h={...s,...t,queries:void 0},f=t.queries.map(m=>X(e,m,h));return Q(f,h.combineWith)}const{tokenize:n,processTerm:o,searchOptions:r}=e._options,i={tokenize:n,processTerm:o,...r,...s},{tokenize:c,processTerm:l}=i,u=c(t).flatMap(h=>l(h)).filter(h=>!!h).map(at(i)).map(h=>zt(e,h,i));return Q(u,i.combineWith)},Z=(e,t,s={})=>{const{searchOptions:n}=e._options,o={...n,...s},r=X(e,t,s),i=[];for(const[c,{score:l,terms:u,match:h}]of r){const f=u.length||1,m={id:e._documentIds.get(c),score:l*f,terms:Object.keys(h),queryTerms:u,match:h};Object.assign(m,e._storedFields.get(c)),(o.filter==null||o.filter(m))&&i.push(m)}return t===U&&o.boostDocument==null||i.sort(P),i},wt=(e,t,s={})=>{s={...e._options.autoSuggestOptions,...s};const n=new Map;for(const{score:r,terms:i}of Z(e,t,s)){const c=i.join(" "),l=n.get(c);l!=null?(l.score+=r,l.count+=1):n.set(c,{score:r,terms:i,count:1})}const o=[];for(const[r,{score:i,terms:c,count:l}]of n)o.push({suggestion:r,terms:c,score:i/l});return o.sort(P),o};class bt{_options;_index;_documentCount;_documentIds;_idToShortId;_fieldIds;_fieldLength;_avgFieldLength;_nextId;_storedFields;_dirtCount;_currentVacuum;_enqueuedVacuum;_enqueuedVacuumConditions;constructor(t){if(!t?.fields)throw new Error('SlimSearch: option "fields" must be provided');const s=t.autoVacuum==null||t.autoVacuum===!0?yt:t.autoVacuum;this._options={...gt,...t,autoVacuum:s,searchOptions:{...Y,...t.searchOptions},autoSuggestOptions:{...pt,...t.autoSuggestOptions}},this._index=new w,this._documentCount=0,this._documentIds=new Map,this._idToShortId=new Map,this._fieldIds={},this._fieldLength=new Map,this._avgFieldLength=[],this._nextId=0,this._storedFields=new Map,this._dirtCount=0,this._currentVacuum=null,this._enqueuedVacuum=null,this._enqueuedVacuumConditions=K,this.addFields(this._options.fields)}get isVacuuming(){return this._currentVacuum!=null}get dirtCount(){return this._dirtCount}get dirtFactor(){return this._dirtCount/(1+this._documentCount+this._dirtCount)}get documentCount(){return this._documentCount}get termCount(){return this._index.size}toJSON(){const t=[];for(const[s,n]of this._index){const o={};for(const[r,i]of n)o[r]=Object.fromEntries(i);t.push([s,o])}return{documentCount:this._documentCount,nextId:this._nextId,documentIds:Object.fromEntries(this._documentIds),fieldIds:this._fieldIds,fieldLength:Object.fromEntries(this._fieldLength),averageFieldLength:this._avgFieldLength,storedFields:Object.fromEntries(this._storedFields),dirtCount:this._dirtCount,index:t,version:2}}addFields(t){for(let s=0;s<t.length;s++)this._fieldIds[t[s]]=s}}const vt=e=>new bt(e),kt=({documentCount:e,nextId:t,fieldIds:s,averageFieldLength:n,dirtCount:o,version:r},i)=>{if(r!==2)throw new Error("SlimSearch: cannot deserialize an index created with an incompatible version");const c=vt(i);return c._documentCount=e,c._nextId=t,c._idToShortId=new Map,c._fieldIds=s,c._avgFieldLength=n,c._dirtCount=o??0,c._index=new w,c},It=(e,t)=>{const{index:s,documentIds:n,fieldLength:o,storedFields:r}=e,i=kt(e,t);i._documentIds=M(n),i._fieldLength=M(o),i._storedFields=M(r);for(const[c,l]of i._documentIds)i._idToShortId.set(l,c);for(const[c,l]of s){const u=new Map;for(const h of Object.keys(l))u.set(parseInt(h,10),M(l[h]));i._index.set(c,u)}return i},V=(e,t)=>{const s=e.toLowerCase(),n=t.toLowerCase(),o=[];let r=0,i=0;const c=(u,h=!1)=>{let f;i===0?f=u.length>20?`… ${u.slice(-20)}`:u:h?f=u.length+i>100?`${u.slice(0,100-i)}… `:u:f=u.length>20?`${u.slice(0,20)} … ${u.slice(-20)}`:u,f&&o.push(f),i+=f.length,h||(o.push(["mark",t]),i+=t.length,i>=100&&o.push(" …"))};let l=s.indexOf(n,r);if(l===-1)return null;for(;l>=0;){const u=l+n.length;if(c(e.slice(r,l)),r=u,i>100)break;l=s.indexOf(n,r)}return i<100&&c(e.slice(r),!0),o},Mt=(e,t)=>t.contents.reduce((s,[,n])=>s+n,0)-e.contents.reduce((s,[,n])=>s+n,0),Ot=(e,t)=>Math.max(...t.contents.map(([,s])=>s))-Math.max(...e.contents.map(([,s])=>s)),tt=(e,t,s={})=>{const n={};return Z(t,e,{boost:{h:2,t:1,c:4},prefix:!0,...s}).forEach(o=>{const{id:r,terms:i,score:c}=o,l=r.includes("@"),u=r.includes("#"),[h,f]=r.split(/[#@]/),m=Number(h),g=i.sort((d,a)=>d.length-a.length).filter((d,a)=>i.slice(a+1).every(x=>!x.includes(d))),{contents:y}=n[m]??={title:"",contents:[]};if(l)y.push([{type:"customField",id:m,index:f,display:g.map(d=>o.c.map(a=>V(a,d))).flat().filter(d=>d!==null)},c]);else{const d=g.map(a=>V(o.h,a)).filter(a=>a!==null);if(d.length&&y.push([{type:u?"heading":"title",id:m,...u&&{anchor:f},display:d},c]),"t"in o&&o.t)for(const a of o.t){const x=g.map(p=>V(a,p)).filter(p=>p!==null);x.length&&y.push([{type:"text",id:m,...u&&{anchor:f},display:x},c])}}}),$(n).sort(([,o],[,r])=>"max"==="total"?Mt(o,r):Ot(o,r)).map(([o,{title:r,contents:i}])=>{if(!r){const c=it(t,o);c&&(r=c.h)}return{title:r,contents:i.map(([c])=>c)}})},et=(e,t,s={})=>{const n=wt(t,e,{fuzzy:.2,maxFuzzy:3,...s}).map(({suggestion:o})=>o);return e.includes(" ")?n:n.filter(o=>!o.includes(" "))},Ct=st($(JSON.parse("{\"/\":{\"documentCount\":1188,\"nextId\":1188,\"documentIds\":{\"0\":\"1\",\"1\":\"2\",\"2\":\"2#命令行\",\"3\":\"2#help\",\"4\":\"2#doc\",\"5\":\"2#bug\",\"6\":\"2#version\",\"7\":\"2#env\",\"8\":\"2#build\",\"9\":\"2#gcflags\",\"10\":\"2#ldflags\",\"11\":\"2#交叉编译\",\"12\":\"2#编译控制\",\"13\":\"2#run\",\"14\":\"2#tool\",\"15\":\"2#clean\",\"16\":\"2#fix\",\"17\":\"2#fmt\",\"18\":\"2#get\",\"19\":\"2#install\",\"20\":\"2#list\",\"21\":\"2#format\",\"22\":\"2#mod\",\"23\":\"2#init\",\"24\":\"2#tidy\",\"25\":\"2#download\",\"26\":\"2#edit\",\"27\":\"2#graph\",\"28\":\"2#vendor\",\"29\":\"2#verify\",\"30\":\"2#why\",\"31\":\"2#work\",\"32\":\"2#init-1\",\"33\":\"2#use\",\"34\":\"2#edit-1\",\"35\":\"2#sync\",\"36\":\"2#vendor-1\",\"37\":\"2#vet\",\"38\":\"2#test\",\"39\":\"2#指令\",\"40\":\"2#generate\",\"41\":\"2#embed\",\"42\":\"2#build-1\",\"43\":\"2#line\",\"44\":\"2#linkname\",\"45\":\"2#noinline\",\"46\":\"2#nospilit\",\"47\":\"2#noescape\",\"48\":\"2#uintptrescapes\",\"49\":\"2#norace\",\"50\":\"3\",\"51\":\"3#web-框架\",\"52\":\"3#orm\",\"53\":\"3#微服务框架\",\"54\":\"3#日志组件\",\"55\":\"3#测试组件\",\"56\":\"3#数据处理\",\"57\":\"3#数据验证\",\"58\":\"3#数据结构\",\"59\":\"3#数学计算\",\"60\":\"3#模板引擎\",\"61\":\"3#缓存组件\",\"62\":\"3#数据库-驱动\",\"63\":\"3#序列化\",\"64\":\"3#命令行\",\"65\":\"3#压缩解压\",\"66\":\"3#时期时间\",\"67\":\"3#依赖注入\",\"68\":\"3#地理位置\",\"69\":\"3#爬虫框架\",\"70\":\"3#网络工具\",\"71\":\"3#电子邮件\",\"72\":\"3#游戏开发\",\"73\":\"3#gui\",\"74\":\"3#系统交互\",\"75\":\"3#跨语言交互\",\"76\":\"3#图像处理\",\"77\":\"3#文字处理\",\"78\":\"3#认证授权\",\"79\":\"3#代码生成\",\"80\":\"3#正则处理\",\"81\":\"3#文件处理\",\"82\":\"3#通用工具\",\"83\":\"3#开发框架\",\"84\":\"3#共识协议\",\"85\":\"3#ocr\",\"86\":\"4\",\"87\":\"4#背景\",\"88\":\"4#特性\",\"89\":\"4#安装\",\"90\":\"4#windows\",\"91\":\"4#linux\",\"92\":\"4#安装管理\",\"93\":\"4#多版本管理\",\"94\":\"4#编辑器\",\"95\":\"4#寄语\",\"96\":\"4#概览\",\"97\":\"5\",\"98\":\"5#导航站\",\"99\":\"5#电子书\",\"100\":\"5#实体书\",\"101\":\"5#论坛\",\"102\":\"5#博客\",\"103\":\"6\",\"104\":\"6#介绍\",\"105\":\"6#http-api\",\"106\":\"6#share\",\"107\":\"6#compile\",\"108\":\"6#fmt\",\"109\":\"6#health\",\"110\":\"6#version\",\"111\":\"6#view\",\"112\":\"6#download\",\"113\":\"7\",\"114\":\"7#_1-23\",\"115\":\"7#_1-22\",\"116\":\"7#_1-21\",\"117\":\"7#_1-20\",\"118\":\"7#_1-19\",\"119\":\"7#_1-18\",\"120\":\"7#_1-17\",\"121\":\"7#_1-16\",\"122\":\"7#_1-15\",\"123\":\"7#_1-14\",\"124\":\"7#_1-13\",\"125\":\"7#_1-12\",\"126\":\"7#_1-11\",\"127\":\"7#_1-10\",\"128\":\"7#_1-9\",\"129\":\"7#_1-8\",\"130\":\"7#_1-7\",\"131\":\"7#_1-6\",\"132\":\"7#_1-5\",\"133\":\"7#_1-4\",\"134\":\"7#_1-3\",\"135\":\"7#_1-2\",\"136\":\"7#_1-1\",\"137\":\"7#_1-0\",\"138\":\"7#pre\",\"139\":\"9\",\"140\":\"9#安装\",\"141\":\"9#快速开始\",\"142\":\"9#概念\",\"143\":\"9#集群搭建示例\",\"144\":\"9#多数据中心搭建示例\",\"145\":\"9#服务注册与发现\",\"146\":\"10\",\"147\":\"10#特点\",\"148\":\"10#依赖安装\",\"149\":\"10#hello-world\",\"150\":\"10#项目结构\",\"151\":\"10#定义-protobuf-文件\",\"152\":\"10#生成代码\",\"153\":\"10#编写服务端\",\"154\":\"10#编写客户端\",\"155\":\"10#运行\",\"156\":\"10#bufbuild\",\"157\":\"10#流式-rpc\",\"158\":\"10#单向流式\",\"159\":\"10#双向流式\",\"160\":\"10#metadata\",\"161\":\"10#手动创建\",\"162\":\"10#服务端使用\",\"163\":\"10#客户端使用\",\"164\":\"10#拦截器\",\"165\":\"10#服务端拦截\",\"166\":\"10#客户端拦截\",\"167\":\"10#错误处理\",\"168\":\"10#错误码\",\"169\":\"10#超时控制\",\"170\":\"10#连接超时\",\"171\":\"10#请求超时\",\"172\":\"10#认证授权\",\"173\":\"10#安全传输\",\"174\":\"10#服务注册与发现\",\"175\":\"10#自定义服务解析\",\"176\":\"10#结合-consul\",\"177\":\"10#负载均衡\",\"178\":\"11\",\"179\":\"12\",\"180\":\"12#介绍\",\"181\":\"12#语法\",\"182\":\"12#注释\",\"183\":\"12#类型\",\"184\":\"12#基本类型\",\"185\":\"12#数组\",\"186\":\"12#map\",\"187\":\"12#字段\",\"188\":\"12#保留字段\",\"189\":\"12#弃用字段\",\"190\":\"12#枚举\",\"191\":\"12#嵌套消息\",\"192\":\"12#package\",\"193\":\"12#import\",\"194\":\"12#any\",\"195\":\"12#oneof\",\"196\":\"12#service\",\"197\":\"12#empty\",\"198\":\"12#option\",\"199\":\"12#编译\",\"200\":\"12#安装\",\"201\":\"12#生成\",\"202\":\"12#反射\",\"203\":\"13\",\"204\":\"13#依赖\",\"205\":\"13#连接\",\"206\":\"13#索引\",\"207\":\"13#创建\",\"208\":\"13#获取\",\"209\":\"13#分析\",\"210\":\"13#删除\",\"211\":\"13#文档\",\"212\":\"13#创建-1\",\"213\":\"13#获取-1\",\"214\":\"13#更新\",\"215\":\"13#删除-1\",\"216\":\"13#搜索\",\"217\":\"13#小结\",\"218\":\"14\",\"219\":\"14#驱动\",\"220\":\"14#安装\",\"221\":\"14#连接\",\"222\":\"14#bson\",\"223\":\"14#查询文档\",\"224\":\"14#查询单个\",\"225\":\"14#查询多个\",\"226\":\"14#创建文档\",\"227\":\"14#更新文档\",\"228\":\"14#删除文档\",\"229\":\"14#聚合\",\"230\":\"15\",\"231\":\"15#依赖\",\"232\":\"15#连接到数据库\",\"233\":\"15#准备数据\",\"234\":\"15#查询\",\"235\":\"15#新增\",\"236\":\"15#更新\",\"237\":\"15#删除\",\"238\":\"15#事务\",\"239\":\"17\",\"240\":\"17#安装\",\"241\":\"17#快速开始\",\"242\":\"17#连接配置\",\"243\":\"17#建立连接\",\"244\":\"17#关闭连接\",\"245\":\"17#基本操作\",\"246\":\"17#删除键\",\"247\":\"17#过期时间\",\"248\":\"17#取消过期时间\",\"249\":\"17#查询过期时间\",\"250\":\"17#重命名\",\"251\":\"17#查询类型\",\"252\":\"17#扫描\",\"253\":\"17#字符串\",\"254\":\"17#简单存取\",\"255\":\"17#批量存取\",\"256\":\"17#数字增减\",\"257\":\"17#哈希表\",\"258\":\"17#读写操作\",\"259\":\"17#删除键-1\",\"260\":\"17#判断键是否存在\",\"261\":\"17#获取所有的键\",\"262\":\"17#获取哈希表键长度\",\"263\":\"17#遍历哈希表的键值对\",\"264\":\"17#列表\",\"265\":\"17#修改元素\",\"266\":\"17#访问长度\",\"267\":\"17#访问元素\",\"268\":\"17#删除元素\",\"269\":\"17#集合\",\"270\":\"17#新增元素\",\"271\":\"17#访问集合元素\",\"272\":\"17#集合操作\",\"273\":\"17#删除元素-1\",\"274\":\"17#移动元素\",\"275\":\"17#删除元素-2\",\"276\":\"17#遍历\",\"277\":\"17#有序集合\",\"278\":\"17#加入元素\",\"279\":\"17#元素排名\",\"280\":\"17#访问元素-1\",\"281\":\"17#修改权值\",\"282\":\"17#删除元素-3\",\"283\":\"17#脚本\",\"284\":\"17#发布订阅\",\"285\":\"19\",\"286\":\"19#官方文档\",\"287\":\"19#go-之旅\",\"288\":\"19#effective-go\",\"289\":\"19#参考手册\",\"290\":\"19#在线编译\",\"291\":\"19#更新日志\",\"292\":\"20\",\"293\":\"20#包\",\"294\":\"20#可见性\",\"295\":\"20#导入\",\"296\":\"20#内部包\",\"297\":\"20#注释\",\"298\":\"20#标识符\",\"299\":\"20#运算符\",\"300\":\"20#字面量\",\"301\":\"20#整型字面量\",\"302\":\"20#浮点数字面量\",\"303\":\"20#复数字面量\",\"304\":\"20#字符字面量\",\"305\":\"20#转义字符\",\"306\":\"20#字符串字面量\",\"307\":\"20#函数\",\"308\":\"20#风格\",\"309\":\"20#函数花括号换行\",\"310\":\"20#代码缩进\",\"311\":\"20#代码间隔\",\"312\":\"20#花括号省略\",\"313\":\"20#三元表达式\",\"314\":\"21\",\"315\":\"21#布尔类型\",\"316\":\"21#整型\",\"317\":\"21#浮点型\",\"318\":\"21#复数类型\",\"319\":\"21#字符类型\",\"320\":\"21#派生类型\",\"321\":\"21#零值\",\"322\":\"21#nil\",\"323\":\"22\",\"324\":\"22#初始化\",\"325\":\"22#iota\",\"326\":\"22#枚举\",\"327\":\"23\",\"328\":\"23#声明\",\"329\":\"23#赋值\",\"330\":\"23#匿名\",\"331\":\"23#交换\",\"332\":\"23#比较\",\"333\":\"23#代码块\",\"334\":\"24\",\"335\":\"24#文件描述符\",\"336\":\"24#输出\",\"337\":\"24#stdout\",\"338\":\"24#print\",\"339\":\"24#fmt\",\"340\":\"24#bufio\",\"341\":\"24#格式化\",\"342\":\"24#输入\",\"343\":\"24#read\",\"344\":\"24#fmt-1\",\"345\":\"24#bufio-1\",\"346\":\"24#scanner\",\"347\":\"25\",\"348\":\"25#if-else\",\"349\":\"25#else-if\",\"350\":\"25#switch\",\"351\":\"25#label\",\"352\":\"25#goto\",\"353\":\"26\",\"354\":\"26#for\",\"355\":\"26#for-range\",\"356\":\"26#break\",\"357\":\"26#continue\",\"358\":\"27\",\"359\":\"27#数组\",\"360\":\"27#初始化\",\"361\":\"27#使用\",\"362\":\"27#切割\",\"363\":\"27#切片-1\",\"364\":\"27#初始化-1\",\"365\":\"27#使用-1\",\"366\":\"27#插入元素\",\"367\":\"27#删除元素\",\"368\":\"27#拷贝\",\"369\":\"27#遍历\",\"370\":\"27#多维切片\",\"371\":\"27#拓展表达式\",\"372\":\"27#clear\",\"373\":\"28\",\"374\":\"28#字面量\",\"375\":\"28#访问\",\"376\":\"28#转换\",\"377\":\"28#长度\",\"378\":\"28#拷贝\",\"379\":\"28#拼接\",\"380\":\"28#遍历\",\"381\":\"29\",\"382\":\"29#初始化\",\"383\":\"29#访问\",\"384\":\"29#存值\",\"385\":\"29#删除\",\"386\":\"29#遍历\",\"387\":\"29#清空\",\"388\":\"29#set\",\"389\":\"29#注意\",\"390\":\"30\",\"391\":\"30#创建\",\"392\":\"30#禁止指针运算\",\"393\":\"30#new-和-make\",\"394\":\"31\",\"395\":\"31#声明\",\"396\":\"31#参数\",\"397\":\"31#返回值\",\"398\":\"31#匿名函数\",\"399\":\"31#闭包\",\"400\":\"31#延迟调用\",\"401\":\"31#循环\",\"402\":\"31#参数预计算\",\"403\":\"32\",\"404\":\"32#声明\",\"405\":\"32#实例化\",\"406\":\"32#选项模式\",\"407\":\"32#组合\",\"408\":\"32#指针\",\"409\":\"32#标签\",\"410\":\"32#内存对齐\",\"411\":\"32#空结构体\",\"412\":\"33\",\"413\":\"33#值接收者\",\"414\":\"33#指针接收者\",\"415\":\"36\",\"416\":\"36#打开\",\"417\":\"36#读取\",\"418\":\"36#写入\",\"419\":\"36#复制\",\"420\":\"36#重命名\",\"421\":\"36#删除\",\"422\":\"36#刷新\",\"423\":\"36#文件夹\",\"424\":\"36#读取-1\",\"425\":\"36#创建\",\"426\":\"36#复制-1\",\"427\":\"37\",\"428\":\"37#接口\",\"429\":\"37#桥梁\",\"430\":\"37#核心\",\"431\":\"37#类型\",\"432\":\"37#kind\",\"433\":\"37#elem\",\"434\":\"37#size\",\"435\":\"37#comparable\",\"436\":\"37#implements\",\"437\":\"37#convertibleto\",\"438\":\"37#值\",\"439\":\"37#type\",\"440\":\"37#elem-1\",\"441\":\"37#指针\",\"442\":\"37#设置值\",\"443\":\"37#获取值\",\"444\":\"37#函数\",\"445\":\"37#信息\",\"446\":\"37#调用\",\"447\":\"37#结构体\",\"448\":\"37#访问字段\",\"449\":\"37#修改字段\",\"450\":\"37#访问-tag\",\"451\":\"37#访问方法\",\"452\":\"37#调用方法\",\"453\":\"37#创建\",\"454\":\"37#基本类型\",\"455\":\"37#结构体-1\",\"456\":\"37#切片\",\"457\":\"37#map\",\"458\":\"37#管道\",\"459\":\"37#函数-1\",\"460\":\"37#完全相等\",\"461\":\"38\",\"462\":\"38#协程\",\"463\":\"38#管道\",\"464\":\"38#创建\",\"465\":\"38#读写\",\"466\":\"38#无缓冲\",\"467\":\"38#有缓冲\",\"468\":\"38#注意点\",\"469\":\"38#单向管道\",\"470\":\"38#for-range\",\"471\":\"38#select\",\"472\":\"38#waitgroup\",\"473\":\"38#context\",\"474\":\"38#context-1\",\"475\":\"38#emptyctx\",\"476\":\"38#valuectx\",\"477\":\"38#cancelctx\",\"478\":\"38#timerctx\",\"479\":\"38#锁\",\"480\":\"38#互斥锁\",\"481\":\"38#读写锁\",\"482\":\"38#条件变量\",\"483\":\"38#sync\",\"484\":\"38#once\",\"485\":\"38#pool\",\"486\":\"38#map\",\"487\":\"38#原子\",\"488\":\"38#类型\",\"489\":\"38#使用\",\"490\":\"38#cas\",\"491\":\"38#value\",\"492\":\"39\",\"493\":\"39#编写模块\",\"494\":\"39#准备\",\"495\":\"39#创建\",\"496\":\"39#编写\",\"497\":\"39#测试\",\"498\":\"39#文档\",\"499\":\"39#上传\",\"500\":\"39#引用\",\"501\":\"39#设置代理\",\"502\":\"39#下载依赖\",\"503\":\"39#代码引用\",\"504\":\"39#安装命令行\",\"505\":\"39#模块管理\",\"506\":\"39#常用命令\",\"507\":\"39#模块存储\",\"508\":\"39#版本选择\",\"509\":\"39#go-mod\",\"510\":\"39#go-sum\",\"511\":\"39#私有模块\",\"512\":\"39#工作区\",\"513\":\"39#示例\",\"514\":\"39#命令\",\"515\":\"39#指令\",\"516\":\"40\",\"517\":\"40#编写规范\",\"518\":\"40#执行测试\",\"519\":\"40#常用参数\",\"520\":\"40#示例测试\",\"521\":\"40#单元测试\",\"522\":\"40#helper\",\"523\":\"40#子测试\",\"524\":\"40#表格风格\",\"525\":\"40#基准测试\",\"526\":\"40#benchstat\",\"527\":\"40#模糊测试\",\"528\":\"40#类型支持\",\"529\":\"41\",\"530\":\"41#代码调用\",\"531\":\"41#go-嵌入-c-代码\",\"532\":\"41#go-引入-c-文件\",\"533\":\"41#c-调用-go\",\"534\":\"41#类型转换\",\"535\":\"41#char\",\"536\":\"41#字符串\",\"537\":\"41#整数\",\"538\":\"41#浮点数\",\"539\":\"41#切片\",\"540\":\"41#结构体\",\"541\":\"41#联合体\",\"542\":\"41#枚举\",\"543\":\"41#指针\",\"544\":\"41#链接库\",\"545\":\"41#动态链接库\",\"546\":\"41#静态链接库\",\"547\":\"41#最后\",\"548\":\"42\",\"549\":\"42#逃逸分析\",\"550\":\"42#引用局部指针\",\"551\":\"42#闭包引用\",\"552\":\"42#空间不足\",\"553\":\"42#长度未知\",\"554\":\"42#pprof\",\"555\":\"42#采集\",\"556\":\"42#手动\",\"557\":\"42#自动\",\"558\":\"42#分析\",\"559\":\"42#命令行\",\"560\":\"42#网页\",\"561\":\"42#trace\",\"562\":\"43\",\"563\":\"43#概念\",\"564\":\"43#基本接口\",\"565\":\"43#声明\",\"566\":\"43#初始化\",\"567\":\"43#实现\",\"568\":\"43#空接口\",\"569\":\"43#通用接口\",\"570\":\"44\",\"571\":\"44#示例\",\"572\":\"44#泛型结构\",\"573\":\"44#泛型结构注意点\",\"574\":\"44#类型集\",\"575\":\"44#类型集注意点\",\"576\":\"44#使用\",\"577\":\"44#队列\",\"578\":\"44#堆\",\"579\":\"44#小结\",\"580\":\"45\",\"581\":\"45#认识\",\"582\":\"45#推送式迭代器\",\"583\":\"45#拉取式迭代器\",\"584\":\"45#错误处理\",\"585\":\"45#标准库\",\"586\":\"45#链式调用\",\"587\":\"45#demo\",\"588\":\"45#性能\",\"589\":\"45#小结\",\"590\":\"46\",\"591\":\"46#静态强类型\",\"592\":\"46#类型后置\",\"593\":\"46#类型声明\",\"594\":\"46#类型别名\",\"595\":\"46#类型转换\",\"596\":\"46#类型断言\",\"597\":\"46#类型判断\",\"598\":\"47\",\"599\":\"47#error\",\"600\":\"47#创建\",\"601\":\"47#自定义错误\",\"602\":\"47#传递\",\"603\":\"47#处理\",\"604\":\"47#panic\",\"605\":\"47#创建-1\",\"606\":\"47#善后\",\"607\":\"47#恢复\",\"608\":\"47#fatal\",\"609\":\"48\",\"610\":\"48#web-开发\",\"611\":\"48#im-通讯\",\"612\":\"48#网络编程\",\"613\":\"48#游戏服务器\",\"614\":\"48#数据库开发\",\"615\":\"48#命令行工具\",\"616\":\"50\",\"617\":\"52\",\"618\":\"52#xml\",\"619\":\"52#序列化\",\"620\":\"52#反序列化\",\"621\":\"52#yml\",\"622\":\"52#序列化-1\",\"623\":\"52#反序列化-1\",\"624\":\"52#json\",\"625\":\"52#序列化-2\",\"626\":\"52#字段重命名\",\"627\":\"52#缩进\",\"628\":\"52#反序列化-2\",\"629\":\"52#protocol-buffers\",\"630\":\"53\",\"631\":\"53#导入\",\"632\":\"53#类型\",\"633\":\"53#定义\",\"634\":\"53#解析\",\"635\":\"53#其他\",\"636\":\"53#示例\",\"637\":\"54\",\"638\":\"54#get-示例\",\"639\":\"54#post-示例\",\"640\":\"54#客户端\",\"641\":\"54#简单示例\",\"642\":\"54#增加-header\",\"643\":\"54#服务端\",\"644\":\"54#自定义\",\"645\":\"54#路由\",\"646\":\"54#反向代理\",\"647\":\"55\",\"648\":\"55#前缀\",\"649\":\"55#flag\",\"650\":\"56\",\"651\":\"56#整数常量\",\"652\":\"56#浮点常量\",\"653\":\"56#数学常量\",\"654\":\"56#最大值\",\"655\":\"56#最小值\",\"656\":\"56#绝对值\",\"657\":\"56#余数\",\"658\":\"56#nan-检测\",\"659\":\"56#inf-检测\",\"660\":\"56#取整\",\"661\":\"56#向下取整\",\"662\":\"56#向上取整\",\"663\":\"56#四舍五入\",\"664\":\"56#求对数\",\"665\":\"56#e-的指数\",\"666\":\"56#幂\",\"667\":\"56#平方根\",\"668\":\"56#立方根\",\"669\":\"56#开-n-方\",\"670\":\"56#sin\",\"671\":\"56#cos\",\"672\":\"56#tan\",\"673\":\"57\",\"674\":\"57#地址解析\",\"675\":\"57#mac-地址\",\"676\":\"57#cidr\",\"677\":\"57#ip-地址\",\"678\":\"57#tcp-地址\",\"679\":\"57#udp-地址\",\"680\":\"57#unix-地址\",\"681\":\"57#dns\",\"682\":\"57#网络编程\",\"683\":\"58\",\"684\":\"58#整型排序\",\"685\":\"58#浮点排序\",\"686\":\"58#字符串排序\",\"687\":\"58#逆向排序\",\"688\":\"58#自定义排序\",\"689\":\"58#是否有序\",\"690\":\"59\",\"691\":\"59#导入\",\"692\":\"59#字符串转整型\",\"693\":\"59#整型转字符串\",\"694\":\"59#字符串转布尔值\",\"695\":\"59#布尔值转字符串\",\"696\":\"59#转换成-go-字符串\",\"697\":\"59#字符串转浮点数\",\"698\":\"59#浮点数转字符串\",\"699\":\"59#字符串转复数\",\"700\":\"59#复数转字符串\",\"701\":\"59#字符串追加数据\",\"702\":\"60\",\"703\":\"60#导入\",\"704\":\"60#复制字符串\",\"705\":\"60#比较字符串\",\"706\":\"60#包含字符串\",\"707\":\"60#子串出现次数\",\"708\":\"60#删除指定子串\",\"709\":\"60#忽略大小写相等\",\"710\":\"60#分割字符串\",\"711\":\"60#寻找前后缀\",\"712\":\"60#子串的位置\",\"713\":\"60#遍历替换字符串\",\"714\":\"60#重复复制字符串\",\"715\":\"60#替换字符串\",\"716\":\"60#分隔字符串\",\"717\":\"60#大小写转换\",\"718\":\"60#修剪字符串\",\"719\":\"60#字符串-builder\",\"720\":\"60#字符串-replacer\",\"721\":\"60#字符串-reader\",\"722\":\"61\",\"723\":\"61#快速开始\",\"724\":\"61#模板语法\",\"725\":\"61#参数\",\"726\":\"61#注释\",\"727\":\"61#变量\",\"728\":\"61#函数\",\"729\":\"61#管道\",\"730\":\"61#with\",\"731\":\"61#条件\",\"732\":\"61#迭代\",\"733\":\"61#嵌套\",\"734\":\"61#关联\",\"735\":\"61#插槽\",\"736\":\"61#模板文件\",\"737\":\"62\",\"738\":\"62#时间单位\",\"739\":\"62#格式化\",\"740\":\"62#解析时间\",\"741\":\"62#timer\",\"742\":\"62#ticker\",\"743\":\"62#sleep\",\"744\":\"63\",\"745\":\"64\",\"746\":\"64#arbitrarytype\",\"747\":\"64#integertype\",\"748\":\"64#sizeof\",\"749\":\"64#offsetof\",\"750\":\"64#alignof\",\"751\":\"64#pointer\",\"752\":\"64#add\",\"753\":\"64#slicedata\",\"754\":\"64#slice\",\"755\":\"64#stringdata\",\"756\":\"64#string\",\"757\":\"65\",\"758\":\"65#介绍\",\"759\":\"65#工作原理\",\"760\":\"65#策略\",\"761\":\"65#请求\",\"762\":\"65#匹配\",\"763\":\"65#效果\",\"764\":\"65#示例\",\"765\":\"65#rbac\",\"766\":\"65#资源角色模型\",\"767\":\"65#多租户领域模型\",\"768\":\"65#abac\",\"769\":\"67\",\"770\":\"67#简介\",\"771\":\"67#结构\",\"772\":\"67#头部\",\"773\":\"67#载荷\",\"774\":\"67#签名\",\"775\":\"67#工作原理\",\"776\":\"67#jwt-库\",\"777\":\"67#选择签名算法\",\"778\":\"67#示例\",\"779\":\"67#例-1-hmac-的创建与签名\",\"780\":\"67#例-3-使用预定义-claims\",\"781\":\"67#例-3-自定义-claims\",\"782\":\"67#例-4-hmac-解析验证-token\",\"783\":\"67#例-5-错误处理\",\"784\":\"67#例-6-自定义-claims-解析\",\"785\":\"67#例-7-rsa-的签名与解析\",\"786\":\"69\",\"787\":\"69#安装\",\"788\":\"69#介绍\",\"789\":\"69#读取顺序\",\"790\":\"69#默认值\",\"791\":\"69#读取配置文件\",\"792\":\"69#写入配置文件\",\"793\":\"69#监测和重载配置\",\"794\":\"69#别名\",\"795\":\"69#提取子结构\",\"796\":\"69#设置嵌套分隔符\",\"797\":\"69#反序列化\",\"798\":\"69#序列化\",\"799\":\"69#多个实例\",\"800\":\"70\",\"801\":\"70#安装\",\"802\":\"73\",\"803\":\"73#简介\",\"804\":\"73#安装\",\"805\":\"73#快速开始\",\"806\":\"74\",\"807\":\"74#简介\",\"808\":\"74#安装\",\"809\":\"74#例子\",\"810\":\"76\",\"811\":\"76#安装\",\"812\":\"76#使用\",\"813\":\"76#自定义\",\"814\":\"77\",\"815\":\"77#简介\",\"816\":\"77#安装\",\"817\":\"77#快速开始\",\"818\":\"78\",\"819\":\"78#安装\",\"820\":\"78#使用\",\"821\":\"80\",\"822\":\"80#安装\",\"823\":\"80#入门\",\"824\":\"80#示例\",\"825\":\"80#高级用法\",\"826\":\"80#接口绑定\",\"827\":\"80#值绑定\",\"828\":\"80#结构体构造\",\"829\":\"80#cleanup\",\"830\":\"80#类型重复\",\"831\":\"82\",\"832\":\"82#安装\",\"833\":\"82#快速开始\",\"834\":\"82#描点\",\"835\":\"82#画线\",\"836\":\"84\",\"837\":\"84#安装\",\"838\":\"84#快速开始\",\"839\":\"84#配置\",\"840\":\"84#日志编码\",\"841\":\"84#日式输出\",\"842\":\"84#日志级别\",\"843\":\"84#最后构建\",\"844\":\"86\",\"845\":\"86#简介\",\"846\":\"86#安装\",\"847\":\"86#快速开始\",\"848\":\"88\",\"849\":\"88#特点\",\"850\":\"88#安装\",\"851\":\"88#连接\",\"852\":\"88#连接配置\",\"853\":\"88#模型\",\"854\":\"88#指定列名\",\"855\":\"88#指定表名\",\"856\":\"88#时间追踪\",\"857\":\"88#model\",\"858\":\"88#主键\",\"859\":\"88#索引\",\"860\":\"88#外键\",\"861\":\"88#钩子\",\"862\":\"88#标签\",\"863\":\"88#迁移\",\"864\":\"88#指定表注释\",\"865\":\"88#创建\",\"866\":\"88#create\",\"867\":\"88#upsert\",\"868\":\"88#查询\",\"869\":\"88#first\",\"870\":\"88#take\",\"871\":\"88#pluck\",\"872\":\"88#count\",\"873\":\"88#find\",\"874\":\"88#select\",\"875\":\"88#where\",\"876\":\"88#order\",\"877\":\"88#limit\",\"878\":\"88#group\",\"879\":\"88#distinct\",\"880\":\"88#子查询\",\"881\":\"88#锁\",\"882\":\"88#迭代\",\"883\":\"88#修改\",\"884\":\"88#save\",\"885\":\"88#update\",\"886\":\"88#updates\",\"887\":\"88#sql-表达式\",\"888\":\"88#删除\",\"889\":\"88#软删除\",\"890\":\"88#关联定义\",\"891\":\"88#一对一\",\"892\":\"88#一对多\",\"893\":\"88#多对多\",\"894\":\"88#关联操作\",\"895\":\"88#创建关联\",\"896\":\"88#查找关联\",\"897\":\"88#更新关联\",\"898\":\"88#删除关联\",\"899\":\"88#预加载\",\"900\":\"88#事务\",\"901\":\"88#自动\",\"902\":\"88#手动\",\"903\":\"88#总结\",\"904\":\"90\",\"905\":\"90#安装\",\"906\":\"90#主机\",\"907\":\"90#信息\",\"908\":\"90#cpu\",\"909\":\"90#信息-1\",\"910\":\"90#核数\",\"911\":\"90#使用率\",\"912\":\"90#时间片\",\"913\":\"90#磁盘\",\"914\":\"90#使用率-1\",\"915\":\"90#分区情况\",\"916\":\"90#io\",\"917\":\"90#内存\",\"918\":\"90#信息-2\",\"919\":\"90#交换内存\",\"920\":\"90#交换设备\",\"921\":\"90#网络\",\"922\":\"90#进程\",\"923\":\"92\",\"924\":\"92#简介\",\"925\":\"92#使用\",\"926\":\"94\",\"927\":\"94#介绍\",\"928\":\"94#安装\",\"929\":\"94#导入\",\"930\":\"94#标签\",\"931\":\"94#字段\",\"932\":\"94#网络\",\"933\":\"94#字符串\",\"934\":\"94#格式化\",\"935\":\"94#比较\",\"936\":\"94#其他\",\"937\":\"94#别名\",\"938\":\"94#操作符\",\"939\":\"94#使用\",\"940\":\"94#单例\",\"941\":\"94#创建验证器\",\"942\":\"94#结构体验证\",\"943\":\"94#map-验证\",\"944\":\"94#切片验证\",\"945\":\"94#变量验证\",\"946\":\"94#字段验证\",\"947\":\"94#进阶\",\"948\":\"94#自定义别名\",\"949\":\"94#自定义验证函数\",\"950\":\"94#自定义类型验证函数\",\"951\":\"94#自定义结构体验证函数\",\"952\":\"94#多语言\",\"953\":\"94#语言文件\",\"954\":\"95\",\"955\":\"95#基本用法\",\"956\":\"95#命名参数\",\"957\":\"95#捕获全部参数\",\"958\":\"95#options-cors\",\"959\":\"95#not-found-处理器\",\"960\":\"95#基本校验\",\"961\":\"97\",\"962\":\"97#介绍\",\"963\":\"97#特性\",\"964\":\"97#安装\",\"965\":\"97#快速开始\",\"966\":\"97#文档\",\"967\":\"97#参数解析\",\"968\":\"97#路由参数\",\"969\":\"97#url-参数\",\"970\":\"97#表单参数\",\"971\":\"97#数据解析\",\"972\":\"97#json-数据绑定\",\"973\":\"97#表单数据绑定\",\"974\":\"97#url-数据绑定\",\"975\":\"97#多次绑定\",\"976\":\"97#数据校验\",\"977\":\"97#简单示例\",\"978\":\"97#数据响应\",\"979\":\"97#简单示例-1\",\"980\":\"97#html-渲染\",\"981\":\"97#快速响应\",\"982\":\"97#异步处理\",\"983\":\"97#文件传输\",\"984\":\"97#单文件上传\",\"985\":\"97#多文件上传\",\"986\":\"97#文件下载\",\"987\":\"97#路由管理\",\"988\":\"97#路由组\",\"989\":\"97#_404-路由\",\"990\":\"97#_405-路由\",\"991\":\"97#重定向\",\"992\":\"97#中间件\",\"993\":\"97#全局中间件\",\"994\":\"97#局部中间件\",\"995\":\"97#中间件原理\",\"996\":\"97#计时器中间件\",\"997\":\"97#服务配置\",\"998\":\"97#http-配置\",\"999\":\"97#静态资源配置\",\"1000\":\"97#跨域配置\",\"1001\":\"97#会话控制\",\"1002\":\"97#cookie\",\"1003\":\"97#session\",\"1004\":\"97#jwt\",\"1005\":\"97#日志管理\",\"1006\":\"97#控制台颜色\",\"1007\":\"97#日志写入文件\",\"1008\":\"97#路由调试日志格式\",\"1009\":\"98\",\"1010\":\"98#安装\",\"1011\":\"98#使用\",\"1012\":\"98#参数\",\"1013\":\"98#响应\",\"1014\":\"98#模型\",\"1015\":\"98#认证\",\"1016\":\"98#配置\",\"1017\":\"98#注意事项\",\"1018\":\"99\",\"1019\":\"99#结构\",\"1020\":\"99#创建\",\"1021\":\"99#访问\",\"1022\":\"99#写入\",\"1023\":\"99#修改\",\"1024\":\"99#添加\",\"1025\":\"99#扩容\",\"1026\":\"99#拷贝\",\"1027\":\"99#清空\",\"1028\":\"99#遍历\",\"1029\":\"100\",\"1030\":\"100#内部结构\",\"1031\":\"100#哈希\",\"1032\":\"100#冲突\",\"1033\":\"100#计算\",\"1034\":\"100#创建\",\"1035\":\"100#访问\",\"1036\":\"100#键值\",\"1037\":\"100#遍历\",\"1038\":\"100#修改\",\"1039\":\"100#删除\",\"1040\":\"100#清空\",\"1041\":\"100#扩容\",\"1042\":\"100#增量扩容\",\"1043\":\"100#等量扩容\",\"1044\":\"101\",\"1045\":\"101#结构\",\"1046\":\"101#读\",\"1047\":\"101#写\",\"1048\":\"101#删\",\"1049\":\"101#遍历\",\"1050\":\"101#性能\",\"1051\":\"102\",\"1052\":\"102#结构\",\"1053\":\"102#拼接\",\"1054\":\"102#转换\",\"1055\":\"102#遍历\",\"1056\":\"103\",\"1057\":\"103#结构\",\"1058\":\"103#创建\",\"1059\":\"103#发送\",\"1060\":\"103#接收\",\"1061\":\"103#关闭\",\"1062\":\"103#判断关闭\",\"1063\":\"104\",\"1064\":\"104#结构\",\"1065\":\"104#原理\",\"1066\":\"104#优化\",\"1067\":\"104#处理\",\"1068\":\"105\",\"1069\":\"105#引子\",\"1070\":\"105#接口\",\"1071\":\"105#小结\",\"1072\":\"106\",\"1073\":\"106#结构\",\"1074\":\"106#分配\",\"1075\":\"106#执行\",\"1076\":\"106#开放编码\",\"1077\":\"107\",\"1078\":\"107#结构\",\"1079\":\"107#恐慌\",\"1080\":\"107#恢复\",\"1081\":\"108\",\"1082\":\"109\",\"1083\":\"110\",\"1084\":\"110#历史\",\"1085\":\"110#调度模型\",\"1086\":\"110#g\",\"1087\":\"110#m\",\"1088\":\"110#p\",\"1089\":\"110#初始化\",\"1090\":\"110#线程\",\"1091\":\"110#创建\",\"1092\":\"110#退出\",\"1093\":\"110#暂停\",\"1094\":\"110#协程\",\"1095\":\"110#创建-1\",\"1096\":\"110#退出-1\",\"1097\":\"110#系统调用\",\"1098\":\"110#挂起\",\"1099\":\"110#协程栈\",\"1100\":\"110#分配\",\"1101\":\"110#扩容\",\"1102\":\"110#收缩\",\"1103\":\"110#分段栈\",\"1104\":\"110#调度循环\",\"1105\":\"110#调度策略\",\"1106\":\"110#协作式调度\",\"1107\":\"110#抢占式调度\",\"1108\":\"110#小结\",\"1109\":\"111\",\"1110\":\"111#分配器\",\"1111\":\"111#线性分配\",\"1112\":\"111#链式分配\",\"1113\":\"111#内存组件\",\"1114\":\"111#mspan\",\"1115\":\"111#heaparena\",\"1116\":\"111#mcache\",\"1117\":\"111#mcentral\",\"1118\":\"111#mheap\",\"1119\":\"111#初始化\",\"1120\":\"111#分配\",\"1121\":\"111#释放\",\"1122\":\"111#扩容\",\"1123\":\"111#对象分配\",\"1124\":\"111#微对象\",\"1125\":\"111#小对象\",\"1126\":\"111#大对象\",\"1127\":\"111#其它\",\"1128\":\"111#内存统计\",\"1129\":\"111#notinheap\",\"1130\":\"112\",\"1131\":\"112#概念\",\"1132\":\"112#触发\",\"1133\":\"112#标记\",\"1134\":\"112#标记-清除\",\"1135\":\"112#三色标记\",\"1136\":\"112#不变性\",\"1137\":\"112#标记工作\",\"1138\":\"112#后台标记\",\"1139\":\"112#标记辅助\",\"1140\":\"112#标记终止\",\"1141\":\"112#屏障\",\"1142\":\"112#插入写屏障\",\"1143\":\"112#删除写屏障\",\"1144\":\"112#混合写屏障\",\"1145\":\"112#着色缓存\",\"1146\":\"112#回收\",\"1147\":\"112#对象回收\",\"1148\":\"112#单元回收\",\"1149\":\"113\",\"1150\":\"113#locker\",\"1151\":\"113#mutex-1\",\"1152\":\"113#trylock\",\"1153\":\"113#lock\",\"1154\":\"113#unlock\",\"1155\":\"113#rwmutex\",\"1156\":\"113#readercount\",\"1157\":\"113#trylock-1\",\"1158\":\"113#lock-1\",\"1159\":\"113#unlock-1\",\"1160\":\"113#tryrlock\",\"1161\":\"113#rlock\",\"1162\":\"113#runlock\",\"1163\":\"114\",\"1164\":\"115\",\"1165\":\"115#示例代码\",\"1166\":\"115#结构\",\"1167\":\"115#wait\",\"1168\":\"115#signal\",\"1169\":\"115#broadcast\",\"1170\":\"115#小结\",\"1171\":\"116\",\"1172\":\"116#结构\",\"1173\":\"116#do\",\"1174\":\"116#小结\",\"1175\":\"117\",\"1176\":\"117#结构\",\"1177\":\"117#add\",\"1178\":\"117#wait\",\"1179\":\"117#小结\",\"1180\":\"118\",\"1181\":\"119\",\"1182\":\"120\",\"1183\":\"121\",\"1184\":\"122\",\"1185\":\"123\",\"1186\":\"124\",\"1187\":\"125\"},\"fieldIds\":{\"h\":0,\"t\":1,\"c\":2},\"fieldLength\":{\"0\":[1,66],\"1\":[1],\"2\":[1,51],\"3\":[1,84],\"4\":[1,223],\"5\":[1,30],\"6\":[1,96],\"7\":[1,584],\"8\":[1,178],\"9\":[1,176],\"10\":[1,115],\"11\":[1,59],\"12\":[1,70],\"13\":[1,57],\"14\":[1,160],\"15\":[1,69],\"16\":[1,143],\"17\":[1,188],\"18\":[1,184],\"19\":[1,110],\"20\":[1,142],\"21\":[1,281],\"22\":[1,106],\"23\":[1,31],\"24\":[1,80],\"25\":[1,40],\"26\":[1,78],\"27\":[1,72],\"28\":[1,107],\"29\":[1,25],\"30\":[1,19],\"31\":[1,57],\"32\":[1,20],\"33\":[1,33],\"34\":[1,100],\"35\":[1,28],\"36\":[1,17],\"37\":[1,240],\"38\":[1,142],\"39\":[1,43],\"40\":[1,83],\"41\":[1,114],\"42\":[1,33],\"43\":[1,35],\"44\":[1,67],\"45\":[1,57],\"46\":[1,13],\"47\":[1,24],\"48\":[1,13],\"49\":[1,19],\"50\":[1,9],\"51\":[2,42],\"52\":[1,35],\"53\":[1,55],\"54\":[1,29],\"55\":[1,39],\"56\":[1,40],\"57\":[1,22],\"58\":[1,45],\"59\":[1,19],\"60\":[1,35],\"61\":[1,35],\"62\":[2,79],\"63\":[1,36],\"64\":[1,45],\"65\":[1,36],\"66\":[1,29],\"67\":[1,26],\"68\":[1,13],\"69\":[1,14],\"70\":[1,24],\"71\":[1,47],\"72\":[1,37],\"73\":[1,17],\"74\":[1,20],\"75\":[1,51],\"76\":[1,21],\"77\":[1,10],\"78\":[1,14],\"79\":[1,9],\"80\":[1,10],\"81\":[1,28],\"82\":[1,18],\"83\":[1,12],\"84\":[1,15],\"85\":[1,15],\"86\":[1],\"87\":[1,107],\"88\":[1,127],\"89\":[1,13],\"90\":[1,47],\"91\":[1,40],\"92\":[1,51],\"93\":[1,62],\"94\":[1,35],\"95\":[1,32],\"96\":[1,44],\"97\":[1,9],\"98\":[1,11],\"99\":[1,27],\"100\":[1,8],\"101\":[1,22],\"102\":[1,16],\"103\":[1],\"104\":[1,39],\"105\":[2,30],\"106\":[1,24],\"107\":[1,37],\"108\":[1,43],\"109\":[1,12],\"110\":[1,21],\"111\":[1,31],\"112\":[1,83],\"113\":[1,73],\"114\":[2,95],\"115\":[2,73],\"116\":[2,143],\"117\":[2,122],\"118\":[2,34],\"119\":[2,31],\"120\":[2,28],\"121\":[2,27],\"122\":[2,34],\"123\":[2,29],\"124\":[2,42],\"125\":[2,24],\"126\":[2,25],\"127\":[2,31],\"128\":[2,24],\"129\":[2,57],\"130\":[2,28],\"131\":[2,30],\"132\":[2,61],\"133\":[2,46],\"134\":[2,30],\"135\":[2,37],\"136\":[1,40],\"137\":[2,97],\"138\":[1,67],\"139\":[1,36],\"140\":[1,83],\"141\":[1,217],\"142\":[1,108],\"143\":[1,197],\"144\":[1,133],\"145\":[1,242],\"146\":[1,52],\"147\":[1,61],\"148\":[1,47],\"149\":[2],\"150\":[1,17],\"151\":[3,34],\"152\":[1,75],\"153\":[1,58],\"154\":[1,48],\"155\":[1,28],\"156\":[1,85],\"157\":[2,59],\"158\":[1,265],\"159\":[1,215],\"160\":[1,90],\"161\":[1,42],\"162\":[1,99],\"163\":[1,83],\"164\":[1,114],\"165\":[1,146],\"166\":[1,218],\"167\":[1,189],\"168\":[1,243],\"169\":[1,38],\"170\":[1,61],\"171\":[1,48],\"172\":[1,20],\"173\":[1],\"174\":[1,176],\"175\":[1,211],\"176\":[2,3],\"177\":[1],\"178\":[1,14],\"179\":[1,6],\"180\":[1,30],\"181\":[1,40],\"182\":[1,15],\"183\":[1,3],\"184\":[1,21],\"185\":[1,12],\"186\":[1,23],\"187\":[1,62],\"188\":[1,36],\"189\":[1,11],\"190\":[1,40],\"191\":[1,18],\"192\":[1,14],\"193\":[1,74],\"194\":[1,36],\"195\":[1,24],\"196\":[1,30],\"197\":[1,22],\"198\":[1,38],\"199\":[1,6],\"200\":[1,93],\"201\":[1,126],\"202\":[1,61],\"203\":[1,27],\"204\":[1,15],\"205\":[1,113],\"206\":[1,27],\"207\":[1,50],\"208\":[1,68],\"209\":[1,69],\"210\":[1,35],\"211\":[1],\"212\":[1,48],\"213\":[1,41],\"214\":[1,57],\"215\":[1,40],\"216\":[1,71],\"217\":[1,16],\"218\":[1,31],\"219\":[1,20],\"220\":[1,8],\"221\":[1,43],\"222\":[1,43],\"223\":[1,32],\"224\":[1,47],\"225\":[1,59],\"226\":[1,56],\"227\":[1,78],\"228\":[1,38],\"229\":[1,53],\"230\":[1,23],\"231\":[1,44],\"232\":[1,36],\"233\":[1,55],\"234\":[1,62],\"235\":[1,24],\"236\":[1,28],\"237\":[1,25],\"238\":[1,32],\"239\":[1,41],\"240\":[1,15],\"241\":[1,49],\"242\":[1,93],\"243\":[1,18],\"244\":[1,15],\"245\":[1],\"246\":[1,10],\"247\":[1,17],\"248\":[1,14],\"249\":[1,7],\"250\":[1,5],\"251\":[1,4],\"252\":[1,7],\"253\":[1],\"254\":[1,10],\"255\":[1,11],\"256\":[1,14],\"257\":[1],\"258\":[1,28],\"259\":[1,6],\"260\":[1,6],\"261\":[1,5],\"262\":[1,5],\"263\":[1,7],\"264\":[1],\"265\":[1,24],\"266\":[1,5],\"267\":[1,13],\"268\":[1,11],\"269\":[1],\"270\":[1,11],\"271\":[1,13],\"272\":[1,19],\"273\":[1,8],\"274\":[1,7],\"275\":[1,7],\"276\":[1,7],\"277\":[1],\"278\":[1,13],\"279\":[1,9],\"280\":[1,21],\"281\":[1,11],\"282\":[1,12],\"283\":[1,19],\"284\":[1,10],\"285\":[1,15],\"286\":[1,18],\"287\":[2,15],\"288\":[2,17],\"289\":[1,18],\"290\":[1,13],\"291\":[1,22],\"292\":[1,26],\"293\":[1,16],\"294\":[1,37],\"295\":[1,52],\"296\":[1,29],\"297\":[1,17],\"298\":[1,43],\"299\":[1,53],\"300\":[1,10],\"301\":[1,19],\"302\":[1,35],\"303\":[1,25],\"304\":[1,15],\"305\":[1,32],\"306\":[1,17],\"307\":[1,23],\"308\":[1,14],\"309\":[1,19],\"310\":[1,4],\"311\":[1,18],\"312\":[1,24],\"313\":[1,13],\"314\":[1,7],\"315\":[1,17],\"316\":[1,31],\"317\":[1,11],\"318\":[1,7],\"319\":[1,19],\"320\":[1,32],\"321\":[1,22],\"322\":[1,12],\"323\":[1,18],\"324\":[1,48],\"325\":[1,49],\"326\":[1,49],\"327\":[1,7],\"328\":[1,32],\"329\":[1,59],\"330\":[1,21],\"331\":[1,56],\"332\":[1,66],\"333\":[1,18],\"334\":[1,13],\"335\":[1,23],\"336\":[1,4],\"337\":[1,12],\"338\":[1,14],\"339\":[1,19],\"340\":[1,25],\"341\":[1,166],\"342\":[1,1],\"343\":[1,19],\"344\":[1,51],\"345\":[1,23],\"346\":[1,33],\"347\":[1,10],\"348\":[2,37],\"349\":[2,41],\"350\":[1,49],\"351\":[1,18],\"352\":[1,19],\"353\":[1,8],\"354\":[1,77],\"355\":[2,39],\"356\":[1,30],\"357\":[1,32],\"358\":[1,10],\"359\":[1,14],\"360\":[1,47],\"361\":[1,16],\"362\":[1,38],\"363\":[1,6],\"364\":[1,49],\"365\":[1,64],\"366\":[1,31],\"367\":[1,32],\"368\":[1,26],\"369\":[1,28],\"370\":[1,35],\"371\":[1,57],\"372\":[1,26],\"373\":[1,6],\"374\":[1,28],\"375\":[1,33],\"376\":[1,55],\"377\":[1,40],\"378\":[1,26],\"379\":[1,27],\"380\":[1,132],\"381\":[1,24],\"382\":[1,62],\"383\":[1,41],\"384\":[1,50],\"385\":[1,33],\"386\":[1,35],\"387\":[1,35],\"388\":[1,38],\"389\":[1,42],\"390\":[1,8],\"391\":[1,46],\"392\":[1,54],\"393\":[3,35],\"394\":[1,9],\"395\":[1,53],\"396\":[1,46],\"397\":[1,51],\"398\":[1,53],\"399\":[1,87],\"400\":[1,38],\"401\":[1,37],\"402\":[1,60],\"403\":[1,24],\"404\":[1,21],\"405\":[1,48],\"406\":[1,78],\"407\":[1,35],\"408\":[1,17],\"409\":[1,35],\"410\":[1,76],\"411\":[1,22],\"412\":[1,46],\"413\":[1,36],\"414\":[1,131],\"415\":[1,15],\"416\":[1,185],\"417\":[1,90],\"418\":[1,93],\"419\":[1,75],\"420\":[1,24],\"421\":[1,29],\"422\":[1,25],\"423\":[1,1],\"424\":[1,41],\"425\":[1,26],\"426\":[1,63],\"427\":[1,17],\"428\":[1,70],\"429\":[1,54],\"430\":[1,19],\"431\":[1,20],\"432\":[1,91],\"433\":[1,50],\"434\":[1,25],\"435\":[1,21],\"436\":[1,32],\"437\":[1,32],\"438\":[1,18],\"439\":[1,16],\"440\":[1,19],\"441\":[1,50],\"442\":[1,27],\"443\":[1,22],\"444\":[1,2],\"445\":[1,34],\"446\":[1,24],\"447\":[1,21],\"448\":[1,67],\"449\":[1,52],\"450\":[2,34],\"451\":[1,61],\"452\":[1,36],\"453\":[1,3],\"454\":[1,22],\"455\":[1,37],\"456\":[1,39],\"457\":[1,28],\"458\":[1,22],\"459\":[1,29],\"460\":[1,54],\"461\":[1,7],\"462\":[1,130],\"463\":[1,31],\"464\":[1,31],\"465\":[1,44],\"466\":[1,31],\"467\":[1,138],\"468\":[1,61],\"469\":[1,79],\"470\":[2,87],\"471\":[1,136],\"472\":[1,103],\"473\":[1,17],\"474\":[1,42],\"475\":[1,49],\"476\":[1,64],\"477\":[1,107],\"478\":[1,82],\"479\":[1,112],\"480\":[1,70],\"481\":[1,101],\"482\":[1,109],\"483\":[1,9],\"484\":[1,108],\"485\":[1,154],\"486\":[1,107],\"487\":[1,26],\"488\":[1,27],\"489\":[1,41],\"490\":[1,87],\"491\":[1,40],\"492\":[1,47],\"493\":[1,39],\"494\":[1,17],\"495\":[1,49],\"496\":[1,65],\"497\":[1,25],\"498\":[1,42],\"499\":[1,108],\"500\":[1,38],\"501\":[1,39],\"502\":[1,6],\"503\":[1,212],\"504\":[1,149],\"505\":[1,39],\"506\":[1,27],\"507\":[1,52],\"508\":[1,34],\"509\":[2,235],\"510\":[2,130],\"511\":[1,31],\"512\":[1,44],\"513\":[1,115],\"514\":[1,18],\"515\":[1,31],\"516\":[1,27],\"517\":[1,36],\"518\":[1,93],\"519\":[1,117],\"520\":[1,135],\"521\":[1,123],\"522\":[1,65],\"523\":[1,92],\"524\":[1,57],\"525\":[1,155],\"526\":[1,322],\"527\":[1,299],\"528\":[1,19],\"529\":[1,45],\"530\":[1,50],\"531\":[4,89],\"532\":[4,53],\"533\":[3,122],\"534\":[1,57],\"535\":[1,49],\"536\":[1,134],\"537\":[1,64],\"538\":[1,30],\"539\":[1,95],\"540\":[1,60],\"541\":[1,44],\"542\":[1,34],\"543\":[1,94],\"544\":[1,13],\"545\":[1,80],\"546\":[1,52],\"547\":[1,97],\"548\":[1,27],\"549\":[1,14],\"550\":[1,75],\"551\":[1,52],\"552\":[1,34],\"553\":[1,85],\"554\":[1,16],\"555\":[1,33],\"556\":[1,78],\"557\":[1,81],\"558\":[1,23],\"559\":[1,158],\"560\":[1,103],\"561\":[1,87],\"562\":[1,8],\"563\":[1,84],\"564\":[1,3],\"565\":[1,14],\"566\":[1,13],\"567\":[1,127],\"568\":[1,102],\"569\":[1,4],\"570\":[1,13],\"571\":[1,87],\"572\":[1,66],\"573\":[1,63],\"574\":[1,101],\"575\":[1,70],\"576\":[1,3],\"577\":[1,46],\"578\":[1,100],\"579\":[1,34],\"580\":[1,26],\"581\":[1,62],\"582\":[1,141],\"583\":[1,119],\"584\":[1,58],\"585\":[1,79],\"586\":[1,18],\"587\":[1,108],\"588\":[1,88],\"589\":[1,36],\"590\":[1,11],\"591\":[1,47],\"592\":[1,23],\"593\":[1,42],\"594\":[1,45],\"595\":[1,74],\"596\":[1,28],\"597\":[1,27],\"598\":[1,134],\"599\":[1,24],\"600\":[1,66],\"601\":[1,22],\"602\":[1,47],\"603\":[1,130],\"604\":[1,35],\"605\":[1,29],\"606\":[1,72],\"607\":[1,42],\"608\":[1,26],\"609\":[1,13],\"610\":[2,39],\"611\":[2,13],\"612\":[1,9],\"613\":[1,11],\"614\":[1,27],\"615\":[1,46],\"616\":[1,147],\"617\":[1,60],\"618\":[1,48],\"619\":[1,36],\"620\":[1,55],\"621\":[1,58],\"622\":[1,34],\"623\":[1,28],\"624\":[1,32],\"625\":[1,25],\"626\":[1,22],\"627\":[1,42],\"628\":[1,38],\"629\":[2,79],\"630\":[1,3],\"631\":[1,2],\"632\":[1,10],\"633\":[1,28],\"634\":[1,10],\"635\":[1,9],\"636\":[1,40],\"637\":[1,20],\"638\":[2,31],\"639\":[2,36],\"640\":[1,19],\"641\":[1,19],\"642\":[1,25],\"643\":[1,17],\"644\":[1,26],\"645\":[1,49],\"646\":[1,30],\"647\":[1,18],\"648\":[1,17],\"649\":[1,56],\"650\":[1,5],\"651\":[1,41],\"652\":[1,24],\"653\":[1,39],\"654\":[1,16],\"655\":[1,16],\"656\":[1,15],\"657\":[1,18],\"658\":[2,17],\"659\":[2,18],\"660\":[1,18],\"661\":[1,16],\"662\":[1,17],\"663\":[1,17],\"664\":[1,18],\"665\":[2,17],\"666\":[1,18],\"667\":[1,16],\"668\":[1,18],\"669\":[3,21],\"670\":[1,16],\"671\":[1,17],\"672\":[1,23],\"673\":[1,19],\"674\":[1,4],\"675\":[2,27],\"676\":[1,29],\"677\":[2,40],\"678\":[2,31],\"679\":[2,31],\"680\":[2,29],\"681\":[1,27],\"682\":[1,77],\"683\":[1,32],\"684\":[1,16],\"685\":[1,22],\"686\":[1,12],\"687\":[1,26],\"688\":[1,48],\"689\":[1,31],\"690\":[1,7],\"691\":[1,4],\"692\":[1,24],\"693\":[1,21],\"694\":[1,37],\"695\":[1,20],\"696\":[3,26],\"697\":[1,33],\"698\":[1,73],\"699\":[1,30],\"700\":[1,48],\"701\":[1,44],\"702\":[1,18],\"703\":[1,4],\"704\":[1,26],\"705\":[1,31],\"706\":[1,49],\"707\":[1,31],\"708\":[1,35],\"709\":[1,24],\"710\":[1,34],\"711\":[1,31],\"712\":[1,41],\"713\":[1,39],\"714\":[1,29],\"715\":[1,45],\"716\":[1,37],\"717\":[1,56],\"718\":[1,38],\"719\":[2,63],\"720\":[2,29],\"721\":[2,45],\"722\":[1,26],\"723\":[1,62],\"724\":[1],\"725\":[1,122],\"726\":[1,15],\"727\":[1,52],\"728\":[1,106],\"729\":[1,26],\"730\":[1,46],\"731\":[1,28],\"732\":[1,38],\"733\":[1,54],\"734\":[1,62],\"735\":[1,45],\"736\":[1,82],\"737\":[1,55],\"738\":[1,22],\"739\":[1,51],\"740\":[1,32],\"741\":[1,40],\"742\":[1,56],\"743\":[1,38],\"744\":[1],\"745\":[1,19],\"746\":[1,10],\"747\":[1,11],\"748\":[1,41],\"749\":[1,29],\"750\":[1,40],\"751\":[1,131],\"752\":[1,30],\"753\":[1,40],\"754\":[1,29],\"755\":[1,33],\"756\":[1,29],\"757\":[1,26],\"758\":[1,65],\"759\":[1,33],\"760\":[1,35],\"761\":[1,23],\"762\":[1,39],\"763\":[1,63],\"764\":[1,48],\"765\":[1,52],\"766\":[1,41],\"767\":[1,37],\"768\":[1],\"769\":[1,5],\"770\":[1,21],\"771\":[1,26],\"772\":[1,18],\"773\":[1,52],\"774\":[1,33],\"775\":[1,32],\"776\":[2,34],\"777\":[1,52],\"778\":[1,86],\"779\":[4,48],\"780\":[4,32],\"781\":[4,64],\"782\":[5,50],\"783\":[3,51],\"784\":[5,57],\"785\":[4,68],\"786\":[1,14],\"787\":[1,6],\"788\":[1,45],\"789\":[1,12],\"790\":[1,13],\"791\":[1,89],\"792\":[1,44],\"793\":[1,24],\"794\":[1,17],\"795\":[1,30],\"796\":[1,11],\"797\":[1,33],\"798\":[1,44],\"799\":[1,16],\"800\":[1,19],\"801\":[1,10],\"802\":[2,20],\"803\":[1,23],\"804\":[1,12],\"805\":[1,27],\"806\":[2,18],\"807\":[1,4],\"808\":[1,7],\"809\":[1,22],\"810\":[1,43],\"811\":[1,7],\"812\":[1,70],\"813\":[1,67],\"814\":[2,22],\"815\":[1,5],\"816\":[1,6],\"817\":[1,118],\"818\":[1,14],\"819\":[1,8],\"820\":[1,56],\"821\":[1,37],\"822\":[1,11],\"823\":[1,142],\"824\":[1,113],\"825\":[1],\"826\":[1,43],\"827\":[1,40],\"828\":[1,60],\"829\":[1,45],\"830\":[1,27],\"831\":[1,24],\"832\":[1,7],\"833\":[1,30],\"834\":[1,32],\"835\":[1,24],\"836\":[1,23],\"837\":[1,6],\"838\":[1,46],\"839\":[1,140],\"840\":[1,182],\"841\":[1,63],\"842\":[1,21],\"843\":[1,53],\"844\":[1,16],\"845\":[1,19],\"846\":[1,6],\"847\":[1,52],\"848\":[1,42],\"849\":[1,98],\"850\":[1,8],\"851\":[1,78],\"852\":[1,80],\"853\":[1,28],\"854\":[1,20],\"855\":[1,33],\"856\":[1,73],\"857\":[1,27],\"858\":[1,22],\"859\":[1,34],\"860\":[1,45],\"861\":[1,41],\"862\":[1,140],\"863\":[1,107],\"864\":[1,25],\"865\":[1],\"866\":[1,62],\"867\":[1,31],\"868\":[1],\"869\":[1,38],\"870\":[1,19],\"871\":[1,32],\"872\":[1,16],\"873\":[1,17],\"874\":[1,46],\"875\":[1,64],\"876\":[1,25],\"877\":[1,27],\"878\":[1,30],\"879\":[1,25],\"880\":[1,27],\"881\":[1,19],\"882\":[1,25],\"883\":[1],\"884\":[1,25],\"885\":[1,30],\"886\":[1,39],\"887\":[2,35],\"888\":[1,40],\"889\":[1,13],\"890\":[1,4],\"891\":[1,37],\"892\":[1,31],\"893\":[1,48],\"894\":[1,21],\"895\":[1,71],\"896\":[1,51],\"897\":[1,79],\"898\":[1,69],\"899\":[1,92],\"900\":[1,10],\"901\":[1,37],\"902\":[1,43],\"903\":[1,9],\"904\":[1,57],\"905\":[1,15],\"906\":[1,5],\"907\":[1,53],\"908\":[1,15],\"909\":[1,37],\"910\":[1,13],\"911\":[1,28],\"912\":[1,84],\"913\":[1,5],\"914\":[1,27],\"915\":[1,24],\"916\":[1,42],\"917\":[1,3],\"918\":[1,52],\"919\":[1,26],\"920\":[1,18],\"921\":[1],\"922\":[1],\"923\":[1,25],\"924\":[1,11],\"925\":[1,5],\"926\":[1,26],\"927\":[1,26],\"928\":[1,7],\"929\":[1,8],\"930\":[1,18],\"931\":[1,33],\"932\":[1,62],\"933\":[1,48],\"934\":[1,141],\"935\":[1,14],\"936\":[1,40],\"937\":[1,12],\"938\":[1,26],\"939\":[1,2],\"940\":[1,9],\"941\":[1,7],\"942\":[1,76],\"943\":[2,46],\"944\":[1,64],\"945\":[1,50],\"946\":[1,62],\"947\":[1,2],\"948\":[1,51],\"949\":[1,61],\"950\":[1,55],\"951\":[1,46],\"952\":[1,183],\"953\":[1,80],\"954\":[1,53],\"955\":[1,43],\"956\":[1,68],\"957\":[1,21],\"958\":[2,34],\"959\":[3,16],\"960\":[1,60],\"961\":[1,28],\"962\":[1,36],\"963\":[1,57],\"964\":[1,18],\"965\":[1,57],\"966\":[1,27],\"967\":[1,7],\"968\":[1,50],\"969\":[2,52],\"970\":[1,68],\"971\":[1,115],\"972\":[2,22],\"973\":[1,16],\"974\":[2,39],\"975\":[1,63],\"976\":[1,8],\"977\":[1,74],\"978\":[1,10],\"979\":[1,13],\"980\":[2,65],\"981\":[1,105],\"982\":[1,64],\"983\":[1,10],\"984\":[1,71],\"985\":[1,62],\"986\":[1,93],\"987\":[1,3],\"988\":[1,49],\"989\":[2,57],\"990\":[2,67],\"991\":[1,30],\"992\":[1,46],\"993\":[1,65],\"994\":[1,55],\"995\":[1,99],\"996\":[1,64],\"997\":[1,3],\"998\":[2,32],\"999\":[1,47],\"1000\":[1,74],\"1001\":[1,8],\"1002\":[1,59],\"1003\":[1,103],\"1004\":[1,29],\"1005\":[1,15],\"1006\":[1,5],\"1007\":[1,71],\"1008\":[1,58],\"1009\":[1,53],\"1010\":[1,36],\"1011\":[1,114],\"1012\":[1,37],\"1013\":[1,46],\"1014\":[1,44],\"1015\":[1,35],\"1016\":[1,253],\"1017\":[1,55],\"1018\":[1,12],\"1019\":[1,165],\"1020\":[1,91],\"1021\":[1,106],\"1022\":[1],\"1023\":[1,53],\"1024\":[1,151],\"1025\":[1,133],\"1026\":[1,68],\"1027\":[1,77],\"1028\":[1,61],\"1029\":[1,13],\"1030\":[1,263],\"1031\":[1],\"1032\":[1,106],\"1033\":[1,61],\"1034\":[1,143],\"1035\":[1,20],\"1036\":[1,157],\"1037\":[1,284],\"1038\":[1,236],\"1039\":[1,151],\"1040\":[1,75],\"1041\":[1,85],\"1042\":[1,332],\"1043\":[1,97],\"1044\":[1,8],\"1045\":[1,73],\"1046\":[1,50],\"1047\":[1,114],\"1048\":[1,45],\"1049\":[1,46],\"1050\":[1,28],\"1051\":[1,56],\"1052\":[1,87],\"1053\":[1,125],\"1054\":[1,163],\"1055\":[1,50],\"1056\":[1,33],\"1057\":[1,69],\"1058\":[1,90],\"1059\":[1,164],\"1060\":[1,181],\"1061\":[1,98],\"1062\":[1,69],\"1063\":[1,62],\"1064\":[1,22],\"1065\":[1,45],\"1066\":[1,122],\"1067\":[1,530],\"1068\":[1],\"1069\":[1,58],\"1070\":[1,95],\"1071\":[1,64],\"1072\":[1,21],\"1073\":[1,91],\"1074\":[1,157],\"1075\":[1,30],\"1076\":[1,72],\"1077\":[1,41],\"1078\":[1,61],\"1079\":[1,86],\"1080\":[1,97],\"1081\":[1],\"1082\":[1,39],\"1083\":[1,46],\"1084\":[1,42],\"1085\":[1,97],\"1086\":[1,218],\"1087\":[1,100],\"1088\":[1,140],\"1089\":[1,342],\"1090\":[1,10],\"1091\":[1,90],\"1092\":[1,65],\"1093\":[1,38],\"1094\":[1,7],\"1095\":[1,167],\"1096\":[1,80],\"1097\":[1,274],\"1098\":[1,133],\"1099\":[1,66],\"1100\":[1,134],\"1101\":[1,167],\"1102\":[1,65],\"1103\":[1,38],\"1104\":[1,216],\"1105\":[1,13],\"1106\":[1,149],\"1107\":[1,219],\"1108\":[1,15],\"1109\":[1,21],\"1110\":[1,6],\"1111\":[1,66],\"1112\":[1,123],\"1113\":[1,10],\"1114\":[1,302],\"1115\":[1,89],\"1116\":[1,104],\"1117\":[1,122],\"1118\":[1,94],\"1119\":[1,50],\"1120\":[1,146],\"1121\":[1,69],\"1122\":[1,113],\"1123\":[1,53],\"1124\":[1,67],\"1125\":[1,130],\"1126\":[1,44],\"1127\":[1],\"1128\":[1,82],\"1129\":[1,20],\"1130\":[1,125],\"1131\":[1,28],\"1132\":[1,136],\"1133\":[1,7],\"1134\":[2,38],\"1135\":[1,36],\"1136\":[1,68],\"1137\":[1,117],\"1138\":[1,230],\"1139\":[1,128],\"1140\":[1,130],\"1141\":[1,26],\"1142\":[1,31],\"1143\":[1,42],\"1144\":[1,103],\"1145\":[1,75],\"1146\":[1,13],\"1147\":[1,50],\"1148\":[1,72],\"1149\":[1,50],\"1150\":[1,25],\"1151\":[1,95],\"1152\":[1,38],\"1153\":[1,235],\"1154\":[1,62],\"1155\":[1,52],\"1156\":[1,31],\"1157\":[1,26],\"1158\":[1,39],\"1159\":[1,41],\"1160\":[1,30],\"1161\":[1,21],\"1162\":[1,50],\"1163\":[1],\"1164\":[1,13],\"1165\":[1,84],\"1166\":[1,64],\"1167\":[1,70],\"1168\":[1,48],\"1169\":[1,56],\"1170\":[1,16],\"1171\":[1,41],\"1172\":[1,17],\"1173\":[1,34],\"1174\":[1,6],\"1175\":[1,31],\"1176\":[1,36],\"1177\":[1,72],\"1178\":[1,55],\"1179\":[1,4],\"1180\":[1,3],\"1181\":[1],\"1182\":[1],\"1183\":[1],\"1184\":[1],\"1185\":[1],\"1186\":[1],\"1187\":[1]},\"averageFieldLength\":[1.0917508417508432,52.422716890107196],\"storedFields\":{\"0\":{\"h\":\"引言\",\"t\":[\"路漫漫其修远兮，吾将上下而求索 —— 屈原 《离骚》\",\"作者本人只是一个平平无奇的大学生，在大二暑假接触到了 Go 这门语言，先前接触过一段时间的 Java，两门语言都比较适合写服务端，起初抱着试一试的心态简单了解了下，觉得这是一门很新奇的语言，于是怀着兴趣学了下去。在学习的过程中，Go 给作者的感觉就是语法确实十分简洁，上手难度也不高，如果有其他语言基础就更简单了，在编码的过程中感觉有点动态语言的影子，但它又确确实实是静态类型编译语言。门槛低，用法多，这大概就是笔者对于 Go 的评价。它同样也有许多缺点，外界对于 Go 调侃最多的一点无疑是这一句if err != nil了，不可否认的是作为一门年轻的语言，Go 还有很长的路要走。\",\"对于学习而言，最重要的因素就是心态了，即便前面提到过 Go 是一门较为容易学习的编程语言，但这也并不代表可以在两三天内迅速掌握。作者本人在 Go 这个领域只是一名初学者，许多的内容都是查阅了大量的资料，且本身的技术与能力都十分的有限，这个小小的文档站初衷是代表着作者在 Go 学习路上的成长经历，每一篇文章的更新都是新的学习经验。不过即便是在 2022 年，关于 Go 资料也并不是很完善，作者花费了大量的时间和精力搜集资料。以一个过来人的角度想，希望可以帮助到其他想要学习的人。作者最喜欢的一首诗句是屈原所著的“路漫漫其修远兮，吾将上下而求索”，这提醒着作者学习之路还十分漫长，希望不管在什么时候，什么阶段，只有时刻保持谦虚，精益求精，不断学习，才会在编程路上走的更远。\",\"​————记于 2022 年 07 月 09 日\"]},\"1\":{\"h\":\"命令\"},\"2\":{\"h\":\"命令行\",\"t\":[\"Go 中的命令包含了一整套工具链，这些命令涵盖了文档，格式化，代码检查，编译，测试，依赖管理等多个方面，可以说是涉及到了 Go 开发的方方面面。\",\"bug 报告漏洞 build 编译包和依赖 clean 清除对象文件 doc 展示源代码中的文档 env 查看Go环境变量信息 fix 修复因go版本变化而导致的API兼容问题 fmt 源代码格式化 generate 代码生成 get 添加依赖 install 安装并编译包 list 包/模块列表命令 mod 模块维护命令 work 工作区维护命令 run 编译并运行 test 测试 tool 运行指定的go工具 version 展示go的版本信息 vet 扫描并输出源代码中可能存在的问题\",\"本文只是简单的叙述与介绍它们的使用，所有内容参考自官方文档，想要了解更多细节可以前往cmd/go。\"]},\"3\":{\"h\":\"help\",\"t\":[\"第一个要认识的是help命令，通过它可以阅读命令的用法。有两种用法，如果要获取简短的使用信息，可以在指定命令后面加上-h标志，比如\",\"$ go env -h usage: go env [-json] [-u] [-w] [var ...] Run 'go help env' for details.\",\"go 会简洁的展示该命令的用法，它也提示了，想要获得更详细的信息就需要使用 help 命令\",\"$ go help env usage: go env [-json] [-u] [-w] [var ...] Env prints Go environment information. By default env prints information as a shell script (on Windows, a batch file). If one or more variable names is given as arguments, env prints the value of each named variable on its own line. The -json flag prints the environment in JSON format instead of as a shell script. The -u flag requires one or more arguments and unsets the default setting for the named environment variables, if one has been set with 'go env -w'. The -w flag requires one or more arguments of the form NAME=VALUE and changes the default settings of the named environment variables to the given values. For more about environment variables, see 'go help environment'.\",\"善于利用 help 命令，通过它你可以获取很多有关命令的信息。\"]},\"4\":{\"h\":\"doc\",\"t\":[\"$ go doc -h Usage of [go] doc: go doc go doc <pkg> go doc <sym>[.<methodOrField>] go doc [<pkg>.]<sym>[.<methodOrField>] go doc [<pkg>.][<sym>.]<methodOrField> go doc <pkg> <sym>[.<methodOrField>] For more information run go help doc Flags: -C dir change to dir before running command -all show all documentation for package -c symbol matching honors case (paths not affected) -cmd show symbols with package docs even if package is a command -short one-line representation for each symbol -src show source code for symbol -u show unexported symbols as well as exported\",\"doc命令会输出指定包，常量，函数，类型，变量，方法甚至结构体字段的文档注释。在不带任何参数的情况，它会输出当前包的注释\",\"$ go doc\",\"也可以指定查看某一个包，比如查看runtime包的文档注释\",\"$ go doc runtime package runtime // import \\\"runtime\\\" Package runtime contains operations that interact with Go's runtime system, such as functions to control goroutines. It also includes the low-level type information used by the reflect package; see reflect's documentation for the programmable interface to the run-time type system. ......\",\"或者某一个类型\",\"$ go doc unsafe.Pointer package unsafe // import \\\"unsafe\\\" type Pointer *ArbitraryType Pointer represents a pointer to an arbitrary type. There are four special operations available for type Pointer that are not available for other types: - A pointer value of any type can be converted to a Pointer. - A Pointer can be converted to a pointer value of any type. - A uintptr can be converted to a Pointer. - A Pointer can be converted to a uintptr. ...\",\"或者某一个函数\",\"$ go doc runtime.GC package runtime // import \\\"runtime\\\" func GC() GC runs a garbage collection and blocks the caller until the garbage collection is complete. It may also block the entire program.\",\"它有以下常用下标志\",\"-u：查看私有的类型\",\"-all：查看指定包的所有文档\",\"-short：只一行简短描述\",\"-src：输出源代码\",\"-cmd：对于一些属于 go 命令的包，也输出它们包内的代码文档。\",\"比如查看runtime.inf变量，这是一个不对外暴露的变量\",\"$ go doc -u runtime.inf package runtime // import \\\"runtime\\\" var inf = float64frombits(0x7FF0000000000000)\",\"利用好doc命令可以帮助你更方便的阅读文档。\",\"另一个可以阅读命令文档的方式就是去阅读源代码，因为有些命令的文档并不会写的那么仔细，反而在源代码中会有比较详细的说明。由于这些命令全部都是由 go 编写的，阅读起来也相当的方便。这些命令都位于src/cmd包下，每一个子包就是一个单独的命令，入口位于cmd/go/main.go文件中\",\"func init() { base.Go.Commands = []*base.Command{ bug.CmdBug, work.CmdBuild, clean.CmdClean, doc.CmdDoc, envcmd.CmdEnv, fix.CmdFix, fmtcmd.CmdFmt, generate.CmdGenerate, modget.CmdGet, work.CmdInstall, list.CmdList, modcmd.CmdMod, workcmd.CmdWork, run.CmdRun, test.CmdTest, tool.CmdTool, version.CmdVersion, vet.CmdVet, help.HelpBuildConstraint, help.HelpBuildmode, help.HelpC, help.HelpCache, help.HelpEnvironment, help.HelpFileType, modload.HelpGoMod, help.HelpGopath, get.HelpGopathGet, modfetch.HelpGoproxy, help.HelpImportPath, modload.HelpModules, modget.HelpModuleGet, modfetch.HelpModuleAuth, help.HelpPackages, modfetch.HelpPrivate, test.HelpTestflag, test.HelpTestfunc, modget.HelpVCS, } }\",\"在这里你会找到 go 的所有子命令，以及它们的帮助文档信息。\"]},\"5\":{\"h\":\"bug\",\"t\":[\"$ go help bug usage: go bug Bug opens the default browser and starts a new bug report. The report includes useful system information.\",\"该命令没有任何参数和任何标志，它会用你的默认浏览器访问github.com/golang/go仓库的 issue 界面，方便你反馈 bug，除此之外没有任何其它作用。\"]},\"6\":{\"h\":\"version\",\"t\":[\"通过version命令可以查看当前 go 的版本信息。\",\"$ go version -h usage: go version [-m] [-v] [file ...]\",\"在不带任何参数执行的情况下，它会输出当前 go 语言的版本\",\"$ go version go version go1.21.0 windows/amd64\",\"它还接收文件路径作为参数，它将输出该路径下所有可以被识别的二进制文件编译时所采用的 go 版本。\",\"$ go version -v ./ buf.exe: go1.20.2 cobra-cli.exe: go1.21.0 dlv.exe: go1.20.2 goctl.exe: go1.20.2 goimports.exe: go1.20.2 golangci-lint.exe: go1.20.2 gopls.exe: go1.19.3 kratos.exe: go1.20.2 main.exe: go1.19.1 protoc-gen-go-grpc.exe: go1.20.2 protoc-gen-go-http.exe: go1.20.2 protoc-gen-go.exe: go1.20.2 protoc-gen-openapi.exe: go1.20.2 swag.exe: go1.21.0 wire.exe: go1.21.0\",\"其中-v参数指定version命令去尝试输出无法识别的文件的 go 版本，-m参数输出二进制文件的模块信息，以及一些编译参数，下面是一个简单的例子。\",\"$ go version -v -m wire.exe wire.exe: go1.21.0 path github.com/google/wire/cmd/wire mod github.com/google/wire v0.5.0 h1:I7ELFeVBr3yfPIcc8+MWvrjk+3VjbcSzoXm3JVa+jD8= dep github.com/google/subcommands v1.0.1 h1:/eqq+otEXm5vhfBrbREPCSVQbvofip6kIz+mX5TUH7k= dep github.com/pmezard/go-difflib v1.0.0 h1:4DBwDE0NGyQoBHbLQYPwSUPoCMWR5BEzIk/f1lZbAQM= dep golang.org/x/tools v0.0.0-20190422233926-fe54fb35175b h1:NVD8gBK33xpdqCaZVVtd6OFJp+3dxkXuz7+U7KaVN6s= build -buildmode=exe build -compiler=gc build DefaultGODEBUG=panicnil=1 build CGO_ENABLED=1 build CGO_CFLAGS= build CGO_CPPFLAGS= build CGO_CXXFLAGS= build CGO_LDFLAGS= build GOARCH=amd64 build GOOS=windows build GOAMD64=v1\",\"go自身也是一个二进制文件，其实在不带任何参数的情况下，go version输出的就是自身二进制文件的 go 语言版本，因为cmd/go的所有工具链都是由 go 语言自身实现的。\"]},\"7\":{\"h\":\"env\",\"t\":[\"通过env命令可以查看所有 go 环境变量的信息，修改这些环境变量将会影响 go 工具链的行为。\",\"$ go env -h usage: go env [-json] [-u] [-w] [var ...] Run 'go help env' for details.\",\"不带任何参数执行该命令，会输出 go 所有环境变量的值\",\"$ go env set GO111MODULE=on set GOARCH=amd64 ...\",\"将某一个环境变量名作为参数可以只输出该变量的值\",\"$ go env GO111MODULE on\",\"加上-json可以输出其json形式\",\"$ go env -json { \\\"AR\\\": \\\"ar\\\", \\\"CC\\\": \\\"gcc\\\", ...... }\",\"通过-w标志，并且以var=value形式作为参数，会永久修改某一个变量的值\",\"$ go env -w GO111MODULE=on\",\"使用-u标志，可以将某一个变量恢复为默认值\",\"$ go env -u GO111MODULE\",\"执行go help environment可以查看每一个环境变量的介绍\",\"$ go help environment The go command and the tools it invokes consult environment variables for configuration. If an environment variable is unset or empty, the go command uses a sensible default setting. To see the effective setting of the variable <NAME>, run 'go env <NAME>'. To change the default setting, run 'go env -w <NAME>=<VALUE>'. Defaults changed using 'go env -w' are recorded in a Go environment configuration file stored in the per-user configuration directory, as reported by os.UserConfigDir. The location of the configuration file can be changed by setting the environment variable GOENV, and 'go env GOENV' prints the effective location, but 'go env -w' cannot change the default location. See 'go help env' for details. General-purpose environment variables: GO111MODULE Controls whether the go command runs in module-aware mode or GOPATH mode. May be \\\"off\\\", \\\"on\\\", or \\\"auto\\\". See https://golang.org/ref/mod#mod-commands. GCCGO The gccgo command to run for 'go build -compiler=gccgo'. GOARCH The architecture, or processor, for which to compile code. Examples are amd64, 386, arm, ppc64. GOBIN The directory where 'go install' will install a command. GOCACHE The directory where the go command will store cached information for reuse in future builds. ......\",\"下面介绍一些常用的环境变量\",\"GOVERSION\",\"该环境变量的值取决于 go 语言的版本，而版本号来自于$GOROOT/VERSION文件，该文件记录了当前 go 的版本号和构建时间。\",\"$ cat $GOROOT/VERSION go1.21.3 time 2023-10-09T17:04:35Z\",\"runtime.Version变量值与GOVERSION的值相同，且该环境变量无法被修改。\",\"GOENV\",\"$GOROOT目录下会有一个默认的名为go.env的配置文件\",\"$ cat $GOROOT/go.env # This file contains the initial defaults for go command configuration. # Values set by 'go env -w' and written to the user's go/env file override these. # The environment overrides everything else. # Use the Go module mirror and checksum database by default. # See https://proxy.golang.org for details. GOPROXY=https://proxy.golang.org,direct GOSUMDB=sum.golang.org # Automatically download newer toolchains as directed by go.mod files. # See https://go.dev/doc/toolchain for details. GOTOOLCHAIN=auto\",\"它的格式就是简单的key=value这种形式，通过go env -w key=value命令修改的环境变量值将会被写入配置文件中。不过也可以不使用默认的配置文件，GOENV环境变量可以手动指定env配置文件的地址，并且GOENV环境变量的值只能被操作系统的环境变量所覆盖，无法被go env -w命令所修改。\",\"GOHOSTARCH\",\"代表着本机的 CPU 架构，只是用来展示，该环境变量的值并不是从配置文件中读取，也无法被修改。\",\"GOHOSTOS\",\"代表着本机的操作系统，只是用来展示，该环境变量的值并不是从配置文件中读取，也无法被修改。\",\"GOOS\",\"编译时，GOOS的值将会决定将源代码编译成哪个目标系统的二进制文件，默认值是GOHOSTOS，也就是本机的操作系统，它有以下几个可选项\",\"linux\",\"darwin\",\"windows\",\"netbsd\",\"aix\",\"android\",\"实际支持的操作系统并不止这些，使用命令，go tool dist list，查看所有支持的值\",\"$ go tool dist list | awk -F '/' '{print $1}' | awk '!seen[$0]++' aix android darwin dragonfly freebsd illumos ios js linux netbsd openbsd plan9 solaris wasip1 windows\",\"GOARCH\",\"编译时，GOARCH的值将会决定编译时采用哪个 CPU 架构的指令，默认值是GOHOSTARCH，也就是本机的 CPU 架构，它有以下几个可选项\",\"amd64\",\"386\",\"arm\",\"ppc64\",\"实际上支持的架构不止这些，使用go tool dist list 命令，查看所有支持的值\",\"$ go tool dist list | awk -F '/' '{print $2}' | awk '!seen[$0]++' ppc64 386 amd64 arm arm64 riscv64 wasm loong64 mips mips64 mips64le mipsle ppc64le s390x\",\"需要注意的是，GOOS和GOARCh并不能随意的进行组合，部分操作系统只能支持特定的 CPU 架构。\",\"GOROOT\",\"GOROOT代表 go 语言安装位置的根目录， GOROOT的值无法被直接修改，且只能被操作系统的环境变量所覆盖。\",\"$ ls $GOROOT -1 api bin codereview.cfg CONTRIBUTING.md doc go.env lib LICENSE misc PATENTS pkg README.md SECURITY.md src test VERSION\",\"在根目录下有以下几个比较重要的文件夹或文件\",\"lib，存放一些依赖，目前而言只有一个包含世界各国时区信息的库，位于$GOROOT/lib/time，编译后的二进制文件不会包含这些时区信息。\",\"pkg，存放一些工具库和头文件，比如go tool命令会在$GOROOT/pkg/tool目录下寻找 go 工具链的二进制文件\",\"bin，存放二进制文件，默认情况下只有go和gofmt这两个可执行文件，$GOROOT/bin应该被添加到系统变量中，否则无法使用 go 命令。\",\"src，存放 go 源代码\",\"VERSION，该文件存放着 go 语言的版本信息\",\"go.env，该文件是默认的env配置文件\",\"GOPATH\",\"GOPATH默认值是$HOME/go，该环境变量的值指定了在解析import语句时，去哪里寻找导入的文件。在早期没有 gomod 的时候，GOPATH是专门用来存放各种第三方库的，其结构如下\",\"GOPATH=/home/user/go /home/user/go/ src/ foo/ bar/ (go code in package bar) x.go quux/ (go code in package main) y.go bin/ quux (installed command) pkg/ linux_amd64/ foo/ bar.a (installed package object)\",\"gomod 诞生之后，GOPATH就只是一个用来存放go get下载的依赖的地方，以及用于存放go install下载并编译的二进制文件。需要注意的是GOPATH的位置不能与GOROOT相同，否则将不会起任何作用。\",\"$ go env GOBIN warning: GOPATH set to GOROOT (/home/user/go) has no effect\",\"截至目前笔者写下本文时，go 语言版本已经来到了 go1.21.3，除了非常古老的项目，基本上没有人会再使用 gopath 来管理依赖了。\",\"GOBIN\",\"GOBIN是用于存放go install下载并编译的第三方二进制可执行文件，其默认值为$GOPATH/bin。与$GOROOT/bin一样，该目录应该被添加到操作系统的环境变量中，否则的话也无法使用GOBIN目录的下的二进制文件。\",\"GOMODCACHE\",\"GOMODCACHE表示存放go get下载的依赖所存放的位置，默认值为$GOPATH/pkg/mod。其存放格式如下\",\"$GOMODCACHE/domain/username/project@verion\",\"在同级目录下还会有一个名为sumdb的文件夹，用于存放依赖校验和数据库的相关信息。\",\"GOCACHE\",\"存放用于编译的缓存信息，其默认值为$HOME/.cache/go-build，该目录下会生成一个README文件。\",\"$ cat $(go env GOCACHE)/README This directory holds cached build artifacts from the Go build system. Run \\\"go clean -cache\\\" if the directory is getting too large. Run \\\"go clean -fuzzcache\\\" to delete the fuzz cache. See golang.org to learn more about Go.\",\"每一次build都会产生许多文件，go 会缓存这些文件以便于下一次编译时复用。\",\"GOTEMPDIR\",\"用于编译时产生的临时文件，例如go run要运行的临时二进制文件。其默认值为操作系统所指定的临时目录，在 mac 或 linux 上为/tmp，windows 上为%TEMP%，也可以修改为用户所指定的位置。\",\"GO111MODULE\",\"该环境变量表示使用何种方式来管理 go 项目的依赖，有以下三个可用的值\",\"off，关闭 gomod，采用 gopath，并且会忽略一切go.mod文件\",\"on，采用 gomod，不使用 gopath（默认）。\",\"auto，自动感知，如果项目文件包含go.mod就会采用 gomod 来进行管理\",\"提示\",\"为什么叫GO111MODULE，不直接叫GOMODULE，因为 gomod 是在 go1.11 版本第一次推出的。\",\"GOPROXY\",\"go 模块代理，默认值为https://proxy.golang.org,direct，url 采用逗号分隔，direct意思是直接使用 VCS 跳过模块代理，只有在前者无法访问时才会执行后者，还有一个可用的选项是off，表示禁止下载任何模块。除此之外，GOPROXY还可以是文件地址，比如\",\"GOPROXY=file://$(go env GOMODCACHE)/cache/download\",\"通过go get -x可以查看依赖下载过程所执行的命令，就可以知晓有没有走代理。\",\"$ go get -x github.com/spf13/cast # get https://goproxy.cn/github.com/@v/list # get https://goproxy.cn/github.com/spf13/cast/@v/list # get https://goproxy.cn/github.com/spf13/@v/list # get https://goproxy.cn/github.com/spf13/@v/list: 404 Not Found (0.118s) # get https://goproxy.cn/github.com/@v/list: 404 Not Found (0.197s) # get https://goproxy.cn/github.com/spf13/cast/@v/list: 200 OK (0.257s) # get https://goproxy.cn/github.com/spf13/cast/@v/v1.5.1.info # get https://goproxy.cn/github.com/spf13/cast/@v/v1.5.1.info: 200 OK (0.013s) # get https://goproxy.cn/github.com/spf13/cast/@v/v1.5.1.mod # get https://goproxy.cn/github.com/spf13/cast/@v/v1.5.1.mod: 200 OK (0.015s) # get https://goproxy.cn/sumdb/sum.golang.org/supported # get https://goproxy.cn/sumdb/sum.golang.org/supported: 200 OK (0.064s) # get https://goproxy.cn/sumdb/sum.golang.org/lookup/github.com/spf13/cast@v1.5.1 # get https://goproxy.cn/sumdb/sum.golang.org/lookup/github.com/spf13/cast@v1.5.1: 200 OK (0.014s) # get https://goproxy.cn/sumdb/sum.golang.org/tile/8/0/x079/736 # get https://goproxy.cn/sumdb/sum.golang.org/tile/8/0/x079/736: 200 OK (0.016s) # get https://goproxy.cn/sumdb/sum.golang.org/tile/8/0/x068/334 # get https://goproxy.cn/sumdb/sum.golang.org/tile/8/1/266 # get https://goproxy.cn/sumdb/sum.golang.org/tile/8/0/x068/334: 200 OK (0.023s) # get https://goproxy.cn/sumdb/sum.golang.org/tile/8/1/266: 200 OK (0.028s) go: downloading github.com/spf13/cast v1.5.1 # get https://goproxy.cn/github.com/spf13/cast/@v/v1.5.1.zip # get https://goproxy.cn/github.com/spf13/cast/@v/v1.5.1.zip: 200 OK (0.024s) go: added github.com/spf13/cast v1.5.1\",\"使用模块代理可以有效的提升模块的下载速度，国内用户基本上不使用代理的话无法访问默认的官方代理，目前公开且可信任的第三方模块代理如下\",\"https://proxy.golang.com.cn，开源同时提供企业版服务\",\"https://goproxy.cn，七牛云提供并开源\",\"当然也有开源的自建模块代理方案：goproxy\",\"GOSUMDB\",\"GOSUMDB用于设置依赖库的校验和检测数据库地址，默认是sum.golang.org，当你设置了代理后，go 就会通过代理来访问校验数据库。\",\"GOPRIVATE\",\"GOPRIVATE环境变量用于设置私有的库，匹配的库将不会通过 sumdb 进行校验，也不会走代理，将通过 VCS 直接下载依赖。该支持通配符设置，使用逗号分隔，如下所示，所有后缀为corp.example.com和名为github.com/gohper/myproject的依赖都不会走代理和 sumdb。\",\"GOPRIVATE=*.corp.example.com,github.com/gohper/myproject\",\"也可以直接设置某一用户或组织\",\"GOPRIVATE=github.com/gopher,github.com/myorganization\",\"GONOPROXY\",\"表明哪些依赖不需要走代理，规则与GOPRIVATE一致，并且会覆盖GOPRIVATE。\",\"GONOSUMDB\",\"表明哪些依赖不需要走校验数据库，规则与GOPRIVATE一致，并且会覆盖GOPRIVATE。\",\"GOINSECURE\",\"表示哪些依赖直接使用 VCS 进行下载，规则与GOPRIVATE一致，并且会被GONOPROXY和GONOSUMDB覆盖。\",\"GOVCS\",\"设置模块管理的版本控制系统，默认public:git|hg,private:all。也可以限制指定域名的 VCS，例如\",\"GOVCS=github.com:git,evil.com:off,*:git|hg\",\"在上述的限制中，github 只能用 git，evil.com 则不允许使用，使用|来可以表示多个 VCS。如果不做任何限制，可以如下设置\",\"GOVCS=*:all\",\"如果不允许任何 VCS 的使用，可以如下设置\",\"GOVCS=*:off\",\"GOWORK\",\"设置工作区是否启用，默认为空即启用，如果设置为off，则不启用，会忽略一切go.work文件。\",\"GOTOOLDIR\",\"设置要使用的 go 工具链的位置，默认是$GOROOT/pkg/tool，默认的工具链也存放在该位置。\",\"GODEBUG\",\"设置调试选项，以键值对的形式控制 go 程序的部分执行行为，例如\",\"GODEBUG=http2client=0,http2server=0\",\"这些设置是为了方便在版本更新过程中而出现了不兼容变化时，方便 go 回退到以前的旧行为，例如在1.21中不再允许panic(nil)这种情况发生，为此，go 官方专门记录了GODEBUG History，前往GODEBUG了解更多细节。\",\"CGO_ENABLED\",\"表示是否开启 cgo，默认为 1，即开启，设置为 0 则关闭。\",\"上面这些环境变量都是比较常用的，对于一些不那么常用的不做过多的介绍，比如 CGO，WASM 之类的，感兴趣可以自己了解。\"]},\"8\":{\"h\":\"build\",\"t\":[\"go 支持的编译器有两种，gccgo 和 gc。gcc 是一个老牌 c/c++的编译器，支持多种语言包括 go，后者 gc 并不是指的是垃圾回收的意思，它指的是 go compiler，go 语言在 go1.5 时完成了自举，gc 是完全由 go 语言编写的编译器，它的源代码位于cmd/compile包下，由于完全是 go 语言实现，所以对于了解和学习其内部机制也十分的方便。在默认情况下，编译器采用 gc 进行编译。顺便提一嘴，go 语言调试器也分两种，gdb 和 dlv，前者是老牌的 c/c++调试器，支持多种语言，包括 go，后者是 go 语言编写的调试器，对 go 语言的支持更友好，它同样也是开源的，推荐使用后者。 build命令的作用就是将 go 源文件编译成可执行的二进制文件，你会体验到相当迅速的编译体验，这也正是 go 语言的特点之一。\",\"$ go build -h usage: go build [-o output] [build flags] [packages] Run 'go help build' for details.\",\"它接收三个参数，一个是-o标志所指示的文件输出路径，一个是用于定义编译行为的构建标志build flas，最后一个就是要编译的包，该参数必须放在最后。下面是一个简单的例子，没用到构建标志。\",\"# Windows $ go build -o .\\\\bin\\\\golearn.exe golearn # macOS / Linux $ go build -o ./bin/golearn golearn\",\"./bin/golearn.exe是表示输出路径，golearn表示要编译的模块，也可以是一个入口文件，或是一个文件夹。比如下面简单的例子是以main.go入口文件作为编译目标。\",\"# Windows $ go build -o .\\\\bin\\\\golearn.exe main.go # macOS / Linux $ go build -o ./bin/golearn main.go\",\"在编译的时候它会忽略掉所有以_test.go结尾的文件，因为些文件按照约定都是测试文件。\",\"除此之外，build命令还支持相当多的构建标志用于控制编译时的一些行为。\",\"-x：输出编译过程中的详细指令\",\"-n：与-x类似，但是区别是它只是输出这些指令，但实际上并不会执行。\",\"-v：输出编译的包\",\"-p：编译过程中的并发数\",\"-a：强制重新构建，即使已经是最新的了。\",\"-compiler：指定使用哪个编译器，gccgo或者gc，后者是由 go 编写的编译器。\",\"-race：开启竞态检测\",\"-msan：开启内存分析\",\"-asan：开启地址分析\",\"-cover：开启代码覆盖检测\",\"-buildmode：指定编译模式，有archive，c-archive，c-shared，default，shared，exe，pie，plugin这几个选项。\",\"-pgo，指定 pgo 文件\",\"-trimpath：消除源文件路径前缀，比如相对路径/var/lib/go/src/main.go，消除后在运行时通过runtime 获取到的文件名就只有相对于模块路径的相对路径/main.go，开启此项后，编译耗时会明显上升，大概在 20-40%左右，取决于文件数量。\",\"-toolexec，在编译前执行的一些 go 命令，格式为-toolexec 'cmd args'。\",\"-gcflags：指定编译器 gc 的一些 tag\",\"-gccgoflags：指定编译器 gccgo 的一些 tag\",\"-ldflags：指定 link 工具的一些 tag\",\"对于一些 ldflags 之类的传递参数，可以传递\\\"-help\\\"这样的参数来获取其可能的值，比如\",\"$ go build -ldflags -help usage: link [options] main.o -B note add an ELF NT_GNU_BUILD_ID note when using ELF -E entry set entry symbol name ......\",\"上述这些是比较常用的，对于其它不怎么常用的可以自行了解。\"]},\"9\":{\"h\":\"gcflags\",\"t\":[\"通过gcflags可以向编译器 gc 传递一些参数以控制特定的行为，它的使用格式是-gcflags=\\\"pattern=args list\\\"，ages list就是参数列表，pattern就是作用范围，有以下几个可用的值\",\"main，入口文件所在的顶级包路径\",\"all，当前模块以及当前模式的所有依赖\",\"std，标准库\",\"cmd，作用cmd包下的所有源文件\",\"通配符，比如.，./...，cmd/...。\",\"该pattern规则适用于所有支持该格式的标志，例如ldflags。通过如下命令查看其参数可用的值\",\"$ go build -gcflags -help usage: compile [options] file.go... -% debug non-static initializers -+ compiling runtime -B disable bounds checking -C disable printing of columns in error messages -D path set relative path for local imports -E debug symbol export -I directory add directory to import search path -K debug missing line numbers -L also show actual source file names in error messages for positions affected by //line directives -N disable optimizations -S print assembly listing -V print version and exit -W debug parse tree after type checking ......\",\"下面介绍几个常用的参数\",\"-S：输出代码的汇编形式\",\"-N：关闭编译优化\",\"-m：输出优化决策\",\"-l：关闭函数内联\",\"-c：编译的并发数\",\"-dwarf：生成 DWARF 标志\",\"比如如果要查看代码的汇编形式，可以使用-S参数，并且还要关闭优化和内联，这样才能还原其本来的形式，如下\",\"$ go build -trimpath -gcflags=\\\"-N -l -S\\\" main.go main.main STEXT size=171 args=0x0 locals=0x58 funcid=0x0 align=0x0 0x0000 00000 (./main.go:9) TEXT main.main(SB), ABIInternal, $88-0 0x0000 00000 (./main.go:9) CMPQ SP, 16(R14) 0x0004 00004 (./main.go:9) PCDATA $0, $-2 0x0004 00004 (./main.go:9) JLS 161 0x000a 00010 (./main.go:9) PCDATA $0, $-1 0x000a 00010 (./main.go:9) PUSHQ BP 0x000b 00011 (./main.go:9) MOVQ SP, BP 0x000e 00014 (./main.go:9) SUBQ $80, SP 0x0012 00018 (./main.go:9) FUNCDATA $0, gclocals·J5F+7Qw7O7ve2QcWC7DpeQ==(SB) 0x0012 00018 (./main.go:9) FUNCDATA $1, gclocals·bDfKCdmtOiGIuJz/x+yQyQ==(SB) 0x0012 00018 (./main.go:9) FUNCDATA $2, main.main.stkobj(SB) 0x0012 00018 (./main.go:10) MOVUPS X15, main..autotmp_0+40(SP) 0x0018 00024 (./main.go:10) LEAQ main..autotmp_0+40(SP), CX 0x001d 00029 (./main.go:10) MOVQ CX, main..autotmp_2+32(SP)\"]},\"10\":{\"h\":\"ldflags\",\"t\":[\"通过 ldflags 可以向链接器传递一些参数以控制特定的行为，通过如下命令来查看ldflags所有可用的值，接近二三十个。\",\"$ go build -ldflags -help usage: link [options] main.o -B note add an ELF NT_GNU_BUILD_ID note when using ELF -E entry set entry symbol name -H type set header type -I linker use linker as ELF dynamic linker -L directory add specified directory to library path -R quantum set address rounding quantum (default -1) -T int set the start address of text symbols (default -1) -V print version and exit -X definition add string value definition of the form importpath.name=value -a no-op (deprecated) .....\",\"ldflags的-X参数是一个非常实用的功能，它可以在链接时定义指定包的字符串变量的值。通过这个功能，我们可以很方便的在编译时注入一些元信息。而且它只是一个变量，所以也方便在运行时获取，下面是一个简单的例子。\",\"package main import \\\"fmt\\\" var ( Version string ) func main() { fmt.Println(Version) }\",\"执行命令\",\"go build -ldflags \\\"-X main.Version=$(git describe --always)\\\" main.go\",\"运行后就会输出 git 提交的 sha1 校验和。\",\"5e3fd7a\",\"另外一些比较实用的参数有\",\"-w：不生成 DWARF，这是一种方便调试源码的信息。\",\"-s：禁用符号表\",\"这两个通常放一块用，可以显著的减小编译后的二进制文件的体积，大概有 40%-50%左右，缺点也很明显，没法进行调试，下面是一个例子。\",\"$ go build -ldflags=\\\"-w -s\\\" main.go\"]},\"11\":{\"h\":\"交叉编译\",\"t\":[\"go 语言编译总共有两大特点，第一个就是快，另外一大特点就是交叉编译，交叉编译指的是可以在本地编译成其它系统的目标代码，例如在windows上编译成linux或darwin上的二进制文件，反过来也是一样。交叉编译支持的语言非常多，这并不是什么稀奇事，但是 go 语言交叉编译非常的简单，只需要以下两步\",\"设置 GOOS 环境变量，选择你的目标操作系统\",\"设置 GOARCH 环境变量，选择你的目标 CPU 架构\",\"像平时一样使用go build进行编译\",\"整个过程非常短，不需要使用额外的工具或配置，而且速度跟平时一样快。如下所示\",\"build_linux: SET CGO_ENABLED=0 SET GOOS=\\\"linux\\\" SET GOARCH=\\\"amd64\\\" go build -o golearn main.go build_mac: SET CGO_ENABLED=0 SET GOOS=\\\"darwin\\\" SET GOARCH=\\\"amd64\\\" go build -o golearn main.go build_win: SET CGO_ENABLED=0 SET GOOS=\\\"win\\\" SET GOARCH=\\\"amd64\\\" go build -o golearn.exe main.go .PHONY: build_linux \\\\ build_mac \\\\ build_win\",\"第一步SET CGO_ENABLED=0这一项禁用了 cgo，一旦你的代码中使用了 cgo，那么就无法正常使用交叉编译。第二步SET GOOS设置目标系统，可选的有linux，darwin，windwos，netbsd。第三步设置 CPU 架构，SET GOARCH，可选的有amd64，386，arm，ppc64。最后一步就是像往常一样进行编译。\"]},\"12\":{\"h\":\"编译控制\",\"t\":[\"build命令可以通过tags来达到控制编译的效果，它以一种指令的方式存在于源代码中，看个例子，product.go文件\",\"// +build product package main import \\\"fmt\\\" func main() { fmt.Println(\\\"product\\\") }\",\"debug.go文件\",\"// +build debug package main import \\\"fmt\\\" func main() { fmt.Println(\\\"debug\\\") }\",\"它们都有一个// +build指令，表示它们在什么情况下才会被编译。其基本格式为\",\"// +build tag1 tag2 package pkg_name\",\"有几个必须遵守的规则\",\"//与+build必须隔一个空格\",\"它必须位于包声明的上方\",\"与包声明必须隔一行空行\",\"除此之外，它还可以通过简单的间隔来达到逻辑控制的目的，空格表示 OR，逗号表示 AND，！表示 NOT。比如下面这个例子\",\"// +build windows linux package pkg_name\",\"表示在 windows 或者 linux 平台下会将当前文件编译进去。\",\"// +build windows,amd64,!cgo linux,i386,cgo package pkg_name\",\"这个例子表示的是在 windows 平台 amd64 架构且未启用 cgo 或者是 linux 平台 i386 架构且启用了 cgo 才会将其编译。如果你只是单纯的不想让某个文件不参加编译，可以使用ignore。\",\"// +build ignore package pkg_name\",\"也可以存在多行指令\",\"// +build windows // +build amd64 package pkg_name\",\"多行指令以 AND 方式进行处理。对于平台和架构这些 tag，在编译时 go 会自动传入，我们也可以传入自定义的 tag，就拿最开始的拿两个文件举例\",\"$ go build -tags=\\\"debug\\\" . && ./golearn.exe debug $ go build -tags=\\\"product\\\" . && ./golearn.exe product\",\"可以看到传入不同 tag 时输出不同，编译控制的目的也就达到了。\"]},\"13\":{\"h\":\"run\",\"t\":[\"run命令与build都会将源代码进行编译，不同的是run命令在编译完成后会直接运行。 run命令为了加快编译速度，在编译过程中不会生成调试信息，所以也就不支持调试，并且只是生成一个临时的二进制文件，通常存放在GOTMEPDIR目录下，例如/temp/go-build2822241271/b001/exe/main.exe。\",\"$ go run -h usage: go run [build flags] [-exec xprog] package [arguments...] Run 'go help run' for details.\",\"它也支持build命令的构建标志，还提供了一个参数-exec来指明由哪个程序来运行二进制文件，[arguments...]指的是程序的运行参数。下面是一个例子\",\"package main import ( \\\"fmt\\\" \\\"os\\\" ) var ( Version string ) func main() { fmt.Println(Version) fmt.Println(os.Args[1:]) }\",\"使用go run运行\",\"$ go run -ldflags=\\\"-X main.Version=$(git describe --always)\\\" main.go hello 5e3fd7a [hello]\",\"总体上使用起来与go build没有太大的差别，就不再做过多的赘述。\"]},\"14\":{\"h\":\"tool\",\"t\":[\"tool命令本身没有任何功能，它的作用是直接调用cmd/目录下的工具，例如cmd/compile就是自带的编译器。通过go tool可以直接调用这些工具，不用去手动执行这些工具的二进制文件。\",\"$ go tool -h usage: go tool [-n] command [args...]\",\"使用-n参数打印出其所有支持的命令参数\",\"$ go tool -n addr2line asm buildid cgo compile covdata cover doc fix link nm objdump pack pprof test2json trace vet\",\"这些工具存放在GOROOT/pkg/tool目录下，并且根据操作系统和 CPU 架构对工具进行分组，如下。\",\"$ ls $GOROOT/pkg/tool/windows_amd64/ -1 addr2line.exe* asm.exe* buildid.exe* cgo.exe* compile.exe* covdata.exe* cover.exe* doc.exe* fix.exe* link.exe* nm.exe* objdump.exe* pack.exe* pprof.exe* test2json.exe* trace.exe* vet.exe*\",\"使用go doc cmd/command格式查看每个命令的用法，比如\",\"$ go doc cmd/compile Usage: go tool compile [flags] file... The specified files must be Go source files and all part of the same package. The same compiler is used for all target operating systems and architectures. The GOOS and GOARCH environment variables set the desired target. Flags: -D path Set relative path for local imports. -I dir1 -I dir2 Search for imported packages in dir1, dir2, etc, after consulting $GOROOT/pkg/$GOOS_$GOARCH. -L Show complete file path in error messages. ...\",\"cmd/compile支持的标志参数，也就是前面提到过的gcflags支持的参数。go tool compile与go build的不同在于，前者只是负责编译，并且只能以文件作为参数，后者可以以文件夹，包，文件作为参数，而且不仅做了编译源代码这一件事，还负责链接文件，清除无用的文件等，前者是后者的一部分。我们可以打印build过程中执行的命令\",\"$ go build -n main.go # # internal/goarch # mkdir -p $WORK\\\\b004\\\\ cat >$WORK\\\\b004\\\\importcfg << 'EOF' # internal # import config EOF \\\"/golang/pkg/tool/windows_amd64/compile.exe\\\" -o \\\"$WORK/b004/_pkg_.a\\\" -trimpath \\\"$WORK/b004=>\\\" -p internal/goarch -std -+ -complete -buildid 3gunEkUExGdhOPa2rFsh/3gunEkUExGdhOPa2rFsh -goversion go1.21.0 -c=4 -nolocalimports -importcfg \\\"$WORK/b004/importcfg\\\" -pack \\\"/golang/src/internal/goarch/goarch.go\\\" \\\"/golang/src/internal/goarch/goarch_amd64.go\\\" \\\"/golang/src/internal/goarch/zgoarch_amd64.go\\\" \\\"/golang/pkg/tool/windows_amd64/buildid.exe\\\" -w \\\"$WORK/b004/_pkg_.a\\\" # internal ...\",\"在过程中可以看到有这么一段/golang/pkg/tool/windows_amd64/compile.exe，正是调用了编译器。除了compile之外，还有很多工具可以调用，很多 go 命令实际上都是它们的别名。\"]},\"15\":{\"h\":\"clean\",\"t\":[\"clean命令用于清除编译过程中生成的对象文件\",\"$ go clean -h usage: go clean [clean flags] [build flags] [packages] Run 'go help clean' for details.\",\"它支持以下标志\",\"-i：清除对应的归档文件或二进制文件\",\"-n：打印将要清除过程要执行的命令但实际并不执行\",\"-x：打印清除过程中的要执行的命令并执行\",\"-r：通过import path递归的进行清除\",\"-cache，清除所有go build产生的缓存\",\"-testcache：清除所有产生的测试缓存\",\"-modcache：清除所有下载的模块缓存\",\"-fuzzcache：清除fuzz test产生的缓存。\",\"当使用go tool compile时，是直接调用编译器命令，并不像go build那会做很多善后处理，就会产生对象文件。比如执行如下的命令\",\"go tool compile -N -S -l main.go\",\"就会生成一个名为main.o的文件，使用go clean命令清除即可。或者使用-n参数打印将要执行的命令。\",\"$ go clean -n rm -f golearn golearn.exe golearn golearn.exe golearn.test golearn.test.exe golearn.test golearn.test.exe api api.exe main main.exe\",\"清除编译缓存，它会删除GOCACHE目录下产生的编译缓存\",\"$ go clean -cache -n rm -r /cache/00 /cache/01 /cache/02\",\"清除 fuzz test 产生的缓存，这些缓存默认存放在GOCACHE/fuzz/目录下\",\"$ go clean -fuzzcache -n rm -rf /cache/fuzz\"]},\"16\":{\"h\":\"fix\",\"t\":[\"go 语言截至到撰写本文时已经有十年了，在语言不断更新和修改的过程中，难免会出现一些因 API 的变化而导致的不兼容，fix命令就是为此而生的，它会检测源文件中那些已经过时的 API 并将其替换为新的 API。\",\"$ go fix -h usage: go fix [-fix list] [packages] Run 'go help fix' for details.\",\"它支持文件夹，文件名，目录作为参数，接收-fix标志来传递参数以表明进行何种修改，可以通过got tool fix -help命令查看可用的值\",\"$ go tool fix -help usage: go tool fix [-diff] [-r fixname,...] [-force fixname,...] [path ...] -diff display diffs instead of rewriting files -force string force these fixes to run even if the code looks updated -go string go language version for files -r string restrict the rewrites to this comma-separated list Available rewrites are: buildtag Remove +build comments from modules using Go 1.18 or later cftype Fixes initializers and casts of C.*Ref and JNI types context Change imports of golang.org/x/net/context to context egl Fixes initializers of EGLDisplay eglconf Fixes initializers of EGLConfig gotypes Change imports of golang.org/x/tools/go/{exact,types} to go/{constant,types} jni Fixes initializers of JNI's jobject and subtypes netipv6zone Adapt element key to IPAddr, UDPAddr or TCPAddr composite literals. https://codereview.appspot.com/6849045/ printerconfig Add element keys to Config composite literals.\",\"下面举个例子，源代码中用到了golang.org/x/net/context包\",\"package main import ( \\\"fmt\\\" \\\"golang.org/x/net/context\\\" ) func main() { background := context.Background() fmt.Println(background.Err()) }\",\"使用go fix修正，将其替换为标准库中的context包，我们可以如下命令来进行替换\",\"$ go fix -fix context main.go\",\"也可以不替换，看看前后文件变化。\",\"$ go tool fix -r context -diff main.go main.go: fixed context diff main.go fixed/main.go --- main.go +++ fixed/main.go @@ -1,8 +1,8 @@ package main import ( + \\\"context\\\" \\\"fmt\\\" - \\\"golang.org/x/net/context\\\" ) func main() {\",\"go 语言诞生了十多年只有九个可用的替换参数，可见兼容性保持的还算可以。\"]},\"17\":{\"h\":\"fmt\",\"t\":[\"fmt命令是 go 语言自带的格式化工具，用于格式化 go 源代码文件。\",\"$ go fmt -h usage: go fmt [-n] [-x] [packages] Run 'go help fmt' for details.\",\"通过命令go doc gofmt查看其详细文档\",\"$ go doc cmd/gofmt Gofmt formats Go programs. It uses tabs for indentation and blanks for alignment. Alignment assumes that an editor is using a fixed-width font. Usage: gofmt [flags] [path ...] The flags are: -d Do not print reformatted sources to standard output. If a file's formatting is different than gofmt's, print diffs to standard output. -e Print all (including spurious) errors. -l Do not print reformatted sources to standard output. If a file's formatting is different from gofmt's, print its name to standard output. -r rule Apply the rewrite rule to the source before reformatting. -s Try to simplify code (after applying the rewrite rule, if any). -w Do not print reformatted sources to standard output. If a file's formatting is different from gofmt's, overwrite it with gofmt's version. If an error occurred during overwriting, the original file is restored from an automatic backup.\",\"gofmt使用tab进行缩进，空格进行对齐，在默认情况下格式化后的代码将会输出到标准输出中，并非覆盖到原文件。go fmt命令实际上用到的是gofmt命令，它是一个独立的二进制文件，位于GOROOT/bin目录下。\",\"$ ls $GOROOT/bin -1 go.exe* gofmt.exe*\",\"给go fmt命令加上-n标志就可以知晓其将要执行的指令。\",\"$ go fmt main.go /golang/bin/gofmt.exe -l -w main.go\",\"可以看出go fmt其实就是是gofmt -l -w的别名，gofmt命令有以下参数\",\"-d：输出格式化前后的文件差异\",\"-e：输出所有错误\",\"-l：输出发生变化的文件名\",\"-r：应用格式化规则\",\"-s：尝试简化代码\",\"-w：覆盖源文件，如果发生错误就恢复备份\",\"假设现在有如下源文件\",\"$ cat main.go package main import \\\"fmt\\\" func main() { fmt.Println(\\\"hello world!\\\")}\",\"通过-d参数可以预览其变化\",\"$ gofmt -d main.go diff main.go.orig main.go --- main.go.orig +++ main.go @@ -3,5 +3,5 @@ import \\\"fmt\\\" func main() { -fmt.Println(\\\"hello world!\\\")} - + fmt.Println(\\\"hello world!\\\") +}\",\"-l参数将会输出将要修改的文件名\",\"$ gofmt -l . main.go\",\"如果存在语法错误的话，-e参数可以输出的更详细\",\"$ gofmt -d -e main.go main.go:6:27: missing ',' in argument list main.go:6:28: expected operand, found newline main.go:7:2: expected ')', found 'EOF' main.go:7:2: expected ';', found 'EOF' main.go:7:2: expected ';', found 'EOF' main.go:7:2: expected '}', found 'EOF' main.go:7:2: missing ',' in argument list\",\"-w会将修改应用到源文件中\",\"$ gofmt -l -w . main.go $ cat main.go package main import \\\"fmt\\\" func main() { fmt.Println(\\\"hello world!\\\") }\",\"你可以发现作为一个格式化工具，gofmt完全没有提供任何的自定义配置，而专为美化 js 代码的格式化器prettify它就提供了相当多的配置用于格式化代码，这里可以体现出 go 官方的一个态度，别想搞什么个性化，所有人代码风格最好都是一致的，至少有一个好处就是在阅读代码的时候不用去适应他人的习惯。不过其实它还是保留了一个自定义项的，就是格式化代码的替换规则，规则是可以自定义的，格式如下\",\"pattern -> replacement\",\"比如去除冗余的括号\",\"(a) -> a\",\"查看文件变更\",\"$ gofmt -r \\\"(a) -> a\\\" -d -l . main.go diff main.go.orig main.go --- main.go.orig +++ main.go @@ -3,5 +3,5 @@ import \\\"fmt\\\" func main() { - fmt.Println((\\\"hello world!\\\")) + fmt.Println(\\\"hello world!\\\") }\",\"可以看到gofmt会将冗余的括号删除掉。\"]},\"18\":{\"h\":\"get\",\"t\":[\"get命令绝对是 go 开发过程中最常用的了，它的作用是将指定地址包源代码下载到GOMODCACHE所对应的目录中。\",\"$ go get -h usage: go get [-t] [-u] [-v] [build flags] [packages] Run 'go help get' for details.\",\"-u：尝试更新包的次要版本以及补丁版本，如果涉及到主版本的改变，比如v1->v2，将不会更新。\",\"-t：更新测试中的依赖版本\",\"-v：输出被编译的包，实际上属于build flags的参数之一\",\"在古早时期，go get的作用和go install类似，它会下载并编译这些包，然而随着 go 模块的诞生与完善，这一部分的作用渐渐的被废弃了，get命令现在最常用的作用就是对 go 模块下载并解析依赖，所以你可以看到go get命令还支持build flags这类构建标志，并且如果你尝试在模块外像使用go install一样使用go get，它会提示你此用法已经被废弃了。\",\"$ go get github.com/wire/wire go: go.mod file not found in current directory or any parent directory. 'go get' is no longer supported outside a module. To build and install a command, use 'go install' with a version, like 'go install example.com/cmd@latest' For more information, see https://golang.org/doc/go-get-install-deprecation or run 'go help get' or 'go help install'.\",\"至于为什么在文档描述中还保留这些也是不得而知，翻看get命令的源代码，你还会发现它保留了以前的那些 flag。\",\"var ( getD = CmdGet.Flag.Bool(\\\"d\\\", true, \\\"\\\") getF = CmdGet.Flag.Bool(\\\"f\\\", false, \\\"\\\") getFix = CmdGet.Flag.Bool(\\\"fix\\\", false, \\\"\\\") getM = CmdGet.Flag.Bool(\\\"m\\\", false, \\\"\\\") getT = CmdGet.Flag.Bool(\\\"t\\\", false, \\\"\\\") getU upgradeFlag getInsecure = CmdGet.Flag.Bool(\\\"insecure\\\", false, \\\"\\\") // -v is cfg.BuildV )\",\"回到正题，get命令会将指定的包的源代码下载到本地的全局依赖目录中，也就是GOCACHE对应的目录，然后将信息记录到go.mod和go.sum文件中，前者负责记录版本，后者负责记录 sha1 校验和确保安全性。get命令实际上是基于 VCS，也就是本地的版本控制系统，总共支持下面几个\",\"git\",\"hg (Mercurial)\",\"bzr (Bazaar)\",\"svn\",\"fossil\",\"其中，默认只支持 git 和 hg，可以GOVCS中进行配置，格式如下\",\"GOVCS=github.com:git,example.com:hg,*:git|hg,*:all\",\"GOVCS仅支持 git 和 hg 作为 VCS，其它三个需要在GOPRIVATE中配置。\",\"go get命令总共有下面几种用法，可以直接将依赖地址作为参数\",\"$ go get golang.org/x/net\",\"也可以指定版本\",\"$ go get golang.org/x/net@0.17.0\",\"指定最新版本\",\"$ go get golang.org/x/net@latest\",\"尝试更新版本\",\"$ go get -u golang.org/x/net\",\"移除某一依赖\",\"$ go get golang.org/x/net@none\",\"上面这些是用来管理普通的依赖，它还可以用来管理不那么普通的依赖，比如更新 go 语言的版本\",\"$ go get go@latest go: updating go.mod requires go >= 1.21.3; switching to go1.21.3 go: downloading go1.21.3 (windows/amd64) go: upgraded go 1.21.0 => 1.21.3\",\"甚至还可以用来更新 go 工具链的版本\",\"$ go get toolchain@latest\",\"当你使用go get更新 go 和工具链版本时，它们会在GOMODCACHE/golang.org/目录下安装新版本的 go\",\"$ ls $(go env GOMODCACHE)/golang.org -1 'toolchain@v0.0.1-go1.21.3.windows-amd64'/ x/\",\"这时候再手动修改一下GOROOT就可以切换到指定的版本了。\"]},\"19\":{\"h\":\"install\",\"t\":[\"install命令与get命令类似，它们都是用于下载第三方的依赖，不过区别在于get命令下载的是源码，而install命令会将源码编译成本机可执行的二进制文件，二进制文件存放路径首先在GOBIN目录下，其次是GOPATH/bin。该命令的主要功能是用来下载第三方公开的一些命令行工具，得益于 go 语言的编译速度和可移植性，并不需要下载二进制文件，而是直接下载源代码然后在本地进行编译。\",\"$ go install -h usage: go install [build flags] [packages] Run 'go help install' for details.\",\"install命令接收构建标志和包名作为参数，在 gomod 开启的情况下，包名必须携带版本号。例如下载 delve 调试器\",\"$ go install -x github.com/go-delve/delve/cmd/dlv@latest # get https://goproxy.cn/github.com/@v/list # get https://goproxy.cn/github.com/go-delve/delve/cmd/@v/list # get https://goproxy.cn/github.com/go-delve/delve/cmd/dlv/@v/list # get https://goproxy.cn/github.com/go-delve/delve/@v/list # get https://goproxy.cn/github.com/go-delve/@v/list # get https://goproxy.cn/github.com/@v/list: 404 Not Found (0.014s) # get https://goproxy.cn/github.com/go-delve/delve/cmd/@v/list: 404 Not Found (0.027s) # get https://goproxy.cn/github.com/go-delve/delve/cmd/dlv/@v/list: 404 Not Found (0.027s) # get https://goproxy.cn/github.com/go-delve/delve/@v/list: 200 OK (0.027s) # get https://goproxy.cn/github.com/go-delve/@v/list: 404 Not Found (0.027s) WORK=/home/user/tmp/go-build2033992495 mkdir -p $WORK/b001/ cat >/home/user/tmp/go-build2033992495/b001/importcfg.link << 'EOF' # internal packagefile github.com/go-delve/delve/cmd/dlv=/home/user/.cache/go-build/f1/f11d552287458c0fce625abe50bf928c487064c36bbb1251ad8b1968772c3e4b-d ...... ...... mkdir -p /home/wyh/gomod/bin/ mv $WORK/b001/exe/a.out /home/wyh/gomod/bin/dlv rm -r $WORK/b001/\",\"它首先会将源代码下载到GOMODCACHE所存放的路径，这一点跟get命令一致，然后切换到临时工作目录，对其进行编译，编译完成后将二进制文件移动到GOPATH/bin目录下，最后再删除临时文件夹。install命令还有一个限制就是下载的包必须是该项目的入口包，也就是说必须要包含main.go入口文件，否则的话会提示你无法安装。例如，使用go install下载 gin\",\"$ go install -x github.com/gin-gonic/gin@latest # get https://goproxy.cn/github.com/@v/list # get https://goproxy.cn/github.com/gin-gonic/gin/@v/list # get https://goproxy.cn/github.com/gin-gonic/@v/list # get https://goproxy.cn/github.com/@v/list: 404 Not Found (0.022s) # get https://goproxy.cn/github.com/gin-gonic/gin/@v/list: 200 OK (0.027s) # get https://goproxy.cn/github.com/gin-gonic/@v/list: 404 Not Found (0.028s) package github.com/gin-gonic/gin is not a main package\",\"gin 是一个 web 框架依赖库，并不是一个命令行工具，自然也就没有入口文件，所以也就会安装失败。\"]},\"20\":{\"h\":\"list\",\"t\":[\"list命令会列出指定位置的包，一行一个，并且支持自定义格式化输出，支持很多的参数，使用它的前提是必须在一个支持 gomod 的项目内。\",\"$ go list -h usage: go list [-f format] [-json] [-m] [list flags] [build flags] [packages] Run 'go help list' for details.\",\"它支持的参数如下\",\"-f：格式化参数\",\"-json：json 格式输出\",\"-compiled：展示所有会被编译器编译的包\",\"-deps：展示每一个包及其所依赖的每一个包的名称\",\"-test：展示每一个包的测试包\",\"-e：遇到错误的包时正常输出\",\"-find：不解析这些包的依赖关系\",\"-export：使用该参数时，设置结构体Package.Export字段值为包含指定包的最新的导出信息的文件，以及设置Package.BuildID字段值为包的BuildID，主要是格式化输出用。\",\"模块信息参数，\",\"-m：输出模块而不是输出包\",\"-versions：展示一个模块所有可用的信息\",\"-retracted：展示一个模块的撤回版本\",\"[packages]参数可以是一个指定的包名，或者文件夹，也可以是all，表示任何地方，当使用-m参数时，all表示当前模块引用的所有依赖。\",\"例如，当前文件只有一个main.go文件，且只有一行输出\\\"hello world\\\"的代码，执行go list -deps .后，它输出了从当前项目到fmt及其引用的所有依赖的包。\",\"$ ls go.mod go.sum main.go $ cat main.go package main import \\\"fmt\\\" func main() { fmt.Println(\\\"hello world\\\") } $ go list -deps . internal/goarch unsafe internal/abi internal/unsafeheader internal/cpu internal/bytealg internal/coverage/rtcov internal/godebugs internal/goexperiment internal/goos runtime/internal/atomic runtime/internal/math runtime/internal/sys runtime ...... ...... path io/fs os fmt golearn\",\"或者输出当前项目下所有的模块依赖\",\"$ go list -m all golearn cloud.google.com/go v0.26.0 github.com/246859/containers v0.0.1 github.com/246859/river v0.1.0 => D:\\\\WorkSpace\\\\Code\\\\riverdb github.com/BurntSushi/toml v0.3.1 github.com/Jleagle/steam-go v0.0.0-20230725082712-1053b441b1f2 github.com/Jleagle/unmarshal-go v0.0.0-20210227002040-694f544f9265 github.com/KyleBanks/depth v1.2.1 github.com/Microsoft/go-winio v0.6.1 github.com/PuerkitoBio/purell v1.1.1 github.com/PuerkitoBio/urlesc v0.0.0-20170810143723-de5bf2ad4578 github.com/andeya/ameda v1.5.3 github.com/andeya/goutil v1.0.1 ...\"]},\"21\":{\"h\":\"format\",\"t\":[\"list命令的输出是以行为单位，每一个行输出都是一个包。官方提供了可以让我们自定义行输出格式的参数-f，它所接受的值也就是template/text模板引擎包所定义的模板语法，例如下面的示例\",\"-f \\\"package {{ .Dir }} {{ .Name }}\\\"\",\"每一个迭代的包都将以下面结构体的形式传入，该结构体中的所有字段都可以作为模板参数。\",\"type Package struct { Dir string // directory containing package sources ImportPath string // import path of package in dir ImportComment string // path in import comment on package statement Name string // package name Doc string // package documentation string Target string // install path Shlib string // the shared library that contains this package (only set when -linkshared) Goroot bool // is this package in the Go root? Standard bool // is this package part of the standard Go library? Stale bool // would 'go install' do anything for this package? StaleReason string // explanation for Stale==true Root string // Go root or Go path dir containing this package ConflictDir string // this directory shadows Dir in $GOPATH BinaryOnly bool // binary-only package (no longer supported) ForTest string // package is only for use in named test Export string // file containing export data (when using -export) BuildID string // build ID of the compiled package (when using -export) Module *Module // info about package's containing module, if any (can be nil) Match []string // command-line patterns matching this package DepOnly bool // package is only a dependency, not explicitly listed DefaultGODEBUG string // default GODEBUG setting, for main packages // Source files GoFiles []string // .go source files (excluding CgoFiles, TestGoFiles, XTestGoFiles) CgoFiles []string // .go source files that import \\\"C\\\" CompiledGoFiles []string // .go files presented to compiler (when using -compiled) IgnoredGoFiles []string // .go source files ignored due to build constraints IgnoredOtherFiles []string // non-.go source files ignored due to build constraints CFiles []string // .c source files CXXFiles []string // .cc, .cxx and .cpp source files MFiles []string // .m source files HFiles []string // .h, .hh, .hpp and .hxx source files FFiles []string // .f, .F, .for and .f90 Fortran source files SFiles []string // .s source files SwigFiles []string // .swig files SwigCXXFiles []string // .swigcxx files SysoFiles []string // .syso object files to add to archive TestGoFiles []string // _test.go files in package XTestGoFiles []string // _test.go files outside package // Embedded files EmbedPatterns []string // //go:embed patterns EmbedFiles []string // files matched by EmbedPatterns TestEmbedPatterns []string // //go:embed patterns in TestGoFiles TestEmbedFiles []string // files matched by TestEmbedPatterns XTestEmbedPatterns []string // //go:embed patterns in XTestGoFiles XTestEmbedFiles []string // files matched by XTestEmbedPatterns // Cgo directives CgoCFLAGS []string // cgo: flags for C compiler CgoCPPFLAGS []string // cgo: flags for C preprocessor CgoCXXFLAGS []string // cgo: flags for C++ compiler CgoFFLAGS []string // cgo: flags for Fortran compiler CgoLDFLAGS []string // cgo: flags for linker CgoPkgConfig []string // cgo: pkg-config names // Dependency information Imports []string // import paths used by this package ImportMap map[string]string // map from source import to ImportPath (identity entries omitted) Deps []string // all (recursively) imported dependencies TestImports []string // imports from TestGoFiles XTestImports []string // imports from XTestGoFiles // Error information Incomplete bool // this package or a dependency has an error Error *PackageError // error loading package DepsErrors []*PackageError // errors loading dependencies } type PackageError struct { ImportStack []string // shortest path from package named on command line to this one Pos string // position of error (if present, file:line:col) Err string // the error itself }\",\"如果迭代的是模块，则以下面结构体的形式传入，它的所有字段也可以作为模板参数。\",\"type Module struct { Path string // module path Query string // version query corresponding to this version Version string // module version Versions []string // available module versions Replace *Module // replaced by this module Time *time.Time // time version was created Update *Module // available update (with -u) Main bool // is this the main module? Indirect bool // module is only indirectly needed by main module Dir string // directory holding local copy of files, if any GoMod string // path to go.mod file describing module, if any GoVersion string // go version used in module Retracted []string // retraction information, if any (with -retracted or -u) Deprecated string // deprecation message, if any (with -u) Error *ModuleError // error loading module Origin any // provenance of module Reuse bool // reuse of old module info is safe } type ModuleError struct { Err string // the error itself }\",\"查看所有包\",\"$ go list -f \\\"package {{.Dir}} {{.Name}}\\\" ./... package /golearn main package /golearn/app cmd package /golearn/cmd cmd package /golearn/docs docs package /golearn/tool tool package /golearn/tool_test tool\",\"查看模块\",\"$ go list -m -f \\\"mod {{.Path}} {{.Version}} {{.GoVersion}} {{.GoMod}}\\\" mod golearn 1.21.3 /golearn/go.mod\"]},\"22\":{\"h\":\"mod\",\"t\":[\"go mod是专用于管理 go 模块的命令。\",\"$ go mod help Go mod provides access to operations on modules. Note that support for modules is built into all the go commands, not just 'go mod'. For example, day-to-day adding, removing, upgrading, and downgrading of dependencies should be done using 'go get'. See 'go help modules' for an overview of module functionality. Usage: go mod <command> [arguments] The commands are: download download modules to local cache edit edit go.mod from tools or scripts graph print module requirement graph init initialize new module in current directory tidy add missing and remove unused modules vendor make vendored copy of dependencies verify verify dependencies have expected content why explain why packages or modules are needed Use \\\"go help mod <command>\\\" for more information about a command.\",\"它有下面几个子命令\",\"download：将go.mod文件中所有标明的依赖下载到本地缓存\",\"edit：编辑go.mod文件，它提供的命令行接口主要是提供给其它工具或脚本调用的。\",\"init：在当前目录初始化一个 gomod 项目\",\"tidy：下载缺失的依赖，删除无用的依赖\",\"graph：输出依赖图\",\"verify：验证本地的依赖\",\"why：解释为什么会依赖这些模块\",\"vendor：导出项目依赖到 vendor 目录\"]},\"23\":{\"h\":\"init\",\"t\":[\"$ go help mod init usage: go mod init [module-path]\",\"init命令用于初始化一个 gomod 项目，其唯一的参数是模块路径，日后如果别人要下载你的依赖就需要通过此模块路径来作为依据。它的命名规则一般为\",\"domain_name/user_name/repo_name\",\"比如一般大家都会把项目放在 github 上，所以可以是\",\"github.com/jack/gotour\",\"不太建议使用一些特殊符号作为模块路径。下面看一个使用案例\",\"$ mkdir gotour $ cd gotour $ go mod init \\\"github.com/jack/gotour\\\" go: creating new go.mod: module github.com/jack/gotour\"]},\"24\":{\"h\":\"tidy\",\"t\":[\"$ go help mod tidy usage: go mod tidy [-e] [-v] [-x] [-go=version] [-compat=version]\",\"tidy命令会清除go.mod中的无用依赖项，也就是没有被引用的依赖项，以及会下载哪些了被引用但是不存在的依赖项。它支持以下参数\",\"-v，输出那些被删除的模块依赖\",\"-e，如果过程中发生错误则忽略它继续执行\",\"-x，输出执行过程\",\"-go=version，更新go.mod文件中的 go 版本\",\"-compact=version，保留从指定的主要 Go 版本中所需的任何附加校验和，以便成功加载模块图，并且如果该版本的go命令从不同模块版本中加载任何已导入的包，将导致 tidy 出错。通常很少会用到这个参数，一般在版本版本变更时才会出错，可以前往 stackoverflow 看看这个回答go modules - go mod tidy error message: \\\"but go 1.16 would select\\\" - Stack Overflow\",\"看一个使用例子\",\"$ go mod tidy -v unused github.com/246859/containers unused github.com/246859/river unused github.com/Jleagle/steam-go unused github.com/Jleagle/unmarshal-go unused github.com/KyleBanks/depth unused github.com/Microsoft/go-winio unused github.com/PuerkitoBio/purell unused github.com/PuerkitoBio/urlesc unused github.com/andeya/ameda unused github.com/andeya/goutil unused github.com/asaskevich/govalidator unused github.com/buger/jsonparser unused github.com/bwmarrin/snowflake unused github.com/bytedance/go-tagexpr/v2 unused github.com/bytedance/sonic unused github.com/cespare/xxhash/v2 unused github.com/chenzhuoyu/base64x ......\"]},\"25\":{\"h\":\"download\",\"t\":[\"$ go help mod download usage: go mod download [-x] [-json] [-reuse=old.json] [modules]\",\"download命令的名称虽然翻译过来叫下载，但它只是把依赖下载到本地的依赖缓存中，不会修改go.mod文件，它的作用是预下载依赖到本地的文件缓存中，如果你想要下载某一个依赖，建议使用go get或者go mod tidy。\",\"下面是几个使用例子\",\"$ go mod download -x gorm.io/gorm # get https://goproxy.cn/gorm.io/gorm/@v/list # get https://goproxy.cn/gorm.io/gorm/@v/list: 200 OK (0.084s)\",\"如果不带任何参数，它会下载所有存在于go.mod文件中但是又不存在与本地依赖缓存中的依赖项，如果没有需要下载的它会输出\",\"go: no module dependencies to download\"]},\"26\":{\"h\":\"edit\",\"t\":[\"$ go help mod edit usage: go mod edit [editing flags] [-fmt|-print|-json] [go.mod]\",\"edit是一个命令行接口，用于修改go.mod文件，通常是提供给其它程序使用的，一些编辑器 IDE 为提供 gomod 支持就会使用这些命令。它支持下面几个参数\",\"-module，修改模块路径\",\"-go=version，修改期望的 go 版本\",\"-require=path@version，新增一个依赖项\",\"-droprequire=path@version，删除一个依赖项\",\"-exclude=path@version，新增一个排除依赖项\",\"-dropexclude=path@version，删除一个排除依赖项\",\"-replace=old@version=new@version，新增一个替换依赖项\",\"-dropreplace=old@version，删除一个替换依赖项\",\"-retract=version，新增一个版本回退项\",\"-dropretract=version，删除一个版本回退项\",\"还有一些其它用于展示的参数\",\"-print，输出文件内容\",\"-json，以 json 格式输出\",\"比如下面这个例子\",\"$ go mod edit -print module golearn go 1.21.3 require ( github.com/dstgo/task v1.2.0 github.com/spf13/cast v1.5.1 github.com/swaggo/swag v1.16.2 golang.org/x/net v0.19.0 gorm.io/gorm v1.25.5 )\"]},\"27\":{\"h\":\"graph\",\"t\":[\"$ go help mod graph usage: go mod graph [-go=version] [-x]\",\"graph命令会输出当前项目下的依赖图，其可读性很差，并且大多数时候也不是给人类阅读的，其结果通常会被处理再以可视化的形式展示。每一行是就是一个依赖，其格式如下\",\"引用方 被引用方\",\"比如\",\"golearn go@1.21.3\",\"它还支持两个参数\",\"-go=version，使用给定 go 版本加载依赖图，其值不能小于go.mod文件中的版本。\",\"-x，展示过程中所执行的命令。\",\"看一个简单的使用例子\",\"$ go mod graph golearn github.com/246859/containers@v0.0.1 golearn github.com/246859/river@v0.1.0 golearn github.com/Jleagle/steam-go@v0.0.0-20230725082712-1053b441b1f2 golearn github.com/Jleagle/unmarshal-go@v0.0.0-20210227002040-694f544f9265 golearn github.com/KyleBanks/depth@v1.2.1 golearn github.com/Microsoft/go-winio@v0.6.1 golearn github.com/PuerkitoBio/purell@v1.1.1 golearn github.com/PuerkitoBio/urlesc@v0.0.0-20170810143723-de5bf2ad4578 golearn github.com/andeya/ameda@v1.5.3 golearn github.com/andeya/goutil@v1.0.1 golearn github.com/asaskevich/govalidator@v0.0.0-20230301143203-a9d515a09cc2 golearn github.com/buger/jsonparser@v1.1.1 golearn github.com/bwmarrin/snowflake@v0.3.0 golearn github.com/bytedance/go-tagexpr/v2@v2.9.11 ......\"]},\"28\":{\"h\":\"vendor\",\"t\":[\"$ go help mod vendor usage: go mod vendor [-e] [-v] [-o outdir]\",\"vendor 是早期 gomod 没有推出之前的一个 gopath 的替代方案，每一个 go 项目下都会有一个 vendor 目录，按照domain/user/project这种格式单独存放每一个项目的依赖，就像隔壁 nodeJs 臃肿的node_module一样每一个项目的依赖分开放，这种依赖管理方式现在看起来确实很愚蠢，但是在那个时候确实没有更好的方案了，之所以保留 vendor 是因为 go 秉承的向下兼容的承诺，有一些老项目包括 go 源代码里面可能还在使用 vendor。\",\"回到正题，vendor是go mod的一个子命令，它可以将当前模块所引用的全局依赖导出到 vendor 目录中。\",\"$ go mod vendor -h usage: go mod vendor [-e] [-v] [-o outdir] Run 'go help mod vendor' for details.\",\"它有以下几个参数\",\"-o：指定输出路径文件夹\",\"-v：输出每一个依赖\",\"-e：出现错误时不退出仍然继续\",\"下面看一个示例，先用go list -m all查看下当前项目所引用的依赖\",\"$ go list -m all github.com/dstgo/task github.com/davecgh/go-spew v1.1.1 github.com/pkg/errors v0.9.1 github.com/pmezard/go-difflib v1.0.0 github.com/stretchr/objx v0.5.0 github.com/stretchr/testify v1.8.4 gopkg.in/check.v1 v0.0.0-20161208181325-20d25e280405 gopkg.in/yaml.v3 v3.0.1\",\"导出到当前的 vendor 目录下\",\"$ go mod vendor -v -e -o vendor # github.com/davecgh/go-spew v1.1.1 ## explicit github.com/davecgh/go-spew/spew # github.com/pkg/errors v0.9.1 ## explicit github.com/pkg/errors # github.com/pmezard/go-difflib v1.0.0 ## explicit github.com/pmezard/go-difflib/difflib # github.com/stretchr/testify v1.8.4 ## explicit; go 1.20 github.com/stretchr/testify/assert # gopkg.in/yaml.v3 v3.0.1 ## explicit gopkg.in/yaml.v3\",\"导出后的目录结构如下\",\"└─vendor ├─github.com │ ├─davecgh │ │ └─go-spew │ │ └─spew │ ├─pkg │ │ └─errors │ ├─pmezard │ │ └─go-difflib │ │ └─difflib │ └─stretchr │ └─testify │ └─assert └─gopkg.in | └─yaml.v3 | |--modules.txt\",\"其中的modules.txt是描述所有依赖项的文件，就类似于现在的go.mod。\"]},\"29\":{\"h\":\"verify\",\"t\":[\"$ go help mod verify usage: go mod verify\",\"该命令会检查项目的依赖自下载到本地以后是否被修改过。比如，如果没问题就输出all modules verified\",\"$ go mod verify all modules verified\",\"否则它会报告哪里发生了改变，并以非正常状态结束命令。比如\",\"$ go mod verify gorm.io/gorm v1.25.5: dir has been modified (/go/mod/libs/gorm.io/gorm@v1.25.5)\"]},\"30\":{\"h\":\"why\",\"t\":[\"$ go help mod why usage: go mod why [-m] [-vendor] packages...\",\"解释为什么这个包被依赖，实际上是输出有关它的依赖图。比如\",\"$ go mod why gorm.io/gorm # gorm.io/gorm golearn gorm.io/gorm\",\"默认只会解析从main的导入，加上-m参数可以分析每一个包的导入情况。\"]},\"31\":{\"h\":\"work\",\"t\":[\"命令 work 是一个用于 go 多模块管理的本地开发工具\",\"$ go work help Work provides access to operations on workspaces. Note that support for workspaces is built into many other commands, not just 'go work'. The commands are: edit edit go.work from tools or scripts init initialize workspace file sync sync workspace build list to modules use add modules to workspace file vendor make vendored copy of dependencies Use \\\"go help work <command>\\\" for more information about a command.\"]},\"32\":{\"h\":\"init\",\"t\":[\"init子命令用于初始化一个 workspace，该命令会创建一个名为go.work的文件\",\"$ go work init -h usage: go work init [moddirs] Run 'go help work init' for details.\",\"接收参数[moddirs]指定将哪些模块纳入管理，例如\",\"$ go work init ./service ./api\"]},\"33\":{\"h\":\"use\",\"t\":[\"use子命令用于向go.work中添加纳入管理的模块目录\",\"$ go help work use usage: go work use [-r] [moddirs] Use provides a command-line interface for adding directories, optionally recursively, to a go.work file.\",\"接收[moddirs]作为参数，还有一个-r表示在[moddirs]路径下递归搜索模块，例如\",\"$ go work use -r ./oss-api ./multi_modules\"]},\"34\":{\"h\":\"edit\",\"t\":[\"edit子命令的作用同go mod edit，都是留给命令行接口给其它工具和脚本操作的。\",\"$ go help work edit usage: go work edit [editing flags] [go.work] Edit provides a command-line interface for editing go.work, for use primarily by tools or scripts. It only reads go.work; it does not look up information about the modules involved. If no file is specified, Edit looks for a go.work file in the current directory and its parent directories\",\"参数有如下\",\"-fmt，格式化go.work文件\",\"-use，-dropuse，添加和移除模块路径\",\"-replace=old[@v]=new[@v]，-dropreplace=old[@v]=new[@v]，用于添加和移除要替换的模块\",\"-go，-toolchain=name，指定 go 版本，以及指定要使用的工具链\",\"-print，将最后的修改打印出来，不写回文件\",\"-json，以json格式输出，无法与-print同时存在，对应类型结构如下所示\",\"type GoWork struct { Go string Toolchain string Use []Use Replace []Replace } type Use struct { DiskPath string ModulePath string } type Replace struct { Old Module New Module } type Module struct { Path string Version string }\",\"一些使用示例如下，格式化输出\",\"$ go work edit -fmt -print go 1.22.0 use ( ./ab/cd ./auth ./user )\",\"json 输出\",\"$ go work edit -fmt -json { \\\"Go\\\": \\\"1.22.0\\\", \\\"Use\\\": [ { \\\"DiskPath\\\": \\\"./ab/cd\\\" }, { \\\"DiskPath\\\": \\\"./auth\\\" }, { \\\"DiskPath\\\": \\\"./user\\\" } ], \\\"Replace\\\": null }\"]},\"35\":{\"h\":\"sync\",\"t\":[\"sync子命令用于将go.work中的模块列表回到 workspace 中的各个模块中。\",\"$ go help work sync usage: go work sync Sync syncs the workspace's build list back to the workspace's modules\",\"这个过程主要发生在本地开发完成后，各个模块已经完成发版工作，此时使用sync，它会根据各个模块的依赖关系来更新 worksapce 所有模块的go.mod中的依赖，从而不需要我们去手动更新。\"]},\"36\":{\"h\":\"vendor\",\"t\":[\"vendor命令会将 workspace 中所有模块依赖的库做一份复制到vendor目录下。\",\"$ go work help vendor usage: go work vendor [-e] [-v] [-o outdir]\",\"功能同go mod vendor，不再做过多的赘述。\"]},\"37\":{\"h\":\"vet\",\"t\":[\"命令vet是一个 go 语言源代码的静态错误检查工具，就像其它语言的 lint 工具，比如Eslint。\",\"$ go vet -h usage: go vet [build flags] [-vettool prog] [vet flags] [packages] Run 'go help vet' for details. Run 'go tool vet help' for a full list of flags and analyzers. Run 'go tool vet -help' for an overview.\",\"先来看一个简单的示例，现有如下源代码\",\"$ cat main.go package main import \\\"fmt\\\" func main(){ fmt.Println(\\\"hello world!\\\" }\",\"在同级目录下不带任何参数执行go vet\",\"$ go vet vet: ./main.go:6:28: missing ',' before newline in argument list (and 1 more errors)\",\"vet会报告哪个文件哪一行出了什么问题。它支持构建标志作为参数，例如-n和-x，支持包，文件夹，文件名作为参数。\",\"$ go vet . $ go vet main.go $ go vet ./cmd $ go vet runtime\",\"通过如下命令查看其更详细的参数和解释。\",\"$ go tool vet help vet is a tool for static analysis of Go programs. vet examines Go source code and reports suspicious constructs, such as Printf calls whose arguments do not align with the format string. It uses heuristics that do not guarantee all reports are genuine problems, but it can find errors not caught by the compilers. Registered analyzers: asmdecl report mismatches between assembly files and Go declarations assign check for useless assignments atomic check for common mistakes using the sync/atomic package bools check for common mistakes involving boolean operators buildtag check //go:build and // +build directives ......\",\"go tool vet命令并不能直接用来对代码进行检查，应该使用go vet。go vet参数中的[vet flag]支持设置代码分析器，可用的值如下\",\"asmdecl 检查汇编文件是否与go声明不匹配 assign 检查是否有无用的变量 atomic 检查使用sync/atomic时是否破坏了原子性 bools 检查是否错误使用逻辑运算符 buildtag 检查build tag cgocall 检查违反cgao指针传递规则的行为 composites 检查未初始化的复合结构，比如map，chan copylocks 检查是否发生了锁的值复制 directive 检查go工具链指令 errorsas 检查是否向errors.As传递非指针类型或非error类型的值 framepointer 检查编译优化后的汇编代码是否在保存帧指针之前对其进行清除 httpresponse 检查是否错误使用httpresponse ifaceassert 检查接口到接口的类型断言 loopclosure 循环变量的引用问题 lostcancel context.WithCancel没有使用cancel函数 nilfunc 检查函数和nil之间是否存在无用的比较 printf 检查printf的格式化参数是否正确 shift 检查是否有等于或超过整数宽度的移位 sigchanyzer 检查无缓冲的chan os.Signal slog 检查不合法的结构化日志调用 stdmethods 检查已知接口方法的签名是否正确 stringintconv 检查字符串整型转换 structtag 检查结构体tag是否正确 testinggoroutine 检查是否在测试中使用协程调用testing.Fatal tests 检查测试和示例的常见错误用法 timeformat 使用(time.Time).Format 或 time.Parse的时间格式是否正确 unmarshal 向unmarshal传递非指针或非接口类型 unreachable 检查不可到达的代码 unsafeptr 检查uintptr到unsafe.Pointer不正确转换 unusedresult 检查未使用的函数返回值\",\"它们都是针对某一个点进行分析的分析器，比如timeformat分析器是检查time.Format的调用格式是否符合正确的语法。在默认情况下以上所有的分析器都会启用，单独启用可用使用如下的格式\",\"$ go vet -timeformat main.go\",\"单独禁用\",\"$ go vet -timeformat=false main.go\",\"这些分析器的源代码位于cmd/vendor/golang.org/x/tools/go/analysis/passes，每一个分析器都是 go 语言容易犯的一个坑，所以十分建议使用vet命令来检查你的代码。除此这些之外，它还支持一些其它的标志参数\",\"-V，仅打印版本然后退出\",\"-json，以 json 形式输出\",\"-c=n，显示上下文中指定数目的冲突行（似乎并没有任何作用）\",\"还有一些外置的分析器，比如shadows，它负责检测短变量命名的变量隐藏问题，由于是外置的所以需要用go install来进行下载\",\"$ go install golang.org/x/tools/go/analysis/passes/shadow/cmd/shadow@latest\",\"使用格式如下\",\"$ go vet -vettool=$(which shadow)\"]},\"38\":{\"h\":\"test\",\"t\":[\"$ go test -h usage: go test [build/test flags] [packages] [build/test flags & test binary flags] Run 'go help test' and 'go help testflag' for details.\",\"test命令是 go 语言工具链中提供测试功能的命令，这个功能相当的重要，对于一个软件而言，完善的测试的是必不可少的。这里只是简单的介绍下如何使用test命令，如果要了解更多测试相关，前往：测试\",\"它除了支持build命令的编译参数之外，test还支持下面几个参数\",\"-args，程序的入口参数\",\"-c，编译当前包的测试二进制文件到当前目录但并不执行，以pkg.test方式命名\",\"-exec，在测试开始之前执行一些其它的命令\",\"-json，测试的输出风格变为 json\",\"-o，指定测试二进制文件的路径名\",\"它还支持许多testflag ，使用help命令查看所有testflag\",\"$ go help testflag The 'go test' command takes both flags that apply to 'go test' itself and flags that apply to the resulting test binary. The following flags are recognized by the 'go test' command and control the execution of any test: -bench regexp -benchtime t -count n ......\",\"介绍几个常用的\",\"-v，输出每一个用例的测试结果。\",\"-timeout duration，测试执行超时时间\",\"-skip regexp，跳过指定的测试用例\",\"-short，让哪些运行时间很长的测试用例缩短运行时间\",\"-shuffle，打乱所有测试用例的执行顺序\",\"-run regexp，运行指定的测试用例\",\"-list regexp，列出每一个测试用例\",\"-cpu 1,2,4，指定 cpu 数量\",\"-count n，指定每个测试用例执行多少次\",\"最简单的用法就是，不带任何参数，它会执行当前所在包下的所有测试用例，并输出结果。\",\"$ ls *_test.go hello_test.go $ go test PASS ok golearn 0.522s\",\"指定某一个测试文件\",\"$ go test hello_test.go ok command-line-arguments 0.041s\",\"加上-v参数可以查看更详细的输出，它相当常用。\",\"$ go test -v hello_test.go === RUN TestHello hello_test.go:6: hello world! --- PASS: TestHello (0.00s) PASS ok command-line-arguments 0.041s\",\"指定某一个测试用例\",\"$ go test -v -run TestHello === RUN TestHello hello_test.go:6: hello world! --- PASS: TestHello (0.00s) PASS ok golearn 0.028s\",\"在测试时，test命令分两种模式，先来讲第一种文件夹模式，当不带package参数执行test命令时，它就会以文件夹模式执行测试，比如下面几个命令\",\"$ go test $ go test -v\",\"在这种模式下，禁用测试缓存。另一种模式是列表模式，当package参数不为空时，就会以列表模式进行测试，它与前者的区别就是是否开启测试缓存。比如下面几个\",\"$ go test -v . $ go test -v ./... $ go test . $ go test -v net/http\",\"在列表模式下，go 会将指定包下的每一个包的测试文件编译成二进制文件并执行，为了避免重复运行测试，go 默认会将结果缓存，二次运行时不会重新编译。使用下列参数时将会默认开启缓存\",\"-benchtime\",\"-cpu\",\"-list\",\"-parallel\",\"-run\",\"short\",\"-timeout\",\"-failfast\",\"-v\",\"使用除了这些参数之外的其它参数就可以关闭缓存，官方提倡的方法是使用-count=1的方式来禁用缓存。比如\",\"$ go test -v -count=1 ./...\"]},\"39\":{\"h\":\"指令\",\"t\":[\"与命令不同，go 的指令是以硬编码的形式存在于源文件中的，它们有另一个比较术语化的名字：编译指示（progma directives）。\",\"编译器和链接器会因为它们改变自身的行为从而达到控制编译的效果，就有点类似于 c 语言中的宏，当然并非所有指令都是用来影响编译的，部分用于其它功能性行为，比如generate指令通常用于代码生成的功能。这些指令通常以注释的形式存在，并且以//go:作为前缀，中间不能包含任何的空格，比如//go:generate指令。所有指令类型总共分为两种\",\"功能性指令，这类是 go 提供的功能性指令可以随意使用，比如generate，embed，build。\",\"编译器指令，这类指令需要谨慎使用，胡乱使用可能导致无法预测的结果。\",\"除了功能性指令外，大多数指令都只能作用于函数签名上。对于编译器指令可以执行命令go doc compile查看其指令。对于全部指令，可以在cmd/compile/internal/ir/node.go: 440找到有关它们的信息。\"]},\"40\":{\"h\":\"generate\",\"t\":[\"$ go help generate usage: go generate [-run regexp] [-n] [-v] [-x] [build flags] [file.go... | packages]\",\"generate指令顾名思义就是跟生成有关的，通常它的作用是用于执行那些会生成代码以及更新源代码的命令，不过实际上它可以执行任何命令。并且，generate指令与其它指令不同，它有一个专门的命令可以用于执行所有位于源文件中的 generate 指令。它可以以文件名或者包名来作为输入参数来表示执行哪些文件的generate指令，下面是它的其它参数。\",\"-run=regex ，运行指定的 generate 指令\",\"-skip=regex，跳过指定的 generate 指令\",\"-n，打印将要执行的命令\",\"-x，打印过程中执行的命令\",\"-v，输出处理的文件\",\"除此之外，在generate指令中执行的命令还支持以下几个内置参数\",\"$GOARCH，cpu 架构\",\"$GOOS，操作系统\",\"$GOFILE，文件名\",\"$GOLINE，行号\",\"$GOPACKAGE，包名\",\"$GOROOT，go root\",\"$DOLLAR，美元符号\",\"$PATH，path 环境变量\",\"看个例子，什么代码都没有只有一行注释\",\"package main //go:generate echo \\\"hello world!\\\"\",\"执行命令\",\"$ go generate . hello world!\",\"这个例子是执行 go 命令\",\"package main //go:generate go version\",\"执行命令\",\"$ go generate . go version go1.21.3 windows/amd64\",\"generate指令可以用于执行任何命令，比如 swagger 生成 API 文档，或者 Wire 生成 IOC 代码。不过这个指令不适合执行特别复杂的命令，它适合执行简短的命令，如果有复杂的需求可以使用脚本或者 makefile 来代替。\"]},\"41\":{\"h\":\"embed\",\"t\":[\"embed指令是 1.16 新增的，它的作用是将可以将静态文件一同打包进二进制文件中，比如 HTML 模板之类的。它的格式如下\",\"//go:embed pattern\",\"pattern可以是 glob 表达式，也可以是文件夹或者某一个具体文件。看一个例子\",\"package main import \\\"embed\\\" //go:embed * var static embed.FS\",\"embed指令要求必须位于一个类型为embed.Fs的全局变量上方，注意必须是全局变量，并且使用它必须导入embed包，在这个例子中，*代表了会将当前文件夹下的所有文件都打包进二进制文件中，不过它不会允许.开头的文件夹存在。\",\"下面这个例子展示了从嵌入的文件中读取内容\",\"package main import ( \\\"embed\\\" \\\"fmt\\\" ) //go:embed *.txt var static embed.FS func main() { bytes, err := static.ReadFile(\\\"hello.txt\\\") if err != nil { panic(err) } fmt.Println(string(bytes)) }\",\"它只有三个方法，使用起来跟平常文件系统没什么区别，并且由于它实现了io/Fs接口，所以也可以作为Fs对象来进行传递。\",\"func (f FS) Open(name string) (fs.File, error) func (f FS) ReadFile(name string) ([]byte, error) func (f FS) ReadDir(name string) ([]fs.DirEntry, error)\",\"下面这个例子展示了通过embed指令嵌入 html 文件，并通过 http 服务访问。\",\"package main import ( \\\"embed\\\" \\\"net/http\\\" ) //go:embed index.html var htmlFs embed.FS func main() { http.Handle(\\\"/\\\", http.FileServer(http.FS(htmlFs))) http.ListenAndServe(\\\":8080\\\", http.DefaultServeMux) }\",\"访问结果如下\",\"$ curl -s -GET 127.0.0.1:8080 <!DOCTYPE html> <html lang=\\\"en\\\"> <head> <meta charset=\\\"UTF-8\\\"> <title>hello world!</title> </head> <body> <H1>Hello World!</H1> <script> alert(\\\"hello world!\\\"); </script> </body> </html>\",\"embed指令还支持全局变量的类型可以为[]byte，比如下面这个例子\",\"package main import ( _ \\\"embed\\\" \\\"net/http\\\" ) //go:embed index.html var rawdata []byte func main() { http.HandleFunc(\\\"/\\\", func(writer http.ResponseWriter, request *http.Request) { writer.Write(rawdata) }) http.ListenAndServe(\\\":8080\\\", http.DefaultServeMux) }\",\"它实现的效果跟上一个例子是差不多的。\",\"$ curl -s -GET 127.0.0.1:8080 <!DOCTYPE html> <html lang=\\\"en\\\"> <head> <meta charset=\\\"UTF-8\\\"> <title>hello world!</title> </head> <body> <H1>Hello World!</H1> <script> alert(\\\"hello world!\\\"); </script> </body> </html>\"]},\"42\":{\"h\":\"build\",\"t\":[\"在build-编译控制部分，讲到了用// +build指令来控制编译行为。而//go:build指令是在 1.17 新出的，意在取代先前的指令，不过现在都 1.21 也还没有取代，估计以后会以共存的方式存在，关于这个新指令，官方文档也有介绍：build constraints。它的功能与前者没什么区别，但是语法更加严格，支持布尔表达式，看一个例子\",\"//go:build (linux && 386) || (darwin && !cgo) package pkg_name\",\"这种方式可读性要比原来那种高得多。\"]},\"43\":{\"h\":\"line\",\"t\":[\"line指令会影响其下一行的行号，列号，已经文件名，它的作用仅限于此，大部分时候可能会用来调试错误之类的。比如在发生错误时，会改变编译器输出的信息。\",\"package main var a undefinedType func main() { }\",\"正常情况下，编译器会输出\",\".\\\\main.go:3:7: undefined: undefinedType\",\"但如果使用了line指令，就不一样了\",\"package main //line abc.go:10:100 var a undefinedType func main() { }\",\"那么它的输出就是\",\"abc.go:10:106: undefined: undefinedType\",\"并且因为历史遗留原因，line指令也是唯一一个用法跟其它指令不同的指令。它的格式是\",\"//line filename:line:column\",\"可以看到它并不需要go:作为前缀。\"]},\"44\":{\"h\":\"linkname\",\"t\":[\"这个指令的操作可以用于链接其它包的函数或者全局变量，即便它是私有类型，这种操作经常在标准库尤其是runtime中出现，有一些函数没有函数体就是通过这种方式来实现的，另一部分空函数体的函数则是由汇编实现。来看下它的用法，使用格式如下\",\"//go:linkname 链接类型名称 被链接的类型\",\"并且在使用之前，比如导入unsafe包。看一个简单的链接标准库中的私有类型的例子\",\"import ( \\\"fmt\\\" \\\"unsafe\\\" ) //go:linkname memhash runtime.memhash func memhash(p unsafe.Pointer, h, s uintptr) uintptr func MemHash(data []byte) uint64 { ptr := unsafe.Pointer(unsafe.SliceData(data)) return uint64(memhash(ptr, 0, uintptr(len(data)))) } func main() { fmt.Println(MemHash([]byte(\\\"hello\\\"))) }\",\"输出\",\"15395306441938000233\",\"它将runtime.memhash这个私有函数与我们自己声明的函数链接到了一起，这个函数没有函数体只有一个签名，只起到一个载体的作用。memhash的作用是给定一个指针，哈希种子，和内存偏移量，根据内存来计算哈希值。这个链接过程在编译期完成，\",\"如果不是标准库的，那么情况就有些不一样了，比如在example包下有一个test函数，在链接之前首先要匿名导入这个包。\",\"package example // 一个私有类型，外界无法访问。 func test() string { return \\\"a\\\" }\",\"package main import ( \\\"fmt\\\" _ \\\"golearn/example\\\" _ \\\"unsafe\\\" ) //go:linkname test golearn/example.test func test() string func main() { fmt.Println(test()) }\",\"输出\",\"a\",\"可以看到已经链接成功了，这种方法可以绕过 go 的模块系统为所欲为，不过不建议大规模使用，除非你知道你自己干什么。\"]},\"45\":{\"h\":\"noinline\",\"t\":[\"noinline指令表示一个函数禁止内联优化，即便它非常简单。看一个简单的例子\",\"package main func val() string { return \\\"val\\\" } func main() { var c = val() _ = c }\",\"val是一个非常简单的函数，它的作用是返回一个字符串字面量，由于它太过简单且结果总是可以预测，那么在编译时它会被编译器优化成如下形式\",\"package main func main() { var c = \\\"val\\\" _ = c }\",\"来看看它汇编的样子，可以看到并没有发现val函数的调用。\",\"TEXT main.val(SB), NOSPLIT|NOFRAME|ABIInternal, $0-0 FUNCDATA $0, gclocals·g2BeySu+wFnoycgXfElmcg==(SB) FUNCDATA $1, gclocals·g2BeySu+wFnoycgXfElmcg==(SB) LEAQ go:string.\\\"val\\\"(SB), AX MOVL $3, BX FUNCDATA $0, gclocals·g2BeySu+wFnoycgXfElmcg==(SB) RET\",\"接下来加上noinline指令\",\"package main //go:noinline func val() string { return \\\"val\\\" } func main() { var c = val() _ = c }\",\"再来看看其汇编形式\",\"CMPQ SP, 16(R14) PCDATA $0, $-2 JLS 17 PCDATA $0, $-1 PUSHQ BP MOVQ SP, BP FUNCDATA $0, gclocals·g2BeySu+wFnoycgXfElmcg==(SB) FUNCDATA $1, gclocals·g2BeySu+wFnoycgXfElmcg==(SB) PCDATA $1, $0 CALL main.val(SB) POPQ BP RET\",\"这次可以非常明显的看到了main.val这个调用，而这也正是noinline指令发挥的功能，阻止编译器优化时的函数内联。\"]},\"46\":{\"h\":\"nospilit\",\"t\":[\"nospilit指令的作用是跳过栈溢出检测。由于 go 的并发调度模型是抢占式调度，假设一个函数会运行非常底层的代码，其它协程在调用此函数时不适合被抢占，就可以使用该指令来表示。\",\"//go:nosplit func nospilitFn()\",\"使用该指令后，也就不会再进行栈增长。\"]},\"47\":{\"h\":\"noescape\",\"t\":[\"noescape，通过它的名字可以很容易猜到是跟逃逸有关的，它的作用是表示当前函数不会发生内存逃逸行为，执行完后所有资源都被回收，并且这个函数必须只有签名没有函数体，在这种情况下一般函数的实现是由汇编实现的。\",\"比如之前用到的memhash就会用到这个指令\",\"//go:noescape //go:linkname memhash runtime.memhash func memhash(p unsafe.Pointer, h, s uintptr) uintptr\",\"这样一来，编译器不会对其进行逃逸分析，前提是你得保证它不会发生逃逸，如果发生了，那就不知道会有什么后果了。\"]},\"48\":{\"h\":\"uintptrescapes\",\"t\":[\"uintptrescapes指令表示该函数中uinptr类型的参数被转换为了指针值并且逃逸到了堆上，且必须保持其存活。这个指令一般用于一些低级的系统调用，大部分情况下不需要去了解它。\",\"//go:uintptrescapes func nospilit(ptr uintptr) uintptr\",\"在以前应该还有一个notinheaps指令用于表示一个类型不允许分配内存到堆上，不知道在哪个版本被删掉了。\"]},\"49\":{\"h\":\"norace\",\"t\":[\"norace指令表示一个函数的内存访问不再需要竞态分析，通常是在运行低层次代码不适合进行竞态分析时使用。\",\"//go:norace func low_level_code(ptr uintptr) uintptr\",\"提示\",\"还有部分指令限制了只能由runtime包使用，外部是无法使用的， 它们会涉及到更深的东西，想要了解可以在Runtime-only compiler directives中看到有关它们的介绍。\"]},\"50\":{\"h\":\"依赖导航\",\"t\":[\"这部分是对站内收集的第三方库和框架做一个整理分类，方便后续浏览，也欢迎提交 pr 添加新的项目。\",\"提示\",\"先后顺序不代表排名，好不好用要根据实际体验来看。\"]},\"51\":{\"h\":\"Web 框架\",\"t\":[\"名称\",\"描述\",\"仓库\",\"gin\",\"最经典的 web 框架\",\"https://github.com/gin-gonic/gin\",\"beego\",\"国人开发的 web 框架\",\"https://github.com/beego/beego\",\"iris\",\"号称最快的 web 框架\",\"https://github.com/kataras/iris\",\"echo\",\"极简高性能的 web 框架\",\"https://github.com/labstack/echo\",\"goji\",\"简洁的 web 框架\",\"https://github.com/zenazn/goji\",\"revel\",\"高可用的全栈 web 框架\",\"https://github.com/revel/revel\",\"buffalo\",\"可以简单的构建全栈项目 web 框架\",\"https://github.com/gobuffalo/buffalo\",\"hertz\",\"具有高性能和强扩展性的微服务 HTTP 框架（字节开源）\",\"https://github.com/cloudwego/hertz\",\"dotweb\",\"一个简单的微型 web 框架\",\"https://github.com/devfeel/dotweb\",\"fiber\",\"Node.js Express 风格的 Web 框架\",\"https://github.com/gofiber/fiber\"]},\"52\":{\"h\":\"ORM\",\"t\":[\"名称\",\"描述\",\"仓库\",\"grom\",\"开发者友好的 ORM 库\",\"https://github.com/go-gorm/gorm\",\"xorm\",\"简单强大的 ORM\",\"https://gitea.com/xorm/xorm\",\"ent\",\"FaceBook 开源的 ORM\",\"https://github.com/ent/ent\",\"sqlx\",\"对 sql 库的强大拓展\",\"https://github.com/jmoiron/sqlx\",\"beego/orm\",\"beego 自带的 orm\",\"https://github.com/astaxie/beego/tree/master/orm\",\"rel\",\"可拓展的现代 ORM\",\"https://github.com/go-rel/rel\",\"bun\",\"SQL 优先的 ORM\",\"https://github.com/uptrace/bun\"]},\"53\":{\"h\":\"微服务框架\",\"t\":[\"名称\",\"描述\",\"仓库\",\"kratos\",\"云原生微服务框架（B 站开源）\",\"https://github.com/go-kratos/kratos\",\"go-kit\",\"一个微服务开发的工具库\",\"https://github.com/go-kit/kit\",\"kitex\",\"高性能和高拓展的微服务框架（字节开源）\",\"https://github.com/cloudwego/kitex\",\"go-zero\",\"云原生微服务框架（七牛云开源）\",\"https://github.com/zeromicro/go-zero\",\"go-micro\",\"一个国外的微服务框架\",\"https://github.com/go-micro/go-micro\",\"kite\",\"微服务框架（很久没更新）\",\"https://github.com/koding/kite\",\"dubbo-go\",\"java dubbo 在 go 实现（阿里开源）\",\"https://github.com/apache/dubbo-go\",\"tarsgo\",\"tars 在 go 中的实现（腾讯开源）\",\"https://github.com/TarsCloud/TarsGo\",\"juptiers\",\"面向治理的微服务框架（斗鱼开源）\",\"https://github.com/douyu/jupiter\",\"redsync\",\"redis 分布式锁\",\"https://github.com/go-redsync/redsync\",\"彩蛋\",\"斗鱼的 jupiter 是宙斯的名字，是众神之神，而 B 站的 kratos 是战神奎托斯的名字，奎托斯后来杀掉了众神之神宙斯。\"]},\"54\":{\"h\":\"日志组件\",\"t\":[\"名称\",\"描述\",\"仓库\",\"logrus\",\"结构化日志库\",\"https://github.com/sirupsen/logrus\",\"zap\",\"uber 开源的高性能日志库\",\"https://github.com/uber-go/zap\",\"glog\",\"分级执行日志\",\"https://github.com/golang/glog\",\"zerolog\",\"零内存分配的 json 日志\",\"https://github.com/rs/zerolog\",\"apex/log\",\"结构化日志库\",\"https://github.com/apex/log\",\"lumberjack\",\"日志分割库，支持大小分割，日期分割，文件压缩\",\"https://github.com/natefinch/lumberjack\"]},\"55\":{\"h\":\"测试组件\",\"t\":[\"名称\",\"描述\",\"仓库\",\"testify\",\"最流行的测试工具包\",\"https://github.com/stretchr/testify\",\"ginkgo\",\"现代化的测试框架\",\"https://github.com/onsi/ginkgo\",\"ramsql\",\"基于内存的 SQL 引擎，主要用于 SQL 的单元测试\",\"https://github.com/proullon/ramsql\",\"go-sqlmock\",\"用于测试的 SQL Mock\",\"https://github.com/DATA-DOG/go-sqlmock\",\"goconvey\",\"在浏览器可视化中测试\",\"https://github.com/smartystreets/goconvey\",\"go-stress-testing\",\"压测工具\",\"https://github.com/link1st/go-stress-testing\",\"xgo\",\"go 打桩测试框架，通过编译期重写代码来实现\",\"https://github.com/xhd2015/xgo\",\"gomonkey\",\"go 打桩测试框架，通过修改修改函数地址实现\",\"https://github.com/agiledragon/gomonkey\"]},\"56\":{\"h\":\"数据处理\",\"t\":[\"名称\",\"描述\",\"仓库\",\"mapstructure\",\"map 与结构体互转\",\"https://github.com/mitchellh/mapstructure\",\"cast\",\"可以很方便的数据类型转换\",\"https://github.com/spf13/cast\",\"deepcopy\",\"深度复制\",\"https://github.com/mohae/deepcopy\",\"copier\",\"可以在结构体之间同名字段复制值\",\"https://github.com/jinzhu/copier\",\"go-pinyin\",\"汉字转拼音\",\"https://github.com/mozillazg/go-pinyin\",\"go-streams\",\"流式数据处理\",\"https://github.com/reugn/go-streams\",\"stream\",\"流式处理\",\"https://github.com/xyctruth/stream\",\"go-humanize\",\"将数据转换成人类可以阅读的格式\",\"https://github.com/dustin/go-humanize\",\"uniseg\",\"在 Go 中进行 Unicode 文本分段、字包装和字符串宽度计算\",\"https://github.com/rivo/uniseg\"]},\"57\":{\"h\":\"数据验证\",\"t\":[\"名称\",\"描述\",\"仓库\",\"go-playground/validator/v10\",\"数据验证器\",\"https://github.com/go-playground/validator\",\"go-cmp\",\"谷歌开源的用于比较值的库\",\"https://github.com/google/go-cmp\",\"ozzo-validation\",\"基于规则的数据校验库\",\"https://github.com/go-ozzo/ozzo-validation\",\"go-tagexpr\",\"结构体 tag 验证库\",\"https://github.com/bytedance/go-tagexpr\"]},\"58\":{\"h\":\"数据结构\",\"t\":[\"名称\",\"描述\",\"仓库\",\"gods\",\"常见数据结构的实现\",\"https://github.com/emirpasic/gods\",\"go-datastructures\",\"常见数据结构的实现\",\"https://github.com/Workiva/go-datastructures\",\"biset\",\"go 中 bitsets 的实现\",\"https://github.com/bits-and-blooms/bitset\",\"bloom\",\"go 中 bloom filters 的实现\",\"https://github.com/bits-and-blooms/bloom\",\"deque\",\"高性能双端队列的实现\",\"https://github.com/edwingeng/deque\",\"concurrent-map\",\"并发安全的分片 map 实现\",\"https://github.com/orcaman/concurrent-map\",\"samber/lo\",\"Lodash 风格的数据处理库，支持泛型\",\"https://github.com/samber/lo\",\"google/btree\",\"谷歌实现的 BTree 库，支持泛型\",\"https://github.com/google/btree\",\"gostl\",\"像 C++STL 一样的数据结构库\",\"https://github.com/liyue201/gostl\"]},\"59\":{\"h\":\"数学计算\",\"t\":[\"名称\",\"描述\",\"仓库\",\"gonum\",\"类比 numpy\",\"https://github.com/gonum/gonum\",\"decimal\",\"高精度浮点数操作库\",\"https://github.com/shopspring/decimal\",\"crunch\",\"一个简化字节和位操作的库\",\"https://github.com/superwhiskers/crunch\",\"math-engine\",\"数学表达式解析计算引擎库\",\"https://github.com/dengsgo/math-engine\"]},\"60\":{\"h\":\"模板引擎\",\"t\":[\"名称\",\"描述\",\"仓库\",\"pongo2\",\"Django 风格的模板引擎\",\"https://github.com/flosch/pongo2\",\"ace\",\"html 模板引擎\",\"https://github.com/yosssi/ace\",\"mustache\",\"mustache 在 go 中的实现\",\"https://github.com/hoisie/mustache\",\"hero\",\"功能强大，快速的模板引擎\",\"https://github.com/shiyanhui/hero\",\"quictemplate\",\"顾名思义，高性能的模板引擎\",\"https://github.com/valyala/quicktemplate\",\"amber\",\"源于 HAML 和 Jade 的模板引擎\",\"https://github.com/eknkc/amber\"]},\"61\":{\"h\":\"缓存组件\",\"t\":[\"名称\",\"描述\",\"仓库\",\"golang-lru\",\"线程安全的 LRU，以及 LRU 2Q 缓存\",\"https://github.com/hashicorp/golang-lru\",\"ttlcache\",\"基于内存的缓存，支持 TTL，泛型\",\"https://github.com/jellydator/ttlcache\",\"gocache\",\"缓存中间件管理器\",\"https://github.com/eko/gocache\",\"go-cache\",\"基于内存的缓存，适用于单机应用，支持 TTL\",\"https://github.com/patrickmn/go-cache\",\"ristretto\",\"高性能的内存缓存\",\"https://github.com/dgraph-io/ristretto\",\"bigcache\",\"基于内存的高效率的大 key 缓存\",\"https://github.com/allegro/bigcache\"]},\"62\":{\"h\":\"数据库&驱动\",\"t\":[\"名称\",\"描述\",\"仓库\",\"modernc.org/sqlite\",\"sqlite 驱动，纯 go 编写，不需要 cgo\",\"https://gitlab.com/cznic/sqlite\",\"mattn/go-sqlite3\",\"sqlite 驱动，需要 cgo\",\"https://github.com/mattn/go-sqlite3\",\"denisenkom/go-mssqldb\",\"sqlserver 驱动，不怎么更新了，建议使用微软的版本\",\"https://github.com/denisenkom/go-mssqldb\",\"microsoft/go-mssqldb\",\"sqlserver 驱动，微软 fork 的新分支并维护\",\"https://github.com/microsoft/go-mssqldb\",\"pgx\",\"postgreSQL 驱动\",\"https://github.com/jackc/pgx/\",\"mysql\",\"mysql 驱动\",\"https://github.com/go-sql-driver/mysql\",\"oci-go-sdk\",\"oracle 官方驱动\",\"https://github.com/oracle/oci-go-sdk\",\"go-ora\",\"oracle 驱动，纯 go 编写\",\"https://github.com/sijms/go-ora\",\"badger\",\"嵌入式的 kv 数据库，基于 LSM\",\"https://github.com/dgraph-io/badger\",\"boltdb\",\"嵌入式的 kv 数据库，基于 B+Tree\",\"https://github.com/boltdb/bolt\",\"goleveldb\",\"go 语言实现的 leveldb\",\"https://github.com/syndtr/goleveldb\",\"qmgo\",\"七牛云开源的 mongodb 操作库\",\"https://github.com/qiniu/qmgo\",\"mongo-go-driver\",\"mongodb 官方的 go 驱动\",\"https://github.com/mongodb/mongo-go-driver\",\"rqlite\",\"基于 sqlite 的轻量级分布式关系数据库\",\"https://github.com/rqlite/rqlite/\",\"go-mysql\",\"一个强大的 MySQL 工具集合\",\"https://github.com/go-mysql-org/go-mysql\",\"go-mysql-elasticsearch\",\"MySQL 数据同步到 Elasticsearch 的工具\",\"https://github.com/go-mysql-org/go-mysql-elasticsearch\",\"gofound\",\"单机亿级全文检索引擎，\",\"https://github.com/sea-team/gofound\",\"bleve\",\"全文检索库\",\"https://github.com/blevesearch/bleve\"]},\"63\":{\"h\":\"序列化\",\"t\":[\"名称\",\"描述\",\"仓库\",\"go-ini\",\"ini 文件序列化库\",\"https://github.com/go-ini/ini\",\"sonic\",\"字节开源的高性能 json 序列化库\",\"https://github.com/bytedance/sonic\",\"easyjson\",\"json 快速序列化库\",\"https://github.com/mailru/easyjson\",\"gjson\",\"快速获取 json 键值，非传统的序列化库\",\"https://github.com/tidwall/gjson\",\"go-yaml\",\"yaml 序列化库\",\"https://github.com/go-yaml/yaml\",\"go-toml\",\"toml 序列化库\",\"https://github.com/pelletier/go-toml\",\"properties\",\"properties 序列化库\",\"https://github.com/magiconair/properties\",\"viper\",\"支持多种数据格式序列化，同时也是配置管理器\",\"https://github.com/spf13/viper\",\"configor\",\"gorm 作者写的多种数据格式序列化器，配置管理器\",\"https://github.com/jinzhu/configor\"]},\"64\":{\"h\":\"命令行\",\"t\":[\"名称\",\"描述\",\"仓库\",\"pflag\",\"POSIX/GUN 的风格的 flag 包\",\"https://github.com/spf13/pflag\",\"go-flags\",\"命令参数解析器\",\"https://github.com/jessevdk/go-flags\",\"cobra\",\"现代命令行程序构建脚手架\",\"https://github.com/spf13/cobra\",\"dimiro1/banner\",\"美观的 banner 构建库\",\"https://github.com/dimiro1/banner\",\"go-pretty\",\"输出美观的命令行表格，文字，进度条\",\"https://github.com/jedib0t/go-pretty\",\"progressbar\",\"线程安全的命令行进度条\",\"https://github.com/schollz/progressbar\",\"go-ansi\",\"用于 Go 语言的 Windows 便携式 ANSI 转义序列实用程序\",\"https://github.com/k0kubun/go-ansi\",\"go-isatty\",\"用于判断 tty 的库\",\"https://github.com/mattn/go-isatty\"]},\"65\":{\"h\":\"压缩解压\",\"t\":[\"名称\",\"描述\",\"仓库\",\"klauspost/compress\",\"对 compress 标准库的优化改造\",\"https://github.com/klauspost/compress\",\"alexmullins/zip\",\"archive/zip 标准库的 fork 分支，支持密码\",\"https://github.com/alexmullins/zip\",\"mholt/archiver\",\"支持很多格式的压缩解压缩工具库（个人非常推荐）\",\"https://github.com/mholt/archiver\",\"go-car\",\"CAR 归档文件在 go 中的实现\",\"https://github.com/ipld/go-car\",\"go-unarr\",\"一个压缩解压缩库\",\"https://github.com/gen2brain/go-unarr\",\"xz\",\"用于读写 xz 压缩文件的纯 Golang 库\",\"https://github.com/ulikunitz/xz\"]},\"66\":{\"h\":\"时期时间\",\"t\":[\"名称\",\"描述\",\"仓库\",\"carbon\",\"时间日期处理库\",\"https://github.com/golang-module/carbon\",\"robfig/cron\",\"定时任务库\",\"https://pkg.go.dev/github.com/robfig/cron/v3\",\"gron\",\"定时任务库\",\"https://github.com/roylee0704/gron\",\"jobrunner\",\"异步定时任务框架\",\"https://github.com/bamzi/jobrunner\",\"dataparse\",\"可以在不知道格式的情况下解析时间字符串\",\"https://github.com/araddon/dateparse\",\"jinzhu/now\",\"日期工具库\",\"https://github.com/jinzhu/now\"]},\"67\":{\"h\":\"依赖注入\",\"t\":[\"名称\",\"描述\",\"仓库\",\"dig\",\"uber 开源的依赖注入库，基于反射\",\"https://darjun.github.io/2020/02/22/godailylib/dig/\",\"wire\",\"谷歌开源的依赖注入库，基于代码生成\",\"https://github.com/google/wire\",\"inject\",\"依赖注入工具\",\"https://github.com/codegangsta/inject\",\"di\",\"依赖注入容器\",\"https://github.com/sarulabs/di\"]},\"68\":{\"h\":\"地理位置\",\"t\":[\"名称\",\"描述\",\"仓库\",\"geoip2-golang\",\"IP 转地理信息\",\"https://github.com/oschwald/geoip2-golang\",\"ip2location-go\",\"IP 转地理信息\",\"https://github.com/ip2location/ip2location-go\"]},\"69\":{\"h\":\"爬虫框架\",\"t\":[\"名称\",\"描述\",\"仓库\",\"colly\",\"简单强大的爬虫框架\",\"https://github.com/gocolly/colly\",\"goquery\",\"类似 j-thing\",\"https://github.com/PuerkitoBio/goquery\"]},\"70\":{\"h\":\"网络工具\",\"t\":[\"名称\",\"描述\",\"仓库\",\"gentleman\",\"插件驱动，可拓展的 http 客户端\",\"https://github.com/h2non/gentleman\",\"resty\",\"restful http 客户端\",\"https://pkg.go.dev/github.com/go-resty/resty/v2\",\"gopeed\",\"支持所有平台的现代下载管理器，基于 go 和 flutter\",\"https://github.com/GopeedLab/gopeed\"]},\"71\":{\"h\":\"电子邮件\",\"t\":[\"名称\",\"描述\",\"仓库\",\"jordan-wright/email\",\"健壮灵活的邮件发送库\",\"https://github.com/jordan-wright/email\",\"gomail\",\"邮件发送库\",\"https://github.com/go-gomail/gomail\",\"go-simple-mail\",\"简单的邮件发送库\",\"https://github.com/xhit/go-simple-mail\",\"go-mail\",\"易于使用，全面的邮件发送库\",\"https://github.com/wneessen/go-mail\",\"email-verifier\",\"验证邮箱是否有效，且不需要发送邮件\",\"https://github.com/AfterShip/email-verifier\",\"maddy\",\"组合式的邮件服务器\",\"https://github.com/foxcpp/maddy\",\"mox\",\"全面开源，高维护性，自托管的邮件服务端\",\"https://github.com/mjl-/mox\",\"hermes\",\"邮件模板生成库\",\"https://github.com/matcornic/hermes\",\"listmonk\",\"高性能，子托管，可视化的邮件列表管理\",\"https://github.com/knadh/listmonk\",\"go-smtp\",\"go 编写的 SMTP 客户端与服务端\",\"https://github.com/emersion/go-smtp\",\"go-imap\",\"go 编写的 IMAP 客户端与服务端\",\"https://github.com/emersion/go-imap\"]},\"72\":{\"h\":\"游戏开发\",\"t\":[\"名称\",\"描述\",\"仓库\",\"ebitengine\",\"一个超级简单的 2d 游戏引擎\",\"https://github.com/hajimehoshi/ebiten\",\"Azul3D\",\"一个由 go 编写的 3d 游戏引擎\",\"https://github.com/azul3d/engine\",\"engo\",\"由 go 编写的开源 2d 游戏引擎\",\"https://github.com/EngoEngine/engo\",\"g3n/engine\",\"go3d 游戏引擎\",\"https://github.com/g3n/engine\",\"gonet\",\"一个游戏服务端框架\",\"https://github.com/xtaci/gonet\",\"leaf\",\"游戏服务端框架\",\"https://github.com/name5566/leaf\",\"cloud-game\",\"基于 web 的云游戏服务\",\"https://github.com/giongto35/cloud-game\"]},\"73\":{\"h\":\"GUI\",\"t\":[\"名称\",\"描述\",\"仓库\",\"fyne\",\"跨平台的 GUI 开发工具箱（真有点东西）\",\"https://github.com/fyne-io/fyne\",\"go-flutter\",\"用 go 写 flutter\",\"https://github.com/go-flutter-desktop/go-flutter\"]},\"74\":{\"h\":\"系统交互\",\"t\":[\"名称\",\"描述\",\"仓库\",\"gopsutil\",\"获取操作系统信息，兼容主流系统\",\"https://github.com/shirou/gopsutil\",\"flock\",\"基于操作系统调用的文件锁\",\"https://github.com/gofrs/flock\",\"sys\",\"官方的操作系统交互库\",\"https://cs.opensource.google/go/x/sys\"]},\"75\":{\"h\":\"跨语言交互\",\"t\":[\"名称\",\"描述\",\"仓库\",\"gopher-lua\",\"go 编写的 lua 虚拟机\",\"https://github.com/yuin/gopher-lua\",\"go-lua\",\"go 编写的 lua 虚拟机\",\"https://github.com/Shopify/go-lua\",\"goja\",\"支持 es5.1+\",\"https://github.com/dop251/goja\",\"tengo\",\"Tengo 是一种小型、动态、快速、安全的 Go 脚本语言\",\"https://github.com/d5/tengo\",\"goby\",\"受 ruby 启发，由 go 实现的一种解释型脚本语言\",\"https://github.com/goby-lang/goby\",\"go+\",\"七牛云开源的脚本语言，可以与 go 无缝交互，又称 Q 语言\",\"https://github.com/goplus/gop\",\"go-python\",\"go 调用 cpython2\",\"https://github.com/sbinet/go-python\",\"go-pytyon3\",\"go 调用 cpython3\",\"https://github.com/DataDog/go-python3\"]},\"76\":{\"h\":\"图像处理\",\"t\":[\"名称\",\"描述\",\"仓库\",\"plot\",\"一个绘图库，多用于数据可视化\",\"https://github.com/gonum/plot\",\"gg\",\"2d 绘图库\",\"https://github.com/fogleman/gg\",\"gocv\",\"支持 opencv4+\",\"https://github.com/hybridgroup/gocv\",\"imaging\",\"一个简单的图像处理库\",\"https://github.com/disintegration/imaging\"]},\"77\":{\"h\":\"文字处理\",\"t\":[\"名称\",\"描述\",\"仓库\",\"vale\",\"语法感知的文本校对工具\",\"https://github.com/errata-ai/vale\"]},\"78\":{\"h\":\"认证授权\",\"t\":[\"名称\",\"描述\",\"仓库\",\"casbin\",\"灵活强大的权限管理库\",\"https://github.com/casbin/casbin\",\"openfga\",\"高性能权限/授权库，源于 oogle Zanzibar\",\"https://github.com/openfga/openfga\"]},\"79\":{\"h\":\"代码生成\",\"t\":[\"名称\",\"描述\",\"仓库\",\"jennifer\",\"代码生成库\",\"https://github.com/dave/jennifer\"]},\"80\":{\"h\":\"正则处理\",\"t\":[\"名称\",\"描述\",\"仓库\",\"commonregx\",\"一个收集了常用的正则表达式的库\",\"https://github.com/mingrammer/commonregex\"]},\"81\":{\"h\":\"文件处理\",\"t\":[\"名称\",\"描述\",\"仓库\",\"filebox\",\"文件操作工具库\",\"https://github.com/dstgo/filebox\",\"size\",\"快速完成文件大小与字符串之间的转换\",\"https://github.com/dstgo/size\",\"checksum\",\"一个计算文件哈希签名的库\",\"https://github.com/codingsince1985/checksum\",\"pdfcpu\",\"pdf 处理器\",\"https://github.com/pdfcpu/pdfcpu\",\"unioffice\",\"office 处理库\",\"https://github.com/unidoc/unioffice\",\"gooxml\",\"office 处理库\",\"https://github.com/carmel/gooxml\",\"pdfcpu\",\"PDF 处理库\",\"https://github.com/pdfcpu/pdfcpu\",\"excelize\",\"Excel 处理库\",\"https://github.com/360EntSecGroup-Skylar/excelize\"]},\"82\":{\"h\":\"通用工具\",\"t\":[\"名称\",\"描述\",\"仓库\",\"lancet\",\"多功能工具库，类比 java 中的 common 包\",\"https://github.com/duke-git/lancet\",\"bytebufferpool\",\"字节缓存池\",\"https://github.com/valyala/bytebufferpool\"]},\"83\":{\"h\":\"开发框架\",\"t\":[\"名称\",\"描述\",\"仓库\",\"goframe\",\"现代企业级 go 开发框架\",\"https://github.com/gogf/gf\"]},\"84\":{\"h\":\"共识协议\",\"t\":[\"名称\",\"描述\",\"仓库\",\"hashicorp/raft\",\"consul 开源的 raft 库\",\"https://github.com/hashicorp/raft\",\"hashicorp/memberlist\",\"consul 开源的 gossip 库\",\"https://github.com/hashicorp/memberlist\",\"etcd-io/raft\",\"etcd 开源的 raft 库\",\"https://github.com/etcd-io/raft\"]},\"85\":{\"h\":\"OCR\",\"t\":[\"名称\",\"描述\",\"仓库\",\"gosseract\",\"使用 Tesseract C + + 库的 OCR 库\",\"https://github.com/otiai10/gosseract\"]},\"86\":{\"h\":\"入门指南\"},\"87\":{\"h\":\"背景\",\"t\":[\"Go 语言诞生于 2007 年 9 月 20 日，由三位大佬共同创造，他们分别是\",\"Ken Thompson，图灵奖获得者，Unix 系统创始人，B 语言创始人，C 语言创始人\",\"Rob Pike，Plan9 操作系统作者之一，UTF-8 发明者之一，Go 语言设计领头人\",\"Robert Griesemer，JS V8 引擎研发者，三人之中最年轻\",\"还有一位是 Rob Pike 的妻子 Renee French，她设计了 Go 语言的 Logo，就是一只蓝色的土拨鼠。\",\"某一天，他们在等待 C++项目漫长的编译过程中，Rob Pike 脑袋里迸发出了一个新奇的想法，他希望能够设计出一个简洁小巧，编译快速的编程语言，让他们不用每一次编译都要等待如此长的时间，于是在短暂的头脑风暴后，三人于 2009 年 9 月 20 日开了一个短会来讨论和设计这个语言的初步原型，在这个时间点 Go 便正式诞生了。随后这个团队又加入了各路人马，谷歌公司于 2009 年 11 月 10 日以 BSD-3-Clause 协议将 Go 语言正式开源，推出了最初的版本。\",\"这是官网最初的样子\",\"提示\",\"值得一提的是，Go 只有一个名字：go，golang 的叫法仅仅是因为那会域名 go 被抢注了，在以前是golang.org，现在的官网域名是go.dev。\",\"go 团队经过了三年的设计与研发，于 2012 年 3 月发布了第一个正式版本 Go1（这个时候 Go 的工具链和运行时都还是 C 编写的，直到 go1.5 才完成自举），此后每一年发布两个小版本更新，一直运营和维护到现在。\",\"提示\",\"图中便是三位大佬设计 Go 语言的情景，里面不少典故\",\"三位创始人其实在很早以前就退隐了，在大部分时间里，团队领头人是Russ Cox，他早在 Go 语言未对外发布时就已经参与到了开发工作当中，此后一直管理 Go 团队长达 12 年，直到 2024 年 8 月卸任，由Austin Clements接手并领导后续的开发工作。\"]},\"88\":{\"h\":\"特性\",\"t\":[\"语法简单 Go 语言在自由度和灵活度上做了取舍，以此换来了更好的维护性和平滑的学习曲线。\",\"部署友好 Go 静态编译后的二进制文件不依赖额外的运行环境，编译速度也非常快。\",\"交叉编译 Go 仅需要在编译时简单设置两个参数，就可以编译出能在其它平台上运行的程序\",\"天然并发 Go 语言对于并发的支持是纯天然的，仅需一个关键字，就可以开启一个异步协程。\",\"垃圾回收 Go 有着优秀的 GC 性能，大部分情况下 GC 延时都不会超过 1 毫秒。\",\"丰富的标准库 从字符串处理到源码 AST 解析，功能强大且丰富的标准库是 Go 语言坚实的基础。\",\"完善的工具链 Go 有着完善的开发工具链，涵盖了编译，测试，依赖管理，性能分析等方方面面。\",\"Go 语言抛弃了继承，弱化了 OOP，类，元编程，泛型，Lamda 表达式等这些特性，拥有良好的性能和较低的上手难度，它适合用于云服务开发，应用服务端开发，以及网络编程。它自带 GC，不需要开发者手动管理内存，静态编译和交叉编译这两点对于运维而言也十分友好。\",\"Go 语言的缺点同样也有很多，比如令人诟病的错误处理，残缺的泛型，标准库虽然很丰富但内置的数据结构却没几个，interface{}类型满天飞，没有枚举类型，除此之外，Go 开发团队非常固执己见，不善于听取社区意见等等。（相比之下，Rust 在错误处理，泛型，依赖管理，枚举，接口等方面做的要好得多）\",\"总的来说，我们需要辩证的看待一门语言，作为一门工程化的语言，Go 可以很大程度上提高团队的下限，就算开发人员水平再差也能兜底，很少出现一颗老鼠屎坏了一锅粥这种情况，同时因为简单的语法和较低的学习难度，可以让人很快的上手一个项目。尽管 Go 面世只有十余年不到，但已经有相当多的公司将 Go 作为了首选语言，也能侧面说明 Go 正在逐渐流行起来。\",\"顺便一提，Go 还是一门完全开源的语言，由社区和谷歌共同维护 Go 语言的发展，官方地址是在谷歌仓库里，Github 上有一份同样的镜像仓库，如果有心你也可以参与到语言的设计当中。\",\"官方网站：The Go Programming Language\",\"谷歌开源仓库：google/go: Google Open Source\",\"Github 仓库：golang/go: The Go programming language\",\"提示\",\"笔者曾经给 Go 提过 PR，如果你想了解如何给 Go 贡献代码，可以看看我写的这篇文章：如何向 Go 贡献代码。\",\"相信很多人应该都或多或少听说过Rust，它是一个高性能的通用编程语言，其诞生时间比 Go 早一年，Go1 正式发布的时间是 2012 年，Rust 正式版发布时间为 2015 年，它们都是较为现代化的语言，这两门语言笔者都很喜欢，它们发展的领域各不相同，如果你不满足于 Go 的运行效率和表达能力，不妨试试 Rust，不过它的学习难度就远没有 Go 这么简单了。\"]},\"89\":{\"h\":\"安装\",\"t\":[\"Go 语言下载：Downloads - The Go Programming Language\",\"Stable Version 指的是目前处于维护状态的两个稳定版本，Archived Version 指的是不再维护的历史版本，前往更新日志了解更多关于维护规则以及历史版本的信息。\"]},\"90\":{\"h\":\"windows\",\"t\":[\"对于 windows 平台而言，有 installer 和 archive 两种类型可选，前者就是安装包，只需要点点点，推荐使用后者，会让你更熟悉 go 语言的目录结构，未来出问题不至于手足无措。选择下载 zip 文件，压缩文件中包含 go 语言的源代码以及工具链和一些文档，将其解压指定的路径，然后需要配置两个系统环境变量。\",\"GOROOT - go 语言的安装路径\",\"GOPATH - go 语言依赖存放路径\",\"设置好后，给系统环境变量PATH添加两条新的项\",\"%GOROOT%\\\\bin：这是 go 二进制程序地址\",\"%GOPATH%\\\\bin：这是未来会下载第三方依赖的二进制文件存放地址\",\"在powershell中执行go version命令，最后能正常显示版本就说明安装正确。\",\"PS C:\\\\user\\\\username> go version go version go1.21.3 windows/amd64\",\"更新的话只需要下载新的 zip 覆盖原安装目录即可。\"]},\"91\":{\"h\":\"linux\",\"t\":[\"拿 ubuntu 举例，复制想要的版本的链接，下载到本地\",\"$ wget https://golang.google.cn/dl/go1.21.1.linux-amd64.tar.gz\",\"解压到指定目录\",\"$ tar -C ~/go -xzf go1.21.1.linux-amd64.tar.gz\",\"在$HOME/.bashrc文件中设置环境变量\",\"export GOROOT=$HOME/go export GOPATH=$HOME/gopath export PATH=$PATH:$GOROOT/bin:$GOPATH/bin\",\"完成后查看安装版本，确认正确安装\",\"$ go version go version go1.21.1 linux/amd64\",\"更新的话只需要下载新的 tar.gz 覆盖原安装目录即可。\"]},\"92\":{\"h\":\"安装管理\",\"t\":[\"上面的安装方式对于基本使用已经够用了，个人推荐用以下的目录结构来存放 go 语言及其衍生文件\",\"go/ | |--root/ | | | |--go1.21.3/ | | | |--go1.20.10/ | |--mod/ | | | |--bin/ | | | |--libs/ | |--cache/ | |--temp/ | |--env\",\"释义如下\",\"go/root目录用于存放各个版本 go 语言源文件\",\"go/mod对应GOAPTH\",\"go/mod/libs对应GOMODCACHE，也就是下载的第三方依赖存放地址\",\"go/mod/bin对应GOBIN，第三方依赖二进制文件存放地址\",\"go/cache，对应GOCACHE，存放缓存文件\",\"go/temp，对应GOTMPDIR，存放临时文件\",\"go/env，对应GOENV，全局环境变量配置文件\",\"该方式更新时不需要覆盖原安装目录，只需要将其存放到go/root目录下，然后修改GOROOT系统环境变量为该目录下指定版本的文件夹即可。在默认情况下 env 文件是读取的路径GOROOT/env，通过设置GOENV系统变量将其与GOROOT分离开，避免了因版本变更时 go 环境变量配置的变化，下面是env文件的初始设置。\",\"GO111MODULE=on GOCACHE=go/cache GOMODCACHE=go/mod/libs GOBIN=go/mod/bin GOTMPDIR=go/temp\",\"这只是笔者比较喜欢的一个目录风格，前往命令-环境变量了解更多关于环境变量的信息，你可以完全按照个人喜好来进行自定义。\"]},\"93\":{\"h\":\"多版本管理\",\"t\":[\"我编写了一个多版本管理工具govm，结合上面目录结构使用效果最佳。它可以管理本地多个 Go 版本，可以随时切换版本，也可以搜索并下载其他 Go 版本并将其安装到本地。\",\"$ govm search 1.22 -n 10 go1.22.6 76 MB go1.22.5 76 MB go1.22.4 76 MB go1.22.3 76 MB go1.22.2 76 MB go1.22.1 76 MB go1.22.0 76 MB $ govm install 1.22.4 Fetch go1.22.4 from https://dl.google.com/go/go1.22.4.windows-amd64.zip Downloading go1.22.4.windows-amd64.zip 100% |████████████████████████████████████████| (76/76 MB, 32 MB/s) [2s] Extract go1.22.4.windows-amd64.zip to local store Remove archive from cache Version go1.22.4 installed $ govm use 1.22.4 Use go1.22.4 now # 重新登陆shell $ go version go version go1.22.4 windows/amd64\",\"如果你想了解如何用 Go 编写命令行工具，不嫌弃的话可以将 govm 作为一个项目参考，它也是由 Go 编写的。\"]},\"94\":{\"h\":\"编辑器\",\"t\":[\"主流的 go 语言 IDE 目前个人只推荐下面两个\",\"goland：jetbrain 出品，功能强大，全方位支持，不过需要付费，可以考虑 IDEA 社区版配合插件\",\"vscode：无需付费，万能的编辑器，有插件加持什么语言都能写\",\"如果有其它的编辑器更符合自身的使用习惯也都可以用，用什么编辑器倒无所谓，如果只是写一些简短的练习代码，可以试试官方提供的goplay，可以在线运行 go 代码。\",\"提示\",\"如果你正在使用 JetBrains Toolbox，可以尝试我写的一个命令行工具AutoToolBox，可以为 Toolbox 生成 windows 右键菜单，效果图如下。\"]},\"95\":{\"h\":\"寄语\",\"t\":[\"Go 语言整体难度并不高，如果你有其他语言基础学起来会非常简单，在学习的过程中遇到琢磨不透的难点可以先跳过，学习任何一门语言都是先笼统的了解这个语言的大致语法与结构，再去深究一些特性和细节，文档中的理念也是如此，适合入门学习。笔者本人也仅仅只是一名普通学生，难免会有疏漏和勘误，如果有发现任何错误可以在 Github 提交 PR，如果觉得文档还不错可以在 Github 上点一个 Star。\",\"如果你是强 OOP 语言的开发者，比如 Java，C#等，请不要带着 OOP 的思想先入为主，否则会对 go 的很多设计感到匪夷所思，在编写代码的时候也会非常难受，笔者最开始也是这样。\"]},\"96\":{\"h\":\"概览\",\"t\":[\"下面对本站的内容进行一个简单的介绍，以便各位可以按需阅读，部分页面是空白的代表着还未更新。\",\"语言入门：主要讲解关于 Go 语言本身的内容，偏理论。 \",\"语法基础：主要讲一些十分基础的语法，像是if，for之类的语法规则。\",\"语法进阶：讲一些 Go 独有的东西，关于模块，测试，协程等相关内容。\",\"标准库：对 Go 自带的标准库的一个简单介绍，因为标准库的内容实在太过庞大所以随缘更新。\",\"实现原理：主要讲 Go 语言的一些内部设计原理，比如协程调度，内存管理，垃圾回收等。\",\"社区生态：主要讲解 Go 周边的生态，偏应用。 \",\"数据库：通过 Go 操作主流的数据库。\",\"微服务：介绍一些与 Go 有关的微服务工具。\",\"第三方库：介绍一些由 Go 编写的第三方库，随缘更新，也可以直接在依赖导航里面查看。\",\"前往准备开始进行入门学习\"]},\"97\":{\"h\":\"外链\",\"t\":[\"这里的链接是在学习过程中慢慢收集的，对作者的学习与成长有着非常大的帮助，并且在本站编写的文档中也借鉴了许多，在此列出以表示感谢，同时也希望能够对其他人提供一点点帮助。\",\"提示\",\"排版的顺序是随意的，没有任何附加含义。\"]},\"98\":{\"h\":\"导航站\",\"t\":[\"名称\",\"网址\",\"Go 导航站\",\"Golang 导航 - 学 Go 从这里开始！ (studygolang.com)\"]},\"99\":{\"h\":\"电子书\",\"t\":[\"名称\",\"网址\",\"Go 语言设计与实现\",\"Go 语言设计与实现 Go 语言设计与实现 (draveness.me)\",\"Go 语言圣经\",\"Go 语言圣经 - Go 语言圣经 (gopl-zh.github.io)\",\"Effective Go\",\"《高效的 Go 编程 Effective Go》 Go 技术论坛 (learnku.com)\",\"Go 标准库教程\",\"Go 语言标准库\",\"Go 语言原本\",\"Changkun OuGo 语言原本 (golang.design)\",\"Go 语言设计哲学\",\"Go 语言设计哲学\",\"Go 语言高性能编程\",\"Go 语言高性能编程\",\"Go 语言高级编程\",\"Go 语言高级编程\"]},\"100\":{\"h\":\"实体书\",\"t\":[\"名称\",\"《Go 程序设计语言》\",\"《Go 专家编程》\",\"《Go Web 编程》\",\"《Go 语言设计与实现》\"]},\"101\":{\"h\":\"论坛\",\"t\":[\"名称\",\"网址\",\"地鼠文档\",\"地鼠文档 (topgoer.cn)\",\"Go 语言菜鸟教程\",\"Go 语言教程 菜鸟教程 (runoob.com)\",\"Go 语言入门教程\",\"Go 语言入门教程，Golang 入门教程（非常详细） (biancheng.net)\",\"Go 语言中文网\",\"首页 - Go 语言中文网 - Golang 中文社区 (studygolang.com)\"]},\"102\":{\"h\":\"博客\",\"t\":[\"名称\",\"网址\",\"Go 程序设计\",\"Go 程序设计 (yuque.com)\",\"真没什么逻辑\",\"面向信仰编程 (draveness.me)\",\"煎鱼大佬\",\"煎鱼 (eddycjy.com)\",\"代码随想录\",\"代码随想录 (programmercarl.com)\"]},\"103\":{\"h\":\"Playgrounds\"},\"104\":{\"h\":\"介绍\",\"t\":[\"对于一些简单的单文件演示代码，go 提供了 playground 来在线运行 go 代码，不需要安装 go 环境，只需要一个浏览器即可。\",\"Playground 开源地址：go-playground (github.com)\",\"官方 Playground 地址：Go Playground - The Go Programming Language\",\"第三方 Playground 地址：The Go Play Space\",\"由于它是一个开源项目，你也可以选择在自己的服务器上搭建个人 playground，安装方法见官方文档。Playground 服务器会将上传的代码段存储到谷歌云存储，所以不建议分享敏感代码。对于国内用户，建议使用第二个因为不需要魔法上网，但它依旧是基于官方的 Playground 服务器，代码也会同步到官方那边的服务器里面。\",\"笔者自己整了一个玩具goplay，用于在命令行内与 playground 服务器交互，也可以当作 playground HTTP 客户端库来使用。\"]},\"105\":{\"h\":\"HTTP API\",\"t\":[\"上面提到的都是浏览器的方式交互，如果想要从客户端的角度与 playground 服务器交互，比如编写一个 vuepress go playground 的插件。由于 playground 服务器本身是一个 HTTP 服务器，我们可以使用 HTTP 的方式来与其进行交互。官方本身没有提供 API 文档，下面的 HTTP API 是我从 playground 代码里面了解到的，随着时间的推移可能会有些出入，为了获取最准确的信息可以自行去仓库里面查阅。\",\"官方 playground 服务器地址：play.golang.org，下面演示都以官方服务器为准，如果使用第三方服务器的话替换域名即可。\"]},\"106\":{\"h\":\"share\",\"t\":[\"分享代码段到 playground 服务器上，返回对应的 snippet id。\",\"POST https://play.golang.org/share\",\"名称\",\"位置\",\"类型\",\"必选\",\"说明\",\"body\",\"body\",\"string\",\"否\",\"none\",\"响应示例\",\"13AbsRp7_S9\"]},\"107\":{\"h\":\"compile\",\"t\":[\"编译并运行指定代码段，然后返回结果\",\"POST https://play.golang.org/compile\",\"名称\",\"位置\",\"类型\",\"说明\",\"body\",\"form-data\",\"string\",\"代码段\",\"withVet\",\"form-data\",\"string(ture/false)\",\"go vet\",\"响应示例\",\"{ \\\"Errors\\\": \\\"\\\", \\\"Events\\\": [ { \\\"Message\\\": \\\"Hello, world\\\\n\\\", \\\"Kind\\\": \\\"stdout\\\", \\\"Delay\\\": 0 } ], \\\"Status\\\": 0, \\\"IsTest\\\": false, \\\"TestsFailed\\\": 0 }\"]},\"108\":{\"h\":\"fmt\",\"t\":[\"返回格式化后的代码段\",\"POST https://play.golang.org/fmt\",\"名称\",\"位置\",\"类型\",\"说明\",\"body\",\"form-data\",\"string\",\"代码段\",\"imports\",\"form-data\",\"string(ture/false)\",\"fix imports\",\"响应示例\",\"{ \\\"Body\\\": \\\"// You can edit this code!\\\\n// Click here and start typing.\\\\npackage main\\\\n\\\\nimport \\\\\\\"fmt\\\\\\\"\\\\n\\\\nfunc main() {\\\\n\\\\tfmt.Println(\\\\\\\"Hello, world\\\\\\\")\\\\n}\\\\n\\\", \\\"Error\\\": \\\"\\\" }\"]},\"109\":{\"h\":\"health\",\"t\":[\"对 playground 服务器进行健康检查\",\"GET https://play.golang.org/_ah/health\",\"响应示例\",\"ok\"]},\"110\":{\"h\":\"version\",\"t\":[\"查看 playground 服务器 go 版本\",\"GET https://play.golang.org/version\",\"响应示例\",\"{ \\\"Version\\\": \\\"go1.21.4\\\", \\\"Release\\\": \\\"go1.21\\\", \\\"Name\\\": \\\"Go 1.21\\\" }\"]},\"111\":{\"h\":\"view\",\"t\":[\"查看指定 snippet id 的代码段\",\"GET https://play.golang.org/p/{id}.go\",\"响应示例\",\"// You can edit this code! // Click here and start typing. package main import \\\"fmt\\\" func main() { fmt.Println(\\\"Hello, world\\\") }\"]},\"112\":{\"h\":\"download\",\"t\":[\"post 方法携带 download form 参数会以 attachment 方式返回结果\",\"POST https://play.golang.org/p/{id}.go\",\"名称\",\"位置\",\"类型\",\"说明\",\"download\",\"form-data\",\"string(true/false)\",\"是否下载\",\"响应示例\",\"// You can edit this code! // Click here and start typing. package main import \\\"fmt\\\" func main() { fmt.Println(\\\"Hello, world\\\") }\",\"提示\",\"如果在使用官方服务器的过程中，提示你无法访问或者出现下面这种信息\",\"Viewing and/or sharing code snippets is not available in your country for legal reasons.\",\"这是因为某种不可抗力中国大陆地区的用户无法访问服务器，并且在 playground 源代码中也有这么一个函数\",\"func allowShare(r *http.Request) bool { if r.Header.Get(\\\"X-AppEngine-Country\\\") == \\\"CN\\\" { return false } return true }\",\"具体原因看这里 Issue #20065 · golang/go (github.com)。\"]},\"113\":{\"h\":\"更新日志\",\"t\":[\"维护版本：\",\"go1.23，首次发布：2024-08-13，最后更新：go1.23.4 (2024-12-03)\",\"go1.22，首次发布：2024-02-08，最后更新：go1.22.6 (2024-08-06)\",\"Go 语言官方更新日志：Release History - The Go Programming Language\",\"Go 官方采用语义化版本来进行版本标识，格式为 v主版本.次版本.补丁版本 (见Semantic Versioning)，主版本的更新意味着发生了 Breaking Change，即无法向下兼容的更新，次版本的更新意味着有新功能添加同时保持向下兼容，补丁版本的更新意味着有问题被修复同时保持向下兼容。\",\"Go 团队每半年发布一个二级版本，并且只有最新的两个二级版本是长期维护，维护时间都是六个月，鉴于 Go 每一次更新都保持着相当高的兼容性，建议在新版本稳定后及时将 Go 升级到最新版。\",\"Go2.0 上一次提出草案是在 2018 年 11 月 19 日，那时还是处于 go1.13 版本，五年过后，版本已经迭代到了 go1.21，Go2.0 的各种想法已经通过增量更新的方式体现在了 Go1.0 上，创始人之一也曾明确表示未来可能并不会有 Go2.0，Go 将一直为保持向下兼容而努力(见Go 1 and the Future of Go Programs)。\",\"提示\",\"此页面只是对官方日志的一个简单搬运，不定期更新，想获取最新消息还请前往官网。\"]},\"114\":{\"h\":\"1.23\",\"t\":[\"首次发布：2024-08-13\",\"最后更新：go1.23.4 (2024-12-03)\",\"go1.23 版本的详细更新日志可以前往Go 1.23 Release Notes查看，在其维护期间发布的所有补丁版本可以前往Go1.23 - Release Patch了解。\",\"语言层面\",\"for range 支持迭代器函数，详细信息查看Go Wiki: Rangefunc Experiment。\",\"func Upper(s []string) iter.Seq2[int, string] { return func(yield func(int, string) bool) { for i, s1 := range s { if !yield(i, strings.ToUpper(s1)) { return } } return } } func main() { sl := []string{\\\"hello\\\", \\\"world\\\", \\\"golang\\\"} for i, s := range Upper(sl) { fmt.Printf(\\\"%d : %s\\\\n\\\", i, s) } } //0 : HELLO //1 : WORLD //2 : GOLANG\",\"这是一个比较实用的特性，一般会结合泛型来用。\",\"标准库\",\"新增标准库iter，它定义和描述了关于迭代器的详细信息\",\"maps库新增了若干个迭代器函数\",\"slices库新增了若干个迭代器函数\",\"新增structs库，提供了可以修改结构体属性的能力，比如内存布局\",\"type Person struct { Name string Age int _ structs.HostLayout }\",\"优化了time标准库的实现\",\"Linker\",\"处理//go:linkname的滥用，对于一些经常被引用的 API 暂时允许其存在，比如runtime.memhash64，runtime.nanotime等等，此后对于其他的新引用将不会允许。\",\"//go:linkname gcinit runtime.gcinit func gcinit() func main() { gcinit() }\",\"像这种代码就无法通过编译\",\"link: main: invalid reference to runtime.gcinit\",\"工具链\",\"新增go telemetry 命令用于遥测数据管理\"]},\"115\":{\"h\":\"1.22\",\"t\":[\"首次发布：2024-02-06\",\"最后更新：go1.22.6（released 2024-08-06）\",\"go1.22 版本的详细更新日志可以前往Go 1.22 Release Notes查看，在其维护期间发布的所有补丁版本可以前往Go1.22 - Release Patch了解。\",\"语言层面\",\"解决了 go 语言循环变量的问题\",\"func main() { var wg sync.WaitGroup const n = 10 wg.Add(n) for i := 0; i < n; i++ { go func() { fmt.Println(i) wg.Done() }() } wg.Wait() }\",\"这段代码在 1.22 前，会输出 10 个 9，在 1.22 后则会正常输出 0 到 9。\",\"for range现在支持迭代数字类型，如下\",\"for i := range 10 { fmt.Println(i) }\",\"标准库\",\"增强了net/http标准库的路由\",\"database/sql新增了sql.Null泛型类型\",\"type Null[T any] struct { V T Valid bool }\",\"使用如下\",\"type Person struct { Name sql.Null[string] Age sql.Null[int] }\"]},\"116\":{\"h\":\"1.21\",\"t\":[\"首次发布：2023-08-08\",\"最后更新：go1.21.13 (released 2024-08-06)\",\"go1.21 版本的详细更新日志可以前往Go 1.21 Release Notes查看，在其维护期间发布的所有补丁版本可以前往Go1.21 - Release Patch了解。\",\"语言层面\",\"新增了两个内置函数min ，max，用于计算最大值最小值。\",\"新增内置函数clear，用于清空 map 和 slice\",\"更新了package初始化顺序\",\"按导入路径对所有包进行排序\",\"重复执行，直到包的列表为空\",\"找到列表中所有的导入都已被初始化的第一个包\",\"初始化该包并将其从列表中删除\",\"提高和改进了类型推理的能力和精度，主要是泛型相关。\",\"推出了for range循环变量改进的预览版本，这是一个困扰了 Go 开发者接近十年的问题，官方终于要解决了，详情见：LoopvarExperiment · golang/go Wiki (github.com)和Proposal: Less Error-Prone Loop Variable Scoping (googlesource.com)\",\"保证了recover的返回值不会是nil，如果在调用panic时参数为nil，则会触发另一个panic，返回*runtime.PanicNilError。为了兼容性，在编译时设置GODEBUG=panicnil=1允许向panic传入nil。\",\"标准库\",\"新增log/slog库，提供标准的结构化日志库\",\"新增testing/slogtest库，用于验证slog.Handler的实现\",\"新增slices库，提供了一系列泛型函数用于操作切片。\",\"新增maps库，提供了一系列泛型函数用于操作 map\",\"新增cmp库，用于比较有序类型。\",\"其他\",\"go1.21.0 至少在 windows 系统上至少需要 win10 或者 Windows Server 2016 版本以上才能运行，先前的版本不再支持。\",\"go1.21.0 至少需要在 macOS 10.15 Catalina 或者更新的版本才能运行，先前的版本不再支持。\",\"新增了实验性的 WebAssembly System Interface，Go 依旧在 WASM 这块不断的探索。\",\"在 1.20 还是实验性质的(Profile-guide optimization)PGO(见Profile-guided optimization - The Go Programming Language)，1.21 版本正式启用。在 main 包下包含default.pgo文件会启用该功能，开启后性能可能会提升 2%-7%。\",\"当打印非常深的运行时调用栈时，从原来的只打印前一百个帧，到现在分别打印前 50 的最后的 50 个帧。\",\"优化了在 Unix 平台 CGO 的调用性能，从 1-3 微秒优化到了现在的 100-200 纳秒。\",\"在 1.21 版本，编译速度提升了接近 6%，这主要归功于编译器本身使用 PGO 来构建。\"]},\"117\":{\"h\":\"1.20\",\"t\":[\"首次发布：2023-02-01\",\"最后更新：go1.20.14 (released 2024-02-06)\",\"go1.20 版本的详细更新日志可以前往Go 1.20 Release Notes查看，在其维护期间发布的所有补丁版本可以前往Go1.20 - Release Patch了解。\",\"语言层面\",\"在将切片类型转换为数组时，原来需要对指针数组解引用*(*[4byte])(x)来避免和切片操作同一个底层数组，现在可以直接这么写[4]byte(x)。\",\"unsafe新增了SliceData，String，StringData函数，用于构建和结构切片与字符串值。\",\"标准库\",\"新增crypto/ecdh库，提供了对于 ECDH(Elliptic Curve Diffie-Hellman，一种非对称加密方法)的支持。\",\"go1.20 扩展了对 error 包装的支持，允许一个 error 包装多个 error。\",\"新增net/http.ResponseContorller，提供了一种更清晰、更易于发现的方法来添加每个 handler controls。\",\"httputil.ReverseProxy包含了一个新的 Rewrite Hook 函数，用于取代之前的 Director Hook。\",\"其他\",\"go1.20 是最后一个支持 win7，8，Server2008 和 Server2012 的版本，在未来版本中不再提供支持。\",\"go1.20 是最后一个支持 macOS 10.13 或 10.14 的版本，未来版本将不再提供支持。\",\"在 1.18 和 1.19 版本中，由于泛型的出现，相较于 1.17 编译速度出现了倒退，go1.20 编译速度将会提升 10%左右。\",\"发布 PGO(Profile-guided optimization)的预览版本，这是一种计算机界的编译器优化技术，可以提高运行时性能。\",\"在 go1.20，在没有 C toolchains 的系统上，go command 禁用 cgo。\",\"支持收集程序代码覆盖率文件，见Coverage profiling support for integration tests - The Go Programming Language\",\"对 GC 进行了改进，提高了稳定性，减少内存开销，提升了整体 2%的 CPU 性能。\"]},\"118\":{\"h\":\"1.19\",\"t\":[\"首次发布：2022-08-02\",\"最后更新：go1.19.13 (released 2023-09-06)\",\"go1.19 版本的详细更新日志可以前往Go 1.19 Release Notes查看，在其维护期间发布的所有补丁版本可以前往Go1.19 - Release Patch了解。\",\"重要变化\",\"内存模型向 c/c++看齐，类似于 TcMollcate\",\"sync/atomic包现在提供了更多的类型可供使用\",\"支持使用runtime/debug.SetMemoryLimit函数对 go 内存进行软限制，在某些情况下可以提供内存利用效率\",\"运行时现在会根据协程栈的平均使用情况来选择一个合适的大小为其初始化栈空间内存，这样可以避免频繁的栈扩容缩容\"]},\"119\":{\"h\":\"1.18\",\"t\":[\"首次发布：2022-03-15\",\"最后更新：go1.18.10 (released 2023-01-10)\",\"go1.18 版本的详细更新日志可以前往Go 1.18 Release Notes查看，在其维护期间发布的所有补丁版本可以前往Go1.18 - Release Patch了解。\",\"语言层面\",\"重量级更新，支持泛型，类型集接口，参数类型约束\",\"其它\",\"优化了append函数的扩容行为\",\"新增debug/buildinfo包，可以在运行时获取 go 程序的构建信息\",\"gofmt 现在可以并发的格式化源文件\"]},\"120\":{\"h\":\"1.17\",\"t\":[\"首次发布：2021-08-16\",\"最后更新：go1.17.13 (released 2022-08-01)\",\"go1.17 版本的详细更新日志可以前往Go 1.17 Release Notes查看，在其维护期间发布的所有补丁版本可以前往Go1.17 - Release Patch了解。\",\"语言层面\",\"新增unsafe.Add函数，支持指针运算\",\"新增unsafe.Slice函数，支持获取切片的底层数组的指针\",\"切片现在可以转换为数组指针类型，[]T => *[N]T，前提是数组的长度要小于等于切片的长度\"]},\"121\":{\"h\":\"1.16\",\"t\":[\"首次发布：2021-02-16\",\"最后更新：go1.16.15 (released 2022-03-03)\",\"go1.16 版本的详细更新日志可以前往Go 1.16 Release Notes查看，在其维护期间发布的所有补丁版本可以前往Go1.16 - Release Patch了解。\",\"重要变化\",\"该版本没什么重要的语法上的变更，一些重要的变化如下\",\"弃用ioutil包\",\"支持通过//go:embed指令来将一些静态文件嵌入到程序中\",\"新增io/fs.Fs类型，对文件系统进行了更好的抽象\"]},\"122\":{\"h\":\"1.15\",\"t\":[\"首次发布：2020-08-11\",\"最后更新：go1.15.15 (released 2021-08-05)\",\"go1.15 版本的详细更新日志可以前往Go 1.15 Release Notes查看，在其维护期间发布的所有补丁版本可以前往Go1.15 - Release Patch了解。\",\"重要变化\",\"该版本没什么重要的语法上的变更，一些重要的变化如下\",\"优化了小对象的分配效率\",\"新增了包time/tzdata，通过下面的方式支持将时区数据库嵌入到程序中，因为有很多系统本地并没有时区数据信息。\",\"improt _ \\\"time/tzdata\\\"\",\"对 go 链接器做出了重大改进，减少了其资源使用，并提高了代码的健壮性\",\"在某些情况下，允许unsafe.Pointer转换为uinptr\"]},\"123\":{\"h\":\"1.14\",\"t\":[\"首次发布：2020-02-25\",\"最后更新：go1.14.15 (released 2021-02-04)\",\"go1.14 版本的详细更新日志可以前往Go 1.14 Release Notes查看，在其维护期间发布的所有补丁版本可以前往Go1.14 - Release Patch了解。\",\"语言层面\",\"支持方法集接口类型嵌套\",\"type MyIO interface { io.WriteCloser }\",\"**其它 **\",\"引用了开放编码优化，defer调用的开销降低至几乎跟原生调用一样\",\"支持协程间的异步抢占，没有函数调用的循环将不会再永久阻塞调度\"]},\"124\":{\"h\":\"1.13\",\"t\":[\"首次发布：2019-09-03\",\"最后更新：go1.13.15 (released 2020-08-06)\",\"go1.13 版本的详细更新日志可以前往Go 1.13 Release Notes查看，在其维护期间发布的所有补丁版本可以前往Go1.13 - Release Patch了解。\",\"语言层面\",\"支持更现代的数字字面量，比如\",\"0b101 // 二进制 0o10 // 十进制 0x1B // 十六进制\",\"支持下划线分割数字以带来更好的可读性\",\"10_000\",\"虚数i的后缀现在可以是任何的二进制，十进制，十六进制，或浮点数数字\",\"其它\",\"GO111MODULE值默认为auto\",\"新增GOPRIVATE环境变量来支持私有的依赖源\",\"新增GOSUMDB环境环境\",\"derfer的使用开销降低了 30%\",\"当发生索引下标越界时，panic现在会打印出下标信息\",\"go 下载依赖时会进行语义化版本验证\"]},\"125\":{\"h\":\"1.12\",\"t\":[\"首次发布：2019-02-25\",\"最后更新：go1.12.17 (released 2020-02-12)\",\"go1.12 版本的详细更新日志可以前往Go 1.12 Release Notes查看，在其维护期间发布的所有补丁版本可以前往Go1.12 - Release Patch了解。\",\"重要变化\",\"该版本没什么重要的语法上的变更，一些重要的变化如下\",\"显著提高了堆的扫描性能\",\"运行时将更积极的向操作系统释放申请的内存\",\"用于下载 go 依赖的命令现在可以并发安全的使用\"]},\"126\":{\"h\":\"1.11\",\"t\":[\"首次发布：2018-08-24\",\"最后更新：go1.11.13 (released 2019-08-13)\",\"go1.11 版本的详细更新日志可以前往Go 1.11 Release Notes查看，在其维护期间发布的所有补丁版本可以前往Go1.11 - Release Patch了解。\",\"重要变化\",\"该版本没什么重要的语法上的变更，一些重要的变化如下\",\"GoMod 首次发布，此前依赖管理的混乱局面将要结束\",\"首次实验性的支持了 WASM\",\"运行时采用稀疏堆布局，不再限制堆大小\"]},\"127\":{\"h\":\"1.10\",\"t\":[\"首次发布：2018-02-16\",\"最后更新：go1.10.8 (released 2019-01-23)\",\"go1.10 版本的详细更新日志可以前往Go 1.10 Release Notes查看，在其维护期间发布的所有补丁版本可以前往Go1.10 - Release Patch了解。\",\"重要变化\",\"该版本没什么重要的语法上的变更，一些重要的变化如下\",\"go install命令现在只用于安装和编译命令行工具，不再用于下载依赖\",\"go get命令现在用于下载源码依赖\",\"go 测试现在会缓存测试结果，并且会在运行前自动运行go vet\",\"显著降低了 GC 在活跃时造成的延时\"]},\"128\":{\"h\":\"1.9\",\"t\":[\"首次发布：2017-08-24\",\"最后更新：go1.9.7 (released 2018-06-05)\",\"go1.9 版本的详细更新日志可以前往Go 1.9 Release Notes查看，在其维护期间发布的所有补丁版本可以前往Go1.9 - Release Patch了解。\",\"语言层面\",\"支持类型别名\",\"其它\",\"支持并行编译\",\"新增并发安全的sync.Map\"]},\"129\":{\"h\":\"1.8\",\"t\":[\"首次发布：2017-02-16\",\"最后更新：go1.8.7 (released 2018-02-07)\",\"go1.8 版本的详细更新日志可以前往Go 1.8 Release Notes查看，在其维护期间发布的所有补丁版本可以前往Go1.8 - Release Patch了解。\",\"语言层面\",\"当两个结构体进行类型转换时，会忽略结构体 tag 的不同\",\"func example() { type T1 struct { X int `json:\\\"foo\\\"` } type T2 struct { X int `json:\\\"bar\\\"` } var v1 T1 var v2 T2 v1 = T1(v2) // now legal }\",\"其它\",\"垃圾收集造成的暂停时间低至 10 微秒，大部分情况下低于 100 微秒（可以看到几乎每个版本 go 都在努力改进 GC）\",\"调用defer的开销减少了接近一半\",\"go 调用 c 的开销减少了接近一半\",\"优化了 map 的并发使用检测\"]},\"130\":{\"h\":\"1.7\",\"t\":[\"首次发布：2016-08-15\",\"最后更新：go1.7.6 (released 2017-05-23)\",\"go1.7 版本的详细更新日志可以前往Go 1.7 Release Notes查看，在其维护期间发布的所有补丁版本可以前往Go1.7 - Release Patch了解。\",\"重要变化\",\"将golang.org/x/net/context加入标准库\",\"gc 时间相较于 1.6 大幅缩短\",\"testing包支持子测试\"]},\"131\":{\"h\":\"1.6\",\"t\":[\"首次发布：2016-02-17\",\"最后更新：go1.6.4 (released 2016-12-01)\",\"go1.6 版本的详细更新日志可以前往Go 1.6 Release Notes查看，在其维护期间发布的所有补丁版本可以前往Go1.6 - Release Patch了解。\",\"重要变化\",\"该版本没有语法上的变更，下面是比较重要的变化\",\"对 map 进行并发使用检测，如果检测到了 map 正在并发使用会抛出fatal\",\"在发生panic时，只会打印正在运行协程的调用栈\",\"支持 HTTP/2\"]},\"132\":{\"h\":\"1.5\",\"t\":[\"首次发布：2015-08-19\",\"最后更新：go1.5.4 (released 2016-04-12)\",\"go1.5 版本的详细更新日志可以前往Go 1.5 Release Notes查看，在其维护期间发布的所有补丁版本可以前往Go1.5 - Release Patch了解。\",\"语言层面\",\"在初始化 map 字面量的键时，允许省略元素类型\",\"m := map[Point]string{ Point{29.935523, 52.891566}: \\\"Persepolis\\\", Point{-25.352594, 131.034361}: \\\"Uluru\\\", Point{37.422455, -122.084306}: \\\"Googleplex\\\", } // 省略类型 m := map[Point]string{ {29.935523, 52.891566}: \\\"Persepolis\\\", {-25.352594, 131.034361}: \\\"Uluru\\\", {37.422455, -122.084306}: \\\"Googleplex\\\", }\",\"其它\",\"运行时和编译器完全由 go 重写，不再包含任何 c 代码\",\"支持并发垃圾收集，大大减少了程序暂停的时间\",\"GOMAXPROCS默认值变为机器的逻辑核数\",\"internal包的语义可以应用到任何地方，不再只局限于 go 的源码包\",\"实验性的支持 vendor 依赖管理（终于开始着手处理依赖管理这部分了）\"]},\"133\":{\"h\":\"1.4\",\"t\":[\"首次发布：2014-12-10\",\"最后更新：go1.4.3 (released 2015-09-22)\",\"go1.4 版本的详细更新日志可以前往Go 1.4 Release Notes查看，在其维护期间发布的所有补丁版本可以前往Go1.4 - Release Patch了解。\",\"语言层面\",\"for range循环可以一个迭代参数，比如\",\"for i := range x { ... }\",\"但是不能一个都没有\",\"在调用双重引用类型的方法时，不再自动解引用\",\"type T int func (T) M() {} var x **T // 不被允许 x.M()\",\"其它\",\"在 1.4 之前，go 的运行时都是由 c 编写的，现在全部由 go 完成\",\"支持将包名修改为internal来表示该包的所有内容都是私有的不可导出\"]},\"134\":{\"h\":\"1.3\",\"t\":[\"首次发布：2014-06-18\",\"最后更新：go1.3.3 (released 2014-09-30)\",\"go1.3 版本的详细更新日志可以前往Go 1.3 Release Notes查看，在其维护期间发布的所有补丁版本可以前往Go1.3 - Release Patch了解。\",\"重要变化\",\"该版本没有语法上的变更，一些比较重要的变化如下\",\"协程栈模型从分段栈改为连续栈，提升了栈扩容的性能。\",\"提升了垃圾回收器指针判断的精度\",\"在小容量 map 中进行迭代，顺序也会变得不可预测\",\"由于一些运行时方面的完善，当前版本的 go 程序性能有了较大幅度的提升\"]},\"135\":{\"h\":\"1.2\",\"t\":[\"首次发布：2013-12-01\",\"最后更新：go1.2.2 (released 2014-05-05)\",\"go1.2 版本的详细更新日志可以前往Go 1.2 Release Notes查看，在其维护期间发布的所有补丁版本可以前往Go1.2 - Release Patch了解。\",\"语言层面\",\"对值为nil的变量进行操作会引发panic\",\"在对切片进行分隔时，可以使用第三个参数来限制被分割的切片容量从而更安全的使用切片\",\"var array [10]int slice := array[2:4:4]\",\"其它\",\"协程栈的最小内存大小由 4KB 提升到了 8KB\",\"将最大线程数限制在了 10000\",\"长时间运行的协程在发生函数调用时会被抢占（协作式抢占的首次引入）\"]},\"136\":{\"h\":\"1.1\",\"t\":[\"首次发布：2013-05-13\",\"最后更新：go1.1.2 (released 2013-08-13)\",\"go1.1 版本的详细更新日志可以前往Go 1.1 Release Notes查看，在其维护期间发布的所有补丁版本可以前往Go1.1 - Release Patch了解。\",\"语言层面\",\"一个数被 0 整除以前会抛出panic，到了 1.1 直接无法通过编译。\",\"方法可以作为一个值存在。\",\"引入了终止语句的概念，函数的返回规则更为宽松，终止语句的定义 - go-sepc。\",\"性能方面\",\"使用 go1.1 的工具编译的 go 程序性能大概可以提升 30%-40%\",\"其它:\",\"在 64 位机上堆内存的最大值提升到了几十 GB\",\"交叉编译时默认禁用 cgo\"]},\"137\":{\"h\":\"1.0\",\"t\":[\"首次发布：2012-03-28\",\"go1.0 版本的详细更新日志可以前往Go 1.0 Release Notes查看，在其维护期间发布的所有补丁版本可以前往Go1.0 - Release Patch了解。\",\"语言层面\",\"相较于预览版而言，语法上多了以下这些东西\",\"新增内置append函数，用于给切片添加元素\",\"新增内置close函数，用于关闭管道\",\"复合语义，在初始化切片，map，结构体字面量元素时，可以省略其类型，如下所示\",\"// 声明类型 holiday1 := []Date{ Date{\\\"Feb\\\", 14}, Date{\\\"Nov\\\", 11}, Date{\\\"Dec\\\", 25}, } // 省略类型 holiday2 := []Date{ {\\\"Feb\\\", 14}, {\\\"Nov\\\", 11}, {\\\"Dec\\\", 25}, }\",\"在init函数中使用的协程会直接启动，不需要再等待所有的包都初始化完毕。\",\"新增rune类型，表示一个 UTF-8 字符\",\"新增error内置接口，表示错误类型\",\"新增delete内置函数用于删除 map 中的键值对\",\"使用for range迭代 map 的顺序变得不可预测\",\"支持同时给多个变量赋值\",\"a := 1 b := 2 a, b = 3, 4\",\"变量隐藏问题：当函数的有具名返回值时，如果有任何返回值被隐藏了，则return语句必须携带返回值，否则编译不通过，下面是一个错误示例\",\"func Bug() (i, j, k int) { for i = 0; i < 5; i++ { for j := 0; j < 5; j++ { // Redeclares j. k += i * j if k > 100 { return // Rejected: j is shadowed here. } } } return // OK: j is not shadowed here. }\",\"允许复制带有私有字段的结构体值\",\"在结构体和切片都是可比较元素组成的情况下，允许它们作为 map 的键，同时移除了函数和 map 的可比较性\",\"除了语言层面之外，go1.0 在包的组织方式和标准库以及命令行方面相较于预览版本都有着非常大的改变，由于内容太多这里不再过多赘述，感兴趣可以自己去官网了解。\"]},\"138\":{\"h\":\"pre\",\"t\":[\"在 go1 正式发布之前，所有的版本都被称为预览版本，对于这些预览版本官方会每周发布一个快照版本，其中比较重要的版本有\",\"r60(2011-09-07)，规定了 else 块现在必须加括号\",\"r59(2011-08-01)，设计了新的结构体 tag 方案\",\"r58(2011-06-29)，修复了滥用 goto 而导致内存未初始化的问题，新增了 gui，exec 包\",\"r57(2011-05-03)，支持短变量多重赋值语法，重新设计了 http，reflect 包，将 gotest 作为一个 go 程序而非 shell 脚本\",\"r56(2011-03-07)，第一个稳定版本\",\"预览版本的开发始于 2009 年 12 月 09 日，在 go1 于 2012 年 3 月 28 日正式发布之后停止，持续了接近三年的时间，往后不再记录每周快照版本。前往Pre-Go 1 Release History了解这些主要版本的信息，前往Weekly Snapshot History了解全部预览版本的每周快照版本信息。\"]},\"139\":{\"h\":\"Consul\",\"t\":[\"consul 是一个能够让团队在服务与跨预置和多云环境中安全管理网络连接的解决方案，它提供了服务发现，服务网格，流量治理，网络基础设施自动更新等一系列功能。\",\"官方文档：Consul by HashiCorp\",\"开源地址：hashicorp/consul\",\"Consul 是 HashiCorp 公司开源的一款服务发现与注册工具，采用 Raft 选举算法，工具本身使用 Go 语言进行开发，因此部署起来十分的轻便。Consul 总共有以下特点：\",\"服务发现\",\"服务注册\",\"健康检查\",\"键值存储\",\"多数据中心\",\"实际上 consul 能做的事情不止服务发现，还可以做分布式配置中心，同类型的开源工具也有很多，比如 zookeeper，nacos，这里就不再做过多的介绍。\"]},\"140\":{\"h\":\"安装\",\"t\":[\"对于 Ubuntu 而言的话，执行下面的命令使用 apt 安装即可\",\"$ wget -O- https://apt.releases.hashicorp.com/gpg | sudo gpg --dearmor -o /usr/share/keyrings/hashicorp-archive-keyring.gpg $ echo \\\"deb [signed-by=/usr/share/keyrings/hashicorp-archive-keyring.gpg] https://apt.releases.hashicorp.com $(lsb_release -cs) main\\\" | sudo tee /etc/apt/sources.list.d/hashicorp.list $ sudo apt update && sudo apt install consul\",\"或者也可以在官网下载Install Consul 对应的安装包，由于 consul 是由 go 开发的，安装包本身也就只有一个二进制可执行文件，安装起来也相当的方便，安装成功后，执行如下命令查看版本。\",\"$ consul version\",\"正常输出就没有问题\",\"Consul v1.16.1 Revision e0ab4d29 Build Date 2023-08-05T21:56:29Z Protocol 2 spoken by default, understands 2 to 3 (agent will automatically use protocol >2 when speaking to compatible agents)\"]},\"141\":{\"h\":\"快速开始\",\"t\":[\"下面介绍如何快速搭建一个 consul 单节点，一般单节点是在开发期间测试用的，如果单节点使用起来没有问题，大概率多节点集群也不会由问题。单节点搭建起来十分的简单，只需要一行命令即可\",\"$ consul agent -dev -bind=192.168.48.141 -data-dir=/tmp/consul -ui -node=dev01\",\"一般会有如下输出\",\"==> Starting Consul agent... Version: '1.16.1' Build Date: '2023-08-05 21:56:29 +0000 UTC' Node ID: 'be6f6b8d-9668-f7ff-8709-ed57c72ffdec' Node name: 'dev01' Datacenter: 'dc1' (Segment: '<all>') Server: true (Bootstrap: false) Client Addr: [127.0.0.1] (HTTP: 8500, HTTPS: -1, gRPC: 8502, gRPC-TLS: 8503, DNS: 8600) Cluster Addr: 192.168.48.141 (LAN: 8301, WAN: 8302) Gossip Encryption: false Auto-Encrypt-TLS: false ACL Enabled: false Reporting Enabled: false ACL Default Policy: allow HTTPS TLS: Verify Incoming: false, Verify Outgoing: false, Min Version: TLSv1_2 gRPC TLS: Verify Incoming: false, Min Version: TLSv1_2 Internal RPC TLS: Verify Incoming: false, Verify Outgoing: false (Verify Hostname: false), Min Version: TLSv1_2 ==> Log data will now stream in as it occurs: 2023-08-25T17:23:33.763+0800 [DEBUG] agent.grpc.balancer: switching server: target=consul://dc1.be6f6b8d-9668-f7ff-8709-ed57c72ffdec/server.dc1 from=<none> to=<none> 2023-08-25T17:23:33.767+0800 [INFO] agent.server.raft: initial configuration: index=1 servers=\\\"[{Suffrage:Voter ID:be6f6b8d-9668-f7ff-8709-ed57c72ffdec Address:192.168.48.141:8300}]\\\"\",\"简单讲解一下释义\",\"agent是子命令，是 consul 的核心命令，consul agent就是运行一个新的 consul 代理，每一个 node 都是一个代理。\",\"dev，是 agent 的运行模式，总共有三种dev，client，server\",\"bind，局域网通信地址，端口默认 8301，一般此值为服务器的内网地址\",\"advertise，广域网通信地址，端口默认 8302，一般此值为服务器的外网地址\",\"data-dir，数据存放目录\",\"config-dir，配置存放目录，consul 会读取目录下所有的 json 文件\",\"bootstrap，标注当前 server 进入引导模式，在 raft 选举时会给自己投票，集群中处于该模式的 server 不能超过一个\",\"bootstrap-expect，即集群中期望的 server 数量，在没有达到指定数量之前，集群不会开始选举投票，不能与bootstrap同时使用。\",\"retry-join，agent 启动后，会不断尝试加入指定的节点，还支持以下的一些服务商发现方法\",\"aliyun aws azure digitalocean gce hcp k8s linode mdns os packet scaleway softlayer tencentcloud triton vsphere\",\"ui，运行 Web 后台\",\"node，执行节点名称，必须在集群中保持唯一。\",\"提示\",\"关于更多的 agent 参数释义，前往Agents - CLI Reference | Consul | HashiCorp Developer ，需要注意的是有些参数只有企业版能用。\",\"当成功运行后，访问127.0.0.1:8500，就可以浏览 Web 界面。\",\"dev01 的图标是一个星星，就说明它是 leader 节点。\",\"退出时，为了能其他节点感知到当前节点的退出，不建议强制杀死进程，可以使用命令\",\"consul leave\",\"或者\",\"consul force-leave\",\"也可以ctrl+c，让 consul agent 优雅退出。\"]},\"142\":{\"h\":\"概念\",\"t\":[\"这是一张 consul 集群的示意图，图中分为了两部分，控制面和数据面。consul 只负责控制面，分为服务集群和客户端，服务集群中又分为追随者和领导者，总体而言，图中 consul 集群就构成了一个数据中心。下面对一些术语进行讲解\",\"Agent（代理）：或者称为节点更合适，每一个 agent 都是一个长时间运行的守护进程，它们对外暴露 HTTP 和 DNS 接口，负责健康检查和服务同步。\",\"Server（服务代理）：作为一个 consul server，它的职责主要有参与 Raft 选举，维护集群状态，响应查询，与其他数据中心交换数据，以及向领导者和其他数据中心转发查询。\",\"Client（客户代理）：client 相对 server 来说是无状态的，它不参与 Raft 选举，所做的事情仅仅只是将所有的请求转发给 server，它唯一参与的与后台有关的事情就是局域网流言转发（LAN gossip pool）。\",\"Leader（领导者）：leader 是所有 server 的领导，而且领导只能有一个，leader 是通过 Raft 选举算法进行选举的，每一个 leader 有自己的任期，在任期内，其他的 server 收到了不管什么请求都要告诉 leader，所以 leader 的数据是最及时最新的。\",\"Gossi（流言）：Consul 是基于 Serf（该公司其下的另一个产品）而构建的，它使用 gossip 协议，该协议专用于节点间的随机通信，类似 UDP，consul 使用此协议来在服务集群间进行互相通知。\",\"Data Center（数据中心）：一个局域网内的 consul 集群被称为一个数据中心，consul 支持多数据中心，多数据中心的沟通方式就是 WAN gossip。\",\"提示\",\"更多词汇和术语可以前往Glossary | Consul | HashiCorp Developer 进行了解。\",\"在 consul 集群中，server 的数量应该严格控制，因为它们直接参与到 LAN gossip 和 WAN gossip，raft 选举，并且要存储数据，server 越多，通信成本越高。而 client 的数量多一点没什么问题，它只负责转发，不参与选举，占用资源很低，在图中的集群中，各个服务通过 client 将自身注册到 server 中，如果有 server 挂了的话，client 会自行寻找其他可用的 server。\"]},\"143\":{\"h\":\"集群搭建示例\",\"t\":[\"下面搭建一个简单的 consul 多节点集群示例，先准备四台虚拟机\",\"四台虚拟机中，三个 server，一个 client，官方建议 server 的数量最好是奇数，并且最好大于等于三个。这里将 vm00-vm02 作为 server，vm03 作为 client，\",\"对于 server 而言，运行如下命令，创建 server agent\",\"consul agent -server -bind=vm_address -client=0.0.0.0 -data-dir=/tmp/consul/ -node=agent_name -ui\",\"对于 client 而言，运行如下命令，创建 client agent\",\"consul agent -client=0.0.0.0 -bind=vm_address -data-dir=/tmp/consul/ -node=agent_name -ui\",\"执行的命令分别如下\",\"# vm00 consul agent -server -bind=192.168.48.138 -client=0.0.0.0 -data-dir=/tmp/consul/ -node=agent01 -ui -bootstrap # vm01 consul agent -server -bind=192.168.48.139 -client=0.0.0.0 -data-dir=/tmp/consul/ -node=agent02 -ui -retry-join=192.168.48.138 # vm02 consul agent -server -bind=192.168.48.140 -client=0.0.0.0 -data-dir=/tmp/consul/ -node=agent03 -ui -retry-join=192.168.48.138 # vm03 consul agent -bind=192.168.48.140 -client=0.0.0.0 -data-dir=/tmp/consul/ -node=agent03 -ui -retry-join=192.168.48.138\",\"一些参数释义\",\"client，0.0.0.0即放行所有来源的请求，如果只有 client 参数，没有 server 参数，代表着 agent 将以 client 模式运行。\",\"所有的 agent 运行好后，其中retry-join的作用等于自动执行 join 命令，失败后会不断尝试，默认重试时间 30s\",\"$ consul join 192.168.48.138\",\"join 完成后，各个节点都知晓了对方的存在，由于 vm00 指定了 bootstrap 模式，所以它就是默认的 leader，如果没有指定 bootstrap 模式，所有节点在 join 时指定的节点为默认 leader， 在 leader 没有选举出来之前，集群无法正常工作，访问 web 界面会返回 500，一些命令也无法正常工作 。如果集群中有节点制定了 bootstrap 模式，那么集群中其他节点就不应该再有其他节点指定 bootstrap 模式，同时其他节点也不应该再使用bootstrap-expect 参数，如果使用了会自动禁用。\",\"这时在 leader 节点上（实际上这时无论哪个节点都可以查看）运行查看 data center 的成员信息，运行如下命令\",\"$ consul members Node Address Status Type Build Protocol DC Partition Segment agent01 192.168.48.138:8301 alive server 1.16.1 2 dc1 default <all> agent02 192.168.48.139:8301 alive server 1.16.1 2 dc1 default <all> agent03 192.168.48.140:8301 alive server 1.16.1 2 dc1 default <all> client01 192.168.48.141:8301 alive client 1.16.1 2 dc1 default <default>\",\"Node，即节点名称\",\"Address，通信地址\",\"Status，alive表示存活，left表示下线\",\"Type，agent 种类，server 和 client 两种模式\",\"Build，该节点使用的 consul 版本，consul 可以在一定范围内兼容不同版本的节点进行工作\",\"Protocol，指的是使用的 Raft 协议版本，这个协议应当所有节点一致\",\"DC，Data Center，数据中心，输出中的所有节点都属于 dc1 数据中心\",\"Partition，节点隶属的分区，属于企业版功能，每个节点只能与同一分区的节点进行通信\",\"Segment，节点隶属的网段，属于企业版功能\",\"同样的，如果想要一个节点退出，应该使用consul leave让节点优雅退出，并通知其他节点自己将要退出，对于多节点的情况下，节点的优雅退出尤为重要，因为这关系到数据的一致性。\",\"提示\",\"虚拟机在演示的时候关闭了所有的防火墙，在实际生产环境中为了安全考虑应该开启，为此应该关注下 consul 使用到的所有端口：Required Ports | Consul | HashiCorp Developer。\",\"接下来简单测试一下数据一致性，在 vm00 虚拟机中添加如下数据\",\"$ consul kv put sys_confg {\\\"name\\\":\\\"consul\\\"} Success! Data written to: sys_confg\",\"保存后，通过 HTTP API 访问其他节点会发现数据同样存在（其中的 value 是 base64 编码）\",\"$ curl http://192.168.48.138:8500/v1/kv/sys_confg [{\\\"LockIndex\\\":0,\\\"Key\\\":\\\"sys_confg\\\",\\\"Flags\\\":0,\\\"Value\\\":\\\"ewogICJuYW1lIjoiY29uc3VsIgp9\\\",\\\"CreateIndex\\\":2518,\\\"ModifyIndex\\\":2518}] $ curl http://192.168.48.139:8500/v1/kv/sys_confg [{\\\"LockIndex\\\":0,\\\"Key\\\":\\\"sys_confg\\\",\\\"Flags\\\":0,\\\"Value\\\":\\\"ewogICJuYW1lIjoiY29uc3VsIgp9\\\",\\\"CreateIndex\\\":2518,\\\"ModifyIndex\\\":2518}] $ curl http://192.168.48.140:8500/v1/kv/sys_confg [{\\\"LockIndex\\\":0,\\\"Key\\\":\\\"sys_confg\\\",\\\"Flags\\\":0,\\\"Value\\\":\\\"ewogICJuYW1lIjoiY29uc3VsIgp9\\\",\\\"CreateIndex\\\":2518,\\\"ModifyIndex\\\":2518}]\",\"事实上，consul 提供的服务发现与注册功能，通过 gossip 协议广播给其他节点，并且当任意一个节点加入当前数据中心时，所有的节点都会感知到此变化。\"]},\"144\":{\"h\":\"多数据中心搭建示例\",\"t\":[\"准备五台虚拟机，vm00-vm02 是上一个示例的集群，属于 dc1 数据中心，不去动它，vm03-vm04 属于 dc2 数据中心，数据中心在 agent 启动时，默认为 dc1。\",\"提示\",\"这里为了演示，只搭建 server，省掉了 client。\",\"首先分别启动 vm03，将其作为默认的 leader\",\"$ consul agent -server -datacenter=dc2 -bind=192.168.48.141 -client=0.0.0.0 -data-dir=/tmp/consul/ -node=agent04 -ui -bootstrap\",\"启动启动 vm04，让其自动 join 到 vm03 节点\",\"$ consul agent -server -datacenter=dc2 -bind=192.168.48.142 -client=0.0.0.0 -data-dir=/tmp/consul/ -node=agent05 -ui -retry-join=192.168.48.141\",\"此时分别在 vm00 和 vm03 查看 members\",\"# vm00-vm02 $ consul members Node Address Status Type Build Protocol DC Partition Segment agent01 192.168.48.138:8301 alive server 1.16.1 2 dc1 default <all> agent02 192.168.48.139:8301 alive server 1.16.1 2 dc1 default <all> agent03 192.168.48.140:8301 alive server 1.16.1 2 dc1 default <all> # vm03-vm04 $ consul members Node Address Status Type Build Protocol DC Partition Segment agent04 192.168.48.141:8301 alive server 1.16.1 2 dc2 default <all> agent05 192.168.48.142:8301 alive server 1.16.1 2 dc2 default <all>\",\"可以看到 DC 字段不同，因为这里是虚拟机演示，所以都是在同一个网段中，现实中两个数据中心可能是异地的服务器集群。接下来让 dc1 的任意一个节点 join 到 dc2 的任意一个节点，这里让 vm01 join vm03\",\"$ consul join -wan 192.168.48.141 Successfully joined cluster by contacting 1 nodes.\",\"join 成功后，执行命令查看广域网 members\",\"$ consul members -wan Node Address Status Type Build Protocol DC Partition Segment agent01.dc1 192.168.48.138:8302 alive server 1.16.1 2 dc1 default <all> agent02.dc1 192.168.48.139:8302 alive server 1.16.1 2 dc1 default <all> agent03.dc1 192.168.48.140:8302 alive server 1.16.1 2 dc1 default <all> agent04.dc2 192.168.48.141:8302 alive server 1.16.1 2 dc2 default <all> agent05.dc2 192.168.48.142:8302 alive server 1.16.1 2 dc2 default <all> $ consul catalog datacenters dc2 dc1\",\"只要 dc1 的随便一个节点 join 到 dc2 的任意一个节点，两个数据中心的所有节点都会感知到此变化，查看 members 的时候也可以看到两个数据中心的节点。\",\"接下来尝试在 vm00 节点添加一个 KV 数据\",\"$ consul kv put name consul Success! Data written to: name\",\"在 vm01 节点尝试读取数据，可以看到同一数据中心的数据是同步的\",\"$ consul kv get name consul\",\"然后再去不同数据中心的 vm03 尝试读取数据，会发现不同数据中心的数据是不同步的。\",\"$ consul kv get name Error! No key exists at: name\",\"如果想要多数据中心数据同步的话，可以了解hashicorp/consul-replicate: Consul cross-DC KV replication daemon。\"]},\"145\":{\"h\":\"服务注册与发现\",\"t\":[\"consul 服务注册的方式有两种，配置文件注册和 API 注册。为了方便进行测试，这里事先准备一个 Hello World 服务（gRPC 文章中的示例），部署两份，分别在不同的位置。配置文件注册的方式可以前往Register external services with Consul service discovery | Consul | HashiCorp Developer 了解，这里只介绍通过 HTTP API 进行注册。\",\"提示\",\"对于本地服务（和 consul client 在一块）而言，可以直接使用 agent service 注册，否则的话应该使用 catalog register 来进行注册。\",\"consul 提供了 HTTP API 的 SDK，其他语言的 SDK 前往Libraries and SDKs - HTTP API | Consul | HashiCorp Developer 了解。这里下载 go 的依赖\",\"go get github.com/hashicorp/consul/api\",\"在服务启动时向 consul 主动注册服务，在服务关闭时，向 consul 注销服务，下面是一个示例。\",\"package main import ( consulapi \\\"github.com/hashicorp/consul/api\\\" \\\"google.golang.org/grpc\\\" \\\"google.golang.org/grpc/credentials/insecure\\\" pb \\\"grpc_learn/helloworld/hello\\\" \\\"log\\\" \\\"net\\\" ) var ( server01 = &consulapi.AgentService{ // 必须保持唯一 ID: \\\"hello-service1\\\", Service: \\\"hello-service\\\", // 部署两份，一份的端口是8080，一份的端口是8081 Port: 8080, } ) // 注册服务 func Register() { client, _ := consulapi.NewClient(&consulapi.Config{Address: \\\"192.168.48.138:8500\\\"}) _, _ = client.Catalog().Register(&consulapi.CatalogRegistration{ Node: \\\"hello-server\\\", Address: \\\"192.168.2.10\\\", Service: server01, }, nil) } // 注销服务 func DeRegister() { client, _ := consulapi.NewClient(&consulapi.Config{Address: \\\"192.168.48.138:8500\\\"}) _, _ = client.Catalog().Deregister(&consulapi.CatalogDeregistration{ Node: \\\"hello-server\\\", Address: \\\"192.168.2.10\\\", ServiceID: server01.ID, }, nil) } func main() { Register() defer DeRegister() // 监听端口 listen, err := net.Listen(\\\"tcp\\\", \\\":8080\\\") if err != nil { panic(err) } // 创建gprc服务器 server := grpc.NewServer( grpc.Creds(insecure.NewCredentials()), ) // 注册服务 pb.RegisterSayHelloServer(server, &HelloRpc{}) log.Println(\\\"server running...\\\") // 运行 err = server.Serve(listen) if err != nil { panic(err) } }\",\"客户端代码使用 consul 自定义解析器，来向注册中心查询对应的服务，解析成真实地址。\",\"package myresolver import ( \\\"fmt\\\" consulapi \\\"github.com/hashicorp/consul/api\\\" \\\"google.golang.org/grpc/resolver\\\" ) func NewConsulResolverBuilder(address string) ConsulResolverBuilder { return ConsulResolverBuilder{consulAddress: address} } type ConsulResolverBuilder struct { consulAddress string } func (c ConsulResolverBuilder) Build(target resolver.Target, cc resolver.ClientConn, opts resolver.BuildOptions) (resolver.Resolver, error) { consulResolver, err := newConsulResolver(c.consulAddress, target, cc) if err != nil { return nil, err } consulResolver.resolve() return consulResolver, nil } func (c ConsulResolverBuilder) Scheme() string { return \\\"consul\\\" } func newConsulResolver(address string, target resolver.Target, cc resolver.ClientConn) (ConsulResolver, error) { var reso ConsulResolver client, err := consulapi.NewClient(&consulapi.Config{Address: address}) if err != nil { return reso, err } return ConsulResolver{ target: target, cc: cc, client: client, }, nil } type ConsulResolver struct { target resolver.Target cc resolver.ClientConn client *consulapi.Client } func (c ConsulResolver) resolve() { service := c.target.URL.Opaque services, _, err := c.client.Catalog().Service(service, \\\"\\\", nil) if err != nil { c.cc.ReportError(err) return } var adds []resolver.Address for _, catalogService := range services { adds = append(adds, resolver.Address{Addr: fmt.Sprintf(fmt.Sprintf(\\\"%s:%d\\\", catalogService.Address, catalogService.ServicePort))}) } c.cc.UpdateState(resolver.State{ Addresses: adds, // 轮询策略 ServiceConfig: c.cc.ParseServiceConfig( `{\\\"loadBalancingPolicy\\\":\\\"round_robin\\\"}`), }) } func (c ConsulResolver) ResolveNow(options resolver.ResolveNowOptions) { c.resolve() } func (c ConsulResolver) Close() { }\",\"客户端在启动时注册解析器\",\"package main import ( \\\"context\\\" \\\"google.golang.org/grpc\\\" \\\"google.golang.org/grpc/credentials/insecure\\\" \\\"google.golang.org/grpc/resolver\\\" \\\"grpc_learn/helloworld/client/myresolver\\\" hello2 \\\"grpc_learn/helloworld/hello\\\" \\\"log\\\" \\\"time\\\" ) func init() { // 注册builder resolver.Register( // 注册自定义的consul解析器 myresolver.NewConsulResolverBuilder(\\\"192.168.48.138:8500\\\"), ) } func main() { // 建立连接，没有加密验证 conn, err := grpc.Dial(\\\"consul:hello-service\\\", grpc.WithTransportCredentials(insecure.NewCredentials()), ) if err != nil { panic(err) } defer conn.Close() // 创建客户端 client := hello2.NewSayHelloClient(conn) for range time.Tick(time.Second) { // 远程调用 helloRep, err := client.Hello(context.Background(), &hello2.HelloReq{Name: \\\"client\\\"}) if err != nil { panic(err) } log.Printf(\\\"received grpc resp: %+v\\\", helloRep.String()) } }\",\"先启动服务端，再启动客户端，服务端是有两个的，提供同一个服务，只是地址不一样，客户都的负载均衡策略是轮询，从服务端的日志间隔时间就能看出来策略生效了。\",\"2023/08/29 17:39:54 server running... 2023/08/29 21:03:46 received grpc req: name:\\\"client\\\" 2023/08/29 21:03:48 received grpc req: name:\\\"client\\\" 2023/08/29 21:03:50 received grpc req: name:\\\"client\\\" 2023/08/29 21:03:52 received grpc req: name:\\\"client\\\" 2023/08/29 21:03:54 received grpc req: name:\\\"client\\\" 2023/08/29 21:03:56 received grpc req: name:\\\"client\\\" 2023/08/29 21:03:58 received grpc req: name:\\\"client\\\" 2023/08/29 21:04:00 received grpc req: name:\\\"client\\\"\",\"以上就是一个简单的使用 consul 结合 gRPC 实现服务注册与发现的简单案例。\"]},\"146\":{\"h\":\"gPRC\",\"t\":[\"远程过程调用 rpc 应该是微服务当中必须要学习的一个点了，在学习的过程中会遇到各式各样的 rpc 框架，不过在 go 这个领域，几乎所有的 rpc 框架都是基于 gRPC 的，并且它还成为了云原生领域的一个基础协议，为什么选择它，官方如下回答：\",\"gRPC 是一个现代化的开源高性能远程过程调用(Remote Process Call，RPC) 框架，可以在任何环境中运行。它可以通过可插拔的负载平衡、跟踪、健康检查和身份验证支持，有效地连接数据中心内和数据中心之间的服务。它还适用于连接设备、移动应用程序和浏览器到后端服务的最后一英里分布式计算。\",\"官方网址：gRPC\",\"官方文档：Documentation | gRPC\",\"gRPC 技术教程：Basics tutorial | Go | gRPC\",\"ProtocBuf 官网：Reference Guides | Protocol Buffers Documentation (protobuf.dev)\",\"它也是 CNCF 基金会下一个的开源项目，CNCF 全名 CLOUD NATIVE COMPUTING FOUNDATION，译名云原生计算基金会\"]},\"147\":{\"h\":\"特点\",\"t\":[\"简单的服务定义\",\"使用 Protocol Buffers 定义服务，这是一个强大的二进制序列化工具集和语言。\",\"启动和扩容都十分迅捷\",\"只需一行代码即可安装运行时和开发环境，仅需几秒钟既可以扩张到每秒数百万个 RPC\",\"跨语言，跨平台\",\"根据不同平台不同语言自动生成客户端和服务端的服务存根\",\"双向流和集成授权\",\"基于 HTTP/2 的双向流和可插拔的认证授权\",\"虽然 GRPC 是语言无关的，但是本站的内容大部分都是 go 相关的，所以本文也会使用 go 作为主要语言进行讲解，后续用到的 pb 编译器和生成器如果是其他语言的使用者可以自行到 Protobuf 官网查找。为了方便起见，接下来会直接省略项目的创建过程。\",\"提示\",\"本文参考了以下文章的内容：\",\"写给 go 开发者的 gRPC 教程-protobuf 基础 - 掘金 (juejin.cn)\",\"gRPC 中的 Metadata - 熊喵君的博客 | PANDAYCHEN\",\"gRPC 系列——grpc 超时传递原理 | 小米信息部技术团队 (xiaomi-info.github.io)\",\"gRPC API 设计指南 | Google Cloud\"]},\"148\":{\"h\":\"依赖安装\",\"t\":[\"先下载 Protocol Buffer 编译器，下载地址：Releases · protocolbuffers/protobuf (github.com)\",\"根据自己的情况选择系统和版本即可，下载完成后需要将 bin 目录添加到环境变量中。\",\"然后还要下载代码生成器，编译器是将 proto 文件生成对应语言的序列化代码，生成器是用于生成业务代码。\",\"$ go install google.golang.org/protobuf/cmd/protoc-gen-go@latest $ go install google.golang.org/grpc/cmd/protoc-gen-go-grpc@latest\",\"创建一个空的项目，名字这里取 grpc_learn，然后引入如下依赖\",\"$ go get google.golang.org/grpc\",\"最后看一下版本，是不是真的安装成功了\",\"$ protoc --version libprotoc 23.4 $ protoc-gen-go --version protoc-gen-go.exe v1.28.1 $ protoc-gen-go-grpc --version protoc-gen-go-grpc 1.3.0\"]},\"149\":{\"h\":\"Hello World\"},\"150\":{\"h\":\"项目结构\",\"t\":[\"下面将以一个 Hello World 示例来进行演示，创建如下的项目结构。\",\"grpc_learn\\\\helloworld | +---client | main.go | +---hello | | +---pb | hello.proto | \\\\---server main.go\"]},\"151\":{\"h\":\"定义 protobuf 文件\",\"t\":[\"其中，在pb/hello.proto中，写入如下内容，这是一个相当简单的示例，如果不会 protoc 语法，请移步相关文档。\",\"syntax = \\\"proto3\\\"; // .表示就直接生成在输出路径下，hello是包名 option go_package = \\\".;hello\\\"; // 请求 message HelloReq { string name = 1; // 响应 message HelloRep { string msg = 1; } // 定义服务 service SayHello { rpc Hello(HelloReq) returns (HelloRep) {} }\"]},\"152\":{\"h\":\"生成代码\",\"t\":[\"编写完成后，使用 protoc 编译器生成数据序列化相关的代码，使用生成器生成 rpc 相关代码\",\"$ protoc -I ./pb \\\\ --go_out=./hello ./pb/*.proto\\\\ --go-grpc_out=./hello ./pb/*.proto\",\"此时可以发现hello文件夹生成了hello.pb.go和hello_grpc.pb.go文件，浏览hello.pb.go可以发现我们定义的 message\",\"type HelloReq struct { state protoimpl.MessageState sizeCache protoimpl.SizeCache unknownFields protoimpl.UnknownFields // 定义的字段 Name string `protobuf:\\\"bytes,1,opt,name=name,proto3\\\" json:\\\"name,omitempty\\\"` } type HelloRep struct { state protoimpl.MessageState sizeCache protoimpl.SizeCache unknownFields protoimpl.UnknownFields // 定义的字段 Msg string `protobuf:\\\"bytes,1,opt,name=msg,proto3\\\" json:\\\"msg,omitempty\\\"` }\",\"在hello_grpc.pb.go中可以发现我们定义的服务\",\"type SayHelloServer interface { Hello(context.Context, *HelloReq) (*HelloRep, error) mustEmbedUnimplementedSayHelloServer() } // 后续如果我们自己实现服务接口，必须要嵌入该结构体，就不用实现mustEmbedUnimplementedSayHelloServer方法 type UnimplementedSayHelloServer struct { } // 默认返回nil func (UnimplementedSayHelloServer) Hello(context.Context, *HelloReq) (*HelloRep, error) { return nil, status.Errorf(codes.Unimplemented, \\\"method Hello not implemented\\\") } // 接口约束 func (UnimplementedSayHelloServer) mustEmbedUnimplementedSayHelloServer() {} type UnsafeSayHelloServer interface { mustEmbedUnimplementedSayHelloServer() }\"]},\"153\":{\"h\":\"编写服务端\",\"t\":[\"在server/main.go中编写如下代码\",\"package main import ( \\\"context\\\" \\\"fmt\\\" \\\"google.golang.org/grpc\\\" pb \\\"grpc_learn/server/protoc\\\" \\\"log\\\" \\\"net\\\" ) type GrpcServer struct { pb.UnimplementedSayHelloServer } func (g *GrpcServer) Hello(ctx context.Context, req *pb.HelloReq) (*pb.HelloRep, error) { log.Printf(\\\"received grpc req: %+v\\\", req.String()) return &pb.HelloRep{Msg: fmt.Sprintf(\\\"hello world! %s\\\", req.Name)}, nil } func main() { // 监听端口 listen, err := net.Listen(\\\"tcp\\\", \\\":8080\\\") if err != nil { panic(err) } // 创建gprc服务器 server := grpc.NewServer() // 注册服务 pb.RegisterSayHelloServer(server, &GrpcServer{}) // 运行 err = server.Serve(listen) if err != nil { panic(err) } }\"]},\"154\":{\"h\":\"编写客户端\",\"t\":[\"在client/main.go中写入如下代码\",\"package main import ( \\\"context\\\" \\\"google.golang.org/grpc\\\" \\\"google.golang.org/grpc/credentials/insecure\\\" pb \\\"grpc_learn/server/protoc\\\" \\\"log\\\" ) func main() { // 建立连接，没有加密验证 conn, err := grpc.Dial(\\\"localhost:8080\\\", grpc.WithTransportCredentials(insecure.NewCredentials())) if err != nil { panic(err) } defer conn.Close() // 创建客户端 client := pb.NewSayHelloClient(conn) // 远程调用 helloRep, err := client.Hello(context.Background(), &pb.HelloReq{Name: \\\"client\\\"}) if err != nil { panic(err) } log.Printf(\\\"received grpc resp: %+v\\\", helloRep.String()) }\"]},\"155\":{\"h\":\"运行\",\"t\":[\"先运行服务端，再运行客户端，服务端输出如下\",\"2023/07/16 16:26:51 received grpc req: name:\\\"client\\\"\",\"客户端输出如下\",\"2023/07/16 16:26:51 received grpc resp: msg:\\\"hello world! client\\\"\",\"在本例中，客户端建立好连接后，在调用远程方法时就跟调用本地方法一样，直接访问client的Hello 方法并获取结果，这就是一个最简单的 GRPC 例子，许多开源的框架也都是对这一个流程进行了封装。\"]},\"156\":{\"h\":\"bufbuild\",\"t\":[\"在上述例子中，是直接使用命令生成的代码，如果后期插件多了命令会显得相当繁琐，这时可以通过工具来进行管理 protobuf 文件，正好就有这么一个开源的管理工具bufbuild/buf。\",\"开源地址：bufbuild/buf: A new way of working with Protocol Buffers. (github.com)\",\"文档地址：Buf - Install the Buf CLI\",\"特点\",\"BSR 管理\",\"Linter\",\"代码生成\",\"格式化\",\"依赖管理\",\"有了这个工具可以相当方便的管理 protobuf 文件。\",\"文档中提供了相当多的安装方式，可以自己选择。如果本地安装了 go 环境的话，直接使用go install安装即可\",\"$ go install github.com/bufbuild/buf/cmd/buf@latest\",\"安装完毕后查看版本\",\"$ buf --version 1.24.0\",\"来到helloworld/pb文件夹，执行如下命令创建一个 module 来管理 pb 文件。\",\"$ buf mod init $ ls buf.yaml hello.proto\",\"buf.yaml文件内容默认如下\",\"version: v1 breaking: use: - FILE lint: use: - DEFAULT\",\"再来到helloworld/目录下，创建buf.gen.yaml，写入如下内容\",\"version: v1 plugins: - plugin: go out: hello opt: - plugin: go-grpc out: hello opt:\",\"再执行命令生成代码\",\"$ buf generate\",\"完成后就可以看到生成的文件了，当然 buf 不止这点功能，其他的功能可以自己去文档学习。\"]},\"157\":{\"h\":\"流式 RPC\",\"t\":[\"grpc 的调用方式有两大类，一元 RPC（Unary RPC）和流式 RPC（Stream RPC）。Hello World 中的示例就是一个典型的一元 RPC。\",\"一元 rpc（或者叫普通 rpc 更能理解些，实在不知道怎么翻译这个unary了）用起来就跟普通的 http 一样，客户端请求，服务端返回数据，一问一答的方式。而流式 RPC 的请求和响应都 可以是流式的，如下图\",\"使用流式请求时，只返回一次响应，客户端可以通过流来多次发送参数给服务端，服务端可以不需要像一元 RPC 那样等到所有参数都接收完毕再处理，具体处理逻辑可以由服务端决定。正常情况下，只有客户端可以主动关闭流式请求，一旦流被关闭，当前 RPC 请求也就会结束。\",\"使用流式响应时，只发送一次参数，服务端可以通过流多次发送数据给客户端，客户端不需要像一元 RPC 那样接受完所有数据再处理，具体的处理逻辑可以由客户端自己决定。正常请求下，只有服务端可以主动关闭流式响应，一旦流被关闭，当前 RPC 请求也就会结束。\",\"service MessageService { rpc getMessage(stream google.protobuf.StringValue) returns (Message); }\",\"也可以是只有响应是流式的（Server-Streaming RPC）\",\"service MessageService { rpc getMessage(google.protobuf.StringValue) returns (stream Message); }\",\"或者请求和响应都是流式的（Bi-driectional-Streaming RPC）\",\"service MessageService { rpc getMessage(stream google.protobuf.StringValue) returns (stream Message); }\"]},\"158\":{\"h\":\"单向流式\",\"t\":[\"下面通过一个例子来演示单向流式的操作，首先创建如下的项目结构\",\"grpc_learn\\\\server_client_stream | buf.gen.yaml | +---client | main.go | +---pb | buf.yaml | message.proto | \\\\---server main.go\",\"message.proto内容如下\",\"syntax = \\\"proto3\\\"; option go_package = \\\".;message\\\"; import \\\"google/protobuf/wrappers.proto\\\"; message Message { string from = 1; string content = 2; string to = 3; } service MessageService { rpc receiveMessage(google.protobuf.StringValue) returns (stream Message); rpc sendMessage(stream Message) returns (google.protobuf.Int64Value); }\",\"通过 buf 生成代码\",\"$ buf generate\",\"这里演示是消息服务，receiveMessage接收一个指定的用户名，类型为字符串，返回消息流，sendMessage 接收消息流，返回成功发送的消息数目，类型为 64 位整型。接下来创建server/message_service.go，自己实现默认的代码生成的服务\",\"package main import ( \\\"google.golang.org/grpc/codes\\\" \\\"google.golang.org/grpc/status\\\" \\\"google.golang.org/protobuf/types/known/wrapperspb\\\" \\\"grpc_learn/server_client_stream/message\\\" ) type MessageService struct { message.UnimplementedMessageServiceServer } func (m *MessageService) ReceiveMessage(user *wrapperspb.StringValue, recvServer message.MessageService_ReceiveMessageServer) error { return status.Errorf(codes.Unimplemented, \\\"method ReceiveMessage not implemented\\\") } func (m *MessageService) SendMessage(sendServer message.MessageService_SendMessageServer) error { return status.Errorf(codes.Unimplemented, \\\"method SendMessage not implemented\\\") }\",\"可以看到接收消息和发送消息的参数里面都有一个流包装接口\",\"type MessageService_ReceiveMessageServer interface { // 发送消息 Send(*Message) error grpc.ServerStream } type MessageService_SendMessageServer interface { // 发送返回值并关闭连接 SendAndClose(*wrapperspb.StringValue) error // 接收消息 Recv() (*Message, error) grpc.ServerStream }\",\"它们都嵌入了gprc.ServerStream接口\",\"type ServerStream interface { SetHeader(metadata.MD) error SendHeader(metadata.MD) error SetTrailer(metadata.MD) Context() context.Context SendMsg(m interface{}) error RecvMsg(m interface{}) error }\",\"可以看到，流式 RPC 并不像一元 RPC 那样入参和返回值都可以很明确的体现在函数签名上，这些方法乍一看是看不出来入参和返回值是什么类型的，需要调用传入的 Stream 类型完成流式传输，接下来开始编写服务端的具体逻辑。在编写服务端逻辑的时候，用了一个sync.map 来模拟消息队列，当客户端发送ReceiveMessage 请求时，服务端通过流式响应不断返回客户端想要的消息，直到超时过后断开请求。当客户端请求SendMessage 时，通过流式请求不断发送消息过来，服务端不断的将消息放入队列中，直到客户端主动断开请求，并返回给客户端消息发送条数。\",\"package main import ( \\\"errors\\\" \\\"google.golang.org/protobuf/types/known/wrapperspb\\\" \\\"grpc_learn/server_client_stream/message\\\" \\\"io\\\" \\\"log\\\" \\\"sync\\\" \\\"time\\\" ) // 一个模拟的消息队列 var messageQueue sync.Map type MessageService struct { message.UnimplementedMessageServiceServer } // ReceiveMessage // param user *wrapperspb.StringValue // param recvServer message.MessageService_ReceiveMessageServer // return error // 接收指定用户的消息 func (m *MessageService) ReceiveMessage(user *wrapperspb.StringValue, recvServer message.MessageService_ReceiveMessageServer) error { timer := time.NewTimer(time.Second * 5) for { time.Sleep(time.Millisecond * 100) select { case <-timer.C: log.Printf(\\\"5秒钟内没有收到%s的消息，关闭连接\\\", user.GetValue()) return nil default: value, ok := messageQueue.Load(user.GetValue()) if !ok { messageQueue.Store(user.GetValue(), []*message.Message{}) continue } queue := value.([]*message.Message) if len(queue) < 1 { continue } // 拿到消息 msg := queue[0] // 通过流式传输将消息发送给客户端 err := recvServer.Send(msg) log.Printf(\\\"receive %+v\\\\n\\\", msg) if err != nil { return err } queue = queue[1:] messageQueue.Store(user.GetValue(), queue) timer.Reset(time.Second * 5) } } } // SendMessage // param sendServer message.MessageService_SendMessageServer // return error // 发送消息给指定用户 func (m *MessageService) SendMessage(sendServer message.MessageService_SendMessageServer) error { count := 0 for { // 从客户端接收消息 msg, err := sendServer.Recv() if errors.Is(err, io.EOF) { return sendServer.SendAndClose(wrapperspb.Int64(int64(count))) } if err != nil { return err } log.Printf(\\\"send %+v\\\\n\\\", msg) value, ok := messageQueue.Load(msg.From) if !ok { messageQueue.Store(msg.From, []*message.Message{msg}) continue } queue := value.([]*message.Message) queue = append(queue, msg) // 将消息放入消息队列中 messageQueue.Store(msg.From, queue) count++ } }\",\"客户端开了两个协程，一个协程用来发送消息，另一个协程用来接收消息，当然也可以一边发送一边接收，代码如下。\",\"package main import ( \\\"context\\\" \\\"errors\\\" \\\"github.com/dstgo/task\\\" \\\"google.golang.org/grpc\\\" \\\"google.golang.org/grpc/credentials/insecure\\\" \\\"google.golang.org/protobuf/types/known/wrapperspb\\\" \\\"grpc_learn/server_client_stream/message\\\" \\\"io\\\" \\\"log\\\" \\\"time\\\" ) var Client message.MessageServiceClient func main() { dial, err := grpc.Dial(\\\"localhost:9090\\\", grpc.WithTransportCredentials(insecure.NewCredentials())) if err != nil { log.Panicln(err) } defer dial.Close() Client = message.NewMessageServiceClient(dial) log.SetPrefix(\\\"client\\\\t\\\") msgTask := task.NewTask(func(err error) { log.Panicln(err) }) ctx := context.Background() // 接收消息请求 msgTask.AddJobs(func() { receiveMessageStream, err := Client.ReceiveMessage(ctx, wrapperspb.String(\\\"jack\\\")) if err != nil { log.Panicln(err) } for { recv, err := receiveMessageStream.Recv() if errors.Is(err, io.EOF) { log.Println(\\\"暂无消息，关闭连接\\\") break } else if err != nil { break } log.Printf(\\\"receive %+v\\\", recv) } }) msgTask.AddJobs(func() { from := \\\"jack\\\" to := \\\"mike\\\" sendMessageStream, err := Client.SendMessage(ctx) if err != nil { log.Panicln(err) } msgs := []string{ \\\"在吗\\\", \\\"下午有没有时间一起打游戏\\\", \\\"那行吧，以后有时间一起约\\\", \\\"就这个周末应该可以吧\\\", \\\"那就这么定了\\\", } for _, msg := range msgs { time.Sleep(time.Second) sendMessageStream.Send(&message.Message{ From: from, Content: msg, To: to, }) } // 消息发送完了，主动关闭请求并获取返回值 recv, err := sendMessageStream.CloseAndRecv() if err != nil { log.Println(err) } else { log.Printf(\\\"发送完毕，总共发送了%d条消息\\\\n\\\", recv.GetValue()) } }) msgTask.Run() }\",\"执行过后服务端输出如下\",\"server 2023/07/18 16:28:24 send from:\\\"jack\\\" content:\\\"在吗\\\" to:\\\"mike\\\" server 2023/07/18 16:28:24 receive from:\\\"jack\\\" content:\\\"在吗\\\" to:\\\"mike\\\" server 2023/07/18 16:28:25 send from:\\\"jack\\\" content:\\\"下午有没有时间一起打游戏\\\" to:\\\"mike\\\" server 2023/07/18 16:28:25 receive from:\\\"jack\\\" content:\\\"下午有没有时间一起打游戏\\\" to:\\\"mike\\\" server 2023/07/18 16:28:26 send from:\\\"jack\\\" content:\\\"那行吧，以后有时间一起约\\\" to:\\\"mike\\\" server 2023/07/18 16:28:26 receive from:\\\"jack\\\" content:\\\"那行吧，以后有时间一起约\\\" to:\\\"mike\\\" server 2023/07/18 16:28:27 send from:\\\"jack\\\" content:\\\"就这个周末应该可以吧\\\" to:\\\"mike\\\" server 2023/07/18 16:28:27 receive from:\\\"jack\\\" content:\\\"就这个周末应该可以吧\\\" to:\\\"mike\\\" server 2023/07/18 16:28:28 send from:\\\"jack\\\" content:\\\"那就这么定了\\\" to:\\\"mike\\\" server 2023/07/18 16:28:28 receive from:\\\"jack\\\" content:\\\"那就这么定了\\\" to:\\\"mike\\\" server 2023/07/18 16:28:33 5秒钟内没有收到jack的消息，关闭连接\",\"客户端输出如下\",\"client 2023/07/18 16:28:24 receive from:\\\"jack\\\" content:\\\"在吗\\\" to:\\\"mike\\\" client 2023/07/18 16:28:25 receive from:\\\"jack\\\" content:\\\"下午有没有时间一起打游戏\\\" to:\\\"mike\\\" client 2023/07/18 16:28:26 receive from:\\\"jack\\\" content:\\\"那行吧，以后有时间一起约\\\" to:\\\"mike\\\" client 2023/07/18 16:28:27 receive from:\\\"jack\\\" content:\\\"就这个周末应该可以吧\\\" to:\\\"mike\\\" client 2023/07/18 16:28:28 发送完毕，总共发送了5条消息 client 2023/07/18 16:28:28 receive from:\\\"jack\\\" content:\\\"那就这么定了\\\" to:\\\"mike\\\" client 2023/07/18 16:28:33 暂无消息，关闭连接\",\"通过这个例子可以发现单向流式 RPC 请求处理起来的话不论是客户端还是服务端都要比一元 rpc 复杂，不过双向流式 RPC 比它们还要更复杂些。\"]},\"159\":{\"h\":\"双向流式\",\"t\":[\"双向流式 PRC，即请求和响应都是流式的，就相当于把上例中的两个服务结合成一个。对于流式 RPC 而言，第一个请求肯定是由客户端发起的，随后客户端可以随时通过流来发送请求参数，服务端也可以随时通过流来返回数据，不管哪一方主动关闭流，当前请求都会结束。\",\"提示\",\"后续的内容除非必要，都会直接省略掉 pb 代码生成以及创建 rpc 客户端服务端这些步骤的代码描述\",\"首先创建如下项目结构\",\"bi_stream\\\\ | buf.gen.yaml | +---client | main.go | +---message | message.pb.go | message_grpc.pb.go | +---pb | buf.yaml | message.proto | \\\\---server main.go message_service.go\",\"message.proto内容如下\",\"syntax = \\\"proto3\\\"; option go_package = \\\".;message\\\"; import \\\"google/protobuf/wrappers.proto\\\"; message Message { string from = 1; string content = 2; string to = 3; } service ChatService { rpc chat(stream Message) returns (stream Message); }\",\"服务端逻辑中，建立连接后，开启两个协程，一个协程负责接收消息，一个负责发送消息，具体的处理逻辑与上个例子类似，不过这次去掉了超时的判定逻辑。\",\"package main import ( \\\"github.com/dstgo/task\\\" \\\"google.golang.org/grpc/metadata\\\" \\\"grpc_learn/bi_stream/message\\\" \\\"log\\\" \\\"sync\\\" \\\"time\\\" ) // MessageQueue 模拟的消息队列 var MessageQueue sync.Map type ChatService struct { message.UnimplementedChatServiceServer } // Chat // param chatServer message.ChatService_ChatServer // return error // 聊天服务，服务端逻辑我们用多协程来进行处理 func (m *ChatService) Chat(chatServer message.ChatService_ChatServer) error { md, _ := metadata.FromIncomingContext(chatServer.Context()) from := md.Get(\\\"from\\\")[0] defer log.Println(from, \\\"end chat\\\") var chatErr error chatCh := make(chan error) // 创建两个协程，一个收消息，一个发消息 chatTask := task.NewTask(func(err error) { chatErr = err }) // 接收消息的协程 chatTask.AddJobs(func() { for { msg, err := chatServer.Recv() log.Printf(\\\"receive %+v err %+v\\\\n\\\", msg, err) if err != nil { chatErr = err chatCh <- err break } value, ok := MessageQueue.Load(msg.To) if !ok { MessageQueue.Store(msg.To, []*message.Message{msg}) } else { queue := value.([]*message.Message) queue = append(queue, msg) MessageQueue.Store(msg.To, queue) } } }) // 发送消息的协程 chatTask.AddJobs(func() { Send: for { time.Sleep(time.Millisecond * 100) select { case <-chatCh: log.Println(from, \\\"close send\\\") break Send default: value, ok := MessageQueue.Load(from) if !ok { value = []*message.Message{} MessageQueue.Store(from, value) } queue := value.([]*message.Message) if len(queue) < 1 { continue Send } msg := queue[0] queue = queue[1:] MessageQueue.Store(from, queue) err := chatServer.Send(msg) log.Printf(\\\"send %+v\\\\n\\\", msg) if err != nil { chatErr = err break Send } } } }) chatTask.Run() return chatErr }\",\"客户端逻辑中，开启了两个子协程来模拟两个人的聊天过程，两个子协程中分别又各有两个孙协程负责收发消息（客户端逻辑中并没有保证两个人聊天的消息收发顺序正确，只是一个简单的双方发送与接收的例子）\",\"package main import ( \\\"context\\\" \\\"github.com/dstgo/task\\\" \\\"google.golang.org/grpc\\\" \\\"google.golang.org/grpc/credentials/insecure\\\" \\\"google.golang.org/grpc/metadata\\\" \\\"grpc_learn/bi_stream/message\\\" \\\"log\\\" \\\"time\\\" ) var Client message.ChatServiceClient func main() { log.SetPrefix(\\\"client \\\") dial, err := grpc.Dial(\\\"localhost:9090\\\", grpc.WithTransportCredentials(insecure.NewCredentials())) defer dial.Close() if err != nil { log.Panicln(err) } Client = message.NewChatServiceClient(dial) chatTask := task.NewTask(func(err error) { log.Panicln(err) }) chatTask.AddJobs(func() { NewChat(\\\"jack\\\", \\\"mike\\\", \\\"你好\\\", \\\"有没有时间一起打游戏？\\\", \\\"好吧\\\") }) chatTask.AddJobs(func() { NewChat(\\\"mike\\\", \\\"jack\\\", \\\"你好\\\", \\\"没有\\\", \\\"没时间，你找别人吧\\\") }) chatTask.Run() } func NewChat(from string, to string, contents ...string) { ctx := context.Background() mdCtx := metadata.AppendToOutgoingContext(ctx, \\\"from\\\", from) chat, err := Client.Chat(mdCtx) defer log.Println(\\\"end chat\\\", from) if err != nil { log.Panicln(err) } chatTask := task.NewTask(func(err error) { log.Panicln(err) }) chatTask.AddJobs(func() { for _, content := range contents { time.Sleep(time.Second) chat.Send(&message.Message{ From: from, Content: content, To: to, }) } // 消息发完了，就关闭连接 time.Sleep(time.Second * 5) chat.CloseSend() }) // 接收消息的协程 chatTask.AddJobs(func() { for { msg, err := chat.Recv() log.Printf(\\\"receive %+v\\\\n\\\", msg) if err != nil { log.Println(err) break } } }) chatTask.Run() }\",\"正常情况下，服务端输出\",\"server 2023/07/19 17:18:44 server listening on [::]:9090 server 2023/07/19 17:18:49 receive from:\\\"mike\\\" content:\\\"你好\\\" to:\\\"jack\\\" err <nil> server 2023/07/19 17:18:49 receive from:\\\"jack\\\" content:\\\"你好\\\" to:\\\"mike\\\" err <nil> server 2023/07/19 17:18:49 send from:\\\"jack\\\" content:\\\"你好\\\" to:\\\"mike\\\" server 2023/07/19 17:18:49 send from:\\\"mike\\\" content:\\\"你好\\\" to:\\\"jack\\\" server 2023/07/19 17:18:50 receive from:\\\"jack\\\" content:\\\"有没有时间一起打游戏？\\\" to:\\\"mike\\\" err <nil> server 2023/07/19 17:18:50 receive from:\\\"mike\\\" content:\\\"没有\\\" to:\\\"jack\\\" err <nil> server 2023/07/19 17:18:50 send from:\\\"mike\\\" content:\\\"没有\\\" to:\\\"jack\\\" server 2023/07/19 17:18:50 send from:\\\"jack\\\" content:\\\"有没有时间一起打游戏？\\\" to:\\\"mike\\\" server 2023/07/19 17:18:51 receive from:\\\"jack\\\" content:\\\"好吧\\\" to:\\\"mike\\\" err <nil> server 2023/07/19 17:18:51 receive from:\\\"mike\\\" content:\\\"没时间，你找别人吧\\\" to:\\\"jack\\\" err <nil> server 2023/07/19 17:18:51 send from:\\\"jack\\\" content:\\\"好吧\\\" to:\\\"mike\\\" server 2023/07/19 17:18:51 send from:\\\"mike\\\" content:\\\"没时间，你找别人吧\\\" to:\\\"jack\\\" server 2023/07/19 17:18:56 receive <nil> err EOF server 2023/07/19 17:18:56 receive <nil> err EOF server 2023/07/19 17:18:56 jack close send server 2023/07/19 17:18:56 jack end chat server 2023/07/19 17:18:56 mike close send server 2023/07/19 17:18:56 mike end chat\",\"正常情况下，客户端输出（可以看到消息的顺序逻辑是乱的）\",\"client 2023/07/19 17:26:24 receive from:\\\"jack\\\" content:\\\"你好\\\" to:\\\"mike\\\" client 2023/07/19 17:26:24 receive from:\\\"mike\\\" content:\\\"你好\\\" to:\\\"jack\\\" client 2023/07/19 17:26:25 receive from:\\\"mike\\\" content:\\\"没有\\\" to:\\\"jack\\\" client 2023/07/19 17:26:25 receive from:\\\"jack\\\" content:\\\"有没有时间一起打游戏？\\\" to:\\\"mike\\\" client 2023/07/19 17:26:26 receive from:\\\"jack\\\" content:\\\"好吧\\\" to:\\\"mike\\\" client 2023/07/19 17:26:26 receive from:\\\"mike\\\" content:\\\"没时间，你找别人吧\\\" to:\\\"jack\\\" client 2023/07/19 17:26:32 receive <nil> client 2023/07/19 17:26:32 rpc error: code = Unknown desc = EOF client 2023/07/19 17:26:32 end chat jack client 2023/07/19 17:26:32 receive <nil> client 2023/07/19 17:26:32 rpc error: code = Unknown desc = EOF client 2023/07/19 17:26:32 end chat mike\",\"通过示例可以看到的是，双向流式的处理逻辑无论是客户端还是服务端，都要比单向流式更复杂，需要结合多协程开启异步任务才能更好的处理逻辑。\"]},\"160\":{\"h\":\"metadata\",\"t\":[\"metadata 本质上是一个 map，它的 value 是一个字符串切片，就类似 http1 的 header 一样，并且它在 gRPC 中扮演的角色也和 http header 类似，提供一些本次 RPC 调用的一些信息，同时 metadata 的生命周期跟随着一次 rpc 调用的整个过程，调用结束，它的生命周期也就结束了。\",\"它在 gRPC 中主要通过context来进行传输和存储，不过 gRPC 提供了metadata 包，里面有相当多的方便函数来简化操作，不需要我们去手动操作context 。metadata 在 gRPC 中对应的类型为metadata.MD，如下所示。\",\"// MD is a mapping from metadata keys to values. Users should use the following // two convenience functions New and Pairs to generate MD. type MD map[string][]string\",\"我们可以直接使用metadata.New函数来创建，不过在创建之前，有几个点需要注意\",\"func New(m map[string]string) MD\",\"metadata 对键名有所限制，仅能是以下规则限制的字符：\",\"ASCII 字符\",\"数字：0-9\",\"小写字母：a-z\",\"大写字母：A-Z\",\"特殊字符：-_\",\"提示\",\"在 metadata 中，大写的字母都会被转换为小写，也就是说会占用同一个 key，值也会被覆盖。\",\"提示\",\"以grpc-开头的 key 是 grpc 保留使用的内部 key，如果使用这类 key 的话可能会导致一些错误。\"]},\"161\":{\"h\":\"手动创建\",\"t\":[\"创建 metadata 的方式有很多，这里介绍手动创建 metadata 最常用的两种方法，第一种就是使用metadata.New函数，直接传入一个 map。\",\"func New(m map[string]string) MD\",\"md := metadata.New(map[string]string{ \\\"key\\\": \\\"value\\\", \\\"key1\\\": \\\"value1\\\", \\\"key2\\\": \\\"value2\\\", })\",\"第二种是metadata.Pairs，传入偶数长度的字符串切片，会自动的解析成键值对。\",\"func Pairs(kv ...string) MD\",\"md := metadata.Pairs(\\\"k\\\", \\\"v\\\", \\\"k1\\\", \\\"v1\\\", \\\"k2\\\", \\\"v2\\\")\",\"还可以使用metadata.join来合并多个 metadata\",\"func Join(mds ...MD) MD\",\"md1 := metadata.New(map[string]string{ \\\"key\\\": \\\"value\\\", \\\"key1\\\": \\\"value1\\\", \\\"key2\\\": \\\"value2\\\", }) md2 := metadata.Pairs(\\\"k\\\", \\\"v\\\", \\\"k1\\\", \\\"v1\\\", \\\"k2\\\", \\\"v2\\\") union := metadata.join(md1,md2)\"]},\"162\":{\"h\":\"服务端使用\",\"t\":[\"获取 metadata\",\"服务端获取 metadata 可以使用metadata.FromIncomingContext函数来获取\",\"func FromIncomingContext(ctx context.Context) (MD, bool)\",\"对于一元 rpc 而言，service 的参数里面会带一个context参数，直接从里面获取 metadata 即可\",\"func (h *HelloWorld) Hello(ctx context.Context, name *wrapperspb.StringValue) (*wrapperspb.StringValue, error) { md, b := metadata.FromIncomingContext(ctx) ... }\",\"对于流式 rpc，service 的参数里面会有一个流对象，通过它可以获取流的context\",\"func (m *ChatService) Chat(chatServer message.ChatService_ChatServer) error { md, b := metadata.FromIncomingContext(chatServer.Context()) ... }\",\"发送 metadata\",\"发送 metadata 可以使用grpc.sendHeader函数\",\"func SendHeader(ctx context.Context, md metadata.MD) error\",\"该函数最多调用一次，在一些导致 header 被自动发送的事件发生后使用则不会生效。在一些情况下，如果不想直接发送 header，这时可以使用grpc.SetHeader 函数。\",\"func SetHeader(ctx context.Context, md metadata.MD) error\",\"该函数多次调用的话，会将每次传入的 metadata 合并，并在以下几种情况发送给客户端\",\"gprc.SendHeader和Servertream.SendHeader被调用时\",\"一元 rpc 的 handler 返回时\",\"调用流式 rpc 中流对象的Stream.SendMsg时\",\"rpc 请求的状态变为send out，这种情况要么是 rpc 请求成功了，要么就是出错了。\",\"对于流式 rpc 而言，建议使用流对象的SendHeader方法和SetHeader方法。\",\"type ServerStream interface { SetHeader(metadata.MD) error SendHeader(metadata.MD) error SetTrailer(metadata.MD) ... }\",\"提示\",\"在使用过程中会发现 Header 和 Trailer 两个功能差不多，不过它们的主要区别在于发送的时机，一元 rpc 中可能体会不到，但是这一差别在流式 RPC 中尤为明显，因为流式 RPC 中的 Header 可以不用等待请求结束就可以发送 Header。前面提到过了 Header 会在特定的情况下被发送，而 Trailer 仅仅只会在整个 RPC 请求结束后才会被发送，在此之前，获取到的 trailer 都是空的。\"]},\"163\":{\"h\":\"客户端使用\",\"t\":[\"获取 metadata\",\"客户端想要获取响应的 header，可以通过grpc.Header和grpc.Trailer来实现\",\"func Header(md *metadata.MD) CallOption\",\"func Trailer(md *metadata.MD) CallOption\",\"不过需要注意的是，并不能直接获取，可以看到以上两个函数返回值是CallOption，也就是说是在发起 RPC 请求时作为 option 参数传入的。\",\"// 声明用于接收值的md var header, trailer metadata.MD // 调用rpc请求时传入option res, err := client.SomeRPC( ctx, data, grpc.Header(&header), grpc.Trailer(&trailer) )\",\"在请求完成后，会将值写到传入的 md 中。对于流式 rpc 而言，可以通过发起请求时返回的流对象直接获取\",\"type ClientStream interface { Header() (metadata.MD, error) Trailer() metadata.MD ... }\",\"stream, err := client.StreamRPC(ctx) header, err := stream.Header() trailer := Stream.Trailer()\",\"发送 metadata\",\"客户端想要发送 metadata 很简单，之前提到过 metadata 的表现形式就是 valueContext，将 metadata 结合到 context 中，然后在请求的时候把 context 传入即可，metadata 包提供了两个函数来方便构造 context。\",\"func NewOutgoingContext(ctx context.Context, md MD) context.Context\",\"md := metadata.Pairs(\\\"k1\\\", \\\"v1\\\") ctx := context.Background() outgoingContext := metadata.NewOutgoingContext(ctx, md) // 一元rpc res,err := client.SomeRPC(outgoingContext,data) // 流式rpc stream,err := client.StreamRPC(outgoingContext)\",\"如果原有的 ctx 已经有 metadata 了的话，再使用NewOutgoingContext会将先前的数据直接覆盖掉，为了避免这种情况，可以使用下面这个函数，它不会覆盖，而是会将数据合并。\",\"func AppendToOutgoingContext(ctx context.Context, kv ...string) context.Context\",\"md := metadata.Pairs(\\\"k1\\\", \\\"v1\\\") ctx := context.Background() outgoingContext := metadata.NewOutgoingContext(ctx, md) appendContext := metadata.AppendToOutgoingContext(outgoingContext, \\\"k2\\\",\\\"v2\\\") // 一元rpc res,err := client.SomeRPC(appendContext,data) // 流式rpc stream,err := client.StreamRPC(appendContext)\"]},\"164\":{\"h\":\"拦截器\",\"t\":[\"gRPC 的拦截器就类似于 gin 中的 Middleware 一样，都是为了在请求前或者请求后做一些特殊的工作并且不影响到本身的业务逻辑。在 gRPC 中，拦截器有两大类，服务端拦截器和客户端拦截器，根据请求类型来分则有一元 RPC 拦截器，和流式 RPC 拦截器，下图\",\"为了能更好的理解拦截器，下面会根据一个非常简单的示例来进行描述。\",\"grpc_learn\\\\interceptor | buf.gen.yaml | +---client | main.go | +---pb | buf.yaml | person.proto | +---person | person.pb.go | person_grpc.pb.go | \\\\---server main.go\",\"person.proto内容如下\",\"syntax = \\\"proto3\\\"; option go_package = \\\".;person\\\"; import \\\"google/protobuf/wrappers.proto\\\"; message personInfo { string name = 1; int64 age = 2; string address = 3; } service person { rpc getPersonInfo(google.protobuf.StringValue) returns (personInfo); rpc createPersonInfo(stream personInfo) returns (google.protobuf.Int64Value); }\",\"服务端代码如下，逻辑全是之前的内容，比较简单不再赘述。\",\"package main import ( \\\"context\\\" \\\"errors\\\" \\\"google.golang.org/protobuf/types/known/wrapperspb\\\" \\\"grpc_learn/interceptor/person\\\" \\\"io\\\" \\\"sync\\\" ) // 存放数据 var personData sync.Map type PersonService struct { person.UnimplementedPersonServer } func (p *PersonService) GetPersonInfo(ctx context.Context, name *wrapperspb.StringValue) (*person.PersonInfo, error) { value, ok := personData.Load(name.Value) if !ok { return nil, person.PersonNotFoundErr } personInfo := value.(*person.PersonInfo) return personInfo, nil } func (p *PersonService) CreatePersonInfo(personStream person.Person_CreatePersonInfoServer) error { count := 0 for { personInfo, err := personStream.Recv() if errors.Is(err, io.EOF) { return personStream.SendAndClose(wrapperspb.Int64(int64(count))) } else if err != nil { return err } personData.Store(personInfo.Name, personInfo) count++ } }\"]},\"165\":{\"h\":\"服务端拦截\",\"t\":[\"拦截服务端 rpc 请求的有UnaryServerInterceptor和StreamServerInterceptor，具体类型如下所示\",\"type UnaryServerInterceptor func(ctx context.Context, req interface{}, info *UnaryServerInfo, handler UnaryHandler) (resp interface{}, err error) type StreamServerInterceptor func(srv interface{}, ss ServerStream, info *StreamServerInfo, handler StreamHandler) error\",\"一元 RPC\",\"创建一元 RPC 拦截器，只需要实现UnaryserverInterceptor类型即可，下面是一个简单的一元 RPC 拦截器的例子，功能是输出每一次 rpc 的请求和响应。\",\"// UnaryPersonLogInterceptor // param ctx context.Context // param req interface{} rpc的请求数据 // param info *grpc.UnaryServerInfo 本次一元RPC的一些请求信息 // param unaryHandler grpc.UnaryHandler 具体的handler // return resp interface{} rpc的响应数据 // return err error func UnaryPersonLogInterceptor(ctx context.Context, req interface{}, info *grpc.UnaryServerInfo, unaryHandler grpc.UnaryHandler) (resp interface{}, err error) { log.Println(fmt.Sprintf(\\\"before unary rpc intercept path: %s req: %+v\\\", info.FullMethod, req)) resp, err = unaryHandler(ctx, req) log.Println(fmt.Sprintf(\\\"after unary rpc intercept path: %s resp: %+v err: %+v\\\", info.FullMethod, resp, err)) return resp, err }\",\"对于一元 RPC 而言，拦截器拦截的是每一个 RPC 的请求和响应，即拦截的是 RPC 的请求阶段和响应阶段，如果拦截器返回 error，那么本次请求就会结束。\",\"流式 rpc\",\"创建流式 RPC 拦截器，只需要实现StreamServerInterceptor类型即可，下面是一个简单的流式 RPC 拦截器的例子。\",\"// StreamPersonLogInterceptor // param srv interface{} 对应服务端实现的server // param stream grpc.ServerStream 流对象 // param info *grpc.StreamServerInfo 流信息 // param streamHandler grpc.StreamHandler 处理器 // return error func StreamPersonLogInterceptor(srv interface{}, stream grpc.ServerStream, info *grpc.StreamServerInfo, streamHandler grpc.StreamHandler) error { log.Println(fmt.Sprintf(\\\"before stream rpc interceptor path: %s srv: %+v clientStream: %t serverStream: %t\\\", info.FullMethod, srv, info.IsClientStream, info.IsServerStream)) err := streamHandler(srv, stream) log.Println(fmt.Sprintf(\\\"after stream rpc interceptor path: %s srv: %+v clientStream: %t serverStream: %t err: %+v\\\", info.FullMethod, srv, info.IsClientStream, info.IsServerStream, err)) return err }\",\"对于流式 RPC 而言，拦截器拦截的是每一个流对象的Send和Recve 方法被调用的时机，如果拦截器返回 error，并不会导致本次 RPC 请求的结束，仅仅只是代表着本次send 或recv出现了错误。\",\"使用拦截器\",\"要想使创建的拦截器生效，需要在创建 gRPC 服务器的时候作为 option 传入，官方也提供了相关的函数以供使用。如下所示，有添加单个拦截器的函数，也有添加链式拦截器的函数。\",\"func UnaryInterceptor(i UnaryServerInterceptor) ServerOption func ChainUnaryInterceptor(interceptors ...UnaryServerInterceptor) ServerOption func StreamInterceptor(i StreamServerInterceptor) ServerOption func ChainStreamInterceptor(interceptors ...StreamServerInterceptor) ServerOption\",\"提示\",\"重复使用UnaryInterceptor会抛出如下 panic\",\"panic: The unary server interceptor was already set and may not be reset.\",\"StreamInterceptor也是同理，而链式拦截器重复调用则会 append 到同一个链上。\",\"使用示例如下\",\"package main import ( \\\"google.golang.org/grpc\\\" \\\"grpc_learn/interceptor/person\\\" \\\"log\\\" \\\"net\\\" ) func main() { log.SetPrefix(\\\"server \\\") listen, err := net.Listen(\\\"tcp\\\", \\\"9090\\\") if err != nil { log.Panicln(err) } server := grpc.NewServer( // 添加链式拦截器 grpc.ChainUnaryInterceptor(UnaryPersonLogInterceptor), grpc.ChainStreamInterceptor(StreamPersonLogInterceptor), ) person.RegisterPersonServer(server, &PersonService{}) server.Serve(listen) }\"]},\"166\":{\"h\":\"客户端拦截\",\"t\":[\"客户端拦截器跟服务端差不多，一个一元拦截器UnaryClientInterceptor，一个流式拦截器StreamClientInterceptor，具体类型如下所示。\",\"type UnaryClientInterceptor func(ctx context.Context, method string, req, reply interface{}, cc *ClientConn, invoker UnaryInvoker, opts ...CallOption) error type StreamClientInterceptor func(ctx context.Context, desc *StreamDesc, cc *ClientConn, method string, streamer Streamer, opts ...CallOption) (ClientStream, error)\",\"一元 RPC\",\"创建一元 RPC 客户端拦截器，实现UnaryClientInterceptor即可，下面就是一个简单的例子。\",\"// UnaryPersonClientInterceptor // param ctx context.Context // param method string 方法名 // param req interface{} 请求数据 // param reply interface{} 响应数据 // param cc *grpc.ClientConn 客户端连接对象 // param invoker grpc.UnaryInvoker 被拦截的具体客户端方法 // param opts ...grpc.CallOption 本次请求的配置项 // return error func UnaryPersonClientInterceptor(ctx context.Context, method string, req, reply interface{}, cc *grpc.ClientConn, invoker grpc.UnaryInvoker, opts ...grpc.CallOption) error { log.Println(fmt.Sprintf(\\\"before unary request path: %s req: %+v\\\", method, req)) err := invoker(ctx, method, req, reply, cc, opts...) log.Println(fmt.Sprintf(\\\"after unary request path: %s req: %+v rep: %+v\\\", method, req, reply)) return err }\",\"通过客户端的一元 RPC 拦截器，可以获取到本地请求的请求数据和响应数据以及一些其他的请求信息。\",\"流式 RPC\",\"创建一个流式 RPC 客户端拦截器，实现StreamClientInterceptor即可，下面就是一个例子。\",\"// StreamPersonClientInterceptor // param ctx context.Context // param desc *grpc.StreamDesc 流对象的描述信息 // param cc *grpc.ClientConn 连接对象 // param method string 方法名 // param streamer grpc.Streamer 用于创建流对象的对象 // param opts ...grpc.CallOption 连接配置项 // return grpc.ClientStream 创建好的客户端流对象 // return error func StreamPersonClientInterceptor(ctx context.Context, desc *grpc.StreamDesc, cc *grpc.ClientConn, method string, streamer grpc.Streamer, opts ...grpc.CallOption) (grpc.ClientStream, error) { log.Println(fmt.Sprintf(\\\"before create stream path: %s name: %+v client: %t server: %t\\\", method, desc.StreamName, desc.ClientStreams, desc.ServerStreams)) stream, err := streamer(ctx, desc, cc, method, opts...) log.Println(fmt.Sprintf(\\\"after create stream path: %s name: %+v client: %t server: %t\\\", method, desc.StreamName, desc.ClientStreams, desc.ServerStreams)) return stream, err }\",\"通过流式 RPC 客户端拦截器，只能拦截到客户端与服务端建立连接的时候也就是创建流的时机，并不能拦截到客户端流对象每一次收发消息的时候，不过我们把拦截器中创建好的流对象包装一下就可以实现拦截收发消息了，就像下面这样\",\"// StreamPersonClientInterceptor // param ctx context.Context // param desc *grpc.StreamDesc 流对象的描述信息 // param cc *grpc.ClientConn 连接对象 // param method string 方法名 // param streamer grpc.Streamer 用于创建流对象的对象 // param opts ...grpc.CallOption 连接配置项 // return grpc.ClientStream 创建好的客户端流对象 // return error func StreamPersonClientInterceptor(ctx context.Context, desc *grpc.StreamDesc, cc *grpc.ClientConn, method string, streamer grpc.Streamer, opts ...grpc.CallOption) (grpc.ClientStream, error) { log.Println(fmt.Sprintf(\\\"before create stream path: %stream name: %+v client: %t server: %t\\\", method, desc.StreamName, desc.ClientStreams, desc.ServerStreams)) stream, err := streamer(ctx, desc, cc, method, opts...) log.Println(fmt.Sprintf(\\\"after create stream path: %stream name: %+v client: %t server: %t\\\", method, desc.StreamName, desc.ClientStreams, desc.ServerStreams)) return &ClientStreamInterceptorWrapper{method, desc, stream}, err } type ClientStreamInterceptorWrapper struct { method string desc *grpc.StreamDesc grpc.ClientStream } func (c *ClientStreamInterceptorWrapper) SendMsg(m interface{}) error { // 消息发送前 err := c.ClientStream.SendMsg(m) // 消息发送后 log.Println(fmt.Sprintf(\\\"%s send %+v err: %+v\\\", c.method, m, err)) return err } func (c *ClientStreamInterceptorWrapper) RecvMsg(m interface{}) error { // 消息接收前 err := c.ClientStream.RecvMsg(m) // 消息接收后 log.Println(fmt.Sprintf(\\\"%s recv %+v err: %+v\\\", c.method, m, err)) return err }\",\"使用拦截器\",\"使用时，与服务端类似也是四个工具函数通过 option 来添加拦截器，分为单个拦截器和链式拦截器。\",\"func WithUnaryInterceptor(f UnaryClientInterceptor) DialOption func WithChainUnaryInterceptor(interceptors ...UnaryClientInterceptor) DialOption func WithStreamInterceptor(f StreamClientInterceptor) DialOption func WithChainStreamInterceptor(interceptors ...StreamClientInterceptor) DialOption\",\"提示\",\"客户端重复使用WithUnaryInterceptor不会抛出 panic，但是仅最后一个会生效。\",\"下面是一个使用案例\",\"package main import ( \\\"context\\\" \\\"fmt\\\" \\\"google.golang.org/grpc\\\" \\\"google.golang.org/grpc/credentials/insecure\\\" \\\"google.golang.org/protobuf/types/known/wrapperspb\\\" \\\"grpc_learn/interceptor/person\\\" \\\"log\\\" ) func main() { log.SetPrefix(\\\"client \\\") dial, err := grpc.Dial(\\\"localhost:9090\\\", grpc.WithTransportCredentials(insecure.NewCredentials()), grpc.WithChainUnaryInterceptor(UnaryPersonClientInterceptor), grpc.WithChainStreamInterceptor(StreamPersonClientInterceptor), ) if err != nil { log.Panicln(err) } ctx := context.Background() client := person.NewPersonClient(dial) personStream, err := client.CreatePersonInfo(ctx) personStream.Send(&person.PersonInfo{ Name: \\\"jack\\\", Age: 18, Address: \\\"usa\\\", }) personStream.Send(&person.PersonInfo{ Name: \\\"mike\\\", Age: 20, Address: \\\"cn\\\", }) recv, err := personStream.CloseAndRecv() log.Println(recv, err) log.Println(client.GetPersonInfo(ctx, wrapperspb.String(\\\"jack\\\"))) log.Println(client.GetPersonInfo(ctx, wrapperspb.String(\\\"jenny\\\"))) }\",\"到目前为止，整个案例已经编写完毕，是时候来运行一下看看结果是什么样的。服务端输出如下\",\"server 2023/07/20 17:27:57 before stream rpc interceptor path: /person/createPersonInfo srv: &{UnimplementedPersonServer:{}} clientStream: true serverStream: false server 2023/07/20 17:27:57 after stream rpc interceptor path: /person/createPersonInfo srv: &{UnimplementedPersonServer:{}} clientStream: true serverStream: false err: <nil> server 2023/07/20 17:27:57 before unary rpc intercept path: /person/getPersonInfo req: value:\\\"jack\\\" server 2023/07/20 17:27:57 after unary rpc intercept path: /person/getPersonInfo resp: name:\\\"jack\\\" age:18 address:\\\"usa\\\" err: <nil> server 2023/07/20 17:27:57 before unary rpc intercept path: /person/getPersonInfo req: value:\\\"jenny\\\" server 2023/07/20 17:27:57 after unary rpc intercept path: /person/getPersonInfo resp: <nil> err: person not found\",\"客户端输出如下\",\"C:\\\\Users\\\\Stranger\\\\AppData\\\\Local\\\\Temp\\\\GoLand\\\\___go_build_grpc_learn_interceptor_client.exe client 2023/07/20 17:27:57 before create stream path: /person/createPersonInfotream name: createPersonInfo client: true server: false client 2023/07/20 17:27:57 after create stream path: /person/createPersonInfotream name: createPersonInfo client: true server: false client 2023/07/20 17:27:57 /person/createPersonInfo send name:\\\"jack\\\" age:18 address:\\\"usa\\\" err: <nil> client 2023/07/20 17:27:57 /person/createPersonInfo send name:\\\"mike\\\" age:20 address:\\\"cn\\\" err: <nil> client 2023/07/20 17:27:57 /person/createPersonInfo recv value:2 err: <nil> client 2023/07/20 17:27:57 value:2 <nil> client 2023/07/20 17:27:57 before unary request path: /person/getPersonInfotream req: value:\\\"jack\\\" client 2023/07/20 17:27:57 after unary request path: /person/getPersonInfotream req: value:\\\"jack\\\" rep: name:\\\"jack\\\" age:18 address:\\\"usa\\\" client 2023/07/20 17:27:57 name:\\\"jack\\\" age:18 address:\\\"usa\\\" <nil> client 2023/07/20 17:27:57 before unary request path: /person/getPersonInfotream req: value:\\\"jenny\\\" client 2023/07/20 17:27:57 after unary request path: /person/getPersonInfotream req: value:\\\"jenny\\\" rep: client 2023/07/20 17:27:57 <nil> rpc error: code = Unknown desc = person not found\",\"可以看到两边的输出都符合预期，起到了拦截的效果，这个案例只是一个很简单的示例，利用 gRPC 的拦截器可以做很多事情比如授权，日志，监控等等其他功能，可以选择自己造轮子，也可以选择使用开源社区现成的轮子，gRPC Ecosystem 专门收集了一系列开源的 gRPC 拦截器中间件，地址：grpc-ecosystem/go-grpc-middleware。\"]},\"167\":{\"h\":\"错误处理\",\"t\":[\"在开始之前先来看一个例子，在上一个拦截器案例中，如果用户查询不到，会向客户端返回错误person not found ，那么问题来了，客户端能不能根据返回的错误做特殊的处理呢？接下来试一试，在客户端代码中，尝试使用errors.Is来判断错误。\",\"func main() { log.SetPrefix(\\\"client \\\") dial, err := grpc.Dial(\\\"localhost:9090\\\", grpc.WithTransportCredentials(insecure.NewCredentials()), grpc.WithChainUnaryInterceptor(UnaryPersonClientInterceptor), grpc.WithChainStreamInterceptor(StreamPersonClientInterceptor), ) if err != nil { log.Panicln(err) } ctx := context.Background() client := person.NewPersonClient(dial) personStream, err := client.CreatePersonInfo(ctx) personStream.Send(&person.PersonInfo{ Name: \\\"jack\\\", Age: 18, Address: \\\"usa\\\", }) personStream.Send(&person.PersonInfo{ Name: \\\"mike\\\", Age: 20, Address: \\\"cn\\\", }) recv, err := personStream.CloseAndRecv() log.Println(recv, err) info, err := client.GetPersonInfo(ctx, wrapperspb.String(\\\"john\\\")) log.Println(info, err) if errors.Is(err, person.PersonNotFoundErr) { log.Println(\\\"person not found err\\\") } }\",\"结果输出如下\",\"client 2023/07/21 16:46:10 before create stream path: /person/createPersonInfotream name: createPersonInfo client: true server: false client 2023/07/21 16:46:10 after create stream path: /person/createPersonInfotream name: createPersonInfo client: true server: false client 2023/07/21 16:46:10 /person/createPersonInfo send name:\\\"jack\\\" age:18 address:\\\"usa\\\" err: <nil> client 2023/07/21 16:46:10 /person/createPersonInfo send name:\\\"mike\\\" age:20 address:\\\"cn\\\" err: <nil> client 2023/07/21 16:46:10 /person/createPersonInfo recv value:2 err: <nil> client 2023/07/21 16:46:10 value:2 <nil> client 2023/07/21 16:46:10 before unary request path: /person/getPersonInfotream req: value:\\\"john\\\" client 2023/07/21 16:46:10 after unary request path: /person/getPersonInfotream req: value:\\\"john\\\" rep: client 2023/07/21 16:46:10 <nil> rpc error: code = Unknown desc = person not found\",\"可以看到客户端接收的 error 是这样的，会发现服务端返回的 error 在 desc 这个字段里面\",\"rpc error: code = Unknown desc = person not found\",\"自然errors.Is这段逻辑也就没有执行，即便换成errors.As也是一样的结果。\",\"if errors.Is(err, person.PersonNotFoundErr) { log.Println(\\\"person not found err\\\") }\",\"为此，gRPC 提供了status 包来解决这类问题，这也是为什么客户端接收到的错误会有 code 和 desc 字段的原因，因为 gRPC 实际上返回给客户端的是一个Status ，其具体类型如下，可以看出也是一个 protobuf 定义的 message。\",\"type Status struct { state protoimpl.MessageState sizeCache protoimpl.SizeCache unknownFields protoimpl.UnknownFields Code int32 `protobuf:\\\"varint,1,opt,name=code,proto3\\\" json:\\\"code,omitempty\\\"` Message string `protobuf:\\\"bytes,2,opt,name=message,proto3\\\" json:\\\"message,omitempty\\\"` Details []*anypb.Any `protobuf:\\\"bytes,3,rep,name=details,proto3\\\" json:\\\"details,omitempty\\\"` }\",\"message Status { // The status code, which should be an enum value of // [google.rpc.Code][google.rpc.Code]. int32 code = 1; // A developer-facing error message, which should be in English. Any // user-facing error message should be localized and sent in the // [google.rpc.Status.details][google.rpc.Status.details] field, or localized // by the client. string message = 2; // A list of messages that carry the error details. There is a common set of // message types for APIs to use. repeated google.protobuf.Any details = 3; }\"]},\"168\":{\"h\":\"错误码\",\"t\":[\"Status 结构体中的 Code，是一种类似 Http Status 形式的存在，用于表示当前 rpc 请求的状态，gRPC 定义了 16 个 code 位于grpc/codes ，涵盖了大部分的场景，分别如下所示\",\"// A Code is an unsigned 32-bit error code as defined in the gRPC spec. type Code uint32 const ( // 调用成功 OK Code = 0 // 请求被取消 Canceled Code = 1 // 未知错误 Unknown Code = 2 // 参数不合法 InvalidArgument Code = 3 // 请求超时 DeadlineExceeded Code = 4 // 资源不存在 NotFound Code = 5 // 已存在相同的资源（能出现这个我是没想到的） AlreadyExists Code = 6 // 权限不足被拒绝访问 PermissionDenied Code = 7 // 资源枯竭，剩下的容量不足以使用，比如磁盘容量不够了之类的情况 ResourceExhausted Code = 8 // 执行条件不足，比如使用rm删除一个非空的目录，删除的条件是目录是空的，但条件不满足 FailedPrecondition Code = 9 // 请求被打断 Aborted Code = 10 // 操作访问超出限制范围 OutOfRange Code = 11 // 表示当前服务没有实现 Unimplemented Code = 12 // 系统内部错误 Internal Code = 13 // 服务不可用 Unavailable Code = 14 // 数据丢失 DataLoss Code = 15 // 没有通过认证 Unauthenticated Code = 16 _maxCode = 17 )\",\"grpc/status包提供了相当多的函数以方 status 与 error 之间的相互转换。我们可以直接使用status.New来创建一个 Status，或者Newf\",\"func New(c codes.Code, msg string) *Status func Newf(c codes.Code, format string, a ...interface{}) *Status\",\"例如下面的代码\",\"success := status.New(codes.OK, \\\"request success\\\") notFound := status.Newf(codes.NotFound, \\\"person not found: %s\\\", name)\",\"通过 status 的 err 方法可以获取到其中的 error，当状态为 ok 的时候 error 为 nil。\",\"func (s *Status) Err() error { if s.Code() == codes.OK { return nil } return &Error{s: s} }\",\"也可以直接创建 error\",\"func Err(c codes.Code, msg string) error func Errorf(c codes.Code, format string, a ...interface{}) error\",\"success := status.Error(codes.OK, \\\"request success\\\") notFound := status.Errorf(codes.InvalidArgument, \\\"person not found: %s\\\", name)\",\"于是我们可以将服务代码修改成如下\",\"func (p *PersonService) GetPersonInfo(ctx context.Context, name *wrapperspb.StringValue) (*person.PersonInfo, error) { value, ok := personData.Load(name.Value) if !ok { return nil, status.Errorf(codes.NotFound, \\\"person not found: %s\\\", name.String()) } personInfo := value.(*person.PersonInfo) return personInfo, status.Errorf(codes.OK, \\\"request success\\\") }\",\"在此之前，服务端返回的所有的 code 都是 unknown，现在经过修改后有了更加明确的语义。于是在客户端就可以通过status.FromError 或者使用下面的函数从 error 中获取 status，从而根据不同的 code 来做出响应的处理\",\"func FromError(err error) (s *Status, ok bool) func Convert(err error) *Status func Code(err error) codes.Code\",\"示例如下\",\"info, err := client.GetPersonInfo(ctx, wrapperspb.String(\\\"john\\\")) s, ok := status.FromError(err) switch s.Code() { case codes.OK: case codes.InvalidArgument: ... }\",\"不过尽管 grpc 的 code 已经尽可能的涵盖了一些通用场景，不过有时候还是无法满足开发人员的需求，这个时候就可以使用 Status 中的 Details 字段，并且它还是一个切片，可以容纳多个信息。通过Status.WithDetails 来传入一些自定义的信息\",\"func (s *Status) WithDetails(details ...proto.Message) (*Status, error)\",\"通过Status.Details来获取信息\",\"func (s *Status) Details() []interface{}\",\"需要注意的是，传入的信息最好是由 protobuf 定义的，这样才能方便服务端客户端两端都能解析，官方给出了几个示例\",\"message ErrorInfo { // 错误的原因 string reason = 1; // 定义服务的主体 string domain = 2; // 其他信息 map<string, string> metadata = 3; } // 重试信息 message RetryInfo { // 同一个请求的等待间隔时间 google.protobuf.Duration retry_delay = 1; } // 调试信息 message DebugInfo { // 堆栈 repeated string stack_entries = 1; // 一些细节信息 string detail = 2; } ... ...\",\"更多的例子可以前往googleapis/google/rpc/error_details.proto at master · googleapis/googleapis (github.com) 查看。如果需要可以通过下面的代码来引入。\",\"import \\\"google.golang.org/genproto/googleapis/rpc/errdetails\\\"\",\"使用ErrorInfo作为 details\",\"notFound := status.Newf(codes.NotFound, \\\"person not found: %s\\\", name) notFound.WithDetails(&errdetails.ErrorInfo{ Reason: \\\"person not found\\\", Domain: \\\"xxx\\\", Metadata: nil, })\",\"在客户端就可以拿到数据做出处理，不过上述只是 gRPC 推荐使用的一些例子，除此之外，同样也可以自己定义 message，来更好的满足相应的业务需求，如果想做一些统一的错误处理，也可以放到拦截器里面操作。\"]},\"169\":{\"h\":\"超时控制\",\"t\":[\"在大多数情况下，通常不会只有一个服务，并且可能上游有很多服务，下游也有很多服务。客户端发起一次请求，从最上游的服务到最下游，就形成了一个服务调用链，就像图中那样，或许可能比图中的还要长。\",\"如此长的一个调用链，如果其中一个服务的逻辑处理需要花费很长时间，就会导致上游一直处于等待状态。为了减少不必要的资源浪费，因此有必要引入超时这一机制，这样一来最上游调用时传入的超时时间，便是整个调用链所允许的执行花费最大时间。而 gRPC 可以跨进程跨语言传递超时，它把一些需要跨进程传递的数据放在了 HTTP2 的HEADERS Frame 帧中，如下图\",\"gRPC 请求中的超时数据对应着HEADERS Frame中的grpc-timeout 字段。需要注意的是，并不是所有的 gRPC 库都实现了这一超时传递机制，不过gRPC-go肯定是支持的，如果使用其他语言的库，并且使用了这一特性，则需要额外留意这一点。\"]},\"170\":{\"h\":\"连接超时\",\"t\":[\"gRPC 客户端在向服务端建立连接时，默认是异步建立的，如果连接建立失败只会返回一个空的 Client。如果想要使连接同步进行，则可以使用grpc.WithBlock() 来使连接未建立成功时阻塞等待。\",\"dial, err := grpc.Dial(\\\"localhost:9091\\\", grpc.WithBlock(), grpc.WithTransportCredentials(insecure.NewCredentials()), grpc.WithChainUnaryInterceptor(UnaryPersonClientInterceptor), grpc.WithChainStreamInterceptor(StreamPersonClientInterceptor), )\",\"如果想要控制一个超时时间，则只需要传入一个 TimeoutContext，使用grpc.DialContext来替代gprc.Dial以传入 context。\",\"timeout, cancelFunc := context.WithTimeout(context.Background(), time.Second) defer cancelFunc() dial, err := grpc.DialContext(timeout, \\\"localhost:9091\\\", grpc.WithBlock(), grpc.WithTransportCredentials(insecure.NewCredentials()), grpc.WithChainUnaryInterceptor(UnaryPersonClientInterceptor), grpc.WithChainStreamInterceptor(StreamPersonClientInterceptor), )\",\"如此一来，如果连接建立超时，就会返回 error\",\"context deadline exceeded\",\"在服务端同样也可以设置连接超时，在与客户端建立新连接的时候设置一个超时时间，默认是 120 秒，如果在规定时间内没有成功建立连接，服务端会主动断开连接。\",\"server := grpc.NewServer( grpc.ConnectionTimeout(time.Second*3), )\",\"提示\",\"grpc.ConnectionTimeout仍处于实验阶段，未来的 API 可能会被修改或删除。\"]},\"171\":{\"h\":\"请求超时\",\"t\":[\"gRPC 客户端在发起请求的时候，第一个参数就是Context类型，同样的，要想给 RPC 请求加上一个超时时间，只需要传入一个 TimeoutContext 即可\",\"timeout, cancel := context.WithTimeout(ctx, time.Second*3) defer cancel() info, err := client.GetPersonInfo(timeout, wrapperspb.String(\\\"john\\\")) switch status.Code(err) { case codes.DeadlineExceeded: // 超时逻辑处理 }\",\"经过 gRPC 的处理，超时时间被传递到了服务端，在传输过程中它以在帧字段的形式存在中，在 go 里面它以 context 的形式存在，就此在整个链路中进行传递。在链路传递过程中，不建议去修改超时时间，具体在请求时设置多长的超时时间，这应该是最上游应该考虑的问题。\"]},\"172\":{\"h\":\"认证授权\",\"t\":[\"在微服务领域中，每一个服务都需要对请求验证用户身份和权限，如果和单体应用一样，每个服务都要自己实现一套认证逻辑，这显然是不太现实的。所以需要一个统一的认证与授权服务，而常见的解决方案是使用 OAuth2，分布式 Session，和 JWT，这其中，OAuth2 使用最为广泛，一度已经成为了业界标准，OAuth2 最常用的令牌类型就是是 JWT。下面是一张 OAuth2 授权码模式的流程图，基本流程如图所示。\"]},\"173\":{\"h\":\"安全传输\"},\"174\":{\"h\":\"服务注册与发现\",\"t\":[\"客户端调用服务端的指定服务之前，需要知晓服务端的 ip 和 port，在先前的案例中，服务端地址都是写死的。在实际的网络环境中不总是那么稳定，一些服务可能会因故障下线而无法访问，也有可能会因为业务发展进行机器迁移而导致地址变化，在这些情况下就不能使用静态地址访问服务了，而这些动态的问题就是服务发现与注册要解决的，服务发现负责监视服务地址的变化并更新，服务注册负责告诉外界自己的地址。gRPC 中，提供了基础的服务发现功能，并且支持拓展和自定义。\",\"不能用静态地址，可以用一些特定的名称来进行代替，比如浏览器通过 DNS 解析域名来获取地址，同样的，gRPC 默认的服务发现就是通过 DNS 来进行的，修改本地的 host 文件，添加如下映射\",\"127.0.0.1 example.grpc.com\",\"然后将 helloworld 示例中客户端 Dial 的地址改为对应的域名\",\"func main() { // 建立连接，没有加密验证 conn, err := grpc.Dial(\\\"example.grpc.com:8080\\\", grpc.WithTransportCredentials(insecure.NewCredentials()), ) if err != nil { panic(err) } defer conn.Close() // 创建客户端 client := hello2.NewSayHelloClient(conn) // 远程调用 helloRep, err := client.Hello(context.Background(), &hello2.HelloReq{Name: \\\"client\\\"}) if err != nil { panic(err) } log.Printf(\\\"received grpc resp: %+v\\\", helloRep.String()) }\",\"同样能看到正常的输出\",\"2023/08/26 15:52:52 received grpc resp: msg:\\\"hello world! client\\\"\",\"在 gRPC 中，这类名称必须要遵守 RFC 3986 中定义的 URI 语法，格式为\",\" hierarchical part ┌───────────────────┴─────────────────────┐ authority path ┌───────────────┴───────────────┐┌───┴────┐ abc://username:password@example.com:123/path/data?key=value&key2=value2#fragid1 └┬┘ └───────┬───────┘ └────┬────┘ └┬┘ └─────────┬─────────┘ └──┬──┘ scheme user information host port query fragment\",\"上例中的 URI 就是如下形式，由于默认支持 dns 所以省略掉了前缀的 scheme。\",\"dns:example.grpc.com:8080\",\"除此之外 gRPC 还默认支持 Unix domain sockets，而对于其他的方式，需要我们根据 gRPC 的拓展来进行自定义实现，为此需要实现一个自定义的解析器resolver.Resovler ，resolver 负责监控目标地址和服务配置的更新。\",\"type Resolver interface { // gRPC将调用ResolveNow来尝试再次解析目标名称。这只是一个提示，如果不需要，解析器可以忽略它，该方法可能被并发的调用 ResolveNow(ResolveNowOptions) Close() }\",\"gRPC 要求我们传入一个 Resolver 构造器，也就是resolver.Builder，它负责构造 Resolver 实例。\",\"type Builder interface { Build(target Target, cc ClientConn, opts BuildOptions) (Resolver, error) Scheme() string }\",\"Builder 的 Scheme 方法返回它负责解析的 Scheme 类型，例如默认的 dnsBuilder 它返回的就是dns ，构造器在初始化时应该使用resolver.Register注册到全局 Builder 中，又或者作为 options，使用grpc.WithResolver 传入 ClientConn 内部，后者的优先级高于前者。\",\"上图简单描述了一下 resolver 的工作流程，接下来就演示如何自定义 resolver\"]},\"175\":{\"h\":\"自定义服务解析\",\"t\":[\"下面编写一个自定义解析器，需要一个自定义的解析构造器来进行构造。\",\"package myresolver import ( \\\"fmt\\\" \\\"google.golang.org/grpc/resolver\\\" ) func NewBuilder(ads map[string][]string) *MyBuilder { return &MyBuilder{ads: ads} } type MyBuilder struct { ads map[string][]string } func (c *MyBuilder) Build(target resolver.Target, cc resolver.ClientConn, opts resolver.BuildOptions) (resolver.Resolver, error) { if target.URL.Scheme != c.Scheme() { return nil, fmt.Errorf(\\\"unsupported scheme: %s\\\", target.URL.Scheme) } m := &MyResolver{ads: c.ads, t: target, cc: cc} // 这里必须要updatestate，否则会死锁 m.start() return m, nil } func (c *MyBuilder) Scheme() string { return \\\"hello\\\" } type MyResolver struct { t resolver.Target cc resolver.ClientConn ads map[string][]string } func (m *MyResolver) start() { addres := make([]resolver.Address, 0) for _, ad := range m.ads[m.t.URL.Opaque] { addres = append(addres, resolver.Address{Addr: ad}) } err := m.cc.UpdateState(resolver.State{ Addresses: addres, // 配置，loadBalancingPolicy指的是负载均衡策略 ServiceConfig: m.cc.ParseServiceConfig( `{\\\"loadBalancingPolicy\\\":\\\"round_robin\\\"}`), }) if err != nil { m.cc.ReportError(err) } } func (m *MyResolver) ResolveNow(_ resolver.ResolveNowOptions) {} func (m *MyResolver) Close() {}\",\"自定义解析器就是把 map 里面的匹配的地址传入到 updatestate，同时还指定了负载均衡的策略，round_robin指的是轮询的意思。\",\"// service config 结构如下 type jsonSC struct { LoadBalancingPolicy *string LoadBalancingConfig *internalserviceconfig.BalancerConfig MethodConfig *[]jsonMC RetryThrottling *retryThrottlingPolicy HealthCheckConfig *healthCheckConfig }\",\"客户端代码如下\",\"package main import ( \\\"context\\\" \\\"google.golang.org/grpc\\\" \\\"google.golang.org/grpc/credentials/insecure\\\" \\\"google.golang.org/grpc/resolver\\\" \\\"grpc_learn/helloworld/client/myresolver\\\" hello2 \\\"grpc_learn/helloworld/hello\\\" \\\"log\\\" \\\"time\\\" ) func init() { // 注册builder resolver.Register(myresolver.NewBuilder(map[string][]string{ \\\"myworld\\\": {\\\"127.0.0.1:8080\\\", \\\"127.0.0.1:8081\\\"}, })) } func main() { // 建立连接，没有加密验证 conn, err := grpc.Dial(\\\"hello:myworld\\\", grpc.WithTransportCredentials(insecure.NewCredentials()), ) if err != nil { panic(err) } defer conn.Close() // 创建客户端 client := hello2.NewSayHelloClient(conn) // 每秒调用一次 for range time.Tick(time.Second) { // 远程调用 helloRep, err := client.Hello(context.Background(), &hello2.HelloReq{Name: \\\"client\\\"}) if err != nil { panic(err) } log.Printf(\\\"received grpc resp: %+v\\\", helloRep.String()) } }\",\"正常来说，流程应该是服务端向注册中心注册自身服务，然后客户端从注册中心中获取服务列表然后进行匹配，这里传入的 map 就是一个模拟的注册中心，数据是静态的就省略掉了服务注册这一环节，只剩下服务发现。客户端使用的 target 为hello:myworld ，hello 是自定义的 scheme，myworld 就是服务名，经过自定义的解析器解析后，就得到了 127.0.0.1: 8080 的真实地址，在实际情况中，为了做负载均衡，一个服务名可能会匹配多个真实地址，所以这就是为什么服务名对应的是一个切片，这里开两个服务端，占用不同的端口，负载均衡策略为轮询，服务端输出分别如下，通过请求时间可以看到负载均衡策略确实是在起作用的，如果不指定策略的话默认只选取第一个服务。\",\"// server01 2023/08/29 17:32:21 received grpc req: name:\\\"client\\\" 2023/08/29 17:32:23 received grpc req: name:\\\"client\\\" 2023/08/29 17:32:25 received grpc req: name:\\\"client\\\" 2023/08/29 17:32:27 received grpc req: name:\\\"client\\\" 2023/08/29 17:32:29 received grpc req: name:\\\"client\\\" // server02 2023/08/29 17:32:20 received grpc req: name:\\\"client\\\" 2023/08/29 17:32:22 received grpc req: name:\\\"client\\\" 2023/08/29 17:32:24 received grpc req: name:\\\"client\\\" 2023/08/29 17:32:26 received grpc req: name:\\\"client\\\" 2023/08/29 17:32:28 received grpc req: name:\\\"client\\\"\",\"注册中心其实就是存放着的就是服务注册名与真实服务地址的映射集合，只要是能够进行数据存储的中间件都可以满足条件，甚至拿 mysql 来做注册中心也不是不可以（应该没有人会这么做）。一般来说注册中心都是 KV 存储的，redis 就是一个很不错的选择，但如果使用 redis 来做注册中心的话，我们就需要自行实现很多逻辑，比如服务的心跳检查，服务下线等，服务调度等等，还是相当麻烦的，虽然 redis 在这方面有一定的应用但是较少。正所谓专业的事情交给专业的人做，这方面做的比较出名的有很多：Zookeeper，Consul，Eureka，ETCD，Nacos 等。\",\"可以前往注册中心对比和选型：Zookeeper、Eureka、Nacos、Consul 和 ETCD - 掘金 (juejin.cn) 来了解这几个中间件的一些区别。\"]},\"176\":{\"h\":\"结合 consul\",\"t\":[\"结合 consul 使用的案例可以前往consul\"]},\"177\":{\"h\":\"负载均衡\"},\"178\":{\"h\":\"Kong\",\"t\":[\"文档地址：(konghq.com)\",\"开源地址：Kong/kong: 🦍 The Cloud-Native API Gateway (github.com)\"]},\"179\":{\"h\":\"Protobuf\",\"t\":[\"官网：Protocol Buffers | Google Developers\"]},\"180\":{\"h\":\"介绍\",\"t\":[\"官方教程：Protocol Buffer Basics: Go | Protocol Buffers | Google Developers\",\"Protocol Buffers是谷歌 2008 年开源的语言无关，协议无关，可扩展的结构化数据序列化机制，在解包封包的时候更加的快速，多用于 RPC 领域通信相关，可以定义数据的结构化方式，然后可以使用特殊生成的源代码轻松地将结构化数据写入各种数据流和从各种数据流中读取结构化数据，并使用于各种语言，关于Protocol Buffers下文统称为protobuf。\",\"protobuf算是比较流行，尤其是 go 这一块，gRPC 就将其作为协议传输的序列化机制。\"]},\"181\":{\"h\":\"语法\",\"t\":[\"首先从一个例子来看protobuf文件大体长什么样，总体来说它的语法非常简单，十几分钟就能上手。下面是一个名为search.proto文件的例子，protobuf的文件后缀就是.proto。\",\"syntax = \\\"proto3\\\"; message SearchRequest { string query = 1; string number = 2; } message SearchResult { string data = 1; } service SearchService { rpc Search(SearchRequest) returns(SearchResult); }\",\"第一行syntax = \\\"proto3\\\"; 表示使用proto3的语法，默认使用proto3的语法。\",\"message声明的方式类似于结构体，是proto中的基本结构\",\"SearchRequest中定义了三个字段，每个字段都会有名称和类型\",\"service中定义了一个服务，一个服务中包含一个或多个 rpc 接口\",\"rpc 接口必须要有且只能有一个参数和返回值，它们的类型必须是message，不能是基本类型。\",\"另外需要注意的是，proto文件中的每一行末尾必须要有分号结尾。\"]},\"182\":{\"h\":\"注释\",\"t\":[\"注释风格跟 go 完全一致。\",\"syntax = \\\"proto3\\\"; /* 注释 * 注释 */ message SearchRequest { string query = 1; //注释 string number = 2; }\"]},\"183\":{\"h\":\"类型\",\"t\":[\"类型修饰只能出现在message中，不能单独出现。\"]},\"184\":{\"h\":\"基本类型\",\"t\":[\"proto Type\",\"Go Type\",\"double\",\"float64\",\"float\",\"float32\",\"int32\",\"int32\",\"int64\",\"int64\",\"uint32\",\"uint32\",\"uint64\",\"uint64\",\"sint32\",\"int32\",\"sint64\",\"int64\",\"fixed32\",\"uint32\",\"fixed64\",\"uint64\",\"sfixed32\",\"int32\",\"sfixed64\",\"int64\",\"bool\",\"bool\",\"string\",\"string\",\"bytes\",\"[]byte\"]},\"185\":{\"h\":\"数组\",\"t\":[\"在基本类型前面加上repeated修饰符表示这是一个数组类型，对应 go 中的切片。\",\"message Company { repeated string employee = 1; }\"]},\"186\":{\"h\":\"map\",\"t\":[\"在 protobuf 中定义 map 类型格式如下\",\"map<key_type, value_type> map_field = N;\",\"key_type必须是数字或者字符串，value_type没有类型限制，看一个例子\",\"message Person { map<string, int64> cards = 1; }\"]},\"187\":{\"h\":\"字段\",\"t\":[\"事实上，proto 并不是传统的键值类型，在声明的proto文件中是不会出现具体的数据的，每一次字段的=后面跟的应该是当前message中的唯一编号，这些编号用于在二进制消息体中识别和定义这些字段。编号从 1 开始，1-15 的编号会占用 1 个字节，16-2047 会占用两个字节，因此尽可能的将频繁出现的字段赋予 1-15 的编号以节省空间，并且应该留出一些空间以留给后续可能会频繁出现的字段。\",\"一个message中的字段应当遵循以下规则\",\"singular: 默认是该种类型的字段，在一个结构良好的message中，有且只能由 0 个或者 1 个该字段，即不能重复存在同一个字段。如下声明便会报错。\",\"syntax = \\\"proto3\\\"; message SearchRequest { string query = 1; string number = 2; string number = 3;//字段重复 }\",\"optional: 与singular类似，只是可以显示的检查字段值是否被设置，可能会有以下两种情况\",\"set: 将会被序列化\",\"unset: 不会被序列化\",\"repeated: 此种类型的字段可以出现 0 次或多次，将会按照顺序保留重复值（说白了其实就是数组，可以允许同一个类型的值多次重复出现，并且按照出现的顺序保留，就是索引）\",\"map: 键值对类型的字段，声明方式如下\",\"map<string,int32> config = 3;\"]},\"188\":{\"h\":\"保留字段\",\"t\":[\"reserve关键字可以声明保留字段，保留字段编号声明后，将无法再被用作其他字段的编号和名称，编译时也会发生错误。谷歌官方给出的回答是：，如果一个proto文件在新版本中删除了一些编号，那么在未来其他用户可能会重用这些已被删除的编号，但是倘若换回旧版本的编号的话就会造成字段对应的编号不一致从而产生错误，保留字段就可以在编译期起到这么一个提醒作用，提醒你不能使用这个保留使用的字段，否则编译将会不通过。\",\"syntax = \\\"proto3\\\"; message SearchRequest { string query = 1; string number = 2; map<string, int32> config = 3; repeated string a = 4; reserved \\\"a\\\"; //声明具体名称的字段为保留字段 reserved 1 to 2; //声明一个编号序列为保留字段 reserved 3,4; //声明 }\",\"如此一来，此文件将不会通过编译。\"]},\"189\":{\"h\":\"弃用字段\",\"t\":[\"如果一个字段被弃用，可以如下书写。\",\"message Body { string name = 1 [deprecated = true]; }\"]},\"190\":{\"h\":\"枚举\",\"t\":[\"可以声明枚举常量并将其当作字段的类型来使用，需要注意的是，枚举项的第一个元素必须是零，因为枚举项的默认值就是第一个元素。\",\"syntax = \\\"proto3\\\"; enum Type { GET = 0; POST = 1; PUT = 2; DELETE = 3; } message SearchRequest { string query = 1; string number = 2; map<string, int32> config = 3; repeated string a = 4; Type type = 5; }\",\"当枚举项内部存在相同值的枚举项时，可以使用枚举别名\",\"syntax = \\\"proto3\\\"; enum Type { option allow_alias = true; //需要开启允许使用别名的配置项 GET = 0; GET_ALIAS = 0; //GET枚举项的别名 POST = 1; PUT = 2; DELETE = 3; } message SearchRequest { string query = 1; string number = 2; map<string, int32> config = 3; repeated string a = 4; Type type = 5; }\"]},\"191\":{\"h\":\"嵌套消息\",\"t\":[\"message Outer { // Level 0 message MiddleAA { // Level 1 message Inner { // Level 2 int64 ival = 1; bool booly = 2; } } message MiddleBB { // Level 1 message Inner { // Level 2 int32 ival = 1; bool booly = 2; } } }\",\"message里面可以嵌套声明message，就跟嵌套结构体一样。\"]},\"192\":{\"h\":\"Package\",\"t\":[\"您可以向protobuf文件添加一个可选的包修饰符，以防止协议消息类型之间的名称冲突。\",\"package foo.bar; message Open { ... }\",\"然后，您可以在定义消息类型的字段时使用包名:\",\"message Foo { ... foo.bar.Open open = 1; ... }\"]},\"193\":{\"h\":\"Import\",\"t\":[\"导入可以让多个protobuf文件共享定义，它的语法如下，在导入的时候不能省略文件拓展名。\",\"import \\\"a/b/c.proto\\\";\",\"在导入的时候都是使用的相对路径，这个相对路径不是指的导入文件与被导入文件的相对路径，而是取决于protoc编译器生成代码时所指定的扫描路径，假设有如下的文件结构\",\"pb_learn │ common.proto │ ├─monster │ monster.proto │ └─player health.proto player.proto\",\"如果我们只需要生成player目录部分的代码，并且在扫描路径时仅指定了player目录，那么health.proto与player.proto之间的相互导入可以直接写单文件名，比如player.proto导入health.proto。\",\"import \\\"health.proto\\\";\",\"倘若此时player.proto导入了common.proto或monster目录下的文件，那么就会编译失败，所以下面这种写法是完全错误的，因为编译器没法找到这些文件。\",\"import \\\"../common.proto\\\"; // 错误写法\",\"提示\",\"顺带一提，..，.这些符号是不允许出现在导入路径中的。\",\"假设在编译时指定了pb_learn为扫描路径，那么就可以通过相对路径来导入其它目录的文件，实际导入的路径就是该文件的绝对地址相对于pb_learn的相对地址，看下面player.proto导入其它文件的例子。\",\"import \\\"common.proto\\\"; imrpot \\\"monster/monster.proto\\\"; import \\\"player/health.proto\\\";\",\"即便是处于同一目录下的health.proto此刻也必须要使用相对路径。所以在一个项目中，我们一般会单独创建一个文件夹来存放所有的protobuf文件，并在编译时指定其作为扫描路径，而该目录下的所有导入行为也是基于它的相对路径。\",\"提示\",\"如果你使用的是 goland 编辑器，对于你自己创建的protobuf目录，默认是没法解析的，也就会出现爆红的情况，想要 goland 识别的话就得手动设置扫描路径，其原理跟上面讲的完全一样，设置方法如下，打开如下设置\",\"File | Settings | Languages & Frameworks | Protocol Buffers\",\"在Import Paths中手动添加扫描路径，这个扫描路径应该跟你编译时指定的路径是一致的。\"]},\"194\":{\"h\":\"Any\",\"t\":[\"Any 类型允许您将消息作为嵌入类型使用，而不需要它们的 proto 定义，我们可以直接导入谷歌定义的类型，它是自带的，不需要手动编写。\",\"import \\\"google/protobuf/any.proto\\\"; message ErrorStatus { string message = 1; repeated google.protobuf.Any details = 2; }\",\"谷歌还预定义了其它非常多的类型，前往protobuf/ptypes at master · golang/protobuf (github.com)查看更多，主要有包括\",\"基本类型的封装\",\"时间类型\",\"Duration 类型\",\"有关它们的protobuf定义应该在protoc编译器的inlucde目录下。\"]},\"195\":{\"h\":\"OneOf\",\"t\":[\"这里的官方文档给出的解释实在是太繁琐了，说人话其实就是表示一个字段在传输时会有多种可能的类型，但最终只可能会有一个类型被使用，它的内部不允许出现repeated修饰的字段，这就好像 c 语言中的union一样。\",\"message Stock { // Stock-specific data } message Currency { // Currency-specific data } message ChangeNotification { int32 id = 1; oneof instrument { Stock stock = 2; Currency currency = 3; } }\"]},\"196\":{\"h\":\"Service\",\"t\":[\"service关键字可以定义一个 RPC 服务，一个 RPC 服务包含若干个 rpc 接口，接口又分为一元接口和流式接口。\",\"message Body { string name = 1; } service ExampleService { rpc DoSomething(Body) returns(Body); }\",\"而流式接口又分为单向流式和双向流式，通常用stream关键字来修饰，看下面的一个例子。\",\"message Body { string name = 1; } service ExampleService { // 客户端流式 rpc DoSomething(stream Body) returns(Body); // 服务端流式 rpc DoSomething1(Body) returns(stream Body); // 双向流式 rpc DoSomething2(stream Body) returns(stream Body); }\",\"所谓流式就是就是在一个连接中长期的相互发送数据，而不再像一元接口那样简单的一问一答。\"]},\"197\":{\"h\":\"Empty\",\"t\":[\"empty 实际上是一个空的message，对应 go 中的空结构体，它很少用于修饰字段，主要是用来表示某个 rpc 接口不需要参数或者没有返回值。\",\"syntax = \\\"proto3\\\"; import \\\"google/protobuf/empty.proto\\\"; service EmptyService { rpc Do(google.protobuf.Empty) returns(google.protobuf.Empty); }\"]},\"198\":{\"h\":\"Option\",\"t\":[\"option 通常用于控制protobuf的一些行为。比如控制 go 语言源代码生成的包，就可以如下声明。\",\"option go_package = \\\"github/jack/sample/pb_learn;pb_learn\\\"\",\"分号前面的是代码生成后其它源文件的导入路径，分号后面的就是对应生成文件的包名。\",\"它可以做一些一些优化，有以下几个可用的值，不可重复声明。\",\"SPEED，优化程度最高，生成的代码体积最大，默认是这个。\",\"CODE_SIZE，会减少代码生成的体积，但是会依赖反射进行序列化\",\"LIFE_RUNEIMTE，代码体积最小，但是会缺少一些特性。\",\"下面是一个使用案例\",\"option optimize_for = SPEED;\",\"除此之外，option 还可以给message和enum添加一些元信息，利用反射可以获取这些信息，这在进行参数校验的时候尤其有用。\"]},\"199\":{\"h\":\"编译\",\"t\":[\"编译也就是代码生成，上面只是定义了protobuf文件，实际使用时需要将其转化为某种特定的语言源代码才能使用，我们通过protoc编译器来完成此时，它支持多种语言。\"]},\"200\":{\"h\":\"安装\",\"t\":[\"编译器下载的话到protocolbuffers/protobuf: Protocol Buffers - Google's data interchange format (github.com)去下载最新版的 Release，一般是一个压缩文件\",\"protoc-25.1-win64 │ readme.txt │ ├─bin │ protoc.exe │ └─include └─google └─protobuf │ any.proto │ api.proto │ descriptor.proto │ duration.proto │ empty.proto │ field_mask.proto │ source_context.proto │ struct.proto │ timestamp.proto │ type.proto │ wrappers.proto │ └─compiler plugin.proto\",\"下载好后将 bin 目录添加到环境变量中，以便可以使用protoc命令，完成后看下版本，能正常输出就说明安装成功\",\"$ protoc --version libprotoc 25.1\",\"下载下来的编译器默认不支持 go 语言，因为 go 语言代码生成是单独的一个可执行文件，其它语言全揉一块了，所以再安装 go 语言插件，用于将protocbuf定义翻译成 go 语言源代码。\",\"$ go install google.golang.org/protobuf/cmd/protoc-gen-go@latest\",\"假如还需要生成 gRPC 服务代码，再安装如下插件\",\"$ go install google.golang.org/grpc/cmd/protoc-gen-go-grpc@latest\",\"安装后查看其版本\",\"$ protoc-gen-go-grpc --version protoc-gen-go-grpc 1.3.0 $ protoc-gen-go --version protoc-gen-go.exe v1.31.0\",\"这些插件也是单独的二进制文件，不过只能通过protoc来调用，不能单独执行。\",\"(this program should be run by protoc, not directly)\",\"除此之外还有许多其它插件，比如生成openapi接口文档的插件等等，感兴趣可以自己去搜索。\"]},\"201\":{\"h\":\"生成\",\"t\":[\"还是拿之前的例子来讲，结构如下\",\"pb_learn │ common.proto │ ├─monster │ monster.proto │ └─player health.proto player.proto\",\"对于生成代码来说，总共要指定三个参数\",\"扫描路径，指示编译器从哪里寻找protobuf文件以及如何解析导入路径\",\"生成路径，编译好后的文件放在哪里\",\"目标文件，指定哪些目标文件要被编译。\",\"在开始之前要确保protobuf文件中的go_package设置正确，通过protoc -h来查看其支持的参数，最常用的是-I或者--proto_path，可以多次使用来指定多个扫描路径，例如\",\"$ protoc --proto_path=./pb_learn --proto_path=./third_party\",\"仅仅只是指定扫描路径是不够的，还需要指定生成路径以及目标protobuf文件，这里是生成go文件所以使用--go_out参数，由之前下载的protoc-gen-go插件支持。\",\"$ cd pb_learn $ protoc --proto_path=. --go_out=. common.proto $ ls common.pb.go common.proto monster/ player/\",\"--go_out的参数就是指定的生成路径，.表示的就是当前路径，common.proto就是指定要编译的文件。如果要生成grpc代码（前提是装了 grpc 插件），可以加上--go-grpc_out参数（如果protobuf文件中没有定义service，就不会生成对应文件）。\",\"$ protoc --proto_path=. --go_out=. --go-grpc_out=. common.proto $ ls common.pb.go common.proto common_grpc.pb.go monster/ player/\",\"common.pb.go是生成的protobuf类型定义，common_grpc.pb.go是生成的gRPC代码，它基于前者，如果没有生成对应语言的定义，也就没法生成gRPC代码。\",\"如果想要将该目录下的所有的protobuf文件都编译，可以使用通配符*，比如``\",\"$ protoc --proto_path=. --go_out=.. common.proto --go-grpc_out=. ./*.proto\",\"如果想要包含所有的文件，可以使用**通配符，比如./**/*.proto。\",\"$ protoc --proto_path=. --go_out=.. common.proto --go-grpc_out=. ./*.proto\",\"但是，这种方法仅适用于支持这种通配符的 shell，比如在 windows 下，cmd 或 powershell 都不支持这种写法\",\"D> protoc --proto_path=. --go_out=.. common.proto --go-grpc_out=. ./**/*.proto Invalid file name pattern or missing input file \\\"./**/*.proto\\\"\",\"幸运的是 gitbash 支持 linux 许多命令，也可以让 windows 支持这种语法。为了避免每次都要写重复的命令，可以将其放在makefile里面\",\".PHONY: all proto_gen: protoc --proto_path=. \\\\ --go_out=paths=source_relative:. \\\\ --go-grpc_out=paths=source_relative:. \\\\ ./**/*.proto ./*.proto\",\"可以注意到多了一个paths=source_relative:.，这是在设置文件生成的路径模式，总共有以下几个可选项\",\"paths=import，默认就是这个，文件会生成在import所指定的目录下，它也可以是一个模块路径。比如现有一个文件protos/buzz.proto，指定paths=example.com/project/protos/fizz，那么最终会生成example.com/project/protos/fizz/buzz.pb.go。\",\"module=$PREFIX，在生成时，会删除路径前缀。在上面的例子中，如果指定前缀example.com/project，那么最终会生成protos/fizz/buzz.pb.go，这个模式主要是用于将其直接生成在模块中（感觉好像没什么区别）。\",\"paths=source_relative，生成的文件会在指定目录中保持与protobuf文件相同的相对结构。\",\"冒号:间隔后就是指定的生成路径。\",\"| common.proto | common.pb.go │ ├─monster │ monster.pb.go │ monster.proto │ └─player health.pb.go health.proto health_grpc.pb.go player.pb.go player.proto\"]},\"202\":{\"h\":\"反射\",\"t\":[\"通过options可以对enum和messagee进行拓展，先导入\\\"google/protobuf/descriptor.proto\\\"\",\"import \\\"google/protobuf/descriptor.proto\\\"; extend google.protobuf.EnumValueOptions { optional string string_name = 123456789; } enum Integer { INT64 = 0[ (string_name) = \\\"int_64\\\" ]; }\",\"这相当于给该枚举值加了一个元信息。对于message也是同理，如下\",\"import \\\"google/protobuf/descriptor.proto\\\"; extend google.protobuf.MessageOptions { optional string my_option = 51234; } message MyMessage { option (my_option) = \\\"Hello world!\\\"; }\",\"这就相当是有关于protobuf的反射，在生成代码后可以通过Descriptor来进行访问，如下\",\"func main() { message := pb_learn.MyMessage{} message.ProtoReflect().Descriptor().Options().ProtoReflect().Range(func(descriptor protoreflect.FieldDescriptor, value protoreflect.Value) bool { fmt.Println(descriptor.FullName(), \\\":\\\", value) return true }) }\",\"输出\",\"my_option:\\\"Hello world!\\\"\",\"这种方式可以类比一下 go 中给结构体加 tag，都是差不的感觉，根据这种方式还能实现参数校验的功能，只需要在options中书写规则，通过Descriptor来进行检查。\"]},\"203\":{\"h\":\"ElasticSearch\",\"t\":[\"官方网址：Elasticsearch：官方分布式搜索和分析引擎 | Elastic\",\"Elasticsearch 是一个分布式、RESTful 风格的搜索和数据分析引擎，能够解决不断涌现出的各种用例。作为 Elastic Stack 的核心，Elasticsearch 会集中存储您的数据，让您飞快完成搜索，微调相关性，进行强大的分析，并轻松缩放规模。本文会讲解如何用 Go 来进行对 Elastisearch 的一些基本操作，比如增删改查之类的，如果你对 Elasticsearch 并不了解，请先自行学习。\"]},\"204\":{\"h\":\"依赖\",\"t\":[\"下载官方的依赖库\",\"$ github.com/elastic/go-elasticsearch/v7\",\"如果你是 ES8，就换个版本\",\"$ github.com/elastic/go-elasticsearch/v8\",\"提示\",\"本文用 ES8 来进行演示\"]},\"205\":{\"h\":\"连接\",\"t\":[\"使用函数elasticsearch.NewClient来建立一个新的连接\",\"func NewClient(cfg Config) (*Client, error)\",\"ES8+默认使用 HTTPS 连接了，在建立 HTTPS 连接时，要么使用 CA 证书，要么用 CA 指纹，两者都是在 Elaticsearch 服务端生成的，一个例子如下\",\"client, err := elasticsearch.NewClient(elasticsearch.Config{ Addresses: []string{\\\"https://192.168.153.132:9200\\\"}, Username: \\\"elastic\\\", Password: \\\"TETJ8IY+ifbt8SLc+RRQ\\\", CertificateFingerprint: \\\"C0E9867C7D446BFF72FE46E7E9FE3455E970A8ADB0D3DF0E1472D55DB2612CD5\\\", })\",\"elasticsearch提供的 Go API 基本上都是选项式函数，比如通过 ping API 测试服务是否可以用\",\"pingResp, err := client.Ping(client.Ping.WithPretty(), client.Ping.WithHuman()) if err != nil { panic(err) } fmt.Println(pingResp)\",\"输出\",\"[200 OK]\",\"再比如，通过 Info API 查看服务状态\",\"infoResp, err := client.Info(client.Info.WithHuman()) if err != nil { panic(err) } fmt.Println(infoResp)\",\"输出\",\"[200 OK] { \\\"name\\\" : \\\"db-debian12\\\", \\\"cluster_name\\\" : \\\"docker-cluster\\\", \\\"cluster_uuid\\\" : \\\"OMbDIsNwTFiuyjNF9Xnpbw\\\", \\\"version\\\" : { \\\"number\\\" : \\\"8.15.0\\\", \\\"build_flavor\\\" : \\\"default\\\", \\\"build_type\\\" : \\\"docker\\\", \\\"build_hash\\\" : \\\"1a77947f34deddb41af25e6f0ddb8e830159c179\\\", \\\"build_date\\\" : \\\"2024-08-05T10:05:34.233336849Z\\\", \\\"build_snapshot\\\" : false, \\\"lucene_version\\\" : \\\"9.11.1\\\", \\\"minimum_wire_compatibility_version\\\" : \\\"7.17.0\\\", \\\"minimum_index_compatibility_version\\\" : \\\"7.0.0\\\" }, \\\"tagline\\\" : \\\"You Know, for Search\\\" }\",\"提示\",\"有关 ES API 的任何问题，请查阅官方文档ES Restful API。\"]},\"206\":{\"h\":\"索引\",\"t\":[\"通过 go api 操作索引，所有关于索引操作的 API 都位于esapi.Indices结构体中\",\"// Indices contains the Indices APIs type Indices struct { AddBlock IndicesAddBlock Analyze IndicesAnalyze ClearCache IndicesClearCache Clone IndicesClone Close IndicesClose ... ... ValidateQuery IndicesValidateQuery }\"]},\"207\":{\"h\":\"创建\",\"t\":[\"创建一个索引，如下所示\",\"{ \\\"settings\\\": { \\\"number_of_shards\\\": 3, \\\"number_of_replicas\\\": 2 }, \\\"mappings\\\": { \\\"properties\\\": { \\\"name\\\": { \\\"type\\\": \\\"text\\\" }, \\\"age\\\": { \\\"type\\\": \\\"long\\\" }, \\\"salary\\\": { \\\"type\\\": \\\"double\\\" } } } }\",\"实际操作，就跟发 HTTP 请求一样差不多\",\"func main() { client, err := newClient() if err != nil { panic(err) } dsl := bytes.NewBufferString(`{ \\\"settings\\\": { \\\"number_of_shards\\\": 3, \\\"number_of_replicas\\\": 2 }, \\\"mappings\\\": { \\\"properties\\\": { \\\"name\\\": { \\\"type\\\": \\\"text\\\" }, \\\"age\\\": { \\\"type\\\": \\\"long\\\" }, \\\"salary\\\": { \\\"type\\\": \\\"double\\\" } } } }`) createIndices := client.Indices.Create resp, err := createIndices(\\\"user\\\", createIndices.WithBody(dsl)) if err != nil { panic(err) } fmt.Println(resp) }\",\"输出\",\"[200 OK] {\\\"acknowledged\\\":true,\\\"shards_acknowledged\\\":true,\\\"index\\\":\\\"user\\\"}\"]},\"208\":{\"h\":\"获取\",\"t\":[\"获取若干个索引的信息\",\"func main() { client, err := newClient() if err != nil { panic(err) } get := client.Indices.Get response, err := get([]string{\\\"user\\\"}, get.WithPretty(), get.WithHuman()) if err != nil { panic(err) } fmt.Println(response) }\",\"输出\",\"[200 OK] { \\\"user\\\" : { \\\"aliases\\\" : { }, \\\"mappings\\\" : { \\\"properties\\\" : { \\\"age\\\" : { \\\"type\\\" : \\\"long\\\" }, \\\"name\\\" : { \\\"type\\\" : \\\"text\\\" }, \\\"salary\\\" : { \\\"type\\\" : \\\"double\\\" } } }, \\\"settings\\\" : { \\\"index\\\" : { \\\"creation_date_string\\\" : \\\"2024-09-23T04:35:04.528Z\\\", \\\"routing\\\" : { \\\"allocation\\\" : { \\\"include\\\" : { \\\"_tier_preference\\\" : \\\"data_content\\\" } } }, \\\"number_of_shards\\\" : \\\"3\\\", \\\"provided_name\\\" : \\\"user\\\", \\\"creation_date\\\" : \\\"1727066104528\\\", \\\"number_of_replicas\\\" : \\\"2\\\", \\\"uuid\\\" : \\\"AvhhuqV2ShGkRP9z7XbdDA\\\", \\\"version\\\" : { \\\"created_string\\\" : \\\"8.14.4-snapshot[8512000]\\\", \\\"created\\\" : \\\"8512000\\\" } } } } }\"]},\"209\":{\"h\":\"分析\",\"t\":[\"针对指定索引对文本字符串进行分析，并返回结果，文本如下\",\"{ \\\"analyzer\\\": \\\"standard\\\", \\\"text\\\": [\\\"this is a test\\\", \\\"the second text\\\"] }\",\"代码\",\"func main() { client, err := newClient() if err != nil { panic(err) } analyze := client.Indices.Analyze dsl := bytes.NewBufferString(`{ \\\"analyzer\\\" : \\\"standard\\\", \\\"text\\\" : [\\\"this is a test\\\", \\\"the second text\\\"] }`) response, err := analyze(analyze.WithIndex(\\\"user\\\"), analyze.WithBody(dsl), analyze.WithPretty(), analyze.WithHuman()) if err != nil { panic(err) } fmt.Println(response) }\",\"输出\",\"[200 OK] { \\\"tokens\\\" : [ { \\\"token\\\" : \\\"this\\\", \\\"start_offset\\\" : 0, \\\"end_offset\\\" : 4, \\\"type\\\" : \\\"<ALPHANUM>\\\", \\\"position\\\" : 0 }, { \\\"token\\\" : \\\"is\\\", \\\"start_offset\\\" : 5, \\\"end_offset\\\" : 7, \\\"type\\\" : \\\"<ALPHANUM>\\\", \\\"position\\\" : 1 }, { \\\"token\\\" : \\\"a\\\", \\\"start_offset\\\" : 8, \\\"end_offset\\\" : 9, \\\"type\\\" : \\\"<ALPHANUM>\\\", \\\"position\\\" : 2 }, { \\\"token\\\" : \\\"test\\\", \\\"start_offset\\\" : 10, \\\"end_offset\\\" : 14, \\\"type\\\" : \\\"<ALPHANUM>\\\", \\\"position\\\" : 3 }, { \\\"token\\\" : \\\"the\\\", \\\"start_offset\\\" : 15, \\\"end_offset\\\" : 18, \\\"type\\\" : \\\"<ALPHANUM>\\\", \\\"position\\\" : 104 }, { \\\"token\\\" : \\\"second\\\", \\\"start_offset\\\" : 19, \\\"end_offset\\\" : 25, \\\"type\\\" : \\\"<ALPHANUM>\\\", \\\"position\\\" : 105 }, { \\\"token\\\" : \\\"text\\\", \\\"start_offset\\\" : 26, \\\"end_offset\\\" : 30, \\\"type\\\" : \\\"<ALPHANUM>\\\", \\\"position\\\" : 106 } ] }\"]},\"210\":{\"h\":\"删除\",\"t\":[\"删除若干个指定的索引\",\"func main() { client, err := newClient() if err != nil { panic(err) } indicesDelete := client.Indices.Delete response, err := indicesDelete([]string{\\\"user\\\"}) if err != nil { panic(err) } fmt.Println(response) }\",\"输出\",\"[200 OK] {\\\"acknowledged\\\":true}\",\"在上面这些 API 中，可以看到请求体是需要自己手动序列化的，官方并没有映射成 Go 结构体，响应体也是需要自己手动处理的。这些是比较常用的 API，其他的使用起来都大差不差，没有太大区别。\"]},\"211\":{\"h\":\"文档\"},\"212\":{\"h\":\"创建\",\"t\":[\"创建一个如下的文档\",\"{ \\\"name\\\": \\\"jack\\\", \\\"age\\\": 12, \\\"salary\\\": 5701.1 }\",\"代码\",\"func main() { client, err := newClient() if err != nil { panic(err) } doc := bytes.NewBufferString(`{ \\\"name\\\": \\\"jack\\\", \\\"age\\\": 12, \\\"salary\\\": 5701.1 }`) create := client.Create response, err := create(\\\"user\\\", \\\"1\\\", doc, create.WithPretty()) if err != nil { panic(err) } fmt.Println(response) }\",\"输出\",\"[201 Created] { \\\"_index\\\" : \\\"user\\\", \\\"_id\\\" : \\\"1\\\", \\\"_version\\\" : 1, \\\"result\\\" : \\\"created\\\", \\\"_shards\\\" : { \\\"total\\\" : 3, \\\"successful\\\" : 1, \\\"failed\\\" : 0 }, \\\"_seq_no\\\" : 0, \\\"_primary_term\\\" : 1 }\"]},\"213\":{\"h\":\"获取\",\"t\":[\"获取一个指定 ID 的文档\",\"func main() { client, err := newClient() if err != nil { panic(err) } get := client.Get response, err := get(\\\"user\\\", \\\"1\\\", get.WithPretty()) if err != nil { panic(err) } fmt.Println(response) }\",\"输出\",\"[200 OK] { \\\"_index\\\" : \\\"user\\\", \\\"_id\\\" : \\\"1\\\", \\\"_version\\\" : 1, \\\"_seq_no\\\" : 0, \\\"_primary_term\\\" : 1, \\\"found\\\" : true, \\\"_source\\\" : { \\\"name\\\" : \\\"jack\\\", \\\"age\\\" : 12, \\\"salary\\\" : 5701.1 } }\"]},\"214\":{\"h\":\"更新\",\"t\":[\"更新文档内容\",\"{ \\\"doc\\\": { \\\"name\\\": \\\"jack\\\", \\\"age\\\": 35, \\\"salary\\\": 5701.1 } }\",\"代码\",\"func main() { client, err := newClient() if err != nil { panic(err) } doc := bytes.NewBufferString(`{ \\\"doc\\\": { \\\"name\\\": \\\"jack\\\", \\\"age\\\": 35, \\\"salary\\\": 5701.1 }}`) update := client.Update response, err := update(\\\"user\\\", \\\"1\\\", doc, update.WithPretty()) if err != nil { panic(err) } fmt.Println(response) }\",\"输出\",\"[200 OK] { \\\"_index\\\" : \\\"user\\\", \\\"_id\\\" : \\\"1\\\", \\\"_version\\\" : 2, \\\"result\\\" : \\\"updated\\\", \\\"_shards\\\" : { \\\"total\\\" : 3, \\\"successful\\\" : 1, \\\"failed\\\" : 0 }, \\\"_seq_no\\\" : 1, \\\"_primary_term\\\" : 1 }\",\"Update API 还可以支持 script 实现 upsert 等之类的操作，前往Update API了解更多信息。\"]},\"215\":{\"h\":\"删除\",\"t\":[\"通过 ID 删除一个指定的文档\",\"func main() { client, err := newClient() if err != nil { panic(err) } deleteDoc := client.Delete response, err := deleteDoc(\\\"user\\\", \\\"1\\\", deleteDoc.WithPretty()) if err != nil { panic(err) } fmt.Println(response) }\",\"输出\",\"[200 OK] { \\\"_index\\\" : \\\"user\\\", \\\"_id\\\" : \\\"1\\\", \\\"_version\\\" : 3, \\\"result\\\" : \\\"deleted\\\", \\\"_shards\\\" : { \\\"total\\\" : 3, \\\"successful\\\" : 1, \\\"failed\\\" : 0 }, \\\"_seq_no\\\" : 2, \\\"_primary_term\\\" : 1 }\"]},\"216\":{\"h\":\"搜索\",\"t\":[\"ES API 最常用的就是搜索 API，下面会简单演示用法，先准备数据。\",\"func main() { client, err := newClient() if err != nil { panic(err) } for i := range 10 { doc := bytes.NewBufferString(fmt.Sprintf(`{ \\\"name\\\": \\\"%s\\\", \\\"age\\\": %d, \\\"salary\\\": %f }`, randomName(), rand.Intn(18)+18, rand.Float64())) create := client.Create response, err := create(\\\"user\\\", string('0'+i), doc, create.WithPretty()) if err != nil { panic(err) } fmt.Println(response) } } func randomName() string { var b []byte for range 10 { b = append(b, byte(rand.Intn(26)+'a')) } return string(b) }\",\"搜索 API 就跟平时 HTTP API 用起来完全一样。\",\"查询所有文档\",\"func main() { client, err := newClient() if err != nil { panic(err) } dsl := bytes.NewBufferString(`{\\\"query\\\": {\\\"match_all\\\":{}}, \\\"size\\\": 1}`) search := client.Search response, err := search(search.WithBody(dsl), search.WithPretty()) if err != nil { panic(err) } fmt.Println(response) }\",\"匹配某一字段\",\"func main() { client, err := newClient() if err != nil { panic(err) } dsl := bytes.NewBufferString(`{\\\"query\\\": {\\\"term\\\":{ \\\"age\\\": 22 } }, \\\"size\\\": 1}`) search := client.Search response, err := search(search.WithBody(dsl), search.WithPretty()) if err != nil { panic(err) } fmt.Println(response) }\"]},\"217\":{\"h\":\"小结\",\"t\":[\"基础操作差不多就是这些，用起来跟 HTTP API 完全一样，把 ES 学会了，操作 Go API 完全没问题，像一些比较高级的操作比如cluster，data stream等之类的 API，就请自行探索。\"]},\"218\":{\"h\":\"MongoDB\",\"t\":[\"MongoDB 是一个文档数据库，它的基本数据单位就是文档，存储格式是 BSON（Binary JSON）一种类似 JSON 的结构，松散的结构可以存储不同类型的数据，相较于关系数据库更为灵活，并且使用 js 作为脚本语言，可以通过脚本来完成组合操作。本文主要介绍使用在 Go 中使用官方的 mongo 驱动操作 mongodb 数据库，并不是 mongodb 教程，如果你没有 mongo 基础，请先自行了解和学习。\",\"mongodb 文档：Introduction to MongoDB — MongoDB Manual\"]},\"219\":{\"h\":\"驱动\",\"t\":[\"mongodb 在 go 这方面的库比较少，早期有些社区维护的库，后面都停止维护了，不过官方的 mongo 驱动库已经完全足够使用了。\",\"开源仓库：mongodb/mongo-go-driver: The Official Golang driver for MongoDB (github.com)\",\"文档地址：mongodb/mongo-go-driver: The Official Golang driver for MongoDB (github.com)\"]},\"220\":{\"h\":\"安装\",\"t\":[\"下载依赖的话使用下面的地址就行了。\",\"$ go get go.mongodb.org/mongo-driver/mongo\"]},\"221\":{\"h\":\"连接\",\"t\":[\"下面是一个简单的 mongo 客户端与服务端建立连接的例子。\",\"package main import ( \\\"context\\\" \\\"fmt\\\" \\\"go.mongodb.org/mongo-driver/mongo\\\" \\\"go.mongodb.org/mongo-driver/mongo/options\\\" \\\"go.mongodb.org/mongo-driver/mongo/readpref\\\" \\\"log\\\" ) func main() { ctx := context.Background() // 使用URI建立连接 client, err := mongo.Connect(ctx, options.Client().ApplyURI(\\\"mongodb://admin:123456@192.168.48.138:27017/\\\")) if err != nil { log.Panicln(err) } // 关闭连接 defer client.Disconnect(ctx) // ping测试连接是否可用 fmt.Println(client.Ping(ctx, readpref.Primary())) }\"]},\"222\":{\"h\":\"bson\",\"t\":[\"mongodb 在 go 里面使用了以下几种类型来映射数据库中的文档，位于bson/bson.go\",\"// BSON文档的有序表示 type D = primitive.D // 一对键值，BSON文档的有序表示的基本单位 type E = primitive.E // BSON文档的无序表示 type M = primitive.M // BSON数据的有序表示 type A = primitive.A\",\"它们的实际类型如下\",\"// BSON文档的有序表示 type D []E // 一对键值，BSON文档的有序表示的基本单位 type E struct { Key string Value interface{} } // BSON文档的无序表示 type M map[string]interface{} // BSON数据的有序表示 type A []interface{}\",\"通过以上几种类型，即可以构造查询 SQL，也可以用来映射数据。\",\"提示\",\"驱动 examples 目录下有着相当多的使用示例，官方非常详细的演示了如何使用上述四种类型。\",\"地址：mongo-go-driver/examples/documentation_examples/examples.go at master · mongodb/mongo-go-driver (github.com)\"]},\"223\":{\"h\":\"查询文档\",\"t\":[\"官方查询示例：mongo-go-driver/examples/documentation_examples/examples.go at master · mongodb/mongo-go-driver (github.com)\",\"首先创建 user 数据库，向集合 users 插入如下数据\",\"> use user > db.users.insertMany([ { name: \\\"mike\\\", age: 12, }, { name: \\\"jenny\\\", age: 14, }, { name: \\\"jack\\\", age: 18, address: \\\"usa\\\" } ])\"]},\"224\":{\"h\":\"查询单个\",\"t\":[\"type User struct { Name string `bson:\\\"name\\\"` Age int `bson:\\\"age\\\"` Address string `bson:\\\"address\\\"` } var user User result := client.Database(\\\"user\\\"). // 选中数据库 Collection(\\\"users\\\"). // 选中集合 FindOne(ctx, bson.D{{\\\"address\\\", \\\"usa\\\"}}) // 过滤条件 // 反序列化 if err := result.Decode(&user); err != nil { log.Panicln(err) } fmt.Printf(\\\"%+v\\\\n\\\", user)\",\"上面那段查询代码等价于\",\"db.users.findOne({ address: \\\"usa\\\" })\",\"输出结果\",\"{Name:jack Age:18 Address:usa}\"]},\"225\":{\"h\":\"查询多个\",\"t\":[\"type User struct { Name string `bson:\\\"name\\\"` Age int `bson:\\\"age\\\"` Address string `bson:\\\"address\\\"` } var users []User cursor, err := client.Database(\\\"user\\\"). // 选中数据库 Collection(\\\"users\\\"). // 选中集合 Find(ctx, bson.D{}) // 过滤条件 if err != nil { log.Panicln(err) } if err := cursor.All(ctx, &users); err != nil { log.Panicln(err) } fmt.Printf(\\\"%+v\\\\n\\\", users)\",\"等价于\",\"db.users.find({})\",\"输出\",\"[{Name:jack Age:18 Address:usa} {Name:mike Age:12 Address:} {Name:jenny Age:14 Address:}]\",\"在构造查询条件的时候，也可以使用 options\",\"type User struct { Name string `bson:\\\"name\\\"` Age int `bson:\\\"age\\\"` Address string `bson:\\\"address\\\"` } var users []User find := options.Find() find.SetSort(bson.M{\\\"age\\\": 1}) find.SetLimit(1) cursor, err := client.Database(\\\"user\\\"). // 选中数据库 Collection(\\\"users\\\"). // 选中集合 Find(ctx, bson.D{}, find) // 过滤条件 if err != nil { log.Panicln(err) } if err := cursor.All(ctx, &users); err != nil { log.Panicln(err) } fmt.Printf(\\\"%+v\\\\n\\\", users)\",\"等价于\",\"db.users.find({}).sort({age:1}).limit(1)\",\"输出\",\"[{Name:mike Age:12 Address:}]\"]},\"226\":{\"h\":\"创建文档\",\"t\":[\"官方创建实例：mongo-go-driver/examples/documentation_examples/examples.go at master · mongodb/mongo-go-driver (github.com)\",\"下面是创建一个文档的例子\",\"one, err := client.Database(\\\"user\\\").Collection(\\\"users\\\").InsertOne(ctx, User{ Name: \\\"lili\\\", Age: 20, Address: \\\"china\\\", }) if err != nil { log.Panicln(err) } fmt.Println(one.InsertedID)\",\"创建成功后会返回文档的 ObjectID\",\"ObjectID(\\\"64c60fa01e2548d9e4de6cf4\\\")\",\"下面是创建多个文档的例子\",\"users := []any{User{ Name: \\\"john\\\", Age: 10, Address: \\\"usa\\\", }, User{ Name: \\\"pop\\\", Age: 30, Address: \\\"uk\\\", }} one, err := client.Database(\\\"user\\\").Collection(\\\"users\\\").InsertMany(ctx, users) if err != nil { log.Panicln(err) } fmt.Println(one.InsertedIDs)\",\"创建成功后返回返回一组 ObjectID\",\"[ObjectID(\\\"64c610d5aec2618d6ca0b515\\\") ObjectID(\\\"64c610d5aec2618d6ca0b516\\\")]\",\"上面两段代码就等价于db.users.insertOne和db.users.insertMany。\"]},\"227\":{\"h\":\"更新文档\",\"t\":[\"官方更新示例：mongo-go-driver/examples/documentation_examples/examples.go at master · mongodb/mongo-go-driver (github.com)\",\"下面是更新单个文档的示例，将名为 lili 人更名为 mark\",\"upres, err := client.Database(\\\"user\\\").Collection(\\\"users\\\").UpdateOne(ctx, bson.D{ {\\\"name\\\", \\\"mark\\\"}, }, bson.D{ {\\\"$set\\\", bson.D{ {\\\"name\\\", \\\"lili\\\"}, }}, }) if err != nil { log.Panicln(err) } fmt.Printf(\\\"%+v\\\", upres)\",\"等价于\",\"db.users.updateOne({ name: \\\"lili\\\" }, { $set: { name: \\\"mark\\\" }, })\",\"输出\",\"&{MatchedCount:1 ModifiedCount:1 UpsertedCount:0 UpsertedID:<nil>}\",\"下面是更新多个文档的示例，将年龄为 10 的人地址更新为 cn\",\"upres, err := client.Database(\\\"user\\\").Collection(\\\"users\\\").UpdateMany(ctx, bson.D{ {\\\"age\\\", 10}, }, bson.D{ {\\\"$set\\\", bson.D{ {\\\"address\\\", \\\"cn\\\"}, }}, }) if err != nil { log.Panicln(err) } fmt.Printf(\\\"%+v\\\", upres)\",\"除了使用Update，mongo 还提供了Replace，两者的区别在于前者是更新文档字段，后者是直接替换文档。例如下面的代码，就不再需要操作符了。\",\"upres, err := client.Database(\\\"user\\\").Collection(\\\"users\\\").ReplaceOne(ctx, bson.D{ {\\\"age\\\", 10}, }, bson.D{ {\\\"address\\\", \\\"cn\\\"}, }) if err != nil { log.Panicln(err) } fmt.Printf(\\\"%+v\\\", upres)\",\"同时 mongo 还提供了FindOneAndUpdate和FindOneAndReplace来获取文档和更新文档。如下\",\"res := client.Database(\\\"user\\\").Collection(\\\"users\\\").FindOneAndReplace(ctx, bson.D{ {\\\"address\\\", \\\"cn\\\"}, }, bson.D{ {\\\"address\\\", \\\"uk\\\"}, }) if err := res.Err(); err != nil { log.Panicln(err) } var user User res.Decode(&user) fmt.Printf(\\\"%+v\\\", user)\",\"输出\",\"Name: Age:0 Address:cn}\",\"此操作会先查询文档再进行修改文档。\"]},\"228\":{\"h\":\"删除文档\",\"t\":[\"官方删除示例：mongo-go-driver/examples/documentation_examples/examples.go at master · mongodb/mongo-go-driver (github.com)\",\"下面是删除一个文档的例子\",\"result, err := client.Database(\\\"user\\\").Collection(\\\"users\\\").DeleteOne(ctx, bson.D{ {\\\"name\\\", \\\"jack\\\"}, }) if err != nil { log.Panicln(err) } fmt.Println(result.DeletedCount)\",\"下面是删除多个文档的例子\",\"result, err := client.Database(\\\"user\\\").Collection(\\\"users\\\").DeleteMany(ctx, bson.D{ {\\\"age\\\", \\\"10\\\"}, }) if err != nil { log.Panicln(err) } fmt.Println(result.DeletedCount)\"]},\"229\":{\"h\":\"聚合\",\"t\":[\"官方聚合示例：mongo-go-driver/examples/documentation_examples/examples.go at master · mongodb/mongo-go-driver (github.com)\",\"聚合操作会用到mongo.Pipeline类型，它的本质是[]bson.D\",\"type Pipeline []bson.D\",\"pipline := mongo.Pipeline{ { {\\\"$match\\\", bson.D{ {\\\"address\\\", \\\"uk\\\"}, }}, }, { {\\\"$sort\\\", bson.D{ {\\\"age\\\", 1}, }}, }, } aggregate, err := client.Database(\\\"user\\\").Collection(\\\"users\\\").Aggregate(ctx, pipline) if err != nil { log.Panicln(err) } var users []User if err := aggregate.All(ctx, &users); err != nil { log.Panicln(err) } log.Println(users)\",\"输出\",\"[{lili 20 uk} {kak 30 uk}]\",\"这段聚合操作就是匹配所有 address 为 uk 的用户，然后按照年龄排序。\"]},\"230\":{\"h\":\"MySQL\",\"t\":[\"Mysql 是当下最流行的开源关系型数据库，具体的 sql 知识这里不会做过多的赘述，如果你不会请先自行学习，本文只是简单讲解如何利用 go 进行 sql 操作。在项目中的话一般不会直接使用驱动来进行数据库操作，而是会使用 ORM 框架，这里使用的是sqlx库，是对标准sql库的增强，没有 ORM 功能那么丰富但是胜在简洁。如果你想使用 ORM，可以去了解Gorm，Xorm，Ent这些库。\"]},\"231\":{\"h\":\"依赖\",\"t\":[\"下载sqlx库\",\"$ go get github.com/jmoiron/sqlx\",\"sqlx或者说标准库database/sql支持的数据库不止 MySQL，任何实现了driver.Driver接口的类型都支持，比如：\",\"PostgreSQL\",\"Oracle\",\"MariaDB\",\"SQLite\",\"等其他关系数据库\",\"要使用对应的数据库，就需要实现数据库驱动，驱动可以是你自己写的，也可以是第三方库，在使用之前你就要先使用sql.Register注册驱动，然后才能使用。不过一般下载的驱动库都会自动注册驱动，不需要你来手动注册。\",\"func Register(name string, driver driver.Driver)\",\"由于 MySQL 比较流行，也最为简单，所以本文采用 MySQL 来讲解，其他关系数据库操作起来都是大差不大差的，下载 MySQL 驱动库\",\"$ go get github.com/go-sql-driver/mysql\"]},\"232\":{\"h\":\"连接到数据库\",\"t\":[\"通过sqlx.Open函数，就可以打开一个数据库连接，它接受两个参数，第一个是驱动名称，第二个就是数据源（一般简称 DSN）。\",\"func Open(driverName, dataSourceName string) (*DB, error)\",\"驱动名称就是注册驱动时使用的名称，需要保持一致，DSN 就是数据库的连接地址，每种数据库都可能会不一样，对于 MySQL 而言就是下面这样\",\"db,err := sqlx.Open(\\\"mysql\\\",\\\"root:123456@tcp(127.0.0.1:3306)/test\\\")\"]},\"233\":{\"h\":\"准备数据\",\"t\":[\"SET NAMES utf8mb4; SET FOREIGN_KEY_CHECKS = 0; -- ---------------------------- -- Table structure for user -- ---------------------------- DROP TABLE IF EXISTS `user`; CREATE TABLE `user` ( `id` varchar(20) CHARACTER SET utf8mb4 COLLATE utf8mb4_bin NOT NULL, `name` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_bin NULL DEFAULT NULL, `age` tinyint(0) NULL DEFAULT NULL, `address` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_bin NULL DEFAULT NULL, PRIMARY KEY (`id`) USING BTREE ) ENGINE = InnoDB CHARACTER SET = utf8mb4 COLLATE = utf8mb4_bin ROW_FORMAT = Dynamic; -- ---------------------------- -- Records of user -- ---------------------------- INSERT INTO `user` VALUES ('12132', '张三', 35, '北京市'); INSERT INTO `user` VALUES ('16162', '王五', 22, '上海市'); SET FOREIGN_KEY_CHECKS = 1;\"]},\"234\":{\"h\":\"查询\",\"t\":[\"查询，并将结果映射到结构体中\",\"var db *sqlx.DB type Person struct { UserId string `db:\\\"id\\\"` Username string `db:\\\"name\\\"` Age int `db:\\\"age\\\"` Address string `db:\\\"address\\\"` } func init() { conn, err := sqlx.Open(\\\"mysql\\\", \\\"root:wyh246859@tcp(127.0.0.1:3306)/test\\\") if err != nil { fmt.Println(\\\"Open mysql failed\\\", err) return } db = conn } func main() { query() defer db.Close() } func query() { var person Person //查询一个是Get，多个是Select err := db.Get(&person, \\\"select * from user where id = ?\\\", \\\"12132\\\") if err != nil { fmt.Println(\\\"query failed:\\\", err) return } fmt.Printf(\\\"query succ:%+v\\\", person) } func list() { var perons []Person err := db.Select(&perons, \\\"select * from user\\\") if err != nil { fmt.Println(\\\"list err\\\", err) return } fmt.Printf(\\\"list succ,%+v\\\", perons) }\"]},\"235\":{\"h\":\"新增\",\"t\":[\"新增数据\",\"func insert() { result, err := db.Exec(\\\"insert into user value (?,?,?,?)\\\", \\\"120230\\\", \\\"李四\\\", 12, \\\"广州市\\\") if err != nil { fmt.Println(\\\"insert err:\\\", err) return } id, err := result.LastInsertId() if err != nil { fmt.Println(\\\"insert err:\\\", err) return } fmt.Println(\\\"insert succ:\\\", id) }\"]},\"236\":{\"h\":\"更新\",\"t\":[\"更新数据\",\"func update() { res, err := db.Exec(\\\"update user set name = ? where id = ?\\\", \\\"赵六\\\", \\\"120230\\\") if err != nil { fmt.Println(\\\"update err:\\\", err) return } eff, err := res.RowsAffected() if err != nil || eff == 0 { fmt.Println(\\\"update err:\\\", err) return } fmt.Println(\\\"Update succ\\\") }\"]},\"237\":{\"h\":\"删除\",\"t\":[\"删除数据\",\"func delete() { res, err := db.Exec(\\\"delete from user where id = ?\\\", \\\"120230\\\") if err != nil { fmt.Println(\\\"delete err:\\\", err) return } eff, err := res.RowsAffected() if err != nil || eff == 0 { fmt.Println(\\\"delete err:\\\", err) return } fmt.Println(\\\"delete succ\\\") }\"]},\"238\":{\"h\":\"事务\",\"t\":[\"func (db *DB) Begin() (*Tx, error) //开始一个事务 func (tx *Tx) Commit() error //提交一个事务 func (tx *Tx) Rollback() error //回滚一个事务\",\"当开启一个事务后，为了保险都会加一句defer tx.Rollback()，如果如果过程出错了，就会回滚，要是事务成功提交了，这个回滚自然是无效的。\",\"func main() { transation, err := db.Begin() if err != nil { fmt.Println(\\\"transation err\\\") } defer transation.Rollback() insert() query() update() query() delete() transation.Commit() }\"]},\"239\":{\"h\":\"Redis\",\"t\":[\"Redis 是一个开源的使用 ANSI C 语言编写、遵守 BSD 协议、支持网络、可基于内存、分布式、可选持久性的键值对(Key-Value)存储数据库，并提供多种语言的 API，Redis 即可以当作一个 NoSQL 数据库，又可以是当作高速缓存存储，还支持简单的消息队列。\",\"本文仅仅讲解如何使用 Go 语言驱动来操作 Redis 数据库，不会对 Redis 本身做任何讲解。\",\"官方文档：Golang Redis client (uptrace.dev)\",\"官方仓库：go-redis/redis: Type-safe Redis client for Golang (github.com)\"]},\"240\":{\"h\":\"安装\",\"t\":[\"关于 Redis 的驱动有很多，本文使用的是github.com/go-redis/redis。\",\"如果你使用的 Redis 版本号为 6\",\"go get github.com/go-redis/redis/v8\",\"如果你使用的 Redis 版本号为 7\",\"go get github.com/go-redis/redis/v9\"]},\"241\":{\"h\":\"快速开始\",\"t\":[\"import ( \\\"fmt\\\" \\\"log\\\" \\\"testing\\\" \\\"github.com/go-redis/redis\\\" ) func TestQuickStart(t *testing.T) { // 创建Redis连接客户端 redisClient := redis.NewClient(&redis.Options{ Addr: \\\"192.168.48.134:6379\\\", Password: \\\"123456\\\", DB: 0, // 使用默认DB }) // 设置键值对，0就是永不过期 redisClient.Set(\\\"hello\\\", \\\"world\\\", 0) // 读取值 result, err := redisClient.Get(\\\"hello\\\").Result() if err == redis.Nil { fmt.Println(\\\"ket not exist\\\") } else if err != nil { log.Panic(err) } fmt.Println(result) }\"]},\"242\":{\"h\":\"连接配置\",\"t\":[\"type Options struct { // 网络类型 tcp 或者 unix. // 默认是 tcp. Network string // redis地址，格式 host:port Addr string // Dialer 创建一个新的网络连接且比Network和Addr有着更高的优先级 // Network and Addr options. Dialer func() (net.Conn, error) // 新建一个redis连接的时候，会回调这个函数 OnConnect func(*Conn) error // redis密码，redis server没有设置可以为空。 Password string // redis数据库，序号从0开始，默认是0，可以不用设置 DB int // redis操作失败最大重试次数，默认0。 MaxRetries int // 最小重试时间间隔. // 默认是 8ms ; -1 表示关闭. MinRetryBackoff time.Duration // 最大重试时间间隔 // 默认是 512ms; -1 表示关闭. MaxRetryBackoff time.Duration // redis新连接超时时间. // 默认是 5 秒. DialTimeout time.Duration // socket读取超时时间 // 默认 3 秒. ReadTimeout time.Duration // socket写超时时间 WriteTimeout time.Duration // redis连接池的最大连接数. // 默认连接池大小等于 cpu个数 * 10 PoolSize int // redis连接池最小空闲连接数. MinIdleConns int // redis连接最大的存活时间，默认不会关闭过时的连接. MaxConnAge time.Duration // 当你从redis连接池获取一个连接之后，连接池最多等待这个拿出去的连接多长时间。 // 默认是等待 ReadTimeout + 1 秒. PoolTimeout time.Duration // redis连接池多久会关闭一个空闲连接. // 默认是 5 分钟. -1 则表示关闭这个配置项 IdleTimeout time.Duration // 多长时间检测一下，空闲连接 // 默认是 1 分钟. -1 表示关闭空闲连接检测 IdleCheckFrequency time.Duration // 只读设置，如果设置为true， 在当前节点实例上，redis只能查询缓存不能更新。 readOnly bool // TLS配置 TLSConfig *tls.Config }\"]},\"243\":{\"h\":\"建立连接\",\"t\":[\"// 创建Redis连接客户端 redisClient := redis.NewClient(&redis.Options{ Addr: \\\"192.168.48.134:6379\\\", Password: \\\"123456\\\", DB: 0, // 使用默认DB })\"]},\"244\":{\"h\":\"关闭连接\",\"t\":[\"驱动内部维护着一个连接池，不需要操作一次就关闭一次连接。\",\"defer redisClient.Close()\",\"这个 Redis 驱动几乎将所有的操作封装好了，Redis 命令和方法名一一对应，基本上只要知道 Redis 命令怎么用，驱动对应的方法都也差不多会了。\",\"Redis 命令：redis 命令手册\"]},\"245\":{\"h\":\"基本操作\"},\"246\":{\"h\":\"删除键\",\"t\":[\"redisClient.Set(\\\"name\\\", \\\"jack\\\", 0) fmt.Println(redisClient.Del(\\\"name\\\").Result())\"]},\"247\":{\"h\":\"过期时间\",\"t\":[\"redisClient.Set(\\\"name\\\", \\\"jack\\\", 0) // 设置过期时间 redisClient.Expire(\\\"name\\\", time.Second*2) fmt.Println(redisClient.Get(\\\"name\\\").Val()) time.Sleep(time.Second * 3) fmt.Println(redisClient.Get(\\\"name\\\").Val())\"]},\"248\":{\"h\":\"取消过期时间\",\"t\":[\"redisClient.Set(\\\"name\\\", \\\"jack\\\", 2) // 取消过期时间 redisClient.Persist(\\\"name\\\") time.Sleep(time.Second * 2) fmt.Println(redisClient.Get(\\\"name\\\"))\"]},\"249\":{\"h\":\"查询过期时间\",\"t\":[\"fmt.Println(redisClient.TTL(\\\"name\\\")) fmt.Println(redisClient.PTTL(\\\"name\\\"))\"]},\"250\":{\"h\":\"重命名\",\"t\":[\"redisClient.Rename(\\\"name\\\", \\\"newName\\\")\"]},\"251\":{\"h\":\"查询类型\",\"t\":[\"redisClient.Type(\\\"name\\\")\"]},\"252\":{\"h\":\"扫描\",\"t\":[\"fmt.Println(redisClient.Scan(0, \\\"\\\", 4))\"]},\"253\":{\"h\":\"字符串\"},\"254\":{\"h\":\"简单存取\",\"t\":[\"redisClient.Set(\\\"token\\\", \\\"abcefghijklmn\\\", 0) fmt.Println(redisClient.Get(\\\"token\\\").Val())\"]},\"255\":{\"h\":\"批量存取\",\"t\":[\"redisClient.MSet(\\\"cookie\\\", \\\"12345\\\", \\\"token\\\", \\\"abcefg\\\") fmt.Println(redisClient.MGet(\\\"cookie\\\", \\\"token\\\").Val())\"]},\"256\":{\"h\":\"数字增减\",\"t\":[\"redisClient.Set(\\\"age\\\", \\\"1\\\", 0) // 自增 redisClient.Incr(\\\"age\\\") fmt.Println(redisClient.Get(\\\"age\\\").Val()) // 自减 redisClient.Decr(\\\"age\\\") fmt.Println(redisClient.Get(\\\"age\\\").Val())\"]},\"257\":{\"h\":\"哈希表\"},\"258\":{\"h\":\"读写操作\",\"t\":[\"// 单个设置 redisClient.HSet(\\\"map\\\", \\\"name\\\", \\\"jack\\\") // 批量设置 redisClient.HMSet(\\\"map\\\", map[string]interface{}{\\\"a\\\": \\\"b\\\", \\\"c\\\": \\\"d\\\", \\\"e\\\": \\\"f\\\"}) // 单个访问 fmt.Println(redisClient.HGet(\\\"map\\\", \\\"a\\\").Val()) // 批量访问 fmt.Println(redisClient.HMGet(\\\"map\\\", \\\"a\\\", \\\"b\\\").Val()) // 获取整个map fmt.Println(redisClient.HGetAll(\\\"map\\\").Val())\",\"输出\",\"b [b <nil>] map[a:b c:d e:f name:jack]\"]},\"259\":{\"h\":\"删除键\",\"t\":[\"// 删除map的一个字段 redisClient.HDel(\\\"map\\\", \\\"a\\\")\"]},\"260\":{\"h\":\"判断键是否存在\",\"t\":[\"// 判断字段是否存在 redisClient.HExists(\\\"map\\\", \\\"a\\\")\"]},\"261\":{\"h\":\"获取所有的键\",\"t\":[\"// 获取所有的map的键 redisClient.HKeys(\\\"map\\\")\"]},\"262\":{\"h\":\"获取哈希表键长度\",\"t\":[\"// 获取map长度 redisClient.HLen(\\\"map\\\")\"]},\"263\":{\"h\":\"遍历哈希表的键值对\",\"t\":[\"// 遍历map中的键值对 redisClient.HScan(\\\"map\\\", 0, \\\"\\\", 1)\"]},\"264\":{\"h\":\"列表\"},\"265\":{\"h\":\"修改元素\",\"t\":[\"// 左边添加 redisClient.LPush(\\\"list\\\", \\\"a\\\", \\\"b\\\", \\\"c\\\", \\\"d\\\", \\\"e\\\") // 右边添加 redisClient.RPush(\\\"list\\\", \\\"g\\\", \\\"i\\\", \\\"a\\\") // 在参考值前面插入值 redisClient.LInsertBefore(\\\"list\\\", \\\"a\\\", \\\"aa\\\") // 在参考值后面插入值 redisClient.LInsertAfter(\\\"list\\\", \\\"a\\\", \\\"gg\\\") // 设置指定下标的元素的值 redisClient.LSet(\\\"list\\\", 0, \\\"head\\\")\"]},\"266\":{\"h\":\"访问长度\",\"t\":[\"// 访问列表长度 redisClient.LLen(\\\"list\\\")\"]},\"267\":{\"h\":\"访问元素\",\"t\":[\"// 左边弹出元素 redisClient.LPop(\\\"list\\\") // 右边弹出元素 redisClient.RPop(\\\"list\\\") // 访问指定下标的元素 redisClient.LIndex(\\\"list\\\", 1) // 访问指定范围内的元素 redisClient.LRange(\\\"list\\\", 0, 1)\"]},\"268\":{\"h\":\"删除元素\",\"t\":[\"// 删除指定元素 redisClient.LRem(\\\"list\\\", 0, \\\"a\\\") // 删除指定范围的元素 redisClient.LTrim(\\\"list\\\", 0, 1) // 保留指定范围的元素 redisClient.LTrim(\\\"list\\\", 0, 1)\"]},\"269\":{\"h\":\"集合\"},\"270\":{\"h\":\"新增元素\",\"t\":[\"// 往一个集合里面添加元素 redisClient.SAdd(\\\"set\\\", \\\"a\\\", \\\"b\\\", \\\"c\\\") redisClient.SAdd(\\\"set2\\\", \\\"c\\\", \\\"d\\\", \\\"e\\\")\"]},\"271\":{\"h\":\"访问集合元素\",\"t\":[\"// 获取集合中的所有成员 redisClient.SMembers(\\\"set\\\") // 判断一个元素是否属于这个集合 redisClient.SIsMember(\\\"set\\\", \\\"a\\\") // 随机返回count个元素 redisClient.SRandMemberN(\\\"set\\\", 1) // 获取一个集合的元素个数 redisClient.SCard(\\\"set\\\")\"]},\"272\":{\"h\":\"集合操作\",\"t\":[\"// 返回给定集合的差集 redisClient.SDiff(\\\"set\\\", \\\"set2\\\") // 将给定集合的差集保存在结果集里，返回结果集的长度 redisClient.SDiffStore(\\\"store\\\", \\\"set\\\", \\\"se2\\\") // 返回给定集合的交集 redisClient.SInter(\\\"set\\\", \\\"set2\\\") // 将给定集合的交集保存在结果集里，返回结果集的长度 redisClient.SInterStore(\\\"store\\\", \\\"set\\\", \\\"set2\\\") // 返回给定集合的并集 redisClient.SUnion(\\\"set\\\", \\\"set2\\\") // 将给定集合的并集保存在结果集里，返回结果集的长度 redisClient.SUnionStore(\\\"store\\\", \\\"set\\\", \\\"store\\\")\"]},\"273\":{\"h\":\"删除元素\",\"t\":[\"// 弹出并删除该元素 redisClient.SPop(\\\"set\\\") // 弹出并删除N给元素 redisClient.SPopN(\\\"set\\\", 2)\"]},\"274\":{\"h\":\"移动元素\",\"t\":[\"// 从源集合移动指定元素刀目标集合 redisClient.SMove(\\\"set\\\", \\\"set2\\\", \\\"a\\\")\"]},\"275\":{\"h\":\"删除元素\",\"t\":[\"// 删除指定元素 redisClient.SRem(\\\"set\\\", \\\"a\\\", \\\"b\\\")\"]},\"276\":{\"h\":\"遍历\",\"t\":[\"// 遍历集合 redisClient.SScan(\\\"set\\\", 0, \\\"\\\", 2)\"]},\"277\":{\"h\":\"有序集合\"},\"278\":{\"h\":\"加入元素\",\"t\":[\"// 往有序集合中加入元素 redisClient.ZAdd(\\\"ss\\\", redis.Z{ Score: 1, Member: \\\"a\\\", }, redis.Z{ Score: 2, Member: \\\"b\\\", })\"]},\"279\":{\"h\":\"元素排名\",\"t\":[\"// 返回有序集合中该元素的排名，从低到高排列 redisClient.ZRank(\\\"ss\\\", \\\"1\\\") // 返回有序集合中该元素的排名，从高到低排列 redisClient.ZRevRank(\\\"ss\\\", \\\"1\\\")\"]},\"280\":{\"h\":\"访问元素\",\"t\":[\"// 返回介于min和max之间的成员数量 redisClient.ZCount(\\\"ss\\\", \\\"1\\\", \\\"2\\\") // 返回对元素的权值 redisClient.ZScore(\\\"ss\\\", \\\"a\\\") // 返回指定区间的元素 redisClient.ZRange(\\\"ss\\\", 1, 2) // 返回介于min和max之间的所有成员列表 redisClient.ZRangeByScore(\\\"ss\\\", redis.ZRangeBy{ Min: \\\"1\\\", Max: \\\"2\\\", Offset: 0, Count: 1, })\"]},\"281\":{\"h\":\"修改权值\",\"t\":[\"// 给一个对应的元素增加相应的权值 redisClient.ZIncr(\\\"ss\\\", redis.Z{ Score: 2, Member: \\\"b\\\", })\"]},\"282\":{\"h\":\"删除元素\",\"t\":[\"// 删除指定元素 redisClient.ZRem(\\\"ss\\\", \\\"a\\\") // 删除指定排名区间的元素 redisClient.ZRemRangeByRank(\\\"ss\\\", 1, 2) // 删除权值在min和max区间的元素 redisClient.ZRemRangeByScore(\\\"ss\\\", \\\"1\\\", \\\"2\\\")\"]},\"283\":{\"h\":\"脚本\",\"t\":[\"// 加载脚本，返回sha值 redisClient.ScriptLoad(\\\"return 0\\\") // 根据sha值执行脚本 redisClient.EvalSha(\\\"sha\\\", []string{}, \\\"\\\") // 直接执行脚本 redisClient.Eval(\\\"return 0\\\", []string{}, \\\"\\\") // 清除脚本缓存 redisClient.ScriptFlush() // 杀死当前正在运行的脚本 redisClient.ScriptKill() // 验证对应哈希值的脚本是否存在 redisClient.ScriptExists(\\\"\\\")\"]},\"284\":{\"h\":\"发布订阅\",\"t\":[\"// 发送消息到指定频道 redisClient.Publish(\\\"channel\\\", \\\"message\\\") // 订阅指定频道 redisClient.Subscribe(\\\"channel\\\") // 查看订阅状态 redisClient.PubSubNumSub(\\\"channel\\\")\"]},\"285\":{\"h\":\"准备\",\"t\":[\"在开始之前，我会先介绍下怎么使用官方文档以及如何利用官方提供的工具，能够妥善使用官方提供的便利就能提升学习的效率从而减少不必要的时间浪费。在官方网站中可以及时的了解到关于 Go 语言的最新变化，最新特性，以及未来的发展趋势等等，本站的许多内容也是来自于官方网站，官方对于教程的支持也是十分的丰富，并且 Go 的入门难度不算高，如果有其他语言的基础，学习起来将会非常轻松。\"]},\"286\":{\"h\":\"官方文档\",\"t\":[\"地址：Documentation - The Go Programming Language\",\"文档里有着对于学习 Go 语言所需要准备的一切东西，包括安装，快速开始，代码示例，风格建议，以及许多在线教程，大多数都是全英文的，少数支持中文，不过并没有什么特别晦涩难懂的词汇，大致意思都比较容易看懂。\"]},\"287\":{\"h\":\"Go 之旅\",\"t\":[\"地址：Go 语言之旅 (go-zh.org)\",\"这是由官方编写的一个非常简洁明了的教程，全中文支持，通过互动式的代码教学来帮助你快速了解 Go 语言的语法与特性，适合想要快速了解 Go 语言的人，如果将该教程浏览过一遍后，那么本站的基础教程理解起来会轻松很多。\"]},\"288\":{\"h\":\"Effective Go\",\"t\":[\"地址：Effective Go - The Go Programming Language\",\"这是由官方编写的一个比较全面的教程，时间最早可以追溯到 2009 年，内容比较详细，小到变量命名，大到一些设计思想。不过官方也标注了该文档已经很久没有进行大幅度更新，一些内容可能已经过时了，但是大部分教程都仍然适用。\"]},\"289\":{\"h\":\"参考手册\",\"t\":[\"地址：The Go Programming Language Specification\",\"参考手册的重要性不言而喻，参考手册的内容永远会随着版本的变化而变化，时刻保持最新，其内容有：词法结构，概念定义，语句定义等等，这是一些关于 Go 语言中最基础的定义，适合有需要的时候查询一些概念，同时里面也有着不少的代码示例。\"]},\"290\":{\"h\":\"在线编译\",\"t\":[\"地址：Go Playground - The Go Programming Language\",\"由官方搭建的可在线编译并运行 Go 程序的网站，对于一些代码量不是特别大的 Go 程序，可以在官方的在线网站直接进行编写，能省去不少时间。\"]},\"291\":{\"h\":\"更新日志\",\"t\":[\"地址：Release History - The Go Programming Language\",\"根据以往的惯例，官方大概每半年发布一个二级版本，每一次更新的变动都可以在更新日志中查看，例如在 1.18 版本中的最大变动就是增加了泛型，而 1.19 的更新就相对而言要温和很多，了解一下每一个版本的更新内容也会有所帮助。\",\"提示\",\"除此之外还有许多其他的第三方网站提供了非常多的关于 Go 学习的教程或工具：外链\"]},\"292\":{\"h\":\"基本语法\",\"t\":[\"Go 的基本语法十分简单易懂，让我们从一个最简单的例子开始。\",\"package main import \\\"fmt\\\" func main() { fmt.Println(\\\"Hello 世界!\\\") }\",\"package关键字声明了是当前 go 文件属于哪一个包，入口文件都必须声明为main包，入口函数是main函数，在自定义包和函数时命名应当尽量避免与之重复。\",\"import是导入关键字，后面跟着的是被导入的包名。\",\"func是函数声明关键字，用于声明一个函数。\",\"fmt.Println(\\\"Hello 世界!\\\")是一个语句，调用了fmt包下的Println函数进行输出。\",\"以上就是一个简单的语法介绍，下面就来略微细致地去了解里面的概念。\"]},\"293\":{\"h\":\"包\",\"t\":[\"在 Go 中，程序是通过将包链接在一起来构建的。Go 中进行导入的最基本单位是一个包，而不是.go文件。包其实就是一个文件夹，英文名 package，包内共享所有变量，常量，以及所有定义的类型。包的命名风格建议都是小写字母，并且要尽量简短。\"]},\"294\":{\"h\":\"可见性\",\"t\":[\"前面提到过包内共享所有变量，常量，以及所有定义的类型，但对于包外而言并不是这样，有时候你并不想让别人访问某一个类型，所以就需要控制可见性。你可能在其它 OOP 语言中见过Public，Pravite等关键字，不过在 Go 语言中没有这些，它控制可见性的方式非常简单，规则如下\",\"名称大写字母开头，即为公有类型/变量/常量\",\"名字小写或下划线开头，即为私有类型/变量/常量\",\"比如下面的一个例子，常量MyName就是公开的，而常量mySalary就是私有的。\",\"package example // 公有 const MyName = \\\"jack\\\" // 私有 const mySalary = 20_000\",\"这个可见性的规则适用于整个 Go 语言的任何地方。\"]},\"295\":{\"h\":\"导入\",\"t\":[\"导入一个包就是导入这个包的所有公有的类型/变量/常量，导入的语法就是import加上包名\",\"package main import \\\"example\\\"\",\"当导入多个包时，你可以这么写\",\"package main import \\\"example\\\" import \\\"example1\\\"\",\"也可以用括号括起来，第二种方法在实践中更加常用。\",\"package main import ( \\\"example\\\" \\\"example1\\\" )\",\"如果有包名重复了，或者包名比较复杂，你也可以给它们起别名\",\"package main import ( e \\\"example\\\" e1 \\\"example1\\\" )\",\"还有另一种特殊的使用方法就是匿名导入包，匿名导入的包无法被使用，这么做通常是为了加载包下的init函数，但又不需要用到包中的类型，例如一个常见的场景就是注册数据库驱动\",\"package main import ( e \\\"example\\\" _ \\\"mysql-driver\\\" )\",\"当你导入后，想要访问包中的类型时，通过名称.标识符去访问即可，比如下面这个例子\",\"package main import ( \\\"example\\\" \\\"fmt\\\" ) func main() { fmt.Println(example.MyName) }\",\"若你尝试去访问一个私有的类型，编译器就会告诉你无法访问。\",\"注意\",\"Go 中无法进行循环导入，不管是直接的还是间接的。例如包 A 导入了包 B，包 B 也导入了包 A，这是直接循环导入，包 A 导入了包 C，包 C 导入了包 B，包 B 又导入了包 A，这就是间接的循环导入，存在循环导入的话将会无法通过编译。\"]},\"296\":{\"h\":\"内部包\",\"t\":[\"go 中约定，一个包内名为internal 包为内部包，外部包将无法访问内部包中的任何内容，否则的话编译不通过，下面看一个例子。\",\"/home/user/go/ src/ crash/ bang/ (go code in package bang) b.go foo/ (go code in package foo) f.go bar/ (go code in package bar) x.go internal/ baz/ (go code in package baz) z.go quux/ (go code in package main) y.go\",\"由文件结构中可知，crash包无法访问baz包中的类型。\"]},\"297\":{\"h\":\"注释\",\"t\":[\"Go 支持单行注释和多行注释，注释与内容之间建议隔一个空格，例如\",\"// 这是main包 package main // 导入了fmt包 import \\\"fmt\\\" /* * 这是启动函数main函数 */ func main() { // 这是一个语句 fmt.Println(\\\"Hello 世界!\\\") }\"]},\"298\":{\"h\":\"标识符\",\"t\":[\"标识符就是一个名称，用于包命名，函数命名，变量命名等等，命名规则如下：\",\"只能由字母，数字，下划线组成\",\"只能以字母和下划线开头\",\"严格区分大小写\",\"不能与任何已存在的标识符重复，即包内唯一的存在\",\"不能与 Go 任何内置的关键字冲突\",\"下方列出所有的内置关键字，也可以前往参考手册-标识符查看更多细节\",\"break default func interface select case defer go map struct chan else goto package switch const fallthrough if range type continue for import return var\"]},\"299\":{\"h\":\"运算符\",\"t\":[\"下面是 Go 语言中支持的运算符号的优先级排列，也可以前往参考手册-运算符查看更多细节。\",\"Precedence Operator 5 * / % << >> & &^ 4 + - | ^ 3 == != < <= > >= 2 && 1 ||\",\"有一点需要稍微注意下，go 语言中没有选择将~作为取反运算符，而是复用了^符号，当两个数字使用^时，例如a^b，它就是异或运算符，只对一个数字使用时，例如^a，那么它就是取反运算符。go 也支持增强赋值运算符，如下。\",\"a += 1 a /= 2 a &^= 2\",\"提示\",\"Go 语言中没有自增与自减运算符，它们被降级为了语句statement，并且规定了只能位于操作数的后方，所以不用再去纠结i++和++i这样的问题。\",\"a++ // 正确 ++a // 错误 a-- // 正确\",\"还有一点就是，它们不再具有返回值，因此a = b++这类语句的写法是错误的。\"]},\"300\":{\"h\":\"字面量\",\"t\":[\"字面量，按照计算机科学的术语来讲是用于表达源代码中一个固定值的符号，也叫字面值。两个叫法都是一个意思，写了什么东西，值就是什么，值就是“字面意义上“的值。\"]},\"301\":{\"h\":\"整型字面量\",\"t\":[\"为了便于阅读，允许使用下划线_来进行数字划分，但是仅允许在前缀符号之后和数字之间使用。\",\"24 // 24 024 // 24 2_4 // 24 0_2_4 // 24 10_000 // 10k 100_000 // 100k 0O24 // 20 0b00 // 0 0x00 // 0 0x0_0 // 0\"]},\"302\":{\"h\":\"浮点数字面量\",\"t\":[\"通过不同的前缀可以表达不同进制的浮点数\",\"0. 72.40 072.40 // == 72.40 2.71828 1.e+0 6.67428e-11 1E6 .25 .12345E+5 1_5. // == 15.0 0.15e+0_2 // == 15.0 0x1p-2 // == 0.25 0x2.p10 // == 2048.0 0x1.Fp+0 // == 1.9375 0X.8p-0 // == 0.5 0X_1FFFP-16 // == 0.1249847412109375 0x15e-2 // == 0x15e - 2 (integer subtraction)\"]},\"303\":{\"h\":\"复数字面量\",\"t\":[\"0i 0123i // == 123i 0o123i // == 0o123 * 1i == 83i 0xabci // == 0xabc * 1i == 2748i 0.i 2.71828i 1.e+0i 6.67428e-11i 1E6i .25i .12345E+5i 0x1p-2i // == 0x1p-2 * 1i == 0.25i\"]},\"304\":{\"h\":\"字符字面量\",\"t\":[\"字符字面量必须使用单引号括起来''，Go 中的字符完全兼容utf8。\",\"'a' 'ä' '你' '\\\\t' '\\\\000' '\\\\007' '\\\\377' '\\\\x07' '\\\\xff' '\\\\u12e4' '\\\\U00101234'\"]},\"305\":{\"h\":\"转义字符\",\"t\":[\"Go 中可用的转义字符\",\"\\\\a U+0007 响铃符号 \\\\b U+0008 回退符号 \\\\f U+000C 换页符号 \\\\n U+000A 换行符号 \\\\r U+000D 回车符号 \\\\t U+0009 横向制表符号 \\\\v U+000B 纵向制表符号 \\\\\\\\ U+005C 反斜杠转义 \\\\' U+0027 单引号转义 (该转义仅在字符内有效) \\\\\\\" U+0022 双引号转义 (该转义仅在字符串内有效)\"]},\"306\":{\"h\":\"字符串字面量\",\"t\":[\"字符串字面量必须使用双引号\\\"\\\"括起来或者反引号（反引号字符串不允许转义）\",\"`abc` // \\\"abc\\\" `\\\\n \\\\n` // \\\"\\\\\\\\n\\\\n\\\\\\\\n\\\" \\\"\\\\n\\\" \\\"\\\\\\\"\\\" // `\\\"` \\\"Hello, world!\\\\n\\\" \\\"今天天气不错\\\" \\\"日本語\\\" \\\"\\\\u65e5本\\\\U00008a9e\\\" \\\"\\\\xff\\\\u00FF\\\"\"]},\"307\":{\"h\":\"函数\",\"t\":[\"Go 中的函数声明方式通过func关键字来进行，跟大多数语言类似\",\"func main() { println(1) }\",\"不过 Go 中的函数有两个不同的点，第一个是参数类型后置，像下面这样\",\"func Hello(name string) { fmt.Println(name) }\",\"第二个不同的点就是多返回值，而且可以带名字\",\"func Pos() () (x, y float64) { ... }\"]},\"308\":{\"h\":\"风格\",\"t\":[\"关于编码风格这一块 Go 是强制所有人统一同一种风格，Go 官方提供了一个格式化工具gofmt，通过命令行就可以使用，该格式化工具没有任何的格式化参数可以传递，仅有的两个参数也只是输出格式化过程，所以完全不支持自定义，也就是说所有通过此工具的格式化后的代码都是同一种代码风格，这会极大的降低维护人员的心智负担，所以在这一块追求个性显然是一个不太明智的选择。\",\"下面会简单列举一些规则，平时在编写代码的时候也可以稍微注意一下。\"]},\"309\":{\"h\":\"函数花括号换行\",\"t\":[\"关于函数后的花括号到底该不该换行，几乎每个程序员都能说出属于自己的理由，在 Go 中所有的花括号都不应该换行\",\"// 正确示例 func main() { fmt.Println(\\\"Hello 世界!\\\") }\",\"如果你真的这么做了，像下面这样\",\"// 错误示例 func main() { fmt.Println(\\\"Hello 世界!\\\") }\",\"这样的代码连编译都过不了，所以 Go 强制所有程序员花函数后的括号不换行。\"]},\"310\":{\"h\":\"代码缩进\",\"t\":[\"Go 默认使用Tab也就是制表符进行缩进，仅在一些特殊情况会使用空格。\"]},\"311\":{\"h\":\"代码间隔\",\"t\":[\"Go 中大部分间隔都是有意义的，从某种程度上来说，这也代表了编译器是如何看待你的代码的，例如下方的数学运算\",\"2*9 + 1/3*2\",\"众所周知，乘法的优先级比加法要高，在格式化后，*符号之间的间隔会显得更紧凑，意味着优先进行运算，而+符号附近的间隔则较大，代表着较后进行运算。\"]},\"312\":{\"h\":\"花括号省略\",\"t\":[\"在其它语言中的 if 和 for 语句通常可以简写，像下面这样\",\"for (int i=0; i < 10; i++) printf(\\\"%d\\\", i)\",\"但在 Go 中不行，你可以只写一行，但必须加上花括号\",\"for i := 0; i < 10; i++ {fmt.Println(i)}\"]},\"313\":{\"h\":\"三元表达式\",\"t\":[\"Go 中没有三元表达式，所以像下面的代码是无法通过编译的\",\"var c = a > b ? a : b\",\"通过这篇文章你可以对 Go 的语法有一个初步的认知，后续的内容中会进行更细致的展开。\"]},\"314\":{\"h\":\"数据类型\",\"t\":[\"下面列出 Go 语言中全部的内置类型，以供参考，更多细节可以前往参考手册-类型。\"]},\"315\":{\"h\":\"布尔类型\",\"t\":[\"布尔类型只有真值和假值。\",\"类型\",\"描述\",\"bool\",\"true为真值，false为假值\",\"提示\",\"在 Go 中，整数 0 并不代表假值，非零整数也不能代表真值，即数字无法代替布尔值进行逻辑判断，两者是完全不同的类型。\"]},\"316\":{\"h\":\"整型\",\"t\":[\"Go 中为不同位数的整数分配了不同的类型，主要分为无符号整型与有符号整型。\",\"序号\",\"类型和描述\",\"uint8\",\"无符号 8 位整型\",\"uint16\",\"无符号 16 位整型\",\"uint32\",\"无符号 32 位整型\",\"uint64\",\"无符号 64 位整型\",\"int8\",\"有符号 8 位整型\",\"int16\",\"有符号 16 位整型\",\"int32\",\"有符号 32 位整型\",\"int64\",\"有符号 64 位整型\",\"uint\",\"无符号整型 至少 32 位\",\"int\",\"整型 至少 32 位\",\"uintptr\",\"等价于无符号 64 位整型，但是专用于存放指针运算，用于存放死的指针地址。\"]},\"317\":{\"h\":\"浮点型\",\"t\":[\"IEEE-754浮点数，主要分为单精度浮点数与双精度浮点数。\",\"类型\",\"类型和描述\",\"float32\",\"IEEE-754 32 位浮点数\",\"float64\",\"IEEE-754 64 位浮点数\"]},\"318\":{\"h\":\"复数类型\",\"t\":[\"类型\",\"描述\",\"complex128\",\"64 位实数和虚数\",\"complex64\",\"32 位实数和虚数\"]},\"319\":{\"h\":\"字符类型\",\"t\":[\"go 语言字符串完全兼容 UTF-8\",\"类型\",\"描述\",\"byte\",\"等价 uint8 可以表达 ANSCII 字符\",\"rune\",\"等价 int32 可以表达 Unicode 字符\",\"string\",\"字符串即字节序列，可以转换为[]byte类型即字节切片\"]},\"320\":{\"h\":\"派生类型\",\"t\":[\"类型\",\"例子\",\"数组\",\"[5]int，长度为 5 的整型数组\",\"切片\",\"[]float64，64 位浮点数切片\",\"映射表\",\"map[string]int，键为字符串类型，值为整型的映射表\",\"结构体\",\"type Gopher struct{}，Gopher 结构体\",\"指针\",\"*int，一个整型指针。\",\"函数\",\"type f func()，一个没有参数，没有返回值的函数类型\",\"接口\",\"type Gopher interface{}，Gopher 接口\",\"通道\",\"chan int，整型通道\"]},\"321\":{\"h\":\"零值\",\"t\":[\"官方文档中零值称为zero value，零值并不仅仅只是字面上的数字零，而是一个类型的空值或者说默认值更为准确。\",\"类型\",\"零值\",\"数字类型\",\"0\",\"布尔类型\",\"false\",\"字符串类型\",\"\\\"\\\"\",\"数组\",\"固定长度的对应类型的零值集合\",\"结构体\",\"内部字段都是零值的结构体\",\"切片，映射表，函数，接口，通道，指针\",\"nil\"]},\"322\":{\"h\":\"nil\",\"t\":[\"nil类似于其它语言中的none或者null，但并不等同。nil仅仅只是一些引用类型的零值，并且不属于任何类型，从源代码中的nil可以看出它仅仅只是一个变量。\",\"var nil Type\",\"并且nil == nil这样的语句是无法通过编译的。\"]},\"323\":{\"h\":\"常量\",\"t\":[\"常量的值无法在运行时改变，一旦赋值过后就无法修改，其值只能来源于：\",\"字面量\",\"其他常量标识符\",\"常量表达式\",\"结果是常量的类型转换\",\"iota\",\"常量只能是基本数据类型，不能是\",\"除基本类型以外的其它类型，如结构体，接口，切片，数组等\",\"函数的返回值\",\"常量的值无法被修改，否则无法通过编译\"]},\"324\":{\"h\":\"初始化\",\"t\":[\"常量的声明需要用到const关键字，常量在声明时就必须初始化一个值，并且常量的类型可以省略，例如\",\"const name string = \\\"Jack\\\" // 字面量 const msg = \\\"hello world\\\" // 字面量 const num = 1 // 字面量 const numExpression = (1+2+3) / 2 % 100 + num // 常量表达式\",\"如果仅仅只是声明而不指定值，将会无法通过编译\",\"const name string\",\"编译器报错\",\"missing init expr for name\",\"批量声明常量可以用()括起来以提升可读性，可以存在多个()达到分组的效果。\",\"const ( Count = 1 Name = \\\"Jack\\\" ) const ( Size = 16 Len = 25 )\",\"在同一个常量分组中，在已经赋值的常量后面的常量可以不用赋值，其值默认就是前一个的值，比如\",\"const ( A = 1 B // 1 C // 1 D // 1 E // 1 )\"]},\"325\":{\"h\":\"iota\",\"t\":[\"iota是一个内置的常量标识符，通常用于表示一个常量声明中的无类型整数序数，一般都是在括号中使用。\",\"const iota = 0\",\"看几个使用案例\",\"const ( Num = iota // 0 Num1 // 1 Num2 // 2 Num3 // 3 Num4 // 4 )\",\"也可以这么写\",\"const ( Num = iota*2 // 0 Num1 // 2 Num2 // 4 Num3 // 6 Num4 // 8 )\",\"还可以\",\"const ( Num = iota << 2*3 + 1 // 1 Num1 // 13 Num2 // 25 Num3 = iota // 3 Num4 // 4 )\",\"通过上面几个例子可以发现，iota是递增的，第一个常量使用iota值的表达式，根据序号值的变化会自动的赋值给后续的常量，直到用新的const重置，这个序号其实就是代码的相对行号，是相对于当前分组的起始行号，看下面的例子\",\"const ( Num = iota<<2*3 + 1 // 1 第一行 Num2 = iota<<2*3 + 1 // 13 第二行 _ // 25 第三行 Num3 //37 第四行 Num4 = iota // 4 第五行 _ // 5 第六行 Num5 // 6 第七行 )\",\"例子中使用了匿名标识符_占了一行的位置，可以看到iota的值本质上就是iota所在行相对于当前const分组的第一行的差值。而不同的const分组则相互不会影响。\"]},\"326\":{\"h\":\"枚举\",\"t\":[\"Go 语言没有为枚举单独设计一个数据类型，不像其它语言通常会有一个enum来表示。一般在 Go 中，都是通过自定义类型 + const + iota 来实现枚举，下面是一个简单的例子\",\"type Season uint8 const ( Spring Season = iota Summer Autumn Winter )\",\"这些枚举实际上就是数字，Go 也不支持直接将其转换为字符串，但我们可以通过给自定义类型添加方法来返回其字符串表现形式，实现Stringer接口即可。\",\"func (s Season) String() string { switch s { case Spring: return \\\"spring\\\" case Summer: return \\\"summer\\\" case Autumn: return \\\"autumn\\\" case Winter: return \\\"winter\\\" } return \\\"\\\" }\",\"这样一来就是一个简单的枚举实现了。你也可以通过官方工具Stringer来自动生成枚举。\",\"不过它有以下缺点：\",\"类型不安全，因为Season是自定义类型，可以通过强制类型转换将其他数字也转换成该类型\",\"Season(6)\",\"繁琐，字符串表现形式需要自己实现\",\"表达能力弱，因为const仅支持基本数据类型，所以这些枚举值也只能用字符串和数字来进行表示\",\"为什么不在语言层面支持枚举是笔者非常不能理解的一件事，我认为这绝对是利大于弊的。\"]},\"327\":{\"h\":\"变量\",\"t\":[\"变量是用于保存一个值的存储位置，允许其存储的值在运行时动态的变化。每声明一个变量，都会为其分配一块内存以存储对应类型的值，前往参考手册-变量以查看更多细节。\"]},\"328\":{\"h\":\"声明\",\"t\":[\"在 go 中的类型声明是后置的，变量的声明会用到var关键字，格式为var 变量名 类型名，变量名的命名规则必须遵守标识符的命名规则。\",\"var intNum int var str string var char byte\",\"当要声明多个相同类型的变量时，可以只写一次类型\",\"var numA, numB, numC int\",\"当要声明多个不同类型的变量时，可以使用()进行包裹，可以存在多个()。\",\"var ( name string age int address string ) var ( school string class int )\",\"一个变量如果只是声明而不赋值，那么变量存储的值就是对应类型的零值。\"]},\"329\":{\"h\":\"赋值\",\"t\":[\"赋值会用到运算符=，例如\",\"var name string name = \\\"jack\\\"\",\"也可以声明的时候直接赋值\",\"var name string = \\\"jack\\\"\",\"或者这样也可以\",\"var name string var age int name, age = \\\"jack\\\", 1\",\"第二种方式每次都要指定类型，可以使用官方提供的语法糖：短变量初始化，可以省略掉var关键字和后置类型，具体是什么类型交给编译器自行推断。\",\"name := \\\"jack\\\" // 字符串类型的变量。\",\"虽然可以不用指定类型，但是在后续赋值时，类型必须保持一致，下面这种代码无法通过编译。\",\"a := 1 a = \\\"1\\\"\",\"还需要注意的是，短变量初始化不能使用nil，因为nil不属于任何类型，编译器无法推断其类型。\",\"name := nil // 无法通过编译\",\"短变量声明可以批量初始化\",\"name, age := \\\"jack\\\", 1\",\"短变量声明方式无法对一个已存在的变量使用，比如\",\"// 错误示例 var a int a := 1 // 错误示例 a := 1 a := 2\",\"但是有一种情况除外，那就是在赋值旧变量的同时声明一个新的变量，比如\",\"a := 1 a, b := 2, 2\",\"这种代码是可以通过编译的，变量a被重新赋值，而b是新声明的。\",\"在 go 语言中，有一个规则，那就是所有在函数中的变量都必须要被使用，比如下面的代码只是声明了变量，但没有使用它\",\"func main() { a := 1 }\",\"那么在编译时就会报错，提示你这个变量声明了但没有使用\",\"a declared and not used\",\"这个规则仅适用于函数内的变量，对于函数外的包级变量则没有这个限制，下面这个代码就可以通过编译。\",\"var a = 1 func main() { }\"]},\"330\":{\"h\":\"匿名\",\"t\":[\"用下划线可以表示不需要某一个变量\",\"Open(name string) (*File, error)\",\"比如os.Open函数有两个返回值，我们只想要第一个，不想要第二个，可以按照下面这样写\",\"file, _ := os.Open(\\\"readme.txt\\\")\",\"未使用的变量是无法通过编译的，当你不需要某一个变量时，就可以使用下划线_代替。\"]},\"331\":{\"h\":\"交换\",\"t\":[\"在 Go 中，如果想要交换两个变量的值，不需要使用指针，可以使用赋值运算符直接进行交换，语法上看起来非常直观，例子如下\",\"num1, num2 := 25, 36 num1, num2 = num2, num1\",\"三个变量也是同样如此\",\"num1, num2, num3 := 25, 36, 49 num1, num2, num3 = num3, num2, num1\",\"思考下面这一段代码，这是计算斐波那契数列的一小段代码，三个变量在计算后的值分别是什么\",\"a, b, c := 0, 1, 1 a, b, c = b, c, a+b\",\"答案是\",\"1 1 1\",\"你可能会疑惑为什么不是\",\"1 1 2\",\"明明 a 已经被赋予 b 的值了，为什么 a+b 的结果还是 1？go 在进行多个变量赋值运算时，它的顺序是先计算值再赋值，并非从左到右计算。\",\"a, b, c = b, c, a+b\",\"你可能会以为它会被展开成下面这段\",\"a = b b = c c = a + b\",\"但实际上它会将 a, b, c 三个数的值分别计算好再赋给它们，就等同于下面这段代码\",\"a, b, c = 1, 1, 0+1\",\"当涉及到函数调用时，这个效果就更为明显，我们有一个函数sum可以计算两个数字的返回值\",\"func sum(a, b int) int { return a + b }\",\"通过函数来进行两数相加\",\"a, b, c := 0, 1, 1 a, b, c = b, c, sum(a, b)\",\"结果没有变化，在计算sum函数返回值时，它的入参依旧是 0 和 1\",\"1 1 1\",\"所以代码应该这样分开写。\",\"a, b = b, c c = a + b\"]},\"332\":{\"h\":\"比较\",\"t\":[\"变量之间的比较有一个大前提，那就是它们之间的类型必须相同，go 语言中不存在隐式类型转换，像下面这样的代码是无法通过编译的\",\"func main() { var a uint64 var b int64 fmt.Println(a == b) }\",\"编译器会告诉你两者之间类型并不相同\",\"invalid operation: a == b (mismatched types uint64 and int64)\",\"所以必须使用强制类型转换\",\"func main() { var a uint64 var b int64 fmt.Println(int64(a) == b) }\",\"在没有泛型之前，早期 go 提供的内置min，max函数只支持浮点数，到了 1.21 版本，go 才终于将这两个内置函数用泛型重写，现在可以使用min函数比较最小值\",\"minVal := min(1, 2, -1, 1.2)\",\"使用max函数比较最大值\",\"maxVal := max(100, 22, -1, 1.12)\",\"它们的参数支持所有的可比较类型，go 中的可比较类型有\",\"布尔\",\"数字\",\"字符串\",\"指针\",\"通道 （仅支持判断是否相等）\",\"元素是可比较类型的数组（切片不可比较）（仅支持判断是否相等）（仅支持相同长度的数组间的比较，因为数组长度也是类型的一部分，而不同类型不可比较）\",\"字段类型都是可比较类型的结构体（仅支持判断是否相等）\",\"除此之外，还可以通过导入标准库cmp来判断，不过仅支持有序类型的参数，在 go 中内置的有序类型只有数字和字符串。\",\"import \\\"cmp\\\" func main() { cmp.Compare(1, 2) cmp.Less(1, 2) }\"]},\"333\":{\"h\":\"代码块\",\"t\":[\"在函数内部，可以通过花括号建立一个代码块，代码块彼此之间的变量作用域是相互独立的。例如下面的代码\",\"func main() { a := 1 { a := 2 fmt.Println(a) } { a := 3 fmt.Println(a) } fmt.Println(a) }\",\"它的输出是\",\"2 3 1\",\"块与块之间的变量相互独立，不受干扰，无法访问，但是会受到父块中的影响。\",\"func main() { a := 1 { a := 2 fmt.Println(a) } { fmt.Println(a) } fmt.Println(a) }\",\"它的输出是\",\"2 1 1\"]},\"334\":{\"h\":\"输入输出\",\"t\":[\"package main import \\\"fmt\\\" func main() { fmt.Println(\\\"Hello 世界!\\\") }\",\"本站的第一个入门的案例就是输出一个字符串，这一节就来讲一下在 Go 中如何进行输入输出。\"]},\"335\":{\"h\":\"文件描述符\",\"t\":[\"var ( Stdin = NewFile(uintptr(syscall.Stdin), \\\"/dev/stdin\\\") Stdout = NewFile(uintptr(syscall.Stdout), \\\"/dev/stdout\\\") Stderr = NewFile(uintptr(syscall.Stderr), \\\"/dev/stderr\\\") )\",\"在os包下有三个外暴露的文件描述符，其类型都是*os.File，分别是：\",\"os.Stdin - 标准输入\",\"os.Stdout - 标准输出\",\"os.Stderr - 标准错误\",\"Go 中的输入输出都离不开它们。\"]},\"336\":{\"h\":\"输出\",\"t\":[\"在 Go 中输出有很多中方法，下面几个比较常见的\"]},\"337\":{\"h\":\"stdout\",\"t\":[\"因为标准输出本身就是一个文件，所以你可以直接将字符串写入到标准输出中\",\"package main import \\\"os\\\" func main() { os.Stdout.WriteString(\\\"hello world!\\\") }\"]},\"338\":{\"h\":\"print\",\"t\":[\"Go 有两个内置的函数print，println，他们会将参数输出到标准错误中，仅做调试用，一般不推荐使用。\",\"package main func main() { print(\\\"hello world!\\\\n\\\") println(\\\"hello world\\\") }\"]},\"339\":{\"h\":\"fmt\",\"t\":[\"最常见的用法是使用fmt包，它提供了fmt.Println函数，该函数默认会将参数输出到标准输出中。\",\"package main import \\\"fmt\\\" func main() { fmt.Println(\\\"hello world!\\\") }\",\"它的参数支持任意类型，如果类型实现了String接口也会调用String方法来获取其字符串表现形式，所以它输出的内容可读性比较高，适用于大部分情况，不过由于内部用到了反射，在性能敏感的场景不建议大量使用。\"]},\"340\":{\"h\":\"bufio\",\"t\":[\"bufio提供了可缓冲的输出方法，它会先将数据写入到内存中，积累到了一定阈值再输出到指定的Writer中，默认缓冲区大小是4KB。在文件 IO，网络 IO 的时候建议使用这个包。\",\"func main() { writer := bufio.NewWriter(os.Stdout) defer writer.Flush() writer.WriteString(\\\"hello world!\\\") }\",\"你也可以把它和fmt包结合起来用\",\"func main() { writer := bufio.NewWriter(os.Stdout) defer writer.Flush() fmt.Fprintln(writer, \\\"hello world!\\\") }\"]},\"341\":{\"h\":\"格式化\",\"t\":[\"Go 中的格式化输出功能基本上由fmt.Printf函数提供，如果你学过 C 系语言，一定会觉得很熟悉，下面是一个简单的例子。\",\"func main() { fmt.Printf(\\\"hello world, %s!\\\", \\\"jack\\\") }\",\"下面是 Go 目前所有的格式化动词。\",\"0\",\"格式化\",\"描述\",\"接收类型\",\"1\",\"%%\",\"输出百分号%\",\"任意\",\"2\",\"%s\",\"输出string/[] byte值\",\"string,[] byte\",\"3\",\"%q\",\"格式化字符串，输出的字符串两端有双引号\\\"\\\"\",\"string,[] byte\",\"4\",\"%d\",\"输出十进制整型值\",\"整型\",\"5\",\"%f\",\"输出浮点数\",\"浮点\",\"6\",\"%e\",\"输出科学计数法形式 ,也可以用于复数\",\"浮点\",\"7\",\"%E\",\"与%e相同\",\"浮点\",\"8\",\"%g\",\"根据实际情况判断输出%f或者%e,会去掉多余的 0\",\"浮点\",\"9\",\"%b\",\"输出整型的二进制表现形式\",\"数字\",\"10\",\"%#b\",\"输出二进制完整的表现形式\",\"数字\",\"11\",\"%o\",\"输出整型的八进制表示\",\"整型\",\"12\",\"%#o\",\"输出整型的完整八进制表示\",\"整型\",\"13\",\"%x\",\"输出整型的小写十六进制表示\",\"数字\",\"14\",\"%#x\",\"输出整型的完整小写十六进制表示\",\"数字\",\"15\",\"%X\",\"输出整型的大写十六进制表示\",\"数字\",\"16\",\"%#X\",\"输出整型的完整大写十六进制表示\",\"数字\",\"17\",\"%v\",\"输出值原本的形式，多用于数据结构的输出\",\"任意\",\"18\",\"%+v\",\"输出结构体时将加上字段名\",\"任意\",\"19\",\"%#v\",\"输出完整 Go 语法格式的值\",\"任意\",\"20\",\"%t\",\"输出布尔值\",\"布尔\",\"21\",\"%T\",\"输出值对应的 Go 语言类型值\",\"任意\",\"22\",\"%c\",\"输出 Unicode 码对应的字符\",\"int32\",\"23\",\"%U\",\"输出字符对应的 Unicode 码\",\"rune,byte\",\"24\",\"%p\",\"输出指针所指向的地址\",\"指针\",\"使用fmt.Sprintf或者fmt.Printf来格式化字符串或者输出格式化字符串，看几个例子\",\"fmt.Printf(\\\"%%%s\\\\n\\\", \\\"hello world\\\") fmt.Printf(\\\"%s\\\\n\\\", \\\"hello world\\\") fmt.Printf(\\\"%q\\\\n\\\", \\\"hello world\\\") fmt.Printf(\\\"%d\\\\n\\\", 2<<7-1) fmt.Printf(\\\"%f\\\\n\\\", 1e2) fmt.Printf(\\\"%e\\\\n\\\", 1e2) fmt.Printf(\\\"%E\\\\n\\\", 1e2) fmt.Printf(\\\"%g\\\\n\\\", 1e2) fmt.Printf(\\\"%b\\\\n\\\", 2<<7-1) fmt.Printf(\\\"%#b\\\\n\\\", 2<<7-1) fmt.Printf(\\\"%o\\\\n\\\", 2<<7-1) fmt.Printf(\\\"%#o\\\\n\\\", 2<<7-1) fmt.Printf(\\\"%x\\\\n\\\", 2<<7-1) fmt.Printf(\\\"%#x\\\\n\\\", 2<<7-1) fmt.Printf(\\\"%X\\\\n\\\", 2<<7-1) fmt.Printf(\\\"%#X\\\\n\\\", 2<<7-1) type person struct { name string age int address string } fmt.Printf(\\\"%v\\\\n\\\", person{\\\"lihua\\\", 22, \\\"beijing\\\"}) fmt.Printf(\\\"%+v\\\\n\\\", person{\\\"lihua\\\", 22, \\\"beijing\\\"}) fmt.Printf(\\\"%#v\\\\n\\\", person{\\\"lihua\\\", 22, \\\"beijing\\\"}) fmt.Printf(\\\"%t\\\\n\\\", true) fmt.Printf(\\\"%T\\\\n\\\", person{}) fmt.Printf(\\\"%c%c\\\\n\\\", 20050, 20051) fmt.Printf(\\\"%U\\\\n\\\", '码') fmt.Printf(\\\"%p\\\\n\\\", &person{})\",\"使用其它进制时，在%与格式化动词之间加上一个空格便可以达到分隔符的效果，例如\",\"func main() { str := \\\"abcdefg\\\" fmt.Printf(\\\"%x\\\\n\\\", str) fmt.Printf(\\\"% x\\\\n\\\", str) }\",\"该例输出的结果为\",\"61626364656667 61 62 63 64 65 66 67\",\"在使用数字时，还可以自动补零。比如\",\"fmt.Printf(\\\"%09d\\\", 1) // 000000001\",\"二进制同理\",\"fmt.Printf(\\\"%09b\\\", 1<<3) // 000001000\",\"错误情况\",\"格式化字符数量 < 参数列表数量\",\"fmt.Printf(\\\"\\\", \\\"\\\") //%!(EXTRA string=)\",\"格式化字符数量 > 参数列表数量\",\"fmt.Printf(\\\"%s%s\\\", \\\"\\\") //%!s(MISSING)\",\"类型不匹配\",\"fmt.Printf(\\\"%s\\\", 1) //%!s(int=1)\",\"缺少格式化动词\",\"fmt.Printf(\\\"%\\\", 1) // %!(NOVERB)%!(EXTRA int=1)\"]},\"342\":{\"h\":\"输入\",\"t\":[\"下面介绍常见的输入方法\"]},\"343\":{\"h\":\"read\",\"t\":[\"你可以像直接读文件一样，读取输入内容，如下\",\"func main() { var buf [1024]byte n, _ := os.Stdin.Read(buf[:]) os.Stdout.Write(buf[:n]) }\",\"这样用起来太麻烦了，一般不推荐使用。\"]},\"344\":{\"h\":\"fmt\",\"t\":[\"我们可以使用fmt包提供的几个函数，用起来跟 C 差不多。\",\"// 扫描从os.Stdin读入的文本，根据空格分隔，换行也被当作空格 func Scan(a ...any) (n int, err error) // 与Scan类似，但是遇到换行停止扫描 func Scanln(a ...any) (n int, err error) // 根据格式化的字符串扫描 func Scanf(format string, a ...any) (n int, err error)\",\"读取两个数字\",\"func main() { var a, b int fmt.Scanln(&a, &b) fmt.Printf(\\\"%d + %d = %d\\\\n\\\", a, b, a+b) }\",\"读取固定长度的数组\",\"func main() { n := 10 s := make([]int, n) for i := range n { fmt.Scan(&s[i]) } fmt.Println(s) }\",\"1 2 3 4 5 6 7 8 9 10 [1 2 3 4 5 6 7 8 9 10]\"]},\"345\":{\"h\":\"bufio\",\"t\":[\"在有大量输入需要读取的时候，就建议使用bufio.Reader来进行内容读取\",\"func main() { reader := bufio.NewReader(os.Stdin) var a, b int fmt.Fscanln(reader, &a, &b) fmt.Printf(\\\"%d + %d = %d\\\\n\\\", a, b, a+b) }\"]},\"346\":{\"h\":\"scanner\",\"t\":[\"bufio.Scanner与bufio.Reader类似，不过它是按行读取的。\",\"func main() { scanner := bufio.NewScanner(os.Stdin) for scanner.Scan() { line := scanner.Text() if line == \\\"exit\\\" { break } fmt.Println(\\\"scan\\\", line) } }\",\"结果如下\",\"first line scan first line second line scan second line third line scan third line exit\",\"提示\",\"在输入输出这方面，想要练手的话，去洛谷做几道简单的 ACM 模式算法题就能上手熟悉了。\"]},\"347\":{\"h\":\"条件控制\",\"t\":[\"在 Go 中，条件控制语句总共有三种if，switch，select。select相对前两者而言比较特殊，本节不会讲解，将会留到并发那一节再做介绍。\"]},\"348\":{\"h\":\"if else\",\"t\":[\"if else 至多两个判断分支，语句格式如下\",\"if expression { }\",\"或者\",\"if expression { }else { }\",\"expression必须是一个布尔表达式，即结果要么为真要么为假，必须是一个布尔值，例子如下：\",\"func main() { a, b := 1, 2 if a > b { b++ } else { a++ } }\",\"也可以把表达式写的更复杂些，必要时为了提高可读性，应当使用括号来显式的表示谁应该优先计算。\",\"func main() { a, b := 1, 2 if a<<1%100+3 > b*100/20+6 { // (a<<1%100)+3 > (b*100/20)+6 b++ } else { a++ } }\",\"同时if语句也可以包含一些简单的语句，例如：\",\"func main() { if x := 1 + 1; x > 2 { fmt.Println(x) } }\"]},\"349\":{\"h\":\"else if\",\"t\":[\"else if 语句可以在if else的基础上创建更多的判断分支，语句格式如下：\",\"if expression1 { }else if expression2 { }else if expression3 { }else { }\",\"在执行的过程中每一个表达式的判断是从左到右，整个if语句的判断是从上到下 。一个根据成绩打分的例子如下，第一种写法\",\"func main() { score := 90 var ans string if score == 100 { ans = \\\"S\\\" } else if score >= 90 && score < 100 { ans = \\\"A\\\" } else if score >= 80 && score < 90 { ans = \\\"B\\\" } else if score >= 70 && score < 80 { ans = \\\"C\\\" } else if score >= 60 && score < 70 { ans = \\\"E\\\" } else if score >= 0 && score < 60 { ans = \\\"F\\\" } else { ans = \\\"nil\\\" } fmt.Println(ans) }\",\"第二种写法利用了if语句是从上到下的判断的前提，所以代码要更简洁些。\",\"func main() { score := 90 var ans string if score >= 0 && score < 60 { ans = \\\"F\\\" } else if score < 70 { ans = \\\"D\\\" } else if score < 80 { ans = \\\"C\\\" } else if score < 90 { ans = \\\"B\\\" } else if score < 100 { ans = \\\"A\\\" } else if score == 100 { ans = \\\"S\\\" }else { ans = \\\"nil\\\" } fmt.Println(ans) }\"]},\"350\":{\"h\":\"switch\",\"t\":[\"switch语句也是一种多分支的判断语句，语句格式如下：\",\"switch expr { case case1: statement1 case case2: statement2 default: default statement }\",\"一个简单的例子如下\",\"func main() { str := \\\"a\\\" switch str { case \\\"a\\\": str += \\\"a\\\" str += \\\"c\\\" case \\\"b\\\": str += \\\"bb\\\" str += \\\"aaaa\\\" default: // 当所有case都不匹配后，就会执行default分支 str += \\\"CCCC\\\" } fmt.Println(str) }\",\"还可以在表达式之前编写一些简单语句，例如声明新变量\",\"func main() { switch num := f(); { // 等价于 switch num := f(); true { case num >= 0 && num <= 1: num++ case num > 1: num-- fallthrough case num < 0: num += num } } func f() int { return 1 }\",\"switch语句也可以没有入口处的表达式。\",\"func main() { num := 2 switch { // 等价于 switch true { case num >= 0 && num <= 1: num++ case num > 1: num-- case num < 0: num *= num } fmt.Println(num) }\",\"通过fallthrough关键字来继续执行相邻的下一个分支。\",\"func main() { num := 2 switch { case num >= 0 && num <= 1: num++ case num > 1: num-- fallthrough // 执行完该分支后，会继续执行下一个分支 case num < 0: num += num } fmt.Println(num) }\"]},\"351\":{\"h\":\"label\",\"t\":[\"标签语句，给一个代码块打上标签，可以是goto，break，continue的目标。例子如下：\",\"func main() { A: a := 1 B: b := 2 }\",\"单纯的使用标签是没有任何意义的，需要结合其他关键字来进行使用。\"]},\"352\":{\"h\":\"goto\",\"t\":[\"goto将控制权传递给在同一函数中对应标签的语句，示例如下：\",\"func main() { a := 1 if a == 1 { goto A } else { fmt.Println(\\\"b\\\") } A: fmt.Println(\\\"a\\\") }\",\"在实际应用中goto用的很少，跳来跳去的很降低代码可读性，性能消耗也是一个问题。\"]},\"353\":{\"h\":\"循环控制\",\"t\":[\"在 Go 中，有仅有一种循环语句：for，Go 抛弃了while语句，for语句可以被当作while来使用。\"]},\"354\":{\"h\":\"for\",\"t\":[\"语句格式如下\",\"for init statement; expression; post statement { execute statement }\",\"当只保留循环条件时，就变成了while。\",\"for expression { execute statement }\",\"这是一个死循环，永远也不会退出\",\"for { execute statement }\",\"示例\",\"这是一段输出[0,20]区间数字的代码\",\"for i := 0; i <= 20; i++ { fmt.Println(i) }\",\"你可以同时初始化多个变量，然后将其递增\",\"for i, j := 1, 2; i < 100 && j < 1000; i, j = i+1, j+1 { fmt.Println(i, j) }\",\"当成while来使用\",\"num := 1 for num < 100 { num *= 2 }\",\"双循环打印九九乘法表，这是一个很经典的循环案例\",\"func main() { for i := 1; i <= 9; i++ { for j := 1; j <= 9; j++ { if i <= j { fmt.Printf(\\\"%d*%d = %2d \\\", i, j, i*j) } } fmt.Println() } }\",\"输出如下\",\"1*1 = 1 1*2 = 2 1*3 = 3 1*4 = 4 1*5 = 5 1*6 = 6 1*7 = 7 1*8 = 8 1*9 = 9 2*2 = 4 2*3 = 6 2*4 = 8 2*5 = 10 2*6 = 12 2*7 = 14 2*8 = 16 2*9 = 18 3*3 = 9 3*4 = 12 3*5 = 15 3*6 = 18 3*7 = 21 3*8 = 24 3*9 = 27 4*4 = 16 4*5 = 20 4*6 = 24 4*7 = 28 4*8 = 32 4*9 = 36 5*5 = 25 5*6 = 30 5*7 = 35 5*8 = 40 5*9 = 45 6*6 = 36 6*7 = 42 6*8 = 48 6*9 = 54 7*7 = 49 7*8 = 56 7*9 = 63 8*8 = 64 8*9 = 72 9*9 = 81\"]},\"355\":{\"h\":\"for range\",\"t\":[\"for range可以更加方便的遍历一些可迭代的数据结构，如数组，切片，字符串，映射表，通道。语句格式如下：\",\"for index, value := range iterable { // body }\",\"index为可迭代数据结构的索引，value则是对应索引下的值，例如使用for range遍历一个字符串。\",\"func main() { sequence := \\\"hello world\\\" for index, value := range sequence { fmt.Println(index, value) } }\",\"for range也可以迭代一个整型值，字面量，常量，变量都是有效的。\",\"for i := range 10 { fmt.Println(i) } n := 10 for i := range n { fmt.Println(i) } const n = 10 for i := range n { fmt.Println(i) }\",\"对于每一个种数据结构，for range的实现都有所不同，后续也会讲到，你可以前往Go - for statement以了解更多细节。\"]},\"356\":{\"h\":\"break\",\"t\":[\"break关键字会终止最内层的for循环，结合标签一起使用可以达到终止外层循环的效果，例子如下：这是一个双循环\",\"func main() { for i := 0; i < 10; i++ { for j := 0; j < 10; j++ { if i <= j { break } fmt.Println(i, j) } } }\",\"输出\",\"1 0 2 0 2 1 3 0 3 1 3 2 ... 9 6 9 7 9 8\",\"使用标签来中断外层循环\",\"func main() { Outer: for i := 0; i < 10; i++ { for j := 0; j < 10; j++ { if i <= j { break Outer } fmt.Println(i, j) } } }\",\"输出\"]},\"357\":{\"h\":\"continue\",\"t\":[\"continue关键字会跳过最内层循环的本次迭代，直接进入下一次迭代，结合标签使用可以达到跳过外层循环的效果，例子如下\",\"func main() { for i := 0; i < 10; i++ { for j := 0; j < 10; j++ { if i > j { continue } fmt.Println(i, j) } } }\",\"输出\",\"0 0 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 8 0 9 ... 7 7 7 8 7 9 8 8 8 9 9 9\",\"使用标签\",\"func main() { Out: for i := 0; i < 10; i++ { for j := 0; j < 10; j++ { if i > j { continue Out } fmt.Println(i, j) } } }\",\"输出\",\"0 0 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 8 0 9\"]},\"358\":{\"h\":\"切片\",\"t\":[\"在 Go 中，数组和切片两者看起来长得几乎一模一样，但功能有着不小的区别，数组是定长的数据结构，长度被指定后就不能被改变，而切片是不定长的，切片在容量不够时会自行扩容。\"]},\"359\":{\"h\":\"数组\",\"t\":[\"如果事先就知道了要存放数据的长度，且后续使用中不会有扩容的需求，就可以考虑使用数组，Go 中的数组是值类型，而非引用，并不是指向头部元素的指针。\",\"提示\",\"数组作为值类型，将数组作为参数传递给函数时，由于 Go 函数是传值传递，所以会将整个数组拷贝。\"]},\"360\":{\"h\":\"初始化\",\"t\":[\"数组在声明是长度只能是一个常量，不能是变量\",\"// 正确示例 var a [5]int // 错误示例 l := 1 var b [l]int\",\"先来初始化一个长度为 5 的整型数组\",\"var nums [5]int\",\"也可以用元素初始化\",\"nums := [5]int{1, 2, 3}\",\"可以让编译器自动推断长度\",\"nums := [...]int{1, 2, 3, 4, 5} //等价于nums := [5]int{1, 2, 3, 4, 5}，省略号必须存在，否则生成的是切片，不是数组\",\"还可以通过new函数获得一个指针\",\"nums := new([5]int)\",\"以上几种方式都会给nums分配一片固定大小的内存，区别只是最后一种得到的值是指针。\",\"在数组初始化时，需要注意的是，长度必须为一个常量表达式，否则将无法通过编译，常量表达式即表达式的最终结果是一个常量，错误例子如下：\",\"length := 5 // 这是一个变量 var nums [length]int\",\"length是一个变量，因此无法用于初始化数组长度，如下是正确示例：\",\"const length = 5 var nums [length]int // 常量 var nums2 [length + 1]int // 常量表达式 var nums3 [(1 + 2 + 3) * 5]int // 常量表达式 var nums4 [5]int // 最常用的\"]},\"361\":{\"h\":\"使用\",\"t\":[\"只要有数组名和下标，就可以访问数组中对应的元素。\",\"fmt.Println(nums[0])\",\"同样的也可以修改数组元素\",\"nums[0] = 1\",\"还可以通过内置函数len来访问数组元素的数量\",\"len(nums)\",\"内置函数cap来访问数组容量，数组的容量等于数组长度，容量对于切片才有意义。\",\"cap(nums)\"]},\"362\":{\"h\":\"切割\",\"t\":[\"切割数组的格式为arr[startIndex:endIndex]，切割的区间为左闭右开，例子如下：\",\"nums := [5]int{1, 2, 3, 4, 5} nums[1:] // 子数组范围[1,5) -> [2 3 4 5] nums[:5] // 子数组范围[0,5) -> [1 2 3 4 5] nums[2:3] // 子数组范围[2,3) -> [3] nums[1:3] // 子数组范围[1,3) -> [2 3]\",\"数组在切割后，就会变为切片类型\",\"func main() { arr := [5]int{1, 2, 3, 4, 5} fmt.Printf(\\\"%T\\\\n\\\", arr) fmt.Printf(\\\"%T\\\\n\\\", arr[1:2]) }\",\"输出\",\"[5]int []int\",\"若要将数组转换为切片类型，不带参数进行切片即可，转换后的切片与原数组指向的是同一片内存，修改切片会导致原数组内容的变化\",\"func main() { arr := [5]int{1, 2, 3, 4, 5} slice := arr[:] slice[0] = 0 fmt.Printf(\\\"array: %v\\\\n\\\", arr) fmt.Printf(\\\"slice: %v\\\\n\\\", slice) }\",\"输出\",\"array: [0 2 3 4 5] slice: [0 2 3 4 5]\",\"如果要对转换后的切片进行修改，建议使用下面这种方式进行转换\",\"func main() { arr := [5]int{1, 2, 3, 4, 5} slice := slices.Clone(arr[:]) slice[0] = 0 fmt.Printf(\\\"array: %v\\\\n\\\", arr) fmt.Printf(\\\"slice: %v\\\\n\\\", slice) }\",\"输出\",\"array: [1 2 3 4 5] slice: [0 2 3 4 5]\"]},\"363\":{\"h\":\"切片\",\"t\":[\"切片在 Go 中的应用范围要比数组广泛的多，它用于存放不知道长度的数据，且后续使用过程中可能会频繁的插入和删除元素。\"]},\"364\":{\"h\":\"初始化\",\"t\":[\"切片的初始化方式有以下几种\",\"var nums []int // 值 nums := []int{1, 2, 3} // 值 nums := make([]int, 0, 0) // 值 nums := new([]int) // 指针\",\"可以看到切片与数组在外貌上的区别，仅仅只是少了一个初始化长度。通常情况下，推荐使用make来创建一个空切片，只是对于切片而言，make函数接收三个参数：类型，长度，容量。举个例子解释一下长度与容量的区别，假设有一桶水，水并不是满的，桶的高度就是桶的容量，代表着总共能装多少高度的水，而桶中水的高度就是代表着长度，水的高度一定小于等于桶的高度，否则水就溢出来了。所以，切片的长度代表着切片中元素的个数，切片的容量代表着切片总共能装多少个元素，切片与数组最大的区别在于切片的容量会自动扩张，而数组不会，更多细节前往参考手册 - 长度与容量。\",\"提示\",\"切片的底层实现依旧是数组，是引用类型，可以简单理解为是指向底层数组的指针。\",\"通过var nums []int这种方式声明的切片，默认值为nil，所以不会为其分配内存，而在使用make进行初始化时，建议预分配一个足够的容量，可以有效减少后续扩容的内存消耗。\"]},\"365\":{\"h\":\"使用\",\"t\":[\"切片的基本使用与数组完全一致，区别只是切片可以动态变化长度，下面看几个例子。\",\"切片可以通过append函数实现许多操作，函数签名如下，slice是要添加元素的目标切片，elems是待添加的元素，返回值是添加后的切片。\",\"func append(slice []Type, elems ...Type) []Type\",\"首先创建一个长度为 0，容量为 0 的空切片，然后在尾部插入一些元素，最后输出长度和容量。\",\"nums := make([]int, 0, 0) nums = append(nums, 1, 2, 3, 4, 5, 6, 7) fmt.Println(len(nums), cap(nums)) // 7 8 可以看到长度与容量并不一致。\",\"新 slice 预留的 buffer 容量 大小是有一定规律的。 在 golang1.18 版本更新之前网上大多数的文章都是这样描述 slice 的扩容策略的： 当原 slice 容量小于 1024 的时候，新 slice 容量变成原来的 2 倍；原 slice 容量超过 1024，新 slice 容量变成原来的 1.25 倍。 在 1.18 版本更新之后，slice 的扩容策略变为了： 当原 slice 容量(oldcap)小于 256 的时候，新 slice(newcap)容量为原来的 2 倍；原 slice 容量超过 256，新 slice 容量 newcap = oldcap+(oldcap+3*256)/4\"]},\"366\":{\"h\":\"插入元素\",\"t\":[\"切片元素的插入也是需要结合append函数来使用，现有切片如下，\",\"nums := []int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}\",\"从头部插入元素\",\"nums = append([]int{-1, 0}, nums...) fmt.Println(nums) // [-1 0 1 2 3 4 5 6 7 8 9 10]\",\"从中间下标 i 插入元素\",\"nums = append(nums[:i+1], append([]int{999, 999}, nums[i+1:]...)...) fmt.Println(nums) // i=3，[1 2 3 4 999 999 5 6 7 8 9 10]\",\"从尾部插入元素，就是append最原始的用法\",\"nums = append(nums, 99, 100) fmt.Println(nums) // [1 2 3 4 5 6 7 8 9 10 99 100]\"]},\"367\":{\"h\":\"删除元素\",\"t\":[\"切片元素的删除需要结合append函数来使用，现有如下切片\",\"nums := []int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}\",\"从头部删除 n 个元素\",\"nums = nums[n:] fmt.Println(nums) //n=3 [4 5 6 7 8 9 10]\",\"从尾部删除 n 个元素\",\"nums = nums[:len(nums)-n] fmt.Println(nums) //n=3 [1 2 3 4 5 6 7]\",\"从中间指定下标 i 位置开始删除 n 个元素\",\"nums = append(nums[:i], nums[i+n:]...) fmt.Println(nums)// i=2，n=3，[1 2 6 7 8 9 10]\",\"删除所有元素\",\"nums = nums[:0] fmt.Println(nums) // []\"]},\"368\":{\"h\":\"拷贝\",\"t\":[\"切片在拷贝时需要确保目标切片有足够的长度，例如\",\"func main() { dest := make([]int, 0) src := []int{1, 2, 3, 4, 5, 6, 7, 8, 9} fmt.Println(src, dest) fmt.Println(copy(dest, src)) fmt.Println(src, dest) }\",\"[1 2 3 4 5 6 7 8 9] [] 0 [1 2 3 4 5 6 7 8 9] []\",\"将长度修改为 10，输出如下\",\"[1 2 3 4 5 6 7 8 9] [0 0 0 0 0 0 0 0 0 0] 9 [1 2 3 4 5 6 7 8 9] [1 2 3 4 5 6 7 8 9 0]\"]},\"369\":{\"h\":\"遍历\",\"t\":[\"切片的遍历与数组完全一致，for循环\",\"func main() { slice := []int{1, 2, 3, 4, 5, 7, 8, 9} for i := 0; i < len(slice); i++ { fmt.Println(slice[i]) } }\",\"for range循环\",\"func main() { slice := []int{1, 2, 3, 4, 5, 7, 8, 9} for index, val := range slice { fmt.Println(index, val) } }\"]},\"370\":{\"h\":\"多维切片\",\"t\":[\"先来看下面的一个例子，官方文档也有解释：Effective Go - 二维切片\",\"var nums [5][5]int for _, num := range nums { fmt.Println(num) } fmt.Println() slices := make([][]int, 5) for _, slice := range slices { fmt.Println(slice) }\",\"输出结果为\",\"[0 0 0 0 0] [0 0 0 0 0] [0 0 0 0 0] [0 0 0 0 0] [0 0 0 0 0] [] [] [] [] []\",\"可以看到，同样是二维的数组和切片，其内部结构是不一样的。数组在初始化时，其一维和二维的长度早已固定，而切片的长度是不固定的，切片中的每一个切片长度都可能是不相同的，所以必须要单独初始化，切片初始化部分修改为如下代码即可。\",\"slices := make([][]int, 5) for i := 0; i < len(slices); i++ { slices[i] = make([]int, 5) }\",\"最终输出结果为\",\"[0 0 0 0 0] [0 0 0 0 0] [0 0 0 0 0] [0 0 0 0 0] [0 0 0 0 0] [0 0 0 0 0] [0 0 0 0 0] [0 0 0 0 0] [0 0 0 0 0] [0 0 0 0 0]\"]},\"371\":{\"h\":\"拓展表达式\",\"t\":[\"提示\",\"只有切片才能使用拓展表达式\",\"切片与数组都可以使用简单表达式来进行切割，但是拓展表达式只有切片能够使用，该特性于 Go1.2 版本添加，主要是为了解决切片共享底层数组的读写问题，主要格式为如下，需要满足关系low<= high <= max <= cap，使用拓展表达式切割的切片容量为max-low\",\"slice[low:high:max]\",\"low与high依旧是原来的含义不变，而多出来的max则指的是最大容量，例如下方的例子中省略了max，那么s2的容量就是cap(s1)-low\",\"s1 := []int{1, 2, 3, 4, 5, 6, 7, 8, 9} // cap = 9 s2 := s1[3:4] // cap = 9 - 3 = 6\",\"那么这么做就会有一个明显的问题，s1与s2是共享的同一个底层数组，在对s2进行读写时，有可能会影响的s1的数据，下列代码就属于这种情况\",\"s1 := []int{1, 2, 3, 4, 5, 6, 7, 8, 9} // cap = 9 s2 := s1[3:4] // cap = 9 - 3 = 6 // 添加新元素，由于容量为6.所以没有扩容，直接修改底层数组 s2 = append(s2, 1) fmt.Println(s2) fmt.Println(s1)\",\"最终的输出为\",\"[4 1] [1 2 3 4 1 6 7 8 9]\",\"可以看到明明是向s2添加元素，却连s1也一起修改了，拓展表达式就是为了解决此类问题而生的，只需要稍微修改一下就能解决该问题\",\"func main() { s1 := []int{1, 2, 3, 4, 5, 6, 7, 8, 9} // cap = 9 s2 := s1[3:4:4] // cap = 4 - 3 = 1 // 容量不足，分配新的底层数组 s2 = append(s2, 1) fmt.Println(s2) fmt.Println(s1) }\",\"现在得到的结果就是正常的\",\"[4 1] [1 2 3 4 5 6 7 8 9]\"]},\"372\":{\"h\":\"clear\",\"t\":[\"在 go1.21 新增了clear内置函数，clear 会将切片内所有的值置为零值，\",\"package main import ( \\\"fmt\\\" ) func main() { s := []int{1, 2, 3, 4} clear(s) fmt.Println(s) }\",\"输出\",\"[0 0 0 0]\",\"如果想要清空切片，可以\",\"func main() { s := []int{1, 2, 3, 4} s = s[:0:0] fmt.Println(s) }\",\"限制了切割后的容量，这样可以避免覆盖原切片的后续元素。\"]},\"373\":{\"h\":\"字符串\",\"t\":[\"在 Go 中，字符串本质上是一个不可变的只读的字节数组，也是一片连续的内存空间。\"]},\"374\":{\"h\":\"字面量\",\"t\":[\"前面提到过字符串有两种字面量表达方式，分为普通字符串和原生字符串。\",\"普通字符串\",\"普通字符串由\\\"\\\"双引号表示，支持转义，不支持多行书写，下列是一些普通字符串\",\"\\\"这是一个普通字符串\\\\n\\\" \\\"abcdefghijlmn\\\\nopqrst\\\\t\\\\\\\\uvwxyz\\\"\",\"这是一个普通字符串 abcdefghijlmn opqrst \\\\uvwxyz\",\"原生字符串\",\"原生字符串由反引号表示，不支持转义，支持多行书写，原生字符串里面所有的字符都会原封不动的输出，包括换行和缩进。\",\"`这是一个原生字符串，换行 tab缩进，\\\\t制表符但是无效,换行 \\\"这是一个普通字符串\\\" 结束 `\",\"这是一个原生字符串，换行 tab缩进，\\\\t制表符但是无效,换行 \\\"这是一个普通字符串\\\" 结束\"]},\"375\":{\"h\":\"访问\",\"t\":[\"因为字符串本质是字节数组，所以字符串的访问形式跟数组切片完全一致，例如访问字符串第一个元素\",\"func main() { str := \\\"this is a string\\\" fmt.Println(str[0]) }\",\"输出是字节而不是字符\",\"116\",\"切割字符串\",\"func main() { str := \\\"this is a string\\\" fmt.Println(string(str[0:4])) }\",\"this\",\"尝试修改字符串元素\",\"func main() { str := \\\"this is a string\\\" str[0] = 'a' // 无法通过编译 fmt.Println(str) }\",\"main.go:7:2: cannot assign to str[0] (value of type byte)\",\"虽然没法修改字符串，但是可以覆盖\",\"func main() { str := \\\"this is a string\\\" str = \\\"that is a string\\\" fmt.Println(str) }\",\"that is a string\"]},\"376\":{\"h\":\"转换\",\"t\":[\"字符串可以转换为字节切片，而字节切片或字节数组也可以转换为字符串，例子如下：\",\"func main() { str := \\\"this is a string\\\" // 显式类型转换为字节切片 bytes := []byte(str) fmt.Println(bytes) // 显式类型转换为字符串 fmt.Println(string(bytes)) }\",\"字符串的内容是只读的不可变的，无法修改，但是字节切片是可以修改的。\",\"func main() { str := \\\"this is a string\\\" fmt.Println(&str) bytes := []byte(str) // 修改字节切片 bytes = append(bytes, 96, 97, 98, 99) // 赋值给原字符串 str = string(bytes) fmt.Println(str) }\",\"将字符串转换成字节切片以后，两者之间毫无关联，因为 Go 会新分配一片内存空间给字节切片，再将字符串的内存复制过去，对字节切片进行修改不会对原字符串产生任何影响，这么做是为了内存安全。\",\"在这种情况下，如果要转换的字符串或字节切片很大，那么性能开销就会很高。不过你也可以通过unsafe库来实现无复制转换，不过背后的安全问题需要自己承担，比如下面的例子，b1 和 s1 的地址是一样的。\",\"func main() { s1 := \\\"hello world\\\" b1 := unsafe.Slice(unsafe.StringData(s1), len(s1)) fmt.Printf(\\\"%p %p\\\", unsafe.StringData(s1), unsafe.SliceData(b1)) }\",\"0xe27bb2 0xe27bb2\"]},\"377\":{\"h\":\"长度\",\"t\":[\"字符串的长度，其实并不是字面量的长度，而是字节数组的长度，只是大多数时候都是ANSCII字符，刚好能用一个字节表示，所以恰好与字面量长度相等，求字符串长度使用内置函数len，例子如下：\",\"func main() { str := \\\"this is a string\\\" // 看起来长度是16 str2 := \\\"这是一个字符串\\\" // 看起来长度是7 fmt.Println(len(str), len(str2)) }\",\"16 21\",\"看起来中文字符串比英文字符串短，但是实际求得的长度却比英文字符串长。这是因为在unicode编码中，一个汉字在大多数情况下占 3 个字节，一个英文字符只占一个字节，通过输出字符串第一个元素可以看出结果：\",\"func main() { str := \\\"this is a string\\\" str2 := \\\"这是一个字符串\\\" fmt.Println(string(str[0])) fmt.Println(string(str2[0])) fmt.Println(string(str2[0:3])) }\",\"t // 字母t è // 意大利语 这 // 中文汉字\"]},\"378\":{\"h\":\"拷贝\",\"t\":[\"类似数组切片的拷贝方式，字符串拷贝其实是字节切片拷贝，使用内置函数copy\",\"func main() { var dst, src string src = \\\"this is a string\\\" desBytes := make([]byte, len(src)) copy(desBytes, src) dst = string(desBytes) fmt.Println(src, dst) }\",\"也可以使用strings.clone函数，但其实内部实现都差不多\",\"func main() { var dst, src string src = \\\"this is a string\\\" dst = strings.Clone(src) fmt.Println(src, dst) }\"]},\"379\":{\"h\":\"拼接\",\"t\":[\"字符串的拼接使用+操作符\",\"func main() { str := \\\"this is a string\\\" str = str + \\\" that is a int\\\" fmt.Println(str) }\",\"也可以转换为字节切片再进行添加元素\",\"func main() { str := \\\"this is a string\\\" bytes := []byte(str) bytes = append(bytes, \\\"that is a int\\\"...) str = string(bytes) fmt.Println(str) }\",\"以上两种拼接方式性能都很差，一般情况下可以使用，但如果对应性能有更高要求，可以使用strings.Builder\",\"func main() { builder := strings.Builder{} builder.WriteString(\\\"this is a string \\\") builder.WriteString(\\\"that is a int\\\") fmt.Println(builder.String()) }\",\"this is a string that is a int\"]},\"380\":{\"h\":\"遍历\",\"t\":[\"在本文开头就已经提到过，Go 中的字符串就是一个只读的字节切片，也就是说字符串的组成单位是字节而不是字符。这种情况经常会在遍历字符串时遇到，例如下方的代码\",\"func main() { str := \\\"hello world!\\\" for i := 0; i < len(str); i++ { fmt.Printf(\\\"%d,%x,%s\\\\n\\\", str[i], str[i], string(str[i])) } }\",\"例子中分别输出了字节的十进制形式和十六进制形式。\",\"104,68,h 101,65,e 108,6c,l 108,6c,l 111,6f,o 32,20, 119,77,w 111,6f,o 114,72,r 108,6c,l 100,64,d 33,21,!\",\"由于例子中的字符都是属于 ASCII 字符，只需要一个字节就能表示，所以结果恰巧每一个字节对应一个字符。但如果包含非 ASCII 字符结果就不同了，如下\",\"func main() { str := \\\"hello 世界!\\\" for i := 0; i < len(str); i++ { fmt.Printf(\\\"%d,%x,%s\\\\n\\\", str[i], str[i], string(str[i])) } }\",\"通常情况下，一个中文字符会占用 3 个字节，所以就可能会看到以下结果\",\"104,68,h 101,65,e 108,6c,l 108,6c,l 111,6f,o 32,20, 228,e4,ä 184,b8,¸ 150,96, 231,e7,ç 149,95, 140,8c, 33,21,!\",\"按照字节来遍历会把中文字符拆开，这显然会出现乱码。Go 字符串是明确支持 utf8 的，应对这种情况就需要用到rune类型，在使用for range进行遍历时，其默认的遍历单位类型就是一个rune，例如下方代码\",\"func main() { str := \\\"hello 世界!\\\" for _, r := range str { fmt.Printf(\\\"%d,%x,%s\\\\n\\\", r, r, string(r)) } }\",\"输出如下\",\"104,68,h 101,65,e 108,6c,l 108,6c,l 111,6f,o 32,20, 19990,4e16,世 30028,754c,界 33,21,!\",\"rune本质上是int32的类型别名，unicode 字符集的范围位于 0x0000 - 0x10FFFF 之间，最大也只有三个字节，合法的 UTF8 编码最大字节数只有 4 个字节，所以使用int32来存储是理所当然，上述例子中将字符串转换成[]rune再遍历也是一样的道理，如下\",\"func main() { str := \\\"hello 世界!\\\" runes := []rune(str) for i := 0; i < len(runes); i++ { fmt.Println(string(runes[i])) } }\",\"还可以使用uft8包下的工具，例如\",\"func main() { str := \\\"hello 世界!\\\" for i, w := 0, 0; i < len(str); i += w { r, width := utf8.DecodeRuneInString(str[i:]) fmt.Println(string(r)) w = width } }\",\"这两个例子的输出都是相同的。\",\"提示\",\"关于字符串的更多细节，可以前往Strings, bytes, runes and characters in Go了解。\"]},\"381\":{\"h\":\"映射表\",\"t\":[\"一般来说，映射表数据结构实现通常有两种，哈希表(hash table)和搜索树(search tree)，区别在于前者无序，后者有序。在 Go 中，map的实现是基于哈希桶(也是一种哈希表)，所以也是无序的，本篇不会对实现原理做过多的讲解，这超出了基础的范围，后续会进行深入分析。\",\"提示\",\"想要了解 map 的原理可以前往map 实现\"]},\"382\":{\"h\":\"初始化\",\"t\":[\"在 Go 中，map 的键类型必须是可比较的，比如string ，int是可比较的，而[]int是不可比较的，也就无法作为 map 的键。初始化一个 map 有两种方法，第一种是字面量，格式如下：\",\"map[keyType]valueType{}\",\"举几个例子\",\"mp := map[int]string{ 0: \\\"a\\\", 1: \\\"a\\\", 2: \\\"a\\\", 3: \\\"a\\\", 4: \\\"a\\\", } mp := map[string]int{ \\\"a\\\": 0, \\\"b\\\": 22, \\\"c\\\": 33, }\",\"第二种方法是使用内置函数make，对于 map 而言，接收两个参数，分别是类型与初始容量，例子如下：\",\"mp := make(map[string]int, 8) mp := make(map[string][]int, 10)\",\"map 是引用类型，零值或未初始化的 map 可以访问，但是无法存放元素，所以必须要为其分配内存。\",\"func main() { var mp map[string]int mp[\\\"a\\\"] = 1 fmt.Println(mp) }\",\"panic: assignment to entry in nil map\",\"提示\",\"在初始化 map 时应当尽量分配一个合理的容量，以减少扩容次数。\"]},\"383\":{\"h\":\"访问\",\"t\":[\"访问一个 map 的方式就像通过索引访问一个数组一样。\",\"func main() { mp := map[string]int{ \\\"a\\\": 0, \\\"b\\\": 1, \\\"c\\\": 2, \\\"d\\\": 3, } fmt.Println(mp[\\\"a\\\"]) fmt.Println(mp[\\\"b\\\"]) fmt.Println(mp[\\\"d\\\"]) fmt.Println(mp[\\\"f\\\"]) }\",\"0 1 3 0\",\"通过代码可以观察到，即使 map 中不存在\\\"f\\\"这一键值对，但依旧有返回值。map 对于不存的键其返回值是对应类型的零值，并且在访问 map 的时候其实有两个返回值，第一个返回值对应类型的值，第二个返回值一个布尔值，代表键是否存在，例如：\",\"func main() { mp := map[string]int{ \\\"a\\\": 0, \\\"b\\\": 1, \\\"c\\\": 2, \\\"d\\\": 3, } if val, exist := mp[\\\"f\\\"]; exist { fmt.Println(val) } else { fmt.Println(\\\"key不存在\\\") } }\",\"对 map 求长度\",\"func main() { mp := map[string]int{ \\\"a\\\": 0, \\\"b\\\": 1, \\\"c\\\": 2, \\\"d\\\": 3, } fmt.Println(len(mp)) }\"]},\"384\":{\"h\":\"存值\",\"t\":[\"map 存值的方式也类似数组存值一样，例如：\",\"func main() { mp := make(map[string]int, 10) mp[\\\"a\\\"] = 1 mp[\\\"b\\\"] = 2 fmt.Println(mp) }\",\"存值时使用已存在的键会覆盖原有的值\",\"func main() { mp := make(map[string]int, 10) mp[\\\"a\\\"] = 1 mp[\\\"b\\\"] = 2 if _, exist := mp[\\\"b\\\"]; exist { mp[\\\"b\\\"] = 3 } fmt.Println(mp) }\",\"但是也存在一个特殊情况，那就是键为math.NaN()时\",\"func main() { mp := make(map[float64]string, 10) mp[math.NaN()] = \\\"a\\\" mp[math.NaN()] = \\\"b\\\" mp[math.NaN()] = \\\"c\\\" _, exist := mp[math.NaN()] fmt.Println(exist) fmt.Println(mp) }\",\"false map[NaN:c NaN:a NaN:b]\",\"通过结果可以观察到相同的键值并没有覆盖，反而还可以存在多个，也无法判断其是否存在，也就无法正常取值。因为 NaN 是 IEE754 标准所定义的，其实现是由底层的汇编指令UCOMISD完成，这是一个无序比较双精度浮点数的指令，该指令会考虑到 NaN 的情况，因此结果就是任何数字都不等于 NaN，NaN 也不等于自身，这也造成了每次哈希值都不相同。关于这一点社区也曾激烈讨论过，但是官方认为没有必要去修改，所以应当尽量避免使用 NaN 作为 map 的键。\"]},\"385\":{\"h\":\"删除\",\"t\":[\"func delete(m map[Type]Type1, key Type)\",\"删除一个键值对需要用到内置函数delete，例如\",\"func main() { mp := map[string]int{ \\\"a\\\": 0, \\\"b\\\": 1, \\\"c\\\": 2, \\\"d\\\": 3, } fmt.Println(mp) delete(mp, \\\"a\\\") fmt.Println(mp) }\",\"map[a:0 b:1 c:2 d:3] map[b:1 c:2 d:3]\",\"需要注意的是，如果值为 NaN，甚至没法删除该键值对。\",\"func main() { mp := make(map[float64]string, 10) mp[math.NaN()] = \\\"a\\\" mp[math.NaN()] = \\\"b\\\" mp[math.NaN()] = \\\"c\\\" fmt.Println(mp) delete(mp, math.NaN()) fmt.Println(mp) }\",\"map[NaN:c NaN:a NaN:b] map[NaN:c NaN:a NaN:b]\"]},\"386\":{\"h\":\"遍历\",\"t\":[\"通过for range可以遍历 map，例如\",\"func main() { mp := map[string]int{ \\\"a\\\": 0, \\\"b\\\": 1, \\\"c\\\": 2, \\\"d\\\": 3, } for key, val := range mp { fmt.Println(key, val) } }\",\"c 2 d 3 a 0 b 1\",\"可以看到结果并不是有序的，也印证了 map 是无序存储。值得一提的是，NaN 虽然没法正常获取，但是可以通过遍历访问到，例如\",\"func main() { mp := make(map[float64]string, 10) mp[math.NaN()] = \\\"a\\\" mp[math.NaN()] = \\\"b\\\" mp[math.NaN()] = \\\"c\\\" for key, val := range mp { fmt.Println(key, val) } }\",\"NaN a NaN c NaN b\"]},\"387\":{\"h\":\"清空\",\"t\":[\"在 go1.21 之前，想要清空 map，就只能对每一个 map 的 key 进行 delete\",\"func main() { m := map[string]int{ \\\"a\\\": 1, \\\"b\\\": 2, } for k, _ := range m { delete(m, k) } fmt.Println(m) }\",\"但是 go1.21 更新了 clear 函数，就不用再进行之前的操作了，只需要一个 clear 就可以清空\",\"func main() { m := map[string]int{ \\\"a\\\": 1, \\\"b\\\": 2, } clear(m) fmt.Println(m) }\",\"输出\",\"map[]\"]},\"388\":{\"h\":\"Set\",\"t\":[\"Set 是一种无序的，不包含重复元素的集合，Go 中并没有提供类似的数据结构实现，但是 map 的键正是无序且不能重复的，所以也可以使用 map 来替代 set。\",\"func main() { set := make(map[int]struct{}, 10) for i := 0; i < 10; i++ { set[rand.Intn(100)] = struct{}{} } fmt.Println(set) }\",\"map[0:{} 18:{} 25:{} 40:{} 47:{} 56:{} 59:{} 81:{} 87:{}]\",\"提示\",\"一个空的结构体不会占用内存\"]},\"389\":{\"h\":\"注意\",\"t\":[\"map 并不是一个并发安全的数据结构，Go 团队认为大多数情况下 map 的使用并不涉及高并发的场景，引入互斥锁会极大的降低性能，map 内部有读写检测机制，如果冲突会触发fatal error。例如下列情况有非常大的可能性会触发fatal。\",\"func main() { group.Add(10) // map mp := make(map[string]int, 10) for i := 0; i < 10; i++ { go func() { // 写操作 for i := 0; i < 100; i++ { mp[\\\"helloworld\\\"] = 1 } // 读操作 for i := 0; i < 10; i++ { fmt.Println(mp[\\\"helloworld\\\"]) } group.Done() }() } group.Wait() }\",\"fatal error: concurrent map writes\",\"在这种情况下，需要使用sync.Map来替代。\"]},\"390\":{\"h\":\"指针\",\"t\":[\"Go 保留了指针，在一定程度上保证了性能，同时为了更好的 GC 和安全考虑，又限制了指针的使用。\"]},\"391\":{\"h\":\"创建\",\"t\":[\"关于指针有两个常用的操作符，一个是取地址符&，另一个是解引用符*。对一个变量进行取地址，会返回对应类型的指针，例如：\",\"func main() { num := 2 p := &num fmt.Println(p) }\",\"指针存储的是变量num的地址\",\"0xc00001c088\",\"解引用符则有两个用途，第一个是访问指针所指向的元素，也就是解引用，例如\",\"func main() { num := 2 p := &num rawNum := *p fmt.Println(rawNum) }\",\"p是一个指针，对指针类型解引用就能访问到指针所指向的元素。还有一个用途就是声明一个指针，例如：\",\"func main() { var numPtr *int fmt.Println(numPtr) }\",\"<nil>\",\"*int即代表该变量的类型是一个int类型的指针，不过指针不能光声明，还得初始化，需要为其分配内存，否则就是一个空指针，无法正常使用。要么使用取地址符将其他变量的地址赋值给该指针，要么就使用内置函数new手动分配，例如：\",\"func main() { var numPtr *int numPtr = new(int) fmt.Println(numPtr) }\",\"更多的是使用短变量\",\"func main() { numPtr := new(int) fmt.Println(numPtr) }\",\"new函数只有一个参数那就是类型，并返回一个对应类型的指针，函数会为该指针分配内存，并且指针指向对应类型的零值，例如：\",\"func main() { fmt.Println(*new(string)) fmt.Println(*new(int)) fmt.Println(*new([5]int)) fmt.Println(*new([]float64)) }\",\" 0 [0 0 0 0 0] []\"]},\"392\":{\"h\":\"禁止指针运算\",\"t\":[\"在 Go 中是不支持指针运算的，也就是说指针无法偏移，先来看一段 C++代码：\",\"int main() { int arr[] = {1, 2, 3, 4, 5, 6, 7, 8, 9}; int *p = &arr[0]; cout << &arr << endl << p << endl << p + 1 << endl << &arr[1] << endl; }\",\"0x31d99ff880 0x31d99ff880 0x31d99ff884 0x31d99ff884\",\"可以看出数组的地址与数字第一个元素的地址一致，并且对指针加一运算后，其指向的元素为数组第二个元素。Go 中的数组也是如此，不过区别在于指针无法偏移，例如\",\"func main() { arr := [5]int{0, 1, 2, 3, 4} p := &arr println(&arr[0]) println(p) // 试图进行指针运算 p++ fmt.Println(p) }\",\"这样的程序将无法通过编译，报错如下\",\"main.go:10:2: invalid operation: p++ (non-numeric type *[5]int)\",\"提示\",\"标准库unsafe提供了许多用于低级编程的操作，其中就包括指针运算，前往标准库-unsafe了解细节。\"]},\"393\":{\"h\":\"new 和 make\",\"t\":[\"在前面的几节已经很多次提到过内置函数new和make，两者有点类似，但也有不同，下面复习下。\",\"func new(Type) *Type\",\"返回值是类型指针\",\"接收参数是类型\",\"专用于给指针分配内存空间\",\"func make(t Type, size ...IntegerType) Type\",\"返回值是值，不是指针\",\"接收的第一个参数是类型，不定长参数根据传入类型的不同而不同\",\"专用于给切片，映射表，通道分配内存。\",\"下面是一些例子：\",\"new(int) // int指针 new(string) // string指针 new([]int) // 整型切片指针 make([]int, 10, 100) // 长度为10，容量100的整型切片 make(map[string]int, 10) // 容量为10的映射表 make(chan int, 10) // 缓冲区大小为10的通道\"]},\"394\":{\"h\":\"函数\",\"t\":[\"在 Go 中，函数是一等公民，函数是 Go 最基础的组成部分，也是 Go 的核心。\"]},\"395\":{\"h\":\"声明\",\"t\":[\"函数的声明格式如下\",\"func 函数名([参数列表]) [返回值] { 函数体 }\",\"声明函数有两种办法，一种是通过func关键字直接声明，另一种就是通过var关键字来声明，如下所示\",\"func sum(a int, b int) int { return a + b } var sum = func(a int, b int) int { return a + b }\",\"函数签名由函数名称，参数列表，返回值组成，下面是一个完整的例子，函数名称为Sum，有两个int类型的参数a，b，返回值类型为int。\",\"func Sum(a int, b int) int { return a + b }\",\"还有一个非常重要的点，即 Go 中的函数不支持重载，像下面的代码就无法通过编译\",\"type Person struct { Name string Age int Address string Salary float64 } func NewPerson(name string, age int, address string, salary float64) *Person { return &Person{Name: name, Age: age, Address: address, Salary: salary} } func NewPerson(name string) *Person { return &Person{Name: name} }\",\"Go 的理念便是：如果签名不一样那就是两个完全不同的函数，那么就不应该取一样的名字，函数重载会让代码变得混淆和难以理解。这种理念是否正确见仁见智，至少在 Go 中你可以仅通过函数名就知道它是干什么的，而不需要去找它到底是哪一个重载。\"]},\"396\":{\"h\":\"参数\",\"t\":[\"Go 中的参数名可以不带名称，一般这种是在接口或函数类型声明时才会用到，不过为了可读性一般还是建议尽量给参数加上名称\",\"type ExWriter func(io.Writer) error type Writer interface { ExWrite([]byte) (int, error) }\",\"对于类型相同的参数而言，可以只需要声明一次类型，不过条件是它们必须相邻\",\"func Log(format string, a1, a2 any) { ... }\",\"变长参数可以接收 0 个或多个值，必须声明在参数列表的末尾，最典型的例子就是fmt.Printf函数。\",\"func Printf(format string, a ...any) (n int, err error) { return Fprintf(os.Stdout, format, a...) }\",\"值得一提的是，Go 中的函数参数是传值传递，即在传递参数时会拷贝实参的值。如果你觉得在传递切片或 map 时会复制大量的内存，我可以告诉你大可不必担心，因为这两个数据结构本质上都是指针。\"]},\"397\":{\"h\":\"返回值\",\"t\":[\"下面是一个简单的函数返回值的例子，Sum函数返回一个int类型的值。\",\"func Sum(a, b int) int { return a + b }\",\"当函数没有返回值时，不需要void，不带返回值即可。\",\"func ErrPrintf(format string, a ...any) { _, _ = fmt.Fprintf(os.Stderr, format, a...) }\",\"Go 允许函数有多个返回值，此时就需要用括号将返回值围起来。\",\"func Div(a, b float64) (float64, error) { if a == 0 { return math.NaN(), errors.New(\\\"0不能作为被除数\\\") } return a / b, nil }\",\"Go 也支持具名返回值，不能与参数名重复，使用具名返回值时，return关键字可以不需要指定返回哪些值。\",\"func Sum(a, b int) (ans int) { ans = a + b return }\",\"和参数一样，当有多个同类型的具名返回值时，可以省略掉重复的类型声明\",\"func SumAndMul(a, b int) (c, d int) { c = a + b d = a * b return }\",\"不管具名返回值如何声明，永远都是以return关键字后的值为最高优先级。\",\"func SumAndMul(a, b int) (c, d int) { c = a + b d = a * b // c，d将不会被返回 return a + b, a * b }\"]},\"398\":{\"h\":\"匿名函数\",\"t\":[\"匿名函数就是没有签名的函数，例如下面的函数func(a, b int) int，它没有名称，所以我们只能在它的函数体后紧跟括号来进行调用。\",\"func main() { func(a, b int) int { return a + b }(1, 2) }\",\"在调用一个函数时，当它的参数是一个函数类型时，这时名称不再重要，就可以直接传递一个匿名函数，如下所示\",\"type Person struct { Name string Age int Salary float64 } func main() { people := []Person{ {Name: \\\"Alice\\\", Age: 25, Salary: 5000.0}, {Name: \\\"Bob\\\", Age: 30, Salary: 6000.0}, {Name: \\\"Charlie\\\", Age: 28, Salary: 5500.0}, } slices.SortFunc(people, func(p1 Person, p2 Person) int { if p1.Name > p2.Name { return 1 } else if p1.Name < p2.Name { return -1 } return 0 }) }\",\"这是一个自定义排序规则的例子，slices.SortFunc接受两个参数，一个是切片，另一个就是比较函数，不考虑复用的话，我们就可以直接传递匿名函数。\"]},\"399\":{\"h\":\"闭包\",\"t\":[\"闭包（Closure）这一概念，在一些语言中又被称为 Lamda 表达式，与匿名函数一起使用，闭包 = 函数 + 环境引用吗，看下面一个例子：\",\"func main() { grow := Exp(2) for i := range 10 { fmt.Printf(\\\"2^%d=%d\\\\n\\\", i, grow()) } } func Exp(n int) func() int { e := 1 return func() int { temp := e e *= n return temp } }\",\"输出\",\"2^0=1 2^1=2 2^2=4 2^3=8 2^4=16 2^5=32 2^6=64 2^7=128 2^8=256 2^9=512\",\"Exp函数的返回值是一个函数，这里将称成为grow函数，每将它调用一次，变量e就会以指数级增长一次。grow函数引用了Exp函数的两个变量：e和n，它们诞生在Exp函数的作用域内，在正常情况下随着Exp函数的调用结束，这些变量的内存会随着出栈而被回收。但是由于grow函数引用了它们，所以它们无法被回收，而是逃逸到了堆上，即使Exp函数的生命周期已经结束了，但变量e和n的生命周期并没有结束，在grow函数内还能直接修改这两个变量，grow函数就是一个闭包函数。\",\"利用闭包，可以非常简单的实现一个求费波那契数列的函数，代码如下\",\"func main() { // 10个斐波那契数 fib := Fib(10) for n, next := fib(); next; n, next = fib() { fmt.Println(n) } } func Fib(n int) func() (int, bool) { a, b, c := 1, 1, 2 i := 0 return func() (int, bool) { if i >= n { return 0, false } else if i < 2 { f := i i++ return f, true } a, b = b, c c = a + b i++ return a, true } }\",\"输出为\",\"0 1 1 2 3 5 8 13 21 34\"]},\"400\":{\"h\":\"延迟调用\",\"t\":[\"defer关键字可以使得一个函数延迟一段时间调用，在函数返回之前这些 defer 描述的函数最后都会被逐个执行，看下面一个例子\",\"func main() { Do() } func Do() { defer func() { fmt.Println(\\\"1\\\") }() fmt.Println(\\\"2\\\") }\",\"输出\",\"2 1\",\"因为 defer 是在函数返回前执行的，你也可以在 defer 中修改函数的返回值\",\"func main() { fmt.Println(sum(3, 5)) } func sum(a, b int) (s int) { defer func() { s -= 10 }() s = a + b return }\",\"当有多个 defer 描述的函数时，就会像栈一样先进后出的顺序执行。\",\"func main() { fmt.Println(0) Do() } func Do() { defer fmt.Println(1) fmt.Println(2) defer fmt.Println(3) defer fmt.Println(4) fmt.Println(5) }\",\"0 2 5 4 3 1\",\"延迟调用通常用于释放文件资源，关闭网络连接等操作，还有一个用法是捕获panic，不过这是错误处理一节中才会涉及到的东西。\"]},\"401\":{\"h\":\"循环\",\"t\":[\"虽然没有明令禁止，一般建议不要在 for 循环中使用 defer，如下所示\",\"func main() { n := 5 for i := range n { defer fmt.Println(i) } }\",\"输出如下\",\"4 3 2 1 0\",\"这段代码结果是正确的，但过程也许不对。在 Go 中，每创建一个 defer，就需要在当前协程申请一片内存空间。假设在上面例子中不是简单的 for n 循环，而是一个较为复杂的数据处理流程，当外部请求数突然激增时，那么在短时间内就会创建大量的 defer，在循环次数很大或次数不确定时，就可能会导致内存占用突然暴涨，这种我们一般称之为内存泄漏。\"]},\"402\":{\"h\":\"参数预计算\",\"t\":[\"对于延迟调用有一些反直觉的细节，比如下面这个例子\",\"func main() { defer fmt.Println(Fn1()) fmt.Println(\\\"3\\\") } func Fn1() int { fmt.Println(\\\"2\\\") return 1 }\",\"这个坑还是非常隐晦的，笔者以前就因为这个坑，半天排查不出来是什么原因，可以猜猜输出是什么，答案如下\",\"2 3 1\",\"可能很多人认为是下面这种输出\",\"3 2 1\",\"按照使用者的初衷来说，fmt.Println(Fn1())这部分应该是希望它们在函数体执行结束后再执行，fmt.Println确实是最后执行的，但Fn1()是在意料之外的，下面这个例子的情况就更加明显了。\",\"func main() { var a, b int a = 1 b = 2 defer fmt.Println(sum(a, b)) a = 3 b = 4 } func sum(a, b int) int { return a + b }\",\"它的输出一定是 3 而不是 7，如果使用闭包而不是延迟调用，结果又不一样了\",\"func main() { var a, b int a = 1 b = 2 f := func() { fmt.Println(sum(a, b)) } a = 3 b = 4 f() }\",\"闭包的输出是 7，那如果把延迟调用和闭包结合起来呢\",\"func main() { var a, b int a = 1 b = 2 defer func() { fmt.Println(sum(a, b)) }() a = 3 b = 4 }\",\"这次就正常了，输出的是 7。下面再改一下，没有闭包了\",\"func main() { var a, b int a = 1 b = 2 defer func(num int) { fmt.Println(num) }(sum(a, b)) a = 3 b = 4 }\",\"输出又变回 3 了。通过对比上面几个例子可以发现这段代码\",\"defer fmt.Println(sum(a,b))\",\"其实等价于\",\"defer fmt.Println(3)\",\"go 不会等到最后才去调用sum函数，sum函数早在延迟调用被执行以前就被调用了，并作为参数传递了fmt.Println。总结就是，对于defer直接作用的函数而言，它的参数是会被预计算的，这也就导致了第一个例子中的奇怪现象，对于这种情况，尤其是在延迟调用中将函数返回值作为参数的情况尤其需要注意。\"]},\"403\":{\"h\":\"结构体\",\"t\":[\"结构体可以存储一组不同类型的数据，是一种复合类型。Go 抛弃了类与继承，同时也抛弃了构造方法，刻意弱化了面向对象的功能，Go 并非是一个传统 OOP 的语言，但是 Go 依旧有着 OOP 的影子，通过结构体和方法也可以模拟出一个类。下面是一个简单的结构体的例子：\",\"type Programmer struct { Name string Age int Job string Language []string }\"]},\"404\":{\"h\":\"声明\",\"t\":[\"结构体的声明非常简单，例子如下：\",\"type Person struct { name string age int }\",\"结构体本身以及其内部的字段都遵守大小写命名的暴露方式。对于一些类型相同的相邻字段，可以不需要重复声明类型，如下：\",\"type Rectangle struct { height, width, area int color string }\",\"提示\",\"在声明结构体字段时，字段名不能与方法名重复\"]},\"405\":{\"h\":\"实例化\",\"t\":[\"Go 不存在构造方法，大多数情况下采用如下的方式来实例化结构体，初始化的时候就像map一样指定字段名称再初始化字段值\",\"programmer := Programmer{ Name: \\\"jack\\\", Age: 19, Job: \\\"coder\\\", Language: []string{\\\"Go\\\", \\\"C++\\\"}, }\",\"不过也可以省略字段名称，当省略字段名称时，就必须初始化所有字段，通常不建议使用这种方式，因为可读性很糟糕。\",\"programmer := Programmer{ \\\"jack\\\", 19, \\\"coder\\\", []string{\\\"Go\\\", \\\"C++\\\"}}\",\"如果实例化过程比较复杂，你也可以编写一个函数来实例化结构体，就像下面这样，你也可以把它理解为一个构造函数\",\"type Person struct { Name string Age int Address string Salary float64 } func NewPerson(name string, age int, address string, salary float64) *Person { return &Person{Name: name, Age: age, Address: address, Salary: salary} }\",\"不过 Go 并不支持函数与方法重载，所以你无法为同一个函数或方法定义不同的参数。如果你想以多种方式实例化结构体，要么创建多个构造函数，要么建议使用 options 模式。\"]},\"406\":{\"h\":\"选项模式\",\"t\":[\"选项模式是 Go 语言中一种很常见的设计模式，可以更为灵活的实例化结构体，拓展性强，并且不需要改变构造函数的函数签名。假设有下面这样一个结构体\",\"type Person struct { Name string Age int Address string Salary float64 Birthday string }\",\"声明一个PersonOptions类型，它接受一个*Person类型的参数，它必须是指针，因为我们要在闭包中对 Person 赋值。\",\"type PersonOptions func(p *Person)\",\"接下来创建选项函数，它们一般是With开头，它们的返回值就是一个闭包函数。\",\"func WithName(name string) PersonOptions { return func(p *Person) { p.Name = name } } func WithAge(age int) PersonOptions { return func(p *Person) { p.Age = age } } func WithAddress(address string) PersonOptions { return func(p *Person) { p.Address = address } } func WithSalary(salary float64) PersonOptions { return func(p *Person) { p.Salary = salary } }\",\"实际声明的构造函数签名如下，它接受一个可变长PersonOptions类型的参数。\",\"func NewPerson(options ...PersonOptions) *Person { // 优先应用options p := &Person{} for _, option := range options { option(p) } // 默认值处理 if p.Age < 0 { p.Age = 0 } ...... return p }\",\"这样一来对于不同实例化的需求只需要一个构造函数即可完成，只需要传入不同的 Options 函数即可\",\"func main() { pl := NewPerson( WithName(\\\"John Doe\\\"), WithAge(25), WithAddress(\\\"123 Main St\\\"), WithSalary(10000.00), ) p2 := NewPerson( WithName(\\\"Mike jane\\\"), WithAge(30), ) }\",\"函数式选项模式在很多开源项目中都能看见，gRPC Server 的实例化方式也是采用了该设计模式。函数式选项模式只适合于复杂的实例化，如果参数只有简单几个，建议还是用普通的构造函数来解决。\"]},\"407\":{\"h\":\"组合\",\"t\":[\"在 Go 中，结构体之间的关系是通过组合来表示的，可以显式组合，也可以匿名组合，后者使用起来更类似于继承，但本质上没有任何变化。例如：\",\"显式组合的方式\",\"type Person struct { name string age int } type Student struct { p Person school string } type Employee struct { p Person job string }\",\"在使用时需要显式的指定字段p\",\"student := Student{ p: Person{name: \\\"jack\\\", age: 18}, school: \\\"lili school\\\", } fmt.Println(student.p.name)\",\"而匿名组合可以不用显式的指定字段\",\"type Person struct { name string age int } type Student struct { Person school string } type Employee struct { Person job string }\",\"匿名字段的名称默认为类型名，调用者可以直接访问该类型的字段和方法，但除了更加方便以外与第一种方式没有任何的区别。\",\"student := Student{ Person: Person{name: \\\"jack\\\",age: 18}, school: \\\"lili school\\\", } fmt.Println(student.name)\"]},\"408\":{\"h\":\"指针\",\"t\":[\"对于结构体指针而言，不需要解引用就可以直接访问结构体的内容，例子如下：\",\"p := &Person{ name: \\\"jack\\\", age: 18, } fmt.Println(p.age,p.name)\",\"在编译的时候会转换为(*p).name ，(*p).age，其实还是需要解引用，不过在编码的时候可以省去，算是一种语法糖。\"]},\"409\":{\"h\":\"标签\",\"t\":[\"结构体标签是一种元编程的形式，结合反射可以做出很多奇妙的功能，格式如下\",\"`key1:\\\"val1\\\" key2:\\\"val2\\\"`\",\"标签是一种键值对的形式，使用空格进行分隔。结构体标签的容错性很低，如果没能按照正确的格式书写结构体，那么将会导致无法正常读取，但是在编译时却不会有任何的报错，下方是一个使用示例。\",\"type Programmer struct { Name string `json:\\\"name\\\"` Age int `yaml:\\\"age\\\"` Job string `toml:\\\"job\\\"` Language []string `properties:\\\"language\\\"` }\",\"结构体标签最广泛的应用就是在各种序列化格式中的别名定义，标签的使用需要结合反射才能完整发挥出其功能。\"]},\"410\":{\"h\":\"内存对齐\",\"t\":[\"Go 结构体字段的内存分布遵循内存对齐的规则，这么做可以减少 CPU 访问内存的次数，相应的占用的内存要多一些，属于空间换时间的一种手段。假设有如下结构体\",\"type Num struct { A int64 B int32 C int16 D int8 E int32 }\",\"已知这些类型的占用字节数\",\"int64占 8 个字节\",\"int32占 4 个字节\",\"int16占 2 字节\",\"int8占一个字节\",\"整个结构体的内存占用似乎是 8+4+2+1+4=19 个字节吗，当然不是这样，根据内存对齐规则而言，结构体的内存占用长度至少是最大字段的整数倍，不足的则补齐。该结构体中最大的是int64占用 8 个字节，那么内存分布如下图所示\",\"所以实际上是占用 24 个字节，其中有 5 个字节是无用的。\",\"再来看下面这个结构体\",\"type Num struct { A int8 B int64 C int8 }\",\"明白了上面的规则后，可以很快的理解它的内存占用也是 24 个字节，尽管它只有三个字段，足足浪费了 14 个字节。\",\"但是我们可以调整字段，改成如下的顺序\",\"type Num struct { A int8 C int8 B int64 }\",\"如此一来就占用的内存就变为了 16 字节，浪费了 6 个字节，减少了 8 个字节的内存浪费。\",\"从理论上来说，让结构体中的字段按照合理的顺序分布，可以减少其内存占用。不过实际编码过程中，并没有必要的理由去这样做，它不一定能在减少内存占用这方面带来实质性的提升，但一定会提高开发人员的血压和心智负担，尤其是在业务中一些结构体的字段数可能多大几十个或者数百个，所以仅做了解即可。\",\"提示\",\"如果你真的想通过此种方法来节省内存，可以看看这两个库\",\"BetterAlign\",\"go-tools\",\"他们会检查你的源代码中的结构体，计算并重新排布结构体字段来最小化结构体占用的内存。\"]},\"411\":{\"h\":\"空结构体\",\"t\":[\"空结构体没有字段，不占用内存空间，我们可以通过unsafe.SizeOf函数来计算占用的字节大小\",\"func main() { type Empty struct {} fmt.Println(unsafe.Sizeof(Empty{})) }\",\"输出\",\"0\",\"空结构体的使用场景有很多，比如之前提到过的，作为map的值类型，可以将map作为set来进行使用，又或者是作为通道的类型，表示仅做通知类型的通道。\"]},\"412\":{\"h\":\"方法\",\"t\":[\"方法与函数的区别在于，方法拥有接收者，而函数没有，且只有自定义类型能够拥有方法。先来看一个例子。\",\"type IntSlice []int func (i IntSlice) Get(index int) int { return i[index] } func (i IntSlice) Set(index, val int) { i[index] = val } func (i IntSlice) Len() int { return len(i) }\",\"先声明了一个类型IntSlice，其底层类型为[]int，再声明了三个方法Get，Set和Len，方法的长相与函数并无太大的区别，只是多了一小段(i IntSlice) 。i就是接收者，IntSlice就是接收者的类型，接收者就类似于其他语言中的this或self，只不过在 Go 中需要显示的指明。\",\"func main() { var intSlice IntSlice intSlice = []int{1, 2, 3, 4, 5} fmt.Println(intSlice.Get(0)) intSlice.Set(0, 2) fmt.Println(intSlice) fmt.Println(intSlice.Len()) }\",\"方法的使用就类似于调用一个类的成员方法，先声明，再初始化，再调用。\"]},\"413\":{\"h\":\"值接收者\",\"t\":[\"接收者也分两种类型，值接收者和指针接收者，先看一个例子\",\"type MyInt int func (i MyInt) Set(val int) { i = MyInt(val) // 修改了，但是不会造成任何影响 } func main() { myInt := MyInt(1) myInt.Set(2) fmt.Println(myInt) }\",\"上述代码运行过后，会发现myInt的值依旧是 1，并没有被修改成 2。方法在被调用时，会将接收者的值传入方法中，上例的接收者就是一个值接收者，可以简单的看成一个形参，而修改一个形参的值，并不会对方法外的值造成任何影响，那么如果通过指针调用会如何呢？\",\"func main() { myInt := MyInt(1) (&myInt).Set(2) fmt.Println(myInt) }\",\"遗憾的是，这样的代码依旧不能修改内部的值，为了能够匹配上接收者的类型，Go 会将其解引用，解释为(*(&myInt)).Set(2)。\"]},\"414\":{\"h\":\"指针接收者\",\"t\":[\"稍微修改了一下，就能正常修改myInt的值。\",\"type MyInt int func (i *MyInt) Set(val int) { *i = MyInt(val) } func main() { myInt := MyInt(1) myInt.Set(2) fmt.Println(myInt) }\",\"现在的接收者就是一个指针接收者，虽然myInt是一个值类型，在通过值类型调用指针接收者的方法时，Go 会将其解释为(&myint).Set(2)。所以方法的接收者为指针时，不管调用者是不是指针，都可以修改内部的值。\",\"函数的参数传递过程中，是值拷贝的，如果传递的是一个整型，那就拷贝这个整型，如果是一个切片，那就拷贝这个切片，但如果是一个指针，就只需要拷贝这个指针，显然传递一个指针比起传递一个切片所消耗的资源更小，接收者也不例外，值接收者和指针接收者也是同样的道理。在大多数情况下，都推荐使用指针接收者，不过两者并不应该混合使用，要么都用，要么就都不用，看下面一个例子。\",\"提示\",\"需要先了解接口\",\"type Animal interface { Run() } type Dog struct { } func (d *Dog) Run() { fmt.Println(\\\"Run\\\") } func main() { var an Animal an = Dog{} // an = &Dog{} 正确方式 an.Run() }\",\"这一段代码将会无法通过编译，编译器将会输出如下错误\",\"cannot use Dog{} (value of type Dog) as type Animal in assignment: Dog does not implement Animal (Run method has pointer receiver)\",\"翻译过来就是，无法使用Dog{}初始化Animal类型的变量，因为Dog没有实现Animal ，解决办法有两种，一是将指针接收者改为值接收者，二是将Dog{}改为&Dog{}，接下来逐个讲解。\",\"type Dog struct { } func (d Dog) Run() { // 改为了值接收者 fmt.Println(\\\"Run\\\") } func main() { // 可以正常运行 var an Animal an = Dog{} // an = &Dog{} 同样可以 an.Run() }\",\"在原来的代码中，Run 方法的接收者是*Dog ，自然而然实现Animal接口的就是Dog指针，而不是Dog结构体，这是两个不同的类型，所以编译器就会认为Dog{}并不是Animal的实现，因此无法赋值给变量an，所以第二种解决办法就是赋值Dog指针给变量an。不过在使用值接收者时，Dog指针依然可以正常赋值给animal，这是因为 Go 会在适当情况下对指针进行解引用，因为通过指针可以找到Dog结构体，但是反过来的话，无法通过Dog结构体找到Dog指针。如果单纯的在结构体中混用值接收者和指针接收者的话无伤大雅，但是和接口一起使用后，就会出现错误，倒不如无论何时要么都用值接收者，要么就都用指针接收者，形成一个良好的规范，也可以减少后续维护的负担。\",\"还有一种情况，就是当值接收者是可寻址的时候，Go 会自动的插入指针运算符来进行调用，例如切片是可寻址，依旧可以通过值接收者来修改其内部值。比如下面这个代码\",\"type Slice []int func (s Slice) Set(i int, v int) { s[i] = v } func main() { s := make(Slice, 1) s.Set(0, 1) fmt.Println(s) }\",\"输出\",\"[1]\",\"但这样会引发另一个问题，如果对其添加元素的话，情况就不同了。看下面的例子\",\"type Slice []int func (s Slice) Set(i int, v int) { s[i] = v } func (s Slice) Append(a int) { s = append(s, a) } func main() { s := make(Slice, 1, 2) s.Set(0, 1) s.Append(2) fmt.Println(s) }\",\"[1]\",\"它的输出还是和之前一样，append函数是有返回值的，向切片添加完元素后必须覆盖原切片，尤其是在扩容后，在方法中对值接收者修改并不会产生任何影响，这也就导致了例子中的结果，改成指针接收者就正常了。\",\"type Slice []int func (s *Slice) Set(i int, v int) { (*s)[i] = v } func (s *Slice) Append(a int) { *s = append(*s, a) } func main() { s := make(Slice, 1, 2) s.Set(0, 1) s.Append(2) fmt.Println(s) }\",\"输出\",\"[1 2]\"]},\"415\":{\"h\":\"文件\",\"t\":[\"Go 语言提供文件处理的标准库大致以下几个：\",\"os库，负责 OS 文件系统交互的具体实现\",\"io库，读写 IO 的抽象层\",\"fs库，文件系统的抽象层\",\"本文会讲解如何通过 Go 语言来进行基本的文件处理。\"]},\"416\":{\"h\":\"打开\",\"t\":[\"常见的两种打开文件的方式是使用os包提供的两个函数，Open函数返回值一个文件指针和一个错误，\",\"func Open(name string) (*File, error)\",\"后者OpenFile能够提供更加细粒度的控制，函数Open就是对OpenFile函数的一个简单封装。\",\"func OpenFile(name string, flag int, perm FileMode) (*File, error)\",\"先来介绍第一种使用方法，直接提供对应的文件名即可，代码如下\",\"func main() { file, err := os.Open(\\\"README.txt\\\") fmt.Println(file, err) }\",\"文件的查找路径默认为项目go.mod文件所在的路径，由于项目下并没有文件README.txt，所以自然会返回一个错误。\",\"<nil> open README.txt: The system cannot find the file specified.\",\"因为 IO 错误的类型有很多，所以需要手动的去判断文件是否存在，同样的os包也为此提供了方便函数，修改后的代码如下\",\"func main() { file, err := os.Open(\\\"README.txt\\\") if os.IsNotExist(err) { fmt.Println(\\\"文件不存在\\\") } else if err != nil { fmt.Println(\\\"文件访问异常\\\") } else { fmt.Println(\\\"文件读取成功\\\", file) } }\",\"再次运行输出如下\",\"文件不存在\",\"事实上第一种函数读取的文件仅仅只是只读的，无法被修改\",\"func Open(name string) (*File, error) { return OpenFile(name, O_RDONLY, 0) }\",\"通过OpenFile函数可以控制更多细节，例如修改文件描述符和文件权限，关于文件描述符，os包下提供了以下常量以供使用。\",\"const ( // 只读，只写，读写 三种必须指定一个 O_RDONLY int = syscall.O_RDONLY // 以只读的模式打开文件 O_WRONLY int = syscall.O_WRONLY // 以只写的模式打开文件 O_RDWR int = syscall.O_RDWR // 以读写的模式打开文件 // 剩余的值用于控制行为 O_APPEND int = syscall.O_APPEND // 当写入文件时，将数据添加到文件末尾 O_CREATE int = syscall.O_CREAT // 如果文件不存在则创建文件 O_EXCL int = syscall.O_EXCL // 与O_CREATE一起使用, 文件必须不存在 O_SYNC int = syscall.O_SYNC // 以同步IO的方式打开文件 O_TRUNC int = syscall.O_TRUNC // 当打开的时候截断可写的文件 )\",\"关于文件权限的则提供了以下常量。\",\"const ( ModeDir = fs.ModeDir // d: 目录 ModeAppend = fs.ModeAppend // a: 只能添加 ModeExclusive = fs.ModeExclusive // l: 专用 ModeTemporary = fs.ModeTemporary // T: 临时文件 ModeSymlink = fs.ModeSymlink // L: 符号链接 ModeDevice = fs.ModeDevice // D: 设备文件 ModeNamedPipe = fs.ModeNamedPipe // p: 具名管道 (FIFO) ModeSocket = fs.ModeSocket // S: Unix 域套接字 ModeSetuid = fs.ModeSetuid // u: setuid ModeSetgid = fs.ModeSetgid // g: setgid ModeCharDevice = fs.ModeCharDevice // c: Unix 字符设备, 前提是设置了 ModeDevice ModeSticky = fs.ModeSticky // t: 黏滞位 ModeIrregular = fs.ModeIrregular // ?: 非常规文件 // 类型位的掩码. 对于常规文件而言，什么都不会设置. ModeType = fs.ModeType ModePerm = fs.ModePerm // Unix 权限位, 0o777 )\",\"下面是一个以读写模式打开一个文件的代码例子，权限为0666，表示为所有人都可以对该文件进行读写，且不存在时会自动创建。\",\"func main() { file, err := os.OpenFile(\\\"README.txt\\\", os.O_RDWR|os.O_CREATE, 0666) if os.IsNotExist(err) { fmt.Println(\\\"文件不存在\\\") } else if err != nil { fmt.Println(\\\"文件访问异常\\\") } else { fmt.Println(\\\"文件打开成功\\\", file.Name()) file.Close() } }\",\"输出如下\",\"文件打开成功 README.txt\",\"倘若只是想获取该文件的一些信息，并不想读取该文件，可以使用os.Stat()函数进行操作，代码示例如下\",\"func main() { fileInfo, err := os.Stat(\\\"README.txt\\\") if err != nil { fmt.Println(err) } else { fmt.Println(fmt.Sprintf(\\\"%+v\\\", fileInfo)) } }\",\"输出如下\",\"&{name:README.txt FileAttributes:32 CreationTime:{LowDateTime:3603459389 HighDateTime:31016791} LastAccessTime:{LowDateTime:3603459389 HighDateTime:31016791} LastWriteTime:{LowDateTime:3603459389 HighDateTime:31016791} FileSizeHigh :0 FileSizeLow:0 Reserved0:0 filetype:0 Mutex:{state:0 sema:0} path:README.txt vol:0 idxhi:0 idxlo:0 appendNameToPath:false}\",\"注意\",\"打开一个文件后永远要记得关闭该文件，通常关闭操作会放在defer语句里\",\"defer file.Close()\"]},\"417\":{\"h\":\"读取\",\"t\":[\"当成功的打开文件后，便可以进行读取操作了，关于读取文件的操作，*os.File类型提供了以下几个公开的方法\",\"// 将文件读进传入的字节切片 func (f *File) Read(b []byte) (n int, err error) // 相较于第一种可以从指定偏移量读取 func (f *File) ReadAt(b []byte, off int64) (n int, err error)\",\"大多数情况第一种使用的较多。针对于第一种方法，需要自行编写逻辑来进行读取时切片的动态扩容，代码如下\",\"func ReadFile(file *os.File) ([]byte, error) { buffer := make([]byte, 0, 512) for { // 当容量不足时 if len(buffer) == cap(buffer) { // 扩容 buffer = append(buffer, 0)[:len(buffer)] } // 继续读取文件 offset, err := file.Read(buffer[len(buffer):cap(buffer)]) // 将已写入的数据归入切片 buffer = buffer[:len(buffer)+offset] // 发生错误时 if err != nil { if errors.Is(err, io.EOF) { err = nil } return buffer, err } } }\",\"剩余逻辑如下\",\"func main() { file, err := os.OpenFile(\\\"README.txt\\\", os.O_RDWR|os.O_CREATE, 0666) if err != nil { fmt.Println(\\\"文件访问异常\\\") } else { fmt.Println(\\\"文件打开成功\\\", file.Name()) bytes, err := ReadFile(file) if err != nil { fmt.Println(\\\"文件读取异常\\\", err) } else { fmt.Println(string(bytes)) } file.Close() } }\",\"输出为\",\"文件打开成功 README.txt hello world!\",\"除此之外，还可以使用两个方便函数来进行文件读取，分别是os包下的ReadFile函数，以及io包下的ReadAll函数。对于os.ReadFile而言，只需要提供文件路径即可，而对于io.ReadAll而言，则需要提供一个io.Reader类型的实现，\",\"os.ReadFile\",\"func ReadFile(name string) ([]byte, error)\",\"使用例子如下\",\"func main() { bytes, err := os.ReadFile(\\\"README.txt\\\") if err != nil { fmt.Println(err) } else { fmt.Println(string(bytes)) } }\",\"输出如下\",\"hello world!\",\"io.ReadAll\",\"func ReadAll(r Reader) ([]byte, error)\",\"使用例子如下\",\"func main() { file, err := os.OpenFile(\\\"README.txt\\\", os.O_RDWR|os.O_CREATE, 0666) if err != nil { fmt.Println(\\\"文件访问异常\\\") } else { fmt.Println(\\\"文件打开成功\\\", file.Name()) bytes, err := io.ReadAll(file) if err != nil { fmt.Println(err) } else { fmt.Println(string(bytes)) } file.Close() } }\",\"文件打开成功 README.txt hello world!\"]},\"418\":{\"h\":\"写入\",\"t\":[\"os.File结构体提供了以下几种方法以供写入数据\",\"// 写入字节切片 func (f *File) Write(b []byte) (n int, err error) // 写入字符串 func (f *File) WriteString(s string) (n int, err error) // 从指定位置开始写，当以os.O_APPEND模式打开时，会返回错误 func (f *File) WriteAt(b []byte, off int64) (n int, err error)\",\"如果想要对一个文件写入数据，则必须以O_WRONLY或O_RDWR的模式打开，否则无法成功写入文件。下面是一个以os.O_RDWR|os.O_CREATE|os.O_APPEND|os.O_TRUNC模式打开文件，且权限为0666向指定写入数据的例子\",\"func main() { file, err := os.OpenFile(\\\"README.txt\\\", os.O_RDWR|os.O_CREATE|os.O_APPEND|os.O_TRUNC, 0666) if err != nil { fmt.Println(\\\"文件访问异常\\\") } else { fmt.Println(\\\"文件打开成功\\\", file.Name()) for i := 0; i < 5; i++ { offset, err := file.WriteString(\\\"hello world!\\\\n\\\") if err != nil { fmt.Println(offset, err) } } fmt.Println(file.Close()) } }\",\"由于是以os.O_APPEND模式打开的文件，所以在写入文件时会将数据添加到文件尾部，执行完毕后文件内容如下\",\"hello world! hello world! hello world! hello world! hello world!\",\"向文件写入字节切片也是类似的操作，就不再赘述。对于写入文件的操作标准库同样提供了方便函数，分别是os.WriteFile与io.WriteString\",\"os.WriteFile\",\"func WriteFile(name string, data []byte, perm FileMode) error\",\"使用例子如下\",\"func main() { err := os.WriteFile(\\\"README.txt\\\", []byte(\\\"hello world!\\\\n\\\"), 0666) if err != nil { fmt.Println(err) } }\",\"此时文件内容如下\",\"hello world!\",\"io.WriteString\",\"func WriteString(w Writer, s string) (n int, err error)\",\"使用例子如下\",\"func main() { file, err := os.OpenFile(\\\"README.txt\\\", os.O_RDWR|os.O_CREATE|os.O_APPEND|os.O_TRUNC, 0666) if err != nil { fmt.Println(\\\"文件访问异常\\\") } else { fmt.Println(\\\"文件打开成功\\\", file.Name()) for i := 0; i < 5; i++ { offset, err := io.WriteString(file, \\\"hello world!\\\\n\\\") if err != nil { fmt.Println(offset, err) } } fmt.Println(file.Close()) } }\",\"hello world! hello world! hello world! hello world! hello world!\",\"函数os.Create函数用于创建文件，本质上也是对OpenFile的封装。\",\"func Create(name string) (*File, error) { return OpenFile(name, O_RDWR|O_CREATE|O_TRUNC, 0666) }\",\"注意\",\"在创建一个文件时，如果其父目录不存在，将创建失败并会返回错误。\"]},\"419\":{\"h\":\"复制\",\"t\":[\"对于复制文件而言，需要同时打开两个文件，第一种方法是将原文件中的数据读取出来，然后写入目标文件中，代码示例如下\",\"func main() { // 从原文件中读取数据 data, err := os.ReadFile(\\\"README.txt\\\") if err != nil { fmt.Println(err) return } // 写入目标文件 err = os.WriteFile(\\\"README(1).txt\\\", data, 0666) if err != nil { fmt.Println(err) } else { fmt.Println(\\\"复制成功\\\") } }\",\"*os.File.ReadFrom\",\"另一种方法是使用os.File提供的方法ReadFrom，打开文件时，一个只读，一个只写。\",\"func (f *File) ReadFrom(r io.Reader) (n int64, err error)\",\"使用示例如下\",\"func main() { // 以只读的方式打开原文件 origin, err := os.OpenFile(\\\"README.txt\\\", os.O_RDONLY, 0666) if err != nil { fmt.Println(err) return } defer origin.Close() // 以只写的方式打开副本文件 target, err := os.OpenFile(\\\"README(1).txt\\\", os.O_WRONLY|os.O_CREATE|os.O_TRUNC, 0666) if err != nil { fmt.Println(err) return } defer target.Close() // 从原文件中读取数据，然后写入副本文件 offset, err := target.ReadFrom(origin) if err != nil { fmt.Println(err) return } fmt.Println(\\\"文件复制成功\\\", offset) }\",\"这种复制方式需要先将源文件的全部内容读取到内存中，再写入目标文件，文件特别大的时候不建议这么做。\",\"io.Copy\",\"另一种方法就是使用io.Copy函数，它则是一边读一边写，先将内容读到缓冲区中，再写入到目标文件中，缓冲区默认大小为 32KB。\",\"func Copy(dst Writer, src Reader) (written int64, err error)\",\"使用示例如下\",\"func main() { // 以只读的方式打开原文件 origin, err := os.OpenFile(\\\"README.txt\\\", os.O_RDONLY, 0666) if err != nil { fmt.Println(err) return } defer origin.Close() // 以只写的方式打开副本文件 target, err := os.OpenFile(\\\"README(1).txt\\\", os.O_WRONLY|os.O_CREATE|os.O_TRUNC, 0666) if err != nil { fmt.Println(err) return } defer target.Close() // 复制 written, err := io.Copy(target, origin) if err != nil { fmt.Println(err) } else { fmt.Println(written) } }\",\"你也可以使用io.CopyBuffer来指定缓冲区大小。\"]},\"420\":{\"h\":\"重命名\",\"t\":[\"重命名也可以理解为移动文件，会用到os包下的Rename函数。\",\"func Rename(oldpath, newpath string) error\",\"示例如下\",\"func main() { err := os.Rename(\\\"README.txt\\\", \\\"readme.txt\\\") if err != nil { fmt.Println(err) } else { fmt.Println(\\\"重命名成功\\\") } }\",\"该函数对于文件夹也是同样的效果。\"]},\"421\":{\"h\":\"删除\",\"t\":[\"删除操作相较于其他操作要简单的多，只会用到os包下的两个函数\",\"// 删除单个文件或者空目录，当目录不为空时会返回错误 func Remove(name string) error // 删除指定目录的所有文件和目录包括子目录与子文件 func RemoveAll(path string) error\",\"使用起来十分的简单，下面是删除目录的例子\",\"func main() { // 删除当前目录下所有的文件与子目录 err := os.RemoveAll(\\\".\\\") if err != nil { fmt.Println(err) }else { fmt.Println(\\\"删除成功\\\") } }\",\"下面是删除单个文件的例子\",\"func main() { // 删除当前目录下所有的文件与子目录 err := os.Remove(\\\"README.txt\\\") if err != nil { fmt.Println(err) } else { fmt.Println(\\\"删除成功\\\") } }\"]},\"422\":{\"h\":\"刷新\",\"t\":[\"os.Sync这一个函数封装了底层的系统调用Fsync，用于将操作系统中缓存的 IO 写入落实到磁盘上\",\"func main() { create, err := os.Create(\\\"test.txt\\\") if err != nil { panic(err) } defer create.Close() _, err = create.Write([]byte(\\\"hello\\\")) if err != nil { panic(err) } // 刷盘 if err := create.Sync();err != nil { return } }\"]},\"423\":{\"h\":\"文件夹\",\"t\":[\"文件夹的许多操作都与文件操作类似\"]},\"424\":{\"h\":\"读取\",\"t\":[\"对于文件夹而言，打开方式有两种，\",\"os.ReadDir\",\"第一种方式是使用os.ReadDir函数\",\"func ReadDir(name string) ([]DirEntry, error)\",\"func main() { // 当前目录 dir, err := os.ReadDir(\\\".\\\") if err != nil { fmt.Println(err) } else { for _, entry := range dir { fmt.Println(entry.Name()) } } }\",\"*os.File.ReadDir\",\"第二种方式是使用*os.File.ReadDir函数，os.ReadDir本质上也只是对*os.File.ReadDir的一层简单封装。\",\"// n < 0时，则读取文件夹下所有的内容 func (f *File) ReadDir(n int) ([]DirEntry, error)\",\"func main() { // 当前目录 dir, err := os.Open(\\\".\\\") if err != nil { fmt.Println(err) } defer dir.Close() dirs, err := dir.ReadDir(-1) if err != nil { fmt.Println(err) } else { for _, entry := range dirs { fmt.Println(entry.Name()) } } }\"]},\"425\":{\"h\":\"创建\",\"t\":[\"创建文件夹操作会用到os包下的两个函数\",\"// 用指定的权限创建指定名称的目录 func Mkdir(name string, perm FileMode) error // 相较于前者该函数会创建一切必要的父目录 func MkdirAll(path string, perm FileMode) error\",\"示例如下\",\"func main() { err := os.Mkdir(\\\"src\\\", 0666) if err != nil { fmt.Println(err) } else { fmt.Println(\\\"创建成功\\\") } }\"]},\"426\":{\"h\":\"复制\",\"t\":[\"我们可以自己写函数递归遍历整个文件夹，不过filepath标准库已经提供了类似功能的函数，所以可以直接使用，一个简单的文件夹复制的代码示例如下。\",\"func CopyDir(src, dst string) error { // 检查源文件夹的状态 _, err := os.Stat(src) if err != nil { return err } return filepath.Walk(src, func(path string, info fs.FileInfo, err error) error { if err != nil { return err } // 计算相对路径 rel, err := filepath.Rel(src, path) if err != nil { return err } // 拼接目标路径 destpath := filepath.Join(dst, rel) // 创建文件夹 var dirpath string var mode os.FileMode = 0755 if info.IsDir() { dirpath = destpath mode = info.Mode() } else if info.Mode().IsRegular() { dirpath = filepath.Dir(destpath) } if err := os.MkdirAll(dirpath, mode); err != nil { return err } // 创建文件 if info.Mode().IsRegular() { srcfile, err := os.Open(path) if err != nil { return err } // 一定要记得关闭文件 defer srcfile.Close() destfile, err := os.OpenFile(destpath, os.O_RDWR|os.O_CREATE|os.O_TRUNC, info.Mode()) if err != nil { return err } defer destfile.Close() // 复制文件内容 if _, err := io.Copy(destfile, srcfile); err != nil { return err } return nil } return nil }) }\",\"filepath.Walk会递归遍历整个文件夹，在过程中，遇到文件夹就创建文件夹，遇到文件就创建新文件并复制，代码相比复制文件有点多但算不上复杂。\"]},\"427\":{\"h\":\"反射\",\"t\":[\"反射是一种在运行时检查语言自身结构的机制，它可以很灵活的去应对一些问题，但同时带来的弊端也很明显，例如性能问题等等。在 Go 中，反射与interface{}密切相关，很大程度上，只要有interface{}出现的地方，就会有反射。Go 中的反射 API 是由标准库reflect包提供的。\"]},\"428\":{\"h\":\"接口\",\"t\":[\"在开始之前先简单的了解一下位于runtime包下的两个接口。在 Go 中，接口本质上是结构体，Go 在运行时将接口分为了两大类，一类是没有方法集的接口，另一个类则是有方法集的接口。对于含有方法集的接口来说，在运行时由如下的结构体iface来进行表示\",\"type iface struct { tab *itab // 包含 数据类型，接口类型，方法集等 data unsafe.Pointer // 指向值的指针 }\",\"而对于没有方法集接口来说，在运行时由eface 结构体来进行表示，如下\",\"type eface struct { _type *_type // 类型 data unsafe.Pointer // 指向值的指针 }\",\"而这两个结构体在reflect包下都有与其对应的结构体类型，iface对应的是nonEmptyInterface\",\"type nonEmptyInterface struct { itab *struct { ityp *rtype // 静态接口类型 typ *rtype // 动态具体类型 hash uint32 // 类型哈希 _ [4]byte fun [100000]unsafe.Pointer // 方法集 } word unsafe.Pointer // 指向值的指针 }\",\"而eface对应的是emptyInterface\",\"type emptyInterface struct { typ *rtype // 动态具体类型 word unsafe.Pointer // 指向指针的值 }\",\"对于这两种类型，官方给出了很明确的定义\",\"nonEmptyInterface： nonEmptyInterface is the header for an interface value with methods\",\"emptyInterface：emptyInterface is the header for an interface{} value\",\"上述提到了动态具体类型这一词，原文为dynamic concrete type，首先 Go 语言是一个百分之百的静态类型语言，静态这一词是体现在对外表现的抽象的接口类型是不变的，而动态表示是接口底层存储的具体实现的类型是可以变化的。至此，对于接口的简单原理只需要了解到这里就足够满足后续反射的学习。\"]},\"429\":{\"h\":\"桥梁\",\"t\":[\"在reflect包下，分别有reflect.Type接口类型来表示 Go 中的类型，reflect.Value结构体类型来表示 Go 中的值\",\"type Type interface { ... Name() string PkgPath() string Size() uintptr String() string Kind() Kind ... } type Value struct { typ *rtype ptr unsafe.Pointer flag }\",\"上面的代码省略了很多细节，先只需要了解这两个类型的存在即可。Go 中所有反射相关的操作都是基于这两个类型，reflect包提供了两个函数来将 Go 中的类型转换为上述的两种类型以便进行反射操作，分别是reflect.TypeOf函数\",\"func TypeOf(i any) Type\",\"与reflect.ValueOf函数\",\"func ValueOf(i any) Value\",\"可以看到两个函数的参数类型都是any，也就是interface{}的别名。如果想要进行反射操作，就需要先将其类型转换为interface{}，这也是为什么前面提到了只要有反射就离不开空接口。不严谨的说，空接口就是连接 Go 类型系统与反射的桥梁，下图很形象的描述了其过程。\",\"提示\",\"下文中为了方便，统一使用别名any来替代interface{}\"]},\"430\":{\"h\":\"核心\",\"t\":[\"在 Go 中有三个经典的反射定律，结合上面所讲的内容也就非常好懂，分别如下\",\"反射可以将interface{}类型变量转换成反射对象\",\"反射可以将反射对象还原成interface{}类型变量\",\"要修改反射对象，其值必须是可设置的\",\"这三个定律便是 Go 反射的核心，当需要访问类型相关信息时，便需要用到reflect.TypeOf，当需要修改反射值时，就需要用到reflect.ValueOf\"]},\"431\":{\"h\":\"类型\",\"t\":[\"reflect.Type代表着 Go 中的类型，使用reflect.TypeOf()函数可以将变量转换成reflect.Type。代码示例如下\",\"func main() { str := \\\"hello world!\\\" reflectType := reflect.TypeOf(str) fmt.Println(reflectType) }\",\"输出结果为\",\"string\"]},\"432\":{\"h\":\"Kind\",\"t\":[\"对于Type而言，Go 内部使用reflect.Kind来表示 Go 中的基础类型，其本质上是无符号整型uint。\",\"type Kind uint\",\"reflect包使用Kind枚举出了 Go 中所有的基础类型，如下所示\",\"const ( Invalid Kind = iota Bool Int Int8 Int16 Int32 Int64 Uint Uint8 Uint16 Uint32 Uint64 Uintptr Float32 Float64 Complex64 Complex128 Array Chan Func Interface Map Pointer Slice String Struct UnsafePointer )\",\"Kind类型仅仅实现了Stringer接口的String()方法，该类型也仅有这一个方法，String()方法的返回值来自于一个其内部的map，如下所示\",\"var kindNames = []string{ Invalid: \\\"invalid\\\", Bool: \\\"bool\\\", Int: \\\"int\\\", Int8: \\\"int8\\\", Int16: \\\"int16\\\", Int32: \\\"int32\\\", Int64: \\\"int64\\\", Uint: \\\"uint\\\", Uint8: \\\"uint8\\\", Uint16: \\\"uint16\\\", Uint32: \\\"uint32\\\", Uint64: \\\"uint64\\\", Uintptr: \\\"uintptr\\\", Float32: \\\"float32\\\", Float64: \\\"float64\\\", Complex64: \\\"complex64\\\", Complex128: \\\"complex128\\\", Array: \\\"array\\\", Chan: \\\"chan\\\", Func: \\\"func\\\", Interface: \\\"interface\\\", Map: \\\"map\\\", Pointer: \\\"ptr\\\", Slice: \\\"slice\\\", String: \\\"string\\\", Struct: \\\"struct\\\", UnsafePointer: \\\"unsafe.Pointer\\\", }\",\"type Type interface{ Kind() Kind }\",\"通过Kind，可以知晓空接口存储的值究竟是什么基础类型，例如\",\"func main() { // 声明一个any类型的变量 var eface any // 赋值 eface = 100 // 通过Kind方法，来获取其类型 fmt.Println(reflect.TypeOf(eface).Kind()) }\",\"输出结果\",\"int\"]},\"433\":{\"h\":\"Elem\",\"t\":[\"type Type interface{ Elem() Type }\",\"使用Type.Elem()方法，可以判断类型为any的数据结构所存储的元素类型，可接收的底层参数类型必须是指针，切片，数组，通道，映射表其中之一，否则会panic。下面是代码示例\",\"func main() { var eface any eface = map[string]int{} rType := reflect.TypeOf(eface) // key()会返回map的键反射类型 fmt.Println(rType.Key().Kind()) fmt.Println(rType.Elem().Kind()) }\",\"输出为\",\"string int\",\"指针也可以理解为是一个容器，对于指针使用Elem()会获得其指向元素的反射类型，代码示例如下\",\"func main() { var eface any // 赋值指针 eface = new(strings.Builder) rType := reflect.TypeOf(eface) // 拿到指针所指向元素的反射类型 vType := rType.Elem() // 输出包路径 fmt.Println(vType.PkgPath()) // 输出其名称 fmt.Println(vType.Name()) }\",\"strings Builder\",\"对于数组，切片，通道用使用起来都是类似的。\"]},\"434\":{\"h\":\"Size\",\"t\":[\"type Type interface{ Size() uintptr }\",\"通过Size方法可以获取对应类型所占的字节大小，示例如下\",\"func main() { fmt.Println(reflect.TypeOf(0).Size()) fmt.Println(reflect.TypeOf(\\\"\\\").Size()) fmt.Println(reflect.TypeOf(complex(0, 0)).Size()) fmt.Println(reflect.TypeOf(0.1).Size()) fmt.Println(reflect.TypeOf([]string{}).Size()) }\",\"输出结果为\",\"8 16 16 8 24\",\"提示\",\"使用unsafe.Sizeof()可以达到同样的效果\"]},\"435\":{\"h\":\"Comparable\",\"t\":[\"type Type interface{ Comparable() bool }\",\"通过Comparable方法可以判断一个类型是否可以被比较，例子如下\",\"func main() { fmt.Println(reflect.TypeOf(\\\"hello world!\\\").Comparable()) fmt.Println(reflect.TypeOf(1024).Comparable()) fmt.Println(reflect.TypeOf([]int{}).Comparable()) fmt.Println(reflect.TypeOf(struct{}{}).Comparable()) }\",\"输出如下\",\"true true false true\"]},\"436\":{\"h\":\"Implements\",\"t\":[\"type Type interface{ Implements(u Type) bool }\",\"通过Implements方法可以判断一个类型是否实现了某一接口\",\"type MyInterface interface { My() string } type MyStruct struct { } func (m MyStruct) My() string { return \\\"my\\\" } type HisStruct struct { } func (h HisStruct) String() string { return \\\"his\\\" } func main() { rIface := reflect.TypeOf(new(MyInterface)).Elem() fmt.Println(reflect.TypeOf(new(MyStruct)).Elem().Implements(rIface)) fmt.Println(reflect.TypeOf(new(HisStruct)).Elem().Implements(rIface)) }\",\"输出结果\",\"true false\"]},\"437\":{\"h\":\"ConvertibleTo\",\"t\":[\"type Type interface{ ConvertibleTo(u Type) bool }\",\"使用ConvertibleTo方法可以判断一个类型是否可以被转换为另一个指定的类型\",\"type MyInterface interface { My() string } type MyStruct struct { } func (m MyStruct) My() string { return \\\"my\\\" } type HisStruct struct { } func (h HisStruct) String() string { return \\\"his\\\" } func main() { rIface := reflect.TypeOf(new(MyInterface)).Elem() fmt.Println(reflect.TypeOf(new(MyStruct)).Elem().ConvertibleTo(rIface)) fmt.Println(reflect.TypeOf(new(HisStruct)).Elem().ConvertibleTo(rIface)) }\",\"输出\",\"true false\"]},\"438\":{\"h\":\"值\",\"t\":[\"reflect.Value代表着反射接口的值，使用reflect.ValueOf()函数可以将变量转换成reflect.Value。代码示例如下\",\"func main() { str := \\\"hello world!\\\" reflectValue := reflect.ValueOf(str) fmt.Println(reflectValue) }\",\"输出结果为\",\"hello world!\"]},\"439\":{\"h\":\"Type\",\"t\":[\"func (v Value) Type() Type\",\"Type方法可以获取一个反射值的类型\",\"func main() { num := 114514 rValue := reflect.ValueOf(num) fmt.Println(rValue.Type()) }\",\"输出\",\"int\"]},\"440\":{\"h\":\"Elem\",\"t\":[\"func (v Value) Elem() Value\",\"获取一个反射值的元素反射值\",\"func main() { num := new(int) *num = 114514 // 以指针为例子 rValue := reflect.ValueOf(num).Elem() fmt.Println(rValue.Interface()) }\",\"输出\",\"114514\"]},\"441\":{\"h\":\"指针\",\"t\":[\"获取一个反射值的指针方式有两种\",\"// 返回一个表示v地址的指针反射值 func (v Value) Addr() Value // 返回一个指向v的原始值的uinptr 等价于 uintptr(Value.Addr().UnsafePointer()) func (v Value) UnsafeAddr() uintptr // 返回一个指向v的原始值的uintptr // 仅当v的Kind为 Chan, Func, Map, Pointer, Slice, UnsafePointer时，否则会panic func (v Value) Pointer() uintptr // 返回一个指向v的原始值的unsafe.Pointer // 仅当v的Kind为 Chan, Func, Map, Pointer, Slice, UnsafePointer时，否则会panic func (v Value) UnsafePointer() unsafe.Pointer\",\"示例如下\",\"func main() { num := 1024 ele := reflect.ValueOf(&num).Elem() fmt.Println(\\\"&num\\\", &num) fmt.Println(\\\"Addr\\\", ele.Addr()) fmt.Println(\\\"UnsafeAddr\\\", unsafe.Pointer(ele.UnsafeAddr())) fmt.Println(\\\"Pointer\\\", unsafe.Pointer(ele.Addr().Pointer())) fmt.Println(\\\"UnsafePointer\\\", ele.Addr().UnsafePointer()) }\",\"输出\",\"&num 0xc0000a6058 Addr 0xc0000a6058 UnsafeAddr 0xc0000a6058 Pointer 0xc0000a6058 UnsafePointer 0xc0000a6058\",\"提示\",\"fmt.Println会反射获取参数的类型，如果是reflect.Value类型的话，会自动调用Value.Interface()来获取其原始值。\",\"换成一个 map 再来一遍\",\"func main() { dic := map[string]int{} ele := reflect.ValueOf(&dic).Elem() println(dic) fmt.Println(\\\"Addr\\\", ele.Addr()) fmt.Println(\\\"UnsafeAddr\\\", *(*unsafe.Pointer)(unsafe.Pointer(ele.UnsafeAddr()))) fmt.Println(\\\"Pointer\\\", unsafe.Pointer(ele.Pointer())) fmt.Println(\\\"UnsafePointer\\\", ele.UnsafePointer()) }\",\"输出\",\"0xc00010e4b0 Addr &map[] UnsafeAddr 0xc00010e4b0 Pointer 0xc00010e4b0 UnsafePointer 0xc00010e4b0\"]},\"442\":{\"h\":\"设置值\",\"t\":[\"func (v Value) Set(x Value)\",\"倘若通过反射来修改反射值，那么其值必须是可取址的，这时应该通过指针来修改其元素值，而不是直接尝试修改元素的值。\",\"func main() { // *int num := new(int) *num = 114514 rValue := reflect.ValueOf(num) // 获取指针指向的元素 ele := rValue.Elem() fmt.Println(ele.Interface()) ele.SetInt(11) fmt.Println(ele.Interface()) }\",\"输出如下\",\"114514 11\"]},\"443\":{\"h\":\"获取值\",\"t\":[\"func (v Value) Interface() (i any)\",\"通过Interface()方法可以获取反射值原有的值\",\"func main() { var str string str = \\\"hello\\\" rValue := reflect.ValueOf(str) if v, ok := rValue.Interface().(string); ok { fmt.Println(v) } }\",\"输出\",\"hello\"]},\"444\":{\"h\":\"函数\",\"t\":[\"通过反射可以获取函数的一切信息，也可以反射调用函数\"]},\"445\":{\"h\":\"信息\",\"t\":[\"通过反射类型来获取函数的一切信息\",\"func Max(a, b int) int { if a > b { return a } return b } func main() { rType := reflect.TypeOf(Max) // 输出函数名称,字面量函数的类型没有名称 fmt.Println(rType.Name()) // 输出参数，返回值的数量 fmt.Println(rType.NumIn(), rType.NumOut()) rParamType := rType.In(0) // 输出第一个参数的类型 fmt.Println(rParamType.Kind()) rResType := rType.Out(0) // 输出第一个返回值的类型 fmt.Println(rResType.Kind()) }\",\"输出\",\" 2 1 int int\"]},\"446\":{\"h\":\"调用\",\"t\":[\"通过反射值来调用函数\",\"func (v Value) Call(in []Value) []Value\",\"func main() { // 获取函数的反射值 rType := reflect.ValueOf(Max) // 传入参数数组 rResValue := rType.Call([]reflect.Value{reflect.ValueOf(18), reflect.ValueOf(50)}) for _, value := range rResValue { fmt.Println(value.Interface()) } }\",\"输出\",\"50\"]},\"447\":{\"h\":\"结构体\",\"t\":[\"假设有如下结构体\",\"type Person struct { Name string `json:\\\"name\\\"` Age int `json:\\\"age\\\"` Address string `json:\\\"address\\\"` money int } func (p Person) Talk(msg string) string { return msg }\"]},\"448\":{\"h\":\"访问字段\",\"t\":[\"reflect.StructField结构的结构如下\",\"type StructField struct { // 字段名称 Name string // 包名 PkgPath string // 类型名 Type Type // Tag Tag StructTag // 字段的字节偏移 Offset uintptr // 索引 Index []int // 是否为嵌套字段 Anonymous bool }\",\"访问结构体字段的方法有两种，一种是通过索引来进行访问，另一种是通过名称。\",\"type Type interface{ Field(i int) StructField }\",\"通过索引访问的例子如下\",\"func main() { rType := reflect.TypeOf(new(Person)).Elem() // 输出结构体字段的数量 fmt.Println(rType.NumField()) for i := 0; i < rType.NumField(); i++ { structField := rType.Field(i) fmt.Println(structField.Index, structField.Name, structField.Type, structField.Offset, structField.IsExported()) } }\",\"输出\",\"4 [0] Name string 0 true [1] Age int 16 true [2] Address string 24 true [3] money int 40 false\",\"type Type interface{ FieldByName(name string) (StructField, bool) }\",\"通过名称访问的例子如下\",\"func main() { rType := reflect.TypeOf(new(Person)).Elem() // 输出结构体字段的数量 fmt.Println(rType.NumField()) if field, ok := rType.FieldByName(\\\"money\\\"); ok { fmt.Println(field.Name, field.Type, field.IsExported()) } }\",\"输出\",\"4 money int false\"]},\"449\":{\"h\":\"修改字段\",\"t\":[\"倘若要修改结构体字段值，则必须传入一个结构体指针，下面是一个修改字段的例子\",\"func main() { // 传入指针 rValue := reflect.ValueOf(&Person{ Name: \\\"\\\", Age: 0, Address: \\\"\\\", money: 0, }).Elem() // 获取字段 name := rValue.FieldByName(\\\"Name\\\") // 修改字段值 if (name != reflect.Value{}) { // 如果返回reflect.Value{}，则说明该字段不存在 name.SetString(\\\"jack\\\") } // 输出结构体 fmt.Println(rValue.Interface()) }\",\"输出\",\"{jack 0 0}\",\"对于修改结构体私有字段而言，需要进行一些额外的操作，如下\",\"func main() { // 传入指针 rValue := reflect.ValueOf(&Person{ Name: \\\"\\\", Age: 0, Address: \\\"\\\", money: 0, }).Elem() // 获取一个私有字段 money := rValue.FieldByName(\\\"money\\\") // 修改字段值 if (money != reflect.Value{}) { // 构造指向该结构体未导出字段的指针反射值 p := reflect.NewAt(money.Type(), money.Addr().UnsafePointer()) // 获取该指针所指向的元素，也就是要修改的字段 field := p.Elem() // 修改值 field.SetInt(164) } // 输出结构体 fmt.Printf(\\\"%+v\\\\n\\\", rValue.Interface()) }\"]},\"450\":{\"h\":\"访问 Tag\",\"t\":[\"获取到StructField后，便可以直接访问其 Tag\",\"// 如果不存在，ok为false func (tag StructTag) Lookup(key string) (value string, ok bool) // 如果不存在，返回空字符串 func (tag StructTag) Get(key string) string\",\"示例如下\",\"func main() { rType := reflect.TypeOf(new(Person)).Elem() name, ok := rType.FieldByName(\\\"Name\\\") if ok { fmt.Println(name.Tag.Lookup(\\\"json\\\")) fmt.Println(name.Tag.Get(\\\"json\\\")) } }\",\"输出\",\"name true name\"]},\"451\":{\"h\":\"访问方法\",\"t\":[\"访问方法与访问字段的过程很相似，只是函数签名略有区别。reflect.Method结构体如下\",\"type Method struct { // 方法名 Name string // 包名 PkgPath string // 方法类型 Type Type // 方法对应的函数，第一个参数是接收者 Func Value // 索引 Index int }\",\"访问方法信息示例如下\",\"func main() { // 获取结构体反射类型 rType := reflect.TypeOf(new(Person)).Elem() // 输出方法个数 fmt.Println(rType.NumMethod()) // 遍历输出方法信息 for i := 0; i < rType.NumMethod(); i++ { method := rType.Method(i) fmt.Println(method.Index, method.Name, method.Type, method.IsExported()) } }\",\"输出\",\"1 0 Talk func(main.Person, string) string true\",\"如果想要获取方法的参数和返回值细节，可以通过Method.Func来进行获取，过程与访问函数信息一致，将上面的代码稍微修改下\",\"func main() { // 获取结构体反射类型 rType := reflect.TypeOf(new(Person)).Elem() // 输出方法个数 fmt.Println(rType.NumMethod()) // 遍历输出方法信息 for i := 0; i < rType.NumMethod(); i++ { method := rType.Method(i) fmt.Println(method.Index, method.Name, method.Type, method.IsExported()) fmt.Println(\\\"方法参数\\\") for i := 0; i < method.Func.Type().NumIn(); i++ { fmt.Println(method.Func.Type().In(i).String()) } fmt.Println(\\\"方法返回值\\\") for i := 0; i < method.Func.Type().NumOut(); i++ { fmt.Println(method.Func.Type().Out(i).String()) } } }\",\"可以看到第一个参数是main.Person，也就是接收者类型\",\"1 0 Talk func(main.Person, string) string true 方法参数 main.Person string 方法返回值 string\"]},\"452\":{\"h\":\"调用方法\",\"t\":[\"调用方法与调用函数的过程相似，而且并不需要手动传入接收者，例子如下\",\"func main() { // 获取结构体反射类型 rValue := reflect.ValueOf(new(Person)).Elem() // 输出方法个数 fmt.Println(rValue.NumMethod()) // 遍历输出方法信息 talk := rValue.MethodByName(\\\"Talk\\\") if (talk != reflect.Value{}) { // 调用方法，并获取返回值 res := talk.Call([]reflect.Value{reflect.ValueOf(\\\"hello,reflect!\\\")}) // 遍历输出返回值 for _, re := range res { fmt.Println(re.Interface()) } } }\",\"输出\",\"1 hello,reflect!\"]},\"453\":{\"h\":\"创建\",\"t\":[\"通过反射可以构造新的值，reflect包同时根据一些特殊的类型提供了不同的更为方便的函数。\"]},\"454\":{\"h\":\"基本类型\",\"t\":[\"// 返回指向反射值的指针反射值 func New(typ Type) Value\",\"以string为例\",\"func main() { rValue := reflect.New(reflect.TypeOf(*new(string))) rValue.Elem().SetString(\\\"hello world!\\\") fmt.Println(rValue.Elem().Interface()) }\",\"hello world!\"]},\"455\":{\"h\":\"结构体\",\"t\":[\"结构体的创建同样用到reflect.New函数\",\"type Person struct { Name string `json:\\\"name\\\"` Age int `json:\\\"age\\\"` Address string `json:\\\"address\\\"` money int } func (p Person) Talk(msg string) string { return msg } func main() { // 创建结构体反射值 rType := reflect.TypeOf(new(Person)).Elem() person := reflect.New(rType).Elem() fmt.Println(person.Interface()) }\",\"输出\",\"{ 0 0}\"]},\"456\":{\"h\":\"切片\",\"t\":[\"反射创建切片\",\"func MakeSlice(typ Type, len, cap int) Value\",\"func main() { // 创建切片反射值 rValue := reflect.MakeSlice(reflect.TypeOf(*new([]int)), 10, 10) // 遍历赋值 for i := 0; i < 10; i++ { rValue.Index(i).SetInt(int64(i)) } fmt.Println(rValue.Interface()) }\",\"[0 1 2 3 4 5 6 7 8 9]\"]},\"457\":{\"h\":\"Map\",\"t\":[\"反射创建 Map\",\"func MakeMapWithSize(typ Type, n int) Value\",\"func main() { //构建map反射值 rValue := reflect.MakeMapWithSize(reflect.TypeOf(*new(map[string]int)), 10) // 设置值 rValue.SetMapIndex(reflect.ValueOf(\\\"a\\\"), reflect.ValueOf(1)) fmt.Println(rValue.Interface()) }\",\"map[a:1]\"]},\"458\":{\"h\":\"管道\",\"t\":[\"反射创建管道\",\"func MakeChan(typ Type, buffer int) Value\",\"func main() { // 创建管道反射值 makeChan := reflect.MakeChan(reflect.TypeOf(new(chan int)).Elem(), 0) fmt.Println(makeChan.Interface()) }\"]},\"459\":{\"h\":\"函数\",\"t\":[\"反射创建函数\",\"func MakeFunc(typ Type, fn func(args []Value) (results []Value)) Value\",\"func main() { // 传入包装类型和函数体 fn := reflect.MakeFunc(reflect.TypeOf(new(func(int))).Elem(), func(args []reflect.Value) (results []reflect.Value) { for _, arg := range args { fmt.Println(arg.Interface()) } return nil }) fmt.Println(fn.Type()) fn.Call([]reflect.Value{reflect.ValueOf(1024)}) }\",\"输出\",\"func(int) 1024\"]},\"460\":{\"h\":\"完全相等\",\"t\":[\"reflect.DeepEqual是反射包下提供的一个用于判断两个变量是否完全相等的函数，签名如下。\",\"func DeepEqual(x, y any) bool\",\"该函数对于每一种基础类型都做了处理，下面是一些类型判断方式。\",\"数组：数组中的每一个元素都完全相等\",\"切片：都为nil时，判为完全相等，或者都不为空时，长度范围内的元素完全相等\",\"结构体：所有字段都完全相等\",\"映射表：都为nil时，为完全相等，都不为nil时，每一个键所映射的值都完全相等\",\"指针：指向同一个元素或指向的元素完全相等\",\"接口：接口的具体类型完全相等时\",\"函数：只有两者都为nil时才是完全相等，否则就不是完全相等\",\"下面是一些例子：\",\"切片\",\"func main() { a := make([]int, 100) b := make([]int, 100) fmt.Println(reflect.DeepEqual(a, b)) }\",\"输出\",\"true\",\"结构体\",\"func main() { mike := Person{ Name: \\\"mike\\\", Age: 39, Father: nil, } jack := Person{ Name: \\\"jack\\\", Age: 18, Father: &mike, } tom := Person{ Name: \\\"tom\\\", Age: 18, Father: &mike, } fmt.Println(reflect.DeepEqual(mike, jack)) fmt.Println(reflect.DeepEqual(tom, jack)) fmt.Println(reflect.DeepEqual(jack, jack)) }\",\"输出\",\"false false true\"]},\"461\":{\"h\":\"并发\",\"t\":[\"Go 语言对于并发的支持是纯天然的，这是这门语言的核心所在，其上手难度相对较小，开发人员不太需要关注底层实现就能做出一个相当不错的并发应用，提高了开发人员的下限。\"]},\"462\":{\"h\":\"协程\",\"t\":[\"协程（coroutine）是一种轻量级的线程，或者说是用户态的线程，不受操作系统直接调度，由 Go 语言自身的调度器进行运行时调度，因此上下文切换开销非常小，这也是为什么 Go 的并发性能很不错的原因之一。协程这一概念并非 Go 首次提出，Go 也不是第一个支持协程的语言，但 Go 是第一个能够将协程和并发支持的相当简洁和优雅的语言。\",\"在 Go 中，创建一个协程十分的简单，仅需要一个go关键字，就能够快速开启一个协程，go关键字后面必须是一个函数调用。例子如下\",\"提示\",\"具有返回值的内置函数不允许跟随在go关键字后面，例如下面的错误示范\",\"go make([]int,10) // go discards result of make([]int, 10) (value of type []int)\",\"func main() { go fmt.Println(\\\"hello world!\\\") go hello() go func() { fmt.Println(\\\"hello world!\\\") }() } func hello() { fmt.Println(\\\"hello world!\\\") }\",\"以上三种开启协程的方式都是可以的，但是其实这个例子执行过后在大部分情况下什么都不会输出，协程是并发执行的，系统创建协程需要时间，而在此之前，主协程早已运行结束，一旦主线程退出，其他子协程也就自然退出了。并且协程的执行顺序也是不确定的，无法预判的，例如下面的例子\",\"func main() { fmt.Println(\\\"start\\\") for i := 0; i < 10; i++ { go fmt.Println(i) } fmt.Println(\\\"end\\\") }\",\"这是一个在循环体中开启协程的例子，永远也无法精准的预判到它到底会输出什么。可能子协程还没开始运行，主协程就已经结束了，情况如下\",\"start end\",\"又或者只有一部分子协程在主协程退出前成功运行，情况如下\",\"start 0 1 5 3 4 6 7 end\",\"最简单的做法就是让主协程等一会儿，需要使用到time包下的Sleep函数，可以使当前协程暂停一段时间，例子如下\",\"func main() { fmt.Println(\\\"start\\\") for i := 0; i < 10; i++ { go fmt.Println(i) } // 暂停1ms time.Sleep(time.Millisecond) fmt.Println(\\\"end\\\") }\",\"再次执行输出如下，可以看到所有的数字都完整输出了，没有遗漏\",\"start 0 1 5 2 3 4 6 8 9 7 end\",\"但是顺序还是乱的，因此让每次循环都稍微的等一下。例子如下\",\"func main() { fmt.Println(\\\"start\\\") for i := 0; i < 10; i++ { go fmt.Println(i) time.Sleep(time.Millisecond) } time.Sleep(time.Millisecond) fmt.Println(\\\"end\\\") }\",\"现在的输出已经是正常的顺序了\",\"start 0 1 2 3 4 5 6 7 8 9 end\",\"上面的例子中结果输出很完美，那么并发的问题解决了吗，不，一点也没有。对于并发的程序而言，不可控的因素非常多，执行的时机，先后顺序，执行过程的耗时等等，倘若循环中子协程的工作不只是一个简单的输出数字，而是一个非常巨大复杂的任务，耗时的不确定的，那么依旧会重现之前的问题。例如下方代码\",\"func main() { fmt.Println(\\\"start\\\") for i := 0; i < 10; i++ { go hello(i) time.Sleep(time.Millisecond) } time.Sleep(time.Millisecond) fmt.Println(\\\"end\\\") } func hello(i int) { // 模拟随机耗时 time.Sleep(time.Millisecond * time.Duration(rand.Intn(1000))) fmt.Println(i) }\",\"这段代码的输出依旧是不确定的，下面是可能的情况之一\",\"start 0 3 4 end\",\"因此time.Sleep并不是一种良好的解决办法，幸运的是 Go 提供了非常多的并发控制手段，常用的并发控制方法有三种：\",\"channel：管道\",\"WaitGroup：信号量\",\"Context：上下文\",\"三种方法有着不同的适用情况，WaitGroup可以动态的控制一组指定数量的协程，Context更适合子孙协程嵌套层级更深的情况，管道更适合协程间通信。对于较为传统的锁控制，Go 也对此提供了支持：\",\"Mutex：互斥锁\",\"RWMutex ：读写互斥锁\"]},\"463\":{\"h\":\"管道\",\"t\":[\"channel，译为管道，Go 对于管道的作用如下解释：\",\"Do not communicate by sharing memory; instead, share memory by communicating.\",\"即通过消息来进行内存共享，channel就是为此而生，它是一种在协程间通信的解决方案，同时也可以用于并发控制，先来认识下channel的基本语法。Go 中通过关键字chan来代表管道类型，同时也必须声明管道的存储类型，来指定其存储的数据是什么类型，下面的例子是一个普通管道的模样。\",\"var ch chan int\",\"这是一个管道的声明语句，此时管道还未初始化，其值为nil，不可以直接使用。\"]},\"464\":{\"h\":\"创建\",\"t\":[\"在创建管道时，有且只有一种方法，那就是使用内置函数make，对于管道而言，make函数接收两个参数，第一个是管道的类型，第二个是可选参数为管道的缓冲大小。例子如下\",\"intCh := make(chan int) // 缓冲区大小为1的管道 strCh := make(chan string, 1)\",\"在使用完一个管道后一定要记得关闭该管道，使用内置函数close来关闭一个管道，该函数签名如下。\",\"func close(c chan<- Type)\",\"一个关闭管道的例子如下\",\"func main() { intCh := make(chan int) // do something close(intCh) }\",\"有些时候使用defer来关闭管道可能会更好。\"]},\"465\":{\"h\":\"读写\",\"t\":[\"对于一个管道而言，Go 使用了两种很形象的操作符来表示读写操作：\",\"ch <-：表示对一个管道写入数据\",\"<- ch：表示对一个管道读取数据\",\"<-很生动的表示了数据的流动方向，来看一个对int类型的管道读写的例子\",\"func main() { // 如果没有缓冲区则会导致死锁 intCh := make(chan int, 1) defer close(intCh) // 写入数据 intCh <- 114514 // 读取数据 fmt.Println(<-intCh) }\",\"上面的例子中创建了一个缓冲区大小为 1 的int型管道，对其写入数据114514，然后再读取数据并输出，最后关闭该管道。对于读取操作而言，还有第二个返回值，一个布尔类型的值，用于表示数据是否读取成功\",\"ints, ok := <-intCh\",\"管道中的数据流动方式与队列一样，即先进先出（FIFO），协程对于管道的操作是同步的，在某一个时刻，只有一个协程能够对其写入数据，同时也只有一个协程能够读取管道中的数据。\"]},\"466\":{\"h\":\"无缓冲\",\"t\":[\"对于无缓冲管道而言，因为缓冲区容量为 0，所以不会临时存放任何数据。正因为无缓冲管道无法存放数据，在向管道写入数据时必须立刻有其他协程来读取数据，否则就会阻塞等待，读取数据时也是同理，这也解释了为什么下面看起来很正常的代码会发生死锁。\",\"func main() { // 创建无缓冲管道 ch := make(chan int) defer close(ch) // 写入数据 ch <- 123 // 读取数据 n := <-ch fmt.Println(n) }\",\"无缓冲管道不应该同步的使用，正确来说应该开启一个新的协程来发送数据，如下例\",\"func main() { // 创建无缓冲管道 ch := make(chan int) defer close(ch) go func() { // 写入数据 ch <- 123 }() // 读取数据 n := <-ch fmt.Println(n) }\"]},\"467\":{\"h\":\"有缓冲\",\"t\":[\"当管道有了缓冲区，就像是一个阻塞队列一样，读取空的管道和写入已满的管道都会造成阻塞。无缓冲管道在发送数据时，必须立刻有人接收，否则就会一直阻塞。对于有缓冲管道则不必如此，对于有缓冲管道写入数据时，会先将数据放入缓冲区里，只有当缓冲区容量满了才会阻塞的等待协程来读取管道中的数据。同样的，读取有缓冲管道时，会先从缓冲区中读取数据，直到缓冲区没数据了，才会阻塞的等待协程来向管道中写入数据。因此，无缓冲管道中会造成死锁例子在这里可以顺利运行。\",\"func main() { // 创建有缓冲管道 ch := make(chan int, 1) defer close(ch) // 写入数据 ch <- 123 // 读取数据 n := <-ch fmt.Println(n) }\",\"尽管可以顺利运行，但这种同步读写的方式是非常危险的，一旦管道缓冲区空了或者满了，将会永远阻塞下去，因为没有其他协程来向管道中写入或读取数据。来看看下面的一个例子\",\"func main() { // 创建有缓冲管道 ch := make(chan int, 5) // 创建两个无缓冲管道 chW := make(chan struct{}) chR := make(chan struct{}) defer func() { close(ch) close(chW) close(chR) }() // 负责写 go func() { for i := 0; i < 10; i++ { ch <- i fmt.Println(\\\"写入\\\", i) } chW <- struct{}{} }() // 负责读 go func() { for i := 0; i < 10; i++ { // 每次读取数据都需要花费1毫秒 time.Sleep(time.Millisecond) fmt.Println(\\\"读取\\\", <-ch) } chR <- struct{}{} }() fmt.Println(\\\"写入完毕\\\", <-chW) fmt.Println(\\\"读取完毕\\\", <-chR) }\",\"这里总共创建了 3 个管道，一个有缓冲管道用于协程间通信，两个无缓冲管道用于同步父子协程的执行顺序。负责读的协程每次读取之前都会等待 1 毫秒，负责写的协程一口气做多也只能写入 5 个数据，因为管道缓冲区最大只有 5，在没有协程来读取之前，只能阻塞等待。所以该示例输出如下\",\"写入 0 写入 1 写入 2 写入 3 写入 4 // 一下写了5个，缓冲区满了，等其他协程来读 读取 0 写入 5 // 读一个，写一个 读取 1 写入 6 读取 2 写入 7 读取 3 写入 8 写入 9 读取 4 写入完毕 {} // 所有的数据都发送完毕，写协程执行完毕 读取 5 读取 6 读取 7 读取 8 读取 9 读取完毕 {} // 所有的数据都读完了，读协程执行完毕\",\"可以看到负责写的协程刚开始就一口气发送了 5 个数据，缓冲区满了以后就开始阻塞等待读协程来读取，后面就是每当读协程 1 毫秒读取一个数据，缓冲区有空位了，写协程就写入一个数据，直到所有数据发送完毕，写协程执行结束，随后当读协程将缓冲区所有数据读取完毕后，读协程也执行结束，最后主协程退出。\",\"提示\",\"通过内置函数len可以访问管道缓冲区中数据的个数，通过cap可以访问管道缓冲区的大小。\",\"func main() { ch := make(chan int, 5) ch <- 1 ch <- 2 ch <- 3 fmt.Println(len(ch), cap(ch)) }\",\"输出\",\"3 5\",\"利用管道的阻塞条件，可以很轻易的写出一个主协程等待子协程执行完毕的例子\",\"func main() { // 创建一个无缓冲管道 ch := make(chan struct{}) defer close(ch) go func() { fmt.Println(2) // 写入 ch <- struct{}{} }() // 阻塞等待读取 <-ch fmt.Println(1) }\",\"输出\",\"2 1\",\"通过有缓冲管道还可以实现一个简单的互斥锁，看下面的例子\",\"var count = 0 // 缓冲区大小为1的管道 var lock = make(chan struct{}, 1) func Add() { // 加锁 lock <- struct{}{} fmt.Println(\\\"当前计数为\\\", count, \\\"执行加法\\\") count += 1 // 解锁 <-lock } func Sub() { // 加锁 lock <- struct{}{} fmt.Println(\\\"当前计数为\\\", count, \\\"执行减法\\\") count -= 1 // 解锁 <-lock }\",\"由于管道的缓冲区大小为 1，最多只有一个数据存放在缓冲区中。Add和Sub函数在每次操作前都会尝试向管道中发送数据，由于缓冲区大小为 1，倘若有其他协程已经写入了数据，缓冲区已经满了，当前协程就必须阻塞等待，直到缓冲区空出位置来，如此一来，在某一个时刻，最多只能有一个协程对变量count进行修改，这样就实现了一个简单的互斥锁。\"]},\"468\":{\"h\":\"注意点\",\"t\":[\"下面是一些总结，以下几种情况使用不当会导致管道阻塞：\",\"读写无缓冲管道\",\"当对一个无缓冲管道直接进行同步读写操作都会导致该协程阻塞\",\"func main() { // 创建了一个无缓冲管道 intCh := make(chan int) defer close(intCh) // 发送数据 intCh <- 1 // 读取数据 ints, ok := <-intCh fmt.Println(ints, ok) }\",\"读取空缓冲区的管道\",\"当读取一个缓冲区为空的管道时，会导致该协程阻塞\",\"func main() { // 创建的有缓冲管道 intCh := make(chan int, 1) defer close(intCh) // 缓冲区为空，阻塞等待其他协程写入数据 ints, ok := <-intCh fmt.Println(ints, ok) }\",\"写入满缓冲区的管道\",\"当管道的缓冲区已满，对其写入数据会导致该协程阻塞\",\"func main() { // 创建的有缓冲管道 intCh := make(chan int, 1) defer close(intCh) intCh <- 1 // 满了，阻塞等待其他协程来读取数据 intCh <- 1 }\",\"管道为nil\",\"当管道为nil时，无论怎样读写都会导致当前协程阻塞\",\"func main() { var intCh chan int // 写 intCh <- 1 }\",\"func main() { var intCh chan int // 读 fmt.Println(<-intCh) }\",\"关于管道阻塞的条件需要好好掌握和熟悉，大多数情况下这些问题隐藏的十分隐蔽，并不会像例子中那样直观。\",\"以下几种情况还会导致panic：\",\"关闭一个nil管道\",\"当管道为nil时，使用close函数对其进行关闭操作会导致 panic`\",\"func main() { var intCh chan int close(intCh) }\",\"写入已关闭的管道\",\"对一个已关闭的管道写入数据会导致panic\",\"func main() { intCh := make(chan int, 1) close(intCh) intCh <- 1 }\",\"关闭已关闭的管道\",\"在一些情况中，管道可能经过层层传递，调用者或许也不知道到底该由谁来关闭管道，如此一来，可能会发生关闭一个已经关闭了的管道，就会发生panic。\",\"func main() { ch := make(chan int, 1) defer close(ch) go write(ch) fmt.Println(<-ch) } func write(ch chan<- int) { // 只能对管道发送数据 ch <- 1 close(ch) }\"]},\"469\":{\"h\":\"单向管道\",\"t\":[\"双向管道指的是既可以写，也可以读，即可以在管道两边进行操作。单向管道指的是只读或只写的管道，即只能在管道的一边进行操作。手动创建的一个只读或只写的管道没有什么太大的意义，因为不能对管道读写就失去了其存在的作用。单向管道通常是用来限制通道的行为，一般会在函数的形参和返回值中出现，例如用于关闭通道的内置函数close的函数签名就用到了单向通道。\",\"func close(c chan<- Type)\",\"又或者说常用到的time包下的After函数\",\"func After(d Duration) <-chan Time\",\"close函数的形参是一个只写通道，After函数的返回值是一个只读通道，所以单向通道的语法如下：\",\"箭头符号<-在前，就是只读通道，如<-chan int\",\"箭头符号<-在后，就是只写通道，如chan<- string\",\"当尝试对只读的管道写入数据时，将会无法通过编译\",\"func main() { timeCh := time.After(time.Second) timeCh <- time.Now() }\",\"报错如下，意思非常明确\",\"invalid operation: cannot send to receive-only channel timeCh (variable of type <-chan time.Time)\",\"对只写的管道读取数据也是同理。\",\"双向管道可以转换为单向管道，反过来则不可以。通常情况下，将双向管道传给某个协程或函数并且不希望它读取/发送数据，就可以用到单向管道来限制另一方的行为。\",\"func main() { ch := make(chan int, 1) go write(ch) fmt.Println(<-ch) } func write(ch chan<- int) { // 只能对管道发送数据 ch <- 1 }\",\"只读管道也是一样的道理\",\"提示\",\"chan是引用类型，即便 Go 的函数参数是值传递，但其引用依旧是同一个，这一点会在后续的管道原理中说明。\"]},\"470\":{\"h\":\"for range\",\"t\":[\"通过for range语句，可以遍历读取缓冲管道中的数据，如下例\",\"func main() { ch := make(chan int, 10) go func() { for i := 0; i < 10; i++ { ch <- i } }() for n := range ch { fmt.Println(n) } }\",\"通常来说，for range遍历其他可迭代数据结构时，会有两个返回值，第一个是索引，第二个元素值，但是对于管道而言，有且仅有一个返回值，for range会不断读取管道中的元素，当管道缓冲区为空或无缓冲时，就会阻塞等待，直到有其他协程向管道中写入数据才会继续读取数据。所以输出如下：\",\"0 1 2 3 4 5 6 7 8 9 fatal error: all goroutines are asleep - deadlock!\",\"可以看到上面的代码发生了死锁，因为子协程已经执行完毕了，而主协程还在阻塞等待其他协程来向管道中写入数据，所以应该管道在写入完毕后将其关闭。修改为如下代码\",\"func main() { ch := make(chan int, 10) go func() { for i := 0; i < 10; i++ { ch <- i } // 关闭管道 close(ch) }() for n := range ch { fmt.Println(n) } }\",\"写完后关闭管道，上述代码便不再会发生死锁。前面提到过读取管道是有两个返回值的，for range遍历管道时，当无法成功读取数据时，便会退出循环。第二个返回值指的是能否成功读取数据，而不是管道是否已经关闭，即便管道已经关闭，对于有缓冲管道而言，依旧可以读取数据，并且第二个返回值仍然为true。看下面的一个例子\",\"func main() { ch := make(chan int, 10) for i := 0; i < 5; i++ { ch <- i } // 关闭管道 close(ch) // 再读取数据 for i := 0; i < 6; i++ { n, ok := <-ch fmt.Println(n, ok) } }\",\"输出结果\",\"0 true 1 true 2 true 3 true 4 true 0 false\",\"由于管道已经关闭了，即便缓冲区为空，再读取数据也不会导致当前协程阻塞，可以看到在第六次遍历的时候读取的是零值，并且ok为false。\",\"提示\",\"关于管道关闭的时机，应该尽量在向管道发送数据的那一方关闭管道，而不要在接收方关闭管道，因为大多数情况下接收方只知道接收数据，并不知道该在什么时候关闭管道。\"]},\"471\":{\"h\":\"select\",\"t\":[\"select在 Linux 系统中，是一种 IO 多路复用的解决方案，类似的，在 Go 中，select是一种管道多路复用的控制结构。什么是多路复用，简单的用一句话概括：在某一时刻，同时监测多个元素是否可用，被监测的可以是网络请求，文件 IO 等。在 Go 中的select监测的元素就是管道，且只能是管道。select的语法与switch语句类似，下面看看一个select语句长什么样\",\"func main() { // 创建三个管道 chA := make(chan int) chB := make(chan int) chC := make(chan int) defer func() { close(chA) close(chB) close(chC) }() select { case n, ok := <-chA: fmt.Println(n, ok) case n, ok := <-chB: fmt.Println(n, ok) case n, ok := <-chC: fmt.Println(n, ok) default: fmt.Println(\\\"所有管道都不可用\\\") } }\",\"与switch类似，select由多个case和一个default组成，default分支可以省略。每一个case只能操作一个管道，且只能进行一种操作，要么读要么写，当有多个case可用时，select会伪随机的选择一个case来执行。如果所有case都不可用，就会执行default分支，倘若没有default分支，将会阻塞等待，直到至少有一个case可用。由于上例中没有对管道写入数据，自然所有的case都不可用，所以最终输出为default分支的执行结果。稍微修改下后如下：\",\"func main() { chA := make(chan int) chB := make(chan int) chC := make(chan int) defer func() { close(chA) close(chB) close(chC) }() // 开启一个新的协程 go func() { // 向A管道写入数据 chA <- 1 }() select { case n, ok := <-chA: fmt.Println(n, ok) case n, ok := <-chB: fmt.Println(n, ok) case n, ok := <-chC: fmt.Println(n, ok) } }\",\"上例开启了一个新的协程来向管道 A 写入数据，select由于没有默认分支，所以会一直阻塞等待直到有case可用。当管道 A 可用时，执行完对应分支后主协程就直接退出了。要想一直监测管道，可以配合for循环使用，如下。\",\"func main() { chA := make(chan int) chB := make(chan int) chC := make(chan int) defer func() { close(chA) close(chB) close(chC) }() go Send(chA) go Send(chB) go Send(chC) // for循环 for { select { case n, ok := <-chA: fmt.Println(\\\"A\\\", n, ok) case n, ok := <-chB: fmt.Println(\\\"B\\\", n, ok) case n, ok := <-chC: fmt.Println(\\\"C\\\", n, ok) } } } func Send(ch chan<- int) { for i := 0; i < 3; i++ { time.Sleep(time.Millisecond) ch <- i } }\",\"这样确实三个管道都能用上了，但是死循环+select会导致主协程永久阻塞，所以可以将其单独放到新协程中，并且加上一些其他的逻辑。\",\"func main() { chA := make(chan int) chB := make(chan int) chC := make(chan int) defer func() { close(chA) close(chB) close(chC) }() l := make(chan struct{}) go Send(chA) go Send(chB) go Send(chC) go func() { Loop: for { select { case n, ok := <-chA: fmt.Println(\\\"A\\\", n, ok) case n, ok := <-chB: fmt.Println(\\\"B\\\", n, ok) case n, ok := <-chC: fmt.Println(\\\"C\\\", n, ok) case <-time.After(time.Second): // 设置1秒的超时时间 break Loop // 退出循环 } } l <- struct{}{} // 告诉主协程可以退出了 }() <-l } func Send(ch chan<- int) { for i := 0; i < 3; i++ { time.Sleep(time.Millisecond) ch <- i } }\",\"上例中通过for循环配合select来一直监测三个管道是否可以用，并且第四个case是一个超时管道，超时过后便会退出循环，结束子协程。最终输出如下\",\"C 0 true A 0 true B 0 true A 1 true B 1 true C 1 true B 2 true C 2 true A 2 true\",\"超时\",\"上一个例子用到了time.After函数，其返回值是一个只读的管道，该函数配合select使用可以非常简单的实现超时机制，例子如下\",\"func main() { chA := make(chan int) defer close(chA) go func() { time.Sleep(time.Second * 2) chA <- 1 }() select { case n := <-chA: fmt.Println(n) case <-time.After(time.Second): fmt.Println(\\\"超时\\\") } }\",\"永久阻塞\",\"当select语句中什么都没有时，就会永久阻塞，例如\",\"func main() { fmt.Println(\\\"start\\\") select {} fmt.Println(\\\"end\\\") }\",\"end永远也不会输出，主协程会一直阻塞，这种情况一般是有特殊用途。\",\"提示\",\"在select的case中对值为nil的管道进行操作的话，并不会导致阻塞，该case则会被忽略，永远也不会被执行。例如下方代码无论执行多少次都只会输出 timeout。\",\"func main() { var nilCh chan int select { case <-nilCh: fmt.Println(\\\"read\\\") case nilCh <- 1: fmt.Println(\\\"write\\\") case <-time.After(time.Second): fmt.Println(\\\"timeout\\\") } }\"]},\"472\":{\"h\":\"WaitGroup\",\"t\":[\"sync.WaitGroup是sync包下提供的一个结构体，WaitGroup即等待执行，使用它可以很轻易的实现等待一组协程的效果。该结构体只对外暴露三个方法。\",\"Add方法用于指明要等待的协程的数量\",\"func (wg *WaitGroup) Add(delta int)\",\"Done方法表示当前协程已经执行完毕\",\"func (wg *WaitGroup) Done()\",\"Wait方法等待子协程结束，否则就阻塞\",\"func (wg *WaitGroup) Wait()\",\"WaitGroup使用起来十分简单，属于开箱即用。其内部的实现是计数器+信号量，程序开始时调用Add初始化计数，每当一个协程执行完毕时调用Done，计数就-1，直到减为 0，而在此期间，主协程调用Wait 会一直阻塞直到全部计数减为 0，然后才会被唤醒。看一个简单的使用例子\",\"func main() { var wait sync.WaitGroup // 指定子协程的数量 wait.Add(1) go func() { fmt.Println(1) // 执行完毕 wait.Done() }() // 等待子协程 wait.Wait() fmt.Println(2) }\",\"这段代码永远都是先输出 1 再输出 2，主协程会等待子协程执行完毕后再退出。\",\"1 2\",\"针对协程介绍中最开始的例子，可以做出如下修改\",\"func main() { var mainWait sync.WaitGroup var wait sync.WaitGroup // 计数10 mainWait.Add(10) fmt.Println(\\\"start\\\") for i := 0; i < 10; i++ { // 循环内计数1 wait.Add(1) go func() { fmt.Println(i) // 两个计数-1 wait.Done() mainWait.Done() }() // 等待当前循环的协程执行完毕 wait.Wait() } // 等待所有的协程执行完毕 mainWait.Wait() fmt.Println(\\\"end\\\") }\",\"这里使用了sync.WaitGroup替代了原先的time.Sleep，协程并发执行的的顺序更加可控，不管执行多少次，输出都如下\",\"start 0 1 2 3 4 5 6 7 8 9 end\",\"WaitGroup通常适用于可动态调整协程数量的时候，例如事先知晓协程的数量，又或者在运行过程中需要动态调整。WaitGroup的值不应该被复制，复制后的值也不应该继续使用，尤其是将其作为函数参数传递时，因该传递指针而不是值。倘若使用复制的值，计数完全无法作用到真正的WaitGroup上，这可能会导致主协程一直阻塞等待，程序将无法正常运行。例如下方的代码\",\"func main() { var mainWait sync.WaitGroup mainWait.Add(1) hello(mainWait) mainWait.Wait() fmt.Println(\\\"end\\\") } func hello(wait sync.WaitGroup) { fmt.Println(\\\"hello\\\") wait.Done() }\",\"错误提示所有的协程都已经退出，但主协程依旧在等待，这就形成了死锁，因为hello函数内部对一个形参WaitGroup调用Done并不会作用到原来的mainWait上，所以应该使用指针来进行传递。\",\"hello fatal error: all goroutines are asleep - deadlock!\",\"提示\",\"当计数变为负数，或者计数数量大于子协程数量时，将会引发panic。\"]},\"473\":{\"h\":\"Context\",\"t\":[\"Context译为上下文，是 Go 提供的一种并发控制的解决方案，相比于管道和WaitGroup，它可以更好的控制子孙协程以及层级更深的协程。Context本身是一个接口，只要实现了该接口都可以称之为上下文例如著名 Web 框架Gin中的gin.Context。context标准库也提供了几个实现，分别是：\",\"emptyCtx\",\"cancelCtx\",\"timerCtx\",\"valueCtx\"]},\"474\":{\"h\":\"Context\",\"t\":[\"先来看看Context接口的定义，再去了解它的具体实现。\",\"type Context interface { Deadline() (deadline time.Time, ok bool) Done() <-chan struct{} Err() error Value(key any) any }\",\"Deadline\",\"该方法具有两个返回值，deadline是截止时间，即上下文应该取消的时间。第二个值是是否设置deadline，如果没有设置则一直为false。\",\"Deadline() (deadline time.Time, ok bool)\",\"Done\",\"其返回值是一个空结构体类型的只读管道，该管道仅仅起到通知作用，不传递任何数据。当上下文所做的工作应该取消时，该通道就会被关闭，对于一些不支持取消的上下文，可能会返回nil。\",\"Done() <-chan struct{}\",\"Err\",\"该方法返回一个error，用于表示上下关闭的原因。当Done管道没有关闭时，返回nil，如果关闭过后，会返回一个err来解释为什么会关闭。\",\"Err() error\",\"Value\",\"该方法返回对应的键值，如果key不存在，或者不支持该方法，就会返回nil。\",\"Value(key any) any\"]},\"475\":{\"h\":\"emptyCtx\",\"t\":[\"顾名思义，emptyCtx就是空的上下文，context包下所有的实现都是不对外暴露的，但是提供了对应的函数来创建上下文。emptyCtx就可以通过context.Background和context.TODO来进行创建。两个函数如下\",\"var ( background = new(emptyCtx) todo = new(emptyCtx) ) func Background() Context { return background } func TODO() Context { return todo }\",\"可以看到仅仅只是返回了emptyCtx指针。emptyCtx的底层类型实际上是一个int，之所以不使用空结构体，是因为emptyCtx的实例必须要有不同的内存地址，它没法被取消，没有deadline，也不能取值，实现的方法都是返回零值。\",\"type emptyCtx int func (*emptyCtx) Deadline() (deadline time.Time, ok bool) { return } func (*emptyCtx) Done() <-chan struct{} { return nil } func (*emptyCtx) Err() error { return nil } func (*emptyCtx) Value(key any) any { return nil }\",\"emptyCtx通常是用来当作最顶层的上下文，在创建其他三种上下文时作为父上下文传入。context 包中的各个实现关系如下图所示\"]},\"476\":{\"h\":\"valueCtx\",\"t\":[\"valueCtx实现比较简单，其内部只包含一对键值对，和一个内嵌的Context类型的字段。\",\"type valueCtx struct { Context key, val any }\",\"其本身只实现了Value方法，逻辑也很简单，当前上下文找不到就去父上下文找。\",\"func (c *valueCtx) Value(key any) any { if c.key == key { return c.val } return value(c.Context, key) }\",\"下面看一个valueCtx的简单使用案例\",\"var waitGroup sync.WaitGroup func main() { waitGroup.Add(1) // 传入上下文 go Do(context.WithValue(context.Background(), 1, 2)) waitGroup.Wait() } func Do(ctx context.Context) { // 新建定时器 ticker := time.NewTimer(time.Second) defer waitGroup.Done() for { select { case <-ctx.Done(): // 永远也不会执行 case <-ticker.C: fmt.Println(\\\"timeout\\\") return default: fmt.Println(ctx.Value(1)) } time.Sleep(time.Millisecond * 100) } }\",\"valueCtx多用于在多级协程中传递一些数据，无法被取消，因此ctx.Done永远会返回nil，select会忽略掉nil管道。最后输出如下\",\"2 2 2 2 2 2 2 2 2 2 timeout\"]},\"477\":{\"h\":\"cancelCtx\",\"t\":[\"cancelCtx以及timerCtx都实现了canceler接口，接口类型如下\",\"type canceler interface { // removeFromParent 表示是否从父上下文中删除自身 // err 表示取消的原因 cancel(removeFromParent bool, err error) // Done 返回一个管道，用于通知取消的原因 Done() <-chan struct{} }\",\"cancel方法不对外暴露，在创建上下文时通过闭包将其包装为返回值以供外界调用，就如context.WithCancel源代码中所示\",\"func WithCancel(parent Context) (ctx Context, cancel CancelFunc) { if parent == nil { panic(\\\"cannot create context from nil parent\\\") } c := newCancelCtx(parent) // 尝试将自身添加进父级的children中 propagateCancel(parent, &c) // 返回context和一个函数 return &c, func() { c.cancel(true, Canceled) } }\",\"cancelCtx译为可取消的上下文，创建时，如果父级实现了canceler，就会将自身添加进父级的children中，否则就一直向上查找。如果所有的父级都没有实现canceler，就会启动一个协程等待父级取消，然后当父级结束时取消当前上下文。当调用cancelFunc时，Done通道将会关闭，该上下文的任何子级也会随之取消，最后会将自身从父级中删除。下面是一个简单的示例：\",\"var waitGroup sync.WaitGroup func main() { bkg := context.Background() // 返回了一个cancelCtx和cancel函数 cancelCtx, cancel := context.WithCancel(bkg) waitGroup.Add(1) go func(ctx context.Context) { defer waitGroup.Done() for { select { case <-ctx.Done(): fmt.Println(ctx.Err()) return default: fmt.Println(\\\"等待取消中...\\\") } time.Sleep(time.Millisecond * 200) } }(cancelCtx) time.Sleep(time.Second) cancel() waitGroup.Wait() }\",\"输出如下\",\"等待取消中... 等待取消中... 等待取消中... 等待取消中... 等待取消中... context canceled\",\"再来一个层级嵌套深一点的示例\",\"var waitGroup sync.WaitGroup func main() { waitGroup.Add(3) ctx, cancelFunc := context.WithCancel(context.Background()) go HttpHandler(ctx) time.Sleep(time.Second) cancelFunc() waitGroup.Wait() } func HttpHandler(ctx context.Context) { cancelCtxAuth, cancelAuth := context.WithCancel(ctx) cancelCtxMail, cancelMail := context.WithCancel(ctx) defer cancelAuth() defer cancelMail() defer waitGroup.Done() go AuthService(cancelCtxAuth) go MailService(cancelCtxMail) for { select { case <-ctx.Done(): fmt.Println(ctx.Err()) return default: fmt.Println(\\\"正在处理http请求...\\\") } time.Sleep(time.Millisecond * 200) } } func AuthService(ctx context.Context) { defer waitGroup.Done() for { select { case <-ctx.Done(): fmt.Println(\\\"auth 父级取消\\\", ctx.Err()) return default: fmt.Println(\\\"auth...\\\") } time.Sleep(time.Millisecond * 200) } } func MailService(ctx context.Context) { defer waitGroup.Done() for { select { case <-ctx.Done(): fmt.Println(\\\"mail 父级取消\\\", ctx.Err()) return default: fmt.Println(\\\"mail...\\\") } time.Sleep(time.Millisecond * 200) } }\",\"例子中创建了 3 个cancelCtx，尽管父级cancelCtx在取消的同时会取消它的子上下文，但是保险起见，如果创建了一个cancelCtx，在相应的流程结束后就应该调用cancel函数。输出如下\",\"正在处理http请求... auth... mail... mail... auth... 正在处理http请求... auth... mail... 正在处理http请求... 正在处理http请求... auth... mail... auth... 正在处理http请求... mail... context canceled auth 父级取消 context canceled mail 父级取消 context canceled\"]},\"478\":{\"h\":\"timerCtx\",\"t\":[\"timerCtx在cancelCtx 的基础之上增加了超时机制，context包下提供了两种创建的函数，分别是WithDeadline和WithTimeout，两者功能类似，前者是指定一个具体的超时时间，比如指定一个具体时间2023/3/20 16:32:00，后者是指定一个超时的时间间隔，比如 5 分钟后。两个函数的签名如下\",\"func WithDeadline(parent Context, d time.Time) (Context, CancelFunc) func WithTimeout(parent Context, timeout time.Duration) (Context, CancelFunc)\",\"timerCtx会在时间到期后自动取消当前上下文，取消的流程除了要额外的关闭timer之外，基本与cancelCtx一致。下面是一个简单的timerCtx的使用示例\",\"var wait sync.WaitGroup func main() { deadline, cancel := context.WithDeadline(context.Background(), time.Now().Add(time.Second)) defer cancel() wait.Add(1) go func(ctx context.Context) { defer wait.Done() for { select { case <-ctx.Done(): fmt.Println(\\\"上下文取消\\\", ctx.Err()) return default: fmt.Println(\\\"等待取消中...\\\") } time.Sleep(time.Millisecond * 200) } }(deadline) wait.Wait() }\",\"尽管上下文到期会自动取消，但是为了保险起见，在相关流程结束后，最好手动取消上下文。输出如下\",\"等待取消中... 等待取消中... 等待取消中... 等待取消中... 等待取消中... 上下文取消 context deadline exceeded\",\"WithTimeout其实与WithDealine非常相似，它的实现也只是稍微封装了一下并调用WithDeadline，和上面例子中的WithDeadline用法一样，如下\",\"func WithTimeout(parent Context, timeout time.Duration) (Context, CancelFunc) { return WithDeadline(parent, time.Now().Add(timeout)) }\",\"提示\",\"就跟内存分配后不回收会造成内存泄漏一样，上下文也是一种资源，如果创建了但从来不取消，一样会造成上下文泄露，所以最好避免此种情况的发生。\"]},\"479\":{\"h\":\"锁\",\"t\":[\"先来看看的一个例子\",\"var wait sync.WaitGroup var count = 0 func main() { wait.Add(10) for i := 0; i < 10; i++ { go func(data *int) { // 模拟访问耗时 time.Sleep(time.Millisecond * time.Duration(rand.Intn(5000))) // 访问数据 temp := *data // 模拟计算耗时 time.Sleep(time.Millisecond * time.Duration(rand.Intn(5000))) ans := 1 // 修改数据 *data = temp + ans fmt.Println(*data) wait.Done() }(&count) } wait.Wait() fmt.Println(\\\"最终结果\\\", count) }\",\"对于上面的例子，开启了十个协程来对count进行+1操作，并且使用了time.Sleep来模拟不同的耗时，根据直觉来讲，10 个协程执行 10 个+1操作，最终结果一定是10，正确结果也确实是10，但事实并非如此，上面的例子执行结果如下：\",\"1 2 3 3 2 2 3 3 3 4 最终结果 4\",\"可以看到最终结果为 4，而这只是众多可能结果中的一种。由于每个协程访问和计算所需的时间不同，A 协程访问数据耗费 500 毫秒，此时访问到的count值为 1，随后又花费了 400 毫秒计算，但在这 400 毫秒内，B 协程已经完成了访问和计算并成功更新了count的值，A 协程在计算完毕后，A 协程最初访问到的值已经过时了，但 A 协程并不知道这件事，依旧在原先访问到的值基础上加一，并赋值给count，这样一来，B 协程的执行结果被覆盖了。多个协程读取和访问一个共享数据时，尤其会发生这样的问题，为此就需要用到锁。\",\"Go 中sync包下的Mutex与RWMutex提供了互斥锁与读写锁两种实现，且提供了非常简单易用的 API，加锁只需要Lock()，解锁也只需要Unlock()。需要注意的是，Go 所提供的锁都是非递归锁，也就是不可重入锁，所以重复加锁或重复解锁都会导致fatal。锁的意义在于保护不变量，加锁是希望数据不会被其他协程修改，如下\",\"func DoSomething() { Lock() // 在这个过程中，数据不会被其他协程修改 Unlock() }\",\"倘若是递归锁的话，就可能会发生如下情况\",\"func DoSomething() { Lock() DoOther() Unlock() } func DoOther() { Lock() // do other Unlock() }\",\"DoSomthing函数显然不知道DoOther函数可能会对数据做点什么，从而修改了数据，比如再开几个子协程破坏了不变量。这在 Go 中是行不通的，一旦加锁以后就必须保证不变量的不变性，此时重复加锁解锁都会导致死锁。所以在编写代码时应该避免上述情况，必要时在加锁的同时立即使用defer语句解锁。\"]},\"480\":{\"h\":\"互斥锁\",\"t\":[\"sync.Mutex是 Go 提供的互斥锁实现，其实现了sync.Locker接口\",\"type Locker interface { // 加锁 Lock() // 解锁 Unlock() }\",\"使用互斥锁可以非常完美的解决上述问题，例子如下\",\"var wait sync.WaitGroup var count = 0 var lock sync.Mutex func main() { wait.Add(10) for i := 0; i < 10; i++ { go func(data *int) { // 加锁 lock.Lock() // 模拟访问耗时 time.Sleep(time.Millisecond * time.Duration(rand.Intn(1000))) // 访问数据 temp := *data // 模拟计算耗时 time.Sleep(time.Millisecond * time.Duration(rand.Intn(1000))) ans := 1 // 修改数据 *data = temp + ans // 解锁 lock.Unlock() fmt.Println(*data) wait.Done() }(&count) } wait.Wait() fmt.Println(\\\"最终结果\\\", count) }\",\"每一个协程在访问数据前，都先上锁，更新完成后再解锁，其他协程想要访问就必须要先获得锁，否则就阻塞等待。如此一来，就不存在上述问题了，所以输出如下\",\"1 2 3 4 5 6 7 8 9 10 最终结果 10\"]},\"481\":{\"h\":\"读写锁\",\"t\":[\"互斥锁适合读操作与写操作频率都差不多的情况，对于一些读多写少的数据，如果使用互斥锁，会造成大量的不必要的协程竞争锁，这会消耗很多的系统资源，这时候就需要用到读写锁，即读写互斥锁，对于一个协程而言：\",\"如果获得了读锁，其他协程进行写操作时会阻塞，其他协程进行读操作时不会阻塞\",\"如果获得了写锁，其他协程进行写操作时会阻塞，其他协程进行读操作时会阻塞\",\"Go 中读写互斥锁的实现是sync.RWMutex，它也同样实现了Locker接口，但它提供了更多可用的方法，如下：\",\"// 加读锁 func (rw *RWMutex) RLock() // 尝试加读锁 func (rw *RWMutex) TryRLock() bool // 解读锁 func (rw *RWMutex) RUnlock() // 加写锁 func (rw *RWMutex) Lock() // 尝试加写锁 func (rw *RWMutex) TryLock() bool // 解写锁 func (rw *RWMutex) Unlock()\",\"其中TryRlock与TryLock两个尝试加锁的操作是非阻塞式的，成功加锁会返回true，无法获得锁时并不会阻塞而是返回false。读写互斥锁内部实现依旧是互斥锁，并不是说分读锁和写锁就有两个锁，从始至终都只有一个锁。下面来看一个读写互斥锁的使用案例\",\"var wait sync.WaitGroup var count = 0 var rw sync.RWMutex func main() { wait.Add(12) // 读多写少 go func() { for i := 0; i < 3; i++ { go Write(&count) } wait.Done() }() go func() { for i := 0; i < 7; i++ { go Read(&count) } wait.Done() }() // 等待子协程结束 wait.Wait() fmt.Println(\\\"最终结果\\\", count) } func Read(i *int) { time.Sleep(time.Millisecond * time.Duration(rand.Intn(500))) rw.RLock() fmt.Println(\\\"拿到读锁\\\") time.Sleep(time.Millisecond * time.Duration(rand.Intn(1000))) fmt.Println(\\\"释放读锁\\\", *i) rw.RUnlock() wait.Done() } func Write(i *int) { time.Sleep(time.Millisecond * time.Duration(rand.Intn(1000))) rw.Lock() fmt.Println(\\\"拿到写锁\\\") temp := *i time.Sleep(time.Millisecond * time.Duration(rand.Intn(1000))) *i = temp + 1 fmt.Println(\\\"释放写锁\\\", *i) rw.Unlock() wait.Done() }\",\"该例开启了 3 个写协程，7 个读协程，在读数据的时候都会先获得读锁，读协程可以正常获得读锁，但是会阻塞写协程，获得写锁的时候，则会同时阻塞读协程和写协程，直到释放写锁，如此一来实现了读协程与写协程互斥，保证了数据的正确性。例子输出如下：\",\"拿到读锁 拿到读锁 拿到读锁 拿到读锁 释放读锁 0 释放读锁 0 释放读锁 0 释放读锁 0 拿到写锁 释放写锁 1 拿到读锁 拿到读锁 拿到读锁 释放读锁 1 释放读锁 1 释放读锁 1 拿到写锁 释放写锁 2 拿到写锁 释放写锁 3 最终结果 3\",\"提示\",\"对于锁而言，不应该将其作为值传递和存储，应该使用指针。\"]},\"482\":{\"h\":\"条件变量\",\"t\":[\"条件变量，与互斥锁一同出现和使用，所以有些人可能会误称为条件锁，但它并不是锁，是一种通讯机制。Go 中的sync.Cond对此提供了实现，而创建条件变量的函数签名如下：\",\"func NewCond(l Locker) *Cond\",\"可以看到创建一个条件变量前提就是需要创建一个锁，sync.Cond提供了如下的方法以供使用\",\"// 阻塞等待条件生效，直到被唤醒 func (c *Cond) Wait() // 唤醒一个因条件阻塞的协程 func (c *Cond) Signal() // 唤醒所有因条件阻塞的协程 func (c *Cond) Broadcast()\",\"条件变量使用起来非常简单，将上面的读写互斥锁的例子稍微修改下即可\",\"var wait sync.WaitGroup var count = 0 var rw sync.RWMutex // 条件变量 var cond = sync.NewCond(rw.RLocker()) func main() { wait.Add(12) // 读多写少 go func() { for i := 0; i < 3; i++ { go Write(&count) } wait.Done() }() go func() { for i := 0; i < 7; i++ { go Read(&count) } wait.Done() }() // 等待子协程结束 wait.Wait() fmt.Println(\\\"最终结果\\\", count) } func Read(i *int) { time.Sleep(time.Millisecond * time.Duration(rand.Intn(500))) rw.RLock() fmt.Println(\\\"拿到读锁\\\") // 条件不满足就一直阻塞 for *i < 3 { cond.Wait() } time.Sleep(time.Millisecond * time.Duration(rand.Intn(1000))) fmt.Println(\\\"释放读锁\\\", *i) rw.RUnlock() wait.Done() } func Write(i *int) { time.Sleep(time.Millisecond * time.Duration(rand.Intn(1000))) rw.Lock() fmt.Println(\\\"拿到写锁\\\") temp := *i time.Sleep(time.Millisecond * time.Duration(rand.Intn(1000))) *i = temp + 1 fmt.Println(\\\"释放写锁\\\", *i) rw.Unlock() // 唤醒所有因条件变量阻塞的协程 cond.Broadcast() wait.Done() }\",\"在创建条件变量时，因为在这里条件变量作用的是读协程，所以将读锁作为互斥锁传入，如果直接传入读写互斥锁会导致写协程重复解锁的问题。这里传入的是sync.rlocker，通过RWMutex.RLocker方法获得。\",\"func (rw *RWMutex) RLocker() Locker { return (*rlocker)(rw) } type rlocker RWMutex func (r *rlocker) Lock() { (*RWMutex)(r).RLock() } func (r *rlocker) Unlock() { (*RWMutex)(r).RUnlock() }\",\"可以看到rlocker也只是把读写互斥锁的读锁操作封装了一下，实际上是同一个引用，依旧是同一个锁。读协程读取数据时，如果小于 3 就会一直阻塞等待，直到数据大于 3，而写协程在更新数据后都会尝试唤醒所有因条件变量而阻塞的协程，所以最后的输出如下\",\"拿到读锁 拿到读锁 拿到读锁 拿到读锁 拿到写锁 释放写锁 1 拿到读锁 拿到写锁 释放写锁 2 拿到读锁 拿到读锁 拿到写锁 释放写锁 3 // 第三个写协程执行完毕 释放读锁 3 释放读锁 3 释放读锁 3 释放读锁 3 释放读锁 3 释放读锁 3 释放读锁 3 最终结果 3\",\"从结果中可以看到，当第三个写协程更新完数据后，七个因条件变量而阻塞的读协程都恢复了运行。\",\"提示\",\"对于条件变量，应该使用for而不是if，应该使用循环来判断条件是否满足，因为协程被唤醒时并不能保证当前条件就已经满足了。\",\"for !condition { cond.Wait() }\"]},\"483\":{\"h\":\"sync\",\"t\":[\"Go 中很大一部分的并发相关的工具都是sync标准库提供的，上述已经介绍过了sync.WaitGroup，sync.Locker等，除此之外，sync包下还有一些其他的工具可以使用。\"]},\"484\":{\"h\":\"Once\",\"t\":[\"当在使用一些数据结构时，如果这些数据结构太过庞大，可以考虑采用懒加载的方式，即真正要用到它的时候才会初始化该数据结构。如下面的例子\",\"type MySlice []int func (m *MySlice) Get(i int) (int, bool) { if *m == nil { return 0, false } else { return (*m)[i], true } } func (m *MySlice) Add(i int) { // 当真正用到切片的时候，才会考虑去初始化 if *m == nil { *m = make([]int, 0, 10) } *m = append(*m, i) }\",\"那么问题就来了，如果只有一个协程使用肯定是没有任何问题的，但是如果有多个协程访问的话就可能会出现问题了。比如协程 A 和 B 同时调用了Add方法，A 执行的稍微快一些，已经初始化完毕了，并且将数据成功添加，随后协程 B 又初始化了一遍，这样一来将协程 A 添加的数据直接覆盖掉了，这就是问题所在。\",\"而这就是sync.Once要解决的问题，顾名思义，Once译为一次，sync.Once保证了在并发条件下指定操作只会执行一次。它的使用非常简单，只对外暴露了一个Do方法，签名如下：\",\"func (o *Once) Do(f func())\",\"在使用时，只需要将初始化操作传入Do方法即可，如下\",\"var wait sync.WaitGroup func main() { var slice MySlice wait.Add(4) for i := 0; i < 4; i++ { go func() { slice.Add(1) wait.Done() }() } wait.Wait() fmt.Println(slice.Len()) } type MySlice struct { s []int o sync.Once } func (m *MySlice) Get(i int) (int, bool) { if m.s == nil { return 0, false } else { return m.s[i], true } } func (m *MySlice) Add(i int) { // 当真正用到切片的时候，才会考虑去初始化 m.o.Do(func() { fmt.Println(\\\"初始化\\\") if m.s == nil { m.s = make([]int, 0, 10) } }) m.s = append(m.s, i) } func (m *MySlice) Len() int { return len(m.s) }\",\"输出如下\",\"初始化 4\",\"从输出结果中可以看到，所有的数据等正常添加进切片，初始化操作只执行了一次。其实sync.Once的实现相当简单，去除注释真正的代码逻辑只有 16 行，其原理就是锁+原子操作。源代码如下：\",\"type Once struct { // 用于判断操作是否已经执行 done uint32 m Mutex } func (o *Once) Do(f func()) { // 原子加载数据 if atomic.LoadUint32(&o.done) == 0 { o.doSlow(f) } } func (o *Once) doSlow(f func()) { // 加锁 o.m.Lock() // 解锁 defer o.m.Unlock() // 判断是否执行 if o.done == 0 { // 执行完毕后修改done defer atomic.StoreUint32(&o.done, 1) f() } }\"]},\"485\":{\"h\":\"Pool\",\"t\":[\"sync.Pool的设计目的是用于存储临时对象以便后续的复用，是一个临时的并发安全对象池，将暂时用不到的对象放入池中，在后续使用中就不需要再额外的创建对象可以直接复用，减少内存的分配与释放频率，最重要的一点就是降低 GC 压力。sync.Pool总共只有两个方法，如下：\",\"// 申请一个对象 func (p *Pool) Get() any // 放入一个对象 func (p *Pool) Put(x any)\",\"并且sync.Pool有一个对外暴露的New字段，用于对象池在申请不到对象时初始化一个对象\",\"New func() any\",\"下面以一个例子演示\",\"var wait sync.WaitGroup // 临时对象池 var pool sync.Pool // 用于计数过程中总共创建了多少个对象 var numOfObject atomic.Int64 // BigMemData 假设这是一个占用内存很大的结构体 type BigMemData struct { M string } func main() { pool.New = func() any { numOfObject.Add(1) return BigMemData{\\\"大内存\\\"} } wait.Add(1000) // 这里开启1000个协程 for i := 0; i < 1000; i++ { go func() { // 申请对象 val := pool.Get() // 使用对象 _ = val.(BigMemData) // 用完之后再释放对象 pool.Put(val) wait.Done() }() } wait.Wait() fmt.Println(numOfObject.Load()) }\",\"例子中开启了 1000 个协程不断的在池中申请和释放对象，如果不采用对象池，那么 1000 个协程都需要各自实例化对象，并且这 1000 个实例化后的对象在使用完毕后都需要由 GC 来释放内存，如果有几十万个协程或者说创建该对象的成本十分的高昂，这种情况下就会占用很大的内存并且给 GC 带来非常大的压力，采用对象池后，可以复用对象减少实例化的频率，比如上述的例子输出可能如下：\",\"5\",\"即便开启了 1000 个协程，整个过程中也只创建了 5 个对象，如果不采用对象池的话 1000 个协程将会创建 1000 个对象，这种优化带来的提升是显而易见的，尤其是在并发量特别大和实例化对象成本特别高的时候更能体现出优势。\",\"在使用sync.Pool时需要注意几个点：\",\"临时对象：sync.Pool只适合存放临时对象，池中的对象可能会在没有任何通知的情况下被 GC 移除，所以并不建议将网络链接，数据库连接这类存入sync.Pool中。\",\"不可预知：sync.Pool在申请对象时，无法预知这个对象是新创建的还是复用的，也无法知晓池中有几个对象\",\"并发安全：官方保证sync.Pool一定是并发安全，但并不保证用于创建对象的New函数就一定是并发安全的，New函数是由使用者传入的，所以New函数的并发安全性要由使用者自己来维护，这也是为什么上例中对象计数要用到原子值的原因。\",\"提示\",\"最后需要注意的是，当使用完对象后，一定要释放回池中，如果用了不释放那么对象池的使用将毫无意义。\",\"标准库fmt包下就有一个对象池的使用案例，在fmt.Fprintf函数中\",\"func Fprintf(w io.Writer, format string, a ...any) (n int, err error) { // 申请一个打印缓冲区 p := newPrinter() p.doPrintf(format, a) n, err = w.Write(p.buf) // 使用完毕后释放 p.free() return }\",\"其中newPointer函数和free方法的实现如下\",\"func newPrinter() *pp { // 向对象池申请的一个对象 p := ppFree.Get().(*pp) p.panicking = false p.erroring = false p.wrapErrs = false p.fmt.init(&p.buf) return p } func (p *pp) free() { // 为了让对象池中的缓冲区大小大致相同以便更好的弹性控制缓冲区大小 // 过大的缓冲区就不用放回对象池 if cap(p.buf) > 64<<10 { return } // 字段重置后释放对象到池中 p.buf = p.buf[:0] p.arg = nil p.value = reflect.Value{} p.wrappedErr = nil ppFree.Put(p) }\"]},\"486\":{\"h\":\"Map\",\"t\":[\"sync.Map是官方提供的一种并发安全 Map 的实现，开箱即用，使用起来十分的简单，下面是该结构体对外暴露的方法：\",\"// 根据一个key读取值，返回值会返回对应的值和该值是否存在 func (m *Map) Load(key any) (value any, ok bool) // 存储一个键值对 func (m *Map) Store(key, value any) // 删除一个键值对 func (m *Map) Delete(key any) // 如果该key已存在，就返回原有的值，否则将新的值存入并返回，当成功读取到值时，loaded为true，否则为false func (m *Map) LoadOrStore(key, value any) (actual any, loaded bool) // 删除一个键值对，并返回其原有的值，loaded的值取决于key是否存在 func (m *Map) LoadAndDelete(key any) (value any, loaded bool) // 遍历Map，当f()返回false时，就会停止遍历 func (m *Map) Range(f func(key, value any) bool)\",\"下面用一个简单的示例来演示下sync.Map的基本使用\",\"func main() { var syncMap sync.Map // 存入数据 syncMap.Store(\\\"a\\\", 1) syncMap.Store(\\\"a\\\", \\\"a\\\") // 读取数据 fmt.Println(syncMap.Load(\\\"a\\\")) // 读取并删除 fmt.Println(syncMap.LoadAndDelete(\\\"a\\\")) // 读取或存入 fmt.Println(syncMap.LoadOrStore(\\\"a\\\", \\\"hello world\\\")) syncMap.Store(\\\"b\\\", \\\"goodbye world\\\") // 遍历map syncMap.Range(func(key, value any) bool { fmt.Println(key, value) return true }) }\",\"输出\",\"a true a true hello world false a hello world b goodbye world\",\"接下来看一个并发使用 map 的例子：\",\"func main() { myMap := make(map[int]int, 10) var wait sync.WaitGroup wait.Add(10) for i := 0; i < 10; i++ { go func(n int) { for i := 0; i < 100; i++ { myMap[n] = n } wait.Done() }(i) } wait.Wait() }\",\"上例中使用的普通 map，开了 10 个协程不断的存入数据，显然这很可能会触发 fatal，结果大概率会如下\",\"fatal error: concurrent map writes\",\"使用sync.Map就可以避免这个问题\",\"func main() { var syncMap sync.Map var wait sync.WaitGroup wait.Add(10) for i := 0; i < 10; i++ { go func(n int) { for i := 0; i < 100; i++ { syncMap.Store(n, n) } wait.Done() }(i) } wait.Wait() syncMap.Range(func(key, value any) bool { fmt.Println(key, value) return true }) }\",\"输出如下\",\"8 8 3 3 1 1 9 9 6 6 5 5 7 7 0 0 2 2 4 4\",\"为了并发安全肯定需要做出一定的牺牲，sync.Map的性能要比 map 低 10-100 倍左右。\"]},\"487\":{\"h\":\"原子\",\"t\":[\"在计算机学科中，原子或原语操作，通常用于表述一些不可再细化分割的操作，由于这些操作无法再细化为更小的步骤，在执行完毕前，不会被其他的任何协程打断，所以执行结果要么成功要么失败，没有第三种情况可言，如果出现了其他情况，那么它就是不是原子操作。例如下方的代码：\",\"func main() { a := 0 if a == 0 { a = 1 } fmt.Println(a) }\",\"上方的代码是一个简单的判断分支，尽管代码很少，但也不是原子操作，真正的原子操作是由硬件指令层面支持的。\"]},\"488\":{\"h\":\"类型\",\"t\":[\"好在大多情况下并不需要自行编写汇编，Go 标准库sync/atomic包下已经提供了原子操作相关的 API，其提供了以下几种类型以供进行原子操作。\",\"atomic.Bool{} atomic.Pointer[]{} atomic.Int32{} atomic.Int64{} atomic.Uint32{} atomic.Uint64{} atomic.Uintptr{} atomic.Value{}\",\"其中Pointer原子类型支持泛型，Value类型支持存储任何类型，除此之外，还提供了许多函数来方便操作。因为原子操作的粒度过细，在大多数情况下，更适合处理这些基础的数据类型。\",\"提示\",\"atmoic包下原子操作只有函数签名，没有具体实现，具体的实现是由plan9汇编编写。\"]},\"489\":{\"h\":\"使用\",\"t\":[\"每一个原子类型都会提供以下三个方法：\",\"Load()：原子的获取值\",\"Swap(newVal type) (old type)：原子的交换值，并且返回旧值\",\"Store(val type)：原子的存储值\",\"不同的类型可能还会有其他的额外方法，比如整型类型都会提供Add方法来实现原子加减操作。下面以一个int64类型演示为例：\",\"func main() { var aint64 atomic.Uint64 // 存储值 aint64.Store(64) // 交换值 aint64.Swap(128) // 增加 aint64.Add(112) // 加载值 fmt.Println(aint64.Load()) }\",\"或者也可以直接使用函数\",\"func main() { var aint64 int64 // 存储值 atomic.StoreInt64(&aint64, 64) // 交换值 atomic.SwapInt64(&aint64, 128) // 增加 atomic.AddInt64(&aint64, 112) // 加载 fmt.Println(atomic.LoadInt64(&aint64)) }\",\"其他的类型的使用也是十分类似的，最终输出为：\",\"240\"]},\"490\":{\"h\":\"CAS\",\"t\":[\"atmoic包还提供了CompareAndSwap操作，也就是CAS，它是乐观锁的一种典型实现。乐观锁本身并不是锁，是一种并发条件下无锁化并发控制方式。之所以被称作乐观锁，是因为它总是乐观的假设共享数据不会被修改，仅当发现数据未被修改时才会去执行对应操作，而前面了解到的互斥量就是悲观锁，互斥量总是悲观的认为共享数据肯定会被修改，所以在操作时会加锁，操作完毕后就会解锁。由于无锁化实现的并发安全效率相对于锁要高一些，许多并发安全的数据结构都采用了cAS来进行实现，不过真正的效率要结合具体使用场景来看。看下面的一个例子：\",\"var lock sync.Mutex var count int func Add(num int) { lock.Lock() count += num lock.Unlock() }\",\"这是一个使用互斥锁的例子，每次增加数字前都会先上锁，执行完毕后就会解锁，过程中会导致其他协程阻塞，接下来使用CAS改造一下：\",\"var count int64 func Add(num int64) { for { expect := atomic.LoadInt64(&count) if atomic.CompareAndSwapInt64(&count, expect, expect+num) { break } } }\",\"对于CAS而言，有三个参数，内存值，期望值，新值。执行时，CAS会将期望值与当前内存值进行比较，如果内存值与期望值相同，就会执行后续的操作，否则的话什么也不做。对于 Go 中atomic包下的原子操作，CAS相关的函数则需要传入地址，期望值，新值，且会返回是否成功替换的布尔值。例如int64类型的CAS 操作函数签名如下：\",\"func CompareAndSwapInt64(addr *int64, old, new int64) (swapped bool)\",\"在CAS的例子中，首先会通过LoadInt64来获取期望值，随后使用CompareAndSwapInt64来进行比较交换，如果不成功的话就不断循环，直到成功。这样无锁化的操作虽然不会导致协程阻塞，但是不断的循环对于 CPU 而言依旧是一个不小的开销，所以在一些实现中失败达到了一定次数可能会放弃操作。但是对于上面的操作而言，仅仅只是简单的数字相加，涉及到的操作并不复杂，所以完全可以考虑无锁化实现。\",\"提示\",\"大多数情况下，仅仅只是比较值是无法做到并发安全的，比如因CAS引起 ABA 问题，就需要使用额外加入version来解决问题。\"]},\"491\":{\"h\":\"Value\",\"t\":[\"atomic.Value结构体，可以存储任意类型的值，结构体如下\",\"type Value struct { // any类型 v any }\",\"尽管可以存储任意类型，但是它不能存储nil，并且前后存储的值类型应当一致，下面两个例子都无法通过编译\",\"func main() { var val atomic.Value val.Store(nil) fmt.Println(val.Load()) } // panic: sync/atomic: store of nil value into Value\",\"func main() { var val atomic.Value val.Store(\\\"hello world\\\") val.Store(114154) fmt.Println(val.Load()) } // panic: sync/atomic: store of inconsistently typed value into Value\",\"除此之外，它的使用与其他的原子类型并无太大的差别，并且需要注意的是，所有的原子类型都不应该复制值，而是应该使用它们的指针。\"]},\"492\":{\"h\":\"模块\",\"t\":[\"每一个现代语言都会有属于自己的一个成熟的依赖管理工具，例如 Java 的 Gradle，Python 的 Pip，NodeJs 的 Npm 等，一个好的依赖管理工具可以为开发者省去不少时间并且可以提升开发效率。然而 Go 在早期并没有一个成熟的依赖管理解决方案，那时所有的代码都存放在 GOPATH 目录下，对于工程项目而言十分的不友好，版本混乱，依赖难以管理，为了解决这个问题，各大社区开发者百家争鸣，局面一时间混乱了起来，期间也不乏出现了一些佼佼者例如 Vendor，直到 Go1.11 官方终于推出了 Go Mod 这款官方的依赖管理工具，结束了先前的混乱局面，并在后续的更新中不断完善，淘汰掉了曾经老旧的工具。时至今日，在撰写本文时，Go 发行版本已经到了 1.20，在今天几乎所有的 Go 项目都在采用 Go Mod，所以在本文也只会介绍 Go Mod，官方对于 Go 模块也编写了非常细致的文档：Go Modules Reference。\"]},\"493\":{\"h\":\"编写模块\",\"t\":[\"Go Module 本质上是基于 VCS（版本控制系统），当你在下载依赖时，实际上执行的是 VCS 命令，比如git，所以如果你想要分享你编写的库，只需要做到以下三点：\",\"源代码仓库可公开访问，且 VCS 属于以下的其中之一 \",\"git\",\"hg (Mercurial)\",\"bzr (Bazaar)\",\"svn\",\"fossil\",\"是一个符合规范的 go mod 项目\",\"符合语义化版本规范\",\"所以你只需要正常使用 VCS 开发，并为你的特定版本打上符合标准的 Tag，其它人就可以通过模块名来下载你所编写的库，下面将通过示例来演示进行模块开发的几个步骤。\",\"示例仓库：246859/hello: say hello (github.com)\"]},\"494\":{\"h\":\"准备\",\"t\":[\"在开始之前确保你的版本足以完全支持 go mod（go >= 1.17），并且启用了 Go Module，通过如下命令来查看是否开启\",\"$ go env GO111MODULE\",\"如果未开启，通过如下命令开启用 Go Module\",\"$ go env -w GO111MODULE=on\"]},\"495\":{\"h\":\"创建\",\"t\":[\"首先你需要一个可公网访问的源代码仓库，这个有很多选择，我比较推荐 Github。在上面创建一个新项目，将其取名为 hello，仓库名虽然没有什么特别限制，但建议还是不要使用特殊字符，因为这会影响到模块名。\",\"创建完成后，可以看到仓库的 URL 是https://github.com/246859/hello，对应的 go 模块名就是github.com/246859/hello。\",\"然后将其克隆到本地，通过go mod init命令初始化模块。\",\"$ git clone git@github.com:246859/hello.git Cloning into 'hello'... remote: Enumerating objects: 5, done. remote: Counting objects: 100% (5/5), done. remote: Compressing objects: 100% (4/4), done. remote: Total 5 (delta 0), reused 0 (delta 0), pack-reused 0 Receiving objects: 100% (5/5), done. $ cd hello && go mod init github.com/246859/hello go: creating new go.mod: module github.com/246859/hello\"]},\"496\":{\"h\":\"编写\",\"t\":[\"然后就可以进行开发工作了，它的功能非常简单，只有一个函数\",\"// hello.go package hello import \\\"fmt\\\" // Hello returns hello message func Hello(name string) string { if name == \\\"\\\" { name = \\\"world\\\" } return fmt.Sprintf(\\\"hello %s!\\\", name) }\",\"顺便写一个测试文件进行单元测试\",\"// hello_test.go package hello_test import ( \\\"testing\\\" \\\"fmt\\\" \\\"github.com/246859/hello\\\" ) func TestHello(t *testing.T) { data := \\\"jack\\\" expected := fmt.Sprintf(\\\"hello %s!\\\", data) result := hello.Hello(data) if result != expected { t.Fatalf(\\\"expected result %s, but got %s\\\", expected, result) } }\",\"接下来继续编写一个命令行程序用于输出 hello，它的功能同样非常简单。对于命令行程序而言，按照规范是在项目cmd/app_name/中进行创建，所以 hello 命令行程序的文件存放在cmd/hello/目录下，然后在其中编写相关代码。\",\"// cmd/hello/main.go package main import ( \\\"flag\\\" \\\"github.com/246859/hello\\\" \\\"os\\\" ) var name string func init() { flag.StringVar(&name, \\\"name\\\", \\\"world\\\", \\\"name to say hello\\\") } func main() { flag.Parse() msg := hello.Hello(name) _, err := os.Stdout.WriteString(msg) if err != nil { os.Stderr.WriteString(err.Error()) } }\"]},\"497\":{\"h\":\"测试\",\"t\":[\"编写完后对源代码格式化并测试\",\"$ go fmt && go vet ./... $ go test -v . === RUN TestHello --- PASS: TestHello (0.00s) PASS ok github.com/246859/hello 0.023s\",\"运行命令行程序\",\"$ go run ./cmd/hello -name jack hello jack!\"]},\"498\":{\"h\":\"文档\",\"t\":[\"最后的最后，需要为这个库编写简洁明了的README，让其它开发者看一眼就知道怎么使用\",\"# hello just say hello ## Install import code ```bash go get github.com/246859/hello@latest ``` install cmd ```bash go install github.com/246859/hello/cmd/hello@latest ``` ## Example Here's a simple example as follows: ```go package main import ( \\\"fmt\\\" \\\"github.com/246859/hello\\\" ) func main() { result := hello.Hello(\\\"jack\\\") fmt.Println(result) } ```\",\"这是一个很简单的 README 文档，你也可以自己进行丰富。\"]},\"499\":{\"h\":\"上传\",\"t\":[\"当一切代码都编写并测试完毕过后，就可以将修改提交并推送到远程仓库。\",\"$ git add go.mod hello.go hello_test.go cmd/ example/ README.md $ git commit -m \\\"chore(mod): mod init\\\" go.mod [main 5087fa2] chore(mod): mod init 1 file changed, 3 insertions(+) create mode 100644 go.mod $ git commit -m \\\"feat(hello): complete Hello func\\\" hello.go [main 099a8bf] feat(hello): complete Hello func 1 file changed, 11 insertions(+) create mode 100644 hello.go $ git commit -m \\\"test(hello): complete hello testcase\\\" hello_test.go [main 76e8c1e] test(hello): complete hello testcase 1 file changed, 17 insertions(+) create mode 100644 hello_test.go $ git commit -m \\\"feat(hello): complete hello cmd\\\" cmd/hello/ [main a62a605] feat(hello): complete hello cmd 1 file changed, 22 insertions(+) create mode 100644 cmd/hello/main.go $ git commit -m \\\"docs(example): add hello example\\\" example/ [main 5c51ce4] docs(example): add hello example 1 file changed, 11 insertions(+) create mode 100644 example/main.go $ git commit -m \\\"docs(README): update README\\\" README.md [main e6fbc62] docs(README): update README 1 file changed, 27 insertions(+), 1 deletion(-)\",\"总共六个提交并不多，提交完毕后为最新提交创建一个 tag\",\"$ git tag v1.0.0 $ git tag -l v1.0.0 $ git log --oneline e6fbc62 (HEAD -> main, tag: v1.0.0, origin/main, origin/HEAD) docs(README): update README 5c51ce4 docs(example): add hello example a62a605 feat(hello): complete hello cmd 76e8c1e test(hello): complete hello testcase 099a8bf feat(hello): complete Hello func 5087fa2 chore(mod): mod init 1f422d1 Initial commit\",\"最后再推送到远程仓库\",\"$ git push --tags Enumerating objects: 23, done. Counting objects: 100% (23/23), done. Delta compression using up to 16 threads Compressing objects: 100% (17/17), done. Writing objects: 100% (21/21), 2.43 KiB | 1.22 MiB/s, done. Total 21 (delta 5), reused 0 (delta 0), pack-reused 0 remote: Resolving deltas: 100% (5/5), done. To github.com:246859/hello.git 1f422d1..e6fbc62 main -> main * [new tag] v1.0.0 -> v1.0.0\",\"推送完毕后，再为其创建一个 release（有一个 tag 就足矣，release 只是符合 github 规范）\",\"如此一来，模块的编写就完成了，以上就是模块开发的一个基本流程，其它开发者便可以通过模块名来引入代码或安装命令行工具。\"]},\"500\":{\"h\":\"引用\",\"t\":[\"通过go get引用库\",\"$ go get github.com/246859/hello@latest go: downloading github.com/246859/hello v1.0.0 go: added github.com/246859/hello v1.0.0\",\"通过go intall安装命令行程序\",\"$ go install github.com/246859/hello/cmd/hello@latest && hello -name jack hello jack!\",\"或者使用go run直接运行\",\"$ go run -mod=mod github.com/246859/hello/cmd/hello -name jack hello jack!\",\"当一个库被引用过后，Go Package便会为其创建一个页面，这个过程是自动完成的，不需要开发者做什么工作，比如 hello 库就有一个专属的文档页面，如下图所示。\",\"关于上传模块的更多详细信息，前往Add a package。\",\"关于如何删除模块的信息，前往Removing a package。\"]},\"501\":{\"h\":\"设置代理\",\"t\":[\"Go 虽然没有像 Maven Repo，PyPi，NPM 这样类似的中央仓库，但是有一个官方的代理仓库：Go modules services (golang.org)，它会根据版本及模块名缓存开发者下载过的模块。不过由于其服务器部署在国外，访问速度对于国内的用户不甚友好，所以我们需要修改默认的模块代理地址，目前国内做的比较好的有以下几家：\",\"GOPROXY.IO - 一个全球代理 为 Go 模块而生\",\"七牛云 - Goproxy.cn\",\"这里选择七牛云的代理，执行如下命令来修改 Go 代理，其中的direct表示代理下载失败后绕过代理缓存直接访问源代码仓库。\",\"$ go env -w GOPROXY=https://goproxy.cn,direct\",\"代理修改成功后，日后下载依赖就会非常的迅速。\"]},\"502\":{\"h\":\"下载依赖\",\"t\":[\"修改完代理后，接下来安装一个第三方依赖试试，Go 官方有专门的依赖查询网站：Go Packages。\"]},\"503\":{\"h\":\"代码引用\",\"t\":[\"在里面搜索著名的 Web 框架Gin。\",\"这里会出现很多搜索结果，在使用第三方依赖时，需要结合引用次数和更新时间来决定是否采用该依赖，这里直接选择第一个\",\"进入对应的页面后，可以看出这是该依赖的一个文档页面，有着非常多关于它的详细信息，后续查阅文档时也可以来这里。\",\"这里只需要将它的地址复制下来，然后在之前创建的项目下使用go get命令，命令如下\",\"$ go get github.com/gin-gonic/gin\",\"过程中会下载很多的依赖，只要没有报错就说明下载成功。\",\"$ go get github.com/gin-gonic/gin go: added github.com/bytedance/sonic v1.8.0 go: added github.com/chenzhuoyu/base64x v0.0.0-20221115062448-fe3a3abad311 go: added github.com/gin-contrib/sse v0.1.0 go: added github.com/gin-gonic/gin v1.9.0 go: added github.com/go-playground/locales v0.14.1 go: added github.com/go-playground/universal-translator v0.18.1 go: added github.com/go-playground/validator/v10 v10.11.2 go: added github.com/goccy/go-json v0.10.0 go: added github.com/json-iterator/go v1.1.12 go: added github.com/klauspost/cpuid/v2 v2.0.9 go: added github.com/leodido/go-urn v1.2.1 go: added github.com/mattn/go-isatty v0.0.17 go: added github.com/modern-go/concurrent v0.0.0-20180228061459-e0a39a4cb421 go: added github.com/modern-go/reflect2 v1.0.2 go: added github.com/pelletier/go-toml/v2 v2.0.6 go: added github.com/twitchyliquid64/golang-asm v0.15.1 go: added github.com/ugorji/go/codec v1.2.9 go: added golang.org/x/arch v0.0.0-20210923205945-b76863e36670 go: added golang.org/x/crypto v0.5.0 go: added golang.org/x/net v0.7.0 go: added golang.org/x/sys v0.5.0 go: added golang.org/x/text v0.7.0 go: added google.golang.org/protobuf v1.28.1 go: added gopkg.in/yaml.v3 v3.0.1\",\"完成后查看go.mod文件\",\"$ cat go.mod module golearn go 1.20 require github.com/gin-gonic/gin v1.9.0 require ( github.com/bytedance/sonic v1.8.0 // indirect github.com/chenzhuoyu/base64x v0.0.0-20221115062448-fe3a3abad311 // indirect github.com/gin-contrib/sse v0.1.0 // indirect github.com/go-playground/locales v0.14.1 // indirect github.com/go-playground/universal-translator v0.18.1 // indirect github.com/go-playground/validator/v10 v10.11.2 // indirect github.com/goccy/go-json v0.10.0 // indirect github.com/json-iterator/go v1.1.12 // indirect github.com/klauspost/cpuid/v2 v2.0.9 // indirect github.com/leodido/go-urn v1.2.1 // indirect github.com/mattn/go-isatty v0.0.17 // indirect github.com/modern-go/concurrent v0.0.0-20180228061459-e0a39a4cb421 // indirect github.com/modern-go/reflect2 v1.0.2 // indirect github.com/pelletier/go-toml/v2 v2.0.6 // indirect github.com/twitchyliquid64/golang-asm v0.15.1 // indirect github.com/ugorji/go/codec v1.2.9 // indirect golang.org/x/arch v0.0.0-20210923205945-b76863e36670 // indirect golang.org/x/crypto v0.5.0 // indirect golang.org/x/net v0.7.0 // indirect golang.org/x/sys v0.5.0 // indirect golang.org/x/text v0.7.0 // indirect google.golang.org/protobuf v1.28.1 // indirect gopkg.in/yaml.v3 v3.0.1 // indirect )\",\"可以发现相较于之前多了很多东西，同时也会发现目录下多了一个名为go.sum的文件\",\"$ ls go.mod go.sum main.go\",\"这里先按下不表，修改main.go文件如下代码：\",\"package main import ( \\\"github.com/gin-gonic/gin\\\" ) func main() { gin.Default().Run() }\",\"再次运行项目\",\"$ go run golearn [GIN-debug] [WARNING] Creating an Engine instance with the Logger and Recovery middleware already attached. [GIN-debug] [WARNING] Running in \\\"debug\\\" mode. Switch to \\\"release\\\" mode in production. - using env: export GIN_MODE=release - using code: gin.SetMode(gin.ReleaseMode) [GIN-debug] [WARNING] You trusted all proxies, this is NOT safe. We recommend you to set a value. Please check https://pkg.go.dev/github.com/gin-gonic/gin#readme-don-t-trust-all-proxies for details. [GIN-debug] Environment variable PORT is undefined. Using port :8080 by default [GIN-debug] Listening and serving HTTP on :8080\",\"于是，通过一行代码就运行起了一个最简单的 Web 服务器。当不再需要某一个依赖时，也可以使用go get命令来删除该依赖，这里以删除 Gin 为例子\",\"$ go get github.com/gin-gonic/gin@none go: removed github.com/gin-gonic/gin v1.9.0\",\"在依赖地址后面加上@none即可删除该依赖，结果也提示了删除成功，此时再次查看go.mod文件会发现没有了 Gin 依赖。\",\"$ cat go.mod | grep github.com/gin-gonic/gin\",\"当需要升级最新版本时，可以加上@latest后缀，或者可以自行查询可用的 Release 版本号\",\"$ go get -u github.com/gin-gonic/gin@latest\"]},\"504\":{\"h\":\"安装命令行\",\"t\":[\"go install命令会将第三方依赖下载到本地并编译成二进制文件，得益于 go 的编译速度，这一过程通常不会花费太多时间，然后 go 会将其存放在$GOPATH/bin或者$GOBIN目录下，以便在全局可以执行该二进制文件（前提是你将这些路径添加到了环境变量中）。\",\"提示\",\"在使用install命令时，必须指定版本号。\",\"例如下载由 go 语言编写的调试器delve\",\"$ go install github.com/go-delve/delve/cmd/dlv@latest go: downloading github.com/go-delve/delve v1.22.1 go: downloading github.com/cosiner/argv v0.1.0 go: downloading github.com/derekparker/trie v0.0.0-20230829180723-39f4de51ef7d go: downloading github.com/go-delve/liner v1.2.3-0.20231231155935-4726ab1d7f62 go: downloading github.com/google/go-dap v0.11.0 go: downloading github.com/hashicorp/golang-lru v1.0.2 go: downloading golang.org/x/arch v0.6.0 go: downloading github.com/cpuguy83/go-md2man/v2 v2.0.2 go: downloading go.starlark.net v0.0.0-20231101134539-556fd59b42f6 go: downloading github.com/cilium/ebpf v0.11.0 go: downloading github.com/mattn/go-runewidth v0.0.13 go: downloading github.com/russross/blackfriday/v2 v2.1.0 go: downloading github.com/rivo/uniseg v0.2.0 go: downloading golang.org/x/exp v0.0.0-20230224173230-c95f2b4c22f2 $ dlv -v Error: unknown shorthand flag: 'v' in -v Usage: dlv [command] Available Commands: attach Attach to running process and begin debugging. completion Generate the autocompletion script for the specified shell connect Connect to a headless debug server with a terminal client. core Examine a core dump. dap Starts a headless TCP server communicating via Debug Adaptor Protocol (DAP). debug Compile and begin debugging main package in current directory, or the package specified. exec Execute a precompiled binary, and begin a debug session. help Help about any command test Compile test binary and begin debugging program. trace Compile and begin tracing program. version Prints version. Additional help topics: dlv backend Help about the --backend flag. dlv log Help about logging flags. dlv redirect Help about file redirection. Use \\\"dlv [command] --help\\\" for more information about a command.\"]},\"505\":{\"h\":\"模块管理\",\"t\":[\"上述所有的内容都只是在讲述 Go Mod 的基本使用，但事实上要学会 Go Mod 仅仅只有这些是完全不够的。官方对于模块的定义为：一组被版本标记的包集合。上述定义中，包应该是再熟悉不过的概念了，而版本则是要遵循语义化版本号，定义为：v(major).(minor).(patch)的格式，例如 Go 的版本号v1.20.1，主版本号是 1，小版本号是 20，补丁版本是 1，合起来就是v1.20.1，下面是详细些的解释：\",\"major：当 major 版本变化时，说明项目发生了不兼容的改动，老版本的项目升级到新版本大概率没法正常运行。\",\"minor：当minor版本变化时，说明项目增加了新的特性，只是先前版本的基础只是增加了新的功能。\",\"patch：当patch版本发生变化时，说明只是有 bug 被修复了，没有增加任何新功能。\"]},\"506\":{\"h\":\"常用命令\",\"t\":[\"命令\",\"说明\",\"go mod download\",\"下载当前项目的依赖包\",\"go mod edit\",\"编辑 go.mod 文件\",\"go mod graph\",\"输出模块依赖图\",\"go mod init\",\"在当前目录初始化 go mod\",\"go mod tidy\",\"清理项目模块\",\"go mod verify\",\"验证项目的依赖合法性\",\"go mod why\",\"解释项目哪些地方用到了依赖\",\"go clean -modcache\",\"用于删除项目模块依赖缓存\",\"go list -m\",\"列出模块\",\"前往go mod cmd了解命令的更多有关信息\"]},\"507\":{\"h\":\"模块存储\",\"t\":[\"当使用 Go Mod 进行项目管理时，模块缓存默认存放在$GOPATH/pkg/mod目录下，也可以修改$GOMODCACHE来指定存放在另外一个位置。\",\"$ go env -w GOMODCACHE=你的模块缓存路径\",\"同一个机器上的所有 Go Module 项目共享该目录下的缓存，缓存没有大小限制且不会自动删除，在缓存中解压的依赖源文件都是只读的，想要清空缓存可以执行如下命令。\",\"$ go clean -modcache\",\"在$GOMODCACHE/cache/download目录下存放着依赖的原始文件，包括哈希文件，原始压缩包等，如下例：\",\"$ ls $(go env GOMODCACHE)/cache/download/github.com/246859/hello/@v -1 list v1.0.0.info v1.0.0.lock v1.0.0.mod v1.0.0.zip v1.0.0.ziphash\",\"解压过后的依赖组织形式如下所示，就是指定模块的源代码。\",\"$ ls $(go env GOMODCACHE)/github.com/246859/hello@v1.0.0 -1 LICENSE README.md cmd/ example/ go.mod hello.go hello_test.go\"]},\"508\":{\"h\":\"版本选择\",\"t\":[\"Go 在依赖版本选择时，遵循最小版本选择原则。下面是一个官网给的例子，主模块引用了模块 A 的 1.2 版本和模块 B 的 1.2 版本，同时模块 A 的 1.2 版本引用了模块 C 的 1.3 版本，模块 B 的 1.2 版本引用了模块 C 的 1.4 版本，并且模块 C 的 1.3 和 1.4 版本都同时引用了模块 D 的 1.2 版本，根据最小可用版本原则，Go 最终会选择的版本是 A1.2，B1.2，C1.4 和 D1.2。其中淡蓝色的表示go.mod文件加载的，框选的表示最终选择的版本。\",\"官网中还给出了其他几个例子，大体意思都差不多。\"]},\"509\":{\"h\":\"go.mod\",\"t\":[\"每创建一个 Go Mod 项目都会生成一个go.mod文件，因此熟悉go.mod文件是非常有必要的，不过大部分情况并不需要手动的修改go.mod文件。\",\"module golearn go 1.20 require github.com/gin-gonic/gin v1.9.0 require ( github.com/bytedance/sonic v1.8.0 // indirect github.com/chenzhuoyu/base64x v0.0.0-20221115062448-fe3a3abad311 // indirect github.com/gin-contrib/sse v0.1.0 // indirect github.com/go-playground/locales v0.14.1 // indirect github.com/go-playground/universal-translator v0.18.1 // indirect github.com/go-playground/validator/v10 v10.11.2 // indirect github.com/goccy/go-json v0.10.0 // indirect github.com/json-iterator/go v1.1.12 // indirect github.com/klauspost/cpuid/v2 v2.0.9 // indirect github.com/leodido/go-urn v1.2.1 // indirect github.com/mattn/go-isatty v0.0.17 // indirect github.com/modern-go/concurrent v0.0.0-20180228061459-e0a39a4cb421 // indirect github.com/modern-go/reflect2 v1.0.2 // indirect github.com/pelletier/go-toml/v2 v2.0.6 // indirect github.com/twitchyliquid64/golang-asm v0.15.1 // indirect github.com/ugorji/go/codec v1.2.9 // indirect golang.org/x/arch v0.0.0-20210923205945-b76863e36670 // indirect golang.org/x/crypto v0.5.0 // indirect golang.org/x/net v0.7.0 // indirect golang.org/x/sys v0.5.0 // indirect golang.org/x/text v0.7.0 // indirect google.golang.org/protobuf v1.28.1 // indirect gopkg.in/yaml.v3 v3.0.1 // indirect )\",\"在文件中可以发现绝大多数的依赖地址都带有github等字眼，这是因为 Go 并没有一个公共的依赖仓库，大部分开源项目都是在托管在 Gitub 上的，也有部分的是自行搭建仓库，例如google.golang.org/protobuf，golang.org/x/crypto。通常情况下，这一串网址同时也是 Go 项目的模块名称，这就会出现一个问题，URL 是不分大小写的，但是存储依赖的文件夹是分大小写的，所以go get github.com/gin-gonic/gin和go get github.com/gin-gonic/Gin两个引用的是同一个依赖但是本地存放的路径不同。发生这种情况时，Go 并不会直接把大写字母当作存放路径，而是会将其转义为!小写字母，比如github.com\\\\BurntSushi最终会转义为github.com\\\\!burnt!sushi。\",\"module\",\"module关键字声明了当前项目的模块名，一个go.mod文件中只能出现一个module关键字。例子中的\",\"module golearn\",\"代表着当前模块名为golearn，例如打开 Gin 依赖的go.mod文件可以发现它的module名\",\"module github.com/gin-gonic/gin\",\"Gin 的模块名就是下载依赖时使用的地址，这也是通常而言推荐模块名格式，域名/用户/仓库名。\",\"提示\",\"有一个需要注意的点是，当主版本大于 1 时，主版本号要体现在模块名中，例如\",\"github.com/my/example\",\"如果版本升级到了 v2.0.0，那么模块名就需要修改成如下\",\"github.com/my/example/v2\",\"如果原有项目引用了老版本，且新版本不加以区分的话，在引用依赖时由于路径都一致，所以使用者并不能区分主版本变化所带来的不兼容变动，这样就可能会造成程序错误。\",\"Deprecation\",\"在module的上一行开头注释Deprecated来表示该模块已弃用，例如\",\"// Deprecated: use example.com/mod/v2 instead. module example.com/mod\",\"go\",\"go关键字表示了当前编写当前项目所用到的 Go 版本，版本号必须遵循语义化规则，根据 go 版本的不同，Go Mod 会表现出不同的行为，下方是一个简单示例，关于 Go 可用的版本号自行前往官方查阅。\",\"go 1.20\",\"require\",\"require关键字表示引用了一个外部依赖，例如\",\"require github.com/gin-gonic/gin v1.9.0\",\"格式是require 模块名 版本号，有多个引用时可以使用括号括起来\",\"require ( github.com/bytedance/sonic v1.8.0 // indirect )\",\"带有// indirect注释的表示该依赖没有被当前项目直接引用，可能是项目直接引用的依赖引用了该依赖，所以对于当前项目而言就是间接引用。前面提到过主板变化时要体现在模块名上，如果不遵循此规则的模块被称为不规范模块，在require时，就会加上 incompatible 注释。\",\"require example.com/m v4.1.2+incompatible\",\"伪版本\",\"在上面的go.mod文件中，可以发现有一些依赖包的版本并不是语义化的版本号，而是一串不知所云的字符串，这其实是对应版本的 CommitID，语义化版本通常指的是某一个 Release。伪版本号则可以细化到指定某一个 Commit，通常格式为vx.y.z-yyyyMMddHHmmss-CommitId，由于其vx.y.z并不一定真实存在，所以称为伪版本，例如下面例子中的v0.0.0并不存在，真正有效的是其后的 12 位 CommitID。\",\"// CommitID一般取前12位 github.com/chenzhuoyu/base64x v0.0.0-20221115062448-fe3a3abad311 // indirect\",\"同理，在下载依赖时也可以指定 CommitID 替换语义化版本号\",\"go get github.com/chenzhuoyu/base64x@fe3a3abad311\",\"exclude\",\"exclude关键字表示了不加载指定版本的依赖，如果同时有require引用了相同版本的依赖，也会被忽略掉。该关键字仅在主模块中才生效。例如\",\"exclude golang.org/x/net v1.2.3 exclude ( golang.org/x/crypto v1.4.5 golang.org/x/text v1.6.7 )\",\"replace\",\"replace将会替换掉指定版本的依赖，可以使用模块路径和版本替换又或者是其他平台指定的文件路径，例子\",\"replace golang.org/x/net v1.2.3 => example.com/fork/net v1.4.5 replace ( golang.org/x/net v1.2.3 => example.com/fork/net v1.4.5 golang.org/x/net => example.com/fork/net v1.4.5 golang.org/x/net v1.2.3 => ./fork/net golang.org/x/net => ./fork/net )\",\"仅=>左边的版本被替换，其他版本的同一个依赖照样可以正常访问，无论是使用本地路径还是模块路径指定替换，如果替换模块具有 go.mod 文件，则其module指令必须与所替换的模块路径匹配。\",\"retract\",\"retract指令表示，不应该依赖retract所指定依赖的版本或版本范围。例如在一个新的版本发布后发现了一个重大问题，这个时候就可以使用retract指令。\",\"撤回一些版本\",\"retract ( v1.0.0 // Published accidentally. v1.0.1 // Contains retractions only. )\",\"撤回版本范围\",\"retract v1.0.0 retract [v1.0.0, v1.9.9] retract ( v1.0.0 [v1.0.0, v1.9.9] )\"]},\"510\":{\"h\":\"go.sum\",\"t\":[\"go.sum文件在创建项目之初并不会存在，只有在真正引用了外部依赖后，才会生成该文件，go.sum文件并不适合人类阅读，也不建议手动修改该文件。它的作用主要是解决一致性构建问题，即不同的人在不同的环境中使用同一个的项目构建时所引用的依赖包必须是完全相同的，这单单靠一个go.mod文件是无法保证的。\",\"接下来看看下载一个依赖时，Go 从头到尾都做了些什么事，首先使用如下命令下载一个依赖\",\"go get github.com/bytedance/sonic v1.8.0\",\"go get 命令首先会将依赖包下载到本地的缓存目录中，通常该目录为$GOMODCACHE/cache/download/，该目录根据域名来划分不同网站的依赖包，所以你可能会看到如下的目录结构\",\"$ ls cloud.google.com/ go.opencensus.io/ gopkg.in/ nhooyr.io/ dmitri.shuralyov.com/ go.opentelemetry.io/ gorm.io/ rsc.io/ github.com/ go.uber.org/ honnef.co/ sumdb/ go.etcd.io/ golang.org/ lukechampine.com/ go.mongodb.org/ google.golang.org/ modernc.org/\",\"那么上例中下载的依赖包存放的路径就位于\",\"$GOMODCACHE/cache/download/github.com/bytedance/sonic/@v/\",\"可能的目录结构如下，会有好几个版本命名的文件\",\"$ ls list v1.8.0.lock v1.8.0.ziphash v1.8.3.mod v1.5.0.mod v1.8.0.mod v1.8.3.info v1.8.3.zip v1.8.0.info v1.8.0.zip v1.8.3.lock v1.8.3.ziphash\",\"通常情况下，该目录下一定有一个list文件，用于记录该依赖已知的版本号，而对于每一个版本而言，都会有如下的文件：\",\"zip：依赖的源码压缩包\",\"ziphash：根据依赖压缩包所计算出的哈希值\",\"info：json 格式的版本元数据\",\"mod：该版本的go.mod文件\",\"lock：临时文件，官方也没说干什么用的\",\"一般情况下，Go 会计算压缩包和go.mod两个文件的哈希值，然后再根据 GOSUMDB 所指定的服务器（默认是 sum.golang.org）查询该依赖包的哈希值，如果本地计算出的哈希值与查询得到的结果不一致，那么就不会再向下执行。如果一致的话，就会更新go.mod文件，并向go.sum文件插入两条记录，大致如下：\",\"github.com/bytedance/sonic v1.8.0 h1:ea0Xadu+sHlu7x5O3gKhRpQ1IKiMrSiHttPF0ybECuA= github.com/bytedance/sonic v1.8.0/go.mod h1:i736AoUSYt75HyZLoJW9ERYxcy6eaN6h4BZXU064P/U=\",\"提示\",\"假如禁用了 GOSUMDB，Go 会直接将本地计算得到的哈希值写入go.sum文件中，一般不建议这么做。\",\"正常情况下每一个依赖都会有两条记录，第一个是压缩包的哈希值，第二个是依赖包的go.mod文件的哈希值，记录格式为模块名 版本号 算法名称:哈希值，有些比较古老的依赖包可能没有go.mod文件，所以就不会有第二条哈希记录。当这个项目在另一个人的环境中构建时，Go 会根据go.mod中指定的本地依赖计算哈希值，再与go.sum中记录的哈希值进行比对，如果哈希值不一致，则说明依赖版本不同，就会拒绝构建。发生这种情况时，本地依赖和go.sum文件都有可能被修改过，但是由于go.sum是经过 GOSUMDB 查询记录的，所以会倾向于更相信go.sum文件。\"]},\"511\":{\"h\":\"私有模块\",\"t\":[\"Go Mod 大多数工具都是针对开源项目而言的，不过 Go 也对私有模块进行了支持。对于私有项目而言，通常情况下需要配置以下几个环境配置来进行模块私有处理\",\"GOPROXY ：依赖的代理服务器集合\",\"GOPRIVATE ：私有模块的模块路径前缀的通用模式列表，如果模块名符合规则表示该模块为私有模块，具体行为与 GONOPROXY 和 GONOSUMDB 一致。\",\"GONOPROXY ：不从代理中下载的模块路径前缀的通用模式列表，如果符合规则在下载模块时不会走 GOPROXY，尝试直接从版本控制系统中下载。\",\"GONOSUMDB ：不进行 GOSUMDB 公共校验的模块路径前缀的通用模式列表，如果符合在下载模块校验时不会走 checksum 的公共数据库。\",\"GOINSECURE ：可以通过 HTTP 和其他不安全协议检索的模块路径前缀的通用模式列表。\"]},\"512\":{\"h\":\"工作区\",\"t\":[\"前面提到了go.mod文件支持replace指令，这使得我们可以暂时使用一些本地来不及发版的修改，如下所示\",\"replace ( github.com/246859/hello v1.0.1 => ./hello )\",\"在编译时，go 就会使用本地的 hello 模块，在日后发布新版本后再将其去掉。\",\"但如果使用了 replace指令的话会修改go.mod文件的内容，并且该修改可能会被误提交到远程仓库中，这一点是我们不希望看到的，因为replace指令所指定的 target 是一个文件路径而非网络 URL，这台机器上能用的路径可能到另一台机器上就不能用了，文件路径在跨平台方面也会是一个大问题。为了解决这类问题，工作区便应运而生。\",\"工作区(workspace)，是 Go 在 1.18 引入的关于多模块管理的一个新的解决方案，旨在更好的进行本地的多模块开发工作，下面将通过一个示例进行讲解。\",\"示例仓库：246859/work: go work example (github.com)\"]},\"513\":{\"h\":\"示例\",\"t\":[\"首先项目下有两个独立的 go 模块，分别是auth，user\",\"$ ls -1 LICENSE README.md auth go.work user\",\"auth模块依赖于user模块的结构体User，内容如下\",\"package auth import ( \\\"errors\\\" \\\"github.com/246859/work/user\\\" ) // Verify user credentials if is ok func Verify(user user.User) (bool, error) { password, err := query(user.Name) if err != nil { return false, err } if password != user.Password { return false, errors.New(\\\"authentication failed\\\") } return true, nil } func query(username string) (string, error) { if username == \\\"jack\\\" { return \\\"jack123456\\\", nil } return \\\"\\\", errors.New(\\\"user not found\\\") }\",\"user 模块内容如下\",\"package user type User struct { Name string Password string Age int }\",\"在这个项目中，我们可以这样编写go.work文件\",\"go 1.22 use ( ./auth ./user )\",\"其内容非常容易理解，使用use指令，指定哪些模块参与编译，接下来运行 auth 模块中的代码\",\"// auth/example/main.go package main import ( \\\"fmt\\\" \\\"github.com/246859/work/auth\\\" \\\"github.com/246859/work/user\\\" ) func main() { ok, err := auth.Verify(user.User{Name: \\\"jack\\\", Password: \\\"jack123456\\\"}) if err != nil { panic(err) } fmt.Printf(\\\"%v\\\", ok) }\",\"运行如下命令，通过结果得知成功导入了模块。\",\"$ go run ./auth/example true\",\"在以前的版本，对于这两个独立的模块，如果 auth 模块想要使用 user 模块中的代码只有两种办法\",\"提交 user 模块的修改并推送到远程仓库，发布新版本，然后修改go.mod文件为指定版本\",\"修改go.mod文件将依赖重定向到本地文件\",\"两种方法都需要修改go.mod文件，而工作区的存在就是为了能够在不修改go.mod文件的情况下导入其它模块。不过需要明白的一点是，go.work文件仅用在开发过程中，它的存在只是为了更加方便的进行本地开发，而不是进行依赖管理，它只是暂时让你略过了提交到发版的这一过程，可以让你马上使用 user 模块的新修改而无需进行等待，当 user 模块测试完毕后，最后依旧需要发布新版本，并且 auth 模块最后仍然要修改go.mod文件引用最新版本（这一过程可以用go work sync命令来完成），因此在正常的 go 开发过程中，go.work也不应该提交到 VCS 中（示例仓库中的go.work仅用于演示），因为其内容都是依赖于本地的文件，且其功能也仅限于本地开发。\"]},\"514\":{\"h\":\"命令\",\"t\":[\"下面是一些工作区的命令\",\"命令\",\"介绍\",\"edit\",\"编辑go.work\",\"init\",\"初始化一个新的工作区\",\"sync\",\"同步工作区的模块依赖\",\"use\",\"往go.work中添加一个新模块\",\"vendor\",\"将依赖按照 vendor 格式进行复制\",\"前往go work cmd了解命令的更多有关信息\"]},\"515\":{\"h\":\"指令\",\"t\":[\"go.work文件的内容很简单，只有三个指令\",\"go，指定 go 版本\",\"use，指定使用的模块\",\"replace，指定替换的模块\",\"除了use指令外，其它两个基本上等同于go.mod中的指令，只不过go.work中的的replace指令会作用于所有的模块，一个完整的go.work如下所示。\",\"go 1.22 use( ./auth ./user ) repalce github.com/246859/hello v1.0.0 => /home/jack/code/hello\"]},\"516\":{\"h\":\"测试\",\"t\":[\"对于开发者而言，良好的测试可以提前发现程序的中错误，避免后续因维护不及时产生 Bug 而造成的心智负担，所以写好测试非常有必要。Go 在测试这一方面提供了非常简便实用的命令行工具go test，在标准库和许多开源框架都能看到测试的身影，该工具使用起来十分方便，目前支持以下几种测试：\",\"示例测试\",\"单元测试\",\"基准测试\",\"模糊测试\",\"在 Go 中大部分的 API 都是由标准库testing提供。\",\"提示\",\"在命令行中执行go help testfunc命令，可看 Go 官方对于上面四种测试类型的解释。\"]},\"517\":{\"h\":\"编写规范\",\"t\":[\"在开始编写测试之前，首先需要注意几点规范，这样在后续的学习中会更加方便。\",\"测试包：测试文件最好单独放在一个包中，这个包通常命名为test。\",\"测试文件：测试文件通常以_test.go结尾，例如要测试某一个功能，就将其命名为function_test.go，如果想根据测试类型再划分的更细一些也可以将测试类型为作为文件前缀，例如benchmark_marshaling_test.go，或者example_marshaling_test.go。\",\"测试函数：每一个测试文件中都会有若干个测试函数用于不同的测试。对于不同的测试类型，测试函数的命名的风格也不同。例如示例测试是ExampleXXXX，单元测试是TestXXXX，基准测试是BenchmarkXXXX，模糊测试是FuzzXXXX，这样一来即便不需要注释也可以知晓这是什么类型的测试。\",\"提示\",\"当包名为testdata时，该包通常是为了存储用于测试的辅助数据，在执行测试时，Go 会忽略名为testdata的包。\",\"遵循上述的规范，养成良好的测试风格，可以为日后的维护省去不少的麻烦。\"]},\"518\":{\"h\":\"执行测试\",\"t\":[\"执行测试主要会用到go test命令，下面拿实际的代码举例，现在有待测试文件/say/hello.go代码如下\",\"package say import \\\"fmt\\\" func Hello() { fmt.Println(\\\"hello\\\") } func GoodBye() { fmt.Println(\\\"bye\\\") }\",\"和测试文件/test/example_test.go代码如下\",\"package test import ( \\\"golearn/say\\\" ) func ExampleHello() { say.Hello() // Output: // hello } func ExampleGoodBye() { say.GoodBye() // Output: // bye } func ExampleSay() { say.Hello() say.GoodBye() // Output: // hello // bye }\",\"执行这些测试有多种方法，比如想要执行test包下所有的测试用例，就可以直接在test目录下执行如下命令\",\"$ go test ./ PASS ok golearn/test 0.422s\",\"./表示当前目录，Go 会将test目录下的所有测试文件重新编译后，然后再将所有测试用例全都执行，从结果可以看出所有的测试用例都通过了。其后的参数也可以跟多个目录，例如下方的命令，显然项目的主目录并没有测试文件可供执行。\",\"$ go test ./ ../ ok golearn/test ? golearn [no test files]\",\"提示\",\"当执行的参数有多个包时，Go 并不会再次执行已经成功通过的测试用例，在执行时会行尾添加(cached)以表示输出结果是上一次的缓存。当测试的标志参数位于以下集合中时，Go 就会缓存测试结果，否则就不会。\",\"-benchtime, -cpu,-list, -parallel, -run, -short, -timeout, -failfast, -v\",\"如果想要禁用缓存，可以加上参数 -count=1。\",\"当然也可以单独指定某一个测试文件来执行。\",\"$ go test example_test.go ok command-line-arguments 0.457s\",\"或者可以单独指定某一个测试文件的某一个测试用例，例如\",\"$ go test -run ExampleSay PASS ok golearn/test 0.038s\",\"上面三种情况虽然都完成了测试，但是输出结果太简介了，这时可以加上参数-v，来使输出结果更加详细一点，例如\",\"$ go test ./ -v === RUN ExampleHello --- PASS: ExampleHello (0.00s) === RUN ExampleGoodBye --- PASS: ExampleGoodBye (0.00s) === RUN ExampleSay --- PASS: ExampleSay (0.00s) PASS ok golearn/test 0.040s\",\"这下可以很清楚的看到每一个测试用例的执行顺序，耗时，执行情况，以及总体的耗时。\",\"提示\",\"go test命令默认运行所有的单元测试，示例测试，模糊测试，如果加上了-bench参数则会运行所有类型的测试，例如下方的命令\",\"$ go test -bench .\",\"所以需要使用-run参数来指定，例如只运行所有的基准测试的命令如下\",\"$ go test -bench . -run ^$\"]},\"519\":{\"h\":\"常用参数\",\"t\":[\"Go 测试有着非常多的标志参数，下面只会介绍常用的参数，想要了解更多细节建议使用go help testflag命令自行查阅。\",\"参数\",\"释义\",\"-o file\",\"指定编译后的二进制文件名称\",\"-c\",\"只编译测试文件，但不运行\",\"-json\",\"以 json 格式输出测试日志\",\"-exec xprog\",\"使用xprog运行测试，等价于go run\",\"-bench regexp\",\"选中regexp匹配的基准测试\",\"-fuzz regexp\",\"选中regexp匹配的模糊测试\",\"-fuzztime t\",\"模糊测试自动结束的时间，t为时间间隔，当单位为x时，表示次数，例如200x\",\"-fuzzminimizetime t\",\"模式测试运行的最小时间，规则同上\",\"-count n\",\"运行测试 n 次，默认 1 次\",\"-cover\",\"开启测试覆盖率分析\",\"-covermode set,count,atomic\",\"设置覆盖率分析的模式\",\"-cpu\",\"为测试执行GOMAXPROCS\",\"-failfast\",\"第一次测试失败后，不会开始新的测试\",\"-list regexp\",\"列出regexp匹配的测试用例\",\"-parallel n\",\"允许调用了t.Parallel的测试用例并行运行，n值为并行的最大数量\",\"-run regexp\",\"只运行regexp匹配的测试用例\",\"-skip regexp\",\"跳过regexp匹配的测试用例\",\"-timeout d\",\"如果单次测试执行时间超过了时间间隔d，就会panic。d为时间间隔，例 1s,1ms,1ns 等\",\"-shuffle off,on,N\",\"打乱测试的执行顺序，N为随机种子，默认种子为系统时间\",\"-v\",\"输出更详细的测试日志\",\"-benchmem\",\"统计基准测试的内存分配\",\"-blockprofile block.out\",\"统计测试中协程阻塞情况并写入文件\",\"-blockprofilerate n\",\"控制协程阻塞统计频率，通过命令go doc runtime.SetBlockProfileRate查看更多细节\",\"-coverprofile cover.out\",\"统计覆盖率测试的情况并写入文件\",\"-cpuprofile cpu.out\",\"统计 cpu 情况并写入文件\",\"-memprofile mem.out\",\"统计内存分配情况并写入文件\",\"-memprofilerate n\",\"控制内存分配统计的频率，通过命令go doc runtime.MemProfileRate查看更多细节\",\"-mutexprofile mutex.out\",\"统计锁竞争情况并写入文件\",\" -mutexprofilefraction n\",\"设置统计n个协程竞争一个互斥锁的情况\",\"-trace trace.out\",\"将执行追踪情况写入文件\",\"-outputdir directory\",\"指定上述的统计文件的输出目录，默认为go test的运行目录\"]},\"520\":{\"h\":\"示例测试\",\"t\":[\"示例测试并不像其他三种测试一样是为了发现程序的问题所在，它更多的是为了展示某一个功能的使用方法，起到文档作用。示例测试并不是一个官方定义的概念，也不是一个硬性的规范，更像是一种工程上的约定俗成，是否遵守只取决于开发者。示例测试在标准库中出现的非常多，通常是官方所编写的标准库代码示例，例如标准库context/example_test.go中的ExampleWithDeadline测试函数，该函数中展现了DeadlineContext的基本使用方法：\",\"// This example passes a context with an arbitrary deadline to tell a blocking // function that it should abandon its work as soon as it gets to it. func ExampleWithDeadline() { d := time.Now().Add(shortDuration) ctx, cancel := context.WithDeadline(context.Background(), d) // Even though ctx will be expired, it is good practice to call its // cancellation function in any case. Failure to do so may keep the // context and its parent alive longer than necessary. defer cancel() select { case <-time.After(1 * time.Second): fmt.Println(\\\"overslept\\\") case <-ctx.Done(): fmt.Println(ctx.Err()) } // Output: // context deadline exceeded }\",\"表面上看该测试函数就是一个普通的函数，不过示例测试主要是由Output注释来体现的，待测试函数只有一行输出时，使用Output注释来检测输出。首先创建一个hello.go的文化，写入如下代码\",\"package say import \\\"fmt\\\" func Hello() { fmt.Println(\\\"hello\\\") } func GoodBye() { fmt.Println(\\\"bye\\\") }\",\"SayHello函数就是待测函数，然后创建测试文件example_test.go，写入如下代码\",\"package test import ( \\\"golearn/say\\\" ) func ExampleHello() { say.Hello() // Output: // hello } func ExampleGoodBye() { say.GoodBye() // Output: // bye } func ExampleSay() { say.Hello() say.GoodBye() // Output: // hello // bye }\",\"函数中Output注释表明了检测函数输出是否为hello，接下来执行测试命令看看结果。\",\"$ go test -v === RUN ExampleHello --- PASS: ExampleHello (0.00s) === RUN ExampleGoodBye --- PASS: ExampleGoodBye (0.00s) === RUN ExampleSay --- PASS: ExampleSay (0.00s) PASS ok golearn/test 0.448s\",\"从结果可以看出全部测试都已经通过，关于Output有以下几种写法，第一种是只有一行输出，意为检测该函数的输出是不是 hello\",\"// Output: // hello\",\"第二种是多行输出，即按顺序检测输出是否匹配\",\"// Output: // hello // bye\",\"第三种是无序输出，即不按照顺序多行输出匹配\",\"// Unordered output: // bye // hello\",\"需要注意的是，对于测试函数而言，仅当最后几行为Output注释才会被视为示例测试，否则就只是一个普通的函数，不会被 Go 执行。\"]},\"521\":{\"h\":\"单元测试\",\"t\":[\"单元测试就是对软件中的最小可测试单元进行测试，单元的大小定义取决于开发者，可能是一个结构体，或者是一个包，也可能是一个函数，或者是一个类型。下面依旧通过例子来演示，首先创建/tool/math.go文件，写入如下代码\",\"package tool type Number interface { ~int8 | ~int16 | ~int32 | ~int64 | ~int } func SumInt[T Number](a, b T) T { return a + b } func Equal[T Number](a, b T) bool { return a == b }\",\"然后创建测试文件/tool_test/unit_test.go，对于单元测试而言，命名可以为unit_test或者是想要测试的包或者功能作为文件前缀。\",\"package test_test import ( \\\"golearn/tool\\\" \\\"testing\\\" ) func TestSum(t *testing.T) { a, b := 10, 101 expected := 111 actual := tool.SumInt(a, b) if actual != expected { t.Errorf(\\\"Sum(%d,%d) expected %d,actual is %d\\\", a, b, expected, actual) } } func TestEqual(t *testing.T) { a, b := 10, 101 expected := false actual := tool.Equal(a, b) if actual != expected { t.Errorf(\\\"Sum(%d,%d) expected %t,actual is %t\\\", a, b, expected, actual) } }\",\"对于单元测试而言，每一个测试用例的命名风格为TestXXXX，且函数的入参必须是t *testing.T，testing.T是testing包提供的用于方便测试的结构体，提供了许多可用的方法，例子中的t.Errorf等同于t.Logf，用于格式化输出测试失败的日志信息，其他常用的还有t.Fail用于将当前用例标记为测试失败，功能类似的还有t.FailNow同样会标记为测试失败，但是前者失败后还会继续执行，后者则会直接停止执行，如下方的例子，将预期结果修改为错误的结果：\",\"package tool_test import ( \\\"golearn/tool\\\" \\\"testing\\\" ) func TestSum(t *testing.T) { a, b := 10, 101 expected := 110 actual := tool.SumInt(a, b) if actual != expected { // Errorf内部使用的是t.Fail() t.Errorf(\\\"Sum(%d,%d) expected %d,actual is %d\\\", a, b, expected, actual) } t.Log(\\\"test finished\\\") } func TestEqual(t *testing.T) { a, b := 10, 101 expected := true actual := tool.Equal(a, b) if actual != expected { // Fatalf内部使用的是t.FailNow() t.Fatalf(\\\"Sum(%d,%d) expected %t,actual is %t\\\", a, b, expected, actual) } t.Log(\\\"test finished\\\") }\",\"执行上述测试输出如下\",\"$ go test tool_test.go -v === RUN TestSum tool_test.go:14: Sum(10,101) expected 110,actual is 111 tool_test.go:16: test finished --- FAIL: TestSum (0.00s) === RUN TestEqual tool_test.go:25: Sum(10,101) expected true,actual is false --- FAIL: TestEqual (0.00s) FAIL command-line-arguments 0.037s\",\"从测试日志中可以看出TestSum用例尽管失败了还是输出了 test finished，而TestEqual则没有，同样的还有t.SkipNow，会将当前用例标记为SKIP，然后停止执行，在下一轮测试中会继续执行。\",\"package tool_test import ( \\\"golearn/tool\\\" \\\"testing\\\" ) func TestSum(t *testing.T) { a, b := 10, 101 expected := 110 actual := tool.SumInt(a, b) if actual != expected { t.Skipf(\\\"Sum(%d,%d) expected %d,actual is %d\\\", a, b, expected, actual) } t.Log(\\\"test finished\\\") } func TestEqual(t *testing.T) { a, b := 10, 101 expected := true actual := tool.Equal(a, b) if actual != expected { t.Fatalf(\\\"Sum(%d,%d) expected %t,actual is %t\\\", a, b, expected, actual) } t.Log(\\\"test finished\\\") }\",\"在执行测试时，修改测试次数为 2\",\"$ go test tool_test.go -v -count=2 === RUN TestSum tool_test.go:14: Sum(10,101) expected 110,actual is 111 --- SKIP: TestSum (0.00s) === RUN TestEqual tool_test.go:25: Sum(10,101) expected true,actual is false --- FAIL: TestEqual (0.00s) === RUN TestSum tool_test.go:14: Sum(10,101) expected 110,actual is 111 --- SKIP: TestSum (0.00s) === RUN TestEqual tool_test.go:25: Sum(10,101) expected true,actual is false --- FAIL: TestEqual (0.00s) FAIL command-line-arguments 0.468s\",\"上数的例子中在最后一行输出了 test finished，用于表示测试完毕，其实可以使用t.Cleanup来注册一个收尾函数专门做此事，该函数会在测试用例结束时执行，如下。\",\"package tool_test import ( \\\"golearn/tool\\\" \\\"testing\\\" ) func finished(t *testing.T) { t.Log(\\\"test finished\\\") } func TestSum(t *testing.T) { t.Cleanup(func() { finished(t) }) a, b := 10, 101 expected := 111 actual := tool.SumInt(a, b) if actual != expected { t.Skipf(\\\"Sum(%d,%d) expected %d,actual is %d\\\", a, b, expected, actual) } } func TestEqual(t *testing.T) { t.Cleanup(func() { finished(t) }) a, b := 10, 101 expected := false actual := tool.Equal(a, b) if actual != expected { t.Fatalf(\\\"Sum(%d,%d) expected %t,actual is %t\\\", a, b, expected, actual) } }\",\"执行测试后输出如下\",\"$ go test tool_test.go -v === RUN TestSum tool_test.go:9: test finished --- PASS: TestSum (0.00s) === RUN TestEqual tool_test.go:9: test finished --- PASS: TestEqual (0.00s) PASS ok command-line-arguments 0.462s\"]},\"522\":{\"h\":\"Helper\",\"t\":[\"通过t.Helper()可以将当前函数标记为帮助函数，帮助函数不会单独作为一个测试用例用于执行，在记录日志时输出的行号也是帮助函数的调用者的行号，这样可以使得分析日志时定位更准确，避免的冗杂的其他信息。比如将上述t.Cleanup的例子就可以修改为帮助函数，如下。\",\"package tool_test import ( \\\"golearn/tool\\\" \\\"testing\\\" ) func CleanupHelper(t *testing.T) { t.Helper() t.Log(\\\"test finished\\\") } func TestSum(t *testing.T) { t.Cleanup(func() { CleanupHelper(t) }) a, b := 10, 101 expected := 111 actual := tool.SumInt(a, b) if actual != expected { t.Skipf(\\\"Sum(%d,%d) expected %d,actual is %d\\\", a, b, expected, actual) } } func TestEqual(t *testing.T) { t.Cleanup(func() { CleanupHelper(t) }) a, b := 10, 101 expected := false t.Helper() actual := tool.Equal(a, b) if actual != expected { t.Fatalf(\\\"Sum(%d,%d) expected %t,actual is %t\\\", a, b, expected, actual) } }\",\"执行测试后输出信息如下，与之前的区别在于 test finished 的行号变成了调用者的行号。\",\"$ go test tool_test.go -v === RUN TestSum tool_test.go:15: test finished --- PASS: TestSum (0.00s) === RUN TestEqual tool_test.go:30: test finished --- PASS: TestEqual (0.00s) PASS ok command-line-arguments 0.464s\",\"提示\",\"上述操作都只能在主测试中进行，即直接执行的测试用例，如果是子测试中使用将会panic。\"]},\"523\":{\"h\":\"子测试\",\"t\":[\"在一些情况下，会需要用到在一个测试用例中测试另外测试用例，这种嵌套的测试用例一般称为子测试，通过t.Run()方法，该方法签名如下\",\"// Run方法会开启一个新的协程用于运行子测试，阻塞等待函数f执行完毕后才会返回 // 返回值为是否通过测试 func (t *T) Run(name string, f func(t *T)) bool\",\"下面是一个例子\",\"func TestTool(t *testing.T) { t.Run(\\\"tool.Sum(10,101)\\\", TestSum) t.Run(\\\"tool.Equal(10,101)\\\", TestEqual) }\",\"执行后结果如下\",\"$ go test -run TestTool -v === RUN TestTool === RUN TestTool/tool.Sum(10,101) tool_test.go:15: test finished === RUN TestTool/tool.Equal(10,101) tool_test.go:30: test finished --- PASS: TestTool (0.00s) --- PASS: TestTool/tool.Sum(10,101) (0.00s) --- PASS: TestTool/tool.Equal(10,101) (0.00s) PASS ok golearn/tool_test 0.449s\",\"通过输出可以很清晰的看到父子的层级结构，在上述的例子中第一个子测试未执行完毕第二个子测试是不会执行的，可以使用t.Parallel()将测试用例标记为可并行运行，如此一来输出的顺序将会无法确定。\",\"package tool_test import ( \\\"golearn/tool\\\" \\\"testing\\\" ) func CleanupHelper(t *testing.T) { t.Helper() t.Log(\\\"test finished\\\") } func TestSum(t *testing.T) { t.Parallel() t.Cleanup(func() { CleanupHelper(t) }) a, b := 10, 101 expected := 111 actual := tool.SumInt(a, b) if actual != expected { t.Skipf(\\\"Sum(%d,%d) expected %d,actual is %d\\\", a, b, expected, actual) } } func TestEqual(t *testing.T) { t.Parallel() t.Cleanup(func() { CleanupHelper(t) }) a, b := 10, 101 expected := false actual := tool.Equal(a, b) if actual != expected { t.Fatalf(\\\"Sum(%d,%d) expected %t,actual is %t\\\", a, b, expected, actual) } } func TestToolParallel(t *testing.T) { t.Log(\\\"setup\\\") t.Run(\\\"tool.Sum(10,101)\\\", TestSum) t.Run(\\\"tool.Equal(10,101)\\\", TestEqual) t.Log(\\\"teardown\\\") }\",\"执行测试后输出如下\",\"$ go test -run TestTool -v === RUN TestToolParallel tool_test.go:46: setup === RUN TestToolParallel/tool.Sum(10,101) === PAUSE TestToolParallel/tool.Sum(10,101) === RUN TestToolParallel/tool.Equal(10,101) === PAUSE TestToolParallel/tool.Equal(10,101) === NAME TestToolParallel tool_test.go:49: teardown === CONT TestToolParallel/tool.Sum(10,101) === CONT TestToolParallel/tool.Equal(10,101) === NAME TestToolParallel/tool.Sum(10,101) tool_test.go:16: test finished === NAME TestToolParallel/tool.Equal(10,101) tool_test.go:32: test finished --- PASS: TestToolParallel (0.00s) --- PASS: TestToolParallel/tool.Sum(10,101) (0.00s) --- PASS: TestToolParallel/tool.Equal(10,101) (0.00s) PASS ok golearn/tool_test 0.444s\",\"从测试结果中就可以很明显的看出有一个阻塞等待的过程，在并发执行测试用例时，像上述的例子肯定是无法正常进行的，因为后续的代码无法保证同步运行，这时可以选择再嵌套一层t.Run()，如下\",\"func TestToolParallel(t *testing.T) { t.Log(\\\"setup\\\") t.Run(\\\"process\\\", func(t *testing.T) { t.Run(\\\"tool.Sum(10,101)\\\", TestSum) t.Run(\\\"tool.Equal(10,101)\\\", TestEqual) }) t.Log(\\\"teardown\\\") }\",\"再次执行，就可以看到正常的执行结果了。\",\"$ go test -run TestTool -v === RUN TestToolParallel tool_test.go:46: setup === RUN TestToolParallel/process === RUN TestToolParallel/process/tool.Sum(10,101) === PAUSE TestToolParallel/process/tool.Sum(10,101) === RUN TestToolParallel/process/tool.Equal(10,101) === PAUSE TestToolParallel/process/tool.Equal(10,101) === CONT TestToolParallel/process/tool.Sum(10,101) === CONT TestToolParallel/process/tool.Equal(10,101) === NAME TestToolParallel/process/tool.Sum(10,101) tool_test.go:16: test finished === NAME TestToolParallel/process/tool.Equal(10,101) tool_test.go:32: test finished === NAME TestToolParallel tool_test.go:51: teardown --- PASS: TestToolParallel (0.00s) --- PASS: TestToolParallel/process (0.00s) --- PASS: TestToolParallel/process/tool.Sum(10,101) (0.00s) --- PASS: TestToolParallel/process/tool.Equal(10,101) (0.00s) PASS ok golearn/tool_test 0.450s\"]},\"524\":{\"h\":\"表格风格\",\"t\":[\"在上述的单元测试中，测试的输入数据都是手动声明的一个个变量，当数据量小的时候无伤大雅，但如果想要测试多组数据时，就不太可能再去声明变量来创建测试数据，所以一般情况下都是尽量采用结构体切片的形式，结构体是临时声明的匿名结构体，因为这样的编码风格看起来就跟表格一样，所以称为table-driven，下面举个例子，这是一个手动声明多个变量来创建测试数据的例子，如果有多组数据狠起来就不是很直观，所以将其修改为表格风格\",\"func TestEqual(t *testing.T) { t.Cleanup(func() { CleanupHelper(t) }) a, b := 10, 101 expected := false actual := tool.Equal(a, b) if actual != expected { t.Fatalf(\\\"Sum(%d,%d) expected %t,actual is %t\\\", a, b, expected, actual) } }\",\"修改后的代码如下\",\"func TestEqual(t *testing.T) { t.Cleanup(func() { CleanupHelper(t) }) // table driven style testData := []struct { a, b int exp bool }{ {10, 101, false}, {5, 5, true}, {30, 32, false}, {100, 101, false}, {2, 3, false}, {4, 4, true}, } for _, data := range testData { if actual := tool.Equal(data.a, data.b); actual != data.exp { t.Fatalf(\\\"Sum(%d,%d) expected %t,actual is %t\\\", data.a, data.b, data.exp, actual) } } }\",\"这样的测试数据看起来就要直观很多。\"]},\"525\":{\"h\":\"基准测试\",\"t\":[\"基准测试又称为性能测试，通常用于测试程序的内存占用，CPU 使用情况，执行耗时等等性能指标。对于基准测试而言，测试文件通常以bench_test.go结尾，而测试用例的函数必须为BenchmarkXXXX格式。\",\"下面以一个字符串拼接的例子的性能比较来当作基准测试的例子。首先创建文件/tool/strConcat.go文件，众所周知直接使用字符串进行+拼接性能是很低的，而使用strings.Builder则要好很多，在/tool/strings.go文件分别创建两个函数进行两种方式的字符串拼接。\",\"package tool import \\\"strings\\\" func ConcatStringDirect(longString string) { res := \\\"\\\" for i := 0; i < 100_000.; i++ { res += longString } } func ConcatStringWithBuilder(longString string) { var res strings.Builder for i := 0; i < 100_000.; i++ { res.WriteString(longString) } }\",\"然后创建测试文件/tool_test/bench_tool_test.go ，代码如下\",\"package tool_test import ( \\\"golearn/tool\\\" \\\"testing\\\" ) var longString = \\\"longStringlongStringlongStringlongStringlongStringlongStringlongStringlongString\\\" func BenchmarkConcatDirect(b *testing.B) { for i := 0; i < b.N; i++ { tool.ConcatStringDirect(longString) } } func BenchmarkConcatBuilder(b *testing.B) { for i := 0; i < b.N; i++ { tool.ConcatStringWithBuilder(longString) } }\",\"执行测试命令，命令中开启了详细日志和内存分析，指定了使用的 CPU 核数列表，且每个测试用例执行两轮，输出如下\",\"$ go test -v -benchmem -bench . -run bench_tool_test.go -cpu=2,4,8 -count=2 goos: windows goarch: amd64 pkg: golearn/tool_test cpu: 11th Gen Intel(R) Core(TM) i7-11800H @ 2.30GHz BenchmarkConcatDirect BenchmarkConcatDirect-2 4 277771375 ns/op 4040056736 B/op 10000 allocs/op BenchmarkConcatDirect-2 4 278500125 ns/op 4040056592 B/op 9999 allocs/op BenchmarkConcatDirect-4 1 1153796000 ns/op 4040068784 B/op 10126 allocs/op BenchmarkConcatDirect-4 1 1211017600 ns/op 4040073104 B/op 10171 allocs/op BenchmarkConcatDirect-8 2 665460800 ns/op 4040077760 B/op 10219 allocs/op BenchmarkConcatDirect-8 2 679774450 ns/op 4040080064 B/op 10243 allocs/op BenchmarkConcatBuilder BenchmarkConcatBuilder-2 3428 344530 ns/op 4128176 B/op 29 allocs/op BenchmarkConcatBuilder-2 3579 351858 ns/op 4128176 B/op 29 allocs/op BenchmarkConcatBuilder-4 2448 736177 ns/op 4128185 B/op 29 allocs/op BenchmarkConcatBuilder-4 1688 662993 ns/op 4128185 B/op 29 allocs/op BenchmarkConcatBuilder-8 1958 550333 ns/op 4128199 B/op 29 allocs/op BenchmarkConcatBuilder-8 2174 552113 ns/op 4128196 B/op 29 allocs/op PASS ok golearn/tool_test 21.381s\",\"下面解释一下基准测试的输出结果，goos代表是运行的操作系统，goarh代表的是 CPU 架构，pkg为测试所在的包，cpu是一些关于 CPU 的信息。下面的每一个测试用例的结果由每一个基准测试的名称分隔，第一列BenchmarkConcatDirect-2中的 2 代表了使用的 CPU 核数，第二列的 4 代表了代码中b.N的大小，也就是基准测试中的循环次数，第三列277771375 ns/op代表了每一次循环所消耗的时间，ns 为纳秒，第四列4040056736 B/op表示每一次循环所分配内存的字节大小，第五列10000 allocs/op表示每一次循环内存分配的次数。\",\"很显然，根据测试的结果看来，使用strings.Builder的性能要远远高于使用+拼接字符串，通过直观的数据对比性能正是基准测试的目的所在。\"]},\"526\":{\"h\":\"benchstat\",\"t\":[\"benchstat 是一个开源的性能测试分析工具，上述性能测试的样本数只有两组，一旦样本多了起来人工分析就会十分的费时费力，该工具便是为了解决性能分析问题而生。\",\"首先需要下载该工具\",\"$ go install golang.org/x/perf/benchstat\",\"分两次执行基准测试，这次将样本数修改为 5 个，并且分别输出到old.txt和new.txt文件以做对比，第一次执行结果\",\"$ go test -v -benchmem -bench . -run bench_tool_test.go -cpu=2,4,8 -count=5 | tee -a old.txt goos: windows goarch: amd64 pkg: golearn/tool_test cpu: 11th Gen Intel(R) Core(TM) i7-11800H @ 2.30GHz BenchmarkConcatDirect BenchmarkConcatDirect-2 4 290535650 ns/op 4040056592 B/op 9999 allocs/op BenchmarkConcatDirect-2 4 298974625 ns/op 4040056592 B/op 9999 allocs/op BenchmarkConcatDirect-2 4 299637800 ns/op 4040056592 B/op 9999 allocs/op BenchmarkConcatDirect-2 4 276487000 ns/op 4040056784 B/op 10001 allocs/op BenchmarkConcatDirect-2 4 356465275 ns/op 4040056592 B/op 9999 allocs/op BenchmarkConcatDirect-4 2 894723200 ns/op 4040077424 B/op 10216 allocs/op BenchmarkConcatDirect-4 2 785830400 ns/op 4040078288 B/op 10225 allocs/op BenchmarkConcatDirect-4 2 743634000 ns/op 4040077568 B/op 10217 allocs/op BenchmarkConcatDirect-4 2 953802700 ns/op 4040075408 B/op 10195 allocs/op BenchmarkConcatDirect-4 2 953028750 ns/op 4040077520 B/op 10217 allocs/op BenchmarkConcatDirect-8 2 684023150 ns/op 4040086784 B/op 10313 allocs/op BenchmarkConcatDirect-8 2 634380250 ns/op 4040090528 B/op 10352 allocs/op BenchmarkConcatDirect-8 2 685030600 ns/op 4040090768 B/op 10355 allocs/op BenchmarkConcatDirect-8 2 817909650 ns/op 4040089808 B/op 10345 allocs/op BenchmarkConcatDirect-8 2 600078100 ns/op 4040095664 B/op 10406 allocs/op BenchmarkConcatBuilder BenchmarkConcatBuilder-2 2925 419651 ns/op 4128176 B/op 29 allocs/op BenchmarkConcatBuilder-2 2961 423899 ns/op 4128176 B/op 29 allocs/op BenchmarkConcatBuilder-2 2714 422275 ns/op 4128176 B/op 29 allocs/op BenchmarkConcatBuilder-2 2848 452255 ns/op 4128176 B/op 29 allocs/op BenchmarkConcatBuilder-2 2612 454452 ns/op 4128176 B/op 29 allocs/op BenchmarkConcatBuilder-4 974 1158000 ns/op 4128189 B/op 29 allocs/op BenchmarkConcatBuilder-4 1098 1068682 ns/op 4128192 B/op 29 allocs/op BenchmarkConcatBuilder-4 1042 1056570 ns/op 4128194 B/op 29 allocs/op BenchmarkConcatBuilder-4 1280 978213 ns/op 4128191 B/op 29 allocs/op BenchmarkConcatBuilder-4 1538 1162108 ns/op 4128190 B/op 29 allocs/op BenchmarkConcatBuilder-8 1744 700824 ns/op 4128203 B/op 29 allocs/op BenchmarkConcatBuilder-8 2235 759537 ns/op 4128201 B/op 29 allocs/op BenchmarkConcatBuilder-8 1556 736455 ns/op 4128204 B/op 29 allocs/op BenchmarkConcatBuilder-8 1592 825794 ns/op 4128201 B/op 29 allocs/op BenchmarkConcatBuilder-8 2263 717285 ns/op 4128203 B/op 29 allocs/op PASS ok golearn/tool_test 56.742s\",\"第二次执行结果\",\"$ go test -v -benchmem -bench . -run bench_tool_test.go -cpu=2,4,8 -count=5 | tee -a new.txt goos: windows goarch: amd64 pkg: golearn/tool_test cpu: 11th Gen Intel(R) Core(TM) i7-11800H @ 2.30GHz BenchmarkConcatDirect BenchmarkConcatDirect-2 4 285074900 ns/op 4040056592 B/op 9999 allocs/op BenchmarkConcatDirect-2 4 291517150 ns/op 4040056592 B/op 9999 allocs/op BenchmarkConcatDirect-2 4 281901975 ns/op 4040056592 B/op 9999 allocs/op BenchmarkConcatDirect-2 4 292320625 ns/op 4040056592 B/op 9999 allocs/op BenchmarkConcatDirect-2 4 286723000 ns/op 4040056952 B/op 10002 allocs/op BenchmarkConcatDirect-4 1 1188983000 ns/op 4040071856 B/op 10158 allocs/op BenchmarkConcatDirect-4 1 1080713900 ns/op 4040070800 B/op 10147 allocs/op BenchmarkConcatDirect-4 1 1203622300 ns/op 4040067344 B/op 10111 allocs/op BenchmarkConcatDirect-4 1 1045291300 ns/op 4040070224 B/op 10141 allocs/op BenchmarkConcatDirect-4 1 1123163300 ns/op 4040070032 B/op 10139 allocs/op BenchmarkConcatDirect-8 2 790421300 ns/op 4040076656 B/op 10208 allocs/op BenchmarkConcatDirect-8 2 659047300 ns/op 4040079488 B/op 10237 allocs/op BenchmarkConcatDirect-8 2 712991800 ns/op 4040077184 B/op 10213 allocs/op BenchmarkConcatDirect-8 2 706605350 ns/op 4040078000 B/op 10222 allocs/op BenchmarkConcatDirect-8 2 656195700 ns/op 4040085248 B/op 10297 allocs/op BenchmarkConcatBuilder BenchmarkConcatBuilder-2 2726 386412 ns/op 4128176 B/op 29 allocs/op BenchmarkConcatBuilder-2 3439 335358 ns/op 4128176 B/op 29 allocs/op BenchmarkConcatBuilder-2 3376 338957 ns/op 4128176 B/op 29 allocs/op BenchmarkConcatBuilder-2 3870 326301 ns/op 4128176 B/op 29 allocs/op BenchmarkConcatBuilder-2 4285 339596 ns/op 4128176 B/op 29 allocs/op BenchmarkConcatBuilder-4 1663 671535 ns/op 4128187 B/op 29 allocs/op BenchmarkConcatBuilder-4 1507 744885 ns/op 4128191 B/op 29 allocs/op BenchmarkConcatBuilder-4 1353 1097800 ns/op 4128187 B/op 29 allocs/op BenchmarkConcatBuilder-4 1388 1006019 ns/op 4128189 B/op 29 allocs/op BenchmarkConcatBuilder-4 1635 993764 ns/op 4128189 B/op 29 allocs/op BenchmarkConcatBuilder-8 1332 783599 ns/op 4128198 B/op 29 allocs/op BenchmarkConcatBuilder-8 1818 729821 ns/op 4128202 B/op 29 allocs/op BenchmarkConcatBuilder-8 1398 780614 ns/op 4128202 B/op 29 allocs/op BenchmarkConcatBuilder-8 1526 750513 ns/op 4128204 B/op 29 allocs/op BenchmarkConcatBuilder-8 2164 704798 ns/op 4128204 B/op 29 allocs/op PASS ok golearn/tool_test 50.387s\",\"再使用 benchstat 进行对比\",\"$ benchstat old.txt new.txt goos: windows goarch: amd64 pkg: golearn/tool_test cpu: 11th Gen Intel(R) Core(TM) i7-11800H @ 2.30GHz │ old.txt │ new.txt │ │ sec/op │ sec/op vs base │ ConcatDirect-2 299.0m ± ∞ ¹ 286.7m ± ∞ ¹ ~ (p=0.310 n=5) ConcatDirect-4 894.7m ± ∞ ¹ 1123.2m ± ∞ ¹ +25.53% (p=0.008 n=5) ConcatDirect-8 684.0m ± ∞ ¹ 706.6m ± ∞ ¹ ~ (p=0.548 n=5) ConcatBuilder-2 423.9µ ± ∞ ¹ 339.0µ ± ∞ ¹ -20.04% (p=0.008 n=5) ConcatBuilder-4 1068.7µ ± ∞ ¹ 993.8µ ± ∞ ¹ ~ (p=0.151 n=5) ConcatBuilder-8 736.5µ ± ∞ ¹ 750.5µ ± ∞ ¹ ~ (p=0.841 n=5) geomean 19.84m 19.65m -0.98% ¹ need >= 6 samples for confidence interval at level 0.95 │ old.txt │ new.txt │ │ B/op │ B/op vs base │ ConcatDirect-2 3.763Gi ± ∞ ¹ 3.763Gi ± ∞ ¹ ~ (p=1.000 n=5) ConcatDirect-4 3.763Gi ± ∞ ¹ 3.763Gi ± ∞ ¹ -0.00% (p=0.008 n=5) ConcatDirect-8 3.763Gi ± ∞ ¹ 3.763Gi ± ∞ ¹ -0.00% (p=0.008 n=5) ConcatBuilder-2 3.937Mi ± ∞ ¹ 3.937Mi ± ∞ ¹ ~ (p=1.000 n=5) ² ConcatBuilder-4 3.937Mi ± ∞ ¹ 3.937Mi ± ∞ ¹ ~ (p=0.079 n=5) ConcatBuilder-8 3.937Mi ± ∞ ¹ 3.937Mi ± ∞ ¹ ~ (p=0.952 n=5) geomean 123.2Mi 123.2Mi -0.00% ¹ need >= 6 samples for confidence interval at level 0.95 ² all samples are equal │ old.txt │ new.txt │ │ allocs/op │ allocs/op vs base │ ConcatDirect-2 9.999k ± ∞ ¹ 9.999k ± ∞ ¹ ~ (p=1.000 n=5) ConcatDirect-4 10.22k ± ∞ ¹ 10.14k ± ∞ ¹ -0.74% (p=0.008 n=5) ConcatDirect-8 10.35k ± ∞ ¹ 10.22k ± ∞ ¹ -1.26% (p=0.008 n=5) ConcatBuilder-2 29.00 ± ∞ ¹ 29.00 ± ∞ ¹ ~ (p=1.000 n=5) ² ConcatBuilder-4 29.00 ± ∞ ¹ 29.00 ± ∞ ¹ ~ (p=1.000 n=5) ² ConcatBuilder-8 29.00 ± ∞ ¹ 29.00 ± ∞ ¹ ~ (p=1.000 n=5) ² geomean 543.6 541.7 -0.33% ¹ need >= 6 samples for confidence interval at level 0.95 ² all samples are equal\",\"从结果中可以看出 benchstat 将其分为了三组，分别是耗时，内存占用和内存分配次数，其中geomoean为平均值，p为 样本的显著性水平，临界区间通常为 0.05，高于 0.05 就不太可信，取其中一条数据如下：\",\" │ sec/op │ sec/op vs base │ ConcatDirect-4 894.7m ± ∞ ¹ 1123.2m ± ∞ ¹ +25.53% (p=0.008 n=5)\",\"可以看到old执行耗时为 894.7ms，new执行耗时 1123.2ms，相比之下还增加了 25.53%的耗时。\"]},\"527\":{\"h\":\"模糊测试\",\"t\":[\"模糊测试是 GO1.18 推出的一个新功能，属于是单元测试和基准测试的一种增强，区别在于前两者的测试数据都需要开发者手动编写，而模糊测试可以通过语料库来生成随机的测试数据，关于 Go 中的模糊测试可以前往Go Fuzzing来了解更多概念。模糊测试的好处在于，相比于固定的测试数据，随机数据可以更好的测试程序的边界条件。下面拿官方教程的例子来讲解，这次需要测试的是一个反转字符串的函数，首先创建文件/tool/strings.go，写入如下代码\",\"package tool func Reverse(s string) string { b := []byte(s) for i, j := 0, len(b)-1; i < len(b)/2; i, j = i+1, j-1 { b[i], b[j] = b[j], b[i] } return string(b) }\",\"创建模糊测试文件/tool_test/fuzz_tool_test.go，写入如下代码\",\"package tool import ( \\\"golearn/tool\\\" \\\"testing\\\" \\\"unicode/utf8\\\" ) func FuzzReverse(f *testing.F) { testdata := []string{\\\"hello world!\\\", \\\"nice to meet you\\\", \\\"good bye!\\\"} for _, data := range testdata { f.Add(data) } f.Fuzz(func(t *testing.T, str string) { first := tool.Reverse(str) second := tool.Reverse(first) t.Logf(\\\"str:%q,first:%q,second:%q\\\", str, first, second) if str != second { t.Errorf(\\\"before: %q, after: %q\\\", str, second) } if utf8.ValidString(str) && !utf8.ValidString(first) { t.Errorf(\\\"Reverse produced invalid UTF-8 string %q %q\\\", str, first) } }) }\",\"在模糊测试中，首先需要给语料种子库添加数据，示例中使用f.Add()来添加，有助于后续生成随机的测试数据。然后使用f.Fuzz(fn)来进行测试，函数签名如下：\",\"func (f *F) Fuzz(ff any) func (f *F) Add(args ...any)\",\"fn就类似于一个单元测试函数的逻辑，函数的第一个入参必须是t *testing.T，其后跟想要生成的参数。由于传入的字符串是不可预知的，这里采用反转两次的方法来进行验证。执行如下命令\",\"$ go test -run Fuzz -v === RUN FuzzReverse === RUN FuzzReverse/seed#0 fuzz_tool_test.go:18: str:\\\"hello world!\\\",first:\\\"!dlrow olleh\\\",second:\\\"hello world!\\\" === RUN FuzzReverse/seed#1 fuzz_tool_test.go:18: str:\\\"nice to meet you\\\",first:\\\"uoy teem ot ecin\\\",second:\\\"nice to meet you\\\" === RUN FuzzReverse/seed#2 fuzz_tool_test.go:18: str:\\\"good bye!\\\",first:\\\"!eyb doog\\\",second:\\\"good bye!\\\" --- PASS: FuzzReverse (0.00s) --- PASS: FuzzReverse/seed#0 (0.00s) --- PASS: FuzzReverse/seed#1 (0.00s) --- PASS: FuzzReverse/seed#2 (0.00s) PASS ok golearn/tool_test 0.539s\",\"当参数不带-fuzz时，将不会生成随机的测试数据，只会给测试函数传入语料库中的数据，可以从结果中看到测试全部通过了，这样使用就等同于单元测试，但其实是有问题的，下面加上-fuzz参数再次执行。\",\"$ go test -fuzz . -fuzztime 30s -run Fuzz -v === RUN FuzzReverse fuzz: elapsed: 0s, gathering baseline coverage: 0/217 completed fuzz: minimizing 91-byte failing input file fuzz: elapsed: 0s, gathering baseline coverage: 15/217 completed --- FAIL: FuzzReverse (0.13s) --- FAIL: FuzzReverse (0.00s) fuzz_tool_test.go:18: str:\\\"𐑄\\\",first:\\\"\\\\x84\\\\x91\\\\x90\\\\xf0\\\",second:\\\"𐑄\\\" fuzz_tool_test.go:23: Reverse produced invalid UTF-8 string \\\"𐑄\\\" \\\"\\\\x84\\\\x91\\\\x90\\\\xf0\\\" Failing input written to testdata\\\\fuzz\\\\FuzzReverse\\\\d856c981b6266ba2 To re-run: go test -run=FuzzReverse/d856c981b6266ba2 === NAME FAIL exit status 1 FAIL golearn/tool_test 0.697s\",\"提示\",\"模糊测试中失败的用例会输出到当前测试文件夹下的testdata目录下的某个语料文件中，例如上述例子中的\",\"Failing input written to testdata\\\\fuzz\\\\FuzzReverse\\\\d856c981b6266ba2 To re-run: go test -run=FuzzReverse/d856c981b6266ba2\",\"testdata\\\\fuzz\\\\FuzzReverse\\\\d856c981b6266ba2便是输出的语料文件路径，文件的内容如下\",\"go test fuzz v1 string(\\\"𐑄\\\")\",\"可以看到这一次并没有通过，原因是字符串反转后变成了非utf8格式，所以通过模糊测试就发现了这个问题所在。由于一些字符占用并不止一个字节，如果将其以字节为单位反转后肯定是乱码，所以将待测试的源代码修改为如下，将字符串转换为[]rune，这样就可以避免出现上述问题。\",\"func Reverse(s string) string { r := []rune(s) for i, j := 0, len(r)-1; i < len(r)/2; i, j = i+1, j-1 { r[i], r[j] = r[j], r[i] } return string(r) }\",\"接下来直接运行根据上次模糊测试失败的用例\",\"$ go test -run=FuzzReverse/d856c981b6266ba2 -v === RUN FuzzReverse === RUN FuzzReverse/d856c981b6266ba2 fuzz_tool_test.go:18: str:\\\"𐑄\\\",first:\\\"𐑄\\\",second:\\\"𐑄\\\" --- PASS: FuzzReverse (0.00s) --- PASS: FuzzReverse/d856c981b6266ba2 (0.00s) PASS ok golearn/tool_test 0.033s\",\"可以看到这一次通过了测试，再次执行模糊测试看看还有没有问题\",\"$ go test -fuzz . -fuzztime 30s -run Fuzz -v === RUN FuzzReverse fuzz: elapsed: 0s, gathering baseline coverage: 0/219 completed fuzz: minimizing 70-byte failing input file failure while testing seed corpus entry: FuzzReverse/d97214ce235bfcf5 fuzz: elapsed: 0s, gathering baseline coverage: 2/219 completed --- FAIL: FuzzReverse (0.15s) --- FAIL: FuzzReverse (0.00s) fuzz_tool_test.go:18: str:\\\"\\\\xe4\\\",first:\\\"�\\\",second:\\\"�\\\" fuzz_tool_test.go:20: before: \\\"\\\\xe4\\\", after: \\\"�\\\" === NAME FAIL exit status 1 FAIL golearn/tool_test 0.184s\",\"可以发现又出错了，这次的问题是对字符串做了两次反转后不相等，原字符为\\\\xe4，期望的结果是4ex\\\\ ，但结果是乱码，如下\",\"func main() { fmt.Println(\\\"\\\\xe4\\\") fmt.Println([]byte(\\\"\\\\xe4\\\")) fmt.Println([]rune(\\\"\\\\xe4\\\")) fmt.Printf(\\\"%q\\\\n\\\", \\\"\\\\xe4\\\") fmt.Printf(\\\"%x\\\\n\\\", \\\"\\\\xe4\\\") }\",\"它的执行结果是\",\"� [65533] \\\"\\\\xe4\\\" e4\",\"究其原因在于 Go 在字符串单位是字节，而不是字符。所以再次修改待测源代码，如果传入的是非 utf8 字符串，直接返回错误。\",\"func Reverse(s string) (string, error) { if !utf8.ValidString(s) { return s, errors.New(\\\"input is not valid UTF-8\\\") } r := []rune(s) for i, j := 0, len(r)-1; i < len(r)/2; i, j = i+1, j-1 { r[i], r[j] = r[j], r[i] } return string(r), nil }\",\"测试代码也需要稍作修改\",\"func FuzzReverse(f *testing.F) { testdata := []string{\\\"hello world!\\\", \\\"nice to meet you\\\", \\\"good bye!\\\"} for _, data := range testdata { f.Add(data) } f.Fuzz(func(t *testing.T, str string) { first, err := tool.Reverse(str) if err != nil { t.Skip() } second, err := tool.Reverse(first) if err != nil { t.Skip() } t.Logf(\\\"str:%q,first:%q,second:%q\\\", str, first, second) if str != second { t.Errorf(\\\"before: %q, after: %q\\\", str, second) } if utf8.ValidString(str) && !utf8.ValidString(first) { t.Errorf(\\\"Reverse produced invalid UTF-8 string %q %q\\\", str, first) } }) }\",\"当反转函数返回error时，就跳过测试，再来进行模糊测试\",\"$ go test -fuzz . -fuzztime 30s -run Fuzz -v === RUN FuzzReverse fuzz: elapsed: 0s, gathering baseline coverage: 0/219 completed fuzz: elapsed: 0s, gathering baseline coverage: 219/219 completed, now fuzzing with 16 workers fuzz: elapsed: 3s, execs: 895571 (297796/sec), new interesting: 32 (total: 251) fuzz: elapsed: 6s, execs: 1985543 (363120/sec), new interesting: 37 (total: 256) fuzz: elapsed: 9s, execs: 3087837 (367225/sec), new interesting: 38 (total: 257) fuzz: elapsed: 12s, execs: 4090817 (335167/sec), new interesting: 40 (total: 259) fuzz: elapsed: 15s, execs: 5132580 (346408/sec), new interesting: 44 (total: 263) fuzz: elapsed: 18s, execs: 6248486 (372185/sec), new interesting: 45 (total: 264) fuzz: elapsed: 21s, execs: 7366827 (373305/sec), new interesting: 46 (total: 265) fuzz: elapsed: 24s, execs: 8439803 (358059/sec), new interesting: 47 (total: 266) fuzz: elapsed: 27s, execs: 9527671 (361408/sec), new interesting: 47 (total: 266) fuzz: elapsed: 30s, execs: 10569473 (348056/sec), new interesting: 48 (total: 267) fuzz: elapsed: 30s, execs: 10569473 (0/sec), new interesting: 48 (total: 267) --- PASS: FuzzReverse (30.16s) === NAME PASS ok golearn/tool_test 30.789s\",\"然后这次就可以得到一个比较完整的模糊测试输出日志，其中一些概念的解释如下：\",\"elapsed: 一个轮次完成后已经流逝的时间\",\"execs: 运行的输入总数，297796/sec 表示多少个输入每秒\",\"new interesting: 在测试中，已经添加语料库中的”有趣“输入的总数。（有趣的输入指的是该输入能够将代码覆盖率扩大到现有语料库所能覆盖的范围之外，随着覆盖范围的不断扩大，它的增长趋势总体上而言会持续变缓）\",\"提示\",\"如果没有-fuzztime参数限制时间，模糊测试将会永远的运行下去。\"]},\"528\":{\"h\":\"类型支持\",\"t\":[\"Go Fuzz 中的支持的类型如下：\",\"string, []byte\",\"int, int8, int16, int32/rune, int64\",\"uint, uint8/byte, uint16, uint32, uint64\",\"float32, float64\",\"bool\"]},\"529\":{\"h\":\"CGO\",\"t\":[\"由于 go 需要 GC，对于一些性能要求更高的场景，go 可能不太适合处理，c 作为传统的系统编程语言性能是非常优秀的，而 cgo 可以将两者联系起来，相互调用，让 go 调用 c，将性能敏感的任务交给 c 去完成，go 负责处理上层逻辑，cgo 同样支持 c 调用 go，不过这种场景比较少见，也不太建议这么做。\",\"提示\",\"文中代码演示的环境是 win10，命令行用的是gitbash，windows 用户建议提前安装好 mingw。\",\"关于 cgo，官方有一个简单的介绍：C? Go? Cgo! - The Go Programming Language，如果想要更详细的介绍，可以在标准库cmd/cgo/doc.go中获取更加详细的信息，或者也可以直接看文档cgo command - cmd/cgo - Go Packages，两者内容是完全一样的。\"]},\"530\":{\"h\":\"代码调用\",\"t\":[\"看下面一个例子\",\"package main //#include <stdio.h> import \\\"C\\\" func main() { C.puts(C.CString(\\\"hello, cgo!\\\")) }\",\"想要使用 cgo 特性，通过导入语句import \\\"C\\\"即可开启，需要注意的是C必须是大写字母，且导入名称无法被重写，同时需要确保环境变量CGO_ENABLED是否设置为1，在默认情况下该环境变量是默认启用的。\",\"$ go env | grep CGO $ go env -w CGO_ENABLED=1\",\"除此之外，还需要确保本地拥有C/C++的构建工具链，也就是gcc，在 windows 平台就是mingw，这样才能确保程序正常通过编译。执行如下命令进行编译，开启了 cgo 以后编译时间是要比纯 go 要更久的。\",\"$ go build -o ./ main.go $ ./main.exe hello, cgo!\",\"另外要注意的一个点就是，开启 cgo 以后，将无法支持交叉编译。\"]},\"531\":{\"h\":\"go 嵌入 c 代码\",\"t\":[\"cgo 支持直接把 c 代码写在 go 源文件中，然后直接调用，看下面的例子，例子中编写了一个名为printSum的函数，然后在 go 中的main函数进行调用。\",\"package main /* #include <stdio.h> void printSum(int a, int b) { printf(\\\"c:%d+%d=%d\\\",a,b,a+b); } */ import \\\"C\\\" func main() { C.printSum(C.int(1), C.int(2)) }\",\"输出\",\"c:1+2=3\",\"这适用于简单的场景，如果 c 代码非常多，跟 go 代码糅杂在一起十分降低可读性，就不太适合这么做。\",\"错误处理\",\"在 go 语言中错误处理以返回值的形式返回，但 c 语言不允许有多返回值，为此可以使用 c 中的errno，表示在函数调用期间发生了错误，cgo 对此做了兼容，在调用 c 函数时可以像 go 一样用返回值来处理错误。要使用errno，首先引入errno.h，看下面的一个例子\",\"package main /* #include <stdio.h> #include <stdint.h> #include <errno.h> int32_t sum_positive(int32_t a, int32_t b) { if (a <= 0 || b <= 0) { errno = EINVAL; return 0; } return a + b; } */ import \\\"C\\\" import ( \\\"fmt\\\" \\\"reflect\\\" ) func main() { sum, err := C.sum_positive(C.int32_t(0), C.int32_t(1)) if err != nil { fmt.Println(reflect.TypeOf(err)) fmt.Println(err) return } fmt.Println(sum) }\",\"输出\",\"syscall.Errno The device does not recognize the command.\",\"可以看到它的错误类型是syscall.Errno，errno.h中还定义了其它很多错误代码，可以自己去了解。\"]},\"532\":{\"h\":\"go 引入 c 文件\",\"t\":[\"通过引入 c 文件，就可以很好的解决上述的问题，首先创建一个头文件sum.h，内容如下\",\"int sum(int a, int b);\",\"然后再创建sum.c，编写具体的函数\",\"#include \\\"sum.h\\\" int sum(int a, int b) { return a + b; }\",\"然后在main.go中导入头文件\",\"package main //#include \\\"sum.h\\\" import \\\"C\\\" import \\\"fmt\\\" func main() { res := C.sum(C.int(1), C.int(2)) fmt.Printf(\\\"cgo sum: %d\\\\n\\\", res) }\",\"现在进行编译的话，必须要指定当前文件夹，否则找不到 c 文件，如下\",\"$ go build -o sum.exe . && ./sum.exe cgo sum: 3\",\"代码中res是 go 中的一个变量，C.sum是 c 语言中的函数，它的返回值是 c 语言中的int而非 go 中的int，之所以能成功调用，是因为 cgo 从中做了类型转换。\"]},\"533\":{\"h\":\"c 调用 go\",\"t\":[\"c 调用 go，指的是在 cgo 中 c 调用 go，而非原生的 c 程序调用 go，它们是这样一个调用链go-cgo-c->cgo->go。go 调用 c 是为了利用 c 的生态和性能，几乎没有原生的 c 程序调用 go 这种需求，如果有的话也建议通过网络通信来代替。\",\"cgo 支持导出 go 函数让 c 调用，如果要导出 go 函数，需在函数签名上方加上//export func_name注释，并且其参数和返回值都得是 cgo 支持的类型，例子如下\",\"//export sum func sum(a, b C.int32_t) C.int32_t { return a + b }\",\"改写刚刚的sum.c文件为如下内容\",\"#include <stdint.h> #include <stdio.h> #include \\\"sum.h\\\" #include \\\"_cgo_export.h\\\" extern int32_t sum(int32_t a, int32_t b); void do_sum() { int32_t a = 10; int32_t b = 10; int32_t c = sum(a, b); printf(\\\"%d\\\", c); }\",\"同时修改头文件sum.h\",\"void do_sum();\",\"然后在 go 中导出函数\",\"package main /* #include <stdio.h> #include <stdint.h> #include \\\"sum.h\\\" */ import \\\"C\\\" func main() { C.do_sum() } //export sum func sum(a, b C.int32_t) C.int32_t { return a + b }\",\"现在 c 中使用的sum函数实际上是 go 提供的，输出结果如下\",\"20\",\"关键点在于sum.c文件中导入的_cgo_export.h，它包含了有关所有 go 导出的类型，如果不导入的话就无法使用 go 导出的函数。另一个注意点是_cgo_export.h不能在 go 文件导入，因为该头文件生成的前提是所有 go 源文件能够通过编译。因此下面这种写法是错误的\",\"package main /* #include <stdint.h> #include <stdio.h> #include \\\"_cgo_export.h\\\" void do_sum() { int32_t a = 10; int32_t b = 10; int32_t c = sum(a, b); printf(\\\"%d\\\", c); } */ import \\\"C\\\" func main() { C.do_sum() } //export sum func sum(a, b C.int32_t) C.int32_t { return a + b }\",\"编译器会提示头文件不存在\",\"fatal error: _cgo_export.h: No such file or directory #include \\\"_cgo_export.h\\\" ^~~~~~~~~~~~~~~ compilation terminated.\",\"倘若 go 函数具有多个返回值，那么 c 调用时将返回一个结构体。\",\"顺带一提，我们可以把 go 指针通过 c 函数参数传递给 c，在 c 函数调用期间 cgo 会尽量保证内存安全，但是导出的 go 函数返回值不能带指针，因为在这种情况下 cgo 没法判断其是否被引用，也不好固定内存，如果返回的内存被引用了，然后在 go 中这段内存被 GC 掉了或者发生偏移，将导致指针越界，如下所示。\",\"//export newCharPtr func newCharPtr() *C.char { return new(C.char) }\",\"上面的写法默认是不允许通过编译的，如果想要关闭这个检查，可以如下设置。\",\"GODEBUG=cgocheck=0\",\"它有两种检查级别，可以设为1，2，级别越高检查造成运行时开销越大，可以 前往cgo command - passing_pointer了解细节。\"]},\"534\":{\"h\":\"类型转换\",\"t\":[\"cgo 对 c 与 go 之间的类型做了一个映射，方便它们在运行时调用。对于 c 中的类型，在 go 中导入import \\\"C\\\"之后，大部分情况下可以通过\",\"C.typename\",\"这种方式来直接访问，比如\",\"C.int(1) C.char('a')\",\"但 c 语言类型可以由多个关键字组成，比如\",\"unsigned char\",\"这种情况就没法直接访问了，不过可以使用 c 中的typedef关键字来给类型取个别名，其功能等同于 go 中的类型别名。如下\",\"typedef unsigned char byte;\",\"这样一来，就可以通过C.byte来访问类型unsigned char了。例子如下\",\"package main /* #include <stdio.h> typedef unsigned char byte; void printByte(byte b) { printf(\\\"%c\\\\n\\\",b); } */ import \\\"C\\\" func main() { C.printByte(C.byte('a')) C.printByte(C.byte('b')) C.printByte(C.byte('c')) }\",\"输出\",\"a b c\",\"大部分情况下，cgo 给常用类型（基本类型之类的）已经取好了别名，也可以根据上述的方法自己定义，不会冲突。\"]},\"535\":{\"h\":\"char\",\"t\":[\"c 中的char对应 go 中的int8类型，unsigned char对应 go 中的uint8也就是byte类型。\",\"package main /* #include <stdio.h> #include<complex.h> char ch; char get() { return ch; } void set(char c) { ch = c; } */ import \\\"C\\\" import ( \\\"fmt\\\" \\\"reflect\\\" ) func main() { C.set(C.char('c')) res := C.get() fmt.Printf(\\\"type: %s, val: %v\\\", reflect.TypeOf(res), res) }\",\"输出\",\"type: main._Ctype_char, val: 99\",\"如果将set的参数换成C.char(math.MaxInt8 + 1)，那么编译就会失败，并提示如下错误\",\"cannot convert math.MaxInt8 + 1 (untyped int constant 128) to type _Ctype_char\"]},\"536\":{\"h\":\"字符串\",\"t\":[\"cgo 提供了一些伪函数用于在 c 和 go 之间传递字符串和字节切片，这些函数实际上并不存在，你也没法找到它们的定义，就跟import \\\"C\\\"一样，C这个包也是不存在的，只是为了方便开发者使用，在编译后它们会被转换成其它的操作。\",\"// Go string to C string // The C string is allocated in the C heap using malloc. // It is the caller's responsibility to arrange for it to be // freed, such as by calling C.free (be sure to include stdlib.h // if C.free is needed). func C.CString(string) *C.char // Go []byte slice to C array // The C array is allocated in the C heap using malloc. // It is the caller's responsibility to arrange for it to be // freed, such as by calling C.free (be sure to include stdlib.h // if C.free is needed). func C.CBytes([]byte) unsafe.Pointer // C string to Go string func C.GoString(*C.char) string // C data with explicit length to Go string func C.GoStringN(*C.char, C.int) string // C data with explicit length to Go []byte func C.GoBytes(unsafe.Pointer, C.int) []byte\",\"go 中的字符串本质上是一个结构体，里面持有着一个底层数组的引用，在传递给 c 函数时，需要使用C.CString()在 c 中使用malloc创建一个“字符串”，为其分配内存空间，然后返回一个 c 指针，因为 c 中没有字符串这个类型，通常会使用char*来表示字符串，也就是一个字符数组的指针，使用完毕后记得使用free释放内存。\",\"package main /* #include <stdio.h> #include <stdlib.h> void printfGoString(char* s) { puts(s); } */ import \\\"C\\\" import \\\"unsafe\\\" func main() { cstring := C.CString(\\\"this is a go string\\\") C.printfGoString(cstring) C.free(unsafe.Pointer(cstring)) }\",\"也可以是char数组类型，两者其实都一样，都是指向头部元素的指针。\",\"void printfGoString(char s[]) { puts(s); }\",\"也可以传递字节切片，由于C.CBytes()会返回一个unsafe.Pointer，在传递给 c 函数之前要将其转换为*C.char类型。\",\"package main /* #include <stdio.h> #include <stdlib.h> void printfGoString(char* s) { puts(s); } */ import \\\"C\\\" import \\\"unsafe\\\" func main() { cbytes := C.CBytes([]byte(\\\"this is a go string\\\")) C.printfGoString((*C.char)(cbytes)) C.free(unsafe.Pointer(cbytes)) }\",\"上面的例子输出都是一样的\",\"this is a go string\",\"上述这几种字符串传递方法涉及到了一次内存拷贝，在传递过后实际上是在 c 内存和 go 内存中各自保存了一份，这样做会更安全。话虽如此，我们依然可以直接传递指针给 c 函数，也可以在 c 中直接修改 go 中的字符串，看下面的例子\",\"package main /* #include <stdio.h> #include <stdlib.h> void printfGoString(char* s) { puts(s); } */ import \\\"C\\\" import \\\"unsafe\\\" func main() { ptr := unsafe.Pointer(unsafe.SliceData([]byte(\\\"this is a go string\\\"))) C.printfGoString((*C.char)(ptr)) }\",\"输出\",\"this is a go string\",\"例子通过unsafe.SliceData直接获取了字符串底层数组的指针，并将其转换为了 c 指针后传递给 c 函数，该字符串的内存是由 go 进行管理的，自然也就不再需要 free，这样做的好处就是传递的过程不再需要拷贝，但有一定的风险。下面的例子演示了在 c 中修改 go 中的字符串\",\"package main /* #include <stdio.h> #include <stdlib.h> void printfGoString(char* s, int len) { puts(s); s[8] = 'c'; puts(s); } */ import \\\"C\\\" import ( \\\"fmt\\\" \\\"unsafe\\\" ) func main() { var buf []byte buf = []byte(\\\"this is a go string\\\") ptr := unsafe.Pointer(unsafe.SliceData(buf)) C.printfGoString((*C.char)(ptr), C.int(len(buf))) fmt.Println(string(buf)) }\",\"输出\",\"this is a go string this is c go string this is c go string\"]},\"537\":{\"h\":\"整数\",\"t\":[\"go 与 c 之间的整数映射关系如下表所示，关于整数的类型映射还在可以在标准库cmd/cgo/gcc.go看到一些相关信息。\",\"go\",\"c\",\"cgo\",\"int8\",\"singed char\",\"C.schar\",\"uint8\",\"unsigned char\",\"C.uchar\",\"int16\",\"short\",\"C.short\",\"uint16\",\"unsigned short\",\"C.ushort\",\"int32\",\"int\",\"C.int\",\"uint32\",\"unsigned int\",\"C.uint\",\"int32\",\"long\",\"C.long\",\"uint32\",\"unsigned long\",\"C.ulong\",\"int64\",\"long long int\",\"C.longlong\",\"uint64\",\"unsigned long long int\",\"C.ulonglong\",\"示例代码如下\",\"package main /* #include <stdio.h> void printGoInt8(signed char n) { printf(\\\"%d\\\\n\\\",n); } void printGoUInt8(unsigned char n) { printf(\\\"%d\\\\n\\\",n); } void printGoInt16(signed short n) { printf(\\\"%d\\\\n\\\",n); } void printGoUInt16(unsigned short n) { printf(\\\"%d\\\\n\\\",n); } void printGoInt32(signed int n) { printf(\\\"%d\\\\n\\\",n); } void printGoUInt32(unsigned int n) { printf(\\\"%d\\\\n\\\",n); } void printGoInt64(signed long long int n) { printf(\\\"%ld\\\\n\\\",n); } void printGoUInt64(unsigned long long int n) { printf(\\\"%ld\\\\n\\\",n); } */ import \\\"C\\\" func main() { C.printGoInt8(C.schar(1)) C.printGoInt8(C.schar(1)) C.printGoInt16(C.short(1)) C.printGoUInt16(C.ushort(1)) C.printGoInt32(C.int(1)) C.printGoUInt32(C.uint(1)) C.printGoInt64(C.longlong(1)) C.printGoUInt64(C.ulonglong(1)) }\",\"cgo 同时也对<stdint.h>的整数类型提供了支持，这里的类型内存大小更为清晰明确，而且其命名风格也与 go 非常相似。\",\"go\",\"c\",\"cgo\",\"int8\",\"int8_t\",\"C.int8_t\",\"uint8\",\"uint8_t\",\"C.uint8_t\",\"int16\",\"int16_t\",\"C.int16_t\",\"uint16\",\"uint16_t\",\"C.uint16_t\",\"int32\",\"int32_t\",\"C.int32_t\",\"uint32\",\"uint32_t\",\"C.uint32_t\",\"int64\",\"int64_t\",\"C.int64_t\",\"uint64\",\"uint64_t\",\"C.uint64_t\",\"在使用 cgo 时，建议使用<stdint.h>中的整数类型。\"]},\"538\":{\"h\":\"浮点数\",\"t\":[\"go 与 c 的浮点数类型映射如下\",\"go\",\"c\",\"cgo\",\"float32\",\"float\",\"C.float\",\"float64\",\"double\",\"C.double\",\"代码示例如下\",\"package main /* #include <stdio.h> void printGoFloat32(float n) { printf(\\\"%f\\\\n\\\",n); } void printGoFloat64(double n) { printf(\\\"%lf\\\\n\\\",n); } */ import \\\"C\\\" func main() { C.printGoFloat32(C.float(1.11)) C.printGoFloat64(C.double(3.14)) }\"]},\"539\":{\"h\":\"切片\",\"t\":[\"切片的情况的实际上跟上面讲到的字符串差不多，不过区别在于 cgo 没有提供伪函数来对切片进行拷贝，想让 c 访问到 go 中的切片就只能把切片的指针传过去。看下面的一个例子\",\"package main /* #include <stdio.h> #include <stdint.h> void printInt32Arr(int32_t* s, int32_t len) { for (int32_t i = 0; i < len; i++) { printf(\\\"%d \\\", s[i]); } } */ import \\\"C\\\" import ( \\\"unsafe\\\" ) func main() { var arr []int32 for i := 0; i < 10; i++ { arr = append(arr, int32(i)) } ptr := unsafe.Pointer(unsafe.SliceData(arr)) C.printInt32Arr((*C.int32_t)(ptr), C.int(len(arr))) }\",\"输出\",\"0 1 2 3 4 5 6 7 8 9\",\"这里将切片的底层数组的指针传递给了 c 函数，由于该数组的内存是由 go 管理，不建议 c 长期持有其指针引用。反过来，将 c 的数组作为 go 切片的底层数组的例子如下\",\"package main /* #include <stdio.h> #include <stdint.h> int32_t s[] = {1, 2, 3, 4, 5, 6, 7}; */ import \\\"C\\\" import ( \\\"fmt\\\" \\\"unsafe\\\" ) func main() { l := unsafe.Sizeof(C.s) / unsafe.Sizeof(C.s[0]) fmt.Println(l) goslice := unsafe.Slice(&C.s[0], l) for i, e := range goslice { fmt.Println(i, e) } }\",\"输出\",\"7 0 1 1 2 2 3 3 4 4 5 5 6 6 7\",\"通过unsafe.Slice函数可以将数组指针转换为切片，按照直觉来说，c 中的数组就是一个指向头部元素的指针，按照常理来说应该这样使用\",\"goslice := unsafe.Slice(&C.s, l)\",\"通过输出可以看到，如果这样做的话，除了第一个元素，剩下的内存全都越界了。\",\"0 [1 2 3 4 5 6 7] 1 [0 -1 0 0 0 3432824 0] 2 [0 0 -1 -1 0 0 -1] 3 [0 0 0 255 0 0 0] 4 [2 0 0 0 3432544 0 0] 5 [0 3432576 0 3432592 0 3432608 0] 6 [0 0 3432624 0 0 0 1422773729]\",\"即便 c 中的数组只是一个头指针，经过 cgo 包裹了一下就成了 go 数组，有了自己的地址，所以应该对数组头部元素取址。\",\"goslice := unsafe.Slice(&C.s[0], l)\"]},\"540\":{\"h\":\"结构体\",\"t\":[\"通过C.struct_前缀加上结构体名称，就可以访问 c 结构体，c 结构体无法被当作匿名结构体嵌入 go 结构体。下面是一个简单的 c 结构体的例子\",\"package main /* #include <stdio.h> #include <stdint.h> struct person { int32_t age; char* name; }; */ import \\\"C\\\" import ( \\\"fmt\\\" \\\"reflect\\\" ) func main() { var p C.struct_person p.age = C.int32_t(18) p.name = C.CString(\\\"john\\\") fmt.Println(reflect.TypeOf(p)) fmt.Printf(\\\"%+v\\\", p) }\",\"输出\",\"main._Ctype_struct_person {age:18 name:0x1dd043b6e30}\",\"如果 c 结构体的某些成员包含bit-field，cgo 就会忽略这类结构体成员，比如将person修改为下面这种\",\"struct person { int32_t age: 1; char* name; };\",\"再次执行就会报错\",\"p.age undefined (type _Ctype_struct_person has no field or method age)\",\"c 和 go 的结构体字段的内存对齐规则并不相同，如果开启了 cgo，大部分情况下会以 c 为主导。\"]},\"541\":{\"h\":\"联合体\",\"t\":[\"使用C.union_加上名称就可以访问 c 中的联合体，由于 go 并不支持联合体，它们在 go 中会以字节数组的形式存在。下面是一个简单的例子\",\"package main /* #include <stdio.h> #include <stdint.h> union data { int32_t age; char ch; }; */ import \\\"C\\\" import ( \\\"fmt\\\" \\\"reflect\\\" ) func main() { var u C.union_data fmt.Println(reflect.TypeOf(u), u) }\",\"输出\",\"[4]uint8 [0 0 0 0]\",\"通过unsafe.Pointer可以进行访问和修改\",\"func main() { var u C.union_data ptr := (*C.int32_t)(unsafe.Pointer(&u)) fmt.Println(*ptr) *ptr = C.int32_t(1024) fmt.Println(*ptr) fmt.Println(u) }\",\"输出\",\"0 1024 [0 4 0 0]\"]},\"542\":{\"h\":\"枚举\",\"t\":[\"通过前缀C.enum_加上枚举类型名就可以访问 c 中的枚举类型。下面是一个简单的例子\",\"package main /* #include <stdio.h> #include <stdint.h> enum player_state { alive, dead, }; */ import \\\"C\\\" import \\\"fmt\\\" type State C.enum_player_state func (s State) String() string { switch s { case C.alive: return \\\"alive\\\" case C.dead: return \\\"dead\\\" default: return \\\"unknown\\\" } } func main() { fmt.Println(C.alive, State(C.alive)) fmt.Println(C.dead, State(C.dead)) }\",\"输出\",\"0 alive 1 dead\"]},\"543\":{\"h\":\"指针\",\"t\":[\"谈到了指针避不开内存，cgo 之间相互调用最大的问题就是两门语言的内存模型并不相同，c 语言的内存完全是由开发者手动管理，用malloc()分配内存，free()释放内存，如果不去手动释放，它是绝对不会自己释放掉的，所以 c 的内存管理是非常稳定的。而 go 就不一样了，它带有 GC，并且 Goroutine 的栈空间是会动态调整的，当栈空间不足时会进行增长，那么这样一来，内存地址就可能发生了变化，跟上图一样（图画的并不严谨），指针可能就成了 c 中常见的悬挂指针。即便 cgo 在大多数情况可以避免内存移动（由runtime.Pinner来固定内存），但 go 官方也不建议在 c 中长期引用 go 的内存。但是反过来，go 中的指针引用 c 中的内存的话，是比较安全的，除非手动调用C.free()，否则这块内存是不会被自动释放掉的。\",\"如果要在 c 和 go 之间传递指针，就需要先将其转为unsafe.Pointer，然后再转换成对应的指针类型，就跟 c 中的void*一样。看两个例子，第一个是 c 指针引用 go 变量的例子，而且还对变量做了修改。\",\"package main /* #include <stdio.h> #include <stdint.h> void printNum(int32_t* s) { printf(\\\"%d\\\\n\\\", *s); *s = 3; printf(\\\"%d\\\\n\\\", *s); } */ import \\\"C\\\" import ( \\\"fmt\\\" \\\"unsafe\\\" ) func main() { var num int32 = 1 ptr := unsafe.Pointer(&num) C.printNum((*C.int32_t)(ptr)) fmt.Println(num) }\",\"输出\",\"1 3 3\",\"第二个是 go 指针引用 c 变量，并对其修改的例子。\",\"package main /* #include <stdio.h> #include <stdint.h> int32_t num = 10; */ import \\\"C\\\" import ( \\\"fmt\\\" \\\"unsafe\\\" ) func main() { fmt.Println(C.num) ptr := unsafe.Pointer(&C.num) iptr := (*int32)(ptr) *iptr++ fmt.Println(C.num) }\",\"输出\",\"10 11\",\"顺带一提，cgo 不支持 c 中的函数指针。\"]},\"544\":{\"h\":\"链接库\",\"t\":[\"c 语言并没有像 go 这样的依赖管理，想要直接使用别人写好的库除了直接获取源代码之外，还有个办法就是静态链接库和动态链接库，cgo 也支持这些，得益于此，我们就可以在 go 程序中导入别人写好的库，而不需要源代码。\"]},\"545\":{\"h\":\"动态链接库\",\"t\":[\"动态链接库无法单独运行，它在运行时会与可执行文件一起加载到内存中，下面演示制作一个简单的动态链接库，并使用 cgo 进行调用。首先准备一个lib/sum.c文件，内容如下\",\"#include <stdint.h> int32_t sum(int32_t a, int32_t b) { return a + b; }\",\"编写头文件lib/sum.h\",\"#include <stdint.h> int sum(int32_t a, int32_t b);\",\"接下来使用gcc来制作动态链接库，首先编译生成目标文件\",\"$ cd lib $ gcc -c sum.c -o sum.o\",\"然后制作动态链接库\",\"$ gcc -shared -o libsum.dll sum.o\",\"制作完成后，然后在 go 代码中引入sum.h头文件，并且还得通过宏告诉 cgo 去哪里寻找库文件\",\"package main /* #cgo CFLAGS: -I ./lib #cgo LDFLAGS: -L${SRCDIR}/lib -llibsum #include \\\"sum.h\\\" */ import \\\"C\\\" import \\\"fmt\\\" func main() { res := C.sum(C.int32_t(1), C.int32_t(2)) fmt.Println(res) }\",\"CFLAGS: -I指的是搜索头文件的相对路径，\",\"-L指的是库搜索路径，${SRCDIR}代指当前路径的绝对路径，因为它的参数必须是绝对路径\",\"-l指的是库文件的名称，sum 就是sum.dll。\",\"CFFLAGS和LDFLAGS这两个都是 gcc 的编译选项，出安全考虑，cgo 禁用了一些参数，前往cgo command了解细节。\",\"把动态库放到exe的同级目录下\",\"$ ls go.mod go.sum lib/ libsum.dll* main.exe* main.go\",\"最后编译 go 程序并执行\",\"$ go build main.go && ./main.exe 3\",\"到此动态链接库调用成功。\"]},\"546\":{\"h\":\"静态链接库\",\"t\":[\"不同于动态链接库，使用 cgo 导入静态链接库时，它会与 go 的目标文件最终链接成一个可执行文件。还是拿sum.c举例，先将源文件编译成目标文件\",\"$ gcc -o sum.o -c sum.c\",\"然后将目标文件打包成静态链接库（必须是lib前缀开头，不然会找不到）\",\"$ ar rcs libsum.a sum.o\",\"go 文件内容\",\"package main /* #cgo CFLAGS: -I ./lib #cgo LDFLAGS: -L${SRCDIR}/lib -llibsum #include \\\"sum.h\\\" */ import \\\"C\\\" import \\\"fmt\\\" func main() { res := C.sum(C.int32_t(1), C.int32_t(2)) fmt.Println(res) }\",\"编译\",\"$ go build && ./main.exe 3\",\"到此，静态链接库调用成功。\"]},\"547\":{\"h\":\"最后\",\"t\":[\"虽然使用 cgo 的出发点是为了性能，但在 c 与 go 之间切换也会不小的造成性能损失，对于一些十分简单的任务，cgo 的效率并不如纯 go。看一个例子\",\"package main /* #include <stdint.h> int32_t cgo_sum(int32_t a, int32_t b) { return a + b; } */ import \\\"C\\\" import ( \\\"fmt\\\" \\\"time\\\" ) func go_sum(a, b int32) int32 { return a + b } func testSum(N int, do func()) int64 { var sum int64 for i := 0; i < N; i++ { start := time.Now() do() sum += time.Now().Sub(start).Nanoseconds() } return sum / int64(N) } func main() { N := 1000_000 nsop1 := testSum(N, func() { C.cgo_sum(C.int32_t(1), C.int32_t(2)) }) fmt.Printf(\\\"cgo_sum: %d ns/op\\\\n\\\", nsop1) nsop2 := testSum(N, func() { go_sum(1, 2) }) fmt.Printf(\\\"pure_go_sum: %d ns/op\\\\n\\\", nsop2) }\",\"这是一个非常简单的测试，分别用 c 和 go 编写了一个两数求和的函数，然后各自运行 100w 次，求其平均耗时，测试结果如下\",\"cgo_sum: 49 ns/op pure_go_sum: 2 ns/op\",\"从结果可以看到，cgo 的平均耗时是纯 go 的二十几倍，倘若执行的不是单纯的两数相加，而是一个比较耗时的任务，cgo 的优势会更大一些。除此之外，使用 cgo 还有以下缺点\",\"许多 go 配套工具链将无法使用，比如 gotest，pprof，上面的测试例子就不能使用 gotest，只能自己手写。\",\"编译速度变慢，自带的交叉编译也没法用了\",\"内存安全问题\",\"依赖问题，如果别人用了你的库，等于也要开启 cgo。\",\"在没有考虑周全之前，不要在项目中引入 cgo，对于一些十分复杂的任务，使用 cgo 确实可以带来好处，但如果只是一些简单的任务，还是老老实实用 go 吧。\"]},\"548\":{\"h\":\"性能分析\",\"t\":[\"当一个程序编写完毕后，我们对它的要求不仅仅只是能运行，还希望它是一个稳定高效的应用。通过各种各样的测试，我们可以保证程序大部分的稳定性，而程序是否高效，就需要我们对其进行性能分析，在此前的内容中，性能分析的唯一手段就只能通过 Benchmark 来测试某一个功能单元的平均执行耗时，内存分配情况等，然而现实中对程序性能分析的需求远远不止于此，有时候我们需要分析程序整体的 CPU 占用，内存占用，堆分配情况，协程状态，热点代码路径等等，这是 Benchmark 所不能满足的。好在 go 工具链集成了许多性能分析工具以供开发者使用，下面就来逐一讲解。\"]},\"549\":{\"h\":\"逃逸分析\",\"t\":[\"在 go 中，变量的内存分配是由编译器决定的，一般就分配到栈上和堆上这两个地方。如果一个本该分配到栈上的变量被分配到了堆上，那么这种情况就称之为逃逸，逃逸分析便是要分析程序中的内存分配情况，由于它是在编译期进行，所以是静态分析的一种。\",\"提示\",\"前往内存分配文章了解 go 具体是如分配内存的。\"]},\"550\":{\"h\":\"引用局部指针\",\"t\":[\"package main func main() { GetPerson() } type Person struct { Name string Mom *Person } func GetPerson() Person { mom := Person{Name: \\\"lili\\\"} son := Person{Name: \\\"jack\\\", Mom: &mom} return son }\",\"GetPerson函数中创建了mom变量，由于它是函数内创建的，本来应该是将其分配到栈上，但是它被son的Mom字段所引用了，并且son被作为了函数返回值返回出去，所以编译器就将其分配到了堆上。这是一个很简单的示例，所以理解起来不需要花费太多力气，但如果是一个大点的项目，代码行数有好几万，人工分析就不是那么的轻松了，为此就需要使用工具来进行逃逸分析。前面提到过内存的分配是由编译器主导的，所以逃逸分析也是由编译器来完成，使用起来十分简单，只需要执行如下命令：\",\"$ go build -gcflags=\\\"-m -m -l\\\"\",\"gcflags即编译器gc的参数，\",\"-m，打印出代码优化建议，同时出现两个会更加进行细节的输出\",\"-l，禁用内联优化\",\"输出如下\",\"$ go build -gcflags=\\\"-m -m -l\\\" . # golearn/example ./main.go:13:2: mom escapes to heap: ./main.go:13:2: flow: son = &mom: ./main.go:13:2: from &mom (address-of) at ./main.go:14:35 ./main.go:13:2: from Person{...} (struct literal element) at ./main.go:14:15 ./main.go:13:2: from son := Person{...} (assign) at ./main.go:14:6 ./main.go:13:2: flow: ~r0 = son: ./main.go:13:2: from return son (return) at ./main.go:15:2 ./main.go:13:2: moved to heap: mom\",\"编译器很明确的告诉了我们变量mom发生了逃逸，导致原因是因为返回值包含了函数内的局部指针，除了这种情况外还有其它情况可能会发生逃逸现象\",\"::: tips\",\"如果你对逃逸分析的细节感兴趣，可以在标准库cmd/compile/internal/escape/escape.go里面了解到更多内容。\",\":::\"]},\"551\":{\"h\":\"闭包引用\",\"t\":[\"闭包引用了函数外的变量，那么该变量也会逃逸到堆上，这个很好理解。\",\"package main func main() { a := make([]string, 0) do(func() []string { return a }) } func do(f func() []string) []string { return f() }\",\"输出\",\"$ go build -gcflags=\\\"-m -m -l\\\" . # golearn/example ./main.go:10:9: f does not escape ./main.go:4:2: main capturing by value: a (addr=false assign=false width=24) ./main.go:4:11: make([]string, 0) escapes to heap: ./main.go:4:11: flow: a = &{storage for make([]string, 0)}: ./main.go:4:11: from make([]string, 0) (spill) at ./main.go:4:11 ./main.go:4:11: from a := make([]string, 0) (assign) at ./main.go:4:4 ./main.go:4:11: flow: ~r0 = a: ./main.go:4:11: from return a (return) at ./main.go:6:3 ./main.go:4:11: make([]string, 0) escapes to heap ./main.go:5:5: func literal does not escape\"]},\"552\":{\"h\":\"空间不足\",\"t\":[\"栈空间不足时，也会发生逃逸现象，下面创建的切片申请了1<<15的容量\",\"package main func main() { _ = make([]int, 0, 1<<15) }\",\"输出\",\"$ go build -gcflags=\\\"-m -m -l\\\" . # golearn/example ./main.go:4:10: make([]int, 0, 32768) escapes to heap: ./main.go:4:10: flow: {heap} = &{storage for make([]int, 0, 32768)}: ./main.go:4:10: from make([]int, 0, 32768) (too large for stack) at ./main.go:4:10 ./main.go:4:10: make([]int, 0, 32768) escapes to heap\"]},\"553\":{\"h\":\"长度未知\",\"t\":[\"当切片的长度是一个变量的时候，由于其长度未知，便会发生逃逸现象（map 并不会）\",\"package main func main() { n := 100 _ = make([]int, n) }\",\"输出\",\"$ go build -gcflags=\\\"-m -m -l\\\" . # golearn/example ./main.go:5:10: make([]int, n) escapes to heap: ./main.go:5:10: flow: {heap} = &{storage for make([]int, n)}: ./main.go:5:10: from make([]int, n) (non-constant size) at ./main.go:5:10 ./main.go:5:10: make([]int, n) escapes to heap\",\"还有一种特殊情况便是函数参数为...any类型时也可能会发生逃逸\",\"package main import \\\"fmt\\\" func main() { n := 100 fmt.Println(n) }\",\"输出\",\"$ go build -gcflags=\\\"-m -m -l\\\" . # golearn/example ./main.go:7:14: n escapes to heap: ./main.go:7:14: flow: {storage for ... argument} = &{storage for n}: ./main.go:7:14: from n (spill) at ./main.go:7:14 ./main.go:7:14: from ... argument (slice-literal-element) at ./main.go:7:13 ./main.go:7:14: flow: {heap} = {storage for ... argument}: ./main.go:7:14: from ... argument (spill) at ./main.go:7:13 ./main.go:7:14: from fmt.Println(... argument...) (call parameter) at ./main.go:7:13 ./main.go:7:13: ... argument does not escape ./main.go:7:14: n escapes to heap\",\"我们之所以要进行逃逸分析，把内存分配控制的这么细，主要是为了减轻 GC 压力，不过 go 并不是 c 语言，内存分配的最终决定权依旧掌握在编译器手里，除了极端的性能要求情况下，大多数时候我们也无需太过于专注内存分配的细节，毕竟 GC 诞生的目的就是为了解放开发者。\",\"小细节\",\"对于一些引用类型，当确认以后不会再用到它时，我们可以将其置为nil，来告诉 GC 可以将其回收。\",\"type Writer struct { buf []byte } func (w Writer) Close() error { w.buff = nil return nil }\"]},\"554\":{\"h\":\"pprof\",\"t\":[\"pprof（program profiling），是一个程序性能分析的利器，它会对程序运行时的数据进行部分采样，涵盖了 cpu，内存，协程，锁，堆栈信息等许多方面，然后再使用工具对采样的数据进行分析并展示结果。\",\"所以 pprof 的使用步骤就只有两步：\",\"采集数据\",\"分析结果\"]},\"555\":{\"h\":\"采集\",\"t\":[\"数据采集的方式有两种，自动和手动，各有优劣。在此之前，编写一个简单的函数来模拟内存和 cpu 的消耗\",\"func Do() { for i := 0; i < 10; i++ { slice := makeSlice() sortSlice(slice) } } func makeSlice() []int { var s []int for range 1 << 24 { s = append(s, rand.Int()) } return s } func sortSlice(s []int) { slices.Sort(s) }\"]},\"556\":{\"h\":\"手动\",\"t\":[\"手动采集就是通过代码来控制，其优点是可控，灵活，可以自定义，直接在代码中使用 pprof 需要引入runtime/pprof包\",\"package main import ( \\\"log\\\" \\\"os\\\" \\\"runtime/pprof\\\" ) func main() { Do() w, _ := os.Create(\\\"heap.pb\\\") heapProfile := pprof.Lookup(\\\"heap\\\") err := heapProfile.WriteTo(w, 0) if err != nil { log.Fatal(err) } }\",\"pprof.Lookup支持的参数如下面代码所示\",\"profiles.m = map[string]*Profile{ \\\"goroutine\\\": goroutineProfile, \\\"threadcreate\\\": threadcreateProfile, \\\"heap\\\": heapProfile, \\\"allocs\\\": allocsProfile, \\\"block\\\": blockProfile, \\\"mutex\\\": mutexProfile, }\",\"该函数会将采集到的数据写入到指定文件中，在写入时传入的数字有以下几个含义\",\"0，写入压缩后的 Protobuf 数据，没有可读性\",\"1，写入文本格式的数据，能够阅读，http 接口返回的就是这一种数据\",\"2，仅goroutine可用，表示打印panic风格的堆栈信息\",\"采集 cpu 数据需要单独使用 pprof.StartCPUProfile函数，它需要一定的时间进行采样，且其原始数据不可读，如下所示\",\"package main import ( \\\"log\\\" \\\"os\\\" \\\"runtime/pprof\\\" \\\"time\\\" ) func main() { Do() w, _ := os.Create(\\\"cpu.out\\\") err := pprof.StartCPUProfile(w) if err != nil { log.Fatal(err) } time.Sleep(time.Second * 10) pprof.StopCPUProfile() }\",\"采集 trace 的数据也是同样如此\",\"package main import ( \\\"log\\\" \\\"os\\\" \\\"runtime/trace\\\" \\\"time\\\" ) func main() { Do() w, _ := os.Create(\\\"trace.out\\\") err := trace.Start(w) if err != nil { log.Fatal(err) } time.Sleep(time.Second * 10) trace.Stop() }\"]},\"557\":{\"h\":\"自动\",\"t\":[\"net/http/pprof包将上面的分析函数包装成了 http 接口，并注册到了默认路由中，如下所示\",\"package pprof import ... func init() { http.HandleFunc(\\\"/debug/pprof/\\\", Index) http.HandleFunc(\\\"/debug/pprof/cmdline\\\", Cmdline) http.HandleFunc(\\\"/debug/pprof/profile\\\", Profile) http.HandleFunc(\\\"/debug/pprof/symbol\\\", Symbol) http.HandleFunc(\\\"/debug/pprof/trace\\\", Trace) }\",\"这使得我们可以直接一键运行 pprof 数据采集\",\"package main import ( \\\"net/http\\\" // 记得要导入这个包 _ \\\"net/http/pprof\\\" ) func main() { go func(){ http.ListenAndServe(\\\":8080\\\", nil) } for { Do() } }\",\"此时打开浏览器访问http://127.0.0.1:8080/debug/pprof，就会出现这样的页面\",\"页面中有几个可供选择的选项，它们分别代表了\",\"allocs：内存分配抽样\",\"block：同步原语的阻塞跟踪\",\"cmdline：当前程序的命令行调用\",\"goroutine：跟踪所有的协程\",\"heap：对于存活对象的内存分配抽样\",\"mutex：互斥锁相关信息的跟踪\",\"profile：cpu 分析，会分析一段时间并下载一个文件\",\"threadcreate：分析导致创建新 OS 线程原因\",\"trace：当前程序执行情况的跟踪，同样会下载一个文件\",\"这里的数据大多数可读性并不高，主要是拿来给工具分析用的，如下所图\",\"具体的分析工作要留到后面再进行，除了profile和trace两个选项之外，如果你想要在网页中下载数据文件，可以将query参数debug=1去掉。也可以将这些接口集成到自己的路由中而不是使用默认路由，如下所示\",\"package main import ( \\\"net/http\\\" \\\"net/http/pprof\\\" ) func main() { mux := http.NewServeMux() mux.HandleFunc(\\\"/trace\\\", pprof.Trace) servre := &http.Server{ Addr: \\\":8080\\\", Handler: mux, } servre.ListenAndServe() }\",\"如此一来，也能其集成到其它的 web 框架中，比如gin，iris等等。\"]},\"558\":{\"h\":\"分析\",\"t\":[\"在得到了采集的数据文件后，有两种方式进行分析，命令行或网页，两者都需要借助pprof命令行工具，go 默认集成该工具，所以不需要额外下载。\",\"pprof 开源地址：google/pprof: pprof is a tool for visualization and analysis of profiling data (github.com)\"]},\"559\":{\"h\":\"命令行\",\"t\":[\"将此前收集到的数据文件作为参数\",\"$ go tool pprof heap.pb\",\"如果数据是由 web 采集的话，用 web url 替换掉文件名即可。\",\"$ go tool pprof -http :8080 http://127.0.0.1/debug/pprof/heap\",\"然后就会出现一个交互式的命令行\",\"15:27:38.3266862 +0800 CST Type: inuse_space Time: Apr 15, 2024 at 3:27pm (CST) No samples were found with the default sample value type. Try \\\"sample_index\\\" command to analyze different sample values. Entering interactive mode (type \\\"help\\\" for commands, \\\"o\\\" for options) (pprof)\",\"输入 help，可以查看其它命令\",\" Commands: callgrind Outputs a graph in callgrind format comments Output all profile comments disasm Output assembly listings annotated with samples dot Outputs a graph in DOT format eog Visualize graph through eog evince Visualize graph through evince ...\",\"在命令行中查看数据一般使用top命令，也可以用traces命令不过它的输出很冗长，top命令只是简单的看个大概。\",\"(pprof) top 5 Showing nodes accounting for 117.49MB, 100% of 117.49MB total flat flat% sum% cum cum% 117.49MB 100% 100% 117.49MB 100% main.makeSlice (inline) 0 0% 100% 117.49MB 100% main.Do 0 0% 100% 117.49MB 100% main.main 0 0% 100% 117.49MB 100% runtime.main\",\"简单介绍一些其中的一些指标（cpu 同理）\",\"flat，代表着当前函数所消耗的资源\",\"cum，当前函数及其后续调用链所消耗的资源总和\",\"flat%，flat/total\",\"cum%，cum/total\",\"我们可以很明显的看到整个调用栈的内存占用是 117.49MB，由于Do函数本身什么都没做，只是调用了其它函数，所以其flat的指标是 0，创建切片的事情是由makeSlice函数在负责，所以其flat指标是100%。\",\"我们可以将转换可视化的格式，pprof支持相当多的格式，比如 pdf，svg，png，gif 等等（需要安装Graphviz）。\",\"(pprof) png Generating report in profile001.png\",\"通过图片我们可以更加清晰的看到整个调用栈的内存情况。\",\"通过list命令以源代码的形式查看\",\"(pprof) list Do Total: 117.49MB ROUTINE ======================== main.Do in D:\\\\WorkSpace\\\\Code\\\\GoLeran\\\\golearn\\\\example\\\\main.go 0 117.49MB (flat, cum) 100% of Total . . 21:func Do() { . . 22: for i := 0; i < 10; i++ { . 117.49MB 23: slice := makeSlice() . . 24: sortSlice(slice) . . 25: } . . 26:} . . 27: . . 28:func makeSlice() []int {\",\"对于图片和源代码而言，还可以用web和weblist命令在浏览器中查看图片和源代码。\"]},\"560\":{\"h\":\"网页\",\"t\":[\"在此之前为了数据更加多样化，修改一下模拟的函数\",\"func Do1() { for i := 0; i < 10; i++ { slice := makeSlice() sortSlice(slice) } } func Do2() { for i := 0; i < 10; i++ { slice := makeSlice() sortSlice(slice) } } func makeSlice() []int { var s []int for range 1 << 12 { s = append(s, rand.Int()) } return s } func sortSlice(s []int) { slices.Sort(s) }\",\"网页分析可以可视化结果，免去了我们手动操作命令行，在使用网页分析时，只需执行如下命令\",\"$ go tool pprof -http :8080 heap.pb\",\"如果数据是由 web 采集的话，将 web url 替换掉文件名即可\",\"$ go tool pprof -http :8080 http://127.0.0.1:9090/debug/pprof/heap $ go tool pprof -http :8080 http://127.0.0.1:9090/debug/pprof/profile $ go tool pprof -http :8080 http://127.0.0.1:9090/debug/pprof/goroutine\",\"提示\",\"关于如何分析数据，前往pprof: How to read the graph了解更多\",\"网页中总共有 6 个可查看的项\",\"Top，同命令 top\",\"Graph，直线图\",\"Flame Graph，火焰图\",\"Peek，\",\"Source，查看源代码\",\"Disassemble，反汇编查看\",\"对于内存而言四个维度可以分析\",\"alloc_objects：目前已分配的所有对象数量，包括已释放\",\"alloc_spcae：目前为止已分配的所有内存空间，包括已释放\",\"inuse_objects：正在使用的对象数量\",\"inuse_space：正在使用的内存空间\",\"内存分析图\",\"上图最下方的白色叶子节点代表着不同大小的对象占用。\",\"cpu分析图\",\"关于折线图，有几个点要注意\",\"块的颜色越深，占用越高，线越粗，占用越高\",\"实线代表着直接调用，虚线代表着略过了一些调用链。\",\"内存火焰图\",\"cpu火焰图\",\"对于火焰图而言，从上往下看是调用链，从左往右看是 cum 的占用百分比。\"]},\"561\":{\"h\":\"trace\",\"t\":[\"pprof 主要负责分析程序的资源占用，而 trace 更适合跟踪程序的运行细节，它与前者的数据文件互不兼容，由go tool trace命令来完成相关的分析工作。\",\"如果是手动采集的数据，可以将文件名作为参数\",\"$ go tool trace trace.out\",\"如果是自动采集，也是同样的道理\",\"$ curl http://127.0.0.1:8080/debug/pprof/trace > trace.out && go tool trace trace.out\",\"执行后会开启一个 web server\",\"2024/04/15 17:15:40 Preparing trace for viewer... 2024/04/15 17:15:40 Splitting trace for viewer... 2024/04/15 17:15:40 Opening browser. Trace viewer is listening on http://127.0.0.1:51805\",\"打开后页面大概如下所示\",\"这里面主要包含了以下几个部分，这些数据要看懂还挺不容易的。\",\"Event timelines for running goroutines\",\"trace by proc：显示每一时刻在该处理器上运行的协程时间线\",\"trace by thread：显示每一时刻在 OS 线程上运行的协程时间线\",\"Goroutine analysis：展示每组主函数的协程相关统计信息\",\"Profiles\",\"Network blocking profile： 因网络 IO 而阻塞的协程信息\",\"Synchronization blocking profile：因同步原语而阻塞的协程信息\",\"Syscall profile：因系统调用而阻塞的协程信息\",\"User-defined tasks and regions\",\"User-defined tasks：用户定义任务的相关协程信息\",\"User-defined regions：用户定义代码区域的相关协程信息\",\"Garbage collection metrics\",\"Minimum mutator utilization：展示最近 GC 的最大耗时\"]},\"562\":{\"h\":\"接口\",\"t\":[\"接口是一个非常重要的概念，它描述了一组抽象的规范，而不提供具体的实现。对于项目而言会使得代码更加优雅可读，对于开发者而言也会减少很多心智负担，代码风格逐渐形成了规范，于是就有了现在人们所推崇的面向接口编程。\"]},\"563\":{\"h\":\"概念\",\"t\":[\"Go 关于接口的发展历史有一个分水岭，在 Go1.17 及以前，官方在参考手册中对于接口的定义为：一组方法的集合。\",\"An interface type specifies a method set called its interface.\",\"接口实现的定义为\",\"A variable of interface type can store a value of any type with a method set that is any superset of the interface. Such a type is said to implement the interface\",\"翻译过来就是，当一个类型的方法集是一个接口的方法集的超集时，且该类型的值可以由该接口类型的变量存储，那么称该类型实现了该接口。\",\"不过在 Go1.18 时，关于接口的定义发生了变化，接口定义为：一组类型的集合。\",\"An interface type defines a type set.\",\"接口实现的定义为\",\"A variable of interface type can store a value of any type that is in the type set of the interface. Such a type is said to implement the interface\",\"翻译过来就是，当一个类型位于一个接口的类型集内，且该类型的值可以由该接口类型的变量存储，那么称该类型实现了该接口。并且还给出了如下的额外定义。\",\"当如下情况时，可以称类型 T 实现了接口 I\",\"T 不是一个接口，并且是接口 I 类型集中的一个元素\",\"T 是一个接口，并且 T 的类型集是接口 I 类型集的一个子集\",\"如果 T 实现了一个接口，那么 T 的值也实现了该接口。\",\"Go 在 1.18 最大的变化就是加入了泛型，新接口定义就是为了泛型而服务的，不过一点也不影响之前接口的使用，同时接口也分为了两类，\",\"基本接口(Basic Interface)：只包含方法集的接口就是基本接口\",\"通用接口(General Interface)：只要包含类型集的接口就是通用接口\",\"什么是方法集，方法集就是一组方法的集合，同样的，类型集就是一组类型的集合。\",\"提示\",\"这一堆概念很死板，理解的时候要根据代码来思考。\"]},\"564\":{\"h\":\"基本接口\",\"t\":[\"前面讲到了基本接口就是方法集，就是一组方法的集合。\"]},\"565\":{\"h\":\"声明\",\"t\":[\"先来看看接口长什么样子。\",\"type Person interface { Say(string) string Walk(int) }\",\"这是一个Person接口，有两个对外暴露的方法Walk和Say，在接口里，函数的参数名变得不再重要，当然如果想加上参数名和返回值名也是允许的。\"]},\"566\":{\"h\":\"初始化\",\"t\":[\"仅仅只有接口是无法被初始化的，因为它仅仅只是一组规范，并没有具体的实现，不过可以被声明。\",\"func main() { var person Person fmt.Println(person) }\",\"输出\",\" <nil>\"]},\"567\":{\"h\":\"实现\",\"t\":[\"先来看一个例子，一个建筑公司想一种特殊规格的起重机，于是给出了起重机的特殊规范和图纸，并指明了起重机应该有起重和吊货的功能，建筑公司并不负责造起重机，只是给出了一个规范，这就叫接口，于是公司 A 接下了订单，根据自家公司的独门技术造出了绝世起重机并交给了建筑公司，建筑公司不在乎是用什么技术实现的，也不在乎什么绝世起重机，只要能够起重和吊货就行，仅仅只是当作一台普通起重机来用，根据规范提供具体的功能，这就叫实现，。只根据接口的规范来使用功能，屏蔽其内部实现，这就叫面向接口编程。过了一段时间，绝世起重机出故障了，公司 A 也跑路了，于是公司 B 依据规范造了一台更厉害的巨无霸起重机，由于同样具有起重和吊货的功能，可以与绝世起重机无缝衔接，并不影响建筑进度，建筑得以顺利完成，内部实现改变而功能不变，不影响之前的使用，可以随意替换，这就是面向接口编程的好处。\",\"接下来会用 Go 描述上述情形\",\"// 起重机接口 type Crane interface { JackUp() string Hoist() string } // 起重机A type CraneA struct { work int //内部的字段不同代表内部细节不一样 } func (c CraneA) Work() { fmt.Println(\\\"使用技术A\\\") } func (c CraneA) JackUp() string { c.Work() return \\\"jackup\\\" } func (c CraneA) Hoist() string { c.Work() return \\\"hoist\\\" } // 起重机B type CraneB struct { boot string } func (c CraneB) Boot() { fmt.Println(\\\"使用技术B\\\") } func (c CraneB) JackUp() string { c.Boot() return \\\"jackup\\\" } func (c CraneB) Hoist() string { c.Boot() return \\\"hoist\\\" } type ConstructionCompany struct { Crane Crane // 只根据Crane类型来存放起重机 } func (c *ConstructionCompany) Build() { fmt.Println(c.Crane.JackUp()) fmt.Println(c.Crane.Hoist()) fmt.Println(\\\"建筑完成\\\") } func main() { // 使用起重机A company := ConstructionCompany{CraneA{}} company.Build() fmt.Println() // 更换起重机B company.Crane = CraneB{} company.Build() }\",\"输出\",\"使用技术A jackup 使用技术A hoist 建筑完成 使用技术B jackup 使用技术B hoist 建筑完成\",\"上面例子中，可以观察到接口的实现是隐式的，也对应了官方对于基本接口实现的定义：方法集是接口方法集的超集，所以在 Go 中，实现一个接口不需要implements关键字显式的去指定要实现哪一个接口，只要是实现了一个接口的全部方法，那就是实现了该接口。有了实现之后，就可以初始化接口了，建筑公司结构体内部声明了一个Crane类型的成员变量，可以保存所有实现了Crane接口的值，由于是Crane 类型的变量，所以能够访问到的方法只有JackUp 和Hoist，内部的其他方法例如Work和Boot都无法访问。\",\"之前提到过任何自定义类型都可以拥有方法，那么根据实现的定义，任何自定义类型都可以实现接口，下面举几个比较特殊的例子。\",\"type Person interface { Say(string) string Walk(int) } type Man interface { Exercise() Person }\",\"Man接口方法集是Person的超集，所以Man也实现了接口Person，不过这更像是一种\\\"继承\\\"。\",\"type Number int func (n Number) Say(s string) string { return \\\"bibibibibi\\\" } func (n Number) Walk(i int) { fmt.Println(\\\"can not walk\\\") }\",\"类型Number的底层类型是int，虽然这放在其他语言中看起来很离谱，但Number的方法集确实是Person 的超集，所以也算实现。\",\"type Func func() func (f Func) Say(s string) string { f() return \\\"bibibibibi\\\" } func (f Func) Walk(i int) { f() fmt.Println(\\\"can not walk\\\") } func main() { var function Func function = func() { fmt.Println(\\\"do somthing\\\") } function() }\",\"同样的，函数类型也可以实现接口。\"]},\"568\":{\"h\":\"空接口\",\"t\":[\"type Any interface{ }\",\"Any接口内部没有方法集合，根据实现的定义，所有类型都是Any接口的的实现，因为所有类型的方法集都是空集的超集，所以Any接口可以保存任何类型的值。\",\"func main() { var anything Any anything = 1 println(anything) fmt.Println(anything) anything = \\\"something\\\" println(anything) fmt.Println(anything) anything = complex(1, 2) println(anything) fmt.Println(anything) anything = 1.2 println(anything) fmt.Println(anything) anything = []int{} println(anything) fmt.Println(anything) anything = map[string]int{} println(anything) fmt.Println(anything) }\",\"输出\",\"(0xe63580,0xeb8b08) 1 (0xe63d80,0xeb8c48) something (0xe62ac0,0xeb8c58) (1+2i) (0xe62e00,0xeb8b00) 1.2 (0xe61a00,0xc0000080d8) [] (0xe69720,0xc00007a7b0) map[]\",\"通过输出会发现，两种输出的结果不一致，其实接口内部可以看成是一个由(val,type)组成的元组，type是具体类型，在调用方法时会去调用具体类型的具体值。\",\"interface{}\",\"这也是一个空接口，不过是一个匿名空接口，在开发时通常会使用匿名空接口来表示接收任何类型的值，例子如下\",\"func main() { DoSomething(map[int]string{}) } func DoSomething(anything interface{}) interface{} { return anything }\",\"在后续的更新中，官方提出了另一种解决办法，为了方便起见，可以使用any来替代interace{}，两者是完全等价的，因为前者仅仅只是一个类型别名，如下\",\"type any = interface{}\",\"在比较空接口时，会对其底层类型进行比较，如果类型不匹配的话则为false，其次才是值的比较，例如\",\"func main() { var a interface{} var b interface{} a = 1 b = \\\"1\\\" fmt.Println(a == b) a = 1 b = 1 fmt.Println(a == b) }\",\"输出为\",\"false true\",\"如果底层的类型是不可比较的，那么会panic，对于 Go 而言，内置数据类型是否可比较的情况如下\",\"类型\",\"可比较\",\"依据\",\"数字类型\",\"是\",\"值是否相等\",\"字符串类型\",\"是\",\"值是否相等\",\"数组类型\",\"是\",\"数组的全部元素是否相等\",\"切片类型\",\"否\",\"不可比较\",\"结构体\",\"是\",\"字段值是否全部相等\",\"map 类型\",\"否\",\"不可比较\",\"通道\",\"是\",\"地址是否相等\",\"指针\",\"是\",\"指针存储的地址是否相等\",\"接口\",\"是\",\"底层所存储的数据是否相等\",\"在 Go 中有一个专门的接口类型用于代表所有可比较类型，即comparable\",\"type comparable interface{ comparable }\",\"提示\",\"如果尝试对不可比较的类型进行比较，则会panic\"]},\"569\":{\"h\":\"通用接口\",\"t\":[\"通用接口就是为了泛型服务的，只要掌握了泛型，就掌握了通用接口，请移步泛型\"]},\"570\":{\"h\":\"泛型\",\"t\":[\"最初的 Go 是没有泛型这一说法的，但自从诞生以来，社区关于 Go 呼声最高的事情就是希望加入泛型。终于 Go 在 1.18 版本加入了对泛型的支持，不过有一点怪。\"]},\"571\":{\"h\":\"示例\",\"t\":[\"在开始之前，先来看一个简单的例子。\",\"func Sum(a, b int) int { return a + b }\",\"这是一个功能十分简单的函数，作用就是将两个int类型的整数相加并返回结果，倘若想要传入两个float64类型的浮点数求和的话，显然是不可以的，因为类型不匹配。一种解决办法就是再定义一个新的函数，如下\",\"func SumFloat64(a, b float64) float64 { return a + b }\",\"那么问题来了，如果开发一个数学工具包，计算所有数字类型的两数之和，难道要每一个类型都要编写一个函数吗？显然是不太可能的，或者也可以使用any类型加反射来判断，如下\",\"func SumAny(a, b any) (any, error) { tA, tB := reflect.ValueOf(a), reflect.ValueOf(b) if tA.Kind() != tB.Kind() { return nil, errors.New(\\\"disMatch type\\\") } switch tA.Kind() { case reflect.Int: case reflect.Int32: ... } }\",\"但是这样写会显得十分复杂，而且性能低下。但是Sum函数的逻辑都是一模一样的，都只不过是将两个数相加而已，这时候就需要用到了泛型，所以为什么需要泛型，泛型是为了解决执行逻辑与类型无关的问题，这类问题不关心给出的类型是什么，只需要完成对应的操作就足够。所以泛型的写法如下\",\"func Sum[T int | float64](a, b T) T { return a + b }\",\"类型形参：T 就是一个类型形参，形参具体是什么类型取决于传进来什么类型\",\"类型约束：int | float64构成了一个类型约束，这个类型约束内规定了哪些类型是允许的，约束了类型形参的类型范围\",\"类型实参：Sum[int](1,2)，手动指定了int类型，int就是类型实参。\",\"第一种用法，显式的指明使用哪种类型，如下\",\"Sum[int](2012, 2022)\",\"第二种用法，不指定类型，让编译器自行推断，如下\",\"Sum(3.1415926, 1.114514)\",\"看到这里后，应该对为什么要使用泛型，以及泛型解决了哪种问题有了一个大概的了解。将泛型引入项目后，开发上确实会比较方便，随之而来的是项目复杂度的增加，毫无节制的使用泛型会使得代码难以维护，所以应该在正确的地方使用泛型，而不是为了泛型而泛型。\"]},\"572\":{\"h\":\"泛型结构\",\"t\":[\"这是一个泛型切片，类型约束为int | int32 | int64\",\"type GenericSlice[T int | int32 | int64] []T\",\"这里使用时就不能省略掉类型实参\",\"GenericSlice[int]{1, 2, 3}\",\"这是一个泛型哈希表，键的类型必须是可比较的，所以使用comparable接口，值的类型约束为V int | string | byte\",\"type GenericMap[K comparable, V int | string | byte] map[K]V\",\"使用\",\"gmap1 := GenericMap[int, string]{1: \\\"hello world\\\"} gmap2 := make(GenericMap[string, byte], 0)\",\"这是一个泛型结构体，类型约束为T int | string\",\"type GenericStruct[T int | string] struct { Name string Id T }\",\"使用\",\"GenericStruct[int]{ Name: \\\"jack\\\", Id: 1024, } GenericStruct[string]{ Name: \\\"Mike\\\", Id: \\\"1024\\\", }\",\"这是一个泛型切片形参的例子\",\"type Company[T int | string, S []T] struct { Name string Id T Stuff S } //也可以如下 type Company[T int | string, S []int | string] struct { Name string Id T Stuff S }\",\"使用\",\"Company[int, []int]{ Name: \\\"lili\\\", Id: 1, Stuff: []int{1}, }\",\"提示\",\"在泛型结构体中，更推荐这种写法\",\"type Company[T int | string, S int | string] struct { Name string Id T Stuff []S }\",\"SayAble是一个泛型接口，Person实现了该接口。\",\"type SayAble[T int | string] interface { Say() T } type Person[T int | string] struct { msg T } func (p Person[T]) Say() T { return p.msg } func main() { var s SayAble[string] s = Person[string]{\\\"hello world\\\"} fmt.Println(s.Say()) }\"]},\"573\":{\"h\":\"泛型结构注意点\",\"t\":[\"泛型不能作为一个类型的基本类型\",\"以下写法是错误的，泛型形参 T 是不能作为基础类型的\",\"type GenericType[T int | int32 | int64] T\",\"虽然下列的写法是允许的，不过毫无意义而且可能会造成数值溢出的问题，所以并不推荐\",\"type GenericType[T int | int32 | int64] int\",\"泛型类型无法使用类型断言\",\"对泛型类型使用类型断言将会无法通过编译，泛型要解决的问题是类型无关的，如果一个问题需要根据不同类型做出不同的逻辑，那么就根本不应该使用泛型，应该使用interface{}或者any。\",\"func Sum[T int | float64](a, b T) T { ints,ok := a.(int) // 不被允许 switch a.(type) { // 不被允许 case int: case bool: ... } return a + b }\",\"匿名结构不支持泛型\",\"匿名结构体是不支持泛型的，如下的代码将无法通过编译\",\"testStruct := struct[T int | string] { Name string Id T }[int]{ Name: \\\"jack\\\", Id: 1 }\",\"匿名函数不支持自定义泛型\",\"以下两种写法都将无法通过编译\",\"var sum[T int | string] func (a, b T) T sum := func[T int | string](a,b T) T{ ... }\",\"但是可以使用已有的泛型类型，例如闭包中\",\"func Sum[T int | float64](a, b T) T { sub := func(c, d T) T { return c - d } return sub(a,b) + a + b }\",\"不支持泛型方法\",\"方法是不能拥有泛型形参的，但是receiver可以拥有泛型形参。如下的代码将会无法通过编译\",\"type GenericStruct[T int | string] struct { Name string Id T } func (g GenericStruct[T]) name[S int | float64](a S) S { return a }\"]},\"574\":{\"h\":\"类型集\",\"t\":[\"在 1.18 以后，接口的定义变为了类型集(type set)，含有类型集的接口又称为General interfaces即通用接口。\",\"An interface type defines a type set\",\"类型集主要用于类型约束，不能用作类型声明，既然是集合，就会有空集，并集，交集，接下来将会讲解这三种情况。\",\"并集\",\"接口类型SignedInt是一个类型集，有符号整数类型的并集就是SignedInt，反过来SignedInt就是它们的超集。\",\"type SignedInt interface { int8 | int16 | int | int32 | int64 }\",\"基本数据类型如此，对待其它通用接口也是如此\",\"type SignedInt interface { int8 | int16 | int | int32 | int64 } type UnSignedInt interface { uint8 | uint16 | uint32 | uint64 } type Integer interface { SignedInt | UnSignedInt }\",\"交集\",\"非空接口的类型集是其所有元素的类型集的交集，翻译成人话就是：如果一个接口包含多个非空类型集，那么该接口就是这些类型集的交集，例子如下\",\"type SignedInt interface { int8 | int16 | int | int32 | int64 } type Integer interface { int8 | int16 | int | int32 | int64 | uint8 | uint16 | uint | uint32 | uint64 } type Number interface { SignedInt Integer }\",\"例子中的交集肯定就是SignedInt，\",\"func Do[T Number](n T) T { return n } Do[int](2) DO[uint](2) //无法通过编译\",\"空集\",\"空集就是没有交集，例子如下，下面例子中的Integer就是一个类型空集。\",\"type SignedInt interface { int8 | int16 | int | int32 | int64 } type UnsignedInt interface { uint8 | uint16 | uint | uint32 | uint64 } type Integer interface { SignedInt UnsignedInt }\",\"因为无符号整数和有符号整数两个肯定没有交集，所以交集就是个空集，下方例子中不管传什么类型都无法通过编译。\",\"Do[Integer](1) Do[Integer](-100)\",\"空接口\",\"空接口与空集并不同，空接口是所有类型集的集合，即包含所有类型。\",\"func Do[T interface{}](n T) T { return n } func main() { Do[struct{}](struct{}{}) Do[any](\\\"abc\\\") }\",\"底层类型\",\"当使用type关键字声明了一个新的类型时，即便其底层类型包含在类型集内，当传入时也依旧会无法通过编译。\",\"type Int interface { int8 | int16 | int | int32 | int64 | uint8 | uint16 | uint | uint32 | uint64 } type TinyInt int8 func Do[T Int](n T) T { return n } func main() { Do[TinyInt](1) // 无法通过编译，即便其底层类型属于Int类型集的范围内 }\",\"有两种解决办法，第一种是往类型集中并入该类型，但是这毫无意义，因为TinyInt与int8底层类型就是一致的，所以就有了第二种解决办法。\",\"type Int interface { int8 | int16 | int | int32 | int64 | uint8 | uint16 | uint | uint32 | uint64 | TinyInt }\",\"使用~符号，来表示底层类型，如果一个类型的底层类型属于该类型集，那么该类型就属于该类型集，如下所示\",\"type Int interface { ~int8 | ~int16 | ~int | ~int32 | ~int64 | ~uint8 | ~uint16 | ~uint | ~uint32 | ~uint64 }\",\"修改过后就可以通过编译了。\",\"func main() { Do[TinyInt](1) // 可以通过编译，因为TinyInt在类型集Int内 }\"]},\"575\":{\"h\":\"类型集注意点\",\"t\":[\"带有方法集的接口无法并入类型集\",\"只要是带有方法集的接口，不论是基本接口，泛型接口，又或者是通用接口，都无法并入类型集中，同样的也无法在类型约束中并入。以下两种写法都是错误的，都无法通过编译。\",\"type Integer interface { Sum(int, int) int Sub(int, int) int } type SignedInt interface { int8 | int16 | int | int32 | int64 | Integer } func Do[T Integer | float64](n T) T { return n }\",\"类型集无法当作类型实参使用\",\"只要是带有类型集的接口，都无法当作类型实参。\",\"type SignedInt interface { int8 | int16 | int | int32 | int64 } func Do[T SignedInt](n T) T { return n } func main() { Do[SignedInt](1) // 无法通过编译 }\",\"类型集中的交集问题\",\"对于非接口类型，类型并集中不能有交集，例如下例中的TinyInt与~int8有交集。\",\"type Int interface { ~int8 | ~int16 | ~int | ~int32 | ~int64 | ~uint8 | ~uint16 | ~uint | ~uint32 | ~uint64 | TinyInt // 无法通过编译 } type TinyInt int8\",\"但是对于接口类型的话，就允许有交集，如下例\",\"type Int interface { ~int8 | ~int16 | ~int | ~int32 | ~int64 | ~uint8 | ~uint16 | ~uint | ~uint32 | ~uint64 | TinyInt // 可以通过编译 } type TinyInt interface { int8 }\",\"类型集不能直接或间接的并入自身\",\"以下示例中，Floats 直接的并入了自身，而Double又并入了Floats，所以又间接的并入了自身。\",\"type Floats interface { // 代码无法通过编译 Floats | Double } type Double interface { Floats }\",\"comparable接口无法并入类型集\",\"同样的，也无法并入类型约束中，所以基本上都是单独使用。\",\"func Do[T comparable | Integer](n T) T { //无法通过编译 return n } type Number interface { // 无法通过编译 Integer | comparable } type Comparable interface { // 可以通过编译但是毫无意义 comparable }\"]},\"576\":{\"h\":\"使用\",\"t\":[\"数据结构是泛型最常见的使用场景，下面借由两个数据结构来展示下泛型如何使用。\"]},\"577\":{\"h\":\"队列\",\"t\":[\"下面用泛型实现一个简单的队列，首先声明队列类型，队列中的元素类型可以是任意的，所以类型约束为any\",\"type Queue[T any] []T\",\"总共只有四个方法Pop ，Peek，Push，Size，代码如下。\",\"type Queue[T any] []T func (q *Queue[T]) Push(e T) { *q = append(*q, e) } func (q *Queue[T]) Pop(e T) (_ T) { if q.Size() > 0 { res := q.Peek() *q = (*q)[1:] return res } return } func (q *Queue[T]) Peek() (_ T) { if q.Size() > 0 { return (*q)[0] } return } func (q *Queue[T]) Size() int { return len(*q) }\",\"在Pop和Peek方法中，可以看到返回值是_ T，这是具名返回值的使用方式，但是又采用了下划线_表示这是匿名的，这并非多此一举，而是为了表示泛型零值。由于采用了泛型，当队列为空时，需要返回零值，但由于类型未知，不可能返回具体的类型，借由上面的那种方式就可以返回泛型零值。也可以声明泛型变量的方式来解决零值问题，对于一个泛型变量，其默认的值就是该类型的零值，如下\",\"func (q *Queue[T]) Pop(e T) T { var res T if q.Size() > 0 { res = q.Peek() *q = (*q)[1:] return res } return res }\"]},\"578\":{\"h\":\"堆\",\"t\":[\"上面队列的例子，由于对元素没有任何的要求，所以类型约束为any。但堆就不一样了，堆是一种特殊的数据结构，它可以在 O(1)的时间内判断最大或最小值，所以它对元素有一个要求，那就是必须是可以排序的类型，但内置的可排序类型只有数字和字符串，并且 go 的泛型约束不允许存在带方法的接口，所以在堆的初始化时，需要传入一个自定义的比较器，比较器由调用者提供，并且比较器也必须使用泛型，如下\",\"type Comparator[T any] func(a, b T) int\",\"下面是一个简单二项堆的实现，先声明泛型结构体，依旧采用any进行约束，这样可以存放任意类型\",\"type Comparator[T any] func(a, b T) int type BinaryHeap[T any] struct { s []T c Comparator[T] }\",\"几个方法实现\",\"func (heap *BinaryHeap[T]) Peek() (_ T) { if heap.Size() > 0 { return heap.s[0] } return } func (heap *BinaryHeap[T]) Pop() (_ T) { size := heap.Size() if size > 0 { res := heap.s[0] heap.s[0], heap.s[size-1] = heap.s[size-1], heap.s[0] heap.s = heap.s[:size-1] heap.down(0) return res } return } func (heap *BinaryHeap[T]) Push(e T) { heap.s = append(heap.s, e) heap.up(heap.Size() - 1) } func (heap *BinaryHeap[T]) up(i int) { if heap.Size() == 0 || i < 0 || i >= heap.Size() { return } for parentIndex := i>>1 - 1; parentIndex >= 0; parentIndex = i>>1 - 1 { // greater than or equal to if heap.compare(heap.s[i], heap.s[parentIndex]) >= 0 { break } heap.s[i], heap.s[parentIndex] = heap.s[parentIndex], heap.s[i] i = parentIndex } } func (heap *BinaryHeap[T]) down(i int) { if heap.Size() == 0 || i < 0 || i >= heap.Size() { return } size := heap.Size() for lsonIndex := i<<1 + 1; lsonIndex < size; lsonIndex = i<<1 + 1 { rsonIndex := lsonIndex + 1 if rsonIndex < size && heap.compare(heap.s[rsonIndex], heap.s[lsonIndex]) < 0 { lsonIndex = rsonIndex } // less than or equal to if heap.compare(heap.s[i], heap.s[lsonIndex]) <= 0 { break } heap.s[i], heap.s[lsonIndex] = heap.s[lsonIndex], heap.s[i] i = lsonIndex } } func (heap *BinaryHeap[T]) Size() int { return len(heap.s) }\",\"使用起来如下\",\"type Person struct { Age int Name string } func main() { heap := NewHeap[Person](10, func(a, b Person) int { return cmp.Compare(a.Age, b.Age) }) heap.Push(Person{Age: 10, Name: \\\"John\\\"}) heap.Push(Person{Age: 18, Name: \\\"mike\\\"}) heap.Push(Person{Age: 9, Name: \\\"lili\\\"}) heap.Push(Person{Age: 32, Name: \\\"miki\\\"}) fmt.Println(heap.Peek()) fmt.Println(heap.Pop()) fmt.Println(heap.Peek()) }\",\"输出\",\"{9 lili} {9 lili} {10 John}\",\"有泛型的加持，原本不可排序的类型传入比较器后也可以使用堆了，这样做肯定比以前使用interface{}来进行类型转换和断言要优雅和方便很多。\"]},\"579\":{\"h\":\"小结\",\"t\":[\"go 的一大特点就是编译速度非常快，编译快是因为编译期做的优化少，泛型的加入会导致编译器的工作量增加，工作更加复杂，这必然会导致编译速度变慢，事实上当初 go1.18 刚推出泛型的时候确实导致编译更慢了，go 团队既想加入泛型又不想太拖累编译速度，开发者用的顺手，编译器就难受，反过来编译器轻松了（最轻松的当然是直接不要泛型），开发者就难受了，现如今的泛型就是这两者之间妥协后的产物。\",\"提示\",\"如果想要了解更多关于泛型的实际案例，可以看看这个泛型数据结构库246859/containers: base data structure in go genericity (github.com)。如果想要了解更多关于泛型的一些设计理念和细节，可以前往Type Parameters Proposal (googlesource.com)。\"]},\"580\":{\"h\":\"迭代器\",\"t\":[\"在 Go 中，用于迭代特定数据结构的关键字为for range，之前的章节中已经介绍过它的一些应用，它仅能作用于语言内置的几个数据结构\",\"数组\",\"切片\",\"字符串\",\"map\",\"chan\",\"整型值\",\"这样的话使用起来非常的不灵活，没有拓展性，对于自定义类型几乎不支持，不过好在 go1.23 版本更新以后，for range关键字支持了range over func，这样一来自定义迭代器也就成为了可能。\"]},\"581\":{\"h\":\"认识\",\"t\":[\"下面通过一个例子来初步认识迭代器，不知道各位还是否记得在函数小节中讲解的闭包求解斐波那契数列的例子，它的实现代码如下\",\"func Fibonacci(n int) func() (int, bool) { a, b, c := 1, 1, 2 i := 0 return func() (int, bool) { if i >= n { return 0, false } else if i < 2 { f := i i++ return f, true } a, b = b, c c = a + b i++ return a, true } }\",\"我们可以把它改造成迭代器，如下所示，可以看到代码量要减少了一些\",\"func Fibonacci(n int) func(yield func(int) bool) { a, b, c := 0, 1, 1 return func(yield func(int) bool) { for range n { if !yield(a) { return } a, b = b, c c = a + b } } }\",\"Go 的迭代器是range over func风格，我们可以直接用for range关键字来进行使用，使用起来也要比原来更方便\",\"func main() { n := 8 for f := range Fibonacci(n) { fmt.Println(f) } }\",\"输出如下\",\"0 1 1 2 3 5 8 13\",\"如上所示，迭代器就是一个闭包函数，它接受一个回调函数作为参数，你甚至可以在里面看到yield这种字眼，写过 python 的人应该都很熟悉，它与 python 中的生成器很类似。Go 的迭代器并没有新增任何关键字，语法特性，在上述示例中yield也只是一个回调函数，它并非关键字，官方取这个名字是为了方便理解。\"]},\"582\":{\"h\":\"推送式迭代器\",\"t\":[\"关于迭代器的定义，我们可以在iter库中找到如下解释\",\"An iterator is a function that passes successive elements of a sequence to a callback function, conventionally named yield.\",\"迭代器是一个函数，它将序列中的元素逐个传递给回调函数，通常称为 yield。\",\"我们从中可以明确的一点，迭代器就是一个函数，它接受一个回调函数作为参数，在迭代过程中会将序列中的元素逐个传递给回调函数yield。在之前示例中我们是按照下面的方式使用迭代器的\",\"for f := range Fibonacci(n) { fmt.Println(f) }\",\"根据官方定义，上面迭代器Backward的例子使用就等同于下面这段代码\",\"Fibonacci(n)(func(f int) bool { fmt.Println(f) return true })\",\"循环体的 body 就是迭代器的回调函数yiled，当函数返回true迭代器会继续迭代，否则就会停止。\",\"此外，iter标准库中也定义了迭代器的类型iter.Seq，它的类型就是函数。\",\"type Seq[V any] func(yield func(V) bool) type Seq2[K, V any] func(yield func(K, V) bool)\",\"iter.Seq的回调函数只接受一个参数，那么在迭代时for range仅有一个返回值，如下\",\"for v := range iter { // body }\",\"iter.Seq2的回调函数接受两个参数，那么在迭代时for range就有两个返回值，如下\",\"for k, v := range iter { // body }\",\"虽然标准库中没有定义 0 个参数的 Seq，但这也是完全允许的，它相当于\",\"func(yield func() bool)\",\"使用起来如下所示\",\"for range iter { // body }\",\"回调函数的参数数量只能是 0 至 2 个，多了会无法通过编译。\",\"简而言之，for range中的循环体就是迭代器中的yield回调函数，for range返回几个值，相应的yeild函数就有几个入参，每一轮迭代时，迭代器都会调用yield函数，也就是执行循环体中的代码，主动将序列中的元素传递给yield函数，这种主动传递元素的迭代器我们一般称之为推送式迭代器（pushing iterator），比较典型的例子就是其他语言中的foreach，比如 js\",\"let arr = [1, 2, 3, 4, 5]; arr .filter((e) => e % 2 === 0) .forEach((e) => { console.log(e); });\",\"在 Go 中的表现形式就是由range返回被迭代的元素。\",\"for index, value := range iterator() { fmt.Println(index, value) }\",\"在某些语言（比如 Java）中它还有另一个叫法：数据流处理。\",\"既然循环体中的代码是作为回调函数传入迭代器的，而且它很可能是一个闭包函数，Go 就需要让一个闭包函数在执行defer，return，break，goto等关键字时表现的像一个普通循环体代码段一样，思考下面几种情况。\",\"比如说在迭代器循环中返回，那么在yield回调函数中要怎么去处理这个 return 呢？\",\"for index, value := range iterator() { if value > 10 { return } fmt.Println(index, value) }\",\"不可能直接在回调函数中 return，这么做只会让迭代停止而已，达不到返回的效果\",\"iterator()(func(index int, value int) bool { if value > 10 { return false } fmt.Println(index, value) })\",\"再比如说在迭代器循环中使用defer\",\"for index, value := range iterator() { defer fmt.Println(index, value) }\",\"也不能直接在回调函数中使用defer，因为这么做的话在回调函数结束时就会直接延迟调用了\",\"iterator()(func(index int, value int) bool { defer fmt.Println(index, value) })\",\"像其他的几个关键字break，continue，goto也是类似的，好在这些情况 Go 已经帮我们处理好了，我们只需使用即可，可以暂时不需要关心这些，如果感兴趣可以自行浏览rangefunc/rewrite.go中的源代码。\"]},\"583\":{\"h\":\"拉取式迭代器\",\"t\":[\"推送式迭代器（pushing iterator）是由迭代器来控制迭代的逻辑，用户被动获取元素，相反的拉取式迭代器（pulling iterator）就是由用户来控制迭代逻辑，主动的去获取序列元素。一般而言，拉取式迭代器都会有特定的函数如next()，stop()来控制迭代的开始或结束，它可以是一个闭包或者结构体。\",\"scanner := bufio.NewScanner(file) for scanner.Scan() { line, err := scanner.Text(), scanner.Err() if err != nil { fmt.Println(err) return } fmt.Println(line) }\",\"如上所示，Scanner 通过方法Text()来获取文件中的下一行文本，通过方法Scan()来表示迭代是否结束，这也是拉取式迭代器的一种模式。Scanner 采用结构体来记录状态，而在iter库定义的拉取式迭代器采用闭包来记录状态，我们通过iter.Pull或iter.Pull2函数就可以将一个标准的推送式迭代器转换为拉取式迭代器，iter.Pull与iter.Pull2的区别就是后者的返回值有两个，签名如下\",\"func Pull[V any](seq Seq[V]) (next func() (V, bool), stop func()) func Pull2[K, V any](seq Seq2[K, V]) (next func() (K, V, bool), stop func())\",\"它们都接受一个迭代器作为参数，然后会返回两个函数next()和stop()，用于控制迭代的继续和停止。\",\"func next() (V, bool) func stop()\",\"next会返回被迭代的元素，和一个表示当前值是否有效的布尔值，当迭代结束时next函数会返回元素的零值和false。stop函数会结束迭代过程，当调用者不再使用迭代器后，就必须使用stop函数来结束迭代。顺带一提，在多个协程调用同一个迭代器的next函数是错误的做法，因为它并非并发安全。\",\"下面通过一个例子来演示，它的功能就是把之前的斐波那契迭代器改造成拉取式迭代器，如下\",\"func main() { n := 10 next, stop := iter.Pull(Fibonacci(n)) defer stop() for { fibn, ok := next() if !ok { break } fmt.Println(fibn) } }\",\"输出\",\"0 1 1 2 3 5 8 13 21 34\",\"这样一来我们就可以通过next和stop函数来手动控制迭代的逻辑了。你或许可能会觉得这样做多此一举，如果要这样做的话那为什么不直接用最初的闭包版本就好了，一样可以自己控制迭代，闭包的用法是这样的\",\"func main() { fib := Fibonacci(10) for { n, ok := fib() if !ok { break } fmt.Prinlnt(n) } }\",\"转换过程：闭包 → 迭代器 → 拉取式迭代器，闭包与拉取式迭代器的用法都大差不差，它们的思想都是一样的，后者还会因为各种各样的处理导致性能上的拖累。老实说这么做确实多此一举，它的应用场景确实不是很多，不过iter.pull是为了iter.Seq而存在的，也就是为了将推送式迭代器转换成拉取式迭代器的而存在的，如果你仅仅只是想要一个拉取式迭代器，还专门为此去实现一个推送式迭代器来进行转换，要这样做的话不妨考虑下自己实现的复杂度和性能，就像这个斐波那契数列的例子一样，绕了一圈又回到原点，唯一的好处可能就是符合官方的迭代器规范。\"]},\"584\":{\"h\":\"错误处理\",\"t\":[\"在迭代时发生了错误怎么办？我们可以将其传递给yield函数让for range返回，让调用者来进行处理，就像下面这个行迭代器的例子一样\",\"func ScanLines(reader io.Reader) iter.Seq2[string, error] { scanner := bufio.NewScanner(reader) return func(yield func(string, error) bool) { for scanner.Scan() { if !yield(scanner.Text(), scanner.Err()) { return } } } }\",\"提示\",\"值得注意的是，ScanLines迭代器是一次性使用的，文件关闭以后就不能再次使用了。\",\"可以看到它的第二个返回值是error类型，使用起来如下\",\"for line, err := range ScanLines(file) { if err != nil { fmt.Println(err) break } fmt.Println(line) }\",\"这样处理起来就跟普通的错误处理没什么区别，拉取式迭代器也是同理\",\"next, stop := iter.Pull2(ScanLines(file)) defer stop() for { line, err, ok := next() if err != nil { fmt.Println(err) break } else if !ok { break } fmt.Println(line) }\",\"如果发生了 panic，就像平常一样使用recovery即可。\",\"defer func() { if err := recover(); err != nil { fmt.Println(\\\"panic:\\\", err) os.Exit(1) } }() for line, err := range ScanLines(file) { if err != nil { fmt.Println(err) break } fmt.Println(line) }\",\"拉取式迭代器依然同理，这里就不演示了。\"]},\"585\":{\"h\":\"标准库\",\"t\":[\"有很多标准库也支持了迭代器，最常用的就是slices和maps标准库，下面介绍几个比较实用的功能。\",\"slices.All\",\"func All[Slice ~[]E, E any](s Slice) iter.Seq2[int, E]\",\"slices.All会将切片转换成一个切片迭代器\",\"func main() { s := []int{1, 2, 3, 4, 5} for i, n := range slices.All(s) { fmt.Println(i, n) } }\",\"输出\",\"0 1 1 2 2 3 3 4 4 5\",\"slices.Values\",\"func Values[Slice ~[]E, E any](s Slice) iter.Seq[E]\",\"slices.Values会将切片转换成一个切片迭代器，但是不带索引\",\"func main() { s := []int{1, 2, 3, 4, 5} for n := range slices.Values(s) { fmt.Println(n) } }\",\"输出\",\"1 2 3 4 5\",\"slices.Chunk\",\"func Chunk[Slice ~[]E, E any](s Slice, n int) iter.Seq[Slice]\",\"slices.Chunk函数会返回一个迭代器，该迭代器会以 n 个元素为切片推送给调用者\",\"func main() { s := []int{1, 2, 3, 4, 5} for chunk := range slices.Chunk(s, 2) { fmt.Println(chunk) } }\",\"输出\",\"[1 2] [3 4] [5]\",\"slices.Collect\",\"func Collect[E any](seq iter.Seq[E]) []E\",\"slices.Collect函数会将切片迭代器收集成一个切片\",\"func main() { s := []int{1, 2, 3, 4, 5} s2 := slices.Collect(slices.Values(s)) fmt.Println(s2) }\",\"输出\",\"[1 2 3 4 5]\",\"maps.Keys\",\"func Keys[Map ~map[K]V, K comparable, V any](m Map) iter.Seq[K]\",\"maps.Keys会返回一个迭代 map 所有键的迭代器，配合slices.Collect可以直接收集成一个切片。\",\"func main() { m := map[string]int{\\\"one\\\": 1, \\\"two\\\": 2, \\\"three\\\": 3} keys := slices.Collect(maps.Keys(m)) fmt.Println(keys) }\",\"输出\",\"[three one two]\",\"由于 map 是无序的，所以输出也不固定\",\"maps.Values\",\"func Values[Map ~map[K]V, K comparable, V any](m Map) iter.Seq[V]\",\"maps.Values会返回一个迭代 map 所有值的迭代器，配合slices.Collect可以直接收集成一个切片。\",\"func main() { m := map[string]int{\\\"one\\\": 1, \\\"two\\\": 2, \\\"three\\\": 3} keys := slices.Collect(maps.Values(m)) fmt.Println(keys) }\",\"输出\",\"[3 1 2]\",\"由于 map 是无序的，所以输出也不固定\",\"maps.All\",\"func All[Map ~map[K]V, K comparable, V any](m Map) iter.Seq2[K, V]\",\"maps.All可以将一个 map 转换为成一个 map 迭代器\",\"func main() { m := map[string]int{\\\"one\\\": 1, \\\"two\\\": 2, \\\"three\\\": 3} for k, v := range maps.All(m) { fmt.Println(k, v) } }\",\"一般不会这么直接用，都是拿来配合其他数据流处理函数的。\",\"maps.Collect\",\"func Collect[K comparable, V any](seq iter.Seq2[K, V]) map[K]V\",\"maps.Collect可以将一个 map 迭代器收集成一个 map\",\"func main() { m := map[string]int{\\\"one\\\": 1, \\\"two\\\": 2, \\\"three\\\": 3} m2 := maps.Collect(maps.All(m)) fmt.Println(m2) }\",\"collect 函数一般作为数据流处理的终结函数来使用。\"]},\"586\":{\"h\":\"链式调用\",\"t\":[\"通过上面标准库提供的函数，我们可以将其组合来处理数据流，比如对数据流进行排序，如下\",\"sortedSlices := slices.Sorted(slices.Values(s))\",\"go 的迭代器采用的是闭包，只能像这样嵌套函数调用，本身没法链式调用，调用链长了以后可读性会很差，但我们可以自己通过结构体来记录迭代器，就能够实现链式调用。\"]},\"587\":{\"h\":\"demo\",\"t\":[\"一个简单的链式调用 demo 如下所示，它包含了Filter，Map，Find，Some等常用的功能。\",\"package iterx import ( \\\"iter\\\" \\\"slices\\\" ) type SliceSeq[E any] struct { seq iter.Seq2[int, E] } func (s SliceSeq[E]) All() iter.Seq2[int, E] { return s.seq } func (s SliceSeq[E]) Filter(filter func(int, E) bool) SliceSeq[E] { return SliceSeq[E]{ seq: func(yield func(int, E) bool) { // 重新组织索引 i := 0 for k, v := range s.seq { if filter(k, v) { if !yield(i, v) { return } i++ } } }, } } func (s SliceSeq[E]) Map(mapFn func(E) E) SliceSeq[E] { return SliceSeq[E]{ seq: func(yield func(int, E) bool) { for k, v := range s.seq { if !yield(k, mapFn(v)) { return } } }, } } func (s SliceSeq[E]) Fill(fill E) SliceSeq[E] { return SliceSeq[E]{ seq: func(yield func(int, E) bool) { for i, _ := range s.seq { if !yield(i, fill) { return } } }, } } func (s SliceSeq[E]) Find(equal func(int, E) bool) (_ E) { for i, v := range s.seq { if equal(i, v) { return v } } return } func (s SliceSeq[E]) Some(match func(int, E) bool) bool { for i, v := range s.seq { if match(i, v) { return true } } return false } func (s SliceSeq[E]) Every(match func(int, E) bool) bool { for i, v := range s.seq { if !match(i, v) { return false } } return true } func (s SliceSeq[E]) Collect() []E { var res []E for _, v := range s.seq { res = append(res, v) } return res } func (s SliceSeq[E]) Sort(cmp func(x, y E) int) []E { collect := s.Collect() slices.SortFunc(collect, cmp) return collect } func (s SliceSeq[E]) SortStable(cmp func(x, y E) int) []E { collect := s.Collect() slices.SortStableFunc(collect, cmp) return collect } func Slice[S ~[]E, E any](s S) SliceSeq[E] { return SliceSeq[E]{seq: slices.All(s)} }\",\"然后我们就可以通过链式调用来处理了，看几个使用案例。\",\"处理元素值\",\"func main() { s := []string{\\\"apple\\\", \\\"banana\\\", \\\"cherry\\\"} all := iterx.Slice(s).Map(strings.ToUpper).All() for i, v := range all { fmt.Printf(\\\"index: %d, value: %s\\\\n\\\", i, v) } }\",\"输出\",\"index: 0, value: APPLE index: 1, value: BANANA index: 2, value: CHERRY\",\"寻找某一个指定值\",\"func main() { s := []int{1, 2, 3, 4, 5} result := iterx.Slice(s).Find(func(i int, e int) bool { return e == 3 }) fmt.Println(result) }\",\"输出\",\"3\",\"填充切片\",\"func main() { s := []int{1, 2, 3, 4, 5} result := iterx.Slice(s).Fill(6).Collect() fmt.Println(result) }\",\"输出\",\"[6 6 6 6 6]\",\"过滤元素\",\"func main() { s := []int{1, 2, 3, 4, 5} filter := iterx.Slice(s).Filter(func(i int, e int) bool { return e%2 == 0 }).All() for i, v := range filter { fmt.Printf(\\\"Index: %d, Value: %d\\\\n\\\", i, v) } }\",\"输出\",\"Index: 0, Value: 2 Index: 1, Value: 4\",\"比较可惜的是 Go 目前还不支持简写匿名函数，就像 js，rust，java 中的箭头函数一样，否则链式调用还可以更加简洁和优雅一些。\"]},\"588\":{\"h\":\"性能\",\"t\":[\"因为 Go 对迭代器做了许多的处理，它的性能肯定是不如原生 for range 循环的，我们拿最简单的一个切片遍历来测试下它们的性能区别，分为下面几种\",\"原生 for 循环\",\"推送式迭代器\",\"拉取式迭代器\",\"测试代码如下，测试切片长度为 1000。\",\"package main import ( \\\"iter\\\" \\\"slices\\\" \\\"testing\\\" ) var s []int const n = 10000 func init() { for i := range n { s = append(s, i) } } func testNaiveFor(s []int) { for i, n := range s { _ = i _ = n } } func testPushing(s []int) { for i, n := range slices.All(s) { _ = i _ = n } } func testPulling(s []int) { next, stop := iter.Pull2(slices.All(s)) for { i, n, ok := next() if !ok { stop() return } _ = i _ = n } } func BenchmarkNaive_10000(b *testing.B) { for range b.N { testNaiveFor(s) } } func BenchmarkPushing_10000(b *testing.B) { for range b.N { testPushing(s) } } func BenchmarkPulling_10000(b *testing.B) { for range b.N { testPulling(s) } }\",\"测试结果如下\",\"goos: windows goarch: amd64 pkg: golearn cpu: 11th Gen Intel(R) Core(TM) i7-11800H @ 2.30GHz BenchmarkNaive_10000 BenchmarkNaive_10000-16 492658 2398 ns/op 0 B/op 0 allocs/op BenchmarkPushing_10000 BenchmarkPushing_10000-16 315889 3707 ns/op 0 B/op 0 allocs/op BenchmarkPulling_10000 BenchmarkPulling_10000-16 2016 574509 ns/op 440 B/op 14 allocs/op PASS ok golearn 4.029s\",\"我们通过结果可以看到推送式迭代器与原生的for range循环相差不是特别大，但拉取式迭代器要比前面两个慢了几乎两个数量级，在使用的时候各位可以根据自己的实际情况来进行考虑。\"]},\"589\":{\"h\":\"小结\",\"t\":[\"与泛型的情况相似，Go 的迭代器同样饱受争议，部分人的观点是迭代器引入了过多的复杂度，违背了 Go 的简洁哲学，像这种迭代器的闭包代码多了以后，调试起来怕是都有点困难，阅读起来就就更加恼火了。\",\"你可以在很多地方看到关于迭代器的激烈讨论\",\"Why People are Angry over Go 1.23 Iterators，一个国外老哥关于迭代器的评价，值得一看\",\"golang/go · Discussion #56413，rsc 发起的社区讨论，有很多人发表了自己的观点\",\"理性的看待 Go 迭代器，它确实使得编写代码更加方便，尤其是在处理切片类型的时候，但同时也会引入了些许复杂度，迭代器部分的代码可读性会降低，不过总的来说，我认为这确实是一个实用的特性。\"]},\"590\":{\"h\":\"类型\",\"t\":[\"在之前的数据类型的小节中已经简单了介绍过了 Go 中的所有内置的数据类型，这些内置的基础类型，是后续自定义类型的基础。Go 是一个典型的静态类型语言，所有变量的类型都会在编译期确定好，并且在整个程序的生命周期都不会再改变，这一小节会简单的介绍下 Go 的类型系统和基本使用。\"]},\"591\":{\"h\":\"静态强类型\",\"t\":[\"Go 是一个静态强类型语言，静态指的是 Go 所有变量的类型早在编译期间就已经确定了，在程序的生命周期都不会再发生改变，尽管 Go 中的短变量声明有点类似动态语言的写法，但其变量类型是由编译器自行推断的，最根本的区别在于它的类型一旦推断出来后不会再发生变化，动态语言则完全相反。所以下面的代码完全无法通过编译，因为 a 是int类型的变量，不能赋值字符串。\",\"func main() { var a int = 64 a = \\\"64\\\" fmt.Println(a) // cannot use \\\"64\\\" (untyped string constant) as int value in assignment }\",\"强类型则指的是在程序中执行严格的类型检查，如果出现类型不匹配的情况时，会立即告诉程序员不应该这么做，而不是像动态语言一样去尝试推断可能的结果。所以下面的代码无法通过编译，因为两者类型不同，无法进行运算。\",\"func main() { fmt.Println(1 + \\\"1\\\") // invalid operation: 1 + \\\"1\\\" (mismatched types untyped int and untyped string) }\"]},\"592\":{\"h\":\"类型后置\",\"t\":[\"Go 为什么要把类型声明放在后面而不是前面，很大程度上是从 C 语言吸取了教训，拿官方的一个例子展示效果，这是一个函数指针\",\"int (*(*fp)(int (*)(int, int), int))(int, int)\",\"说实话不认真看很难知道这是一个什么类型，在 Go 中类似的写法如下\",\"f func(func(int,int) int, int) func(int, int) int\",\"Go 的声明方式始终遵循名字在前面，类型在后面的原则，从左往右读，大概第一眼就可以知道这是一个函数，且返回值为func(int,int) int。当类型变得越来越复杂时，类型后置在可读性上要好得多，Go 在许多层面的设计都是为了可读性而服务的。\"]},\"593\":{\"h\":\"类型声明\",\"t\":[\"在 Go 中通过类型声明，可以声明一个自定义名称的新类型，声明一个新类型通常需要一个类型名称以及一个基础类型，简单的例子如下：\",\"type MyInt int64\",\"在上述类型声明中，通过type关键字声明了一个基础类型为int64名为MyInt的类型。在 Go 中，每一个新声明的类型都必须有一个与之对应的基础类型，且类型名称不建议与已有的内置标识符重复。\",\"type MyInt int64 type MyFloat64 float64 type MyMap map[string]int // 可以通过编译，但是不建议使用，这会覆盖原有的类型 type int int64\",\"通过类型声明的类型都是新类型，不同的类型无法进行运算，即便基础类型是相同的。\",\"type MyFloat64 float64 var f1 MyFloat64 var f float64 f1 = 0.2 f = 0.1 fmt.Println(f1 + f)\",\"invalid operation: f1 + f (mismatched types MyFloat64 and float64)\"]},\"594\":{\"h\":\"类型别名\",\"t\":[\"类型别名与类型声明则不同，类型别名仅仅只是一个别名，并不是创建了一个新的类型，简单的例子如下：\",\"type Int = int\",\"两者是都是同一个类型，仅仅叫的名字不同，所以也就可以进行运算，所以下例自然也就可以通过编译。\",\"type Int = int var a Int = 1 var b int = 2 fmt.Println(a + b)\",\"3\",\"类型别名对于一些特别复杂的类型有很大的用处，例如现在有一个类型map[string]map[string]int，这是一个二维 map，现有一个函数参数是map[string]map[string]int类型，如下\",\"func PrintMyMap(mymap map[string]map[string]int) { fmt.Println(mymap) }\",\"这种情况下，就没有必要使用类型声明了，因为前者是声明了一个新的类型，无法作为该函数的参数，使用类型别名后的例子如下\",\"type TwoDMap = map[string]map[string]int func PrintMyMap(mymap TwoDMap) { fmt.Println(mymap) }\",\"使用类型别名后看起来会简洁一些。\",\"提示\",\"内置类型any就是interface{}的类型别名，两者完全等价，仅仅叫法不一样。\"]},\"595\":{\"h\":\"类型转换\",\"t\":[\"在 Go 中，只存在显式的类型转换，不存在隐式类型转换，因此不同类型的变量无法进行运算，无法作为参数传递。类型转换适用的前提是知晓被转换变量的类型和要转换成的目标类型，例子如下：\",\"type MyFloat64 float64 var f1 MyFloat64 var f float64 f1 = 0.2 f = 0.1 fmt.Println(float64(f1) + f)\",\"0.30000000000000004\",\"通过显式的将MyFloat64 转换为float64类型，才能进行加法运算。类型转换的另一个前提是：被转换类型必须是可以被目标类型代表的（Representability），例如int可以被int64类型所代表，也可以被float64类型代表，所以它们之间可以进行显式的类型转换，但是int类型无法被string和bool类型代表，因为也就无法进行类型转换。\",\"提示\",\"关于代表（Representabilitsy）的定义可以前往参考手册 - Representability以了解更多细节。\",\"即便两个类型可以相互代表，类型转换的结果也不总是正确的，看下面的一个例子：\",\"var num1 int8 = 1 var num2 int32 = 512 fmt.Println(int32(num1), int8(num2))\",\"1 0\",\"num1被正确的转换为了int32类型，但是num2并没有。这是一个典型的数值溢出问题，int32能够表示 31 位整数，int8只能表示 7 位整数，高精度整数在向低精度整数转换时会抛弃高位保留低位，因此num1的转换结果就是 0。在数字的类型转换中，通常建议小转大，而不建议大转小。\",\"在使用类型转换时，对于一些类型需要避免歧义，例子如下：\",\"*Point(p) // 等价于 *(Point(p)) (*Point)(p) // 将p转换为类型 *Point <-chan int(c) // 等价于 <-(chan int(c)) (<-chan int)(c) // 将c转换为类型 <-chan int (func())(x) // 将x转换为类型 func() (func() int)(x) // 将x转换为类型 func() int\"]},\"596\":{\"h\":\"类型断言\",\"t\":[\"类型断言通常用于判断某一接口类型的变量是否属于某一个类型，示例如下\",\"var b int = 1 var a interface{} = b if intVal, ok := a.(int); ok { fmt.Println(intVal) } else { fmt.Println(\\\"error type\\\") }\",\"1\",\"由于interface{}是空接口类型，空接口类型可以代表所有的类型，但是int类型无法代表interface{}类型，所以无法使用类型转换。而类型断言就可以判断其底层类型是否为想要的类型，类型断言语句有两个返回值，一个是类型转换过后的值，另一个是转换结果的布尔值。\"]},\"597\":{\"h\":\"类型判断\",\"t\":[\"在 Go 中，switch语句还支持一种特殊的写法，通过这种写法可以根据不同的case做出不同的逻辑处理，使用的前提是入参必须是接口类型，示例如下：\",\"var a interface{} = 2 switch a.(type) { case int: fmt.Println(\\\"int\\\") case float64: fmt.Println(\\\"float\\\") case string: fmt.Println(\\\"string\\\") }\",\"int\",\"提示\",\"通过unsafe包下提供的操作，可以绕过 Go 的类型系统，就可以做到原本无法通过编译的类型转换操作。\"]},\"598\":{\"h\":\"错误\",\"t\":[\"在 Go 中的异常有三种级别：\",\"error：正常的流程出错，需要处理，直接忽略掉不处理程序也不会崩溃\",\"panic：很严重的问题，程序应该在处理完问题后立即退出\",\"fatal：非常致命的问题，程序应该立即退出\",\"准确的来说，Go 语言并没有异常，它是通过错误来体现，同样的，Go 中也并没有try-catch-finally这种语句，Go 创始人希望能够将错误可控，他们不希望干什么事情都需要嵌套一堆try-catch，所以大多数情况会将其作为函数的返回值来返回，例如下方代码例子：\",\"func main() { // 打开一个文件 if file, err := os.Open(\\\"README.txt\\\"); err != nil { fmt.Println(err) return } fmt.Println(file.Name()) }\",\"这段代码的意图很明显，打开一个名为README.txt的文件，如果打开失败函数将会返回一个错误，输出错误信息，如果错误为nil的话那么就是打开成功，输出文件名。\",\"看起来似乎是要比try-catch简洁一些，那如果有特别多的函数调用，将会到处都充斥着if err != nil 这种判断语句，比如下面的例子，这是一个计算文件哈希值的 demo，在这一小段代码中总共出现了三次if err != nil。\",\"func main() { sum, err := checksum(\\\"main.go\\\") if err != nil { fmt.Println(err) return } fmt.Println(sum) } func checksum(path string) (string, error) { file, err := os.Open(path) if err != nil { return \\\"\\\", err } defer file.Close() hash := sha256.New() _, err = io.Copy(hash, file) if err != nil { return \\\"\\\", err } var hexSum [64]byte sum := hash.Sum(nil) hex.Encode(hexSum[:], sum) return string(hexSum[:]), nil }\",\"正因如此，外界对于 Go 最诟病的点就在错误处理上，Go 源代码里if err != nil就占了相当一部分。Rust 同样也是返回错误值，但没有人会去说它这一点，因为它通过语法糖的方式解决了这类问题，与 Rust 相比之下，Go 的语法糖不能说很多，只能说是几乎没有。\",\"不过我们看待事物要辩证的来看，凡事都是有好有坏的，Go 的错误处理的优点有几个\",\"心智负担小：有错误就处理，不处理就返回\",\"可读性：因为处理的方式非常简单，大部分情况下都很容易读懂代码\",\"易于调试：每一个错误都是通过函数调用的返回值产生的，可以一层一层往回找到，很少会出现突然冒出一个错误却不知道是从哪里来的这种情况\",\"不过缺点也不少\",\"错误中没有堆栈信息（需要第三方包解决或者自己封装）\",\"丑陋，重复代码多（看个人喜好）\",\"自定义错误是通过var来声明的，它是一个变量而不是常量（确实不应该）\",\"变量遮蔽问题\",\"社区中有关于 Go 错误处理的提案和讨论自从 Go 诞生以来就从未停止过，有这么一句玩笑话：如果你能接受 Go 的错误处理，那么你才是个合格的 Gopher 了。\",\"提示\",\"这里有两篇 Go 团队关于错误处理的文章，感兴趣可以看看\",\"Errors are values - Rob Pike\",\"Error handling and Go - Andrew Gerrand\"]},\"599\":{\"h\":\"error\",\"t\":[\"error 属于是一种正常的流程错误，它的出现是可以被接受的，大多数情况下应该对其进行处理，当然也可以忽略不管，error 的严重级别不足以停止整个程序的运行。error本身是一个预定义的接口，该接口下只有一个方法Error()，该方法的返回值是字符串，用于输出错误信息。\",\"type error interface { Error() string }\",\"error 在历史上也有过大改，在 1.13 版本时 Go 团队推出了链式错误，且提供了更加完善的错误检查机制，接下来都会一一介绍。\"]},\"600\":{\"h\":\"创建\",\"t\":[\"创建一个 error 有以下几种方法，第一种是使用errors包下的New函数。\",\"err := errors.New(\\\"这是一个错误\\\")\",\"第二种是使用fmt包下的Errorf函数，可以得到一个格式化参数的 error。\",\"err := fmt.Errorf(\\\"这是%d个格式化参数的的错误\\\", 1)\",\"下面是一个完整的例子\",\"func sumPositive(i, j int) (int, error) { if i <= 0 || j <= 0 { return -1, errors.New(\\\"必须是正整数\\\") } return i + j, nil }\",\"大部分情况，为了更好的维护性，一般都不会临时创建 error，而是会将常用的 error 当作全局变量使用，例如下方节选自os\\\\erros.go文件的代码\",\"var ( ErrInvalid = fs.ErrInvalid // \\\"invalid argument\\\" ErrPermission = fs.ErrPermission // \\\"permission denied\\\" ErrExist = fs.ErrExist // \\\"file already exists\\\" ErrNotExist = fs.ErrNotExist // \\\"file does not exist\\\" ErrClosed = fs.ErrClosed // \\\"file already closed\\\" ErrNoDeadline = errNoDeadline() // \\\"file type does not support deadline\\\" ErrDeadlineExceeded = errDeadlineExceeded() // \\\"i/o timeout\\\" )\",\"可以看到它们都是被var定义的变量\"]},\"601\":{\"h\":\"自定义错误\",\"t\":[\"通过实现Error()方法，可以很轻易的自定义 error，例如erros包下的errorString就是一个很简单的实现。\",\"func New(text string) error { return &errorString{text} } // errorString结构体 type errorString struct { s string } func (e *errorString) Error() string { return e.s }\",\"因为errorString实现太过于简单，表达能力不足，所以很多开源库包括官方库都会选择自定义 error，以满足不同的错误需求。\"]},\"602\":{\"h\":\"传递\",\"t\":[\"在一些情况中，调用者调用的函数返回了一个错误，但是调用者本身不负责处理错误，于是也将错误作为返回值返回，抛给上一层调用者，这个过程叫传递，错误在传递的过程中可能会层层包装，当上层调用者想要判断错误的类型来做出不同的处理时，可能会无法判别错误的类别或者误判，而链式错误正是为了解决这种情况而出现的。\",\"type wrapError struct { msg string err error } func (e *wrapError) Error() string { return e.msg } func (e *wrapError) Unwrap() error { return e.err }\",\"wrappError同样实现了error接口，也多了一个方法Unwrap，用于返回其内部对于原 error 的引用，层层包装下就形成了一条错误链表，顺着链表上寻找，很容易就能找到原始错误。由于该结构体并不对外暴露，所以只能使用fmt.Errorf函数来进行创建，例如\",\"err := errors.New(\\\"这是一个原始错误\\\") wrapErr := fmt.Errorf(\\\"错误，%w\\\", err)\",\"使用时，必须使用%w格式动词，且参数只能是一个有效的 error。\"]},\"603\":{\"h\":\"处理\",\"t\":[\"错误处理中的最后一步就是如何处理和检查错误，errors包提供了几个方便函数用于处理错误。\",\"func Unwrap(err error) error\",\"errors.Unwrap()函数用于解包一个错误链，其内部实现也很简单\",\"func Unwrap(err error) error { u, ok := err.(interface { // 类型断言，是否实现该方法 Unwrap() error }) if !ok { //没有实现说明是一个基础的error return nil } return u.Unwrap() // 否则调用Unwrap }\",\"解包后会返回当前错误链所包裹的错误，被包裹的错误可能依旧是一个错误链，如果想要在错误链中找到对应的值或类型，可以递归进行查找匹配，不过标准库已经提供好了类似的函数。\",\"func Is(err, target error) bool\",\"errors.Is函数的作用是判断错误链中是否包含指定的错误，例子如下\",\"var originalErr = errors.New(\\\"this is an error\\\") func wrap1() error { // 包裹原始错误 return fmt.Errorf(\\\"wrapp error %w\\\", wrap2()) } func wrap2() error { // 原始错误 return originalErr } func main() { err := wrap1() if errors.Is(err, originalErr) { // 如果使用if err == originalErr 将会是false fmt.Println(\\\"original\\\") } }\",\"所以在判断错误时，不应该使用==操作符，而是应该使用errors.Is()。\",\"func As(err error, target any) bool\",\"errors.As()函数的作用是在错误链中寻找第一个类型匹配的错误，并将值赋值给传入的err。有些情况下需要将error类型的错误转换为具体的错误实现类型，以获得更详细的错误细节，而对一个错误链使用类型断言是无效的，因为原始错误是被结构体包裹起来的，这也是为什么需要As函数的原因。例子如下\",\"type TimeError struct { // 自定义error Msg string Time time.Time //记录发生错误的时间 } func (m TimeError) Error() string { return m.Msg } func NewMyError(msg string) error { return &TimeError{ Msg: msg, Time: time.Now(), } } func wrap1() error { // 包裹原始错误 return fmt.Errorf(\\\"wrapp error %w\\\", wrap2()) } func wrap2() error { // 原始错误 return NewMyError(\\\"original error\\\") } func main() { var myerr *TimeError err := wrap1() // 检查错误链中是否有*TimeError类型的错误 if errors.As(err, &myerr) { // 输出TimeError的时间 fmt.Println(\\\"original\\\", myerr.Time) } }\",\"target必须是指向error的指针，由于在创建结构体时返回的是结构体指针，所以error实际上*TimeError类型的，那么target就必须是**TimeError类型的。\",\"不过官方提供的errors包其实并不够用，因为它没有堆栈信息，不能定位，一般会比较推荐使用官方的另一个增强包\",\"github.com/pkg/errors\",\"例子\",\"import ( \\\"fmt\\\" \\\"github.com/pkg/errors\\\" ) func Do() error { return errors.New(\\\"error\\\") } func main() { if err := Do(); err != nil { fmt.Printf(\\\"%+v\\\", err) } }\",\"输出\",\"some unexpected error happened main.Do D:/WorkSpace/Code/GoLeran/golearn/main.go:9 main.main D:/WorkSpace/Code/GoLeran/golearn/main.go:13 runtime.main D:/WorkSpace/Library/go/root/go1.21.3/src/runtime/proc.go:267 runtime.goexit D:/WorkSpace/Library/go/root/go1.21.3/src/runtime/asm_amd64.s:1650\",\"通过格式化输出，就可以看到堆栈信息了，默认情况下是不会输出堆栈的。这个包相当于是标准库errors包的加强版，同样都是官方写的，不知道为什么没有并入标准库。\"]},\"604\":{\"h\":\"panic\",\"t\":[\"panic中文译为恐慌，表示十分严重的程序问题，程序需要立即停止来处理该问题，否则程序立即停止运行并输出堆栈信息，panic是 Go 是运行时异常的表达形式，通常在一些危险操作中会出现，主要是为了及时止损，从而避免造成更加严重的后果。不过panic在退出之前会做好程序的善后工作，同时panic也可以被恢复来保证程序继续运行。\",\"下方是一个向nil的 map 写入值的例子，肯定会触发 panic\",\"func main() { var dic map[string]int dic[\\\"a\\\"] = 'a' }\",\"panic: assignment to entry in nil map\",\"提示\",\"当程序中存在多个协程时，只要任一协程发生panic，如果不将其捕获的话，整个程序都会崩溃\"]},\"605\":{\"h\":\"创建\",\"t\":[\"显式的创建panic十分简单，使用内置函数panic即可，函数签名如下\",\"func panic(v any)\",\"panic函数接收一个类型为 any的参数v，当输出错误堆栈信息时，v也会被输出。使用例子如下\",\"func main() { initDataBase(\\\"\\\", 0) } func initDataBase(host string, port int) { if len(host) == 0 || port == 0 { panic(\\\"非法的数据链接参数\\\") } // ...其他的逻辑 }\",\"当初始化数据库连接失败时，程序就不应该启动，因为没有数据库程序就运行的毫无意义，所以此处应该抛出panic\",\"panic: 非法的数据链接参数\"]},\"606\":{\"h\":\"善后\",\"t\":[\"程序因为panic退出之前会做一些善后工作，例如执行defer语句。\",\"func main() { defer fmt.Println(\\\"A\\\") defer fmt.Println(\\\"B\\\") fmt.Println(\\\"C\\\") panic(\\\"panic\\\") defer fmt.Println(\\\"D\\\") }\",\"输出为\",\"C B A panic: panic\",\"并且上游函数的defer语句同样会执行，例子如下\",\"func main() { defer fmt.Println(\\\"A\\\") defer fmt.Println(\\\"B\\\") fmt.Println(\\\"C\\\") dangerOp() defer fmt.Println(\\\"D\\\") } func dangerOp() { defer fmt.Println(1) defer fmt.Println(2) panic(\\\"panic\\\") defer fmt.Println(3) }\",\"输出\",\"C 2 1 B A panic: panic\",\"defer中也可以嵌套panic，下面是一个比较复杂的例子\",\"func main() { defer fmt.Println(\\\"A\\\") defer func() { func() { panic(\\\"panicA\\\") defer fmt.Println(\\\"E\\\") }() }() fmt.Println(\\\"C\\\") dangerOp() defer fmt.Println(\\\"D\\\") } func dangerOp() { defer fmt.Println(1) defer fmt.Println(2) panic(\\\"panicB\\\") defer fmt.Println(3) }\",\"defer中嵌套的panic 执行顺序依旧一致，发生panic时后续的逻辑将无法执行。\",\"C 2 1 A panic: panicB panic: panicA\",\"综上所述，当发生panic时，会立即退出所在函数，并且执行当前函数的善后工作，例如defer，然后层层上抛，上游函数同样的也进行善后工作，直到程序停止运行。\",\"当子协程发生panic时，不会触发当前协程的善后工作，如果直到子协程退出都没有恢复panic，那么程序将会直接停止运行。\",\"var waitGroup sync.WaitGroup func main() { demo() } func demo() { waitGroup.Add(1) defer func() { fmt.Println(\\\"A\\\") }() fmt.Println(\\\"C\\\") go dangerOp() waitGroup.Wait() // 父协程阻塞等待子协程执行完毕 defer fmt.Println(\\\"D\\\") } func dangerOp() { defer fmt.Println(1) defer fmt.Println(2) panic(\\\"panicB\\\") defer fmt.Println(3) waitGroup.Done() }\",\"输出为\",\"C 2 1 panic: panicB\",\"可以看到demo()中的defer语句一个都没有执行，程序就直接退出了。需要注意的是，如果没有waitGroup来阻塞父协程的话，demo()的执行速度可能会快于子协程的执行速度，输出的结果就会变得非常有迷惑性，下面稍微修改一下代码\",\"func main() { demo() } func demo() { defer func() { // 父协程善后工作要花费20ms time.Sleep(time.Millisecond * 20) fmt.Println(\\\"A\\\") }() fmt.Println(\\\"C\\\") go dangerOp() defer fmt.Println(\\\"D\\\") } func dangerOp() { // 子协程要执行一些逻辑，要花费1ms time.Sleep(time.Millisecond) defer fmt.Println(1) defer fmt.Println(2) panic(\\\"panicB\\\") defer fmt.Println(3) }\",\"输出为\",\"C D 2 1 panic: panicB\",\"在本例中，当子协程发生panic时，父协程早已完成的函数的执行，进入了善后工作，在执行最后一个defer时，碰巧遇到了子协程发生panic，所以程序就直接退出运行。\"]},\"607\":{\"h\":\"恢复\",\"t\":[\"当发生panic时，使用内置函数recover()可以及时的处理并且保证程序继续运行，必须要在defer语句中运行，使用示例如下。\",\"func main() { dangerOp() fmt.Println(\\\"程序正常退出\\\") } func dangerOp() { defer func() { if err := recover(); err != nil { fmt.Println(err) fmt.Println(\\\"panic恢复\\\") } }() panic(\\\"发生panic\\\") }\",\"调用者完全不知道dangerOp()函数内部发生了panic，程序执行剩下的逻辑后正常退出，所以输出如下\",\"发生panic panic恢复 程序正常退出\",\"但事实上recover()的使用有许多隐含的陷阱。例如在defer中再次闭包使用recover。\",\"func main() { dangerOp() fmt.Println(\\\"程序正常退出\\\") } func dangerOp() { defer func() { func() { if err := recover(); err != nil { fmt.Println(err) fmt.Println(\\\"panic恢复\\\") } }() }() panic(\\\"发生panic\\\") }\",\"闭包函数可以看作调用了一个函数，panic是向上传递而不是向下，自然闭包函数也就无法恢复panic，所以输出如下。\",\"panic: 发生panic\",\"除此之外，还有一种很极端的情况，那就是panic()的参数是nil。\",\"func main() { dangerOp() fmt.Println(\\\"程序正常退出\\\") } func dangerOp() { defer func() { if err := recover(); err != nil { fmt.Println(err) fmt.Println(\\\"panic恢复\\\") } }() panic(nil) }\",\"这种情况panic确实会恢复，但是不会输出任何的错误信息。\",\"输出\",\"程序正常退出\",\"总的来说recover函数有几个注意点\",\"必须在defer中使用\",\"多次使用也只会有一个能恢复panic\",\"闭包recover不会恢复外部函数的任何panic\",\"panic的参数禁止使用nil\"]},\"608\":{\"h\":\"fatal\",\"t\":[\"fatal是一种极其严重的问题，当发生fatal时，程序需要立刻停止运行，不会执行任何善后工作，通常情况下是调用os包下的Exit函数退出程序，如下所示\",\"func main() { dangerOp(\\\"\\\") } func dangerOp(str string) { if len(str) == 0 { fmt.Println(\\\"fatal\\\") os.Exit(1) } fmt.Println(\\\"正常逻辑\\\") }\",\"输出\",\"fatal\",\"fatal级别的问题一般很少会显式的去触发，大多数情况都是被动触发。\"]},\"609\":{\"h\":\"后记\",\"t\":[\"如果你真的将语法篇和进阶篇都仔细阅读完了，并且动手敲了代码，那么你会认识到 Go 的语法其实并不难，特性也并不多，经验丰富的人可能几天就上手了，它完完全全是一门面向工程的语言，这一点你会在以后的编码中慢慢体会到。倘若你学习完后感到无处施展拳脚，想要更深一步学习，我可以给出下面几个学习路线和示例项目以供参考。\"]},\"610\":{\"h\":\"Web 开发\",\"t\":[\"Web 开发是 Go 语言中一个很常见的应用场景，你可以尝试以下的几个开源 Web 框架：\",\"Gin\",\"Echo\",\"Iris\",\"Hertz\",\"net/http， 或者不用框架，用 Go 自带的原生 HTTP 标准库\",\"如果你想要进行微服务开发，我推荐下面几个开源框架：\",\"GoZero\",\"go-kratos\",\"kitex\",\"然后你需要与数据库交互，我推荐下面几个开源库：\",\"sqlx\",\"Gorm\",\"Xorm\",\"Ent\",\"你可以参照下面这些项目来进行学习：\",\"gin vue admin\",\"go-zero-looklook\",\"gin-admin，单体 Web 项目我比较推荐参考该项目进行学习\",\"go-platform，微服务项目我推荐参考该项目进行学习\"]},\"611\":{\"h\":\"IM 通讯\",\"t\":[\"使用 Go 进行 IM 开发，推荐下面这些开源项目：\",\"open-im-server\",\"gim\",\"xxim-server\",\"gochat\",\"TangSengDaoDaoServer\"]},\"612\":{\"h\":\"网络编程\",\"t\":[\"Go 在网络编程这块也有非常多的应用，下面给出一些参考的开源项目：\",\"zinx\",\"nps\",\"caddy\",\"goproxy\",\"gws\",\"gev\"]},\"613\":{\"h\":\"游戏服务器\",\"t\":[\"在游戏服务器这个领域，有越来越多的企业转到 Go 这个方向\",\"agones\",\"leaf\",\"nano\",\"goworld\",\"pitaya\",\"origin\",\"gonet\"]},\"614\":{\"h\":\"数据库开发\",\"t\":[\"数据库开发需要一定的技术功底，基于 Go 语言的数据库或引擎同样也不少，光是阅读它们的源代码就需要花费不少时间\",\"badger，高速 kv 数据库\",\"dgraph，图数据库\",\"cayley，图数据库\",\"etcd，分布式键值数据库\",\"rosedb，键值数据库，入门的最佳选择\",\"nutsdb，键值数据库\",\"prometheus，时序数据库\",\"tidb，时序数据库\",\"cockroach，分布式 SQL 数据库\",\"rqlite，基于 SQLite 的分布式数据库\"]},\"615\":{\"h\":\"命令行工具\",\"t\":[\"Go 非常适合用于命令行 CLI 工具开发，下面推荐几个命令行开发框架或库：\",\"flag，flag 标准库\",\"cobra，强烈推荐使用 cobra 进行 CLI 开发，有许多著名项目都是基于 cobra，比如 Docker，K8S 等\",\"go-pretty，用于在命令行进行美观的输出\",\"cli，轻量级的命令行框架\",\"kingpin，强大灵活的命令行解析库\",\"由于 cobra 十分常用，基于它进行命令行开发的项目非常多，随便都可以找到，下面只是一些参考项目：\",\"cobra-example\",\"govm\",\"hugo\",\"delve\",\"上面只是列出了比较常见的领域，你可以看到的是 Go 在服务端领域应用较为广泛，而客户端则较少，其实 Go 在其他领域也有不少的应用，比如 webrtc，区块链，对象存储，云计算等等，感兴趣可以在 Github 上自行了解。\"]},\"616\":{\"h\":\"简介\",\"t\":[\"写下本文时，go的发行版已经来到了1.21，距离本站刚建立的时间也已经快有一年多了。\",\"Go语言的标准库非常的丰富（数据结构除外），功能也十分强大，API对开发人员而言十分友好，能够熟练运用标准库对日常开发将会有非常大的帮助。比如你可以不用任何外部依赖，仅使用net/http，html/template，database/sql这三个库就可以开发一个独立完整的Web项目。\",\"标准库的内容一直没有更新是因为标准库的内容实在太多了，所以下面会简单的概括一些常用的标准库的作用，这样可以挑选自己感兴趣的去了解，每一个标准库的包级注释都会详细说明这个包是干什么用的。\",\"fmt，用于处理格式化输入输出的包\",\"html，html模板操作包\",\"net，提供一系列网络操作的包，相当的强大\",\"flag，命令行参数解析包\",\"reflect，反射操作包\",\"log，自带的日志包\",\"sort，排序操作包\",\"regex，正则表达式包\",\"image，图像操作的包\",\"time，时间操作的包\",\"unicode，unicode字符集操作包\",\"unsafe，提供没有类型限制的指针操作\",\"syscall，操作系统提供的系统调用包\",\"testing，测试包，主要是写测试的时候用。\",\"sync ，并发操作包\",\"context，上下文包\",\"strconv，字符串转换包\",\"strings，字符串操作包\",\"bytes，字节切片操作包\",\"maps，map操作包\",\"slices，切片操作包\",\"io，定义了一系列基础的IO接口，例如常用的Closer，Writer等，还有一些基础的IO操作函数。\",\"io/fs，定义了一系列文件系统的接口，算是对文件系统的抽象。\",\"os，操作系统进行交互的包，提供的是一系列具体的函数，可以简单理解为是上面两个的具体实现。\",\"os/signal，操作系统信号包，用于监听操作系统的信号，主要用于实现程序的优雅关闭。\",\"os/exec，操作系统命令包，用于执行操作系统命令。\",\"os/user，操作系统用户包，用于获取操作系统的用户信息。\",\"bufio，有缓冲IO读写包。\",\"path，处理斜杠分隔路径的包，例如url之类的。\",\"path/filepath，处理文件路径的包。\",\"math，数学操作包\",\"math/bits，位运算操作包\",\"math/cmplx，复数操作包，也提供了一些三角函数的工具函数。\",\"math/rand，伪随机包\",\"math/big，大数高精度计算包\",\"container/heap，最小堆的实现\",\"container/list，双线链表的实现\",\"container/ring，环的实现\",\"archive/zip，zip压缩归档的包\",\"archive/tar，tar归档文件的包\",\"compress，压缩算法实现的包，比如gzip，flate。\",\"database/sql，与数据库进行交互的包\",\"encoding，处理编码的包，其下有很多子包，比如json，xml之类的，还有base64这种。\",\"crypto，处理加密的包，其下有很多子包，比如sha1，rsa等\",\"go/ast，go源代码抽象语法树映射的包\",\"go/parser ，将go源代码解析成抽象语法树的包\",\"go/importer，提供了对导入器的访问\",\"go/format，go语言格式化包\",\"areana，提供可手动分配和释放内存的功能，处于实验阶段\",\"runtime，运行时操作包，go中有许多操作都是这个包实现的。\"]},\"617\":{\"h\":\"encode\",\"t\":[\"在当前互联网时代中，最常用的独立于语言的数据格式有xml， Yaml，json，protobuf，Go 同样的也支持这些数据格式的相关的操作，以下为对比表格。\",\"名称\",\"XML\",\"YAML\",\"JSON\",\"Protocol Buffers\",\"数据结构\",\"复杂\",\"较简单\",\"简单\",\"较复杂\",\"保存方式\",\"文本\",\"文本\",\"文本\",\"二进制\",\"保存大小\",\"大\",\"中\",\"中\",\"小\",\"解析效率\",\"慢\",\"中\",\"中\",\"快\",\"语言支持\",\"非常多\",\"多\",\"很多\",\"较多\",\"开发难度\",\"繁琐\",\"较简单\",\"简单\",\"简单\",\"学习成本\",\"低\",\"低\",\"低\",\"低\",\"适用范围\",\"数据交换\",\"配置文件\",\"数据交换\",\"数据交换\",\"提示\",\"在 go 中，如果想要对结构体进行序列化与反序列化，字段必须是对外暴露的，即首字母大写。\",\"另外，TOML 也逐渐开始流行，语法上像是.ini的改进，感兴趣可以前往TOML：Tom 的（语义）明显、（配置）最小化的语言了解一下。\"]},\"618\":{\"h\":\"XML\",\"t\":[\"xml又名 eXtensible Markup Language，是用于存储数据的一种格式，起源于 20 世纪 60 年代，是以上几种数据格式中最为古老的一种。它的用途十分广泛，可用于网络传输，数据交换，配置文件，数据存储等等。但随着时代的更替，逐渐正在被新的标记语言替代。\",\"首先定义结构体\",\"type Person struct { UserId string `xml:\\\"id\\\"` Username string `xml:\\\"name\\\"` Age int `xml:\\\"age\\\"` Address string `xml:\\\"address\\\"` }\",\"func Marshal(v any) ([]byte, error) //xml序列化 func MarshalIndent(v any, prefix, indent string) ([]byte, error) //格式化 func Unmarshal(data []byte, v any) error //反序列化\"]},\"619\":{\"h\":\"序列化\",\"t\":[\"func main() { person := Person{ UserId: \\\"120\\\", Username: \\\"jack\\\", Age: 18, Address: \\\"usa\\\", } bytes, err := xml.MarshalIndent(person, \\\"\\\", \\\"\\\\t\\\") if err != nil { fmt.Println(err) return } fmt.Println(string(bytes)) }\",\"输出\",\"<Person> <id>120</id> <name>jack</name> <age>18</age> <address>usa</address> </Person>\"]},\"620\":{\"h\":\"反序列化\",\"t\":[\"func main() { var person = Person{ UserId: \\\"\\\", Username: \\\"\\\", Age: 0, Address: \\\"\\\", } xmlStr := \\\"<Person> \\\\n <id>120</id> \\\\n <name>jack</name> \\\\n <age>18</age> \\\\n <address>usa</address>\\\\n</Person> \\\" err := xml.Unmarshal([]byte(xmlStr), &person) if err != nil { fmt.Println(err) return } }\",\"输出\",\"{UserId:120 Username:jack Age:18 Address:usa}\",\"不过传统的 xml 解析方式经常需要新建结构体，这会十分的繁琐，现在解析的都是简单的 xml 结构，倘若使用复杂的结构，就会让人十分头疼。所以我们大多数会用一个第三方开源库etree来解析 xml，感兴趣的可以自行了解：Go 比较好用的解析 xml 文件的插件 etree - 掘金 (juejin.cn)。\"]},\"621\":{\"h\":\"YML\",\"t\":[\"YAML 的语法和其他高级语言类似，并且可以简单表达清单、散列表，标量等数据形态。它使用空白符号缩进和大量依赖外观的特色，特别适合用来表达或编辑数据结构、各种配置文件，YML 也在许多项目里以配置文件的形式存在，它的内容结构更加简洁，一目了然。go 官方并没有提供对于 YML 的支持，我们需要使用第三方包。\",\"go get github.com/go-yaml/yaml\",\"主要方法\",\"func Marshal(in interface{}) (out []byte, err error) //序列化 func Unmarshal(in []byte, out interface{}) (err error) //反序列化\",\"先准备结构体\",\"type Config struct { Database string `yaml:\\\"database\\\"` Url string `yaml:\\\"url\\\"` Port int `yaml:\\\"port\\\"` Username string `yaml:\\\"username\\\"` Password string `yaml:\\\"password\\\"` }\",\"配置文件\",\"database: mysql url: 127.0.0.1 port: 3306 username: root password: 123456\"]},\"622\":{\"h\":\"序列化\",\"t\":[\"func main() { config := Config{ Database: \\\"oracle\\\", Url: \\\"localhost\\\", Port: 3326, Username: \\\"root\\\", Password: \\\"123456\\\", } out, err := yaml.Marshal(config) if err != nil { fmt.Println(err) return } fmt.Println(string(out)) }\",\"输出\",\"database: oracle url: localhost port: 3326 username: root password: \\\"123456\\\"\",\"不过由于yml本身有着严格的缩进语法，所以也不存在什么序列化格式化的问题了。\"]},\"623\":{\"h\":\"反序列化\",\"t\":[\"func main() { bytes, err := os.ReadFile(\\\"./src/config.yml\\\") if err != nil { fmt.Println(err) return } var config Config err = yaml.Unmarshal(bytes, &config) if err != nil { fmt.Println(err) return } fmt.Println(config) }\",\"输出\",\"{mysql 127.0.0.1 3306 root 123456}\"]},\"624\":{\"h\":\"JSON\",\"t\":[\"json在Restful风格的接口通信中经常会用到，其相较于xml更轻便的大小，低廉的学习成本使其在web领域称为了主流的数据交换格式。\",\"在 go 中，encoding/json包下提供对应的函数来进行 json 的序列化与反序列化，主要使用的有如下函数。\",\"func Marshal(v any) ([]byte, error) //将go对象序列化为json字符串 func Unmarshal(data []byte, v any) error //将json字符串反序列化为go对象\",\"首先定义结构体\",\"type Person struct { UserId string Username string Age int Address string }\"]},\"625\":{\"h\":\"序列化\",\"t\":[\"func main() { person := Person{ UserId: \\\"120\\\", Username: \\\"jack\\\", Age: 18, Address: \\\"usa\\\", } bytes, err := json.Marshal(person) if err != nil { fmt.Println(err) return } fmt.Println(string(bytes)) }\",\"结果\",\"{ \\\"UserId\\\": \\\"120\\\", \\\"Username\\\": \\\"jack\\\", \\\"Age\\\": 18, \\\"Address\\\": \\\"usa\\\" }\"]},\"626\":{\"h\":\"字段重命名\",\"t\":[\"我们可以通过结构体标签来达到重命名的效果。\",\"type Person struct { UserId string `json:\\\"id\\\"` Username string `json:\\\"name\\\"` Age int `json:\\\"age\\\"` Address string `json:\\\"address\\\"` }\",\"此时输出\",\"{ \\\"id\\\": \\\"1202\\\", \\\"name\\\": \\\"jack\\\", \\\"age\\\": 19, \\\"address\\\": \\\"USA\\\" }\"]},\"627\":{\"h\":\"缩进\",\"t\":[\"序列化时默认是没有任何缩进的，这是为了减少传输过程的空间损耗，但是这并不利于人为观察，在一些情况下我们需要将其序列化成人类能够观察的形式。为此，只需要换一个函数。\",\"func MarshalIndent(v any, prefix, indent string) ([]byte, error)\",\"func main() { person := Person{ UserId: \\\"1202\\\", Username: \\\"jack\\\", Age: 19, Address: \\\"USA\\\", } bytes, err := json.MarshalIndent(person, \\\"\\\", \\\"\\\\t\\\") if err != nil { fmt.Println(err) return } fmt.Println(string(bytes)) }\",\"输出如下\",\"{ \\\"id\\\": \\\"1202\\\", \\\"name\\\": \\\"jack\\\", \\\"age\\\": 19, \\\"address\\\": \\\"USA\\\" }\"]},\"628\":{\"h\":\"反序列化\",\"t\":[\"在反序列化时需要注意，如果结构体有 json 标签的话，则字段名优先以 json 标签为准，否则以结构体属性名为准。\",\"func main() { person := Person{} jsonStr := \\\"{\\\\\\\"id\\\\\\\":\\\\\\\"120\\\\\\\",\\\\\\\"name\\\\\\\":\\\\\\\"jack\\\\\\\",\\\\\\\"age\\\\\\\":18,\\\\\\\"address\\\\\\\":\\\\\\\"usa\\\\\\\"}\\\\n\\\" err := json.Unmarshal([]byte(jsonStr), &person) if err != nil { fmt.Println(err) return } fmt.Printf(\\\"%+v\\\", person) }\",\"输出\",\"{UserId:120 Username:jack Age:18 Address:usa}\"]},\"629\":{\"h\":\"Protocol Buffers\",\"t\":[\"protocol 是谷歌 2008 开源的语言中立，协议中立，可扩展的结构化数据序列化机制。相比于以上三种更加的轻便，而且在解包封包的时候更加的快速，多用于 RPC 领域通信相关，有关Protobuf的讲解可以前往Protobuf。\",\"安装依赖\",\"go get github.com/golang/protobuf/proto\",\"person.proto文件\",\"syntax = \\\"proto3\\\"; option go_package = \\\"./;person\\\"; package proto; enum Gender{ MAIL = 0; FE_MAIL = 1; } message person { string name = 1; int32 age = 2; Gender gender = 3; }\",\"生成文件后\",\"package main import ( p \\\"GoProject/src/proto\\\" \\\"fmt\\\" \\\"github.com/golang/protobuf/proto\\\" ) func main() { person := p.Person{ Name: \\\"wyh\\\", Age: 12, Gender: p.Gender_FE_MAIL, } data, err := proto.Marshal(&person)//序列化 if err != nil { fmt.Println(err) return } temp := &p.Person{} fmt.Println(\\\"proto buffer len: \\\", len(data), \\\"bytes:\\\", data) err = proto.Unmarshal(data, temp)//反序列化 if err != nil { fmt.Println(err) return } fmt.Println(temp) }\",\"输出\",\"proto buffer len: 9 bytes: [10 3 119 121 104 16 12 24 1] name:\\\"wyh\\\" age:12 gender:FE_MAIL\",\"不过通常我们不会去手动序列化，protoc编译器可以根据我们定义好的proto文件生成对应语言的源代码。\"]},\"630\":{\"h\":\"flag\",\"t\":[\"Go语言内置的Flag包实现了命令行参数的解析，Flag包使得开发命令行工具更加简单。\"]},\"631\":{\"h\":\"导入\",\"t\":[\"import flag\"]},\"632\":{\"h\":\"类型\",\"t\":[\"其支持的类型有:\",\"bool\",\"int\",\"int64\",\"uint\",\"uint64\",\"float\",\"float64\",\"string\",\"duration\"]},\"633\":{\"h\":\"定义\",\"t\":[\"使用flag.Type()来定义，返回值是指针\",\"name := flag.String(\\\"name\\\", \\\"张三\\\", \\\"姓名\\\") age := flag.Int(\\\"age\\\", 15, \\\"年龄\\\") sex := flag.Bool(\\\"sex\\\", true, \\\"性别\\\")\",\"也可以使用flag.TypeVar()来定义\",\"var name string var age int var sex bool flag.StringVar(&name, \\\"name\\\", \\\"张三\\\", \\\"姓名\\\") flag.IntVar(&age, \\\"age\\\", 15, \\\"年龄\\\") flag.BoolVar(&sex, \\\"sex\\\", true, \\\"性别\\\")\"]},\"634\":{\"h\":\"解析\",\"t\":[\"通过调用flag.Parse()来解析参数，支持的命令行参数格式有如下几种:\",\"-flag xxx\",\"--flag xxx\",\"-flag=xxx\",\"--flag=xxx\",\"布尔类型的参数必须使用等号，Flag解析会在第一个非命令行参数之前停止。\"]},\"635\":{\"h\":\"其他\",\"t\":[\"func Args() []string //返回所有非命令参数 func NArg() int //返回非命令行参数的个数 func NFlag() int //返回命令行参数的个数\"]},\"636\":{\"h\":\"示例\",\"t\":[\"var name string var age int var sex bool flag.StringVar(&name, \\\"name\\\", \\\"张三\\\", \\\"姓名\\\") flag.IntVar(&age, \\\"age\\\", 15, \\\"年龄\\\") flag.BoolVar(&sex, \\\"sex\\\", true, \\\"性别\\\") flag.Parse() fmt.Println(name, age, sex)\",\"编译后在命令行启动程序\",\"PS D:\\\\WorkSpace\\\\Code\\\\GoProject\\\\bin> .\\\\go_build_GoProject_src_main.exe 张三 15 true PS D:\\\\WorkSpace\\\\Code\\\\GoProject\\\\bin> .\\\\go_build_GoProject_src_main.exe -h Usage of D:\\\\WorkSpace\\\\Code\\\\GoProject\\\\bin\\\\go_build_GoProject_src_main.exe: -age int 年龄 (default 15) -name string 姓名 (default \\\"张三\\\") -sex 性别 (default true) PS D:\\\\WorkSpace\\\\Code\\\\GoProject\\\\bin> .\\\\go_build_GoProject_src_main.exe -age 15 -name \\\"李四\\\" -sex=false 李四 15 false PS D:\\\\WorkSpace\\\\Code\\\\GoProject\\\\bin>\"]},\"637\":{\"h\":\"http\",\"t\":[\"Go 语言标准库中的net/http包十分的优秀，提供了非常完善的 HTTP 客户端与服务端的实现，仅通过几行代码就可以搭建一个非常简单的 HTTP 服务器。\",\"几乎所有的 go 语言中的 web 框架，都是对已有的 http 包做的封装与修改，因此，十分建议学习其他框架前先行掌握 http 包。\"]},\"638\":{\"h\":\"Get 示例\",\"t\":[\"关于 Http 相关的知识这里不再赘述，想要了解更多的话可以去百度。\",\"func main() { resp, err := http.Get(\\\"https://baidu.com\\\") if err != nil { fmt.Println(err) return } defer resp.Body.Close() content, err := io.ReadAll(resp.Body) fmt.Println(string(content)) }\",\"通过直接调用 Http 包下的函数就可以发起简单的请求，会返回一个指针与错误，调用过后必须将其手动关闭。\"]},\"639\":{\"h\":\"Post 示例\",\"t\":[\"func main() { person := Person{ UserId: \\\"120\\\", Username: \\\"jack\\\", Age: 18, Address: \\\"usa\\\", } json, _ := json.Marshal(person) reader := bytes.NewReader(json) resp, err := http.Post(\\\"https://golang.org\\\", \\\"application/json;charset=utf-8\\\", reader) if err != nil { fmt.Println(err) } defer resp.Body.Close() }\"]},\"640\":{\"h\":\"客户端\",\"t\":[\"一般情况下，我们都不会直接使用上述的方法，而且会自己配置一个客户端来达到更加细致化的需求。这将会用到http.Client{}结构体，可提供的配置项总共有四个:\",\"Transport:配置 Http 客户端数据传输相关的配置项，没有就采用默认的策略\",\"Timeout：请求超时时间配置\",\"Jar：Cookie 相关配置\",\"CheckRedirect：重定向配置\"]},\"641\":{\"h\":\"\",\"t\":[\"func main() { client := &http.Client{} request, _ := http.NewRequest(\\\"GET\\\", \\\"https://golang.org\\\", nil) resp, _ := client.Do(request) defer resp.Body.Close() }\"]},\"642\":{\"h\":\"\",\"t\":[\"func main() { client := &http.Client{} request, _ := http.NewRequest(\\\"GET\\\", \\\"https://golang.org\\\", nil) request.Header.Add(\\\"Authorization\\\",\\\"123456\\\") resp, _ := client.Do(request) defer resp.Body.Close() }\",\"一些详细的配置这里不会做过多的赘述，还请自行了解。\"]},\"643\":{\"h\":\"服务端\",\"t\":[\"对于 go 而言，创建一个 http 服务器只需要一行代码。\",\"第一个参数是监听的地址，第二个参数是处理器，如果为空的话则使用默认的处理器。大多数情况下使用默认的处理器 DefaultServeMux 即可。\",\"http.ListenAndServe(\\\"localhost:8080\\\", nil)\"]},\"644\":{\"h\":\"\",\"t\":[\"当然也可以自定义配置一个服务端\",\"func main() { server := &http.Server{ Addr: \\\":8080\\\", Handler: nil, TLSConfig: nil, ReadTimeout: 0, ReadHeaderTimeout: 0, WriteTimeout: 0, IdleTimeout: 0, MaxHeaderBytes: 0, TLSNextProto: nil, ConnState: nil, ErrorLog: nil, BaseContext: nil, ConnContext: nil, } server.ListenAndServe() }\",\"一些详细的配置请自行了解。\"]},\"645\":{\"h\":\"\",\"t\":[\"首先需要首先自定义一个结构体实现Handler接口中的ServeHTTP(ResponseWriter, *Request)方法，再调用http.handle()函数即可\",\"func main() { http.Handle(\\\"/index\\\", &MyHandler{}) http.ListenAndServe(\\\":8080\\\", nil) } type MyHandler struct { } func (h *MyHandler) ServeHTTP(writer http.ResponseWriter, request *http.Request) { fmt.Println(\\\"my implement\\\") }\",\"但是每一次都要自定义一个结构体将会十分的繁琐，也可以直接http.handlerFunc函数，我们只需要写处理函数即可，从而不用创建结构体。其内部是使用了适配器类型HandlerFunc,HandlerFunc 类型是一个适配器，允许将普通函数用作 HTTP 的处理器。如果 f 是具有适当签名的函数，HandlerFunc(f)是调用 f 的 Handler。\",\"func main() { http.HandleFunc(\\\"/index\\\", func(responseWriter http.ResponseWriter, request *http.Request) { fmt.Println(responseWriter, \\\"index\\\") }) http.ListenAndServe(\\\":8080\\\", nil) }\",\"ServerMux是核心结构体，实现了基本的方法，DefaultServeMux是的默认实例。\"]},\"646\":{\"h\":\"\",\"t\":[\"http 包提供了开箱即用的反向代理功能\",\"func main() { http.HandleFunc(\\\"/forward\\\", func(writer http.ResponseWriter, request *http.Request) { director := func(request *http.Request) { request.URL.Scheme = \\\"https\\\" request.URL.Host = \\\"golang.org\\\" request.URL.Path = \\\"index\\\" } proxy := httputil.ReverseProxy{Director: director} proxy.ServeHTTP(writer, request) }) http.ListenAndServe(\\\":8080\\\", nil) }\",\"上述代码会将所有请求转发到https://golang.org/index。\"]},\"647\":{\"h\":\"log\",\"t\":[\"Go 语言标准库 log 包实现了简单的日志。\",\"func main() { log.Println(\\\"日志\\\") log.Panicln(\\\"panic日志\\\") log.Fatalln(\\\"错误日志\\\") }\",\"Fatal 会在写入日志信息后调用os.exit(1)，panic 则会抛出panic\"]},\"648\":{\"h\":\"前缀\",\"t\":[\"func (l *Logger) Prefix() string //获取前缀 func (l *Logger) SetPrefix(prefix string) //设置前缀\",\"例子\",\"func main() { log.SetPrefix(\\\"[main]\\\") log.Println(\\\"日志\\\") log.Panicln(\\\"panic日志\\\") }\"]},\"649\":{\"h\":\"Flag\",\"t\":[\"方法\",\"func (l *Logger) Flags() int //访问 func (l *Logger) SetFlags(flag int) //设置\",\"常量\",\"const ( Ldate = 1 << iota // 日期 Ltime // 时间 Lmicroseconds // 微秒 Llongfile // 完成文件名称 Lshortfile // 短文件名称 LUTC // 时区 Lmsgprefix // 前缀 LstdFlags = Ldate | Ltime // 初始值 )\",\"例子\",\"func main() { log.SetFlags(log.Lshortfile | log.Lmicroseconds | log.Lmsgprefix | log.Ldate | log.Ltime) log.Println(\\\"日志\\\") log.Panicln(\\\"panic日志\\\") }\",\"当然也可以使用log.SetOutput(w io.Writer)来设置日志的输出路径，也可以通过New方法创建自己的实例。\",\"func New(out io.Writer, prefix string, flag int) *Logger\",\"总而言之，标准库的log包提供的功能并不够完善，我们通常会使用更加完善的第三方日志包，例如zap等等。\"]},\"650\":{\"h\":\"math\",\"t\":[\"math是 Go 中的基本数学操作库，也是必须要熟练掌握和使用的库。\"]},\"651\":{\"h\":\"整数常量\",\"t\":[\"const ( intSize = 32 << (^uint(0) >> 63) // 32 or 64 MaxInt = 1<<(intSize-1) - 1 MinInt = -1 << (intSize - 1) MaxInt8 = 1<<7 - 1 MinInt8 = -1 << 7 MaxInt16 = 1<<15 - 1 MinInt16 = -1 << 15 MaxInt32 = 1<<31 - 1 MinInt32 = -1 << 31 MaxInt64 = 1<<63 - 1 MinInt64 = -1 << 63 MaxUint = 1<<intSize - 1 MaxUint8 = 1<<8 - 1 MaxUint16 = 1<<16 - 1 MaxUint32 = 1<<32 - 1 MaxUint64 = 1<<64 - 1 )\"]},\"652\":{\"h\":\"浮点常量\",\"t\":[\"const ( MaxFloat32 = 0x1p127 * (1 + (1 - 0x1p-23)) // 3.40282346638528859811704183484516925440e+38 SmallestNonzeroFloat32 = 0x1p-126 * 0x1p-23 // 1.401298464324817070923729583289916131280e-45 MaxFloat64 = 0x1p1023 * (1 + (1 - 0x1p-52)) // 1.79769313486231570814527423731704356798070e+308 SmallestNonzeroFloat64 = 0x1p-1022 * 0x1p-52 // 4.9406564584124654417656879286822137236505980e-324 )\"]},\"653\":{\"h\":\"数学常量\",\"t\":[\"const ( E = 2.71828182845904523536028747135266249775724709369995957496696763 // https://oeis.org/A001113 Pi = 3.14159265358979323846264338327950288419716939937510582097494459 // https://oeis.org/A000796 Phi = 1.61803398874989484820458683436563811772030917980576286213544862 // https://oeis.org/A001622 Sqrt2 = 1.41421356237309504880168872420969807856967187537694807317667974 // https://oeis.org/A002193 SqrtE = 1.64872127070012814684865078781416357165377610071014801157507931 // https://oeis.org/A019774 SqrtPi = 1.77245385090551602729816748334114518279754945612238712821380779 // https://oeis.org/A002161 SqrtPhi = 1.27201964951406896425242246173749149171560804184009624861664038 // https://oeis.org/A139339 Ln2 = 0.693147180559945309417232121458176568075500134360255254120680009 // https://oeis.org/A002162 Log2E = 1 / Ln2 Ln10 = 2.30258509299404568401799145468436420760110148862877297603332790 // https://oeis.org/A002392 Log10E = 1 / Ln10 )\"]},\"654\":{\"h\":\"最大值\",\"t\":[\"func TestMax(t *testing.T) { fmt.Println(math.Max(1.0, 2.0)) }\",\"=== RUN TestMax 2 --- PASS: TestMax (0.00s) PASS\"]},\"655\":{\"h\":\"最小值\",\"t\":[\"func TestMin(t *testing.T) { fmt.Println(math.Min(1.0, 2.0)) }\",\"=== RUN TestMin 1 --- PASS: TestMin (0.00s) PASS\"]},\"656\":{\"h\":\"绝对值\",\"t\":[\"func TestAbs(t *testing.T) { fmt.Println(math.Abs(-1)) }\",\"=== RUN TestAbs 1 --- PASS: TestAbs (0.00s) PASS\"]},\"657\":{\"h\":\"余数\",\"t\":[\"func TestMod(t *testing.T) { fmt.Println(math.Mod(1, 10)) fmt.Println(math.Mod(12, 10)) }\",\"=== RUN TestMod 1 2 --- PASS: TestMod (0.00s) PASS\"]},\"658\":{\"h\":\"Nan 检测\",\"t\":[\"func TestName(t *testing.T) { fmt.Println(math.IsNaN(math.NaN())) }\",\"=== RUN TestFloor 2 --- PASS: TestFloor (0.00s) PASS\"]},\"659\":{\"h\":\"Inf 检测\",\"t\":[\"func TestInf(t *testing.T) { fmt.Println(math.IsInf(1.0, 1)) fmt.Println(math.IsInf(math.Inf(-1), -1)) }\",\"=== RUN TestInf false true --- PASS: TestInf (0.00s) PASS\"]},\"660\":{\"h\":\"取整\",\"t\":[\"func TestTrunc(t *testing.T) { fmt.Println(math.Trunc(1.26)) fmt.Println(math.Trunc(2.3333)) }\",\"=== RUN TestTrunc 1 2 --- PASS: TestTrunc (0.00s) PASS\"]},\"661\":{\"h\":\"向下取整\",\"t\":[\"func TestFloor(t *testing.T) { fmt.Println(math.Floor(2.5)) }\",\"=== RUN TestFloor 2 --- PASS: TestFloor (0.00s) PASS\"]},\"662\":{\"h\":\"向上取整\",\"t\":[\"func TestCeil(t *testing.T) { fmt.Println(math.Ceil(2.5)) }\",\"=== RUN TestCeil 3 --- PASS: TestCeil (0.00s) PASS\"]},\"663\":{\"h\":\"四舍五入\",\"t\":[\"func TestRound(t *testing.T) { fmt.Println(math.Round(1.2389)) fmt.Println(math.Round(-5.2389)) }\",\"=== RUN TestRound 1 -5 --- PASS: TestRound (0.00s) PASS\"]},\"664\":{\"h\":\"求对数\",\"t\":[\"func TestLog(t *testing.T) { fmt.Println(math.Log(100) / math.Log(10)) fmt.Println(math.Log(1) / math.Log(2)) }\",\"=== RUN TestLog 2 0 --- PASS: TestLog (0.00s) PASS\"]},\"665\":{\"h\":\"E 的指数\",\"t\":[\"func TestEx(t *testing.T) { fmt.Println(math.Exp(2)) }\",\"=== RUN TestEx 7.38905609893065 --- PASS: TestEx (0.00s) PASS\"]},\"666\":{\"h\":\"幂\",\"t\":[\"func TestPow(t *testing.T) { fmt.Println(math.Pow(2, 3)) fmt.Println(math.Pow(3, 3)) }\",\"=== RUN TestPow 8 27 --- PASS: TestPow (0.00s) PASS\"]},\"667\":{\"h\":\"平方根\",\"t\":[\"func TestSqrt(t *testing.T) { fmt.Println(math.Sqrt(4)) }\",\"=== RUN TestSqrt 2 --- PASS: TestSqrt (0.00s) PASS\"]},\"668\":{\"h\":\"立方根\",\"t\":[\"func TestCube(t *testing.T) { fmt.Println(math.Cbrt(8)) fmt.Println(math.Cbrt(27)) }\",\"=== RUN TestCube 2 3 --- PASS: TestCube (0.00s) PASS\"]},\"669\":{\"h\":\"开 N 方\",\"t\":[\"func TestN(t *testing.T) { fmt.Println(math.Round(math.Pow(8, 1.0/3))) fmt.Println(math.Round(math.Pow(100, 1.0/2))) }\",\"=== RUN TestN 2 10 --- PASS: TestN (0.00s) PASS\"]},\"670\":{\"h\":\"Sin\",\"t\":[\"func TestSin(t *testing.T) { fmt.Println(math.Sin(0)) fmt.Println(math.Sin(20)) }\",\"=== RUN TestSin 0 0.9129452507276277 --- PASS: TestSin (0.00s) PASS\"]},\"671\":{\"h\":\"Cos\",\"t\":[\"func TestCos(t *testing.T) { fmt.Println(math.Cos(0)) fmt.Println(math.Cos(20)) }\",\"=== RUN TestCos 1 0.40808206181339196 --- PASS: TestCos (0.00s) PASS\"]},\"672\":{\"h\":\"Tan\",\"t\":[\"func TestTan(t *testing.T) { fmt.Println(math.Tan(0)) fmt.Println(math.Tan(20)) }\",\"=== RUN TestTan 0 2.2371609442247427 --- PASS: TestTan (0.00s) PASS\",\"提示\",\"math包下远不止以上函数，不过已经足够满足日常使用，如需深究，可以自行阅读源码。\"]},\"673\":{\"h\":\"net\",\"t\":[\"Go 语言的net标准库是一个非常强大的库，它提供了处理网络通信、IP 地址、DNS 解析、TCP/UDP 协议、HTTP 协议等常见任务的功能。由于 Go 语言本身的并发特性，得益于此，Go 在处理网络 IO 的时候非常的简洁高效。\"]},\"674\":{\"h\":\"地址解析\",\"t\":[\"Go 提供了四个函数来解析网络地址，下面逐一讲解。\"]},\"675\":{\"h\":\"MAC 地址\",\"t\":[\"签名\",\"func ParseMAC(s string) (hw HardwareAddr, err error)\",\"示例\",\"package main import ( \\\"fmt\\\" \\\"net\\\" ) func main() { hw, err := net.ParseMAC(\\\"00:1A:2B:3C:4D:5E\\\") if err != nil { panic(err) } fmt.Println(hw) }\"]},\"676\":{\"h\":\"CIDR\",\"t\":[\"签名\",\"func ParseCIDR(s string) (IP, *IPNet, error)\",\"示例\",\"package main import ( \\\"fmt\\\" \\\"log\\\" \\\"net\\\" ) func main() { ipv4Addr, ipv4Net, err := net.ParseCIDR(\\\"192.0.2.1/24\\\") if err != nil { log.Fatal(err) } fmt.Println(ipv4Addr) fmt.Println(ipv4Net) }\"]},\"677\":{\"h\":\"IP 地址\",\"t\":[\"IP 地址支持解析 ipv4，ipv6，函数签名如下\",\"func ResolveIPAddr(network, address string) (*IPAddr, error)\",\"使用示例如下\",\"package main import ( \\\"fmt\\\" \\\"net\\\" ) func main() { ipv4Addr, err := net.ResolveIPAddr(\\\"ip4\\\", \\\"192.168.2.1\\\") if err != nil { panic(err) } fmt.Println(ipv4Addr) ipv6Addr, err := net.ResolveIPAddr(\\\"ip6\\\", \\\"2001:0db8:85a3:0000:0000:8a2e:0370:7334\\\") if err != nil { panic(err) } fmt.Println(ipv6Addr) }\"]},\"678\":{\"h\":\"TCP 地址\",\"t\":[\"TCP 地址支持 tcp4，tcp6，签名如下\",\"func ResolveTCPAddr(network, address string) (*TCPAddr, error)\",\"使用示例如下\",\"package main import ( \\\"fmt\\\" \\\"net\\\" ) func main() { tcp4Addr, err := net.ResolveTCPAddr(\\\"tcp4\\\", \\\"0.0.0.0:2020\\\") if err != nil { panic(err) } fmt.Println(tcp4Addr) tcp6Addr, err := net.ResolveTCPAddr(\\\"tcp6\\\", \\\"[::1]:8080\\\") if err != nil { panic(err) } fmt.Println(tcp6Addr) }\"]},\"679\":{\"h\":\"UDP 地址\",\"t\":[\"UDP 地址支持 udp4，udp6，签名如下\",\"func ResolveUDPAddr(network, address string) (*UDPAddr, error)\",\"使用示例如下\",\"package main import ( \\\"fmt\\\" \\\"net\\\" ) func main() { udp4Addr, err := net.ResolveUDPAddr(\\\"udp4\\\", \\\"0.0.0.0:2020\\\") if err != nil { panic(err) } fmt.Println(udp4Addr) udp6Addr, err := net.ResolveUDPAddr(\\\"udp6\\\", \\\"[::1]:8080\\\") if err != nil { panic(err) } fmt.Println(udp6Addr) }\"]},\"680\":{\"h\":\"Unix 地址\",\"t\":[\"Unix 地址支持 unix，unixgram，unixpacket，签名如下\",\"func ResolveUnixAddr(network, address string) (*UnixAddr, error)\",\"使用示例如下\",\"package main import ( \\\"fmt\\\" \\\"net\\\" ) func main() { unixAddr, err := net.ResolveUnixAddr(\\\"unix\\\", \\\"/tmp/mysocket\\\") if err != nil { panic(err) } fmt.Println(unixAddr) }\"]},\"681\":{\"h\":\"DNS\",\"t\":[\"Go 还提供了很多函数用于 DNS 查询，下面一个例子是解析域名的 IP 地址\",\"package main import ( \\\"fmt\\\" \\\"net\\\" ) func main() { addrs, err := net.LookupHost(\\\"github.com\\\") if err != nil { panic(err) } fmt.Println(addrs) }\",\"查询记录值\",\"package main import ( \\\"fmt\\\" \\\"net\\\" ) func main() { mxs, err := net.LookupMX(\\\"github.com\\\") if err != nil { panic(err) } fmt.Println(mxs) }\"]},\"682\":{\"h\":\"网络编程\",\"t\":[\"tcp 编程的逻辑十分简单，对于客户端而言就是\",\"建立连接\",\"发送数据或读取数据\",\"退出\",\"对于服务端而言就是\",\"监听地址\",\"获取连接\",\"新建一个协程去处理该连接\",\"下面是一个简单的例子，客户端代码\",\"package main import ( \\\"net\\\" ) func main() { // 建立连接 conn, err := net.Dial(\\\"tcp\\\", \\\"0.0.0.0:1234\\\") if err != nil { panic(err) } defer conn.Close() // 发送数据 for i := range 10 { _, err := conn.Write([]byte{'a' + byte(i)}) if err != nil { panic(err) } } }\",\"服务端代码\",\"package main import ( \\\"errors\\\" \\\"fmt\\\" \\\"io\\\" \\\"net\\\" \\\"sync\\\" ) func main() { // 监听地址 listener, err := net.Listen(\\\"tcp\\\", \\\"0.0.0.0:1234\\\") if err != nil { panic(err) } defer listener.Close() var wg sync.WaitGroup for { // 阻塞等待下一个连接建立 conn, err := listener.Accept() if err != nil { panic(err) } // 开启一个新的协程去异步处理该连接 wg.Add(1) go func() { defer wg.Done() buf := make([]byte, 4096) for { // 从连接中读取数据 n, err := conn.Read(buf) if errors.Is(err, io.EOF) { break } else if err != nil { panic(err) } data := string(buf[:n]) fmt.Println(data) } }() } wg.Wait() }\",\"客户端发送数据，服务端接收数据，这个例子非常的简单，服务端建立新连接时，只需开启一个新的协程就可以去处理，不需要阻塞，UDP 大体上的写法也都是类似的。\"]},\"683\":{\"h\":\"sort\",\"t\":[\"提示\",\"如果你是 1.21 版本以上的开发者，我建议使用slices标准库来进行排序，它支持泛型，API 设计更加合理。\",\"在 go 中的sort包下提供了官方实现的排序方法，大部分可以直接开箱即用。倘若想要对结构体进行排序的话必须实现sort.Interface下的三个方法Len()swap()Less()。由于官方已经帮我们实现了Float64SliceStringSliceIntSlice三个类型，所以这三个类型可以不用我们自己实现直接使用即可。\",\"type Interface interface { // 长度方法 Len() int // 比较方法 Less(i, j int) bool // 交换方法 Swap(i, j int) }\"]},\"684\":{\"h\":\"整型排序\",\"t\":[\"func main() { ints := []int{1, 2, 3, 111, 5, 99, 23, 5, 66} sort.Ints(ints) }\"]},\"685\":{\"h\":\"浮点排序\",\"t\":[\"func main() { floats := []float64{1.0, 2.5, 3.8, 1.11, 5.5, 99.99999, 23.9999, 5.66, 66} sort.Float64s(floats) fmt.Println(floats) }\"]},\"686\":{\"h\":\"字符串排序\",\"t\":[\"func main() { strings := []string{\\\"helloworld\\\", \\\"aaa\\\", \\\"bbb\\\", \\\"ccc\\\"} sort.Strings(strings) }\"]},\"687\":{\"h\":\"逆向排序\",\"t\":[\"需要先进行sort.Reverse包装再进行排序\",\"func main() { floats := []float64{1.0, 2.5, 3.8, 1.11, 5.5, 99.99999, 23.9999, 5.66, 66} sort.Sort(sort.Reverse(sort.Float64Slice(floats))) fmt.Println(floats) }\"]},\"688\":{\"h\":\"自定义排序\",\"t\":[\"如果想要自定义结构体排序的话，就必须实现三个方法。\",\"type Person struct { UserId string Username string Age int Address string } type PersonSlice []Person //返回切片的长度 func (p PersonSlice) Len() int { return len(p) } //比较方法 func (p PersonSlice) Less(i, j int) bool { return p[i].Age < p[j].Age } //交换方法 func (p PersonSlice) Swap(i, j int) { p[i], p[j] = p[j], p[i] }\",\"由于是根据年龄比较的，所有结果是根据年龄的大小来排序。\",\"func main() { persons := []Person{{ UserId: \\\"1\\\", Username: \\\"wyh\\\", Age: 18, Address: \\\"us\\\", }, { UserId: \\\"2\\\", Username: \\\"jack\\\", Age: 17, Address: \\\"ch\\\", }, { UserId: \\\"3\\\", Username: \\\"mike\\\", Age: 15, Address: \\\"india\\\", }} sort.Sort(PersonSlice(persons)) fmt.Println(persons) }\"]},\"689\":{\"h\":\"是否有序\",\"t\":[\"判断一个切片是否有序，其内部并不会进行排序操作，而是通过循环调用Less()来判断\",\"func main() { persons := []Person{{ UserId: \\\"1\\\", Username: \\\"wyh\\\", Age: 18, Address: \\\"us\\\", }, { UserId: \\\"2\\\", Username: \\\"jack\\\", Age: 17, Address: \\\"ch\\\", }, { UserId: \\\"3\\\", Username: \\\"mike\\\", Age: 15, Address: \\\"india\\\", }} sort.Sort(PersonSlice(persons)) println(sort.IsSorted(PersonSlice(persons))) }\"]},\"690\":{\"h\":\"strconv\",\"t\":[\"官方文档：strconv package - strconv - Go Packages\",\"包 strconv 实现与基本数据类型的字符串表示形式之间的转换\"]},\"691\":{\"h\":\"导入\",\"t\":[\"import ( \\\"strconv\\\" )\",\"下面将会以例子的形式演示如何使用。\"]},\"692\":{\"h\":\"字符串转整型\",\"t\":[\"func Atoi(s string) (int, error)\",\"s - 要转换的字符串\",\"func TestAoti(t *testing.T) { ints, err := strconv.Atoi(\\\"456789\\\") fmt.Println(ints, err) }\",\"=== RUN TestAoti 456789 <nil> --- PASS: TestAoti (0.00s) PASS\"]},\"693\":{\"h\":\"整型转字符串\",\"t\":[\"func Itoa(i int) string\",\"i - 要转换的整型数字\",\"func TestIota(t *testing.T) { str := strconv.Itoa(114) fmt.Println(str) }\",\"=== RUN TestIota 114 --- PASS: TestIota (0.00s) PASS\"]},\"694\":{\"h\":\"字符串转布尔值\",\"t\":[\"func ParseBool(str string) (bool, error)\",\"s - 要转换的字符串\",\"够转换的字符串如下\",\"\\\"1\\\", \\\"t\\\", \\\"T\\\", \\\"true\\\", \\\"TRUE\\\", \\\"True\\\" // true \\\"0\\\", \\\"f\\\", \\\"F\\\", \\\"false\\\", \\\"FALSE\\\", \\\"False\\\" // false\",\"func TestAtob(t *testing.T) { parseBool, err := strconv.ParseBool(\\\"1\\\") fmt.Println(parseBool, err) b, err := strconv.ParseBool(\\\"true\\\") fmt.Println(b, err) b2, err := strconv.ParseBool(\\\"FALSE\\\") fmt.Println(b2, err) }\",\"=== RUN TestAotb true <nil> true <nil> false <nil> --- PASS: TestAotb (0.00s) PASS\"]},\"695\":{\"h\":\"布尔值转字符串\",\"t\":[\"func FormatBool(b bool) string\",\"b - 布尔值\",\"func TestBota(t *testing.T) { fmt.Println(strconv.FormatBool(true)) fmt.Println(strconv.FormatBool(false)) }\",\"=== RUN TestBota true false --- PASS: TestBota (0.00s) PASS\"]},\"696\":{\"h\":\"转换成 Go 字符串\",\"t\":[\"两者都会将字符串转换为带引号的 Go 字符串，区别在于后者会将非 ASCII 字符转通过\\\\u转义。\",\"func TestQuote(t *testing.T) { fmt.Println(strconv.Quote(\\\"hello 世界\\\")) fmt.Println(strconv.QuoteToASCII(\\\"hello 世界\\\")) }\",\"=== RUN TestQuote \\\"hello 世界\\\" \\\"hello \\\\u4e16\\\\u754c\\\" --- PASS: TestQuote (0.00s) PASS\"]},\"697\":{\"h\":\"字符串转浮点数\",\"t\":[\"func ParseFloat(s string, bitSize int) (float64, error)\",\"s - 要转换的字符串\",\"bitSize - 位数\",\"func TestParseFloat(t *testing.T) { float, err := strconv.ParseFloat(\\\"1.145114\\\", 64) fmt.Println(float, err) float, err = strconv.ParseFloat(\\\"2.3333333333333333333\\\", 64) fmt.Println(float, err) }\",\"=== RUN TestFloat 1.145114 <nil> 2.3333333333333335 <nil> --- PASS: TestFloat (0.00s) PASS\"]},\"698\":{\"h\":\"浮点数转字符串\",\"t\":[\"字符串在转换浮点数时，官方给出了几种格式方法，以便输出不同的样式。\",\"// 'b' (-ddddp±ddd, 二进制指数), // 'e' (-d.dddde±dd, 小写e十进制指数), // 'E' (-d.ddddE±dd, 大写E的十进制指数), // 'f' (-ddd.dddd, 没有指数), // 没有特殊需求一般都用这个 // 'g' (对于大指数采用'e'的格式， 小指数采用'f'的格式), // 'G' (对于大指数采用'e'的格式， 小指数采用'f'的格式)， // 'x' (-0xd.ddddp±ddd, 十六进制分数和二进制指数), // 'X' (-0Xd.ddddP±ddd, 十六进制分数和二进制指数).\",\"转换函数\",\"func FormatFloat(f float64, fmt byte, prec, bitSize int) string\",\"f - 指要转换的浮点数\",\"fmt - 指的是格式化类型\",\"prec - 指的是精度，除了g/G的情况是表示最大有效位数，其他情况都表示的是保留小数到后几位，\",\"bitzise - 指的是位数\",\"当然一般情况都是使用f直接转换小数的格式最多。\",\"func TestFormatFloat(t *testing.T) { f := 1315643.14159261234567891011 fmt.Println(strconv.FormatFloat(f, 'f', 6, 64)) fmt.Println(strconv.FormatFloat(f, 'b', 6, 64)) fmt.Println(strconv.FormatFloat(f, 'e', 6, 64)) fmt.Println(strconv.FormatFloat(f, 'x', 6, 64)) fmt.Println(strconv.FormatFloat(f, 'g', 6, 64)) fmt.Println(strconv.FormatFloat(1.111, 'g', 6, 64)) }\",\"=== RUN TestFormatFloat 1315643.141593 5650644266346967p-32 1.315643e+06 0x1.4133b2p+20 1.31564e+06 1.111 --- PASS: TestFormatFloat (0.00s) PASS\"]},\"699\":{\"h\":\"字符串转复数\",\"t\":[\"func ParseComplex(s string, bitSize int) (complex128, error)\",\"s - 要转换的字符串\",\"bitSize - 位数\",\"func TestParseComplex(t *testing.T) { fmt.Println(strconv.ParseComplex(\\\"1+2i\\\", 128)) fmt.Println(strconv.ParseComplex(\\\"1+2j\\\", 128)) }\",\"=== RUN TestParseComplex (1+2i) <nil> (0+0i) strconv.ParseComplex: parsing \\\"1+2j\\\": invalid syntax --- PASS: TestParseComplex (0.00s) PASS\"]},\"700\":{\"h\":\"复数转字符串\",\"t\":[\"func FormatComplex(c complex128, fmt byte, prec, bitSize int) string\",\"c- 复数\",\"fmt - 格式化类型，参考浮点数格式化类型\",\"prec - 参考浮点数精度\",\"bitsize - 位数\",\"func TestFormatComplex(t *testing.T) { fmt.Println(strconv.FormatComplex(complex(1.1, 12), 'f', 2, 128)) fmt.Println(strconv.FormatComplex(complex(5.6, 2.8), 'b', 2, 128)) fmt.Println(strconv.FormatComplex(complex(18.88999, 89.7), 'g', 2, 128)) }\",\"=== RUN TestFormatComplex (1.10+12.00i) (6305039478318694p-50+6305039478318694p-51i) (19+90i) --- PASS: TestFormatComplex (0.00s) PASS\"]},\"701\":{\"h\":\"字符串追加数据\",\"t\":[\"在其他语言比如 java 中\\\"1\\\"+1的结果是\\\"11\\\"，java 会自动完成类型转换，而在 Go 语言中这样的操作是不被允许的，因为两者的数据类型不同。所以需要用到strconv下的 Append 函数 ，具体的参数与上面对于的数据转换函数一致。\",\"func TestAppend(t *testing.T) { bytes := []byte(\\\"这里有一些数据:\\\") bytes = strconv.AppendInt(bytes, 10, 10) bytes = strconv.AppendFloat(bytes, 1.2222, 'f', 2, 64) bytes = strconv.AppendBool(bytes, false) fmt.Println(string(bytes)) }\",\"=== RUN TestAppend 这里有一些数据:101.22false --- PASS: TestAppend (0.00s) PASS\"]},\"702\":{\"h\":\"strings\",\"t\":[\"包 strings 实现了简单的函数来操作 UTF-8 编码的字符串，简单来说就是操作字符串的工具包。\",\"官方文档：strings package - strings - Go Packages\",\"提示\",\"Go 天然支持 UTF8 字符，所有的字符串操作都是建立在 UTF8 的基础之上。\"]},\"703\":{\"h\":\"导入\",\"t\":[\"import ( \\\"strings\\\" )\",\"下面将以示例的形式讲解常用的函数。\"]},\"704\":{\"h\":\"复制字符串\",\"t\":[\"func Clone(s string) string\",\"将会分配一个新的内存给复制的副本，如果传入一个空字符串，则不会分配内存且返回空字符串。\",\"func TestClone(t *testing.T) { ori := \\\"hello 世界\\\" copys := strings.Clone(ori) fmt.Println(ori, copys) fmt.Println(&ori, &copys) }\",\"=== RUN TestClone hello 世界 hello 世界 0xc00005e5d0 0xc00005e5e0 --- PASS: TestClone (0.00s) PASS\"]},\"705\":{\"h\":\"比较字符串\",\"t\":[\"func Compare(a, b string) int\",\"将 a 与 b 按照字典顺序进行字符串比较，如果 a>b，返回 1，a<b 返回-1，a=b 返回 0。\",\"func TestCompare(t *testing.T) { fmt.Println(strings.Compare(\\\"abc\\\", \\\"abe\\\")) fmt.Println(strings.Compare(\\\"abcd\\\", \\\"abe\\\")) fmt.Println(strings.Compare(\\\"abijk\\\", \\\"abe\\\")) fmt.Println(strings.Compare(\\\"abe\\\", \\\"abe\\\")) }\",\"=== RUN TestCompare -1 -1 1 0 --- PASS: TestCompare (0.00s) PASS\"]},\"706\":{\"h\":\"包含字符串\",\"t\":[\"func Contains(s, substr string) bool\",\"判断一个字符串 s 是不是包含一个子串 substr\",\"func TestContains(t *testing.T) { fmt.Println(strings.Contains(\\\"abcdefg\\\", \\\"a\\\")) fmt.Println(strings.Contains(\\\"abcdefg\\\", \\\"abc\\\")) fmt.Println(strings.Contains(\\\"abcdefg\\\", \\\"ba\\\")) }\",\"=== RUN TestContains true true false --- PASS: TestContains (0.00s) PASS\",\"func ContainsAny(s, chars string) bool\",\"判断字符串 chars 内任意字符的 unicode 码是否在字符串 s 内，翻译一下就是 s 是否包含 chars 内的任意字符串\",\"func TestContainsAny(t *testing.T) { fmt.Println(strings.ContainsAny(\\\"abcedfg\\\", \\\"bac\\\")) fmt.Println(strings.ContainsAny(\\\"abcedfg\\\", \\\"gfdecba\\\")) }\",\"=== RUN TestContainsAny true --- PASS: TestContainsAny (0.00s) PASS\",\"func ContainsRune(s string, r rune) bool\",\"判断字符串 s 内是否包含字符 r\",\"func TestContainsRune(t *testing.T) { fmt.Println(strings.ContainsRune(\\\"abcedf\\\", 'a')) fmt.Println(strings.ContainsRune(\\\"abcedf\\\", 'b')) fmt.Println(strings.ContainsRune(\\\"你好世界\\\", '你')) }\",\"=== RUN TestContainsRune true true true --- PASS: TestContainsRune (0.00s) PASS\"]},\"707\":{\"h\":\"子串出现次数\",\"t\":[\"func Count(s, substr string) int\",\"给出子串 substr 在字符串 s 内的出现次数\",\"func TestCount(t *testing.T) { fmt.Println(strings.Count(\\\"3.1415926\\\", \\\"1\\\")) fmt.Println(strings.Count(\\\"there is a girl\\\", \\\"e\\\")) fmt.Println(strings.Count(\\\"there is a girl\\\", \\\"\\\")) }\",\"=== RUN TestCount 2 2 16 --- PASS: TestCount (0.00s) PASS\"]},\"708\":{\"h\":\"删除指定子串\",\"t\":[\"func Cut(s, sep string) (before, after string, found bool)\",\"删除在 s 内第一次出现的子串 sep，并返回删除后的结果\",\"before - 被删除子串位置前面的字符串\",\"after - 被删除子串位置后面的字符串\",\"found - 是否找到子串\",\"func TestCut(t *testing.T) { show := func(s, sep string) { before, after, found := strings.Cut(s, sep) fmt.Printf(\\\"Cut(%q, %q) = %q, %q, %v\\\\n\\\", s, sep, before, after, found) } show(\\\"Hello world\\\", \\\" \\\") show(\\\"Hello world\\\", \\\"world\\\") show(\\\"Hello world\\\", \\\"Hello\\\") show(\\\"Hello world\\\", \\\"Hello world\\\") }\",\"=== RUN TestCut Cut(\\\"Hello world\\\", \\\" \\\") = \\\"Hello\\\", \\\"world\\\", true Cut(\\\"Hello world\\\", \\\"world\\\") = \\\"Hello \\\", \\\"\\\", true Cut(\\\"Hello world\\\", \\\"Hello\\\") = \\\"\\\", \\\" world\\\", true Cut(\\\"Hello world\\\", \\\"Hello world\\\") = \\\"\\\", \\\"\\\", true --- PASS: TestCut (0.00s) PASS\"]},\"709\":{\"h\":\"忽略大小写相等\",\"t\":[\"func EqualFold(s, t string) bool\",\"返回字符串 s 和 t 在忽略大小写情况下是否相等\",\"func TestEqualFold(t *testing.T) { fmt.Println(strings.EqualFold(\\\"你好\\\", \\\"你好\\\")) fmt.Println(strings.EqualFold(\\\"Hello\\\", \\\"Hello\\\")) fmt.Println(strings.EqualFold(\\\"Hello\\\", \\\"hELLO\\\")) }\",\"=== RUN TestEqualFold true true true --- PASS: TestEqualFold (0.00s) PASS\"]},\"710\":{\"h\":\"分割字符串\",\"t\":[\"func Fields(s string) []string\",\"func FieldsFunc(s string, f func(rune) bool) []string\",\"前者是根据空格来分割字符串，后者是函数 f 的返回值来决定是否分割字符串。\",\"func TestField(t *testing.T) { fmt.Printf(\\\"%q\\\\n\\\", strings.Fields(\\\" a b c d e f g \\\")) fmt.Printf(\\\"%q\\\\n\\\", strings.FieldsFunc(\\\"a,b,c,d,e,f,g\\\", func(r rune) bool { return r == ',' })) }\",\"=== RUN TestField [\\\"a\\\" \\\"b\\\" \\\"c\\\" \\\"d\\\" \\\"e\\\" \\\"f\\\" \\\"g\\\"] [\\\"a\\\" \\\"b\\\" \\\"c\\\" \\\"d\\\" \\\"e\\\" \\\"f\\\" \\\"g\\\"] --- PASS: TestField (0.00s) PASS\"]},\"711\":{\"h\":\"寻找前后缀\",\"t\":[\"func HasPrefix(s, prefix string) bool\",\"func HasSuffix(s, suffix string) bool\",\"前者是寻找前缀，后者是寻找后缀，感兴趣可以去看看这里的源码实现，比较巧妙。\",\"func TestPreSuffix(t *testing.T) { str := \\\"abbc cbba\\\" fmt.Println(strings.HasPrefix(str, \\\"abb\\\")) fmt.Println(strings.HasSuffix(str, \\\"bba\\\")) }\",\"=== RUN TestPreSuffix true true --- PASS: TestPreSuffix (0.00s) PASS\"]},\"712\":{\"h\":\"子串的位置\",\"t\":[\"返回第一次出现的子串的下标\",\"func Index(s, substr string) int\",\"返回第一次出现的子串的下标\",\"func IndexAny(s, chars string) int\",\"返回第一次出现的子串的下标\",\"func IndexRune(s string, r rune) int\",\"示例\",\"func TestIndex(t *testing.T) { fmt.Println(strings.Index(\\\"abcdefg\\\", \\\"bc\\\")) fmt.Println(strings.IndexAny(\\\"abcdefg\\\", \\\"cb\\\")) fmt.Println(strings.IndexRune(\\\"abcdefg\\\", 'g')) }\",\"=== RUN TestIndex 1 1 6 --- PASS: TestIndex (0.00s) PASS\",\"返回最后一次出现的子串的下标\",\"func LastIndex(s, substr string) int\",\"返回最后一次出现的子串任意字符的下标\",\"func LastIndexAny(s, chars string) int\",\"示例\",\"func TestLastIndex(t *testing.T) { fmt.Println(strings.LastIndex(\\\"abcdefga\\\", \\\"a\\\")) fmt.Println(strings.LastIndexAny(\\\"abcdefghisa\\\", \\\"ba\\\")) }\"]},\"713\":{\"h\":\"遍历替换字符串\",\"t\":[\"Map 返回字符串 s 的副本，并根据映射函数修改字符串 s 的所有字符。如果映射返回负值，则从字符串中删除该字符，不进行替换\",\"func Map(mapping func(rune) rune, s string) string\",\"示例\",\"func TestMap(t *testing.T) { fmt.Println(strings.Map(func(r rune) rune { return r - 32 }, \\\"abcdefghijk\\\")) fmt.Println(strings.Map(func(r rune) rune { return r + 32 }, \\\"ABCDEFGHIJK\\\")) fmt.Println(strings.Map(func(r rune) rune { if r < 'F' { return -1 } else { return r } }, \\\"ABCDEFGHIJK\\\")) }\",\"输出\",\"=== RUN TestMap ABCDEFGHIJK abcdefghijk FGHIJK --- PASS: TestMap (0.00s) PASS\"]},\"714\":{\"h\":\"重复复制字符串\",\"t\":[\"根据给定的 Count 复制字符串，如果为负数会导致panic\",\"func Repeat(s string, count int) string\",\"示例\",\"func TestRepeat(t *testing.T) { fmt.Println(strings.Repeat(\\\"a\\\", 10)) fmt.Println(strings.Repeat(\\\"abc\\\", 10)) }\",\"输出\",\"=== RUN TestRepeat aaaaaaaaaa abcabcabcabcabcabcabcabcabcabc --- PASS: TestRepeat (0.00s) PASS\"]},\"715\":{\"h\":\"替换字符串\",\"t\":[\"s 为源字符串，old 指要被替换的部分，new 指 old 的替换部分，n 指的是替换次数，n 小于 0 时表示不限制替换次数。\",\"func Replace(s, old, new string, n int) string\",\"示例\",\"func TestReplace(t *testing.T) { fmt.Println(strings.Replace(\\\"Hello this is golang\\\", \\\"golang\\\", \\\"c++\\\", 1)) fmt.Println(strings.Replace(\\\"Hello this is golang\\\", \\\"o\\\", \\\"c\\\", -1)) fmt.Println(strings.Replace(\\\"Hello this is golang\\\", \\\"o\\\", \\\"c\\\", 1)) }\",\"输出\",\"=== RUN TestReplace Hello this is c++ Hellc this is gclang Hellc this is golang --- PASS: TestReplace (0.00s) PASS\",\"Replace的方便函数，等价于stings.Replace(s,old,new,-1)\",\"func ReplaceAll(s, old, new string) string\",\"示例\",\"func TestReplaceAll(t *testing.T) { fmt.Println(strings.ReplaceAll(\\\"Hello this is golang\\\", \\\"o\\\", \\\"c++\\\")) }\",\"输出\",\"=== RUN TestReplaceAll Hellc++ this is gc++lang --- PASS: TestReplaceAll (0.00s) PASS\"]},\"716\":{\"h\":\"分隔字符串\",\"t\":[\"根据子串 sep 将字符串 s 分隔成一个字符串切片\",\"func Split(s, sep string) []string\",\"根据子串 sep 将字符串 s 分隔成一个字符串切片，其分隔次数由 n 决定\",\"func SplitN(s, sep string, n int) []string\",\"根据子串 sep 将字符串 s 分隔成包含 sep 的字符串元素组成的字符串切片\",\"func SplitAfter(s, sep string) []string\",\"根据子串 sep 将字符串 s 分隔成包含 sep 的字符串元素组成的字符串切片，其分隔次数由 n 决定\",\"func SplitAfterN(s, sep string, n int) []string\",\"示例\",\"func TestSplit(t *testing.T) { fmt.Printf(\\\"%q\\\\n\\\", strings.Split(\\\"this is go language\\\", \\\" \\\")) fmt.Printf(\\\"%q\\\\n\\\", strings.SplitN(\\\"this is go language\\\", \\\" \\\", 2)) fmt.Printf(\\\"%q\\\\n\\\", strings.SplitAfter(\\\"this is go language\\\", \\\" \\\")) fmt.Printf(\\\"%q\\\\n\\\", strings.SplitAfterN(\\\"this is go language\\\", \\\" \\\", 2)) }\",\"输出\",\"=== RUN TestSplit [\\\"this\\\" \\\"is\\\" \\\"go\\\" \\\"language\\\"] [\\\"this\\\" \\\"is go language\\\"] [\\\"this \\\" \\\"is \\\" \\\"go \\\" \\\"language\\\"] [\\\"this \\\" \\\"is go language\\\"] --- PASS: TestSplit (0.00s) PASS\"]},\"717\":{\"h\":\"大小写转换\",\"t\":[\"将英文字符串英文小写字符串\",\"func ToLower(s string) string\",\"根据传入的对应语言的unicode.SpecialCase ，转换成对应语言的小写字符串\",\"func ToLowerSpecial(c unicode.SpecialCase, s string) string\",\"将英文字符串转换成大写字符串\",\"func ToUpper(s string) string\",\"根据传入对应语言的unicode.SpecialCase，转换成对应语言的大写字符串\",\"func ToUpperSpecial(c unicode.SpecialCase, s string) string\",\"示例\",\"func TestLowerAndUpper(t *testing.T) { fmt.Println(strings.ToLower(\\\"My name is jack,Nice to meet you!\\\")) fmt.Println(strings.ToLowerSpecial(unicode.TurkishCase, \\\"Önnek İş\\\")) fmt.Println(strings.ToUpper(\\\"My name is jack,Nice to meet you!\\\")) fmt.Println(strings.ToUpperSpecial(unicode.TurkishCase, \\\"örnek iş\\\")) }\",\"输出\",\"=== RUN TestLowerAndUpper my name is jack,nice to meet you! önnek iş MY NAME IS JACK,NICE TO MEET YOU! ÖRNEK İŞ --- PASS: TestLowerAndUpper (0.00s) PASS\"]},\"718\":{\"h\":\"修剪字符串\",\"t\":[\"修剪字符串两端，将 cutset 任意匹配的子串删除\",\"func Trim(s, cutset string) string\",\"修剪字符串左端，将 cutset 任意匹配的子串删除\",\"func TrimLeft(s, cutset string) string\",\"修剪字符串左端前缀，将 cutset 匹配的子串删除，不匹配就会返回字符串 s\",\"func TrimPrefix(s, suffix string) string\",\"修剪字符串右端，将 cutset 任意匹配的子串删除\",\"func TrimRight(s, cutset string) string\",\"修剪字符串右端后缀，将 cutset 匹配的子串删除，不匹配就会返回字符串 s\",\"func TrimSuffix(s, suffix string) string\",\"示例\",\"func TestTrim(t *testing.T) { fmt.Println(strings.Trim(\\\"!!this is a test statement!!\\\", \\\"!!!\\\")) fmt.Println(strings.TrimLeft(\\\"!!this is a test statement!!\\\", \\\"!!!\\\")) fmt.Println(strings.TrimRight(\\\"!!this is a test statement!!\\\", \\\"!!!\\\")) fmt.Println(strings.TrimPrefix(\\\"!!this is a test statement!!\\\", \\\"!!!\\\")) fmt.Println(strings.TrimSuffix(\\\"!!this is a test statement!!\\\", \\\"!!!\\\")) }\",\"输出\",\"=== RUN TestTrim this is a test statement this is a test statement!! !!this is a test statement !!this is a test statement!! !!this is a test statement!! --- PASS: TestTrim (0.00s) PASS\"]},\"719\":{\"h\":\"字符串 Builder\",\"t\":[\"字符串 Builder 比起直接操作字符串更加节省内存。\",\"type Builder struct { // 内部字段不对外暴露 }\",\"示例\",\"func TestBuilder(t *testing.T) { builder := strings.Builder{} builder.WriteString(\\\"hello\\\") builder.WriteString(\\\" world\\\") fmt.Println(builder.Len()) fmt.Println(builder.String()) }\",\"输出\",\"=== RUN TestBuilder 11 hello world --- PASS: TestBuilder (0.00s) PASS\",\"提示\",\"不要试图将Builder作为值进行传递，例如将strings.Builder作为函数参数传递的时候，程序会panic\",\"strings: illegal use of non-zero Builder copied by value\",\"其内部有如下一段代码\",\"type Builder struct { addr *Builder //自身的地址 buf []byte } func (b *Builder) copyCheck() { if b.addr == nil { b.addr = (*Builder)(noescape(unsafe.Pointer(b))) } else if b.addr != b { panic(\\\"strings: illegal use of non-zero Builder copied by value\\\") } }\",\"当对Builder 进行值拷贝的同时，也拷贝了内部切片的指针，两个Builder在写入字符串的时候都是在对同一个切片进行操作，这也是为什么不允许被值拷贝的原因。\"]},\"720\":{\"h\":\"字符串 Replacer\",\"t\":[\"Replacer 转用于替换字符串\",\"func NewReplacer(oldnew ...string) *Replacer\",\"示例\",\"func TestReplacer(t *testing.T) { r := strings.NewReplacer(\\\"<\\\", \\\"&lt;\\\", \\\">\\\", \\\"&gt;\\\") fmt.Println(r.Replace(\\\"This is <b>HTML</b>!\\\")) }\",\"输出\",\"This is &lt;b&gt;HTML&lt;/b&gt;!\"]},\"721\":{\"h\":\"字符串 Reader\",\"t\":[\"Reader 实现了 io.Reader, io.ReaderAt, io.ByteReader, io.ByteScanner, io.RuneReader, io.RuneScanner, io.Seeker, 和 io.WriterTo interfaces。\",\"func NewReader(s string) *Reader\",\"示例\",\"func TestReader(t *testing.T) { reader := strings.NewReader(\\\"abcdefghijk\\\") buffer := make([]byte, 20, 20) read, err := reader.Read(buffer) if err != nil { log.Panic(err) } fmt.Println(read) fmt.Println(string(buffer)) }\",\"输出\",\"=== RUN TestReader 11 abcdefghijk --- PASS: TestReader (0.00s) PASS\"]},\"722\":{\"h\":\"template\",\"t\":[\"官方文档：template package - text/template - Go Packages\",\"在平时我们经常会使用fmt.Sprintf函数来进行字符串格式化，但它只适用于处理小字符串的情况，而且需要使用格式化动词来指定类型，无法做到参数命名，不支持复杂情况下的处理，而这就是模板引擎所需要解决的问题，比如在直接挂到后端的静态HTML页面就需要用到模板引擎。社区里面有很多优秀的第三方模板引擎库，比如pongo2 ,sprig，jet，不过本文要讲述的主角是 go 内置的模板引擎库text/template，在实际开发中一般用的是html/template，后者基于前者并做了很多关于HTML的安全处理，一般情况使用前者即可，若是涉及到HTML的模板处理建议使用后者会更安全。\"]},\"723\":{\"h\":\"快速开始\",\"t\":[\"下面来看一个关于模板引擎的简单使用示例，如下所示\",\"package main import ( \\\"fmt\\\" \\\"os\\\" \\\"text/template\\\" ) func main() { tmpl := `This is the first template string, {{ .message }}` te, err := template.New(\\\"texTmpl\\\").Parse(tmpl) if err != nil { fmt.Println(err) return } data := map[string]any{ \\\"message\\\": \\\"hello world!\\\", } execErr := te.Execute(os.Stdout, data) if execErr != nil { fmt.Println(err) } }\",\"上述代码的输出为\",\"This is the first template string, hello world!\",\"在案例代码中，tmpl是一个模板字符串，字符串中的{{ .message }}是模板引擎的模板参数。首先通过*Template.Parse方法解析模板字符串，\",\"func (t *Template) Parse(text string) (*Template, error)\",\"解析成功后再通过*Template.Execute方法将data数据应用于模板中，最后输出到传入的Writer中也就是os.Stdout。\",\"func (t *Template) Execute(wr io.Writer, data any) error\",\"在以后模板引擎的使用中，基本上都是这三步：\",\"获取模板\",\"解析模板，\",\"将数据应用到模板中\",\"可见模板引擎的使用其实相当简单，稍微复杂一点的是模板引擎的模板语法，这才是本文主要讲解的内容。\"]},\"724\":{\"h\":\"模板语法\"},\"725\":{\"h\":\"参数\",\"t\":[\"go 通过两对花括号{{ }}，来在模板中表示这是一个模板参数，通过.来表示根对象，根对象就是传入的data。就像是访问一个类型的成员变量一样，通过.符号衔接变量名就可以在模板中访问对应的值，例如\",\"{{ .data }}\",\"前提与之同名的成员变量存在，否则就会报错。对于传入的data，一般是结构体或者map，也可以是基本类型，比如数字字符串，这时.所代表的根对象就是其自身。在花括号内，不一定非得去访问根对象来获取值，也可以是基本类型的字面量，例如\",\"{{ 1 }} {{ 3.14 }} {{ \\\"jack\\\" }}\",\"不管什么类型，最终都会通过fmt.Sprintf(\\\"%s\\\", val)来获取其字符串表现形式，看下面的例子。\",\"func main() { out := os.Stdout tmpl := \\\"data-> {{ . }}\\\\n\\\" datas := []any{ \\\"hello world!\\\", 6379, 3.1415926, []any{1, \\\"2*2\\\", 3.6}, map[string]any{\\\"data\\\": \\\"hello world!\\\"}, struct { Data string }{Data: \\\"hello world!\\\"}, } for _, data := range datas { err := ExecTmpl(out, tmpl, data) if err != nil { panic(err) } } } func ExecTmpl(writer io.Writer, tmpl string, data any) error { parsedTmpl, err := template.New(\\\"template\\\").Parse(tmpl) if err != nil { return err } return parsedTmpl.Execute(writer, data) }\",\"输出如下\",\"data-> hello world! data-> 6379 data-> 3.1415926 data-> [1 2*2 3.6] data-> map[data:hello world!] data-> {hello world!}\",\"可以看到其输出形式跟直接使用fmt.Sprintf一致。对于结构体和 map，可以通过字段名来访问其值，如下所示\",\"func main() { out := os.Stdout tmpl := \\\"data-> {{ .Data }}\\\\n\\\" datas := []any{ map[string]any{\\\"Data\\\": \\\"hello world!\\\"}, struct { Data string }{Data: \\\"hello world!\\\"}, } for _, data := range datas { err := ExecTmpl(out, tmpl, data) if err != nil { panic(err) } } }\",\"输出如下\",\"data-> hello world! data-> hello world!\",\"对于切片和map，虽然并没有提供特定语法来访问某一个索引的值，但可以通过函数调用的方式来实现，如下所示\",\"func main() { out := os.Stdout tmpl := \\\"data-> {{ index . 1}}\\\\n\\\" datas := []any{ []any{\\\"first\\\", \\\"second\\\"}, map[int]any{1: \\\"first\\\"}, } for _, data := range datas { err := ExecTmpl(out, tmpl, data) if err != nil { panic(err) } } }\",\"输出\",\"data-> second data-> first\",\"如果是多维切片，可以通过如下方式来访问对应下标的值，等同于s[i][j][k]\",\"{{ index . i j k }}\",\"对于嵌套的结构体或 map，可以使用.k1.k2.k3这种方式访问，例如\",\"{{ .person.father.name }}\",\"在使用模板参数时，可以在参数前后加上-符号来消除参数前后的空白，看个例子\",\"func main() { out := os.Stdout tmpl := `{{ .x }} {{ - .op - }} {{ .y }}` datas := []any{ map[string]any{\\\"x\\\": \\\"10\\\", \\\"op\\\": \\\">\\\", \\\"y\\\": \\\"2\\\"}, } for _, data := range datas { err := ExecTmpl(out, tmpl, data) if err != nil { panic(err) } } }\",\"正常来说输出结果应该是10 > 2，但由于在op参数前后添加了-符号，所以它前后的空白符都会被消除，所以实际输出为\",\"10>2\",\"需要注意的是，在花括号中，-符号与参数必须相隔一个空格，也就说必须是{{- . -}}这种格式，在例子中之所以会在两边额外加个空格写成{{ - . - }}这种格式纯粹是个人觉得看的顺眼，实际上并没有这个语法限制。\"]},\"726\":{\"h\":\"注释\",\"t\":[\"模板语法支持注释，注释并不会在最终的模板中生成，其语法如下\",\"{{/* this is a comment */}}\",\"注释符号/*和*/必须与花括号相邻，它们之间不能有其它字符，否则将无法正常解析。只有一种情况例外，那就是消除空白符的时候\",\"{{- /* this is a comment */ -}}\"]},\"727\":{\"h\":\"变量\",\"t\":[\"在模板中也可以声明变量，通过$符号来表示这是一个变量，并通过:= 来进行赋值，就跟 go 代码一样，例子如下。\",\"{{ $name := .Name }} {{ $val := index . 1 }} {{ $val := index .dict key }} // 整型赋值 {{ $numer := 1 }} // 浮点数赋值 {{ $float := 1.234}} // 字符串赋值 {{ $name := \\\"jack\\\" }}\",\"在后续使用时，通过$衔接变量名来访问该变量的值，比如\",\"func main() { out := os.Stdout tmpl := `{{ $name := .name }} {{- $name }}` datas := []any{ map[string]any{\\\"name\\\": \\\"jack\\\"}, } for _, data := range datas { err := ExecTmpl(out, tmpl, data) if err != nil { panic(err) } } }\",\"输出\",\"jack\",\"变量必须先声明才能使用，否则将会提示undefined variable，并且也要在作用域内才能使用。\"]},\"728\":{\"h\":\"函数\",\"t\":[\"模板自身的语法其实并不多，大多数功能都是通过函数来实现的，函数调用的格式为函数名后衔接参数列表，以空格为分隔符，如下所示\",\"{{ funcname arg1 arg2 arg3 ... }}\",\"例如之前用到的index函数\",\"{{ index .s 1 }}\",\"用于比较是否相等的函数eq函数\",\"{{ eq 1 2 }}\",\"每一个*Template都有一个FuncsMap，用于记录函数的映射\",\"type FuncMap map[string]any\",\"在创建模板时从text/template.builtins获取默认的函数映射表，下面是内置的所有函数\",\"函数名\",\"作用\",\"示例\",\"and\",\"与运算\",\"{{ and true false }}\",\"or\",\"或运算\",\"{{ or true false }}\",\"not\",\"取反运算\",\"{{ not true }}\",\"eq\",\"是否相等\",\"{{ eq 1 2 }}\",\"ne\",\"是否不相等\",\"{{ ne 1 2 }}\",\"lt\",\"小于\",\"{{ lt 1 2 }}\",\"le\",\"小于等于\",\"{{ le 1 2 }}\",\"gt\",\"大于\",\"{{ gt 1 2 }}\",\"ge\",\"大于等于\",\"{{ ge 1 2 }}\",\"len\",\"返回长度\",\"{{ len .slice }}\",\"index\",\"获取目标指定索引的元素\",\"{{ index . 0 }}\",\"slice\",\"切片，等价于 s[1:2:3]\",\"{{ slice . 1 2 3 }}\",\"html\",\"HTML 转义\",\"{{ html .name }}\",\"js\",\"js 转义\",\"{{ js .name }}\",\"print\",\"fmt.Sprint\",\"{{ print . }}\",\"printf\",\"fmt.Sprintf\",\"{{ printf \\\"%s\\\" .}}\",\"println\",\"fmt.Sprintln\",\"{{ println . }}\",\"urlquery\",\"url query 转义\",\"{{ urlquery .query }}\",\"除了这些之外，还有一个比较特殊的内置函数call，它是用于直接调用通过在Execute时期传入的data中的函数，例如下面的模板\",\"{{ call .string 1024 }}\",\"传入的数据如下\",\"map[string]any{ \\\"string\\\": func(val any) string { return fmt.Sprintf(\\\"%v: 2048\\\", val) }, }\",\"那么在模板中就会生成\",\"1024: 2048\",\"这是自定义函数的途径之一，不过通常建议使用*Template.Funcs方法来添加自定义函数，因为后者可以作用全局，不需要绑定到根对象中。\",\"func (t *Template) Funcs(funcMap FuncMap) *Template\",\"自定义函数的返回值一般有两个，第一个是需要用到的返回值，第二个是error。例如有如下自定义函数\",\"template.FuncMap{ \\\"add\\\": func(val any) (string, error) { return fmt.Sprintf(\\\"%v+1\\\", val), nil }, }\",\"然后在模板中直接使用\",\"{{ add 1024 }}\",\"其结果为\",\"1024 + 1\"]},\"729\":{\"h\":\"管道\",\"t\":[\"这个管道与chan是两个东西，官方文档里面称其为pipeline，任何能够产生数据的操作都称其为pipeline。下面的模板操作都属于管道操作\",\"{{ 1 }} {{ eq 1 2 }} {{ $name }} {{ .name }}\",\"熟悉 linux 的应该都知道管道运算符|，模板中也支持这样的写法。管道操作在模板中经常出现，例如\",\"{{ $name := 1 }}{{ $name | print | printf \\\"%s+1=?\\\" }}\",\"其结果为\",\"1+1=?\",\"在后续的with，if，range中也会频繁用到。\"]},\"730\":{\"h\":\"with\",\"t\":[\"通过with语句可以控制变量和根对象的作用域，格式如下\",\"{{ with pipeline }} text {{ end }}\",\"with会检查管道操作返回的值，如果值为空的话，中间的text模板就不会生成。如果想要处理空的情况，可以使用with else，格式如下\",\"{{ with pipeline }} text1 {{ else }} text2 {{ end }}\",\"如果管道操作返回的值为空，那么就会执行else这块的逻辑。在with语句中声明的变量，其作用域仅限于with语句内，看下面一个例子\",\"{{ $name := \\\"mike\\\" }} {{ with $name := \\\"jack\\\" }} {{- $name -}} {{ end }} {{- $name -}}\",\"它的输出如下，显然这是由于作用域不同，它们是两个不同的变量。\",\"jackmike\",\"通过with语句还可以在作用域内改写根对象，如下\",\"{{ with .name }} name: {{- .second }}-{{ .first -}} {{ end }} age: {{ .age }} address: {{ .address }}\",\"传入如下的数据\",\"map[string]any{ \\\"name\\\": map[string]any{ \\\"first\\\": \\\"jack\\\", \\\"second\\\": \\\"bob\\\", }, \\\"age\\\": 1, \\\"address\\\": \\\"usa\\\", }\",\"它的输出\",\"name:bob-jack age: 1 address: usa\",\"可以看到在with语句内部，根对象.已经变成了.name。\"]},\"731\":{\"h\":\"条件\",\"t\":[\"条件语句的格式如下所示\",\"{{ if pipeline }} text1 {{ else if pipeline }} text2 {{ else }} text3 {{ end }}\",\"就跟写普通的代码一样，非常好理解。下面看几个简单的例子，\",\"{{ if eq .lang \\\"en\\\" }} {{- .content.en -}} {{ else if eq .lang \\\"zh\\\" }} {{- .content.zh -}} {{ else }} {{- .content.fallback -}} {{ end }}\",\"传入的数据\",\"map[string]any{ \\\"lang\\\": \\\"zh\\\", \\\"content\\\": map[string]any{ \\\"en\\\": \\\"hello, world!\\\", \\\"zh\\\": \\\"你好，世界！\\\", \\\"fallback\\\": \\\"hello, world!\\\", }, }\",\"例子中的模板根据传入的语言lang来决定要以何种方式展示内容，输出结果\",\"你好，世界！\"]},\"732\":{\"h\":\"迭代\",\"t\":[\"迭代语句的格式如下，range所支持的pipeline必须是数组，切片，map，以及channel。\",\"{{ range pipeline }} loop body {{ end }}\",\"结合else使用，当长度为 0 时，就会执行else块的内容。\",\"{{ range pipeline }} loop body {{ else }} fallback {{ end }}\",\"除此之外，还支持break，continue这类操作，比如\",\"{{ range pipeline }} {{ if pipeline }} {{ break }} {{ end }} {{ if pipeline }} {{ continue }} {{ end }} loop body {{ end }}\",\"下面看一个迭代的例子。\",\"{{ range $index, $val := . }} {{- if eq $index 0 }} {{- continue -}} {{ end -}} {{- $index}}: {{ $val }} {{ end }}\",\"传入数据\",\"[]any{1, \\\"2\\\", 3.14},\",\"输出\",\"1: 2 2: 3.14\",\"迭代map也是同理。\"]},\"733\":{\"h\":\"嵌套\",\"t\":[\"一个模板中可以定义有多个模板，比如\",\"{{ define \\\"t1\\\" }} t1 {{ end }} {{ define \\\"t2\\\" }} t2 {{ end }}\",\"这些定义的模板在并不会生成在最终的模板中，除非在加载时指定了名称或者通过template语句手动指定。\",\"func (t *Template) ExecuteTemplate(wr io.Writer, name string, data any) error\",\"比如下面的例子\",\"{{ define \\\"t1\\\" }} {{- with .t1 }} {{- .data -}} {{ end -}} {{ end }} {{ define \\\"t2\\\" }} {{- with .t2 }} {{- .data -}} {{ end}} {{ end -}}\",\"传入如下数据\",\"map[string]any{ \\\"t1\\\": map[string]any{\\\"data\\\": \\\"template body 1\\\"}, \\\"t2\\\": map[string]any{\\\"data\\\": \\\"template body 2\\\"}, }\",\"代码\",\"func main() { out := os.Stdout tmpl := `{{ define \\\"t1\\\" }} {{- with .t1 }} {{- .data -}} {{ end -}} {{ end }} {{ define \\\"t2\\\" }} {{- with .t2 }} {{- .data -}} {{ end}} {{ end -}}` datas := []any{ map[string]any{ \\\"t1\\\": map[string]any{\\\"data\\\": \\\"template body 1\\\"}, \\\"t2\\\": map[string]any{\\\"data\\\": \\\"template body 2\\\"}, }, } name := \\\"t1\\\" for _, data := range datas { err := ExecTmpl(out, tmpl, name, data) if err != nil { panic(err) } } } func ExecTmpl(writer io.Writer, tmpl string, name string, data any) error { t := template.New(\\\"template\\\") parsedTmpl, err := t.Parse(tmpl) if err != nil { return err } return parsedTmpl.ExecuteTemplate(writer, name, data) }\",\"输出\",\"template body 1\",\"或者也可以手动指定模板\",\"{{ define \\\"t1\\\" }} {{- with .t1 }} {{- .data -}} {{ end -}} {{ end }} {{ define \\\"t2\\\" }} {{- with .t2 }} {{- .data -}} {{ end}} {{ end -}} {{ template \\\"t2\\\" .}}\",\"那么在解析时是否指定模板名称，t2 都会加载。\"]},\"734\":{\"h\":\"关联\",\"t\":[\"子模板只是在一个模板内部声明多个命名的模板，关联是将外部的多个命名的*Template关联起来。然后通过template语句来引用指定的模板。\",\"{{ tempalte \\\"templateName\\\" pipeline}}\",\"pipeline可以根据自己的需求来指定关联模板的根对象，或者也可以直接传入当前模板的根对象。看下面的一段代码例子\",\"func main() { tmpl1 := `name: {{ .name }}` tmpl2 := `age: {{ .age }}` tmpl3 := `Person Info {{template \\\"t1\\\" .}} {{template \\\"t2\\\" .}}` t1, err := template.New(\\\"t1\\\").Parse(tmpl1) if err != nil { panic(err) } t2, err := template.New(\\\"t2\\\").Parse(tmpl2) if err != nil { panic(err) } t3, err := template.New(\\\"t3\\\").Parse(tmpl3) if err != nil { panic(err) } if err := associate(t3, t1, t2); err != nil { panic(err) } err = t3.Execute(os.Stdout, map[string]any{ \\\"name\\\": \\\"jack\\\", \\\"age\\\": 18, }) if err != nil { panic(err) } } func associate(t *template.Template, ts ...*template.Template) error { for _, tt := range ts { _, err := t.AddParseTree(tt.Name(), tt.Tree) if err != nil { return err } } return nil }\",\"在上述的地面中，t3 关联了 t1，和 t2，使用*Template.AddParseTree方法进行关联\",\"func (t *Template) AddParseTree(name string, tree *parse.Tree) (*Template, error)\",\"最终的模板生成结果为\",\"Person Info name: jack age: 18\"]},\"735\":{\"h\":\"插槽\",\"t\":[\"通过block语句，可以实现类似 vue 插槽的效果，其目的是为了复用某一个模板而用的。看一个使用案例就知道怎么用了，在 t1 模板中定义插槽\",\"Basic Person Info name: {{ .name }} age: {{ .age }} address: {{ .address }} {{ block \\\"slot\\\" . }} default content body {{ end }}\",\"block语句可以插槽中的默认内容，在后续其它模板使用插槽时，会覆盖默认的内容。在 t2 模板中引用 t1 模板，并使用define定义嵌入的内容\",\"{{ template \\\"person.txt\\\" . }} {{ define \\\"slot\\\" }} school: {{ .school }} {{ end }}\",\"将两个模板关联以后，传入如下的数据\",\"map[string]any{ \\\"name\\\": \\\"jack\\\", \\\"age\\\": 18, \\\"address\\\": \\\"usa\\\", \\\"company\\\": \\\"google\\\", \\\"school\\\": \\\"mit\\\", }\",\"最终输出的结果为\",\"Basic Person Info name: jack age: 18 address: usa school: mit\"]},\"736\":{\"h\":\"模板文件\",\"t\":[\"在模板语法的案例中，都是使用的字符串字面量来作为模板，在实际的使用情况中大多数都是将模板放在文件中。\",\"func ParseFS(fsys fs.FS, patterns ...string) (*Template, error)\",\"比如template.ParseFs就是从指定的文件系统中加载匹配pattern的模板。下面的例子以embed.FS作为文件系统，准备三个文件\",\"# person.txt Basic Person Info name: {{ .name }} age: {{ .age }} address: {{ .address }} {{ block \\\"slot\\\" . }} {{ end }} # student.txt {{ template \\\"person.txt\\\" . }} {{ define \\\"slot\\\" }} school: {{ .school }} {{ end }} # employee.txt {{ template \\\"person.txt\\\" . }} {{ define \\\"slot\\\" }} company: {{ .company }} {{ end }}\",\"代码如下\",\"import ( \\\"embed\\\" \\\"os\\\" \\\"text/template\\\" ) //go:embed *.txt var fs embed.FS func main() { data := map[string]any{ \\\"name\\\": \\\"jack\\\", \\\"age\\\": 18, \\\"address\\\": \\\"usa\\\", \\\"company\\\": \\\"google\\\", \\\"school\\\": \\\"mit\\\", } t1, err := template.ParseFS(fs, \\\"person.txt\\\", \\\"student.txt\\\") if err != nil { panic(err) } t1.Execute(os.Stdout, data) t2, err := template.ParseFS(fs, \\\"person.txt\\\", \\\"employee.txt\\\") if err != nil { panic(err) } t2.Execute(os.Stdout, data) }\",\"输出为\",\"Basic Person Info name: jack age: 18 address: usa school: mit Basic Person Info name: jack age: 18 address: usa company: google\",\"这是一个很简单的模板文件使用案例，person.txt作为插槽文件，其它两个复用其内容并嵌入自定义的新内容。也可以使用下面两个函数\",\"func ParseGlob(pattern string) (*Template, error) func ParseFiles(filenames ...string) (*Template, error)\",\"ParseGlob基于通配符匹配，ParseFiles基于文件名，它们都是使用的本地文件系统。如果是用于展示在前端的html文件，建议使用html/template包，它提供的 API 与text/template完全一致，但是针对html，css，js做了安全处理。\"]},\"737\":{\"h\":\"time\",\"t\":[\"time包提供了时间和日历的相关的函数与方法。\",\"time.Now()函数可以获取当前时间\",\"func Now() Time\",\"now := time.Now() fmt.Println(now) //2022-11-17 10:00:18.6983438 +0800 CST m=+0.007095001\",\"其返回的数据类型是Time结构体，其含有非常多的时间操作的方法。\",\"func (t *Time) nsec() int32 //纳秒 func (t *Time) sec() int64 //秒 func (t *Time) unixSec() //返回 Unix时间格式的 秒 func (t *Time) addSec(d int64) //增加秒 func (t *Time) setLoc(loc *Location) //设置地区 func (t *Time) stripMono() //去掉时间的单调时钟读数 func (t Time) After(u Time) //判断一个时间是否在它之后 func (t Time) Before(u Time) bool //判断一个时间是否在它之前 func (t Time) Equal(u Time) bool //判断两个时间是否表示同一瞬间 func (t Time) Sub(u Time) Duration //求两个时间的差值 func (t Time) Add(d Duration) Time //增加一段时间间隔\"]},\"738\":{\"h\":\"时间单位\",\"t\":[\"time包存放了基础的时间单位常量\",\"const ( minDuration Duration = -1 << 63 maxDuration Duration = 1<<63 - 1 ) const ( Nanosecond Duration = 1 Microsecond = 1000 * Nanosecond Millisecond = 1000 * Microsecond Second = 1000 * Millisecond Minute = 60 * Second Hour = 60 * Minute )\",\"它们的类型是time.Duration，最小的单位是纳秒，最大的是小时。\"]},\"739\":{\"h\":\"格式化\",\"t\":[\"时间类型可以格式化输出，不过需要注意的是在 Go 中格式化模板不是常见的 yyyy-mm-dd 这类，而是以 Go 诞生时间为模板。Go 的诞生的时间是 2006 年 1 月 2 日下午 15 点 04 分。\",\"例子\",\"now := time.Now()\",\"24 小时格式化输出\",\"fmt.Println(now.Format(\\\"2006-01-02 15:04:05 Monday Jan\\\")) //2022-11-17 10:44:48 Thursday Nov\",\"只输出日期\",\"fmt.Println(now.Format(\\\"2006-01-02\\\")) //2022-11-17\",\"只输入 12 小时制的时间\",\"fmt.Println(now.Format(\\\"15:04:05 PM\\\")) //10:48:47 AM\"]},\"740\":{\"h\":\"解析时间\",\"t\":[\"通常我们会有一个需求就是，将一个字符串时间按照一定格式转换为 Go 中的时间结构体，接下来我们要做的就是这件事。\",\"func main() { location, err := time.LoadLocation(\\\"Asia/Shanghai\\\") if err != nil { fmt.Println(err) return } inLocation, err := time.ParseInLocation(\\\"2006/01/02\\\", \\\"2012/10/12\\\", location) if err != nil { fmt.Println(err) return } fmt.Println(inLocation.String()) }\",\"最终输出\",\"2012-10-12 00:00:00 +0800 CST\"]},\"741\":{\"h\":\"Timer\",\"t\":[\"Timer 是一个计时器，对外暴露一个 channel，当指定时间到了以后，channel 就会收到消息并关闭。\",\"func NewTimer(d Duration) *Timer\",\"通过time.NewTimer()可以创建一个新的计时器\",\"func main() { timer := time.NewTimer(time.Second) defer timer.Stop() select { case t := <-timer.C: fmt.Println(t) } }\",\"2023-09-25 21:25:03.5696803 +0800 CST m=+1.007908001\",\"在使用完 timer 以后，应及时的关闭。\"]},\"742\":{\"h\":\"Ticker\",\"t\":[\"Ticker 是一个定时器，与 timer 的区别在于，timer 是一次性的，而 Ticker 是定时触发。\",\"func NewTicker(d Duration) *Ticker\",\"通过time.NewTicker()可以创建一个新的定时器\",\"func main() { ticker := time.NewTicker(time.Second) defer ticker.Stop() for i := 0; i < 3; i++ { select { case t := <-ticker.C: fmt.Println(t) } } }\",\"2023-09-25 21:29:20.4429256 +0800 CST m=+1.009508401 2023-09-25 21:29:21.4512075 +0800 CST m=+2.017790301 2023-09-25 21:29:22.4501592 +0800 CST m=+3.016742001\",\"同样的，在使用完 ticker 后，也要及时关闭。\"]},\"743\":{\"h\":\"sleep\",\"t\":[\"time.Sleep()可以使用当前 goroutine 处于挂起状态一定的时间，在这期间 goroutine 将被阻塞，直到恢复运行状态。\",\"func Sleep(d Duration)\",\"func main() { start := time.Now() fmt.Println(start) time.Sleep(time.Second * 2) end := time.Now() fmt.Println(end) }\",\"2023-09-25 21:36:35.7229057 +0800 CST m=+0.001627901 2023-09-25 21:36:37.7347742 +0800 CST m=+2.013496401\",\"上面这段程序就会在输出完start后阻塞两秒，然后再输出end。\"]},\"744\":{\"h\":\"unicode\"},\"745\":{\"h\":\"unsafe\",\"t\":[\"官方文档地址：unsafe package - unsafe - Go Packages\",\"unsafe标准库是官方提供的一个可以进行低级编程的库，该包提供的操作可以直接跳过 Go 的类型系统从而读写内存。该包可能不具有移植性，且官方声称该包不受Go 1 兼容性准则的保护。即便如此，unsafe也还是被大量的项目使用，其中也包括官方提供的标准库。\",\"提示\",\"之所以不可移植的原因是一些操作的结果取决于操作系统实现，不同的系统可能会有不同的结果。\"]},\"746\":{\"h\":\"ArbitraryType\",\"t\":[\"type ArbitraryType int\",\"Arbitrary 可以翻译为任意的，在这里代表的是任意类型，且不等同于any，实际上该类型并不属于unsafe包，出现在这里仅仅只是为了文档目的。\"]},\"747\":{\"h\":\"IntegerType\",\"t\":[\"type IntegerType int\",\"IntegerType代表的是任意整数类型，实际上该类型并不属于unsafe包，出现在这里仅仅只是为了文档目的。\",\"上面这两个类型不需要太在意，它们仅仅只是一个代表而已，在使用unsafe包函数时编辑器甚至会提示你类型不匹配，它们的实际类型就是你传入的具体类型。\"]},\"748\":{\"h\":\"Sizeof\",\"t\":[\"func Sizeof(x ArbitraryType) uintptr\",\"以字节为单位返回变量x的大小，不包括其引用内容的大小，例如：\",\"func main() { var ints byte = 1 fmt.Println(unsafe.Sizeof(ints)) var floats float32 = 1.0 fmt.Println(unsafe.Sizeof(floats)) var complexs complex128 = 1 + 2i fmt.Println(unsafe.Sizeof(complexs)) var slice []int = make([]int, 100) fmt.Println(unsafe.Sizeof(slice)) var mp map[string]int = make(map[string]int, 0) fmt.Println(unsafe.Sizeof(mp)) type person struct { name string age int } fmt.Println(unsafe.Sizeof(person{})) type man struct { name string } fmt.Println(unsafe.Sizeof(man{})) }\",\"1 4 16 24 8 24 16\"]},\"749\":{\"h\":\"Offsetof\",\"t\":[\"func Offsetof(x ArbitraryType) uintptr\",\"该函数用于表示结构体内字段偏移量，所以x必须是一个结构体字段，或者说返回值就是结构体地址起始处到字段地址起始处两者之间的字节数，例如\",\"func main() { type person struct { name string age int } p := person{ name: \\\"aa\\\", age: 11, } fmt.Println(unsafe.Sizeof(p)) fmt.Println(unsafe.Offsetof(p.name)) fmt.Println(unsafe.Sizeof(p.name)) fmt.Println(unsafe.Offsetof(p.age)) fmt.Println(unsafe.Sizeof(p.age)) }\",\"24 0 16 16 8\"]},\"750\":{\"h\":\"Alignof\",\"t\":[\"如果不懂什么是内存对齐，可以前往：Go 语言内存对齐详解 - 掘金 (juejin.cn)\",\"func Alignof(x ArbitraryType) uintptr\",\"对齐大小通常是以字节为单位的计算机字长与Sizeof的最小值，例如在amd64的机器上，字长为 64 位，也就是 8 个字节，例如：\",\"func main() { type person struct { name string age int32 } p := person{ name: \\\"aa\\\", age: 11, } fmt.Println(unsafe.Alignof(p), unsafe.Sizeof(p)) fmt.Println(unsafe.Alignof(p.name), unsafe.Sizeof(p.name)) fmt.Println(unsafe.Alignof(p.age), unsafe.Sizeof(p.age)) }\",\"8 24 8 16 4 4\"]},\"751\":{\"h\":\"Pointer\",\"t\":[\"type Pointer *ArbitraryType\",\"Pointer是一种可以指向任意类型的\\\"指针\\\"，其类型为*ArbitraryType，该类型与uintptr结合使用，才能真正发挥unsafe包的真正威力。在官方文档的描述中，unsafe.Pointer类型可以进行四个特殊操作，分别是：\",\"任何类型的指针都可以转换为unsafe.Pointer\",\"unsafe.Pointer可以转换为任何类型的指针\",\"uintptr可以转换为unsafe.Pointer\",\"unsafe.Pointer可以转换为uintptr\",\"这四个特殊操作构成了整个unsafe包的基石，也正是这四个操作才能写出能够忽略类型系统从而直接读写内存的代码，建议在使用时应当格外注意。\",\"提示\",\"unsafe.Pointer无法解引用，同样的也无法取地址。\",\"(1) 将*T1转换为unsafe.Pointer再转换为*T2\",\"现有类型*T1，*T2，假设T2不大于T1并且两者内存布局等效，就允许将一种T2类型的数据转换为T1。例如：\",\"func main() { fmt.Println(Float64bits(12.3)) fmt.Println(Float64frombits(Float64bits(12.3))) } func Float64bits(f float64) uint64 { return *(*uint64)(unsafe.Pointer(&f)) } func Float64frombits(b uint64) float64 { return *(*float64)(unsafe.Pointer(&b)) }\",\"4623113902481840538 12.3\",\"这两个函数实际是math包下的两个函数，过程中的类型变化如下\",\"float64 -> *float64 -> unsafe.Pointer -> *uint64 -> uint64 -> *uint64 -> unsafe.Pointer -> *float64 -> float64\",\"(2) 将unsafe.Pointer转换为uintptr\",\"将unsafe.Pointer转换为uintptr时，会将前者所指向的地址作为后者的值，uintptr保存的是地址，区别在于，前者在语法上是一个指针，是一个引用，后者仅仅是一个整数值。例如\",\"func main() { num := 1 fmt.Println(unsafe.Pointer(&num)) fmt.Printf(\\\"0x%x\\\", uintptr(unsafe.Pointer(&num))) }\",\"0xc00001c088 0xc00001c088\",\"更大的区别在于垃圾回收的处理，由于unsafe.Pointer是一个引用，在需要的时候并不会被回收掉，而后者仅仅作为一个值，自然不会有这种特殊待遇了，另一个需要注意的点是当指针指向的元素地址移动时，GC 会去更新指针引用的旧地址，但不会去更新uinptr所保存的值。例如下面的代码就可能会出现问题：\",\"func main() { num := 16 address := uintptr(unsafe.Pointer(&num)) np := (*int64)(unsafe.Pointer(address)) fmt.Println(*np) }\",\"当一些情况下，GC 移动变量后，address指向的地址已经无效了，此时再使用该值去创建指针就会引发panic\",\"panic: runtime error: invalid memory address or nil pointer dereference\",\"所以并不建议保存Pointer转换为uintptr后的值。\",\"(3) 通过uintptr转换为unsafe.Pointer\",\"如下方式可以通过uintptr获得一个指针，只要指针是有效的，那么便不会出现例二的无效地址情况。Pointer与类型指针本身是不支持指针运算，但是uintptr只是一个整数值，可以进行数学运算，对uintptr进行数学运算后再转换为Pointer就可以完成指针运算。\",\"p = unsafe.Pointer(uintptr(p) + offset)\",\"这样，可以仅通过一个指针，就能访问到一些类型的内部元素，比如数组和结构体，无论其内部元素是否对外暴露，例如\",\"func main() { type person struct { name string age int32 } p := &person{\\\"jack\\\", 18} pp := unsafe.Pointer(p) fmt.Println(*(*string)(unsafe.Pointer(uintptr(pp) + unsafe.Offsetof(p.name)))) fmt.Println(*(*int32)(unsafe.Pointer(uintptr(pp) + unsafe.Offsetof(p.age)))) s := []int{1, 2, 3, 4, 5, 6, 7, 8, 9} ps := unsafe.Pointer(&s[0]) fmt.Println(*(*int)(unsafe.Pointer(uintptr(ps) + 8))) fmt.Println(*(*int)(unsafe.Pointer(uintptr(ps) + 16))) }\",\"jack 18 2\"]},\"752\":{\"h\":\"Add\",\"t\":[\"func Add(ptr Pointer, len IntegerType) Pointer\",\"Add将返回使用偏移量len更新后的Pointer，等价于Pointer(uintptr(ptr) + uintptr(len))\",\"Pointer(uintptr(ptr) + uintptr(len))\",\"例如：\",\"func main() { s := []int{1, 2, 3, 4, 5, 6, 7, 8, 9} ps := unsafe.Pointer(&s[0]) fmt.Println(*(*int)(unsafe.Add(ps, 8))) fmt.Println(*(*int)(unsafe.Add(ps, 16))) }\",\"2 3\"]},\"753\":{\"h\":\"SliceData\",\"t\":[\"func SliceData(slice []ArbitraryType) *ArbitraryTyp\",\"该函数接收一个切片，返回其底层数组的其实地址。如果不使用SliceData，那么只能通过取其第一个元素的指针来获取底层数组的地址，如下\",\"func main() { nums := []int{1, 2, 3, 4} for p, i := unsafe.Pointer(&nums[0]), 0; i < len(nums); p, i = unsafe.Add(p, unsafe.Sizeof(nums[0])), i+1 { num := *(*int)(p) fmt.Println(num) } }\",\"当然也可以通过reflect.SliceHeader类型来获取，不过在 1.20 版本以后它就已经被废弃了，SliceData就是为了替代它的，使用SliceData的例子如下\",\"func main() { nums := []int{1, 2, 3, 4} for p, i := unsafe.Pointer(unsafe.SliceData(nums)), 0; i < len(nums); p, i = unsafe.Add(p, unsafe.Sizeof(int(0))), i+1 { num := *(*int)(p) fmt.Println(num) } }\"]},\"754\":{\"h\":\"Slice\",\"t\":[\"func Slice(ptr *ArbitraryType, len IntegerType) []ArbitraryType\",\"Slice函数接收一个指针，以及长度偏移量，它会返回该段内存的切片表达形式，过程中不会涉及到内存拷贝，对切片进行修改将会直接影响该地址上的数据，反过来也是如此，它通常和SliceData配合起来使用。\",\"func main() { nums := []int{1, 2, 3, 4} numsRef1 := unsafe.Slice(unsafe.SliceData(nums), len(nums)) numsRef1[0] = 2 fmt.Println(nums) }\",\"[2 2 3 4]\",\"修改numsRef1切片的数据，会导致nums的数据也会发生变化\"]},\"755\":{\"h\":\"StringData\",\"t\":[\"func StringData(str string) *byte\",\"同SliceData函数，只不过因为字符串转字节切片需求比较频繁，所以单独拿出来，使用例子如下\",\"func main() { str := \\\"hello,world!\\\" for ptr, i := unsafe.Pointer(unsafe.StringData(str)), 0; i < len(str); ptr, i = unsafe.Add(ptr, unsafe.Sizeof(byte(0))), i+1 { char := *(*byte)(ptr) fmt.Println(string(char)) } }\",\"由于字符串字面量是存放在进程中的只读段，所以如果你在这里尝试修改字符串底层的数据，程序会直接崩掉报fatal。不过对于存放在堆栈上的字符串变量而言，在运行时修改其底层的数据是完全可行的。\"]},\"756\":{\"h\":\"String\",\"t\":[\"func String(ptr *byte, len IntegerType) string\",\"同Slice函数，接收一个字节类型指针，以及其长度偏移量，返回其字符串表达形式，过程中不涉及内存拷贝。下面是一个字节切片转字符串的例子\",\"func main() { bytes := []byte(\\\"hello world\\\") str := unsafe.String(unsafe.SliceData(bytes), len(bytes)) fmt.Println(str) }\",\"StringData和String在字符串与字节切片的转换过程中不涉及内存拷贝，性能比直接类型转换要好，不过只适用于只读的情况下，如果你打算修改数据，就最好别用这个。\"]},\"757\":{\"h\":\"Casbin\",\"t\":[\"官方仓库：casbin/casbin: An authorization library that supports access control models like ACL, RBAC, ABAC in Golang (github.com)\",\"官方文档：概述 | Casbin\",\"提示\",\"本文只能算是一个Casbin入门文章，如果想要更细致的了解请前往官网进行学习。\"]},\"758\":{\"h\":\"介绍\",\"t\":[\"在一个系统中，后端程序员需要负责对于API权限的管理，而这需要耗费大量的工作，倘若每一个项目都要自己手写一套，将会浪费大量的时间。拥有更多人力物力的大公司会更倾向于自己开发一套权限框架，但是大部分中小公司承受不起这种开发成本，所以市面上开源的权限框架成为了他们的首选。Casbin就是这样一个开源高效的访问控制库，本身是采用Go语言进行开发，同时也支持其他的主流语言。\",\"需要注意的是，Casbin仅仅只是一个访问控制框架，只负责访问控制，访问认证方面的逻辑并不由Casbin负责，它仅仅存储用户与角色之间的映射关系。支持以下访问控制模型：\",\"ACL (Access Control List, 访问控制列表)\",\"具有超级用户的ACL\",\"没有用户的 ACL: 对于没有身份验证或用户登录的系统尤其有用。\",\"没有资源的 ACL: 某些场景可能只针对资源的类型, 而不是单个资源, 诸如 write-article, read-log等权限。 它不控制对特定文章或日志的访问。\",\"RBAC (基于角色的访问控制)\",\"支持资源角色的RBAC: 用户和资源可以同时具有角色 (或组)。\",\"支持域/租户的RBAC: 用户可以为不同的域/租户设置不同的角色集。\",\"ABAC (基于属性的访问控制): 支持利用resource.Owner这种语法糖获取元素的属性。\",\"RESTful: 支持路径, 如 /res/*, /res/: id 和 HTTP 方法, 如 GET, POST, PUT, DELETE。\",\"拒绝优先: 支持允许和拒绝授权, 拒绝优先于允许。\",\"优先级: 策略规则按照先后次序确定优先级，类似于防火墙规则\"]},\"759\":{\"h\":\"工作原理\",\"t\":[\"在Casbin中，访问控制模型被抽象为基于PERM的配置文件，PERM指Policy（策略），Effect（效果），Request（请求），Matcher（匹配），在项目修改授权机制时，只需要简单地修改配置文件即可。一个正常的Model配置文件内容如下：\",\"[request_definition] r = sub, obj, act [policy_definition] p = sub, obj, act [policy_effect] e = some(where (p.eft == allow)) [matchers] m = r.sub == p.sub && r.obj == p.obj && r.act == p.act\",\"这是一个最简单的ACL访问控制模型。\"]},\"760\":{\"h\":\"策略\",\"t\":[\"在配置文件中，策略定义部分为\",\"[policy_definition] p = sub, obj, act\",\"p即指policy，不能用其他字符代替，sub指subject，为策略主体，obj即object，为策略对象，act即action，指的是行为。\",\"p = sub, obj, act\",\"也可以有第四个字段eft，如果省略默认eft为allow。\",\"p=sub, obj, act, eft\",\"这一行定义只是描述了policy该如何书写，并非具体的策略定义。下面是一个具体的policy例子\",\"p, jojo, cake, eat\",\"p代表了这是一条策略规则定义，jojo即策略主体，cake即策略对象，eat即行为，完整意思为主体jojo能对对象cake进行行为eat。具体的策略规则并不会出现在模型文件中，会有专门的policy文件或者数据库来进行策略存储。\"]},\"761\":{\"h\":\"请求\",\"t\":[\"在配置文件中，请求定义部分为\",\"[request_definition] r = sub, obj, act\",\"r即指request，不能用其他字符代替，sub即subject，指请求主体，obj即object，指请求对象，act即action，指的是请求行为。一般情况下请求定义与策略定义字段名都一致。请求部分并不由casbin负责，这由开发者自己决定什么是请求主体，什么是请求对象，casbin只需要负责根据传入的字段来进行访问控制。\"]},\"762\":{\"h\":\"匹配\",\"t\":[\"在配置文件中，匹配定义部分为\",\"[matchers] m = r.sub == p.sub && r.obj == p.obj && r.act == p.act\",\"m指matcher，不能使用其他字符代替，其后就是相应的匹配规则，上述就是一个简单的布尔表达式，其意为传入的请求的所有字段都与策略规则的字段全部相同就匹配，当然它也可以是通配符或者表达力更强的正则表达式。\",\"除此之外，matcher还支持in语法，例如\",\"[matchers] m = r.sub in (\\\"root\\\",\\\"admin\\\")\",\"也可以是\",\"[matchers] m = r.sub.Name in (r.obj.Admins)\",\"e.Enforce(Sub{Name: \\\"alice\\\"}, Obj{Name: \\\"a book\\\", Admins: []interface{}{\\\"alice\\\", \\\"bob\\\"}})\",\"在进行匹配时，Casbin不会进行类型检查，而是将其作为interface进行==检查是否相等。\"]},\"763\":{\"h\":\"效果\",\"t\":[\"效果定义部分对匹配结果再次作出逻辑组合判断，在配置文件中，效果定义部分为\",\"[policy_effect] e = some(where (p.eft == allow))\",\"e即指effect，不能使用其他字符代替。 some 量词判断是否存在一条策略规则满足匹配器。 any 量词则判断是否所有的策略规则都满足匹配器 。\",\"some(where (p.eft == allow))\",\"这一条规则意为在匹配结果中有一条结果allow，那么最终结果就为allow。\",\"e = !some(where (p.eft == deny))\",\"这一条规则意为在匹配结果中只要不存在deny的结果，那么最终结果就为allow。\",\"e = some(where (p.eft == allow)) && !some(where (p.eft == deny))\",\"这一条规则意味在匹配结果中，有一条为allow，且不存在deny的结果，那么最终结果就为allow。\",\"虽然Casbin设计了上述政策效果的语法，但目前的执行只是使用硬编码的政策效果。 他们认为这种灵活性没有多大必要。 目前为止你必须使用内置的 policy effects，不能自定义，内置支持的 policy effects如下。\",\"Policy effect定义\",\"意义\",\"示例\",\"some(where (p.eft == allow))\",\"allow-override\",\"ACL, RBAC, etc.\",\"!some(where (p.eft == deny))\",\"deny-override\",\"拒绝改写\",\"some(where (p.eft == allow)) && !some(where (p.eft == deny))\",\"allow-and-deny\",\"同意与拒绝\",\"priority(p.eft) || deny\",\"priority\",\"优先级\",\"subjectPriority(p.eft)\",\"基于角色的优先级\",\"主题优先级\",\"提示\",\"1.上述四个定义都可以定义多个，语法是type+number，例如r2,p2,e2,m2。\",\"2.模型文件可以有注释，以#符号进行注释。\"]},\"764\":{\"h\":\"示例\",\"t\":[\"下面是一个示例，演示下模型文件的工作过程。首先定义一个简单的ACL模型文件如下\",\"[request_definition] r = sub, obj, act [policy_definition] p = sub, obj, act [policy_effect] e = some(where (p.eft == allow)) [matchers] m = r.sub == p.sub && r.obj == p.obj && r.act == p.act\",\"Policy文件如下\",\"p, alice, data1, read p, bob, data2, write\",\"如何抽象出主体，对象，行为这一过程由业务逻辑决定，这里并不重要所以省略。下面以最简单的方式展示传入的请求，如下\",\"alice, data1, read bob, data1, read alice, data2, write bob, data2, write\",\"policy文件中定义了alice拥有对data1进行read操作的权限，bob拥有对data2进行write操作的权限，那么在传入的请求中\",\"alice, data1, read\",\"表示alice想要对data1进行read操作，\",\"bob, data1, read\",\"表示bob想要对data1进行read操作，余下的同理。那么最终结果为\",\"true false false true\",\"这是一个最简单的ACL示例，Casbin官网中可以进行在线编辑并测试示例，前往Casbin editor进行测试。\"]},\"765\":{\"h\":\"RBAC\",\"t\":[\"RBAC（Role-Based-Access-Controll），基于角色的访问控制，相较于ACL模型会多一个[role definition]，下面是一个简单的RBAC模型\",\"[request_definition] r = sub, obj, act [policy_definition] p = sub, obj, act [role_definition] g = _, _ [policy_effect] e = some(where (p.eft == allow)) [matchers] m = g(r.sub, p.sub) && r.obj == p.obj && r.act == p.act\",\"其中角色的定义如下\",\"[role_definition] g = _, _\",\"g指group，不能用其他字符代替，支持type+number方式创建多个，_是占位符，表示有几个入参。一般而言，在Policy中，g通常为如下格式\",\"g, alice, data2_admin g, mike, data1_admin g, data1_admin data2_admin\",\"alice指的是主体，data2_admin指的是角色，严格来说casbin都将将其看待为字符串，如何理解其含义和使用取决于开发者。\",\"g, alice, data2_admin\",\"表示alice具有角色data2_admin\",\"g, mike, data1_admin\",\"表示mike具有角色data1_admin\",\"g, data1_admin data2_admin\",\"表示角色data1_admin具有角色data2_admin，这是角色之间的继承关系。\"]},\"766\":{\"h\":\"资源角色模型\",\"t\":[\"资源角色模型新增了一个g2，作为资源的角色定义，模型定义如下\",\"[request_definition] r = sub, obj, act [policy_definition] p = sub, obj, act [role_definition] g = _, _ g2 = _, _ [policy_effect] e = some(where (p.eft == allow)) [matchers] m = g(r.sub, p.sub) && g2(r.obj, p.obj) && r.act == p.act\",\"Policy示例定义如下\",\"p, alice, data1, read p, bob, data2, write p, data_group_admin, data_group, write g, alice, data_group_admin g2, data1, data_group g2, data2, data_group\",\"其中g2定义了资源角色组，将资源赋予不同的角色，同时规定了用户角色与资源角色之间的用户关系。\",\"p, data_group_admin, data_group, write\",\"这一条策略便是定义了具有角色data_group_admin的用户能对具有data_group角色的资源进行写操作。\"]},\"767\":{\"h\":\"多租户领域模型\",\"t\":[\"[request_definition] r = sub, dom, obj, act [policy_definition] p = sub, dom, obj, act [role_definition] g = _, _, _ [policy_effect] e = some(where (p.eft == allow)) [matchers] m = g(r.sub, p.sub, r.dom) && r.dom == p.dom && r.obj == p.obj && r.act == p.act\",\"多租户领域模型相较于传统RBAC模型多了dom字段，用于表示主体所属于的领域。Policy示例如下\",\"p, admin, domain1, data1, read p, admin, domain1, data1, write p, admin, domain2, data2, read p, admin, domain2, data2, write g, alice, admin, domain1 g, bob, admin, domain2\",\"例如\",\"p, admin, domain1, data1, read\",\"定义了属于领域domain1的主体admin具有对data1进行read操作的权限\",\"g, alice, admin, domain1\",\"定义了alice属于domain1具有角色admin\"]},\"768\":{\"h\":\"ABAC\"},\"769\":{\"h\":\"JWT\",\"t\":[\"JWT 已经成为了现代服务端通信认证的主流方式之一，具有轻量，无状态的特点。\"]},\"770\":{\"h\":\"简介\",\"t\":[\"JWT 全名 JSON Web Tokens，关于 JWT 的详细介绍可以在[jwt.io](JSON Web Token Introduction - jwt.io)查看，它是一种开放的，安全的，紧凑的，以 JSON 对象为载体在服务双方之间传输信息的方式，它的特点就是安全性高，内容防篡改，消耗低。\"]},\"771\":{\"h\":\"结构\",\"t\":[\"在 RFC 标准中，JWT 由以下三个部分组成：\",\"Header 头部\",\"Payload 载荷\",\"Signature 签名\",\"然后每一个部分用一个点.来分隔，最后组成一个字符串，格式就是header.payload.signature吗，这就是一个 JWT 令牌的标准结构，接下来就一个个讲解每个结构的作用。\",\"提示\",\"需要注意的是base64与base64URL不是同一种编码方式，后者兼容了网页 URL，对其进行了转义。\"]},\"772\":{\"h\":\"头部\",\"t\":[\"头部只是声明一些基本信息，通常由两部分组成，令牌的类型，和签名所使用的加密算法，例如下方：\",\"{ \\\"alg\\\": \\\"HS256\\\", \\\"typ\\\": \\\"JWT\\\" }\",\"以上的信息大致就是，令牌的类型为 JWT，签名部分所使用的加密算法为 HS256，最后再将 JSON 对象通过Base64Url编码成字符串，该字符串就是 JWT 的头部。\"]},\"773\":{\"h\":\"载荷\",\"t\":[\"JWT 的第二部分是载荷部分，主要包含声明(claims)部分，声明部分通常是关于一个实体的数据，比如一个用户。关于声明的类型总共有三种：\",\"reigstered：Registered claims代表着 一些预定义的声明，一些并不强制使用但是仍然推荐使用，例如：iss(issuer 签发者)，exp(expiration time 过期时间) ，aud(audience 受众)。\",\"public：Public claims是可以由使用 JWT 的人随意定义的，最好要避免和其他声明部分冲突。\",\"private claims：这部分的声明同样也是自定义的，通常用于在服务双方共享一些信息。\",\"一个载荷示例如下：\",\"{ \\\"sub\\\": \\\"1234567890\\\", \\\"name\\\": \\\"John Doe\\\", \\\"admin\\\": true }\",\"该 JSON 对象将会通过Base64Url被编码成字符串，从而组成 JWT 的第二部分。\",\"警告\",\"虽然载荷部分也受到保护，也有防篡改，但是这一部分是公共可读的，所以不要把敏感信息存放在 JWT 内。\"]},\"774\":{\"h\":\"签名\",\"t\":[\"在获得了编码的头部和编码的载荷部分后，就可以通过头部所指明的签名算法根据前两个部分的内容再加上密钥进行加密签名，所以一旦 JWT 的内容有任何变化，解密时得到的签名都会不一样，同时如果是使用私钥，也可以对 JWT 的签发者进行验证。\",\"sign = HMACSHA256( base64UrlEncode(header) + \\\".\\\" + base64UrlEncode(payload), secret)\",\"例如下方的例子：\",\"Header { \\\"alg\\\": \\\"HS256\\\", \\\"typ\\\": \\\"JWT\\\" } Payload { \\\"alg\\\": \\\"HS256\\\", \\\"typ\\\": \\\"JWT\\\" } Verify Signature HMACSHA256( base64UrlEncode(header) + \\\".\\\" + base64UrlEncode(payload), your secret )\",\"最后得到的输出就是一个由三个base64Url字符串组成且由.分隔的字符串，大概长下面这样\",\"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9. eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ. cThIIoDvwdueQB468K5xDc5633seEFoqwxjF_xSJyQQ\"]},\"775\":{\"h\":\"工作原理\",\"t\":[\"在身份验证中，当用户使用凭据成功登录时，将返回一个 JSON Web 令牌。由于令牌是凭证，因此必须非常小心地防止出现安全问题。一般来说，令牌的保存时间不应超过所需的时间。然后无论何时用户想要访问受保护的路由和资源，在发起请求时就必须携带上 token，通常都是在请求头中的Authorization header 中的Bearer schema，例如下方：\",\"Authorization: Bearer <token>\",\"服务器在收到 JWT 后，会对其进行有效性验证，例如内容有篡改，token 已过期等等，如果验证通过就可以顺利的访问资源。虽然 JWT 中可以携带一些基本信息，但是依旧建议信息不要太大。\"]},\"776\":{\"h\":\"JWT 库\",\"t\":[\"官方仓库：golang-jwt/jwt: Community maintained clone of https://github.com/dgrijalva/jwt-go\",\"官方文档：jwt package - github.com/golang-jwt/jwt/v4 - Go Packages\",\"这个库支持解析和验证以及 JWT 的生成和签名。目前支持的签名算法有 HMAC SHA, RSA, RSA-PSS, 和 ECDSA，不过也可以添加自己的钩子。\",\"安装\",\"go get -u github.com/golang-jwt/jwt/v4\",\"导入\",\"import \\\"github.com/golang-jwt/jwt/v4\\\"\"]},\"777\":{\"h\":\"选择签名算法\",\"t\":[\"可用的签名算法有好几种，在使用之前应该先了解下它们之间的区别以便更好的去选择签名算法，它们之间最大的不同就是对称加密和非对称加密。\",\"最简单的对称加密算法HSA，让任何[]byte都可以用作有效的密钥，所以计算速度稍微快一点。在生产者和消费者双方都是可以被信任的时候，对称加密算法的效率是最高的。不过由于签名和验证都使用相同的密钥，因此无法轻松的分发用于验证的密钥，毕竟签名的密钥也是同一个，签名泄露了则 JWT 的安全性就毫无意义。\",\"非对称加密签名方法，例如RSA，使用不同的密钥来进行签名和验证 token，这使得生成带有私钥的令牌成为可能，同时也允许任何使用公钥验证的人正常访问。\",\"不同的签名算法所需要的密钥的类型也不同，下面给出一些常见签名算法的类型：\",\"HMAC：对称加密，需要类型[]byte的值用于签名和验证。 (HS256,HS384,HS512)\",\"RSA：非对称加密，需要*rsa.PrivateKey类型的值用于签名，和*rsa.PublicKey类型的值用于验证。(RS256,RS384,RS512)\",\"ECDSA：非对称加密，需要*ecdsa.PrivateKey类型的值用于签名，和*ecdsa.PublicKey类型的值用于验证。(ES256,ES384,ES512)\",\"EdDSA：非对称加密，需要ed25519.PrivateKey类型的值用于签名和ed25519.PublicKey 类型的值用于验证。(Ed25519)\"]},\"778\":{\"h\":\"示例\",\"t\":[\"下面会演示一些示例，有关于 jwt 的创建与签名，已经解析与验证。\",\"type Token struct { Raw string // 原始Token字符串，当开始解析时填充此字段 Method SigningMethod // 签名使用的方法 Header map[string]interface{} // JWT的header部分 Claims Claims // JWT的payload部分 Signature string // JWT的签名部分，当开始解析时填充此字段 Valid bool // JWT是否合法有效 }\",\"Token 结构体代表了一个 JWT Token，字段的使用主要取决于 JWT 是如何被创建/签名或解析/验证的。\",\"type RegisteredClaims struct { // the `iss` (Issuer) claim. See https://datatracker.ietf.org/doc/html/rfc7519#section-4.1.1 Issuer string `json:\\\"iss,omitempty\\\"` // the `sub` (Subject) claim. See https://datatracker.ietf.org/doc/html/rfc7519#section-4.1.2 Subject string `json:\\\"sub,omitempty\\\"` // the `aud` (Audience) claim. See https://datatracker.ietf.org/doc/html/rfc7519#section-4.1.3 Audience ClaimStrings `json:\\\"aud,omitempty\\\"` // the `exp` (Expiration Time) claim. See https://datatracker.ietf.org/doc/html/rfc7519#section-4.1.4 ExpiresAt *NumericDate `json:\\\"exp,omitempty\\\"` // the `nbf` (Not Before) claim. See https://datatracker.ietf.org/doc/html/rfc7519#section-4.1.5 NotBefore *NumericDate `json:\\\"nbf,omitempty\\\"` // the `iat` (Issued At) claim. See https://datatracker.ietf.org/doc/html/rfc7519#section-4.1.6 IssuedAt *NumericDate `json:\\\"iat,omitempty\\\"` // the `jti` (JWT ID) claim. See https://datatracker.ietf.org/doc/html/rfc7519#section-4.1.7 ID string `json:\\\"jti,omitempty\\\"` }\",\"这是库中提供的预定义 Claims，可以适当使用以达到目的需求。\"]},\"779\":{\"h\":\"例 1.HMAC 的创建与签名\",\"t\":[\"func TestHmac(t *testing.T) { // hmac的密钥类型是字节数组 secret := []byte(\\\"my secret\\\") // 使用HS256算法，jwt.MapClaims是payload token := jwt.NewWithClaims(jwt.SigningMethodHS256, jwt.MapClaims{ \\\"id\\\": 123456, \\\"name\\\": \\\"jack\\\", }) fmt.Printf(\\\"%+v\\\\n\\\", *token) // 签名 signedString, err := token.SignedString(secret) fmt.Println(signedString, err) }\",\"输出：\",\"{Raw: Method:0xc000008150 Header:map[alg:HS256 typ:JWT] Claims:map[id:123456 name:jack] Signature: Valid:false} eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9. eyJpZCI6MTIzNDU2LCJuYW1lIjoiamFjayJ9. QxLw9NkFgZW3BluyXIofe4efp1IAy61s8b2fe3Eo86M <nil>\"]},\"780\":{\"h\":\"例 3.使用预定义 Claims\",\"t\":[\"mySigningKey := []byte(\\\"AllYourBase\\\") // 创建Claims claims := &jwt.RegisteredClaims{ ExpiresAt: jwt.NewNumericDate(time.Unix(1516239022, 0)), Issuer: \\\"test\\\", } token := jwt.NewWithClaims(jwt.SigningMethodHS256, claims) ss, err := token.SignedString(mySigningKey) fmt.Printf(\\\"%v %v\\\", ss, err)\",\"输出：\",\"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9. eyJpc3MiOiJ0ZXN0IiwiZXhwIjoxNTE2MjM5MDIyfQ. 0XN_1Tpp9FszFOonIBpwha0c_SfnNI22DhTnjMshPg8 <nil>\"]},\"781\":{\"h\":\"例 3.自定义 Claims\",\"t\":[\"type MyClaims struct { User string `json:\\\"user\\\"` jwt.RegisteredClaims } func TestCustomClaims(t *testing.T) { // 创建密钥 secret := []byte(\\\"my secret\\\") // 创建Claims claims := MyClaims{ User: \\\"114514\\\", RegisteredClaims: jwt.RegisteredClaims{ ExpiresAt: jwt.NewNumericDate(time.Now().Add(time.Hour)), IssuedAt: jwt.NewNumericDate(time.Now()), NotBefore: jwt.NewNumericDate(time.Now()), Issuer: \\\"Server\\\", }, } // 创建Token token := jwt.NewWithClaims(jwt.SigningMethodHS256, claims) // 签名 signedString, err := token.SignedString(secret) fmt.Println(signedString, err) }\",\"输出：\",\"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9. eyJ1c2VyIjoiMTE0NTE0IiwiaXNzIjoiU2VydmVyIiwiZXhwIjoxNjczMDg1Nzk2LCJuYmYiOjE2NzMwODIxOTYsImlhdCI6MTY3MzA4MjE5Nn0. PdPXdQBbDuYtE4ENXzoAcrW-dBSxqsufeYXCT5zTwVI <nil>\",\"提示\",\"当在自定义 Claims 中嵌入了标准 Claims 时，需要确保：\",\"1.嵌入的标准 Claims 是非指针类型\",\"2.如果是指针类型，最好确保在传递之前为其分配合适的内存，否则将会 panic。\"]},\"782\":{\"h\":\"例 4.HMAC 解析验证 Token\",\"t\":[\"func TestParse(t *testing.T) { secret := []byte(\\\"my secret\\\") // 假设通过HS256算法创建并签名生成了一个token tokenString := \\\"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MTIzNDU2LCJuYW1lIjoiamFjayJ9.QxLw9NkFgZW3BluyXIofe4efp1IAy61s8b2fe3Eo86M\\\" // 传入token字符串和验证钩子函数，返回值就是一个Token结构体 token, err := jwt.Parse(tokenString, func(token *jwt.Token) (interface{}, error) { // 验证签名算法是否匹配 if _, ok := token.Method.(*jwt.SigningMethodHMAC); !ok { return nil, fmt.Errorf(\\\"不匹配的签名算法: %s\\\", token.Header[\\\"alg\\\"]) } // 返回验证密钥 return secret, nil }) if err != nil { fmt.Println(token, err) } if claims, ok := token.Claims.(jwt.MapClaims); ok && token.Valid { fmt.Println(claims) } else { fmt.Println(err) } }\",\"输出：\",\"map[id:123456 name:jack]\"]},\"783\":{\"h\":\"例 5.错误处理\",\"t\":[\"func TestProcess(t *testing.T) { secret := []byte(\\\"my secret\\\") // 假设通过HS256算法创建并签名生成了一个token tokenString := \\\"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MTIzNDU2LCJuYW1lIjoiamFjayJ9.QxLw9NkFgZW3BluyXIofe4efp1IAy61s8b2fe3Eo86M\\\" // 传入token字符串和验证钩子函数，返回值就是一个Token结构体 token, err := jwt.Parse(tokenString, func(token *jwt.Token) (interface{}, error) { // 验证签名算法是否匹配 if _, ok := token.Method.(*jwt.SigningMethodHMAC); !ok { return nil, fmt.Errorf(\\\"不匹配的签名算法: %s\\\", token.Header[\\\"alg\\\"]) } // 返回验证密钥 return secret, nil }) if token.Valid { fmt.Println(\\\"token合法\\\") } else if errors.Is(err, jwt.ErrTokenMalformed) { fmt.Println(\\\"传入的字符串甚至连一个token都不是...\\\") } else if errors.Is(err, jwt.ErrTokenExpired) || errors.Is(err, jwt.ErrTokenNotValidYet) { fmt.Println(\\\"token已经过期或者还没有生效\\\") } else { fmt.Println(\\\"token处理异常...\\\") } }\",\"输出：\",\"token合法\"]},\"784\":{\"h\":\"例 6.自定义 Claims 解析\",\"t\":[\"如果在创建 Token 时使用的是自定义 Claims，那么在解析时如果希望 Claims 可以直接转换自定义的 Claims 而不是 map，就需要传入自定义 Claims。\",\"func TestCustomClaimsParse(t *testing.T) { secret := []byte(\\\"my secret\\\") tokenstring := \\\"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyIjoiMTE0NTE0IiwiaXNzIjoiU2VydmVyIiwiZXhwIjoxNjczMDg4MDU2LCJuYmYiOjE2NzMwODQ0NTYsImlhdCI6MTY3MzA4NDQ1Nn0.T245aoDeL2x19X8_JZde0EmZ2TDyIgr1u3ddKFjQmgw\\\" token, err := jwt.ParseWithClaims(tokenstring, &MyClaims{}, func(token *jwt.Token) (interface{}, error) { return secret, nil }, jwt.WithValidMethods([]string{\\\"HS256\\\"})) // 使用option进行验证 // 类型断言 if claims, ok := token.Claims.(*MyClaims); ok && token.Valid { fmt.Println(claims) } else { fmt.Println(err) } }\",\"输出：\",\"&{114514 {Server [] 2023-01-07 18:40:56 +0800 CST 2023-01-07 17:40:56 +0800 CST 2023-01-07 17:40:56 +0800 CST }}\"]},\"785\":{\"h\":\"例 7.RSA 的签名与解析\",\"t\":[\"RSA 在分布式架构中用的会比较多，大致过程如下：\",\"认证中心创建密钥对，使用私钥将 jwt 签名，jwt 返回给客户端，公钥则有业务服务持有\",\"客户端携带 jwt 向业务服务发起请求，业务模块使用公钥对 jwt 进行解析，无需访问认证中心\",\"认证通过则返回业务信息\",\"认证失败则返回失败信息\",\"func TestRsa(t *testing.T) { // 创建密钥对 privateKey, err := rsa.GenerateKey(rand.Reader, 2048) publicKey := &privateKey.PublicKey if err != nil { fmt.Println(err) return } // claims claims := MyClaims{ User: \\\"114514\\\", RegisteredClaims: jwt.RegisteredClaims{ ExpiresAt: jwt.NewNumericDate(time.Now().Add(time.Hour)), IssuedAt: jwt.NewNumericDate(time.Now()), NotBefore: jwt.NewNumericDate(time.Now()), Issuer: \\\"Server\\\", }, } token := jwt.NewWithClaims(jwt.SigningMethodRS256, claims) // 私钥加密 signedString, err := token.SignedString(privateKey) fmt.Println(signedString, err) // 公钥解密 token, err = jwt.ParseWithClaims(signedString, &MyClaims{}, func(token *jwt.Token) (interface{}, error) { return publicKey, nil }) if err != nil { fmt.Println(err) } else if claims, ok := token.Claims.(*MyClaims); ok && token.Valid { fmt.Println(claims) } }\"]},\"786\":{\"h\":\"Viper\",\"t\":[\"仓库地址：spf13/viper: Go configuration with fangs (github.com)\",\"文档地址：spf13/viper: Go configuration with fangs (github.com)\",\"提示\",\"官方正在讨论向Viper2过渡，感兴趣可以了解：Viper2\"]},\"787\":{\"h\":\"安装\",\"t\":[\"go get github.com/spf13/viper\"]},\"788\":{\"h\":\"介绍\",\"t\":[\"Viper，直译为眼镜蛇，是一个针对 go 应用程序的完整的配置文件解决方案，可以处理几乎所有类型的配置需求和格式，方便管理项目的配置文件，并且具有以下特色：\",\"默认值设置\",\"支持格式 JSON, TOML, YAML, HCL, envfile，Java properties\",\"支持实时监测和重载配置文件\",\"支持环境变量中读取\",\"支持远程配置系统读取配置并监测变化\",\"支持读取命令行标记\",\"支持缓冲区读取\",\"支持显示设置值\",\"官方称Viper可以满足所有应用程序配置需求，开发者只需要专注于构建应用程序，让Viper来负责配置管理，许多知名的项目都使用Viper\",\"Hugo\",\"EMC RexRay\",\"Imgur’s Incus\",\"Nanobox/Nanopack\",\"Docker Notary\",\"BloomApi\",\"doctl\",\"Clairctl\",\"Mercure\",\"警告\",\"Viper并不负责配置文件的加密与解密，也就是不会对配置文件做任何的安全处理。\"]},\"789\":{\"h\":\"读取顺序\",\"t\":[\"Viper 使用如下的优先级来读取配置：\",\"显示的值设置\",\"命令行标记标记\",\"环境变量\",\"配置文件\",\"键值存储\",\"默认值\",\"提示\",\"Viper 配置中的键是不区分大小写的，后续讨论可能会将其置为可选项。\"]},\"790\":{\"h\":\"默认值\",\"t\":[\"一个良好的配置系统应当支持默认值设置，虽然有时候并不一定需要，但在没有设置配置文件的时候将会非常有用，下方是一个例子。\",\"viper.SetDefault(\\\"filePath\\\",\\\"./dir/img/usr\\\") viper.SetDefault(\\\"root\\\",\\\"123456\\\")\"]},\"791\":{\"h\":\"读取配置文件\",\"t\":[\"Viper 只需要很少的配置，就知道在哪里查找配置文件。Viper 支持 JSON、 TOML、 YAML、 HCL、 INI、 envfile 和 JavaProperties 文件。Viper 可以同时搜索多个路径，但目前单个 Viper 实例只支持单个配置文件。Viper 不会默认配置搜索路径，将默认决策留给应用程序。\",\"下面是使用 Viper 读取配置文件的一个示例，不需要指定一个完整路径，但在使用时至少应当提供一个配置文件。\",\"func TestReadConfigFile(t *testing.T) { viper.SetConfigName(\\\"config.yml\\\") // 读取名为config的配置文件，没有设置特定的文件后缀名 viper.SetConfigType(\\\"yaml\\\") // 当没有设置特定的文件后缀名时，必须要指定文件类型 viper.AddConfigPath(\\\"./\\\") // 在当前文件夹下寻找 viper.AddConfigPath(\\\"$HOME/\\\") // 使用变量 viper.AddConfigPath(\\\".\\\") // 在工作目录下查找 err := viper.ReadInConfig() //读取配置 if err != nil { log.Fatalln(err) } }\",\"也可以单独处理配置文件未找到的情况\",\"if err := viper.ReadInConfig(); err != nil { if _, ok := err.(viper.ConfigFileNotFoundError); ok { // 配置文件未找到 } else { // 其他类型的错误 } }\",\"以下是访问配置的全部函数\",\"Get(key string) : interface{}\",\"GetBool(key string) : bool\",\"GetFloat64(key string) : float64\",\"GetInt(key string) : int\",\"GetIntSlice(key string) : []int\",\"GetString(key string) : string\",\"GetStringMap(key string) : map[string]interface{}\",\"GetStringMapString(key string) : map[string]string\",\"GetStringSlice(key string) : []string\",\"GetTime(key string) : time.Time\",\"GetDuration(key string) : time.Duration\",\"IsSet(key string) : bool\",\"AllSettings() : map[string]interface{}\",\"当访问嵌套配置的时候通过.分隔符进行访问，例如：\",\"{ \\\"server\\\":{ \\\"database\\\":{ \\\"url\\\": \\\"mysql....\\\" } } }\",\"可以通过GetString(\\\"server.database.url\\\")来进行嵌套访问\"]},\"792\":{\"h\":\"写入配置文件\",\"t\":[\"Viper 提供了一系列函数来方便开发者将运行时存储的配置写入配置文件中。\",\"// WriteConfig 将配置写入原配置文件中，不存在会报错，存在的话会覆盖 func WriteConfig() error { return v.WriteConfig() } // SafeWriteConfig 将配置安全的写入原配置文件中，不存在时会写入，存在的话则不会覆盖 func SafeWriteConfig() error { return v.SafeWriteConfig() } // WriteConfigAs 将当前的配置写入指定文件，文件不存在时会返回错误，存在时会覆盖原有配置 func WriteConfigAs(filename string) error { return v.WriteConfigAs(filename) } // SafeWriteConfigAs 如果指定的文件存在的话，将不会覆盖原配置文件，文件存在的话会返回错误 func SafeWriteConfigAs(filename string) error { return v.SafeWriteConfigAs(filename) }\",\"下方是一些示例：\",\"func TestWritingConfig(t *testing.T) { viper.WriteConfig() // 将配置写入原配置文件，这些配置文件应当提前被 'viper.AddConfigPath()' 和 'viper.SetConfigName' 定义好 viper.SafeWriteConfig() viper.WriteConfigAs(\\\"/path/to/my/.config\\\") viper.SafeWriteConfigAs(\\\"/path/to/my/.config\\\") // 因为指定文件存在，将会返回错误 viper.SafeWriteConfigAs(\\\"/path/to/my/.other_config\\\") }\"]},\"793\":{\"h\":\"监测和重载配置\",\"t\":[\"Viper 允许应用程序在运行时动态读取一个配置文件，即不需要重新启动应用程序也可以使更新的配置生效，且不会放过每一个变化的细节。只需要简单地告诉 Viper 实例去监视配置变化，或者可以提供一个函数给 viper 以便每次发生变化时运行该函数。\",\"func TestWatchingConfig(t *testing.T) { viper.OnConfigChange(func(e fsnotify.Event) { fmt.Println(\\\"配置文件已更改:\\\", e.Name) }) viper.WatchConfig() }\"]},\"794\":{\"h\":\"别名\",\"t\":[\"func TestAliases(t *testing.T) { viper.RegisterAlias(\\\"a\\\", \\\"b\\\") viper.Set(\\\"a\\\", 1) viper.Set(\\\"b\\\", 2) //将会覆盖掉a的配置 fmt.Println(viper.GetInt(\\\"a\\\")) }\"]},\"795\":{\"h\":\"提取子结构\",\"t\":[\"前面提到了通过.分隔符来访问嵌套配置，其实还可以通过viper.Sub()函数来提取子结构，其返回值是一个 Viper 实例，如下示例：\",\"cache: cache1: max-items: 100 item-size: 64 cache2: max-items: 200 item-size: 80\",\"cache1Config := viper.Sub(\\\"cache.cache1\\\") if cache1Config == nil { // 如果不存在返回nil panic(\\\"cache1配置不存在\\\") }\"]},\"796\":{\"h\":\"设置嵌套分隔符\",\"t\":[\"当想要指定的 key 中包含.时，就必须要手动指定一个其他的分隔符，以防出现误解析，例如：\",\"viper.KeyDelimiter(\\\"/\\\") //将分隔符设置为 /\"]},\"797\":{\"h\":\"反序列化\",\"t\":[\"Viper 提供了两个函数可以将配置反序列化到一个结构体或者 map，同样支持嵌套结构：\",\"Unmarshal(rawVal interface{}) : error\",\"UnmarshalKey(key string, rawVal interface{}) : error\",\"type config struct { Port int Name string PathMap string `mapstructure:\\\"path_map\\\"` } var C config err := viper.Unmarshal(&C) if err != nil { t.Fatalf(\\\"无法反序列化为结构体, %v\\\", err) }\"]},\"798\":{\"h\":\"序列化\",\"t\":[\"将当前配置按照特定的格式序列化成字符串以便存入配置文件，通常情况支持 JSON, TOML, YAML, HCL, envfile，Java properties，\",\"提示\",\"Viper 同样支持自定义序列化格式，Decoding custom formats with Viper - Márk Sági-Kazár (sagikazarmark.hu)\",\"import ( yaml \\\"gopkg.in/yaml.v2\\\" // ... ) func yamlStringSettings() string { c := viper.AllSettings() bs, err := yaml.Marshal(c) if err != nil { log.Fatalf(\\\"无法将配置序列化为YAML: %v\\\", err) } return string(bs) }\"]},\"799\":{\"h\":\"多个实例\",\"t\":[\"通常情况下使用 Viper 提供的全局实例足够使用，但是由于一个实例只能映射一个配置文件，可以自行创建多个实例以实现更多的操作，例如：\",\"x := viper.New() y := viper.New() x.SetDefault(\\\"ContentDir\\\", \\\"content\\\") y.SetDefault(\\\"ContentDir\\\", \\\"foobar\\\") //...\"]},\"800\":{\"h\":\"DockerAPI\",\"t\":[\"文档：Develop with Docker Engine SDKs | Docker Documentation\",\"DockerAPI是Docker的SDK，以编程的方式与Docker进行交互，例如拉取镜像，运行容器，这个文档只是简单的讲解如何去使用DockerAPI，在官方文档中对每一个API有着更详细的解释。官方API只有Go和Python版本，并且Docker本身也支持HTTP进行交互，如果是其他语言的话可以使用第三方社区开源的SDK，本教程将采用Go语言进行讲解。\"]},\"801\":{\"h\":\"安装\",\"t\":[\"使用Go Get 安装Docker Client。\",\"go get github.com/docker/docker/client\"]},\"802\":{\"h\":\"gopher-lua\",\"t\":[\"仓库：yuin/gopher-lua: GopherLua: VM and compiler for Lua in Go (github.com)\",\"文档：gopher-lua/README.rst at master · yuin/gopher-lua (github.com)\"]},\"803\":{\"h\":\"简介\",\"t\":[\"GopherLua 是用 go 编写的 lua 虚拟机和编译器，使用 GoAPI 来为 Go 程序中嵌入 lua 脚本，同时使用 GoAPI 来进行 lua 操作。lua 作为一个短小精悍的脚本语言很受游戏开发的欢迎，所以一些游戏服务器应用较多，需要与 lua 交互时，使用该库可以很方便的通过 Go 来与 lua 进行交互。\"]},\"804\":{\"h\":\"安装\",\"t\":[\"go get github.com/yuin/gopher-lua\",\"注意\",\"仅支持 Go1.19 以上的版本\"]},\"805\":{\"h\":\"快速开始\",\"t\":[\"载入 lua 文件\",\"package main import ( \\\"github.com/yuin/gopher-lua\\\" ) func main() { L := lua.NewState() defer L.Close() if err := L.DoFile(\\\"hello.lua\\\"); err != nil { panic(err) } }\",\"或者直接字符串的形式\",\"package main import ( \\\"github.com/yuin/gopher-lua\\\" ) func main() { L := lua.NewState() defer L.Close() if err := L.DoString(`print(\\\"hello\\\")`); err != nil { panic(err) } }\"]},\"806\":{\"h\":\"spf13/cast\",\"t\":[\"仓库：spf13/cast: safe and easy casting from one type to another in Go (github.com)\",\"文档：spf13/cast: safe and easy casting from one type to another in Go (github.com)\"]},\"807\":{\"h\":\"简介\",\"t\":[\"cast是一个简单的类型转换库，用于将一个类型到另一个类型的快速转换，可以省去很多麻烦的操作。\"]},\"808\":{\"h\":\"安装\",\"t\":[\"go get https://github.com/spf13/cast\"]},\"809\":{\"h\":\"例子\",\"t\":[\"字符串\",\"cast.ToString(\\\"mayonegg\\\") // \\\"mayonegg\\\" cast.ToString(8) // \\\"8\\\" cast.ToString(8.31) // \\\"8.31\\\" cast.ToString([]byte(\\\"one time\\\")) // \\\"one time\\\" cast.ToString(nil) // \\\"\\\" var foo interface{} = \\\"one more time\\\" cast.ToString(foo) // \\\"one more time\\\"\",\"整型\",\"cast.ToInt(8) // 8 cast.ToInt(8.31) // 8 cast.ToInt(\\\"8\\\") // 8 cast.ToInt(true) // 1 cast.ToInt(false) // 0 var eight interface{} = 8 cast.ToInt(eight) // 8 cast.ToInt(nil) // 0\"]},\"810\":{\"h\":\"copier\",\"t\":[\"开源仓库：jinzhu/copier: Copier for golang, copy value from struct to struct and more (github.com)\",\"文档地址：jinzhu/copier: Copier for golang, copy value from struct to struct and more (github.com)\",\"copier 是一个用于在 go 中进行类型复制的库，多用于结构体之间的转换。作者和 gorm 是同一个，它具有以下特点\",\"深拷贝\",\"复制同名的字段\",\"复制切片\",\"复制 map\",\"复制方法\",\"由于 copier 的复制依赖于反射，所以性能上会有一定的损失。一般这种类型复制的库分成两类，一类基于反射，也是就 copier 这种，另一类是基于代码生成，通过生成类型转换的代码，这种方法性能不会造成损失，类似实现的库有jmattheis/goverter。\"]},\"811\":{\"h\":\"安装\",\"t\":[\" go get github.com/jinzhu/copier\"]},\"812\":{\"h\":\"使用\",\"t\":[\"这个库使用起来非常简单，但却非常的实用。它只对外暴露两个函数，一个是copier.Copy。\",\"func Copy(toValue interface{}, fromValue interface{}) (err error)\",\"另一个是copier.CopyWithOption，后者可以对复制行为进行一些自定义的配置，在默认情况下不会进行深拷贝。\",\"type Option struct { IgnoreEmpty bool CaseSensitive bool DeepCopy bool FieldNameMapping []FieldNameMapping } func CopyWithOption(toValue interface{}, fromValue interface{}, opt Option) (err error)\",\"下面演示一个不同类型结构体转换的例子，其中的User和Student结构体是两个完全不同的类型，没有任何的关联。\",\"type User struct { Id string Name string // 当作为目标结构体时，忽略该字段 Address string `copier:\\\"-\\\"` } type Student struct { // 指定字段名 StudentId string `copier:\\\"Id\\\"` StudentName string `copier:\\\"Name\\\"` Address string School string Class string } func main() { student := Student{ StudentId: \\\"123\\\", StudentName: \\\"jack\\\", Address: \\\"usa\\\", School: \\\"MIT\\\", Class: \\\"AI\\\", } user := User{} if err := copier.Copy(&user, &student); err != nil { panic(err) } fmt.Printf(\\\"%+v\\\\n\\\", student) fmt.Printf(\\\"%+v\\\\n\\\", user) }\",\"输出\",\"{StudentId:123 StudentName:jack Address:usa School:MIT Class:AI} {Id:123 Name:jack Address:}\",\"下面看复制切片\",\"func main() { student := []Student{ { StudentId: \\\"123\\\", StudentName: \\\"jack\\\", Address: \\\"usa\\\", School: \\\"MIT\\\", Class: \\\"AI\\\", }, { StudentId: \\\"123\\\", StudentName: \\\"jack\\\", Address: \\\"usa\\\", School: \\\"MIT\\\", Class: \\\"AI\\\", }, } var user []User if err := copier.Copy(&user, &student); err != nil { panic(err) } fmt.Printf(\\\"%+v\\\\n\\\", student) fmt.Printf(\\\"%+v\\\\n\\\", user) }\",\"输出\",\"[{StudentId:123 StudentName:jack Address:usa School:MIT Class:AI} {StudentId:123 StudentName:jack Address:usa School:MIT Class:AI}] [{Id:123 Name:jack Address:} {Id:123 Name:jack Address:}]\",\"复制 map\",\"type User struct { Id string Name string // 当作为目标结构体时，忽略该字段 Address string `copier:\\\"-\\\"` } type Student struct { // 指定字段名 StudentId string `copier:\\\"Id\\\"` StudentName string `copier:\\\"Name\\\"` Address string School string Class string } func main() { student := Student{ StudentId: \\\"123\\\", StudentName: \\\"jack\\\", Address: \\\"usa\\\", School: \\\"MIT\\\", Class: \\\"AI\\\", } src := make(map[string]Student) src[\\\"a\\\"] = student src[\\\"b\\\"] = student dest := make(map[string]User) if err := copier.Copy(&dest, &src); err != nil { panic(err) } fmt.Printf(\\\"%+v\\\\n\\\", src) fmt.Printf(\\\"%+v\\\\n\\\", dest) }\",\"输出\",\"map[a:{StudentId:123 StudentName:jack Address:usa School:MIT Class:AI} b:{StudentId:123 StudentName:jack Address:usa School:MIT Class:AI}] map[a:{Id:123 Name:jack Address:} b:{Id:123 Name:jack Address:}]\"]},\"813\":{\"h\":\"自定义\",\"t\":[\"还可以自定义转换方法，只需要传入copier.TypeConverter即可\",\"type TypeConverter struct { SrcType interface{} DstType interface{} Fn func(src interface{}) (dst interface{}, err error) }\",\"如下所示\",\"type User struct { Id string Name string // 当作为目标结构体时，忽略该字段 Address string `copier:\\\"-\\\"` } type Student struct { // 指定字段名 StudentId string `copier:\\\"Id\\\"` StudentName string `copier:\\\"Name\\\"` Address string School string Class string } func main() { student := Student{ StudentId: \\\"123\\\", StudentName: \\\"jack\\\", Address: \\\"usa\\\", School: \\\"MIT\\\", Class: \\\"AI\\\", } src := make(map[string]Student) src[\\\"a\\\"] = student src[\\\"b\\\"] = student dest := make(map[string]User) if err := copier.CopyWithOption(&dest, &src, copier.Option{ IgnoreEmpty: false, CaseSensitive: false, DeepCopy: false, Converters: []copier.TypeConverter{ { SrcType: Student{}, DstType: User{}, Fn: func(src interface{}) (dst interface{}, err error) { s, ok := src.(Student) if !ok { return User{}, errors.New(\\\"error type\\\") } return User{ Id: s.StudentId, }, nil }, }, }, FieldNameMapping: nil, }); err != nil { panic(err) } fmt.Printf(\\\"%+v\\\\n\\\", src) fmt.Printf(\\\"%+v\\\\n\\\", dest) }\",\"输出\",\"map[a:{StudentId:123 StudentName:jack Address:usa School:MIT Class:AI} b:{StudentId:123 StudentName:jack Address:usa School:MIT Class:AI}] map[a:{Id:123 Name: Address:} b:{Id:123 Name: Address:}]\"]},\"814\":{\"h\":\"go-ini\",\"t\":[\"仓库：go-ini/ini: Package ini provides INI file read and write functionality in Go (github.com)\",\"文档：go-ini/ini: 超赞的 Go 语言 INI 文件操作 (unknwon.cn)\"]},\"815\":{\"h\":\"简介\",\"t\":[\"使用Go语言编写的ini文件的解析库，支持序列化和反序列，支持结构体映射，支持注释操作。\"]},\"816\":{\"h\":\"安装\",\"t\":[\"go get gopkg.in/ini.v1\"]},\"817\":{\"h\":\"快速开始\",\"t\":[\"ini文件如下\",\"# possible values : production, development app_mode = development [paths] # Path to where grafana can store temp files, sessions, and the sqlite3 db (if that is used) data = /home/git/grafana [server] # Protocol (http or https) protocol = http # The http port to use http_port = 9999 # Redirect to correct domain if host header does not match domain # Prevents DNS rebinding attacks enforce_domain = true\",\"go文件\",\"package main import ( \\\"fmt\\\" \\\"os\\\" \\\"gopkg.in/ini.v1\\\" ) func main() { cfg, err := ini.Load(\\\"my.ini\\\") if err != nil { fmt.Printf(\\\"Fail to read file: %v\\\", err) os.Exit(1) } // 典型读取操作，默认分区可以使用空字符串表示 fmt.Println(\\\"App Mode:\\\", cfg.Section(\\\"\\\").Key(\\\"app_mode\\\").String()) fmt.Println(\\\"Data Path:\\\", cfg.Section(\\\"paths\\\").Key(\\\"data\\\").String()) // 我们可以做一些候选值限制的操作 fmt.Println(\\\"Server Protocol:\\\", cfg.Section(\\\"server\\\").Key(\\\"protocol\\\").In(\\\"http\\\", []string{\\\"http\\\", \\\"https\\\"})) // 如果读取的值不在候选列表内，则会回退使用提供的默认值 fmt.Println(\\\"Email Protocol:\\\", cfg.Section(\\\"server\\\").Key(\\\"protocol\\\").In(\\\"smtp\\\", []string{\\\"imap\\\", \\\"smtp\\\"})) // 试一试自动类型转换 fmt.Printf(\\\"Port Number: (%[1]T) %[1]d\\\\n\\\", cfg.Section(\\\"server\\\").Key(\\\"http_port\\\").MustInt(9999)) fmt.Printf(\\\"Enforce Domain: (%[1]T) %[1]v\\\\n\\\", cfg.Section(\\\"server\\\").Key(\\\"enforce_domain\\\").MustBool(false)) // 差不多了，修改某个值然后进行保存 cfg.Section(\\\"\\\").Key(\\\"app_mode\\\").SetValue(\\\"production\\\") cfg.SaveTo(\\\"my.ini.local\\\") }\",\"输出\",\"$ go run main.go App Mode: development Data Path: /home/git/grafana Server Protocol: http Email Protocol: smtp Port Number: (int) 9999 Enforce Domain: (bool) true $ cat my.ini.local # possible values : production, development app_mode = production [paths] # Path to where grafana can store temp files, sessions, and the sqlite3 db (if that is used) data = /home/git/grafana ...\"]},\"818\":{\"h\":\"size\",\"t\":[\"dstgo/size 是一个很方便的将字符串与文件大小相互转换的库\",\"仓库地址：dstgo/size: Fast conversion between file size and string (github.com)\",\"文档地址：dstgo/size: Fast conversion between file size and string (github.com)\"]},\"819\":{\"h\":\"安装\",\"t\":[\"$ go get https://github.com/dstgo/size\"]},\"820\":{\"h\":\"使用\",\"t\":[\"const ( B Size = 1 KB = B * 1024 MB = KB * 1024 GB = MB * 1024 TB = GB * 1024 PB = TB * 1024 )\",\"type SizeMeta struct { Data float64 Unit Size }\",\"该库使用起来相当简单，只有两个对外暴露的函数\",\"func ParseSize(str string) SizeMeta\",\"ParseSize将字符串转换成一个SizeMeta结构体，存储了数据大小，以及单位大小\",\"func ParseTargetSize(str string, size Size) SizeMeta\",\"ParseTargetSize将字符串转换成指定大小的SizeMeta\",\"示例如下：\",\"package main import ( \\\"fmt\\\" \\\"github.com/dstgo/size\\\" ) func main() { parseSize := size.ParseSize(\\\"1.2MB\\\") fmt.Printf(\\\"%+v\\\\n\\\", parseSize) fmt.Printf(\\\"%+v\\\\n\\\", parseSize.Round(1)) parseSize1 := size.ParseSize(\\\"2.3-asdajl\\\") fmt.Printf(\\\"%+v\\\\n\\\", parseSize1) targetSize := size.ParseTargetSize(\\\"2.65MB\\\", size.KB) fmt.Printf(\\\"%+v\\\", targetSize) fmt.Printf(\\\"%+v\\\", targetSize.String()) }\",\"转换后可以使用Round方法来修改保留多少位，也可以使用String方法来获取其字符串形式，示例输出如下\",\"1.20MB 1.2 2713.60KB\"]},\"821\":{\"h\":\"Wire\",\"t\":[\"wire 是谷歌开源的一个依赖注入工具，依赖注入这个概念在 Java 的 Spring 框架中相当盛行，go 中也有一些依赖注入库，例如 Uber 开源的 dig。不过 wire 的依赖注入理念并不是基于语言的反射机制，严格来说，wire 其实是一个代码生成器，依赖注入的理念只体现在使用上，如果有问题的话，在代码生成期间就能找出来。\",\"仓库地址：google/wire: Compile-time Dependency Injection for Go (github.com)\",\"文档地址：wire/docs/guide.md at main · google/wire (github.com)\"]},\"822\":{\"h\":\"安装\",\"t\":[\"安装代码生成工具\",\"go install github.com/google/wire/cmd/wire@latest\",\"安装源代码依赖\",\"go get github.com/google/wire\"]},\"823\":{\"h\":\"入门\",\"t\":[\"wire 中依赖注入基于两个元素，provier和injector。\",\"provier可以是开发者提供一个构造器，如下，Provider 必须是对外暴露的。\",\"package foobarbaz type Foo struct { X int } // 构造Foo func ProvideFoo() Foo { return Foo{X: 42} }\",\"带参数\",\"package foobarbaz // ... type Bar struct { X int } // ProvideBar returns a Bar: a negative Foo. func ProvideBar(foo Foo) Bar { return Bar{X: -foo.X} }\",\"也可以带有参数和返回值\",\"package foobarbaz import ( \\\"context\\\" \\\"errors\\\" ) type Baz struct { X int } // ProvideBaz returns a value if Bar is not zero. func ProvideBaz(ctx context.Context, bar Bar) (Baz, error) { if bar.X == 0 { return Baz{}, errors.New(\\\"cannot provide baz when bar is zero\\\") } return Baz{X: bar.X}, nil }\",\"也可以对 proiver 进行组合\",\"package foobarbaz import ( // ... \\\"github.com/google/wire\\\" ) // ... var SuperSet = wire.NewSet(ProvideFoo, ProvideBar, ProvideBaz)\",\"提示\",\"wire 对 provider 的返回值有如下规定\",\"第一个返回值是 provider 提供的值\",\"第二个返回值必须是func() | error\",\"第三个返回值，如果第二个返回值是func，那么第三个返回值必须是error\",\"injector是由 wire 生成的一个函数，它负责按照指定的顺序去调用 provider，injector 的签名由开发者来定义，wire 生成具体的函数体，通过调用wire.Build来声明，这个声明不应该被调用，更不应该被编译。\",\"func Build(...interface{}) string { return \\\"implementation not generated, run wire\\\" }\",\"// +build wireinject // The build tag makes sure the stub is not built in the final build. package main import ( \\\"context\\\" \\\"github.com/google/wire\\\" \\\"example.com/foobarbaz\\\" ) // 定义的injector func initializeBaz(ctx context.Context) (foobarbaz.Baz, error) { wire.Build(foobarbaz.MegaSet) return foobarbaz.Baz{}, nil }\",\"然后执行\",\"wire\",\"就会生成wire_gen.go，内容如下\",\"// Code generated by Wire. DO NOT EDIT. //go:generate go run -mod=mod github.com/google/wire/cmd/wire //+build !wireinject package main import ( \\\"example.com/foobarbaz\\\" ) // 实际生成的injector func initializeBaz(ctx context.Context) (foobarbaz.Baz, error) { foo := foobarbaz.ProvideFoo() bar := foobarbaz.ProvideBar(foo) baz, err := foobarbaz.ProvideBaz(ctx, bar) if err != nil { return foobarbaz.Baz{}, err } return baz, nil }\",\"生成的代码对于 wire 几乎没有任何依赖，不需要 wire 也可以正常工作，并且在后续执行go generate就可以再次生成，之后，开发者通过调用实际生成的 injector 传入对应的参数完成依赖注入。是不是整个过程的代码相当简单，感觉好像就是提供几个构造器，然后生成一个调用构造器的函数，最后再调用这个函数传入参数，好像也没做什么特别复杂的事情，手写一样可以，没错就是这样，wire 就是做的这样一件简单的事情，只是由手写变成了自动生成。按照 wire 的理念，依赖注入本就是应该如此简单的一个事情，不应复杂化。\"]},\"824\":{\"h\":\"示例\",\"t\":[\"下面来通过一个案例加深一下理解，这是一个初始化 app 的例子。\",\"HttpServer的 provider 接收一个net.Addr参数，返回指针和error\",\"var ServerProviderSet = wire.NewSet(NewHttpserver) type HttpServer struct { net.Addr } func NewHttpserver(addr net.Addr) (*HttpServer, error) { return &HttpServer{addr}, nil }\",\"下面的MysqlClient和System的 provider 同理\",\"var DataBaseProviderSet = wire.NewSet(NewMysqlClient) type MysqlClient struct { } var SystemSet = wire.NewSet(NewApp) type System struct { server *HttpServer data *MysqlClient } func (s *System) Run() { log.Printf(\\\"app run on %s\\\", s.server.String()) } func NewApp(server *HttpServer, data *MysqlClient) (System, error) { return System{server: server, data: data}, nil }\",\"provider 定义完毕后，需要定义 injector，最好新建一个wire.go文件来定义\",\"//go:build wireinject // +build wireinject package main import ( \\\"github.com/google/wire\\\" \\\"net\\\" ) // 定义injector func initSystemServer(serverAddr net.Addr, dataAddr string) (System, error) { // 按照顺序调用provider panic(wire.Build(DataBaseProviderSet, ServerProviderSet, SystemSet)) }\",\"+build wireinject是为了在编译时忽略掉此 injector。然后执行如下命令，有如下输出即生成成功。\",\"$ wire $ wire: golearn: wrote /golearn/wire_gen.go\",\"生成后的代码如下\",\"// Code generated by Wire. DO NOT EDIT. //go:generate go run github.com/google/wire/cmd/wire //go:build !wireinject // +build !wireinject package main import ( \\\"net\\\" ) // Injectors from wire.go: // 定义injector func initSystemServer(serverAddr net.Addr, dataAddr string) (System, error) { httpServer, err := NewHttpserver(serverAddr) if err != nil { return System{}, err } mysqlClient, err := NewMysqlClient(dataAddr) if err != nil { return System{}, err } system, err := NewApp(httpServer, mysqlClient) if err != nil { return System{}, err } return system, nil }\",\"可以看到逻辑很清晰，调用顺序也是正确的，最后通过生成的 injector 来启动 app。\",\"package main import ( \\\"github.com/google/wire\\\" \\\"log\\\" \\\"net\\\" \\\"net/netip\\\" ) func main() { server, err := initSystemServer( net.TCPAddrFromAddrPort(netip.MustParseAddrPort(\\\"127.0.0.1:8080\\\")), \\\"mysql:localhost:3306/test\\\") if err != nil { panic(err) } server.Run() }\",\"最后输出如下\",\"2023/08/01 19:20:48 app run on 127.0.0.1:8080\",\"这就是一个非常简单的使用案例。\"]},\"825\":{\"h\":\"高级用法\"},\"826\":{\"h\":\"接口绑定\",\"t\":[\"有时候，依赖注入时会将一个具体的实现注入到接口上。wire 在依赖注入时，是根据类型匹配来实现的。\",\"ype Fooer interface { Foo() string } type MyFooer string func (b *MyFooer) Foo() string { return string(*b) } func provideMyFooer() *MyFooer { b := new(MyFooer) *b = \\\"Hello, World!\\\" return b } type Bar string func provideBar(f Fooer) string { // f will be a *MyFooer. return f.Foo() }\",\"providerprovideBar的参数是一个接口类型，它的实际上是*MyFooer，为了让代码生成时 provider 能够正确匹配，我们可以将两种类型绑定，如下\",\"第一个参数是具体的接口指针类型，第二个是具体实现的指针类型。\",\"func Bind(iface, to interface{}) Binding\",\"var Set = wire.NewSet( provideMyFooer, wire.Bind(new(Fooer), new(*MyFooer)), provideBar)\"]},\"827\":{\"h\":\"值绑定\",\"t\":[\"在使用wire.Build时，可以不用 provider 提供值，也可以使用wire.Value来提供一个具体的值。wire.Value支持表达式来构造值，这个表达式在生成代码时会被复制到 injector 中，如下。\",\"type Foo struct { X int } func injectFoo() Foo { wire.Build(wire.Value(Foo{X: 42})) return Foo{} }\",\"生成的 injector\",\"func injectFoo() Foo { foo := _wireFooValue return foo } var ( _wireFooValue = Foo{X: 42} )\",\"如果想要绑定一个接口类型的值，可以使用wire.InterfaceValue\",\"func injectReader() io.Reader { wire.Build(wire.InterfaceValue(new(io.Reader), os.Stdin)) return nil }\"]},\"828\":{\"h\":\"结构体构造\",\"t\":[\"在 providerset 中，可以使用wire.Struct来利用其他 provider 的返回值构建一个指定类型的结构体。\",\"第一个参数应该传入结构体指针类型，后续是字段名称。\",\"func Struct(structType interface{}, fieldNames ...string) StructProvider\",\"示例如下\",\"type Foo int type Bar int func ProvideFoo() Foo {/* ... */} func ProvideBar() Bar {/* ... */} type FooBar struct { MyFoo Foo MyBar Bar } var Set = wire.NewSet( ProvideFoo, ProvideBar, wire.Struct(new(FooBar), \\\"MyFoo\\\", \\\"MyBar\\\")) func injectFooBar() FoodBar { wire.Build(Set) }\",\"生成的 injector 可能如下所示\",\"func injectFooBar() FooBar { foo := ProvideFoo() bar := ProvideBar() fooBar := FooBar{ MyFoo: foo, MyBar: bar, } return fooBar }\",\"如果想要填充所有字段，可以使用*，例如\",\"wire.Struct(new(FooBar), \\\"*\\\")\",\"默认是构造结构体类型，如果想要构造指针类型，可以修改 injector 签名的返回值\",\"func injectFooBar() *FoodBar { wire.Build(Set) }\",\"如果想要忽略掉字段，可以加 tag，如下所示\",\"type Foo struct { mu sync.Mutex `wire:\\\"-\\\"` Bar Bar }\"]},\"829\":{\"h\":\"Cleanup\",\"t\":[\"如果 provider 构造的一个值在使用后需要进行收尾工作（比如关闭一个文件），provider 可以返回一个闭包来进行这样的操作，injector 并不会调用这个 cleanup 函数，具体何时调用交给 injector 的调用者，如下。\",\"type Data struct { // TODO wrapped database client } // NewData . func NewData(c *conf.Data, logger log.Logger) (*Data, func(), error) { cleanup := func() { log.NewHelper(logger).Info(\\\"closing the data resources\\\") } return &Data{}, cleanup, nil }\",\"实际生成的代码可能如下\",\"func wireApp(confData *conf.Data, logger log.Logger) (func(), error) { dataData, cleanup, err := data.NewData(confData, logger) if err != nil { return nil, nil, err } // inject data // ... return app, func() { cleanup() }, nil }\"]},\"830\":{\"h\":\"类型重复\",\"t\":[\"provider 的入参最好不要类型重复，尤其是对于一些基础类型\",\"type FooBar struct { foo string bar string } func NewFooBar(foo string, bar string) FooBar { return FooBar{ foo: foo, bar: bar, } } func InitializeFooBar(a string, b string) FooBar { panic(wire.Build(NewFooBar)) }\",\"这种情况下生成代码会报错\",\"provider has multiple parameters of type string\",\"wire 将无法区分这些参数该如何注入，为了避免冲突，可以使用类型别名。\"]},\"831\":{\"h\":\"gg\",\"t\":[\"官方仓库：fogleman/gg: Go Graphics - 2D rendering in Go with a simple API. (github.com)\",\"官方文档：gg package - github.com/fogleman/gg - Go Packages\",\"官方示例：gg/examples at master · fogleman/gg (github.com)\",\"gg是一个比较老牌的二维的图形渲染引擎，适合用于生成图片。\"]},\"832\":{\"h\":\"安装\",\"t\":[\"go get -u github.com/fogleman/gg\"]},\"833\":{\"h\":\"快速开始\",\"t\":[\"package main import \\\"github.com/fogleman/gg\\\" func main() { dc := gg.NewContext(1000, 1000) //创建画布 高1000 宽1000 dc.DrawCircle(500, 500, 400) // 在 (500,500)坐标位置绘制一个半径400的圆 dc.SetRGB(0, 0, 0) // 设置颜色黑色 dc.Fill() // 填充 dc.SavePNG(\\\"out.png\\\") // 保存到图片文件 }\"]},\"834\":{\"h\":\"描点\",\"t\":[\"![](/images/gg/points.png =400x400)\",\"func TestDot(t *testing.T) { dc := gg.NewContext(1000, 1000) dc.SetRGB(0, 0, 0) for i := 1; i < 10; i++ { dc.DrawPoint(float64(50*i), float64(50*i), 5) // 设置点的坐标和半径 } dc.Fill() // 填充 dc.SavePNG(\\\"out.png\\\") }\"]},\"835\":{\"h\":\"画线\",\"t\":[\"![](/images/gg/lines.png =400x400)\",\"func TestLines(t *testing.T) { dc := gg.NewContext(1000, 1000) dc.SetRGB(0, 0, 0) dc.SetLineWidth(5) // 设置线宽 dc.DrawLine(1000, 0, 0, 1000) dc.DrawLine(1000, 1000, 0, 0) dc.Stroke() // 连线 dc.SavePNG(\\\"lines.png\\\") }\"]},\"836\":{\"h\":\"Zap\",\"t\":[\"Zap 是一个用 Go 构建的，快速的 ，结构化，级别化的日志组件。\",\"官方仓库：uber-go/zap: Blazing fast, structured, leveled logging in Go. (github.com)\",\"官方文档：zap package - go.uber.org/zap - Go Packages\"]},\"837\":{\"h\":\"安装\",\"t\":[\"go get -u go.uber.org/zap\"]},\"838\":{\"h\":\"快速开始\",\"t\":[\"官方给出了两个快速开始的示例，两个都是产品级别的日志，第一个是一个支持printf风格但是性能相对较低的Sugar。\",\"logger, _ := zap.NewProduction() defer logger.Sync() // 在程序结束时将缓存同步到文件中 sugar := logger.Sugar() sugar.Infow(\\\"failed to fetch URL\\\", \\\"url\\\", url, \\\"attempt\\\", 3, \\\"backoff\\\", time.Second, ) sugar.Infof(\\\"Failed to fetch URL: %s\\\", url)\",\"第二个是性能比较好，但是仅支持强类型输出的日志·logger\",\"logger, _ := zap.NewProduction() defer logger.Sync() logger.Info(\\\"failed to fetch URL\\\", // Structured context as strongly typed Field values. zap.String(\\\"url\\\", url), zap.Int(\\\"attempt\\\", 3), zap.Duration(\\\"backoff\\\", time.Second), )\",\"提示\",\"Zap 的使用非常简单，麻烦的点在于配置出一个适合自己项目的日志，官方例子很少，要多读源代码注释。\"]},\"839\":{\"h\":\"配置\",\"t\":[\"一般来说日志的配置都是写在配置文件里的，Zap 的配置也支持通过配置文件反序列化，但是仅支持基础的配置，即便是高级配置官方给出的例子也是十分简洁，并不足以投入使用，所以要详细讲一下细节的配置。\",\"首先看一下总体的配置结构体，需要先搞明白里面的每一个字段的含义\",\"type Config struct { // 最小日志级别 Level AtomicLevel `json:\\\"level\\\" yaml:\\\"level\\\"` // 开发模式，主要影响堆栈跟踪 Development bool `json:\\\"development\\\" yaml:\\\"development\\\"` // 调用者追踪 DisableCaller bool `json:\\\"disableCaller\\\" yaml:\\\"disableCaller\\\"` // 堆栈跟踪 DisableStacktrace bool `json:\\\"disableStacktrace\\\" yaml:\\\"disableStacktrace\\\"` // 采样，在限制日志对性能占用的情况下仅记录部分比较有代表性的日志，等于日志选择性记录 Sampling *SamplingConfig `json:\\\"sampling\\\" yaml:\\\"sampling\\\"` // 编码，分为json和console两种模式 Encoding string `json:\\\"encoding\\\" yaml:\\\"encoding\\\"` // 编码配置，主要是一些输出格式化的配置 EncoderConfig zapcore.EncoderConfig `json:\\\"encoderConfig\\\" yaml:\\\"encoderConfig\\\"` // 日志文件输出路径 OutputPaths []string `json:\\\"outputPaths\\\" yaml:\\\"outputPaths\\\"` // 错误文件输出路径 ErrorOutputPaths []string `json:\\\"errorOutputPaths\\\" yaml:\\\"errorOutputPaths\\\"` // 给日志添加一些默认输出的内容 InitialFields map[string]interface{} `json:\\\"initialFields\\\" yaml:\\\"initialFields\\\"` }\",\"如下是关于编码配置的细节\",\"type EncoderConfig struct { // 键值，如果key为空，那么对于的属性将不会输出 MessageKey string `json:\\\"messageKey\\\" yaml:\\\"messageKey\\\"` LevelKey string `json:\\\"levelKey\\\" yaml:\\\"levelKey\\\"` TimeKey string `json:\\\"timeKey\\\" yaml:\\\"timeKey\\\"` NameKey string `json:\\\"nameKey\\\" yaml:\\\"nameKey\\\"` CallerKey string `json:\\\"callerKey\\\" yaml:\\\"callerKey\\\"` FunctionKey string `json:\\\"functionKey\\\" yaml:\\\"functionKey\\\"` StacktraceKey string `json:\\\"stacktraceKey\\\" yaml:\\\"stacktraceKey\\\"` SkipLineEnding bool `json:\\\"skipLineEnding\\\" yaml:\\\"skipLineEnding\\\"` LineEnding string `json:\\\"lineEnding\\\" yaml:\\\"lineEnding\\\"` // 一些自定义的编码器 EncodeLevel LevelEncoder `json:\\\"levelEncoder\\\" yaml:\\\"levelEncoder\\\"` EncodeTime TimeEncoder `json:\\\"timeEncoder\\\" yaml:\\\"timeEncoder\\\"` EncodeDuration DurationEncoder `json:\\\"durationEncoder\\\" yaml:\\\"durationEncoder\\\"` EncodeCaller CallerEncoder `json:\\\"callerEncoder\\\" yaml:\\\"callerEncoder\\\"` // 日志器名称编码器 EncodeName NameEncoder `json:\\\"nameEncoder\\\" yaml:\\\"nameEncoder\\\"` // 反射编码器，主要是对于interface{}类型，如果没有默认jsonencoder NewReflectedEncoder func(io.Writer) ReflectedEncoder `json:\\\"-\\\" yaml:\\\"-\\\"` // 控制台输出间隔字符串 ConsoleSeparator string `json:\\\"consoleSeparator\\\" yaml:\\\"consoleSeparator\\\"` }\",\"Option是关于一些配置的开关及应用，有很多实现。\",\"type Option interface { apply(*Logger) } // Option的实现 type optionFunc func(*Logger) func (f optionFunc) apply(log *Logger) { f(log) } // 应用 func Development() Option { return optionFunc(func(log *Logger) { log.development = true }) }\",\"这是最常用的日志核心，其内部的字段基本上就代表了我们配置的步骤，也可以参考官方在反序列化配置时的步骤，大致都是一样的。\",\"type ioCore struct { // 日志级别 LevelEnabler // 日志编码 enc Encoder // 日志书写 out WriteSyncer }\",\"zap.Encoder 负责日志的格式化，编码\",\"zap.WriteSyncer 负责日志的输出，主要是输出到文件和控制台\",\"zap.LevelEnabler 最小日志级别，该级别以下的日志不会再通过syncer输出。\"]},\"840\":{\"h\":\"日志编码\",\"t\":[\"日志编码主要涉及到对于日志的一些细节的格式化，首先看一下直接使用最原始的日志的输出。\",\"func TestQuickStart(t *testing.T) { rawJSON := []byte(`{ \\\"level\\\": \\\"debug\\\", \\\"encoding\\\": \\\"json\\\", \\\"outputPaths\\\": [\\\"stdout\\\"], \\\"errorOutputPaths\\\": [\\\"stderr\\\"], \\\"initialFields\\\": {\\\"foo\\\": \\\"bar\\\"}, \\\"encoderConfig\\\": { \\\"messageKey\\\": \\\"message\\\", \\\"levelKey\\\": \\\"level\\\", \\\"levelEncoder\\\": \\\"lowercase\\\" } }`) var cfg zap.Config if err := json.Unmarshal(rawJSON, &cfg); err != nil { panic(err) } logger := zap.Must(cfg.Build()) defer logger.Sync() logger.Info(\\\"logger construction succeeded\\\") }\",\"{\\\"level\\\":\\\"info\\\",\\\"message\\\":\\\"logger construction succeeded\\\",\\\"foo\\\":\\\"bar\\\"}\",\"会发现这行日志有几个问题：\",\"没有时间\",\"没有调用者的情况，不知道这行日志是哪里输出的，不然到时候发生错误的话都没法排查\",\"没有堆栈情况\",\"接下来就一步一步的来解决问题，主要是对zapcore.EncoderConfig来进行改造，首先我们要自己书写配置文件，不采用官方的直接反序列化。首先自己创建一个配置文件config.yml\",\"# Zap日志配置 zap: prefix: ZapLogTest timeFormat: 2006/01/02 - 15:04:05.00000 level: debug caller: true stackTrace: false encode: console # 日志输出到哪里 file | console | both writer: both logFile: maxSize: 20 backups: 5 compress: true output: - \\\"./log/output.log\\\"\",\"映射到的结构体\",\"// ZapConfig // @Date: 2023-01-09 16:37:05 // @Description: zap日志配置结构体 type ZapConfig struct { Prefix string `yaml:\\\"prefix\\\" mapstructure:\\\"\\\"prefix` TimeFormat string `yaml:\\\"timeFormat\\\" mapstructure:\\\"timeFormat\\\"` Level string `yaml:\\\"level\\\" mapstructure:\\\"level\\\"` Caller bool `yaml:\\\"caller\\\" mapstructure:\\\"caller\\\"` StackTrace bool `yaml:\\\"stackTrace\\\" mapstructure:\\\"stackTrace\\\"` Writer string `yaml:\\\"writer\\\" mapstructure:\\\"writer\\\"` Encode string `yaml:\\\"encode\\\" mapstructure:\\\"encode\\\"` LogFile *LogFileConfig `yaml:\\\"logFile\\\" mapstructure:\\\"logFile\\\"` } // LogFileConfig // @Date: 2023-01-09 16:38:45 // @Description: 日志文件配置结构体 type LogFileConfig struct { MaxSize int `yaml:\\\"maxSize\\\" mapstructure:\\\"maxSize\\\"` BackUps int `yaml:\\\"backups\\\" mapstructure:\\\"backups\\\"` Compress bool `yaml:\\\"compress\\\" mapstructure:\\\"compress\\\"` Output []string `yaml:\\\"output\\\" mapstructure:\\\"output\\\"` Errput []string `yaml:\\\"errput\\\" mapstructure:\\\"errput\\\"` }\",\"提示\",\"读取配置使用Viper，具体代码省略。\",\"type TimeEncoder func(time.Time, PrimitiveArrayEncoder)\",\"TimerEncoder本质上其实是一个函数，我们可以采用官方提供的其他时间编码器，也可以自行编写。\",\"func CustomTimeFormatEncoder(t time.Time, encoder zapcore.PrimitiveArrayEncoder) { encoder.AppendString(global.Config.ZapConfig.Prefix + \\\"\\\\t\\\" + t.Format(global.Config.ZapConfig.TimeFormat)) }\",\"整体部分如下\",\"func zapEncoder(config *ZapConfig) zapcore.Encoder { // 新建一个配置 encoderConfig := zapcore.EncoderConfig{ TimeKey: \\\"Time\\\", LevelKey: \\\"Level\\\", NameKey: \\\"Logger\\\", CallerKey: \\\"Caller\\\", MessageKey: \\\"Message\\\", StacktraceKey: \\\"StackTrace\\\", LineEnding: zapcore.DefaultLineEnding, FunctionKey: zapcore.OmitKey, } // 自定义时间格式 encoderConfig.EncodeTime = CustomTimeFormatEncoder // 日志级别大写 encoderConfig.EncodeLevel = zapcore.CapitalColorLevelEncoder // 秒级时间间隔 encoderConfig.EncodeDuration = zapcore.SecondsDurationEncoder // 简短的调用者输出 encoderConfig.EncodeCaller = zapcore.ShortCallerEncoder // 完整的序列化logger名称 encoderConfig.EncodeName = zapcore.FullNameEncoder // 最终的日志编码 json或者console switch config.Encode { case \\\"json\\\": { return zapcore.NewJSONEncoder(encoderConfig) } case \\\"console\\\": { return zapcore.NewConsoleEncoder(encoderConfig) } } // 默认console return zapcore.NewConsoleEncoder(encoderConfig) }\"]},\"841\":{\"h\":\"日式输出\",\"t\":[\"日志输出分为控制台输出和文件输出，我们可以根据配置文件来进行动态配置，并且如果想要进行日志文件切割的话还需要使用另一个第三方的依赖。\",\"go get -u github.com/natefinch/lumberjack\",\"最后代码如下\",\" func zapWriteSyncer(cfg *ZapConfig) zapcore.WriteSyncer { syncers := make([]zapcore.WriteSyncer, 0, 2) // 如果开启了日志控制台输出，就加入控制台书写器 if cfg.Writer == config.WriteBoth || cfg.Writer == config.WriteConsole { syncers = append(syncers, zapcore.AddSync(os.Stdout)) } // 如果开启了日志文件存储，就根据文件路径切片加入书写器 if cfg.Writer == config.WriteBoth || cfg.Writer == config.WriteFile { // 添加日志输出器 for _, path := range cfg.LogFile.Output { logger := &lumberjack.Logger{ Filename: path, //文件路径 MaxSize: cfg.LogFile.MaxSize, //分割文件的大小 MaxBackups: cfg.LogFile.BackUps, //备份次数 Compress: cfg.LogFile.Compress, // 是否压缩 LocalTime: true, //使用本地时间 } syncers = append(syncers, zapcore.Lock(zapcore.AddSync(logger))) } } return zap.CombineWriteSyncers(syncers...) }\"]},\"842\":{\"h\":\"日志级别\",\"t\":[\"官方有关于日志级别的枚举项，直接使用即可。\",\"func zapLevelEnabler(cfg *ZapConfig) zapcore.LevelEnabler { switch cfg.Level { case config.DebugLevel: return zap.DebugLevel case config.InfoLevel: return zap.InfoLevel case config.ErrorLevel: return zap.ErrorLevel case config.PanicLevel: return zap.PanicLevel case config.FatalLevel: return zap.FatalLevel } // 默认Debug级别 return zap.DebugLevel }\"]},\"843\":{\"h\":\"最后构建\",\"t\":[\"func InitZap(config *ZapConfig) *zap.Logger { // 构建编码器 encoder := zapEncoder(config) // 构建日志级别 levelEnabler := zapLevelEnabler(config) // 最后获得Core和Options subCore, options := tee(config, encoder, levelEnabler) // 创建Logger return zap.New(subCore, options...) } // 将所有合并 func tee(cfg *ZapConfig, encoder zapcore.Encoder, levelEnabler zapcore.LevelEnabler) (core zapcore.Core, options []zap.Option) { sink := zapWriteSyncer(cfg) return zapcore.NewCore(encoder, sink, levelEnabler), buildOptions(cfg, levelEnabler) } // 构建Option func buildOptions(cfg *ZapConfig, levelEnabler zapcore.LevelEnabler) (options []zap.Option) { if cfg.Caller { options = append(options, zap.AddCaller()) } if cfg.StackTrace { options = append(options, zap.AddStacktrace(levelEnabler)) } return }\",\"最后效果\",\"ZapLogTest 2023/01/09 - 19:44:00.91076 INFO demo/zap.go:49 日志初始化完成\"]},\"844\":{\"h\":\"decimal\",\"t\":[\"仓库：shopspring/decimal: Arbitrary-precision fixed-point decimal numbers in go (github.com)\",\"文档：decimal package - github.com/shopspring/decimal - Go Packages\"]},\"845\":{\"h\":\"简介\",\"t\":[\"一个用 GO 编写的十进制浮点数工具库，具有以下特点：\",\"零值为 0，不需要初始化即可安全使用\",\"加法，减法，乘法，不会损失精度\",\"以指定的精度除法\",\"数据库/sql 序列化/反序列化\",\"JSON 和 XML 序列化/反序列化\"]},\"846\":{\"h\":\"安装\",\"t\":[\"go get github.com/shopspring/decimal\"]},\"847\":{\"h\":\"快速开始\",\"t\":[\"package main import ( \\\"fmt\\\" \\\"github.com/shopspring/decimal\\\" ) func main() { price, err := decimal.NewFromString(\\\"136.02\\\") if err != nil { panic(err) } quantity := decimal.NewFromInt(3) fee, _ := decimal.NewFromString(\\\".035\\\") taxRate, _ := decimal.NewFromString(\\\".08875\\\") subtotal := price.Mul(quantity) preTax := subtotal.Mul(fee.Add(decimal.NewFromFloat(1))) total := preTax.Mul(taxRate.Add(decimal.NewFromFloat(1))) fmt.Println(\\\"Subtotal:\\\", subtotal) // Subtotal: 408.06 fmt.Println(\\\"Pre-tax:\\\", preTax) // Pre-tax: 422.3421 fmt.Println(\\\"Taxes:\\\", total.Sub(preTax)) // Taxes: 37.482861375 fmt.Println(\\\"Total:\\\", total) // Total: 459.824961375 fmt.Println(\\\"Tax rate:\\\", total.Sub(preTax).Div(preTax)) // Tax rate: 0.08875 }\"]},\"848\":{\"h\":\"Gorm\",\"t\":[\"官方文档：GORM - The fantastic ORM library for Golang, aims to be developer friendly.\",\"开源仓库：go-gorm/gorm: The fantastic ORM library for Golang, aims to be developer friendly (github.com)\",\"在 go 社区中，对于数据库交互这一块，有两派人，一派人更喜欢简洁的sqlx这一类的库，功能并不那么强大但是自己可以时时刻刻把控 sql，性能优化到极致。另一派人喜欢为了开发效率而生的 ORM，可以省去开发过程中许多不必要的麻烦。而提到 ORM，在 go 语言社区中就绝对绕不开gorm，它是一个非常老牌的 ORM，与之类似的还有相对比较年轻的xorm，ent等。这篇文章讲的就是关于 gorm 的内容，本文只是对它的基础入门内容做一个讲解，权当是抛砖引玉，想要了解更深的细节可以阅读官方文档，它的中文文档已经相当完善了，并且笔者也是 gorm 文档的翻译人员之一。\"]},\"849\":{\"h\":\"特点\",\"t\":[\"全功能 ORM\",\"关联 (拥有一个，拥有多个，属于，多对多，多态，单表继承)\",\"Create，Save，Update，Delete，Find 中钩子方法\",\"支持 Preload、Joins 的预加载\",\"事务，嵌套事务，Save Point，Rollback To to Saved Point\",\"Context、预编译模式、DryRun 模式\",\"批量插入，FindInBatches，Find/Create with Map，使用 SQL 表达式、Context Valuer 进行 CRUD\",\"SQL 构建器，Upsert，锁，Optimizer/Index/Comment Hint，命名参数，子查询\",\"复合主键，索引，约束\",\"自动迁移\",\"自定义 Logger\",\"灵活的可扩展插件 API：Database Resolver（多数据库，读写分离）、Prometheus…\",\"每个特性都经过了测试的重重考验\",\"开发者友好\",\"gorm 当然也有一些缺点，比如几乎所有的方法参数都是空接口类型，不去看文档恐怕根本就不知道到底该传什么参数，有时候可以传结构体，有时候可以传字符串，有时候可以传 map，有时候可以传切片，语义比较模糊，并且很多情况还是需要自己手写 SQL。\",\"作为替代的有两个 orm 可以试一试，第一个是aorm，刚开源不久，它不再需要去自己手写表的字段名，大多情况下都是链式操作，基于反射实现，由于 star 数目不多，可以再观望下。第二个就是ent，是facebook开源的 orm，它同样支持链式操作，并且大多数情况下不需要自己去手写 SQL，它的设计理念上是基于图（数据结构里面的那个图），实现上基于代码生成而非反射（比较认同这个），但是文档是全英文的，有一定的上手门槛。\"]},\"850\":{\"h\":\"安装\",\"t\":[\"安装 gorm 库\",\"$ go get -u gorm.io/gorm\"]},\"851\":{\"h\":\"连接\",\"t\":[\"gorm 目前支持以下几种数据库\",\"MySQL ：\\\"gorm.io/driver/mysql\\\"\",\"PostgreSQL： \\\"gorm.io/driver/postgres\\\"\",\"SQLite：\\\"gorm.io/driver/sqlite\\\"\",\"SQL Server：\\\"gorm.io/driver/sqlserver\\\"\",\"TIDB：\\\"gorm.io/driver/mysql\\\"，TIDB 兼容 mysql 协议\",\"ClickHouse：\\\"gorm.io/driver/clickhouse\\\"\",\"除此之外，还有一些其它的数据库驱动是由第三方开发者提供的，比如 oracle 的驱动CengSin/oracle。本文接下来将使用 MySQL 来进行演示，使用的什么数据库，就需要安装什么驱动，这里安装 Mysql 的 gorm 驱动。\",\"$ go get -u gorm.io/driver/mysql\",\"然后使用 dsn（data source name）连接到数据库，驱动库会自行将 dsn 解析为对应的配置\",\"package main import ( \\\"gorm.io/driver/mysql\\\" \\\"gorm.io/gorm\\\" \\\"log/slog\\\" ) func main() { dsn := \\\"root:123456@tcp(192.168.48.138:3306)/hello?charset=utf8mb4&parseTime=True&loc=Local\\\" db, err := gorm.Open(mysql.Open(dsn)) if err != nil { slog.Error(\\\"db connect error\\\", err) } slog.Info(\\\"db connect success\\\") }\",\"或者手动传入配置\",\"package main import ( \\\"gorm.io/driver/mysql\\\" \\\"gorm.io/gorm\\\" \\\"log/slog\\\" ) func main() { db, err := gorm.Open(mysql.New(mysql.Config{})) if err != nil { slog.Error(\\\"db connect error\\\", err) } slog.Info(\\\"db connect success\\\") }\",\"两种方法都是等价的，看自己使用习惯。\"]},\"852\":{\"h\":\"连接配置\",\"t\":[\"通过传入gorm.Config配置结构体，我们可以控制 gorm 的一些行为\",\"db, err := gorm.Open(mysql.Open(dsn), &gorm.Config{})\",\"下面是一些简单的解释，使用时可以根据自己的需求来进行配置。\",\"type Config struct { // 禁用默认事务，gorm在单个创建和更新时都会开启事务以保持数据一致性 SkipDefaultTransaction bool // 自定义的命名策略 NamingStrategy schema.Namer // 保存完整的关联 FullSaveAssociations bool // 自定义logger Logger logger.Interface // 自定义nowfunc，用于注入CreatedAt和UpdatedAt字段 NowFunc func() time.Time // 只生成sql不执行 DryRun bool // 使用预编译语句 PrepareStmt bool // 建立连接后，ping一下数据库 DisableAutomaticPing bool // 在迁移数据库时忽略外键 DisableForeignKeyConstraintWhenMigrating bool // 在迁移数据库时忽略关联引用 IgnoreRelationshipsWhenMigrating bool // 禁用嵌套事务 DisableNestedTransaction bool // 运行全局更新，就是不加where的update AllowGlobalUpdate bool // 对表的所有字段进行查询 QueryFields bool // 批量创建的size CreateBatchSize int // 启用错误转换 TranslateError bool // ClauseBuilders clause builder ClauseBuilders map[string]clause.ClauseBuilder // ConnPool db conn pool ConnPool ConnPool // Dialector database dialector Dialector // Plugins registered plugins Plugins map[string]Plugin callbacks *callbacks cacheStore *sync.Map }\"]},\"853\":{\"h\":\"模型\",\"t\":[\"在 gorm 中，模型与数据库表相对应，它通常由结构体的方式展现，例如下面的结构体。\",\"type Person struct { Id uint Name string Address string Mom string Dad string }\",\"结构体的内部可以由基本数据类型与实现了sql.Scanner和 sql.Valuer接口的类型组成。在默认情况下，Person结构体所映射的表名为perons，其为蛇形复数风格，以下划线分隔。列名同样是以蛇形风格，比如Id对应列名id，gorm 同样也提供了一些方式来对其进行配置。\"]},\"854\":{\"h\":\"指定列名\",\"t\":[\"通过结构体标签，我们可以对结构体字段指定列名，这样在实体映射的时候，gorm 就会使用指定的列名。\",\"type Person struct { Id uint `gorm:\\\"column:ID;\\\"` Name string `gorm:\\\"column:Name;\\\"` Address string Mom string Dad string }\"]},\"855\":{\"h\":\"指定表名\",\"t\":[\"通过实现Table接口，就可以指定表明，它只有一个方法，就是返回表名。\",\"type Tabler interface { TableName() string }\",\"在实现的方法中，它返回了字符串person，在数据库迁移的时候，gorm 会创建名为person的表。\",\"type Person struct { Id uint `gorm:\\\"column:ID;\\\"` Name string `gorm:\\\"column:Name;\\\"` Address string Mom string Dad string } func (p Person) TableName() string { return \\\"person\\\" }\",\"对于命名策略，也可以在创建连接时传入自己的策略实现来达到自定义的效果。\"]},\"856\":{\"h\":\"时间追踪\",\"t\":[\"type Person struct { Id uint Name string Address string Mom string Dad string CreatedAt sql.NullTime UpdatedAt sql.NullTime } func (p Person) TableName() string { return \\\"person\\\" }\",\"当包含CreatedAt或UpdatedAt字段时，在创建或更新记录时，如果其为零值，那么 gorm 会自动使用time.Now()来设置时间。\",\"db.Create(&Person{ Name: \\\"jack\\\", Address: \\\"usa\\\", Mom: \\\"lili\\\", Dad: \\\"tom\\\", }) // INSERT INTO `person` (`name`,`address`,`mom`,`dad`,`created_at`,`updated_at`) VALUES ('jack','usa','lili','tom','2023-10-25 14:43:57.16','2023-10-25 14:43:57.16')\",\"gorm 也支持时间戳追踪\",\"type Person struct { Id uint `gorm:\\\"primaryKey;\\\"` Name string `gorm:\\\"primaryKey;\\\"` Address string Mom string Dad string // nanoseconds CreatedAt uint64 `gorm:\\\"autoCreateTime:nano;\\\"` // milliseconds UpdatedAt uint64 `gorm:\\\"autoUpdateTime;milli;\\\"` }\",\"那么在Create执行时，等价于下面的 SQL\",\"INSERT INTO `person` (`name`,`address`,`mom`,`dad`,`created_at`,`updated_at`) VALUES ('jack','usa','lili','tom',1698216540519000000,1698216540)\",\"在实际情况中，如果有时间追踪的需要，我更推荐后端存储时间戳，在跨时区的情况下，处理更为简单。\"]},\"857\":{\"h\":\"Model\",\"t\":[\"gorm 提供了一个预设的Model结构体，它包含 ID 主键，以及两个时间追踪字段，和一个软删除记录字段。\",\"type Model struct { ID uint `gorm:\\\"primarykey\\\"` CreatedAt time.Time UpdatedAt time.Time DeletedAt DeletedAt `gorm:\\\"index\\\"` }\",\"在使用时只需要将其嵌入到你的实体模型中即可。\",\"type Order struct { gorm.Model Name string }\",\"这样它就会自动具备gorm.Model所有的特性。\"]},\"858\":{\"h\":\"主键\",\"t\":[\"在默认情况下，名为Id的字段就是主键，使用结构体标签可以指定主键字段\",\"type Person struct { Id uint `gorm:\\\"primaryKey;\\\"` Name string Address string Mom string Dad string CreatedAt sql.NullTime UpdatedAt sql.NullTime }\",\"多个字段形成联合主键\",\"type Person struct { Id uint `gorm:\\\"primaryKey;\\\"` Name string `gorm:\\\"primaryKey;\\\"` Address string Mom string Dad string CreatedAt sql.NullTime UpdatedAt sql.NullTime }\"]},\"859\":{\"h\":\"索引\",\"t\":[\"通过index结构体标签可以指定列索引\",\"type Person struct { Id uint `gorm:\\\"primaryKey;\\\"` Name string `gorm:\\\"primaryKey;\\\"` Address string `gorm:\\\"index:idx_addr,unique,sort:desc;\\\"` Mom string Dad string // nanoseconds CreatedAt uint64 `gorm:\\\"autoCreateTime:nano;\\\"` // milliseconds UpdatedAt uint64 `gorm:\\\"autoUpdateTime;milli;\\\"` }\",\"在上面的结构体中，对Address字段建立了唯一索引。两个字段使用同一个名字的索引就会创建复合索引\",\"type Person struct { Id uint `gorm:\\\"primaryKey;\\\"` Name string `gorm:\\\"primaryKey;\\\"` Address string `gorm:\\\"index:idx_addr,unique;\\\"` School string `gorm:\\\"index:idx_addr,unique;\\\"` Mom string Dad string // nanoseconds CreatedAt uint64 `gorm:\\\"autoCreateTime:nano;\\\"` // milliseconds UpdatedAt uint64 `gorm:\\\"autoUpdateTime;milli;\\\"` }\"]},\"860\":{\"h\":\"外键\",\"t\":[\"在结构体中定义外键关系，是通过嵌入结构体的方式来进行的，比如\",\"type Person struct { Id uint `gorm:\\\"primaryKey;\\\"` Name string MomId uint Mom Mom `gorm:\\\"foreignKey:MomId;\\\"` DadId uint Dad Dad `gorm:\\\"foreignKey:DadId;\\\"` } type Mom struct { Id uint Name string Persons []Person `gorm:\\\"foreignKey:MomId;\\\"` } type Dad struct { Id uint Name string Persons []Person `gorm:\\\"foreignKey:DadId;\\\"` }\",\"例子中，Person结构体有两个外键，分别引用了Dad和Mom两个结构体的主键，默认引用也就是主键。Person对于Dad和Mom是一对一的关系，一个人只能有一个爸爸和妈妈。Dad和Mom对于Person是一对多的关系，因为爸爸和妈妈可以有多个孩子。\",\"Mom Mom `gorm:\\\"foreignKey:MomId;\\\"`\",\"嵌入结构体的作用是为了方便指定外键和引用，在默认情况下，外键字段名格式是被引用类型名+Id，比如MomId。默认情况下是引用的主键，通过结构体标签可以指定引用某一个字段\",\"type Person struct { Id uint `gorm:\\\"primaryKey;\\\"` Name string MomId uint Mom Mom `gorm:\\\"foreignKey:MomId;references:Sid;constraint:OnUpdate:CASCADE,OnDelete:SET NULL;\\\"` DadId uint Dad Dad `gorm:\\\"foreignKey:DadId;constraint:OnUpdate:CASCADE,OnDelete:SET NULL;\\\"` } type Mom struct { Id uint Sid uint `gorm:\\\"uniqueIndex;\\\"` Name string Persons []Person `gorm:\\\"foreignKey:MomId;\\\"` }\",\"其中constraint:OnUpdate:CASCADE,OnDelete:SET NULL;便是定义的外键约束。\"]},\"861\":{\"h\":\"钩子\",\"t\":[\"一个实体模型可以自定义钩子\",\"创建\",\"更新\",\"删除\",\"查询\",\"对应的接口分别如下\",\"// 创建前触发 type BeforeCreateInterface interface { BeforeCreate(*gorm.DB) error } // 创建后触发 type AfterCreateInterface interface { AfterCreate(*gorm.DB) error } // 更新前触发 type BeforeUpdateInterface interface { BeforeUpdate(*gorm.DB) error } // 更新后触发 type AfterUpdateInterface interface { AfterUpdate(*gorm.DB) error } // 保存前触发 type BeforeSaveInterface interface { BeforeSave(*gorm.DB) error } // 保存后触发 type AfterSaveInterface interface { AfterSave(*gorm.DB) error } // 删除前触发 type BeforeDeleteInterface interface { BeforeDelete(*gorm.DB) error } // 删除后触发 type AfterDeleteInterface interface { AfterDelete(*gorm.DB) error } // 查询后触发 type AfterFindInterface interface { AfterFind(*gorm.DB) error }\",\"结构体通过实现这些接口，可以自定义一些行为。\"]},\"862\":{\"h\":\"标签\",\"t\":[\"下面是 gorm 支持的一些标签\",\"| 标签名 | 说明 | | :----------------------- | :----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | --- | | column | 指定 db 列名 | | type | 列数据类型，推荐使用兼容性好的通用类型，例如：所有数据库都支持 bool、int、uint、float、string、time、bytes 并且可以和其他标签一起使用，例如：not null、size, autoIncrement… 像 varbinary(8) 这样指定数据库数据类型也是支持的。在使用指定数据库数据类型时，它需要是完整的数据库数据类型，如：MEDIUMINT UNSIGNED not NULL AUTO_INCREMENT | | serializer | 指定将数据序列化或反序列化到数据库中的序列化器, 例如: serializer:json/gob/unixtime | | size | 定义列数据类型的大小或长度，例如 size: 256 | | primaryKey | 将列定义为主键 | | unique | 将列定义为唯一键 | | default | 定义列的默认值 | | precision | 指定列的精度 | | scale | 指定列大小 | | not null | 指定列为 NOT NULL | | autoIncrement | 指定列为自动增长 | | autoIncrementIncrement | 自动步长，控制连续记录之间的间隔 | | embedded | 嵌套字段 | | embeddedPrefix | 嵌入字段的列名前缀 | | autoCreateTime | 创建时追踪当前时间，对于 int 字段，它会追踪时间戳秒数，您可以使用 nano/milli 来追踪纳秒、毫秒时间戳，例如：autoCreateTime:nano | | autoUpdateTime | 创建/更新时追踪当前时间，对于 int 字段，它会追踪时间戳秒数，您可以使用 nano/milli 来追踪纳秒、毫秒时间戳，例如：autoUpdateTime:milli | | index | 根据参数创建索引，多个字段使用相同的名称则创建复合索引，查看 索引 open in new window 获取详情 | | uniqueIndex | 与 index 相同，但创建的是唯一索引 | | check | 创建检查约束，例如 check:age > 13，查看 约束 open in new window 获取详情 | | <- | 设置字段写入的权限， <-:create 只创建、<-:update 只更新、<-:false 无写入权限、<- 创建和更新权限 | | -> | 设置字段读的权限，->:false 无读权限 | | - | 忽略该字段，- 表示无读写，-:migration 表示无迁移权限，-:all 表示无读写迁移权限 | | comment | 迁移时为字段添加注释 | | | foreignKey | 指定当前模型的列作为连接表的外键 | | references | 指定引用表的列名，其将被映射为连接表外键 | | polymorphic | 指定多态类型，比如模型名 | | polymorphicValue | 指定多态值、默认表名 | | many2many | 指定连接表表名 | | joinForeignKey | 指定连接表的外键列名，其将被映射到当前表 | | joinReferences | 指定连接表的外键列名，其将被映射到引用表 | | constraint | 关系约束，例如：OnUpdate、OnDelete |\"]},\"863\":{\"h\":\"迁移\",\"t\":[\"AutoMigrate方法会帮助我们进行自动迁移，它会创建表，约束，索引，外键等等。\",\"func (db *DB) AutoMigrate(dst ...interface{}) error\",\"例如\",\"type Person struct { Id uint `gorm:\\\"primaryKey;\\\"` Name string `gorm:\\\"type:varchar(100);uniqueIndex;\\\"` Address string } type Order struct { Id uint Name string } db.AutoMigrate(Person{}, Order{}) // CREATE TABLE `person` (`id` bigint unsigned AUTO_INCREMENT,`name` varchar(100),`address` longtext,PRIMARY KEY (`id`),UNIQUE INDEX `idx_person_name` (`name`)) // CREATE TABLE `orders` (`id` bigint unsigned AUTO_INCREMENT,`name` longtext,PRIMARY KEY (`id`))\",\"或者也可以我们手动来操作，通过Migrator方法访问Migrator接口\",\"func (db *DB) Migrator() Migrator\",\"它支持以下接口方法\",\"type Migrator interface { // AutoMigrate AutoMigrate(dst ...interface{}) error // Database CurrentDatabase() string FullDataTypeOf(*schema.Field) clause.Expr GetTypeAliases(databaseTypeName string) []string // Tables CreateTable(dst ...interface{}) error DropTable(dst ...interface{}) error HasTable(dst interface{}) bool RenameTable(oldName, newName interface{}) error GetTables() (tableList []string, err error) TableType(dst interface{}) (TableType, error) // Columns AddColumn(dst interface{}, field string) error DropColumn(dst interface{}, field string) error AlterColumn(dst interface{}, field string) error MigrateColumn(dst interface{}, field *schema.Field, columnType ColumnType) error HasColumn(dst interface{}, field string) bool RenameColumn(dst interface{}, oldName, field string) error ColumnTypes(dst interface{}) ([]ColumnType, error) // Views CreateView(name string, option ViewOption) error DropView(name string) error // Constraints CreateConstraint(dst interface{}, name string) error DropConstraint(dst interface{}, name string) error HasConstraint(dst interface{}, name string) bool // Indexes CreateIndex(dst interface{}, name string) error DropIndex(dst interface{}, name string) error HasIndex(dst interface{}, name string) bool RenameIndex(dst interface{}, oldName, newName string) error GetIndexes(dst interface{}) ([]Index, error) }\",\"方法列表中涉及到了数据库，表，列，视图，索引，约束多个维度，对需要自定义的用户来说可以更加精细化的操作。\"]},\"864\":{\"h\":\"指定表注释\",\"t\":[\"在迁移时，如果想要添加表注释，可以按照如下方法来设置\",\"db.Set(\\\"gorm:table_options\\\", \\\" comment 'person table'\\\").Migrator().CreateTable(Person{})\",\"需要注意的是如果使用的是AutoMigrate()方法来进行迁移，且结构体之间具引用关系，gorm 会进行递归先创建引用表，这就会导致被引用表和引用表的注释都是重复的，所以推荐使用CreateTable方法来创建。\",\"提示\",\"在创建表时CreateTable方法需要保证被引用表比引用表先创建，否则会报错，而AutoMigrate方法则不需要，因为它会顺着关系引用关系递归创建。\"]},\"865\":{\"h\":\"创建\"},\"866\":{\"h\":\"Create\",\"t\":[\"在创建新的记录时，大多数情况都会用到Create方法\",\"func (db *DB) Create(value interface{}) (tx *DB)\",\"现有如下的结构体\",\"type Person struct { Id uint `gorm:\\\"primaryKey;\\\"` Name string }\",\"创建一条记录\",\"user := Person{ Name: \\\"jack\\\", } // 必须传入引用 db = db.Create(&user) // 执行过程中发生的错误 err = db.Error // 创建的数目 affected := db.RowsAffected\",\"创建完成后，gorm 会将主键写入 user 结构体中，所以这也是为什么必须得传入指针。如果传入的是一个切片，就会批量创建\",\"user := []Person{ {Name: \\\"jack\\\"}, {Name: \\\"mike\\\"}, {Name: \\\"lili\\\"}, } db = db.Create(&user)\",\"同样的，gorm 也会将主键写入切片中。当数据量过大时，也可以使用CreateInBatches方法分批次创建，因为生成的INSERT INTO table VALUES (),()这样的 SQL 语句会变的很长，每个数据库对 SQL 长度是有限制的，所以必要的时候可以选择分批次创建。\",\"db = db.CreateInBatches(&user, 50)\",\"除此之外，Save方法也可以创建记录，它的作用是当主键匹配时就更新记录，否则就插入。\",\"func (db *DB) Save(value interface{}) (tx *DB)\",\"user := []Person{ {Name: \\\"jack\\\"}, {Name: \\\"mike\\\"}, {Name: \\\"lili\\\"}, } db = db.Save(&user)\"]},\"867\":{\"h\":\"Upsert\",\"t\":[\"Save方法只能是匹配主键，我们可以通过构建Clause来完成更加自定义的 upsert。比如下面这行代码\",\"db.Clauses(clause.OnConflict{ Columns: []clause.Column{{Name: \\\"name\\\"}}, DoNothing: false, DoUpdates: clause.AssignmentColumns([]string{\\\"address\\\"}), UpdateAll: false, }).Create(&p)\",\"它的作用是当字段name冲突后，更新字段address的值，不冲突的话就会创建一个新的记录。也可以在冲突的时候什么都不做\",\"db.Clauses(clause.OnConflict{ Columns: []clause.Column{{Name: \\\"name\\\"}}, DoNothing: true, }).Create(&p)\",\"或者直接更新所有字段\",\"db.Clauses(clause.OnConflict{ Columns: []clause.Column{{Name: \\\"name\\\"}}, UpdateAll: true, }).Create(&p)\",\"在使用 upsert 之前，记得给冲突字段添加索引。\"]},\"868\":{\"h\":\"查询\"},\"869\":{\"h\":\"First\",\"t\":[\"gorm 对于查询而言，提供了相当多的方法可用，第一个就是First方法\",\"func (db *DB) First(dest interface{}, conds ...interface{}) (tx *DB)\",\"它的作用是按照主键升序查找第一条记录，例如\",\"var person Person result := db.First(&person) err := result.Error affected := result.RowsAffected\",\"传入dest指针方便让 gorm 将查询到的数据映射到结构体中。\",\"或者使用Table和Model方法可以指定查询表，前者接收字符串表名，后者接收实体模型。\",\"db.Table(\\\"person\\\").Find(&p) db.Model(Person{}).Find(&p)\",\"提示\",\"如果传入的指针元素包含实体模型比如说结构体指针，或者是结构体切片的指针，那么就不需要手动使用指定查哪个表，这个规则适用于所有的增删改查操作。\"]},\"870\":{\"h\":\"Take\",\"t\":[\"Take方法与First类似，区别就是不会根据主键排序。\",\"func (db *DB) Take(dest interface{}, conds ...interface{}) (tx *DB)\",\"var person Person result := db.Take(&person) err := result.Error affected := result.RowsAffected\"]},\"871\":{\"h\":\"Pluck\",\"t\":[\"Pluck方法用于批量查询一个表的单列，查询的结果可以收集到一个指定类型的切片中，不一定非得是实体类型的切片。\",\"func (db *DB) Pluck(column string, dest interface{}) (tx *DB)\",\"比如将所有人的地址搜集到一个字符串切片中\",\"var adds []string // SELECT `address` FROM `person` WHERE name IN ('jack','lili') db.Model(Person{}).Where(\\\"name IN ?\\\", []string{\\\"jack\\\", \\\"lili\\\"}).Pluck(\\\"address\\\", &adds)\",\"其实就等同于\",\"db.Select(\\\"address\\\").Where(\\\"name IN ?\\\", []string{\\\"jack\\\", \\\"lili\\\"}).Find(&adds)\"]},\"872\":{\"h\":\"Count\",\"t\":[\"Count方法用于统计实体记录的数量\",\"func (db *DB) Count(count *int64) (tx *DB)\",\"看一个使用示例\",\"var count int64 // SELECT count(*) FROM `person` db.Model(Person{}).Count(&count)\"]},\"873\":{\"h\":\"Find\",\"t\":[\"批量查询最常用的是Find方法\",\"func (db *DB) Find(dest interface{}, conds ...interface{}) (tx *DB)\",\"它会根据给定的条件查找出所有符合的记录\",\"// SELECT * FROM `person` var ps []Person db.Find(&ps)\"]},\"874\":{\"h\":\"Select\",\"t\":[\"gorm 在默认情况下是查询所有字段，我们可以通过Select方法来指定字段\",\"func (db *DB) Select(query interface{}, args ...interface{}) (tx *DB)\",\"比如\",\"// SELECT `address`,`name` FROM `person` ORDER BY `person`.`id` LIMIT 1 db.Select(\\\"address\\\", \\\"name\\\").First(&p)\",\"等同于\",\"db.Select([]string{\\\"address\\\", \\\"name\\\"}).First(&p)\",\"同时，还可以使用Omit方法来忽略字段\",\"func (db *DB) Omit(columns ...string) (tx *DB)\",\"比如\",\"// SELECT `person`.`id`,`person`.`name` FROM `person` WHERE id IN (1,2,3,4) db.Omit(\\\"address\\\").Where(\\\"id IN ?\\\", []int{1, 2, 3, 4}).Find(&ps)``\",\"由Select和Omit选择或忽略的字段，在创建更新查询的时候都会起作用。\"]},\"875\":{\"h\":\"Where\",\"t\":[\"条件查询会用到Where方法\",\"func (db *DB) Where(query interface{}, args ...interface{}) (tx *DB)\",\"下面是一个简单的示例\",\"var p Person db.Where(\\\"id = ?\\\", 1).First(&p)\",\"在链式操作中使用多个Where会构建多个AND语句，比如\",\"// SELECT * FROM `person` WHERE id = 1 AND name = 'jack' ORDER BY `person`.`id` LIMIT 1 db.Where(\\\"id = ?\\\", 1).Where(\\\"name = ?\\\", \\\"jack\\\").First(&p)\",\"或者使用Or方法来构建OR语句\",\"func (db *DB) Or(query interface{}, args ...interface{}) (tx *DB)\",\"// SELECT * FROM `person` WHERE id = 1 OR name = 'jack' AND address = 'usa' ORDER BY `person`.`id` LIMIT 1 db.Where(\\\"id = ?\\\", 1). Or(\\\"name = ?\\\", \\\"jack\\\"). Where(\\\"address = ?\\\", \\\"usa\\\"). First(&p)\",\"还有Not方法，都是类似的\",\"func (db *DB) Not(query interface{}, args ...interface{}) (tx *DB)\",\"// SELECT * FROM `person` WHERE id = 1 OR name = 'jack' AND NOT name = 'mike' AND address = 'usa' ORDER BY `person`.`id` LIMIT 1 db.Where(\\\"id = ?\\\", 1). Or(\\\"name = ?\\\", \\\"jack\\\"). Not(\\\"name = ?\\\", \\\"mike\\\"). Where(\\\"address = ?\\\", \\\"usa\\\"). First(&p)\",\"对于IN条件，可以直接在Where方法里面传入切片。\",\"db.Where(\\\"address IN ?\\\", []string{\\\"cn\\\", \\\"us\\\"}).Find(&ps)\",\"或者多列IN条件，需要用[][]any类型来承载参数\",\"// SELECT * FROM `person` WHERE (id, name, address) IN ((1,'jack','uk'),(2,'mike','usa')) db.Where(\\\"(id, name, address) IN ?\\\", [][]any{{1, \\\"jack\\\", \\\"uk\\\"}, {2, \\\"mike\\\", \\\"usa\\\"}}).Find(&ps)\",\"gorm 支持 where 分组使用，就是将上述几个语句结合起来\",\"db.Where( db.Where(\\\"name IN ?\\\", []string{\\\"cn\\\", \\\"uk\\\"}).Where(\\\"id IN ?\\\", []uint{1, 2}), ).Or( db.Where(\\\"name IN ?\\\", []string{\\\"usa\\\", \\\"jp\\\"}).Where(\\\"id IN ?\\\", []uint{3, 4}), ).Find(&ps) // SELECT * FROM `person` WHERE (name IN ('cn','uk') AND id IN (1,2)) OR (name IN ('usa','jp') AND id IN (3,4))\"]},\"876\":{\"h\":\"Order\",\"t\":[\"排序会用到Order方法\",\"func (db *DB) Order(value interface{}) (tx *DB)\",\"来看个使用的例子\",\"var ps []Person // SELECT * FROM `person` ORDER BY name ASC, id DESC db.Order(\\\"name ASC, id DESC\\\").Find(&ps)\",\"也可以多次调用\",\"// SELECT * FROM `person` ORDER BY name ASC, id DESC,address db.Order(\\\"name ASC, id DESC\\\").Order(\\\"address\\\").Find(&ps)\"]},\"877\":{\"h\":\"Limit\",\"t\":[\"Limit和Offset方法常常用于分页查询\",\"func (db *DB) Limit(limit int) (tx *DB) func (db *DB) Offset(offset int) (tx *DB)\",\"下面是一个简单的分页示例\",\"var ( ps []Person page = 2 size = 10 ) // SELECT * FROM `person` LIMIT 10 OFFSET 10 db.Offset((page - 1) * size).Limit(size).Find(&ps)\"]},\"878\":{\"h\":\"Group\",\"t\":[\"Group和Having方法多用于分组操作\",\"func (db *DB) Group(name string) (tx *DB) func (db *DB) Having(query interface{}, args ...interface{}) (tx *DB)\",\"下面看个例子\",\"var ( ps []Person ) // SELECT `address` FROM `person` GROUP BY `address` HAVING address IN ('cn','us') db.Select(\\\"address\\\").Group(\\\"address\\\").Having(\\\"address IN ?\\\", []string{\\\"cn\\\", \\\"us\\\"}).Find(&ps)\"]},\"879\":{\"h\":\"Distinct\",\"t\":[\"Distinct方法多用于去重\",\"func (db *DB) Distinct(args ...interface{}) (tx *DB)\",\"看一个示例\",\"// SELECT DISTINCT `name` FROM `person` WHERE address IN ('cn','us') db.Where(\\\"address IN ?\\\", []string{\\\"cn\\\", \\\"us\\\"}).Distinct(\\\"name\\\").Find(&ps)\"]},\"880\":{\"h\":\"子查询\",\"t\":[\"子查询就是嵌套查询，例如想要查询出所有id值大于平均值的人\",\"// SELECT * FROM `person` WHERE id > (SELECT AVG(id) FROM `person` db.Where(\\\"id > (?)\\\", db.Model(Person{}).Select(\\\"AVG(id)\\\")).Find(&ps)\",\"from 子查询\",\"// SELECT * FROM (SELECT * FROM `person` WHERE address IN ('cn','uk')) as p db.Table(\\\"(?) as p\\\", db.Model(Person{}).Where(\\\"address IN ?\\\", []string{\\\"cn\\\", \\\"uk\\\"})).Find(&ps)\"]},\"881\":{\"h\":\"锁\",\"t\":[\"gorm 使用clause.Locking子句来提供锁的支持\",\"// SELECT * FROM `person` FOR UPDATE db.Clauses(clause.Locking{Strength: \\\"UPDATE\\\"}).Find(&ps) // SELECT * FROM `person` FOR SHARE NOWAIT db.Clauses(clause.Locking{Strength: \\\"SHARE\\\", Options: \\\"NOWAIT\\\"}).Find(&ps)\"]},\"882\":{\"h\":\"迭代\",\"t\":[\"通过Rows方法可以获取一个迭代器\",\"func (db *DB) Rows() (*sql.Rows, error)\",\"通过遍历迭代器，使用ScanRows方法可以将每一行的结果扫描到结构体中。\",\"rows, err := db.Model(Person{}).Rows() if err != nil { return } defer rows.Close() for rows.Next() { var p Person err := db.ScanRows(rows, &p) if err != nil { return } }\"]},\"883\":{\"h\":\"修改\"},\"884\":{\"h\":\"save\",\"t\":[\"在创建的时候提到过Save方法，它也可以用来更新记录，并且它会更新所有字段，即便有些结构体的字段是零值，不过如果主键匹配不到的话就会进行插入操作了。\",\"var p Person db.First(&p) p.Address = \\\"poland\\\" // UPDATE `person` SET `name`='json',`address`='poland' WHERE `id` = 2 db.Save(&p)\",\"可以看到它把除了主键以外的字段全都添到了SET语句中。\"]},\"885\":{\"h\":\"update\",\"t\":[\"所以大多数情况下，建议使用Update方法\",\"func (db *DB) Update(column string, value interface{}) (tx *DB)\",\"它主要是用来更新单列字段\",\"var p Person db.First(&p) // UPDATE `person` SET `address`='poland' WHERE id = 2 db.Model(Person{}).Where(\\\"id = ?\\\", p.Id).Update(\\\"address\\\", \\\"poland\\\")\"]},\"886\":{\"h\":\"updates\",\"t\":[\"Updates方法用于更新多列，接收结构体和 map 作为参数，并且当结构体字段为零值时，会忽略该字段，但在 map 中不会。\",\"func (db *DB) Updates(values interface{}) (tx *DB)\",\"下面是一个例子\",\"var p Person db.First(&p) // UPDATE `person` SET `name`='jojo',`address`='poland' WHERE `id` = 2 db.Model(p).Updates(Person{Name: \\\"jojo\\\", Address: \\\"poland\\\"}) // UPDATE `person` SET `address`='poland',`name`='jojo' WHERE `id` = 2 db.Model(p).Updates(map[string]any{\\\"name\\\": \\\"jojo\\\", \\\"address\\\": \\\"poland\\\"})\"]},\"887\":{\"h\":\"SQL 表达式\",\"t\":[\"有些时候，常常会会需要对字段进行一些自增或者自减等与自身进行运算的操作，一般是先查再计算然后更新，或者是使用 SQL 表达式。\",\"func Expr(expr string, args ...interface{}) clause.Expr\",\"看下面的一个例子\",\"// UPDATE `person` SET `age`=age + age,`name`='jojo' WHERE `id` = 2 db.Model(p).Updates(map[string]any{\\\"name\\\": \\\"jojo\\\", \\\"age\\\": gorm.Expr(\\\"age + age\\\")}) // UPDATE `person` SET `age`=age * 2 + age,`name`='jojo' WHERE `id` = 2 db.Model(p).Updates(map[string]any{\\\"name\\\": \\\"jojo\\\", \\\"age\\\": gorm.Expr(\\\"age * 2 + age\\\")})\"]},\"888\":{\"h\":\"删除\",\"t\":[\"在 gorm 中，删除记录会用到Delete方法，它可以直接传实体结构，也可以传条件。\",\"func (db *DB) Delete(value interface{}, conds ...interface{}) (tx *DB)\",\"例如直接传结构体\",\"var p Person db.First(&p) // // DELETE FROM `person` WHERE `person`.`id` = 2 db.Delete(&p)\",\"或者\",\"var p Person db.First(&p) // DELETE FROM `person` WHERE `person`.`id` = 2 db.Model(p).Delete(nil)\",\"或者指定条件\",\"// DELETE FROM `person` WHERE id = 2 db.Model(Person{}).Where(\\\"id = ?\\\", p.Id).Delete(nil)\",\"也可以简写成\",\"var p Person db.First(&p) // DELETE FROM `person` WHERE id = 2 db.Delete(&Person{}, \\\"id = ?\\\", 2) // DELETE FROM `person` WHERE `person`.`id` = 2 db.Delete(&Person{}, 2)\",\"批量删除的话就是传入切片\",\"// DELETE FROM `person` WHERE id IN (1,2,3) db.Delete(&Person{}, \\\"id IN ?\\\", []uint{1, 2, 3}) // DELETE FROM `person` WHERE `person`.`id` IN (1,2,3) db.Delete(&Person{}, []uint{1, 2, 3})\"]},\"889\":{\"h\":\"软删除\",\"t\":[\"假如你的实体模型使用了软删除，那么在删除时，默认进行更新操作，若要永久删除的话可以使用Unscope方法\",\"db.Unscoped().Delete(&Person{}, []uint{1, 2, 3})\"]},\"890\":{\"h\":\"关联定义\",\"t\":[\"gorm 提供了表关联的交互能力，通过嵌入结构体和字段的形式来定义结构体与结构体之间的关联。\"]},\"891\":{\"h\":\"一对一\",\"t\":[\"一对一关系是最简单的，正常情况下一个人只能有一个母亲，看下面的结构体\",\"type Person struct { Id uint Name string Address string Age uint MomId sql.NullInt64 Mom Mom `gorm:\\\"foreignKey:MomId;\\\"` } type Mom struct { Id uint Name string }\",\"Person结构体通过嵌入Mom结构体，实现了对Mom类型的引用，其中Person.MomId就是引用字段，主键Mom.Id就是被引用字段，这样就完成了一对一关系的关联。如何自定义外键以及引用和约束还有默认的外键规则这些已经在外键定义中已经讲到过，就不再赘述\",\"提示\",\"对于外键字段，推荐使用sql包提供的类型，因为外键默认可以为NULL，在使用Create创建记录时，如果使用普通类型，零值0也会被创建，不存在的外键被创建显然是不被允许的。\"]},\"892\":{\"h\":\"一对多\",\"t\":[\"下面加一个学校结构体，学校与学生是一对多的关系，一个学校有多个学校，但是一个学生只能上一个学校。\",\"type Person struct { Id uint Name string Address string Age uint MomId sql.NullInt64 Mom Mom `gorm:\\\"foreignKey:MomId;\\\"` SchoolId sql.NullInt64 School School gorm:\\\"foreignKey:SchoolId;\\\"` } type Mom struct { Id uint Name string } type School struct { Id uint Name string Persons []Person `gorm:\\\"foreignKey:SchoolId;\\\"` }\",\"school.Persons是[]person类型，表示着可以拥有多个学生，而Person则必须要有包含引用School的外键，也就是Person.SchoolId。\"]},\"893\":{\"h\":\"多对多\",\"t\":[\"一个人可以拥有很多房子，一个房子也可以住很多人，这就是一个多对多的关系。\",\"type Person struct { Id uint Name string Address string Age uint MomId sql.NullInt64 Mom Mom `gorm:\\\"foreignKey:MomId;\\\"` SchoolId sql.NullInt64 School School `gorm:\\\"foreignKey:SchoolId;\\\"` Houses []House `gorm:\\\"many2many:person_house;\\\"` } type Mom struct { Id uint Name string } type School struct { Id uint Name string Persons []Person } type House struct { Id uint Name string Persons []Person `gorm:\\\"many2many:person_house;\\\"` } type PersonHouse struct { PersonId sql.NullInt64 Person Person `gorm:\\\"foreignKey:PersonId;\\\"` HouseId sql.NullInt64 House House `gorm:\\\"foreignKey:HouseId;\\\"` }\",\"Person和House互相持有对方的切片类型表示多对多的关系，多对多关系一般需要创建连接表，通过many2many来指定连接表，连接表的外键必须要指定正确。\",\"创建完结构体后让 gorm 自动迁移到数据库中\",\"tables := []any{ School{}, Mom{}, Person{}, House{}, PersonHouse{}, } for _, table := range tables { db.Migrator().CreateTable(&table) }\",\"注意引用表与被引用表的先后创建顺序。\"]},\"894\":{\"h\":\"关联操作\",\"t\":[\"在创建完上述三种关联关系后，接下来就是如何使用关联来进行增删改查。这主要会用到Association方法\",\"func (db *DB) Association(column string) *Association\",\"它接收一个关联参数，它的值应该是嵌入引用结构体中的被引用类型的字段名。\",\"db.Model(&person).Association(\\\"Mom\\\").Find(&mom)\",\"比如关联查找一个人的母亲，Association的参数就是Mom，也就是Person.Mom字段名。\"]},\"895\":{\"h\":\"创建关联\",\"t\":[\"// 定义好数据 jenny := Mom{ Name: \\\"jenny\\\", } mit := School{ Name: \\\"MIT\\\", Persons: nil, } h1 := House{ Id: 0, Name: \\\"h1\\\", Persons: nil, } h2 := House{ Name: \\\"h2\\\", Persons: nil, } jack := Person{ Name: \\\"jack\\\", Address: \\\"usa\\\", Age: 18, } mike := Person{ Name: \\\"mike\\\", Address: \\\"uk\\\", Age: 20, } // INSERT INTO `people` (`name`,`address`,`age`,`mom_id`,`school_id`) VALUES ('jack','usa',18,NULL,NULL) db.Create(&jack) // INSERT INTO `schools` (`name`) VALUES ('MIT') db.Create(&mit) // 添加Person与Mom的关联，一对一关联 // INSERT INTO `moms` (`name`) VALUES ('jenny') ON DUPLICATE KEY UPDATE `id`=`id` // UPDATE `people` SET `mom_id`=1 WHERE `id` = 1 db.Model(&jack).Association(\\\"Mom\\\").Append(&jenny) // 添加school与Person的关联，一对多关联 // INSERT INTO `people` (`name`,`address`,`age`,`mom_id`,`school_id`,`id`) VALUES ('jack','usa',18,1,1,1),('mike','uk',20,NULL,1,DEFAULT) ON DUPLICATE KEY UPDATE `school_id`=VALUES(`school_id`) db.Model(&mit).Association(\\\"Persons\\\").Append([]Person{jack, mike}) // 添加Person与Houses的关联，多对多关联 // INSERT INTO `houses` (`name`) VALUES ('h1'),('h2') ON DUPLICATE KEY UPDATE `id`=`id` // INSERT INTO `person_house` (`person_id`,`house_id`) VALUES (1,1),(1,2) ON DUPLICATE KEY UPDATE `person_id`=`person_id` db.Model(&jack).Association(\\\"Houses\\\").Append([]House{h1, h2})\",\"假如所有的记录都不存在，在进行关联创建时，也会先创建记录再创建关联。\"]},\"896\":{\"h\":\"查找关联\",\"t\":[\"下面演示如何进行查找关联。\",\"// 一对一关联查找 var person Person var mom Mom // SELECT * FROM `people` ORDER BY `people`.`id` LIMIT 1 db.First(&person) // SELECT * FROM `moms` WHERE `moms`.`id` = 1 db.Model(person).Association(\\\"Mom\\\").Find(&mom) // 一对多关联查找 var school School var persons []Person // SELECT * FROM `schools` ORDER BY `schools`.`id` LIMIT 1 db.First(&school) // SELECT * FROM `people` WHERE `people`.`school_id` = 1 db.Model(&school).Association(\\\"Persons\\\").Find(&persons) // 多对多关联查找 var houses []House // SELECT `houses`.`id`,`houses`.`name` FROM `houses` JOIN `person_house` ON `person_house`.`house_id` = `houses`.`id` AND `person_house`.`person_id` IN (1,2) db.Model(&persons).Association(\\\"Houses\\\").Find(&houses)\",\"关联查找会根据已有的数据，去引用表中查找符合条件的记录，对于多对多关系而言，gorm 会自动完成表连接这一过程。\"]},\"897\":{\"h\":\"更新关联\",\"t\":[\"下面演示如何进行更新关联\",\"// 一对一关联更新 var jack Person lili := Mom{ Name: \\\"lili\\\", } // SELECT * FROM `people` WHERE name = 'jack' ORDER BY `people`.`id` LIMIT 1 db.Where(\\\"name = ?\\\", \\\"jack\\\").First(&jack) // INSERT INTO `moms` (`name`) VALUES ('lili') db.Create(&lili) // INSERT INTO `moms` (`name`,`id`) VALUES ('lili',2) ON DUPLICATE KEY UPDATE `id`=`id` // UPDATE `people` SET `mom_id`=2 WHERE `id` = 1 db.Model(&jack).Association(\\\"Mom\\\").Replace(&lili) // 一对多关联更新 var mit School newPerson := []Person{{Name: \\\"bob\\\"}, {Name: \\\"jojo\\\"}} // INSERT INTO `people` (`name`,`address`,`age`,`mom_id`,`school_id`) VALUES ('bob','',0,NULL,NULL),('jojo','',0,NULL,NULL) db.Create(&newPerson) // SELECT * FROM `schools` WHERE name = 'mit' ORDER BY `schools`.`id` LIMIT 1 db.Where(\\\"name = ?\\\", \\\"mit\\\").First(&mit) // INSERT INTO `people` (`name`,`address`,`age`,`mom_id`,`school_id`,`id`) VALUES ('bob','',0,NULL,1,4),('jojo','',0,NULL,1,5) ON DUPLICATE KEY UPDATE `school_id`=VALUES(`school_id`) // UPDATE `people` SET `school_id`=NULL WHERE `people`.`id` NOT IN (4,5) AND `people`.`school_id` = 1 db.Model(&mit).Association(\\\"Persons\\\").Replace(newPerson) // 多对多关联更新 // INSERT INTO `houses` (`name`) VALUES ('h3'),('h4'),('h5') ON DUPLICATE KEY UPDATE `id`=`id` // INSERT INTO `person_house` (`person_id`,`house_id`) VALUES (1,3),(1,4),(1,5) ON DUPLICATE KEY UPDATE `person_id`=`person_id` // DELETE FROM `person_house` WHERE `person_house`.`person_id` = 1 AND `person_house`.`house_id` NOT IN (3,4,5) db.Model(&jack).Association(\\\"Houses\\\").Replace([]House{{Name: \\\"h3\\\"}, {Name: \\\"h4\\\"}, {Name: \\\"h5\\\"}})\",\"在关联更新时，如果被引用数据和引用数据都不存在，gorm 会尝试创建它们。\"]},\"898\":{\"h\":\"删除关联\",\"t\":[\"下面演示如何删除关联\",\"// 一对一关联删除 var ( jack Person lili Mom ) // SELECT * FROM `people` WHERE name = 'jack' ORDER BY `people`.`id` LIMIT 1 db.Where(\\\"name = ?\\\", \\\"jack\\\").First(&jack) // SELECT * FROM `moms` WHERE name = 'lili' ORDER BY `moms`.`id` LIMIT 1 db.Where(\\\"name = ?\\\", \\\"lili\\\").First(&lili) // UPDATE `people` SET `mom_id`=NULL WHERE `people`.`id` = 1 AND `people`.`mom_id` = 2 db.Model(&jack).Association(\\\"Mom\\\").Delete(&lili) // 一对多关联删除 var ( mit School persons []Person ) // SELECT * FROM `schools` WHERE name = 'mit' ORDER BY `schools`.`id` LIMIT 1 db.Where(\\\"name = ?\\\", \\\"mit\\\").First(&mit) // SELECT * FROM `people` WHERE name IN ('jack','mike') db.Where(\\\"name IN ?\\\", []string{\\\"jack\\\", \\\"mike\\\"}).Find(&persons) // UPDATE `people` SET `school_id`=NULL WHERE `people`.`school_id` = 1 AND `people`.`id` IN (1,2) db.Model(&mit).Association(\\\"Persons\\\").Delete(&persons) // 多对多关联删除 var houses []House // SELECT * FROM `houses` WHERE name IN ('h3','h4') db.Where(\\\"name IN ?\\\", []string{\\\"h3\\\", \\\"h4\\\"}).Find(&houses) // DELETE FROM `person_house` WHERE `person_house`.`person_id` = 1 AND `person_house`.`house_id` IN (3,4) db.Model(&jack).Association(\\\"Houses\\\").Delete(&houses)\",\"关联删除时只会删除它们之间的引用关系，并不会删除实体记录。我们还可以使用Clear方法来直接清空关联\",\"db.Model(&jack).Association(\\\"Houses\\\").Clear()\",\"如果想要删除对应的实体记录，可以在Association操作后面加上Unscoped操作（不会影响 many2many）\",\"db.Model(&jack).Association(\\\"Houses\\\").Unscoped().Delete(&houses)\",\"对于一对多和多对多而言，可以使用Select操作来删除记录\",\"var ( mit School ) db.Where(\\\"name = ?\\\", \\\"mit\\\").First(&mit) db.Select(\\\"Persons\\\").Delete(&mit)\"]},\"899\":{\"h\":\"预加载\",\"t\":[\"预加载用于查询关联数据，对于具有关联关系的实体而言，它会先预先加载被关联引用的实体。之前提到的关联查询是对关联关系进行查询，预加载是直接对实体记录进行查询，包括所有的关联关系。从语法上来说，关联查询需要先查询指定的[]Person，然后再根据[]Person 去查询关联的[]Mom，预加载从语法上直接查询[]Person，并且也会将所有的关联关系顺带都加载了，不过实际上它们执行的 SQL 都是差不多的。下面看一个例子\",\"var users []Person // SELECT * FROM `moms` WHERE `moms`.`id` = 1 // SELECT * FROM `people` db.Preload(\\\"Mom\\\").Find(&users)\",\"这是一个一对一关联查询的例子，它的输出\",\"[{Id:1 Name:jack Address:usa Age:18 MomId:{Int64:1 Valid:true} Mom:{Id:1 Name:jenny} SchoolId:{Int64:1 Valid:true} School:{Id:0 Name: Persons:[]} Houses:[]} {Id:2 Name:mike Address:uk Age:20 MomId:{Int64:0 Valid:false} Mom:{Id:0 Name:} SchoolId:{Int64:1 Valid:true} School:{Id:0 Name: Persons:[]} Houses:[]}]\",\"可以看到将关联的Mom一并查询出来了，但是没有预加载学校关系，所有School结构体都是零值。还可以使用clause.Associations表示预加载全部的关系，除了嵌套的关系。\",\"db.Preload(clause.Associations).Find(&users)\",\"下面来看一个嵌套预加载的例子，它的作用是查询出所有学校关联的所有学生以及每一个学生所关联的母亲和每一个学生所拥有的房子，而且还要查询出每一个房子的主人集合，学校->学生->房子->学生。\",\"var schools []School db.Preload(\\\"Persons\\\"). Preload(\\\"Persons.Mom\\\"). Preload(\\\"Persons.Houses\\\"). Preload(\\\"Persons.Houses.Persons\\\").Find(&schools) // 输出代码，逻辑可以忽略 for _, school := range schools { fmt.Println(\\\"school\\\", school.Name) for _, person := range school.Persons { fmt.Println(\\\"person\\\", person.Name) fmt.Println(\\\"mom\\\", person.Mom.Name) for _, house := range person.Houses { var persons []string for _, p := range house.Persons { persons = append(persons, p.Name) } fmt.Println(\\\"house\\\", house.Name, \\\"owner\\\", persons) } fmt.Println() } }\",\"输出为\",\"school MIT person jack mom jenny house h1 owner [jack] house h2 owner [jack] person mike mom\",\"可以看到输出了每一个学校的每一个学生的母亲以及它们的房子，还有房子的所有主人。\"]},\"900\":{\"h\":\"事务\",\"t\":[\"gorm 默认开启事务，任何插入和更新操作失败后都会回滚，可以在连接配置中关闭，性能大概会提升 30%左右。gorm 中事务的使用有多种方法，下面简单介绍下。\"]},\"901\":{\"h\":\"自动\",\"t\":[\"闭包事务，通过Transaction方法，传入一个闭包函数，如果函数返回值不为 nil，那么就会自动回滚。\",\"func (db *DB) Transaction(fc func(tx *DB) error, opts ...*sql.TxOptions) (err error)\",\"下面看一个例子，闭包中的操作应该使用参数tx，而非外部的db。\",\"var ps []Person db.Transaction(func(tx *gorm.DB) error { err := tx.Create(&ps).Error if err != nil { return err } err = tx.Create(&ps).Error if err != nil { return err } err = tx.Model(Person{}).Where(\\\"id = ?\\\", 1).Update(\\\"name\\\", \\\"jack\\\").Error if err != nil { return err } return nil })\"]},\"902\":{\"h\":\"手动\",\"t\":[\"比较推荐使用手动事务，由我们自己来控制何时回滚，何时提交。手动事务会用到下面三个方法\",\"// Begin方法用于开启事务 func (db *DB) Begin(opts ...*sql.TxOptions) *DB // Rollback方法用于回滚事务 func (db *DB) Rollback() *DB // Commit方法用于提交事务 func (db *DB) Commit() *DB\",\"下面看一个例子，开启事务后，就应该使用tx来操作 orm。\",\"var ps []Person tx := db.Begin() err := tx.Create(&ps).Error if err != nil { tx.Rollback() return } err = tx.Create(&ps).Error if err != nil { tx.Rollback() return } err = tx.Model(Person{}).Where(\\\"id = ?\\\", 1).Update(\\\"name\\\", \\\"jack\\\").Error if err != nil { tx.Rollback() return } tx.Commit()\",\"可以指定回滚点\",\"var ps []Person tx := db.Begin() err := tx.Create(&ps).Error if err != nil { tx.Rollback() return } tx.SavePoint(\\\"createBatch\\\") err = tx.Create(&ps).Error if err != nil { tx.Rollback() return } err = tx.Model(Person{}).Where(\\\"id = ?\\\", 1).Update(\\\"name\\\", \\\"jack\\\").Error if err != nil { tx.RollbackTo(\\\"createBatch\\\") return } tx.Commit()\"]},\"903\":{\"h\":\"总结\",\"t\":[\"如果你阅读完了上面的所有内容，并动手敲了代码，那么你就可以使用 gorm 进行对数据库进行增删改查了，gorm 除了这些操作以外，还有其它许多功能，更多细节可以前往官方文档了解。\"]},\"904\":{\"h\":\"gopsutils\",\"t\":[\"仓库：shirou/gopsutil: psutil for golang (github.com)\",\"文档：gopsutil package - github.com/shirou/gopsutil/v3 - Go Packages\",\"平常在开发时，免不了需要获取程序所允许的平台系统信息，过程中涉及不同操作系统的系统调用，为了做适配需要花费大量的工作和时间，而 gopsutils 是一个使用 go 语言开发的系统信息库，它底层兼容许多主流的操作系统，目前支持以下系统架构：\",\"FreeBSD i386/amd64/arm\",\"Linux i386/amd64/arm(raspberry pi)\",\"Windows i386/amd64/arm/arm64\",\"Darwin amd64/arm64\",\"OpenBSD amd64 (Thank you @mpfz0r!)\",\"Solaris amd64 (developed and tested on SmartOS/Illumos, Thank you @jen20!)\",\"部分支持:\",\"CPU on DragonFly BSD\",\"host on Linux RISC-V\",\"并且该工具还支持获取 Docker 容器的系统信息。\"]},\"905\":{\"h\":\"安装\",\"t\":[\"使用 go get 命令安装\",\"go get github.com/shirou/gopsutil/v3\",\"提示\",\"笔者在写这篇文章时是在 Win10 系统上，不同的系统结果会有所不同。\"]},\"906\":{\"h\":\"主机\",\"t\":[\"主机相关的 API 由host包提供，对不同的操作系统都有适配。\"]},\"907\":{\"h\":\"信息\",\"t\":[\"func Info() (*InfoStat, error)\",\"func main() { info, _ := host.Info() JsonPrint(info) }\",\"{ \\\"hostname\\\": \\\"LAPTOP-8C92S0HL\\\", \\\"uptime\\\": 490854, \\\"bootTime\\\": 1683909241, \\\"procs\\\": 195, \\\"os\\\": \\\"windows\\\", \\\"platform\\\": \\\"Microsoft Windows 10 Home China\\\", \\\"platformFamily\\\": \\\"Standalone Workstation\\\", \\\"platformVersion\\\": \\\"10.0.19044.2251 Build 19044.2251\\\", \\\"kernelVersion\\\": \\\"10.0.19044.2251 Build 19044.2251\\\", \\\"kernelArch\\\": \\\"x86_64\\\", \\\"virtualizationSystem\\\": \\\"\\\", \\\"virtualizationRole\\\": \\\"\\\", \\\"hostId\\\": \\\"ba697a8c-c555-4329-905c-adc6cb650dde\\\" }\",\"该包下的其他 API 都是Info()的分解，不再演示，请自行了解。\"]},\"908\":{\"h\":\"CPU\",\"t\":[\"cpu 相关信息由cpu包提供，主要提供了 4 个函数，分别用于获取 CPU 信息，核数，使用率，时间片，以 JSON 格式输出观察起来会更为友好。\"]},\"909\":{\"h\":\"信息\",\"t\":[\"func Info() ([]InfoStat, error)\",\"func main() { info, _ := cpu.Info() JsonPrint(info) }\",\"[ { \\\"cpu\\\": 0, \\\"vendorId\\\": \\\"GenuineIntel\\\", \\\"family\\\": \\\"198\\\", \\\"model\\\": \\\"\\\", \\\"stepping\\\": 0, \\\"physicalId\\\": \\\"BFEBFBFF000806EC\\\", \\\"coreId\\\": \\\"\\\", \\\"cores\\\": 8, \\\"modelName\\\": \\\"Intel(R) Core(TM) i7-8565U CPU @ 1.80GHz\\\", \\\"mhz\\\": 1992, \\\"cacheSize\\\": 0, \\\"flags\\\": [], \\\"microcode\\\": \\\"\\\" } ]\"]},\"910\":{\"h\":\"核数\",\"t\":[\"func Counts(logical bool) (int, error)\",\"func main() { cores, _ := cpu.Counts(true) JsonPrint(cores) }\",\"8\"]},\"911\":{\"h\":\"使用率\",\"t\":[\"func Percent(interval time.Duration, percpu bool) ([]float64, error)\",\"func main() { percents, _ := cpu.Percent(time.Second*5, true) JsonPrint(percents) }\",\"[ 4.643962848297214, 4.049844236760125, 5.607476635514018, 5.29595015576324, 3.115264797507788, 2.803738317757009, 3.115264797507788, 2.1806853582554515 ]\"]},\"912\":{\"h\":\"时间片\",\"t\":[\"func Times(percpu bool) ([]TimesStat, error)\",\"func main() { times, _ := cpu.Times(true) JsonPrint(times) }\",\"[ { \\\"cpu\\\": \\\"cpu0\\\", \\\"user\\\": 250.28125, \\\"system\\\": 176.828125, \\\"idle\\\": 2537.96875, \\\"nice\\\": 0, \\\"iowait\\\": 0, \\\"irq\\\": 11.453125, \\\"softirq\\\": 0, \\\"steal\\\": 0, \\\"guest\\\": 0, \\\"guestNice\\\": 0 }, { \\\"cpu\\\": \\\"cpu1\\\", \\\"user\\\": 180.421875, \\\"system\\\": 115.078125, \\\"idle\\\": 2669.3125, \\\"nice\\\": 0, \\\"iowait\\\": 0, \\\"irq\\\": 4.125, \\\"softirq\\\": 0, \\\"steal\\\": 0, \\\"guest\\\": 0, \\\"guestNice\\\": 0 }, { \\\"cpu\\\": \\\"cpu2\\\", \\\"user\\\": 298.171875, \\\"system\\\": 143.46875, \\\"idle\\\": 2523.171875, \\\"nice\\\": 0, \\\"iowait\\\": 0, \\\"irq\\\": 2.96875, \\\"softirq\\\": 0, \\\"steal\\\": 0, \\\"guest\\\": 0, \\\"guestNice\\\": 0 }, { \\\"cpu\\\": \\\"cpu3\\\", \\\"user\\\": 234.890625, \\\"system\\\": 134.3125, \\\"idle\\\": 2595.609375, \\\"nice\\\": 0, \\\"iowait\\\": 0, \\\"irq\\\": 1.53125, \\\"softirq\\\": 0, \\\"steal\\\": 0, \\\"guest\\\": 0, \\\"guestNice\\\": 0 }, { \\\"cpu\\\": \\\"cpu4\\\", \\\"user\\\": 249.78125, \\\"system\\\": 122.609375, \\\"idle\\\": 2592.421875, \\\"nice\\\": 0, \\\"iowait\\\": 0, \\\"irq\\\": 2.25, \\\"softirq\\\": 0, \\\"steal\\\": 0, \\\"guest\\\": 0, \\\"guestNice\\\": 0 }, { \\\"cpu\\\": \\\"cpu5\\\", \\\"user\\\": 262.875, \\\"system\\\": 162.546875, \\\"idle\\\": 2539.390625, \\\"nice\\\": 0, \\\"iowait\\\": 0, \\\"irq\\\": 1.90625, \\\"softirq\\\": 0, \\\"steal\\\": 0, \\\"guest\\\": 0, \\\"guestNice\\\": 0 }, { \\\"cpu\\\": \\\"cpu6\\\", \\\"user\\\": 271.296875, \\\"system\\\": 122.40625, \\\"idle\\\": 2571.109375, \\\"nice\\\": 0, \\\"iowait\\\": 0, \\\"irq\\\": 2.125, \\\"softirq\\\": 0, \\\"steal\\\": 0, \\\"guest\\\": 0, \\\"guestNice\\\": 0 }, { \\\"cpu\\\": \\\"cpu7\\\", \\\"user\\\": 239.328125, \\\"system\\\": 104.03125, \\\"idle\\\": 2621.4375, \\\"nice\\\": 0, \\\"iowait\\\": 0, \\\"irq\\\": 1.875, \\\"softirq\\\": 0, \\\"steal\\\": 0, \\\"guest\\\": 0, \\\"guestNice\\\": 0 } ]\"]},\"913\":{\"h\":\"磁盘\",\"t\":[\"磁盘相关的函数是由disk包提供的，部分是针对 Linux 而设计的。\"]},\"914\":{\"h\":\"使用率\",\"t\":[\"func Usage(path string) (*UsageStat, error)\",\"func main() { use, _ := disk.Usage(\\\"/\\\") JsonPrint(use) }\",\"{ \\\"path\\\": \\\"/\\\", \\\"fstype\\\": \\\"\\\", \\\"total\\\": 274152288256, \\\"free\\\": 251611193344, \\\"used\\\": 22541094912, \\\"usedPercent\\\": 8.22210715635224, \\\"inodesTotal\\\": 0, \\\"inodesUsed\\\": 0, \\\"inodesFree\\\": 0, \\\"inodesUsedPercent\\\": 0 }\"]},\"915\":{\"h\":\"分区情况\",\"t\":[\"func Partitions(all bool) ([]PartitionStat, error)\",\"func main() { part, _ := disk.Partitions(true) JsonPrint(part) }\",\"[ { \\\"device\\\": \\\"C:\\\", \\\"mountpoint\\\": \\\"C:\\\", \\\"fstype\\\": \\\"NTFS\\\", \\\"opts\\\": [\\\"rw\\\", \\\"compress\\\"] }, { \\\"device\\\": \\\"D:\\\", \\\"mountpoint\\\": \\\"D:\\\", \\\"fstype\\\": \\\"NTFS\\\", \\\"opts\\\": [\\\"rw\\\", \\\"compress\\\"] }, { \\\"device\\\": \\\"E:\\\", \\\"mountpoint\\\": \\\"E:\\\", \\\"fstype\\\": \\\"FAT32\\\", \\\"opts\\\": [\\\"rw\\\"] } ]\"]},\"916\":{\"h\":\"IO\",\"t\":[\"func IOCounters(names ...string) (map[string]IOCountersStat, error)\",\"func main() { part, _ := disk.IOCounters(\\\"/\\\") JsonPrint(part) }\",\"{ \\\"C:\\\": { \\\"readCount\\\": 435914, \\\"mergedReadCount\\\": 0, \\\"writeCount\\\": 640313, \\\"mergedWriteCount\\\": 0, \\\"readBytes\\\": 10356509696, \\\"writeBytes\\\": 16957500928, \\\"readTime\\\": 209, \\\"writeTime\\\": 127, \\\"iopsInProgress\\\": 0, \\\"ioTime\\\": 0, \\\"weightedIO\\\": 0, \\\"name\\\": \\\"C:\\\", \\\"serialNumber\\\": \\\"\\\", \\\"label\\\": \\\"\\\" }, \\\"D:\\\": { \\\"readCount\\\": 65907, \\\"mergedReadCount\\\": 0, \\\"writeCount\\\": 12141, \\\"mergedWriteCount\\\": 0, \\\"readBytes\\\": 3079766528, \\\"writeBytes\\\": 518916608, \\\"readTime\\\": 24, \\\"writeTime\\\": 7, \\\"iopsInProgress\\\": 0, \\\"ioTime\\\": 0, \\\"weightedIO\\\": 0, \\\"name\\\": \\\"D:\\\", \\\"serialNumber\\\": \\\"\\\", \\\"label\\\": \\\"\\\" } }\"]},\"917\":{\"h\":\"内存\",\"t\":[\"内存相关 API 由mem包提供\"]},\"918\":{\"h\":\"信息\",\"t\":[\"func VirtualMemory() (*VirtualMemoryStat, error)\",\"func main() { memory, _ := mem.VirtualMemory() JsonPrint(memory) }\",\"{ \\\"total\\\": 17018114048, \\\"available\\\": 5477023744, \\\"used\\\": 11541090304, \\\"usedPercent\\\": 67, \\\"free\\\": 5477023744, \\\"active\\\": 0, \\\"inactive\\\": 0, \\\"wired\\\": 0, \\\"laundry\\\": 0, \\\"buffers\\\": 0, \\\"cached\\\": 0, \\\"writeBack\\\": 0, \\\"dirty\\\": 0, \\\"writeBackTmp\\\": 0, \\\"shared\\\": 0, \\\"slab\\\": 0, \\\"sreclaimable\\\": 0, \\\"sunreclaim\\\": 0, \\\"pageTables\\\": 0, \\\"swapCached\\\": 0, \\\"commitLimit\\\": 0, \\\"committedAS\\\": 0, \\\"highTotal\\\": 0, \\\"highFree\\\": 0, \\\"lowTotal\\\": 0, \\\"lowFree\\\": 0, \\\"swapTotal\\\": 0, \\\"swapFree\\\": 0, \\\"mapped\\\": 0, \\\"vmallocTotal\\\": 0, \\\"vmallocUsed\\\": 0, \\\"vmallocChunk\\\": 0, \\\"hugePagesTotal\\\": 0, \\\"hugePagesFree\\\": 0, \\\"hugePagesRsvd\\\": 0, \\\"hugePagesSurp\\\": 0, \\\"hugePageSize\\\": 0 }\"]},\"919\":{\"h\":\"交换内存\",\"t\":[\"func SwapMemory() (*SwapMemoryStat, error)\",\"func main() { memory, _ := mem.SwapMemory() JsonPrint(memory) }\",\"{ \\\"total\\\": 19568250880, \\\"used\\\": 12943368192, \\\"free\\\": 6624882688, \\\"usedPercent\\\": 66.14473757196637, \\\"sin\\\": 0, \\\"sout\\\": 0, \\\"pgIn\\\": 0, \\\"pgOut\\\": 0, \\\"pgFault\\\": 0, \\\"pgMajFault\\\": 0 }\"]},\"920\":{\"h\":\"交换设备\",\"t\":[\"func SwapDevices() ([]*SwapDevice, error)\",\"func main() { devices, _ := mem.SwapDevices() JsonPrint(devices) }\",\"[ { \\\"name\\\": \\\"C:\\\\\\\\pagefile.sys\\\", \\\"usedBytes\\\": 107663360, \\\"freeBytes\\\": 2442473472 } ]\"]},\"921\":{\"h\":\"网络\"},\"922\":{\"h\":\"进程\"},\"923\":{\"h\":\"lancet\",\"t\":[\"文档地址：lancet/README_zh-CN.md at main · duke-git/lancet · GitHub\",\"仓库地址：duke-git/lancet: A comprehensive, efficient, and reusable util function library of Go. (github.com)\"]},\"924\":{\"h\":\"简介\",\"t\":[\"lancet译为柳叶刀，是一个通用的工具库，包含有并发，网络，文件，时间，类型转换等等工具库。其代码复杂度不高，将平时频繁使用的功能进行了封装，所以在使用的同时lancet对于刚学习Go的人来说是一个很好的学习对象。\"]},\"925\":{\"h\":\"使用\",\"t\":[\"提示\",\"官方的中文文档已经很详细了，并且配有完整的代码示例，所以这里不再赘述如何使用。\"]},\"926\":{\"h\":\"Validator\",\"t\":[\"官方地址：go-playground/validator: 💯Go Struct and Field validation, including Cross Field, Cross Struct, Map, Slice and Array diving (github.com)\",\"文档地址：validator/README.md at master · go-playground/validator (github.com)\",\"官方示例：validator/_examples at master · go-playground/validator (github.com)\",\"基准测试：go-playground/validator: 💯Go Struct and Field validation, including Cross Field, Cross Struct, Map, Slice and Array diving (github.com)\"]},\"927\":{\"h\":\"介绍\",\"t\":[\"go-playground/validator实现了一款基于结构体标签的值验证器，它有着以下独一无二的特性：\",\"可使用验证标签和自定义验证器来进行跨字段和跨结构体验证\",\"切片，数组，map，或者任何多维域都可以被验证\",\"可以深入验证 map 的 key 和 value\",\"在验证之前，通过其基本类型来确定如何进行处理\",\"可以处理自定义字段类型\",\"支持别名标签，它将允许多个验证映射到单个标签上，以便更容易的定义对于结构体的验证\",\"可以提取自定义的字段名，例如可以在验证时提取 JSON 名称以便在错误信息中显示\",\"自定义多语言错误信息\",\"gin框架的标准默认验证组件\"]},\"928\":{\"h\":\"安装\",\"t\":[\"go get github.com/go-playground/validator/v10\"]},\"929\":{\"h\":\"导入\",\"t\":[\"import \\\"github.com/go-playground/validator/v10\\\"\"]},\"930\":{\"h\":\"标签\",\"t\":[\"验证器有着非常多的基础验证标签，所有标签对应的验证函数都可以在baked_in.go文件中找到，验证器的结构体 Tag 是valiadte，\",\"例如\",\"type User { age int `validate:\\\"gte=18\\\"` //表示大于等于18岁 }\",\"也可以通过setTagName方法来修改默认 Tag 。\"]},\"931\":{\"h\":\"字段\",\"t\":[\"Tag\",\"Description\",\"eqcsfield\",\"在一个单独的结构中，验证当前字段的值是否等于由 param 的值指定的字段\",\"eqfield\",\"验证当前字段的值是否等于参数值指定的字段\",\"fieldcontains\",\"验证当前字段的值是否包含由参数值指定的字段\",\"fieldexcludes\",\"验证当前字段的值是否不包含由参数值指定的字段\",\"gtcsfield\",\"在一个单独的结构中，验证当前字段的值是否大于由参数的值指定的字段\",\"gtecsfield\",\"在一个单独的结构中，验证当前字段的值是否大于或等于由参数的值指定的字段\",\"gtefield\",\"验证当前字段的值是否大于或等于由参数值指定的字段\",\"gtfield\",\"验证当前字段的值是否大于由参数值指定的字段\",\"ltcsfield\",\"在一个单独的结构中，验证当前字段的值是否小于由参数的值指定的字段\",\"ltecsfield\",\"在一个单独的结构中，验证当前字段的值是否小于等于由参数的值指定的字段\",\"ltefield\",\"验证当前字段的值是否小于或等于由参数值指定的字段\",\"ltfield\",\"验证当前字段的值是否小于由参数值指定的字段\",\"necsfield\",\"验证当前字段的值不等于由参数的值指定的单独结构中的字段\",\"nefield\",\"验证当前字段的值是否不等于参数值指定的字段\"]},\"932\":{\"h\":\"网络\",\"t\":[\"Tag\",\"Description\",\"cidr\",\"无类域间路由 CIDR\",\"cidrv4\",\"无类域间路由 CIDRv4\",\"cidrv6\",\"无类域间路由 CIDRv6\",\"datauri\",\"数据统一资源定位符\",\"fqdn\",\"完全限定域名(FQDN)\",\"hostname\",\"主机名 RFC 952\",\"hostname_port\",\"通常用于套接字地址的字段验证<dns>:<port>组合\",\"hostname_rfc1123\",\"主机名 RFC 952\",\"ip\",\"因特网协议地址 IP\",\"ip4_addr\",\"因特网协议地址 IPv4\",\"ip6_addr\",\"因特网协议地址 IPv6\",\"ip_addr\",\"因特网协议地址 IP\",\"ipv4\",\"因特网协议地址 IPv4\",\"ipv6\",\"因特网协议地址 IPv6\",\"mac\",\"媒体存取控制位址，也称局域网地址\",\"tcp4_addr\",\"传输控制协议地址 TCP4\",\"tcp6_addr\",\"传输控制协议地址 TCPv6\",\"tcp_addr\",\"传输控制协议地址 TCP\",\"udp4_addr\",\"用户数据报协议地址 UDPv4\",\"udp6_addr\",\"用户数据报协议地址 UDPv6\",\"udp_addr\",\"用户数据报协议地址 UDP\",\"unix_addr\",\"Unix 域套接字端点地址\",\"uri\",\"统一资源标识符\",\"url\",\"统一资源定位符\",\"url_encoded\",\"统一资源标识符编码\",\"urn_rfc2141\",\"RFC 2141 统一资源名\"]},\"933\":{\"h\":\"字符串\",\"t\":[\"Tag\",\"Description\",\"alpha\",\"验证当前字段的值是否是有效的字母\",\"alphanum\",\"验证当前字段的值是否是有效的字母数字\",\"alphanumunicode\",\"验证当前字段的值是否是有效的字母数字 unicode 值\",\"alphaunicode\",\"验证当前字段的值是否是有效的字母 unicode 值\",\"ascii\",\"验证字段的值是否为有效的 ASCII 字符\",\"boolean\",\"验证当前字段的值是否为有效的布尔值或是否可以安全地转换为布尔值\",\"contains\",\"验证字段的值是否包含参数中指定的文本\",\"containsany\",\"验证字段的值是否包含参数中指定的任何字符\",\"containsrune\",\"验证字段的值是否包含参数中指定的符文\",\"endsnotwith\",\"验证字段的值不以参数中指定的文本结束\",\"endswith\",\"验证字段的值以参数中指定的文本结束\",\"excludes\",\"验证字段的值不包含参数中指定的文本\",\"excludesall\",\"验证字段的值不包含参数中指定的任何字符\",\"excludesrune\",\"验证字段的值不包含参数中指定的字符\",\"lowercase\",\"验证当前字段的值是否为小写字符串\",\"multibyte\",\"验证字段的值是否具有多字节字符\",\"number\",\"验证当前字段的值是否为有效数字\",\"numeric\",\"验证当前字段的值是否是有效的数值\",\"printascii\",\"验证字段的值是否是有效的可打印 ASCII 字符\",\"startsnotwith\",\"验证字段的值不是以参数中指定的文本开始\",\"startswith\",\"验证字段的值是否以参数中指定的文本开始\",\"uppercase\",\"验证当前字段的值是否为大写字符串\"]},\"934\":{\"h\":\"格式化\",\"t\":[\"Tag\",\"Description\",\"base64\",\"Base64 字符串\",\"base64url\",\"Base64URL 字符串\",\"bic\",\"验证当前字段的值是否为 ISO 9362 中定义的有效的 BIC 码(SWIFT 代码)\",\"bcp47_language_tag\",\"验证当前字段的值是否为 BCP47 规范的语言标签\",\"btc_addr\",\"验证字段的值是否为有效的 BTC 地址\",\"btc_addr_bech32\",\"验证字段的值是否为有效的 bech32 BTC 地址\",\"credit_card\",\"验证当前字段的值是否是有效的信用卡号\",\"datetime\",\"验证当前字段的值是否是有效的时间日期字符串\",\"e164\",\"验证当前字段的值是否为有效的 e.164 格式的电话号码\",\"email\",\"验证当前字段的值是否是有效的电子邮件地址\",\"eth_addr\",\"验证字段的值是否为有效的以太坊地址\",\"hexadecimal\",\"验证当前字段的值是否为有效的十六进制\",\"hexcolor\",\"验证当前字段的值是否是有效的十六进制颜色\",\"hsl\",\"验证当前字段的值是否是有效的 HSL 颜色\",\"hsla\",\"验证当前字段的值是否是有效的 HSLA 颜色\",\"html\",\"验证当前字段的值是否是有效的 HTML\",\"html_encoded\",\"验证当前字段的值是否是有效的 HTML 编码\",\"isbn\",\"验证字段的值是否为有效的 v10 或 v13 ISBN（国际标准书号）\",\"isbn10\",\"验证字段的值是否为有效的 v10 ISBN（国际标准书号）\",\"isbn13\",\"验证字段的值是否为有效的 v13 ISBN（国际标准书号）\",\"iso3166_1_alpha2\",\"验证当前字段的值是否为有效的 iso3166-1 alpha-2 国家代码\",\"iso3166_1_alpha3\",\"验证当前字段的值是否为有效的 iso3166-1 alpha-3 国家代码\",\"iso3166_1_alpha_numeric\",\"验证当前字段的值是否为有效的 iso3166-1 字母数字国家代码\",\"iso3166_2\",\"验证当前字段的值是否为有效的国家地区代码 (ISO 3166-2)\",\"iso4217\",\"验证当前字段的值是否为有效的货币代码 (ISO 4217)\",\"json\",\"验证当前字段的值是否为有效的 json 字符串\",\"jwt\",\"验证当前字段的值是否是有效的 JWT 字符串\",\"latitude\",\"验证字段的值是否是有效的纬度坐标\",\"longitude\",\"验证字段的值是否是有效的纬度坐标\",\"postcode_iso3166_alpha2\",\"根据 iso 3166 alpha 2 中国家代码的值进行验证\",\"postcode_iso3166_alpha2_field\",\"通过字段验证，该字段表示 iso 3166 alpha 2 中的国家代码值\",\"rgb\",\"验证当前字段的值是否是有效的 RGB 颜色\",\"rgba\",\"验证当前字段的值是否是有效的 RGBA 颜色\",\"ssn\",\"验证字段的值是否是有效的 SSN\",\"timezone\",\"验证当前字段的值是否是有效的时区字符串\",\"uuid\",\"验证字段的值是否是任何版本的有效 UUID\",\"uuid3\",\"验证字段的值是否是任的有效 UUID v3\",\"uuid3_rfc4122\",\"验证字段的值是否为有效的 RFC4122 v3 UUID\",\"uuid4\",\"验证字段的值是否为有效的 v4 UUID\",\"uuid4_rfc4122\",\"验证字段的值是否为有效的 RFC4122 v4 UUID\",\"uuid5\",\"验证字段的值是否是有效的 v5 UUID\",\"uuid5_rfc4122\",\"验证字段的值是否是有效的 RFC4122 v5 UUID\",\"uuid_rfc4122\",\"验证字段的值是否为任何版本的有效 RFC4122 UUID\",\"md4\",\"验证字段的值是否为有效的 MD4\",\"md5\",\"验证字段的值是否为有效的 MD5\",\"sha256\",\"验证该字段的值是否是有效的 SHA256\",\"sha384\",\"验证字段的值是否是有效的 SHA384\",\"sha512\",\"验证字段的值是否为有效的 SHA512\",\"ripemd128\",\"验证字段的值是否是有效的 PIPEMD128\",\"ripemd128\",\"验证字段的值是否是有效的 PIPEMD160\",\"tiger128\",\"验证字段的值是否是有效的 TIGER128\",\"tiger160\",\"验证字段的值是否是有效的 TIGER160\",\"tiger192\",\"验证字段的值是否是有效的 TIGER192\",\"semver\",\"验证当前字段的值是否为语义版本 2.0.0 中定义的有效 semver 版本\",\"ulid\",\"验证字段的值是否为有效的 ULID\"]},\"935\":{\"h\":\"比较\",\"t\":[\"Tag\",\"Description\",\"eq\",\"等于\",\" gt\",\"大于\",\"gte\",\"大于等于\",\"lt\",\"小于\",\"lte\",\"小于等于\",\"ne\",\"不等于\"]},\"936\":{\"h\":\"其他\",\"t\":[\"| Tag | Description | | ---------------------- | :--------------------------------------------------------------------------- | --- | ---------------- | | dir | 文件目录 | | file | 文件路径 | | isdefault | 验证当前字段的值是否是默认静态值 | | len | 字段长度 | | max | 最大值 | | min | 最小值 | | oneof | 是否是列举的值的其中的一个 | | oimtempty | 如果字段未设置，则忽略它 | | required | 必须值 | | required_if | 只有当所有其他指定字段与指定字段后面的值相等时，验证的字段必须存在且不为空 | | required_unless | 除非所有其他指定字段与指定字段后面的值相等，验证的字段必须存在且不为空 | | required_with | 当指定的字段有一个存在时，验证的字段必须存在且不为空 | | required_with_all | 当指定的所有字段存在时，验证的字段必须存在且不为空 | | required_without | 当指定的字段有一个不存在时，验证的字段必须存在且不为空 | | required_without_all | 当指定的字段全部不存在时，验证的字段必须存在且不为空 | | excluded_if | 只有当所有其他指定字段与指定字段后面的值相等时，验证的字段可以不存在或者为空 | | excluded_unless | 除非所有其他指定字段与指定字段后面的值相等，验证的字段可以不存在或者为空 | | excluded_with | 当指定的字段有一个存在时，验证的字段可以不存在或者为空 | | excluded_with_all | 当指定的所有字段存在时，验证的字段可以不存在或者为空 | | excluded_without | 当指定的字段有一个不存在时，验证的字段可以不存在或者为空 | | excluded_without_all | 当指定的字段全部不存在时，验证的字段可以不存在或者为空 | | unique | 验证每个arr | map | slice值是否唯一 |\"]},\"937\":{\"h\":\"别名\",\"t\":[\"Tag\",\"Description\",\"iscolor\",\"hexcolor|rgb|rgba|hsl|hsla\",\"country_code\",\"iso3166_1_alpha2|iso3166_1_alpha3|iso3166_1_alpha_numeric\"]},\"938\":{\"h\":\"操作符\",\"t\":[\"| Tag | Description | Hex | | --- | -------------------------------------------------------------------- | -------------------------------------------------- | ------ | | , | 与操作，使用多个验证标记，必须所有条件都满足，隔开逗号之间不能有空格 | 0x2c | | | | 或操作，使用多个验证标记，但是只需满足其中一个即可 | 0x7c | | - | 该字段跳过验证 | 0x2d | | = | 参数匹配符号 | 0x3d |\",\"提示\",\"验证字段的时候想要匹配操作符的话，需要使用utf8十六进制表达形式替换，例如\",\"filed string `validate:\\\"contains=0x2c\\\"`\"]},\"939\":{\"h\":\"使用\",\"t\":[\"下面会介绍Validator的一些基本使用以及一些代码示例。\"]},\"940\":{\"h\":\"单例\",\"t\":[\"var validate *validator.Validate\",\"在使用时，官方建议在整个程序的生命周期中，只存在一个验证器实例，这样会有利于其缓存一些数据。\"]},\"941\":{\"h\":\"创建验证器\",\"t\":[\"在单独使用Validator没有集成其他框架的情况下，需要我们手动创建验证器。\",\"validate = validator.New()\"]},\"942\":{\"h\":\"结构体验证\",\"t\":[\"func (v *Validate) Struct(s interface{}) error\",\"Struct方法用于验证一个结构体所有公开的字段，默认会自动进行嵌套结构体验证，当传入非法的值或者传入值为nil时，会返回InvalidValidationError，如果验证失败的错误则返回ValidationErrors 。\",\"示例\",\"package validate import ( \\\"fmt\\\" \\\"github.com/go-playground/validator/v10\\\" \\\"testing\\\" ) type User struct { Name string `validate:\\\"contains=jack\\\"` //名字包含jack Age int `validate:\\\"gte=18\\\"` //大于等于17岁 Address string `valiate:\\\"endwith=市\\\"` //以市结尾 } func TestStruct(t *testing.T) { validate := validator.New() user := User{ Name: \\\"jacklove\\\", Age: 17, Address: \\\"滔博市\\\", } err := validate.Struct(user) for _, err := range err.(validator.ValidationErrors) { fmt.Println(err.Namespace()) //命名 fmt.Println(err.Field()) fmt.Println(err.StructNamespace()) fmt.Println(err.StructField()) fmt.Println(err.Tag()) fmt.Println(err.ActualTag()) fmt.Println(err.Kind()) fmt.Println(err.Type()) fmt.Println(err.Value()) fmt.Println(err.Param()) fmt.Println() } fmt.Println(err) }\",\"输出\",\"User.Age Age User.Age Age gte gte int int 17 18 Key: 'User.Age' Error:Field validation for 'Age' failed on the 'gte' tag\"]},\"943\":{\"h\":\"map 验证\",\"t\":[\"func (v *Validate) ValidateMap(data map[string]interface{}, rules map[string]interface{}) map[string]interface{}\",\"通过一个 Tagmap来进行键值对验证。\",\"示例\",\"func TestMap(t *testing.T) { user := map[string]interface{}{ \\\"name\\\": \\\"jak\\\", \\\"age\\\": 17, \\\"address\\\": \\\"滔博市\\\", } rules := map[string]interface{}{ \\\"name\\\": \\\"contains=jacklove\\\", \\\"age\\\": \\\"gte=18\\\", \\\"address\\\": \\\"endswith=市\\\", } validate := validator.New() validateMap := validate.ValidateMap(user, rules) fmt.Println(validateMap) }\",\"输出\",\"map[age:Key: '' Error:Field validation for '' failed on the 'gte' tag name:Key: '' Error:Field validation for '' failed on the 'contains' tag]\"]},\"944\":{\"h\":\"切片验证\",\"t\":[\"验证字符串切片，dive前是 tag 是对切片进行验证，dive后的 tag 是对切片中的值进行验证，嵌套切片也是一个道理，有几维就用几个dive\",\"func TestSlice1(t *testing.T) { list := []string{\\\"jack\\\", \\\"mike\\\", \\\"lisa\\\", \\\"golang\\\"} err := validator.New().Var(list, \\\"max=5,dive,contains=a,min=5\\\") //切片长度最大值为5，元素必须包含字符a，且最小长度为5 fmt.Println(err) }\",\"输出\",\"Key: '[0]' Error:Field validation for '[0]' failed on the 'min' tag Key: '[1]' Error:Field validation for '[1]' failed on the 'contains' tag Key: '[2]' Error:Field validation for '[2]' failed on the 'min' tag\",\"对切片里的每一个用户进行结构体验证\",\"func TestSlice(t *testing.T) { userList := make([]User, 0) user := User{ Name: \\\"jacklove\\\", Age: 17, Address: \\\"滔博市\\\", } userList = append(userList, user) err := validator.New().Var(userList, \\\"dive\\\") //“dive”即深层验证的意思，当元素为结构体时，会自动进行结构体验证 fmt.Println(err) }\",\"输出\",\"Key: '[0].Age' Error:Field validation for 'Age' failed on the 'gte' tag\"]},\"945\":{\"h\":\"变量验证\",\"t\":[\"比较简单易懂，就不做过多的解释\",\"例 1\",\"func TestVar(t *testing.T) { name := \\\"jack\\\" err := validator.New().Var(name, \\\"max=5,contains=a,min=1,endswith=l\\\") //最大长度为5，最小长度为1，包含字母a，以字母l结尾 fmt.Println(err) }\",\"输出\",\"Key: '' Error:Field validation for '' failed on the 'endswith' tag\",\"例 2\",\"func TestVar1(t *testing.T) { age := 18 err := validator.New().Var(age, \\\"gte=19\\\") fmt.Println(err) }\",\"输出\",\"Key: '' Error:Field validation for '' failed on the 'gte' tag\",\"提示\",\"Var方法可以验证的类型包含结构体，变量，切片，map，要合理结合dive标签使用。\"]},\"946\":{\"h\":\"字段验证\",\"t\":[\"字段验证的参数不再是基本类型，而是结构体的字段名，可以是自身的字段名，也可以是嵌套结构体的字段名。\",\"type Password struct { FirstPassword string `validate:\\\"eqfield=SecondPassword\\\"` //验证两次输入的密码是否相等 SecondPassword string } type RegisterUser struct { Username string `validate:\\\"necsfield=Password.FirstPassword\\\"` //在注册时为了安全考虑，禁止密码和用户名一致 Password Password } func TestCrossStructFieldValidate(t *testing.T) { validate = validator.New() // 失败 fmt.Println(validate.Struct(RegisterUser{ Username: \\\"gopher\\\", Password: Password{ FirstPassword: \\\"gopher\\\", SecondPassword: \\\"gophers\\\", }, })) // 成功 fmt.Println(validate.Struct(RegisterUser{ Username: \\\"gophers\\\", Password: Password{ FirstPassword: \\\"gopher\\\", SecondPassword: \\\"gopher\\\", }, })) }\",\"输出\",\"Key: 'RegisterUser.Username' Error:Field validation for 'Username' failed on the 'necsfield' tag Key: 'RegisterUser.Password.FirstPassword' Error:Field validation for 'FirstPassword' failed on the 'eqfield' tag <nil>\",\"注意\",\"使用字段验证时，当 Tag 作为参数的字段或者结构体不存在时，会直接判断为验证失败，例如：\",\"type Password struct { FirstPassword string `validate:\\\"eqfield=SeconddPaswod\\\"` // SeconddPaswod != SecondPassword SecondPassword string }\",\"对于这种拼写错误，很难检查到，而且验证时也仅会以验证未通过的形式展现，需要十分注意。\"]},\"947\":{\"h\":\"进阶\",\"t\":[\"接下来会讲解一些进阶的使用技巧与更多的自定义操作。\"]},\"948\":{\"h\":\"自定义别名\",\"t\":[\"在有些时候，对于一个字段有非常多的验证 tag，当你想要复用到另一个字段上时，你可能会直接赋值粘贴，不过这并不是最好的解决办法，更好的方法是通过注册别名来提高复用性，请看下面的一个例子:\",\"var validate *validator.Validate const PERSON_NAME_RULES = \\\"max=10,min=1,contains=jack\\\" func TestAlias(t *testing.T) { validate = validator.New() // 注册别名 validate.RegisterAlias(\\\"namerules\\\", PERSON_NAME_RULES) type person struct { FirstName string `validate:\\\"namerules\\\"` // 使用别名 LastName string `validate:\\\"namerules\\\"` } err := validate.Struct(person{ FirstName: \\\"\\\", LastName: \\\"\\\", }) fmt.Println(err) }\",\"输出\",\"Key: 'person.FirstName' Error:Field validation for 'FirstName' failed on the 'namerules' tag Key: 'person.LastName' Error:Field validation for 'LastName' failed on the 'namerules' tag\"]},\"949\":{\"h\":\"自定义验证函数\",\"t\":[\"虽然组件自带的验证 tag 足够满足基本时候，可有些时候对于一些特殊需求必须要自己定义逻辑，Validator为我们提供了相关的 API 来自定义验证函数。接下来先看一个例子：\",\"func TestCustomValidate(t *testing.T) { validate = validator.New() fmt.Println(validate.RegisterValidation(\\\"is666\\\", is666)) type Example struct { Name string `validate:\\\"is666\\\"` } fmt.Println(validate.Struct(Example{Name: \\\"777\\\"})) fmt.Println(validate.Struct(Example{Name: \\\"666\\\"})) } func is666(fl validator.FieldLevel) bool { return fl.Field().String() == \\\"666\\\" }\",\"创建了一个函数，判断字段值是不是等于\\\"666\\\"，并且其对应的 Tag 是is666，输出如下\",\"<nil> Key: 'Example.Name' Error:Field validation for 'Name' failed on the 'is666' tag\",\"提示\",\"注册的 Tag 如果已经存在，那么将会被现有的覆盖掉，也就是说可以“重写”默认的 Tag 校验逻辑。\"]},\"950\":{\"h\":\"自定义类型验证函数\",\"t\":[\"类型验证函数是专门针对某一类型的，通常用于一些非基本类型，同样的也可以覆盖默认基本类型的校验，下面看一个例子：\",\"type Address struct { name string } func TestCustomTypeValidate(t *testing.T) { validate = validator.New() validate.RegisterCustomTypeFunc(ValidateAddress, Address{}) // 注册类型验证函数和对应的类型 type Example struct { Address Address `validate:\\\"required\\\"` } fmt.Println(validate.Struct(Example{Address: Address{name: \\\"\\\"}})) fmt.Println(validate.Struct(Example{Address: Address{name: \\\"cn\\\"}})) } func ValidateAddress(value reflect.Value) interface{} { if address, ok := value.Interface().(Address); ok { //错误处理 if address.name == \\\"\\\" { return address.name } return value //返回字段即代表验证正确 } return nil }\",\"输出\",\"Key: 'Example.Address' Error:Field validation for 'Address' failed on the 'required' tag <nil>\",\"提示\",\"同时将多个类型注册到一个函数也是同样的道理\"]},\"951\":{\"h\":\"自定义结构体验证函数\",\"t\":[\"结构体验证函数的区别在于，其他函数的参数是字段，而此函数的参数是结构体，看下面的例子：\",\"type People struct { FirstName string LastName string } func TestCustomStructLevel(t *testing.T) { validate = validator.New() validate.RegisterStructValidation(PeopleValidate, People{}) //同类型注册，可以传入的结构体也不止一种 err := validate.Struct(People{ FirstName: \\\"\\\", LastName: \\\"\\\", }) fmt.Println(err) } func PeopleValidate(sl validator.StructLevel) { people := sl.Current().Interface().(People) if people.FirstName == \\\"\\\" || people.LastName == \\\"\\\" { sl.ReportError(people.FirstName, \\\"FirstName\\\", \\\"FirstName\\\", \\\"\\\", \\\"\\\") sl.ReportError(people.FirstName, \\\"LastName\\\", \\\"LastName\\\", \\\"\\\", \\\"\\\") } }\",\"输出\",\"Key: 'People.FirstName' Error:Field validation for 'FirstName' failed on the '' tag Key: 'People.LastName' Error:Field validation for 'LastName' failed on the '' tag\"]},\"952\":{\"h\":\"多语言\",\"t\":[\"翻译器组件\",\"go get github.com/go-playground/universal-translator\",\"地区组件\",\"go get github.com/go-playground/locales\",\"验证器默认的语言是英文，而我们在进行项目开发时，可能会用到不止一种语言，这时候我们就需要用到国际化多语言组件，看下面的一个例子：\",\"import ( \\\"fmt\\\" \\\"github.com/go-playground/locales/zh\\\" ut \\\"github.com/go-playground/universal-translator\\\" \\\"github.com/go-playground/validator/v10\\\" zh_trans \\\"github.com/go-playground/validator/v10/translations/zh\\\" \\\"reflect\\\" \\\"testing\\\" ) type User struct { Name string `validate:\\\"contains=jack\\\"` //名字包含jack Age int `validate:\\\"gte=18\\\"` //大于等于17岁 Address string `validate:\\\"endswith=市\\\"` //以市结尾 } var ( uni *ut.UniversalTranslator validate *validator.Validate ) func TestTranslate(t *testing.T) { zh := zh.New() //第一个是备用的，后续的是支持的语言，可以有多个 uni = ut.New(zh, zh) //这里的语言通常可以在http的请求头中的Accept-Language中获取对应的语言 trans, found := uni.GetTranslator(zh.Locale()) validate = validator.New() if found { zh_trans.RegisterDefaultTranslations(validate, trans) //注册默认翻译器 } err := validate.Struct(User{ Name: \\\"\\\", Age: 0, Address: \\\"\\\", }) fmt.Println(err.(validator.ValidationErrors).Translate(trans)) }\",\"输出\",\"map[User.Address:Address必须以文本'市'结尾 User.Age:Age必须大于或等于18 User.Name:Name必须包含文本'jack']\",\"也可以把每一个错误单独翻译\",\"for _, fieldError := range err.(validator.ValidationErrors) { fmt.Println(fieldError.Translate(trans)) }\",\"输出\",\"Name必须包含文本'jack' Age必须大于或等于18 Address必须以文本'市'结尾\",\"可以看到返回值是一个 map，可以看到基本的错误信息翻译已经做到了，但是还不足以纳入使用，我们需要接着来美化一下错误信息，以便更好的与客户或者前端进行对接。\",\"type User struct { Name string `validate:\\\"contains=jack\\\" label:\\\"姓名\\\"` //名字包含jack Age int `validate:\\\"gte=18\\\" label:\\\"年龄\\\"` //大于等于17岁 Address string `validate:\\\"endswith=市\\\" label:\\\"地址\\\"` //以市结尾 Sex string `validate:\\\"required\\\" label:\\\"性别\\\"` }\",\"首先自定义 Taglabel，它的值就是字段的中文名，随后通过验证器注册一个TagNameFunc，它的作用是在获取字段名时或替换掉原名称。在errors.go文件中的Filed() string方法上的注释如下说道：\\\"带有标记名的字段名优先于字段的实际名称\\\"，所以后续在发生错误时，就可以使用自定义的中文名来替代英文单词。TagNameFunc如下：\",\"// 我们加上了一个自定义标签，这个标签用于给结构体字段做中文名，它会替代原本的字段名称 func CustomTagNameFunc(field reflect.StructField) string { label := field.Tag.Get(\\\"label\\\") if len(label) == 0 { return field.Name } return label }\",\"最后再注册\",\"validate.RegisterTagNameFunc(CustomTagNameFunc)\",\"再次执行输出\",\"姓名必须包含文本'jack' 年龄必须大于或等于18 地址必须以文本'市'结尾\",\"然后这还不够，依旧不足以作为错误信息返回给前端，我们需要将信息格式化成 json 或者任何适合消息传输的格式，你可能会想到直接将 map 序列化成 json，这是一种解决办法，不过你可能会得到如下结果：\",\"{ \\\"User.地址\\\": \\\"地址必须以文本'市'结尾\\\", \\\"User.姓名\\\": \\\"姓名必须包含文本'back'\\\", \\\"User.年龄\\\": \\\"年龄必须大于或等于18\\\", \\\"User.性别\\\": \\\"性别为必填字段\\\" }\",\"通过将 map 的 key 值处理下得到如下结果：\",\"{ \\\"地址\\\": \\\"地址必须以文本'市'结尾\\\", \\\"姓名\\\": \\\"姓名必须包含文本'back'\\\", \\\"年龄\\\": \\\"年龄必须大于或等于18\\\", \\\"性别\\\": \\\"性别为必填字段\\\" }\",\"不过并不建议将上面这种的信息返回给前端，我们可以处理成一个字符串作为信息返回\",\"姓名必须包含文本'back', 年龄必须大于或等于18, 地址必须以文本'市'结尾, 性别为必填字段,\",\"完整代码\",\"import ( \\\"fmt\\\" \\\"github.com/go-playground/locales/zh\\\" ut \\\"github.com/go-playground/universal-translator\\\" \\\"github.com/go-playground/validator/v10\\\" zh_trans \\\"github.com/go-playground/validator/v10/translations/zh\\\" \\\"reflect\\\" \\\"strings\\\" \\\"testing\\\" ) type User struct { Name string `validate:\\\"contains=back\\\" label:\\\"姓名\\\"` //名字包含jack Age int `validate:\\\"gte=18\\\" label:\\\"年龄\\\"` //大于等于17岁 Address string `validate:\\\"endswith=市\\\" label:\\\"地址\\\"` //以市结尾 Sex string `validate:\\\"required\\\" label:\\\"性别\\\"` } var ( uni *ut.UniversalTranslator validate *validator.Validate ) // 我们加上了一个自定义标签，这个标签用于给结构体字段做中文名，它会替代原本的字段名称 func CustomTagNameFunc(field reflect.StructField) string { label := field.Tag.Get(\\\"label\\\") if len(label) == 0 { return field.Name } return label } func TestTranslate(t *testing.T) { zh := zh.New() uni = ut.New(zh, zh) //这里的语言通常可以在http的请求头中的Accept-Language中获取对应的语言 trans, found := uni.GetTranslator(zh.Locale()) validate = validator.New() if found { zh_trans.RegisterDefaultTranslations(validate, trans) //注册默认翻译器 } validate.RegisterTagNameFunc(CustomTagNameFunc) err := validate.Struct(User{ Name: \\\"\\\", Age: 0, Address: \\\"\\\", }) translate := errInfoFormat(err.(validator.ValidationErrors), trans) fmt.Println(translate) } func errInfoFormat(errors validator.ValidationErrors, trans ut.Translator) string { builder := strings.Builder{} for _, err := range errors { builder.WriteString(err.Translate(trans)) builder.WriteString(\\\", \\\") } return builder.String() }\",\"最后的最后，如果觉得错误信息太冰冷，希望更人性化一点，可以重写指定 tag 的错误提示信息，这需要用到RegisterTranslation方法，同时也需要用到两个类型的函数，分别是RegisterTranslationsFunc负责注册对应 Tag 的翻译模板，另一个则是TranslationFunc，负责将模板处理得到最后的翻译内容。这里用required举个例子：\",\"func requiredOverrideRegister(ut ut.Translator) error { //这个函数的作用是注册翻译模板 return ut.Add(\\\"required\\\", \\\"{}是一个必须填写的字段\\\", true) // {}是占位符 true代表了是否重写已有的模板 } func requiredOverrideTranslation(ut ut.Translator, fe validator.FieldError) string { // 这个函数的作用是负责翻译内容 t, _ := ut.T(\\\"required\\\", fe.Field()) //参数可以有多个，取决于注册对应Tag的模板有多少个占位符 return t }\",\"最后注册一下\",\"validate.RegisterTranslation(\\\"required\\\", trans, requiredOverrideRegister, requiredOverrideTranslation)\",\"结果\",\"姓名必须包含文本'back', 年龄必须大于或等于18, 地址必须以文本'市'结尾, 性别是一个必须填写的字段,\"]},\"953\":{\"h\":\"语言文件\",\"t\":[\"事实上一个个写代码注册非常的繁琐，universal-translator提供了通过编写JSON 配置文件的方式来进行翻译：universal-translator/examples/full-with-files at master · go-playground/universal-translator (github.com)\",\"func TestFilei18n(t *testing.T) { validate = validator.New() zh := zh.New() universalTranslator := ut.New(zh, zh) translator, _ := universalTranslator.GetTranslator(zh.Locale()) zh_trans.RegisterDefaultTranslations(validate, translator) er := universalTranslator.Import(ut.FormatJSON, \\\"./zh.json\\\") //建议要在注册之后导入，这样才能覆盖原有的Tag if er != nil { log.Fatal(er) } type Gopher struct { Language string `validate:\\\"required\\\"` } err := validate.Struct(Gopher{ \\\"\\\", }) fmt.Println(err.(validator.ValidationErrors).Translate(translator)) }\",\"JSON 文件\",\"[ { \\\"locale\\\": \\\"zh\\\", \\\"key\\\": \\\"required\\\", \\\"trans\\\": \\\"这是一个十分重要的字段{0}，你必须填写它\\\", \\\"override\\\": true } ]\",\"输出\",\"map[Gopher.Language:这是一个十分重要的字段Language，你必须填写它]\",\"提示\",\"universal-translator在使用时有很多坑，如果是想要覆盖原有的Tag的话，type与rule都可以不填，因为原有的配置中也没有填，最好保持一致。填了什么type，就会将配置加到对应的 map 中，如果是Cardinal或者其他的type且rule配置了one之类的，那么就需要本地做相应的配置才能正常使用，否则将会报错。\"]},\"954\":{\"h\":\"HttpRouter\",\"t\":[\"仓库地址： julienschmidt/httprouter: A high performance HTTP request router that scales well (github.com)\",\"Gin 的路由组件采用的是HttpRouter，这同样也是一个轻量，高性能的路由组件，整个组件只有三个.go文件，代码十分的简洁，其主要有以下特点。\",\"一对一匹配：一个请求只能匹配到零个或一个路由，且有利于 SEO 优化。\",\"路径自动校正：随意选择喜欢的 URL 风格，就算多了或者少了一个斜杠，也会自动重定向。如果有大小写错误的话，查找时也会忽略大小写进行正确的重定向。\",\"路由参数自动解析：只要给路径段一个名称，路由器就会把动态值传递给你。由于路由器的设计，路径参数解析的占用非常低廉。\",\"零垃圾：在路由分配与调度的过程中，不会产生任何内存垃圾。\",\"RefstfulAPI 支持：路由器的设计鼓励合理的分层的 Restful API。\",\"错误处理：可以设置一个错误处理器来处理请求中的异常，路由器会将其捕获并记录，然后重定向到错误页面。\"]},\"955\":{\"h\":\"基本用法\",\"t\":[\"就像是springboot一样，一个函数绑定一个 URL 且对应一个处理器。\",\"package main import ( \\\"fmt\\\" \\\"github.com/julienschmidt/httprouter\\\" \\\"log\\\" \\\"net/http\\\" ) func Hello(w http.ResponseWriter, r *http.Request, _ httprouter.Params) { fmt.Fprintf(w, \\\"<h1>Hello World!\\\") } func main() { router := httprouter.New() router.GET(\\\"/hello\\\", Hello) log.Fatal(http.ListenAndServe(\\\":8080\\\", router)) }\",\"随后用浏览器或者任何的接口测试工具输入127.0.0.1:8080，即可看到正确的内容，我们可以看到HttpRouter仅仅只是做了路由，实际上依旧是采用的net/http默认组件，gin也是如此，只不过封装的相对而言要更深一点。\"]},\"956\":{\"h\":\"命名参数\",\"t\":[\"package main import ( \\\"fmt\\\" \\\"github.com/julienschmidt/httprouter\\\" \\\"log\\\" \\\"net/http\\\" ) func Hello(w http.ResponseWriter, r *http.Request, ps httprouter.Params) { fmt.Fprintf(w, \\\"<h1>Hello World!\\\") } func main() { router := httprouter.New() router.GET(\\\"/hello:name\\\", Hello) log.Fatal(http.ListenAndServe(\\\":8080\\\", router)) }\",\"这次的路由后面加了一个:name，name就是一个命名参数，可以通过httprouter.Params来访问参数切片，可以通过索引或者ByName(name)来获取参数。同样的，你可以把http.handler和http.handlerFunc当作httprouter.handler来使用，路由本身实现了其接口，例如下方的例子。\",\"func Hello(w http.ResponseWriter, r *http.Request) { params := httprouter.ParamsFromContext(r.Context()) //params := r.Context().Value(httprouter.ParamsKey)也可以 fmt.Fprintf(w, \\\"hello, %s!\\\\n\\\", params.ByName(\\\"name\\\")) }\",\"当方法绑定的路由是/user/:user，下面的几种 URL 的匹配情况\",\" /user/gordon match /user/you match /user/gordon/profile no match /user/ no match\",\"你不能将/user/new和/user/:user注册到同一个请求方法上，每一个请求方法应当是相互独立的。\"]},\"957\":{\"h\":\"捕获全部参数\",\"t\":[\"第二种类型是捕获全部参数，顾名思义，他们匹配一切，因此必须位于Pattern的尾部。\",\"Pattern: /src/*filepath /src/ match /src/somefile.go match /src/subdir/somefile.go match\",\"HttpRouter的工作原理是构建大量的前缀树，感兴趣的可以了解：httprouter package - github.com/julienschmidt/httprouter - Go Packages。\"]},\"958\":{\"h\":\"OPTIONS & CORS\",\"t\":[\"有些人可能会希望修改对于 OPTIONS 的自动响应并设置一些响应头来适配 CORS 的预检请求，这些需求可以通过使用Router.GlobalOPTIONShandler 来实现。\",\"router.GlobalOPTIONS = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) { if r.Header.Get(\\\"Access-Control-Request-Method\\\") != \\\"\\\" { // 设置CORS响应头 header := w.Header() header.Set(\\\"Access-Control-Allow-Methods\\\", r.Header.Get(\\\"Allow\\\")) header.Set(\\\"Access-Control-Allow-Origin\\\", \\\"*\\\") } // 适配状态码204 w.WriteHeader(http.StatusNoContent) })\"]},\"959\":{\"h\":\"NOT FOUND 处理器\",\"t\":[\"提示\",\"可能需要关闭Router.HandleMethodNotAllowed，来避免一些问题。\",\"router.NotFound = http.HandlerFunc(func(writer http.ResponseWriter, request *http.Request) { //你的逻辑 })\"]},\"960\":{\"h\":\"基本校验\",\"t\":[\"package main import ( \\\"fmt\\\" \\\"log\\\" \\\"net/http\\\" \\\"github.com/julienschmidt/httprouter\\\" ) func BasicAuth(h httprouter.Handle, requiredUser, requiredPassword string) httprouter.Handle { return func(w http.ResponseWriter, r *http.Request, ps httprouter.Params) { //获取基本的身份凭据 user, password, hasAuth := r.BasicAuth() if hasAuth && user == requiredUser && password == requiredPassword { // 将请求委派给给予的处理器 h(w, r, ps) } else { // 否则请求认证 w.Header().Set(\\\"WWW-Authenticate\\\", \\\"Basic realm=Restricted\\\") http.Error(w, http.StatusText(http.StatusUnauthorized), http.StatusUnauthorized) } } } func Index(w http.ResponseWriter, r *http.Request, _ httprouter.Params) { fmt.Fprint(w, \\\"Not protected!\\\\n\\\") } func Protected(w http.ResponseWriter, r *http.Request, _ httprouter.Params) { fmt.Fprint(w, \\\"Protected!\\\\n\\\") } func main() { user := \\\"gordon\\\" pass := \\\"secret!\\\" router := httprouter.New() router.GET(\\\"/\\\", Index) router.GET(\\\"/protected/\\\", BasicAuth(Protected, user, pass)) log.Fatal(http.ListenAndServe(\\\":8080\\\", router)) }\"]},\"961\":{\"h\":\"Gin\",\"t\":[\"官方文档：Gin Web Framework (gin-gonic.com)\",\"仓库地址：gin-gonic/gin: Gin is a HTTP web framework written in Go (Golang)\",\"官方示例：gin-gonic/examples: A repository to host examples and tutorials for Gin. (github.com)\"]},\"962\":{\"h\":\"介绍\",\"t\":[\"Gin 是一个用 Go (Golang) 编写的 Web 框架。 它具有类似 martini 的 API，性能要好得多，多亏了 httprouter，速度提高了 40 倍。 如果您需要性能和良好的生产力，您一定会喜欢 Gin。Gin 相比于 Iris 和 Beego 而言，更倾向于轻量化的框架，只负责 Web 部分，追求极致的路由性能，功能或许没那么全，胜在轻量易拓展，这也是它的优点。因此，在所有的 Web 框架中，Gin 是最容易上手和学习的。\"]},\"963\":{\"h\":\"特性\",\"t\":[\"快速：基于 Radix 树的路由，小内存占用。没有反射。可预测的 API 性能。\",\"支持中间件：传入的 HTTP 请求可以由一系列中间件和最终操作来处理。 例如：Logger，Authorization，GZIP，最终操作 DB。\",\"Crash 处理：Gin 可以 catch 一个发生在 HTTP 请求中的 panic 并 recover 它。这样，你的服务器将始终可用。\",\"JSON 验证：Gin 可以解析并验证请求的 JSON，例如检查所需值的存在。\",\"路由组：更好地组织路由。是否需要授权，不同的 API 版本…… 此外，这些组可以无限制地嵌套而不会降低性能。\",\"错误管理：Gin 提供了一种方便的方法来收集 HTTP 请求期间发生的所有错误。最终，中间件可以将它们写入日志文件，数据库并通过网络发送。\",\"内置渲染：Gin 为 JSON，XML 和 HTML 渲染提供了易于使用的 API。\",\"可扩展性：新建一个中间件非常简单\"]},\"964\":{\"h\":\"安装\",\"t\":[\"截止目前2022/11/22，gin 支持的 go 最低版本为1.16，建议使用go mod来管理项目依赖。\",\"go get -u github.com/gin-gonic/gin\",\"导入\",\"import \\\"github.com/gin-gonic/gin\\\"\"]},\"965\":{\"h\":\"快速开始\",\"t\":[\"package main import ( \\\"github.com/gin-gonic/gin\\\" \\\"net/http\\\" ) func main() { engine := gin.Default() //创建gin引擎 engine.GET(\\\"/ping\\\", func(context *gin.Context) { context.JSON(http.StatusOK, gin.H{ \\\"message\\\": \\\"pong\\\", }) }) engine.Run() //开启服务器，默认监听localhost:8080 }\",\"请求 URL\",\"GET localhost:8080/ping\",\"返回\",\"HTTP/1.1 200 OK Content-Type: application/json; charset=utf-8 Date: Tue, 22 Nov 2022 08:47:11 GMT Content-Length: 18 { \\\"message\\\": \\\"pong\\\" } Response file saved. > 2022-11-22T164711.200.json\"]},\"966\":{\"h\":\"文档\",\"t\":[\"其实Gin官方文档里面并没有多少教程，大多数只是一些介绍和基本使用和一些例子，但是gin-gonic/ 组织下，有一个gin-gonic/examples仓库，这是一个由社区共同维护的gin示例仓库。都是全英文，更新时间并不是特别频繁，笔者也是从这里慢慢学习的gin框架。\",\"示例仓库地址：gin-gonic/examples: A repository to host examples and tutorials for Gin. (github.com)\",\"提示\",\"开始之前建议可以阅读一下HttpRouter:HttpRouter\"]},\"967\":{\"h\":\"参数解析\",\"t\":[\"gin中的参数解析总共支持三种方式:路由参数，URL参数，表单参数，下面逐一讲解并结合代码示例，比较简单易懂。\"]},\"968\":{\"h\":\"路由参数\",\"t\":[\"路由参数其实是封装了HttpRouter的参数解析功能，使用方法基本上与HttpRouter一致。\",\"package main import ( \\\"github.com/gin-gonic/gin\\\" \\\"log\\\" \\\"net/http\\\" ) func main() { e := gin.Default() e.GET(\\\"/findUser/:username/:userid\\\", FindUser) e.GET(\\\"/downloadFile/*filepath\\\", UserPage) log.Fatalln(e.Run(\\\":8080\\\")) } // 命名参数示例 func FindUser(c *gin.Context) { username := c.Param(\\\"username\\\") userid := c.Param(\\\"userid\\\") c.String(http.StatusOK, \\\"username is %s\\\\n userid is %s\\\", username, userid) } // 路径参数示例 func UserPage(c *gin.Context) { filepath := c.Param(\\\"filepath\\\") c.String(http.StatusOK, \\\"filepath is %s\\\", filepath) }\",\"示例一\",\"curl --location --request GET '127.0.0.1:8080/findUser/jack/001'\",\"username is jack userid is 001\",\"示例二\",\"curl --location --request GET '127.0.0.1:8080/downloadFile/img/fruit.png'\",\"filepath is /img/fruit.png\"]},\"969\":{\"h\":\"URL 参数\",\"t\":[\"传统的 URL 参数，格式就是/url?key=val&key1=val1&key2=val2。\",\"package main import ( \\\"github.com/gin-gonic/gin\\\" \\\"log\\\" \\\"net/http\\\" ) func main() { e := gin.Default() e.GET(\\\"/findUser\\\", FindUser) log.Fatalln(e.Run(\\\":8080\\\")) } func FindUser(c *gin.Context) { username := c.DefaultQuery(\\\"username\\\", \\\"defaultUser\\\") userid := c.Query(\\\"userid\\\") c.String(http.StatusOK, \\\"username is %s\\\\nuserid is %s\\\", username, userid) }\",\"示例一\",\"curl --location --request GET '127.0.0.1:8080/findUser?username=jack&userid=001'\",\"username is jack userid is 001\",\"示例二\",\"curl --location --request GET '127.0.0.1:8080/findUser'\",\"username is defaultUser userid is\"]},\"970\":{\"h\":\"表单参数\",\"t\":[\"表单的内容类型一般有application/json，application/x-www-form-urlencoded，application/xml，multipart/form-data。\",\"package main import ( \\\"github.com/gin-gonic/gin\\\" \\\"net/http\\\" ) func main() { e := gin.Default() e.POST(\\\"/register\\\", RegisterUser) e.POST(\\\"/update\\\", UpdateUser) e.Run(\\\":8080\\\") } func RegisterUser(c *gin.Context) { username := c.PostForm(\\\"username\\\") password := c.PostForm(\\\"password\\\") c.String(http.StatusOK, \\\"successfully registered,your username is [%s],password is [%s]\\\", username, password) } func UpdateUser(c *gin.Context) { var form map[string]string c.ShouldBind(&form) c.String(http.StatusOK, \\\"successfully update,your username is [%s],password is [%s]\\\", form[\\\"username\\\"], form[\\\"password\\\"]) }\",\"示例一：使用form-data\",\"curl --location --request POST '127.0.0.1:8080/register' \\\\ --form 'username=\\\"jack\\\"' \\\\ --form 'password=\\\"123456\\\"'\",\"successfully registered,your username is [jack],password is [123456]\",\"PostForm方法默认解析application/x-www-form-urlencoded和multipart/form-data类型的表单。\",\"示例二：使用json\",\"curl --location --request POST '127.0.0.1:8080/update' \\\\ --header 'Content-Type: application/json' \\\\ --data-raw '{ \\\"username\\\":\\\"username\\\", \\\"password\\\":\\\"123456\\\" }'\",\"successfully update,your username is [username],password is [123456]\"]},\"971\":{\"h\":\"数据解析\",\"t\":[\"在大多数情况下，我们都会使用结构体来承载数据，而不是直接解析参数。在gin中，用于数据绑定的方法主要是Bind()和ShouldBind()，两者的区别在于前者内部也是直接调用的ShouldBind()，当然返回err时，会直接进行 400 响应，后者则不会。如果想要更加灵活的进行错误处理，建议选择后者。这两个函数会自动根据请求的content-type来进行推断用什么方式解析。\",\"func (c *Context) MustBindWith(obj any, b binding.Binding) error { // 调用了ShouldBindWith() if err := c.ShouldBindWith(obj, b); err != nil { c.AbortWithError(http.StatusBadRequest, err).SetType(ErrorTypeBind) // 直接响应400 badrequest return err } return nil }\",\"如果想要自行选择可以使用BindWith()和ShouldBindWith()，例如\",\"c.MustBindWith(obj, binding.JSON) //json c.MustBindWith(obj, binding.XML) //xml\",\"gin 支持的绑定类型有如下几种实现：\",\"var ( JSON = jsonBinding{} XML = xmlBinding{} Form = formBinding{} Query = queryBinding{} FormPost = formPostBinding{} FormMultipart = formMultipartBinding{} ProtoBuf = protobufBinding{} MsgPack = msgpackBinding{} YAML = yamlBinding{} Uri = uriBinding{} Header = headerBinding{} TOML = tomlBinding{} )\",\"示例\",\"package main import ( \\\"fmt\\\" \\\"github.com/gin-gonic/gin\\\" \\\"net/http\\\" ) type LoginUser struct { Username string `bind:\\\"required\\\" json:\\\"username\\\" form:\\\"username\\\" uri:\\\"username\\\"` Password string `bind:\\\"required\\\" json:\\\"password\\\" form:\\\"password\\\" uri:\\\"password\\\"` } func main() { e := gin.Default() e.POST(\\\"/loginWithJSON\\\", Login) e.POST(\\\"/loginWithForm\\\", Login) e.GET(\\\"/loginWithQuery/:username/:password\\\", Login) e.Run(\\\":8080\\\") } func Login(c *gin.Context) { var login LoginUser // 使用ShouldBind来让gin自动推断 if c.ShouldBind(&login) == nil && login.Password != \\\"\\\" && login.Username != \\\"\\\" { c.String(http.StatusOK, \\\"login successfully !\\\") } else { c.String(http.StatusBadRequest, \\\"login failed !\\\") } fmt.Println(login) }\"]},\"972\":{\"h\":\"Json 数据绑定\",\"t\":[\"curl --location --request POST '127.0.0.1:8080/loginWithJSON' \\\\ --header 'Content-Type: application/json' \\\\ --data-raw '{ \\\"username\\\":\\\"root\\\", \\\"password\\\":\\\"root\\\" }'\",\"login successfully !\"]},\"973\":{\"h\":\"表单数据绑定\",\"t\":[\"curl --location --request POST '127.0.0.1:8080/loginWithForm' \\\\ --form 'username=\\\"root\\\"' \\\\ --form 'password=\\\"root\\\"'\",\"login successfully !\"]},\"974\":{\"h\":\"URL 数据绑定\",\"t\":[\"curl --location --request GET '127.0.0.1:8080/loginWithQuery/root/root'\",\"login failed !\",\"到了这里就会发生错误了，因为这里输出的content-type是空字符串，无法推断到底是要如何进行数据解析。所以当使用 URL 参数时，我们应该手动指定解析方式，例如：\",\"if err := c.ShouldBindUri(&login); err == nil && login.Password != \\\"\\\" && login.Username != \\\"\\\" { c.String(http.StatusOK, \\\"login successfully !\\\") } else { fmt.Println(err) c.String(http.StatusBadRequest, \\\"login failed !\\\") }\"]},\"975\":{\"h\":\"多次绑定\",\"t\":[\"一般方法都是通过调用 c.Request.Body 方法绑定数据，但不能多次调用这个方法，例如c.ShouldBind，不可重用，如果想要多次绑定的话，可以使用\",\"c.ShouldBindBodyWith。\",\"func SomeHandler(c *gin.Context) { objA := formA{} objB := formB{} // 读取 c.Request.Body 并将结果存入上下文。 if errA := c.ShouldBindBodyWith(&objA, binding.JSON); errA == nil { c.String(http.StatusOK, `the body should be formA`) // 这时, 复用存储在上下文中的 body。 } if errB := c.ShouldBindBodyWith(&objB, binding.JSON); errB == nil { c.String(http.StatusOK, `the body should be formB JSON`) // 可以接受其他格式 } if errB2 := c.ShouldBindBodyWith(&objB, binding.XML); errB2 == nil { c.String(http.StatusOK, `the body should be formB XML`) } }\",\"提示\",\"c.ShouldBindBodyWith 会在绑定之前将 body 存储到上下文中。 这会对性能造成轻微影响，如果调用一次就能完成绑定的话，那就不要用这个方法。只有某些格式需要此功能，如 JSON, XML, MsgPack, ProtoBuf。 对于其他格式, 如 Query, Form, FormPost, FormMultipart 可以多次调用c.ShouldBind() 而不会造成任何性能损失 。\"]},\"976\":{\"h\":\"数据校验\",\"t\":[\"gin内置的校验工具其实是github.com/go-playground/validator/v10，使用方法也几乎没有什么差别，Validator\"]},\"977\":{\"h\":\"简单示例\",\"t\":[\"type LoginUser struct { Username string `binding:\\\"required\\\" json:\\\"username\\\" form:\\\"username\\\" uri:\\\"username\\\"` Password string `binding:\\\"required\\\" json:\\\"password\\\" form:\\\"password\\\" uri:\\\"password\\\"` } func main() { e := gin.Default() e.POST(\\\"/register\\\", Register) log.Fatalln(e.Run(\\\":8080\\\")) } func Register(ctx *gin.Context) { newUser := &LoginUser{} if err := ctx.ShouldBind(newUser); err == nil { ctx.String(http.StatusOK, \\\"user%+v\\\", *newUser) } else { ctx.String(http.StatusBadRequest, \\\"invalid user,%v\\\", err) } }\",\"测试\",\"curl --location --request POST 'http://localhost:8080/register' \\\\ --header 'Content-Type: application/json' \\\\ --data-raw '{ \\\"username\\\":\\\"jack1\\\" }'\",\"输出\",\"invalid user,Key: 'LoginUser.Password' Error:Field validation for 'Password' failed on the 'required' tag\",\"提示\",\"需要注意的一点是，gin 中 validator 的校验 tag 是binding，而单独使用validator的的校验 tag 是validator\"]},\"978\":{\"h\":\"数据响应\",\"t\":[\"数据响应是接口处理中最后一步要做的事情，后端将所有数据处理完成后，通过 HTTP 协议返回给调用者，gin 对于数据响应提供了丰富的内置支持，用法简洁明了，上手十分容易。\"]},\"979\":{\"h\":\"简单示例\",\"t\":[\"func Hello(c *gin.Context) { // 返回纯字符串格式的数据，http.StatusOK代表着200状态码，数据为\\\"Hello world !\\\" c.String(http.StatusOK, \\\"Hello world !\\\") }\"]},\"980\":{\"h\":\"HTML 渲染\",\"t\":[\"提示\",\"文件加载的时候，默认根路径是项目路径，也就是go.mod文件所在的路径，下面例子中的index.html即位于根路径下的index.html，不过一般情况下这些模板文件都不会放在根路径，而是会存放在静态资源文件夹中\",\"func main() { e := gin.Default() // 加载HTML文件，也可以使用Engine.LoadHTMLGlob() e.LoadHTMLFiles(\\\"index.html\\\") e.GET(\\\"/\\\", Index) log.Fatalln(e.Run(\\\":8080\\\")) } func Index(c *gin.Context) { c.HTML(http.StatusOK, \\\"index.html\\\", gin.H{}) }\",\"测试\",\"curl --location --request GET 'http://localhost:8080/'\",\"返回\",\"<!DOCTYPE html> <html lang=\\\"en\\\"> <head> <meta charset=\\\"UTF-8\\\" /> <title>GinLearn</title> </head> <body> <h1>Hello World!</h1> <h1>This is a HTML Template Render Example</h1> </body> </html>\"]},\"981\":{\"h\":\"快速响应\",\"t\":[\"前面经常用到context.String()方法来进行数据响应，这是最原始的响应方法，直接返回一个字符串，gin中其实还内置了许多了快速响应的方法例如:\",\"// 使用Render写入响应头，并进行数据渲染 func (c *Context) Render(code int, r render.Render) // 渲染一个HTML模板，name是html路径，obj是内容 func (c *Context) HTML(code int, name string, obj any) // 以美化了的缩进JSON字符串进行数据渲染，通常不建议使用这个方法，因为会造成更多的传输消耗。 func (c *Context) IndentedJSON(code int, obj any) // 安全的JSON，可以防止JSON劫持，详情了解：https://www.cnblogs.com/xusion/articles/3107788.html func (c *Context) SecureJSON(code int, obj any) // JSONP方式进行渲染 func (c *Context) JSONP(code int, obj any) // JSON方式进行渲染 func (c *Context) JSON(code int, obj any) // JSON方式进行渲染，会将unicode码转换为ASCII码 func (c *Context) AsciiJSON(code int, obj any) // JSON方式进行渲染，不会对HTML特殊字符串进行转义 func (c *Context) PureJSON(code int, obj any) // XML方式进行渲染 func (c *Context) XML(code int, obj any) // YML方式进行渲染 func (c *Context) YAML(code int, obj any) // TOML方式进行渲染 func (c *Context) TOML(code int, obj interface{}) // ProtoBuf方式进行渲染 func (c *Context) ProtoBuf(code int, obj any) // String方式进行渲染 func (c *Context) String(code int, format string, values ...any) // 重定向到特定的位置 func (c *Context) Redirect(code int, location string) // 将data写入响应流中 func (c *Context) Data(code int, contentType string, data []byte) // 通过reader读取流并写入响应流中 func (c *Context) DataFromReader(code int, contentLength int64, contentType string, reader io.Reader, extraHeaders map[string]string) // 高效的将文件写入响应流 func (c *Context) File(filepath string) // 以一种高效的方式将fs中的文件流写入响应流 func (c *Context) FileFromFS(filepath string, fs http.FileSystem) // 以一种高效的方式将fs中的文件流写入响应流，并且在客户端会以指定的文件名进行下载 func (c *Context) FileAttachment(filepath, filename string) // 将服务端推送流写入响应流中 func (c *Context) SSEvent(name string, message any) // 发送一个流响应并返回一个布尔值，以此来判断客户端是否在流中间断开 func (c *Context) Stream(step func(w io.Writer) bool) bool\",\"对于大多数应用而言，用的最多的还是context.JSON，其他的相对而言要少一些，这里就不举例子演示了，因为都比较简单易懂，差不多都是直接调用的事情。\"]},\"982\":{\"h\":\"异步处理\",\"t\":[\"在 gin 中，异步处理需要结合 goroutine 使用，使用起来十分简单。\",\"// copy返回一个当前Context的副本以便在当前Context作用范围外安全的使用，可以用于传递给一个goroutine func (c *Context) Copy() *Context\",\"func main() { e := gin.Default() e.GET(\\\"/hello\\\", Hello) log.Fatalln(e.Run(\\\":8080\\\")) } func Hello(c *gin.Context) { ctx := c.Copy() go func() { // 子协程应该使用Context的副本，不应该使用原始Context log.Println(\\\"异步处理函数: \\\", ctx.HandlerNames()) }() log.Println(\\\"接口处理函数: \\\", c.HandlerNames()) c.String(http.StatusOK, \\\"hello\\\") }\",\"测试\",\"curl --location --request GET 'http://localhost:8080/hello'\",\"输出\",\"2022/12/21 13:33:47 异步处理函数: [] 2022/12/21 13:33:47 接口处理函数: [github.com/gin-gonic/gin.LoggerWithConfig.func1 github.com/gin-gonic/gin.CustomRecoveryWithWriter.func1 main.Hello] [GIN] 2022/12/21 - 13:33:47 | 200 | 11.1927ms | ::1 | GET \\\"/hello\\\"\",\"可以看到两者输出不同，副本在复制时，为了安全考虑，删掉了许多元素的值。\"]},\"983\":{\"h\":\"文件传输\",\"t\":[\"文件传输是 Web 应用的一个不可或缺的功能，gin 对于此的支持也是封装的十分简单，但其实本质上和用原生的net/http的流程都差不多。流程都是从请求体中读取文件流，然后再保存到本地。\"]},\"984\":{\"h\":\"单文件上传\",\"t\":[\"func main() { e := gin.Default() e.POST(\\\"/upload\\\", uploadFile) log.Fatalln(e.Run(\\\":8080\\\")) } func uploadFile(ctx *gin.Context) { // 获取文件 file, err := ctx.FormFile(\\\"file\\\") if err != nil { ctx.String(http.StatusBadRequest, \\\"%+v\\\", err) return } // 保存在本地 err = ctx.SaveUploadedFile(file, \\\"./\\\"+file.Filename) if err != nil { ctx.String(http.StatusBadRequest, \\\"%+v\\\", err) return } // 返回结果 ctx.String(http.StatusOK, \\\"upload %s size:%d byte successfully!\\\", file.Filename, file.Size) }\",\"测试\",\"curl --location --request POST 'http://localhost:8080/upload' \\\\ --form 'file=@\\\"/C:/Users/user/Pictures/Camera Roll/a.jpg\\\"'\",\"结果\",\"upload a.jpg size:1424 byte successfully!\",\"提示\",\"一般情况下，上传文件的Method都会指定用POST，一些公司可能会倾向于使用PUT，前者是简单 HTTP 请求，后者是复杂 HTTP 请求，具体区别不作赘述，如果使用后者的话，尤其是前后端分离的项目时，需要进行相应的跨域处理，而 Gin 默认的配置是不支持跨域的跨域配置。\"]},\"985\":{\"h\":\"多文件上传\",\"t\":[\"func main() { e := gin.Default() e.POST(\\\"/upload\\\", uploadFile) e.POST(\\\"/uploadFiles\\\", uploadFiles) log.Fatalln(e.Run(\\\":8080\\\")) } func uploadFiles(ctx *gin.Context) { // 获取gin解析好的multipart表单 form, _ := ctx.MultipartForm() // 根据键值取得对应的文件列表 files := form.File[\\\"files\\\"] // 遍历文件列表，保存到本地 for _, file := range files { err := ctx.SaveUploadedFile(file, \\\"./\\\"+file.Filename) if err != nil { ctx.String(http.StatusBadRequest, \\\"upload failed\\\") return } } // 返回结果 ctx.String(http.StatusOK, \\\"upload %d files successfully!\\\", len(files)) }\",\"测试\",\"curl --location --request POST 'http://localhost:8080/uploadFiles' \\\\ --form 'files=@\\\"/C:/Users/Stranger/Pictures/Camera Roll/a.jpg\\\"' \\\\ --form 'files=@\\\"/C:/Users/Stranger/Pictures/Camera Roll/123.jpg\\\"' \\\\ --form 'files=@\\\"/C:/Users/Stranger/Pictures/Camera Roll/girl.jpg\\\"'\",\"输出\",\"upload 3 files successfully!\"]},\"986\":{\"h\":\"文件下载\",\"t\":[\"关于文件下载的部分 Gin 对于原有标准库的 API 再一次封装，使得文件下载异常简单。\",\"func main() { e := gin.Default() e.POST(\\\"/upload\\\", uploadFile) e.POST(\\\"/uploadFiles\\\", uploadFiles) e.GET(\\\"/download/:filename\\\", download) log.Fatalln(e.Run(\\\":8080\\\")) } func download(ctx *gin.Context) { // 获取文件名 filename := ctx.Param(\\\"filename\\\") // 返回对应文件 ctx.FileAttachment(filename, filename) }\",\"测试\",\"curl --location --request GET 'http://localhost:8080/download/a.jpg'\",\"结果\",\"Content-Disposition: attachment; filename=\\\"a.jpg\\\" Date: Wed, 21 Dec 2022 08:04:17 GMT Last-Modified: Wed, 21 Dec 2022 07:50:44 GMT\",\"是不是觉得简单过头了，不妨不用框架的方法，自行编写一遍过程\",\"func download(ctx *gin.Context) { // 获取参数 filename := ctx.Param(\\\"filename\\\") // 请求响应对象和请求对象 response, request := ctx.Writer, ctx.Request // 写入响应头 // response.Header().Set(\\\"Content-Type\\\", \\\"application/octet-stream\\\") 以二进制流传输文件 response.Header().Set(\\\"Content-Disposition\\\", `attachment; filename*=UTF-8''`+url.QueryEscape(filename)) // 对文件名进行安全转义 response.Header().Set(\\\"Content-Transfer-Encoding\\\", \\\"binary\\\") // 传输编码 http.ServeFile(response, request, filename) }\",\"其实net/http也已经封装的足够好了\",\"提示\",\"可以通过Engine.MaxMultipartMemory来设置文件传输的最大内存，默认为32 << 20 // 32 MB\"]},\"987\":{\"h\":\"路由管理\",\"t\":[\"路由管理是一个系统中非常重要的部分，需要确保每一个请求都能被正确的映射到对应的函数上。\"]},\"988\":{\"h\":\"路由组\",\"t\":[\"创建一个路由组是将接口分类，不同类别的接口对应不同的功能，也更易于管理。\",\"func Hello(c *gin.Context) { } func Login(c *gin.Context) { } func Update(c *gin.Context) { } func Delete(c *gin.Context) { }\",\"假设我们有以上四个接口，暂时不管其内部实现，Hello，Login是一组，Update，Delete是一组。\",\"func (group *RouterGroup) Group(relativePath string, handlers ...HandlerFunc) *RouterGroup\",\"在创建分组的时候，我们也可以给分组的根路由注册处理器，不过大多数时候并不会这么做。\",\"func main() { e := gin.Default() v1 := e.Group(\\\"v1\\\") { v1.GET(\\\"/hello\\\", Hello) v1.GET(\\\"/login\\\", Login) } v2 := e.Group(\\\"v2\\\") { v2.POST(\\\"/update\\\", Update) v2.DELETE(\\\"/delete\\\", Delete) } }\",\"我们将其分成了v1，v2两个分组，其中的花括号{}仅仅只是为了规范，表名花括号内注册的处理器是属于同一个路由分组，在功能上没有任何作用。同样的，gin 也支持嵌套分组，方法与上例一致，这里就不再演示。\"]},\"989\":{\"h\":\"404 路由\",\"t\":[\"gin 中的Engine结构体提供了一个方法NoRoute，来设置当访问的 URL 不存在时如何处理，开发者可以将逻辑写入此方法中，以便路由未找到时自动调用，默认会返回 404 状态码\",\"func (engine *Engine) NoRoute(handlers ...HandlerFunc)\",\"我们拿上个例子举例\",\"func main() { e := gin.Default() v1 := e.Group(\\\"v1\\\") { v1.GET(\\\"/hello\\\", Hello) v1.GET(\\\"/login\\\", Login) } v2 := e.Group(\\\"v2\\\") { v2.POST(\\\"/update\\\", Update) v2.DELETE(\\\"/delete\\\", Delete) } // 注册处理器 e.NoRoute(func(context *gin.Context) { // 这里只是演示，不要在生产环境中直接返回HTML代码 context.String(http.StatusNotFound, \\\"<h1>404 Page Not Found</h1>\\\") }) log.Fatalln(e.Run(\\\":8080\\\")) }\",\"随便发一个请求\",\"curl --location --request GET 'http://localhost:8080/'\",\"<h1>404 Page Not Found</h1>\"]},\"990\":{\"h\":\"405 路由\",\"t\":[\"Http 状态码中，405 代表着当前请求的方法类型是不允许的，gin 中提供了如下方法\",\"func (engine *Engine) NoMethod(handlers ...HandlerFunc)\",\"来注册一个处理器，以便在发生时自动调用，前提是设置Engine.HandleMethodNotAllowed = true。\",\"func main() { e := gin.Default() // 需要将其设置为true e.HandleMethodNotAllowed = true v1 := e.Group(\\\"/v1\\\") { v1.GET(\\\"/hello\\\", Hello) v1.GET(\\\"/login\\\", Login) } v2 := e.Group(\\\"/v2\\\") { v2.POST(\\\"/update\\\", Update) v2.DELETE(\\\"/delete\\\", Delete) } e.NoRoute(func(context *gin.Context) { context.String(http.StatusNotFound, \\\"<h1>404 Page Not Found</h1>\\\") }) // 注册处理器 e.NoMethod(func(context *gin.Context) { context.String(http.StatusMethodNotAllowed, \\\"method not allowed\\\") }) log.Fatalln(e.Run(\\\":8080\\\")) }\",\"配置好后，gin 默认的 header 是不支持OPTION请求的，测试一下\",\"curl --location --request OPTIONS 'http://localhost:8080/v2/delete'\",\"method not allowed\",\"至此配置成功\"]},\"991\":{\"h\":\"重定向\",\"t\":[\"gin 中的重定向十分简单，调用gin.Context.Redirect()方法即可。\",\"func main() { e := gin.Default() e.GET(\\\"/\\\", Index) e.GET(\\\"/hello\\\", Hello) log.Fatalln(e.Run(\\\":8080\\\")) } func Index(c *gin.Context) { c.Redirect(http.StatusMovedPermanently, \\\"/hello\\\") } func Hello(c *gin.Context) { c.String(http.StatusOK, \\\"hello\\\") }\",\"测试\",\"curl --location --request GET 'http://localhost:8080/'\",\"输出\",\"hello\"]},\"992\":{\"h\":\"中间件\",\"t\":[\"gin 十分轻便灵活，拓展性非常高，对于中间件的支持也非常友好。在 Gin 中，所有的接口请求都要经过中间件，通过中间件，开发者可以自定义实现很多功能和逻辑，gin 虽然本身自带的功能很少，但是由第三方社区开发的 gin 拓展中间件十分丰富。\",\"中间件本质上其实还是一个接口处理器\",\"// HandlerFunc defines the handler used by gin middleware as return value. type HandlerFunc func(*Context)\",\"从某种意义上来说，每一个请求对应的处理器也是中间件，只不过是作用范围非常小的局部中间件。\",\"func Default() *Engine { debugPrintWARNINGDefault() engine := New() engine.Use(Logger(), Recovery()) return engine }\",\"查看 gin 的源代码，Default函数中，返回的默认Engine就使用两个默认中间件Logger()，Recovery()，如果不想使用默认的中间件也可以使用gin.New()来代替。\"]},\"993\":{\"h\":\"全局中间件\",\"t\":[\"全局中间件即作用范围为全局，整个系统所有的请求都会经过此中间件。\",\"func GlobalMiddleware() gin.HandlerFunc { return func(ctx *gin.Context) { fmt.Println(\\\"全局中间件被执行...\\\") } }\",\"先创建一个闭包函数来创建中间件，再通过Engine.Use()来注册全局中间件。\",\"func main() { e := gin.Default() // 注册全局中间件 e.Use(GlobalMiddleware()) v1 := e.Group(\\\"/v1\\\") { v1.GET(\\\"/hello\\\", Hello) v1.GET(\\\"/login\\\", Login) } v2 := e.Group(\\\"/v2\\\") { v2.POST(\\\"/update\\\", Update) v2.DELETE(\\\"/delete\\\", Delete) } log.Fatalln(e.Run(\\\":8080\\\")) }\",\"测试\",\"curl --location --request GET 'http://localhost:8080/v1/hello'\",\"输出\",\"[GIN-debug] Listening and serving HTTP on :8080 全局中间件被执行... [GIN] 2022/12/21 - 11:57:52 | 200 | 538.9µs | ::1 | GET \\\"/v1/hello\\\"\"]},\"994\":{\"h\":\"局部中间件\",\"t\":[\"局部中间件即作用范围为局部，系统中局部的请求会经过此中间件。局部中间件可以注册到单个路由上，不过更多时候是注册到路由组上。\",\"func main() { e := gin.Default() // 注册全局中间件 e.Use(GlobalMiddleware()) // 注册路由组局部中间件 v1 := e.Group(\\\"/v1\\\", LocalMiddleware()) { v1.GET(\\\"/hello\\\", Hello) v1.GET(\\\"/login\\\", Login) } v2 := e.Group(\\\"/v2\\\") { // 注册单个路由局部中间件 v2.POST(\\\"/update\\\", LocalMiddleware(), Update) v2.DELETE(\\\"/delete\\\", Delete) } log.Fatalln(e.Run(\\\":8080\\\")) }\",\"测试\",\"curl --location --request POST 'http://localhost:8080/v2/update'\",\"输出\",\"全局中间件被执行... 局部中间件被执行 [GIN] 2022/12/21 - 12:05:03 | 200 | 999.9µs | ::1 | POST \\\"/v2/update\\\"\"]},\"995\":{\"h\":\"中间件原理\",\"t\":[\"Gin 中间的使用和自定义非常容易，其内部的原理也比较简单，为了后续的学习，需要简单的了解下内部原理。Gin 中的中间件其实用到了责任链模式，Context中维护着一个HandlersChain，本质上是一个[]HandlerFunc，和一个index，其数据类型为int8。在Engine.handlerHTTPRequest(c *Context)方法中，有一段代码表明了调用过程：gin 在路由树中找到了对应的路由后，便调用了Next()方法。\",\"if value.handlers != nil { // 将调用链赋值给Context c.handlers = value.handlers c.fullPath = value.fullPath // 调用中间件 c.Next() c.writermem.WriteHeaderNow() return }\",\"Next()的调用才是关键，Next()会遍历路由的handlers中的HandlerFunc 并执行，此时可以看到index的作用就是记录中间件的调用位置。其中，给对应路由注册的接口函数也在handlers内，这也就是为什么前面会说接口也是一个中间件。\",\"func (c *Context) Next() { // 一进来就+1是为了避免陷入递归死循环，默认值是-1 c.index++ for c.index < int8(len(c.handlers)) { // 执行HandlerFunc c.handlers[c.index](c) // 执行完毕，index+1 c.index++ } }\",\"修改一下Hello()的逻辑，来验证是否果真如此\",\"func Hello(c *gin.Context) { fmt.Println(c.HandlerNames()) }\",\"输出结果为\",\"[github.com/gin-gonic/gin.LoggerWithConfig.func1 github.com/gin-gonic/gin.CustomRecoveryWithWriter.func1 main.GlobalMiddleware.func1 main.LocalMiddleware.func1 main.Hello]\",\"可以看到中间件调用链的顺序为：Logger -> Recovery -> GlobalMiddleware -> LocalMiddleWare -> Hello，调用链的最后一个元素才是真正要执行的接口函数，前面的都是中间件。\",\"提示\",\"在注册局部路由时，有如下一个断言\",\"finalSize := len(group.Handlers) + len(handlers) //中间件总数 assert1(finalSize < int(abortIndex), \\\"too many handlers\\\")\",\"其中abortIndex int8 = math.MaxInt8 >> 1值为 63，即使用系统时路由注册数量不要超过 63 个。\"]},\"996\":{\"h\":\"计时器中间件\",\"t\":[\"在知晓了上述的中间件原理后，就可以编写一个简单的请求时间统计中间件。\",\"func TimeMiddleware() gin.HandlerFunc { return func(context *gin.Context) { // 记录开始时间 start := time.Now() // 执行后续调用链 context.Next() // 计算时间间隔 duration := time.Since(start) // 输出纳秒，以便观测结果 fmt.Println(\\\"请求用时: \\\", duration.Nanoseconds()) } } func main() { e := gin.Default() // 注册全局中间件，计时中间件 e.Use(GlobalMiddleware(), TimeMiddleware()) // 注册路由组局部中间件 v1 := e.Group(\\\"/v1\\\", LocalMiddleware()) { v1.GET(\\\"/hello\\\", Hello) v1.GET(\\\"/login\\\", Login) } v2 := e.Group(\\\"/v2\\\") { // 注册单个路由局部中间件 v2.POST(\\\"/update\\\", LocalMiddleware(), Update) v2.DELETE(\\\"/delete\\\", Delete) } log.Fatalln(e.Run(\\\":8080\\\")) }\",\"测试\",\"curl --location --request GET 'http://localhost:8080/v1/hello'\",\"输出\",\"请求用时: 517600\",\"一个简单的计时器中间件就已经编写完毕了，后续可以凭借自己的摸索编写一些功能更实用的中间件。\"]},\"997\":{\"h\":\"服务配置\",\"t\":[\"光是使用默认的配置是远远不够的，大多数情况下都需求修改很多的服务配置才能达到需求。\"]},\"998\":{\"h\":\"Http 配置\",\"t\":[\"可以通过net/http创建 Server 来配置，Gin 本身也支持像原生 API 一样使用 Gin。\",\"func main() { router := gin.Default() server := &http.Server{ Addr: \\\":8080\\\", Handler: router, ReadTimeout: 10 * time.Second, WriteTimeout: 10 * time.Second, MaxHeaderBytes: 1 << 20, } log.Fatal(server.ListenAndServe()) }\"]},\"999\":{\"h\":\"静态资源配置\",\"t\":[\"静态资源在以往基本上是服务端不可或缺的一部分，尽管在现在使用占比正在逐渐减少，但仍旧有大量的系统还是使用单体架构的情况。\",\"Gin 提供了三个方法来加载静态资源\",\"// 加载某一静态文件夹 func (group *RouterGroup) Static(relativePath, root string) IRoutes // 加载某一个fs func (group *RouterGroup) StaticFS(relativePath string, fs http.FileSystem) IRoutes // 加载某一个静态文件 func (group *RouterGroup) StaticFile(relativePath, filepath string) IRoutes\",\"提示\",\"relativePath 是映射到网页 URL 上的相对路径，root 是文件在项目中的实际路径\",\"假设项目的目录如下\",\"root | |-- static | | | |-- a.jpg | | | |-- favicon.ico | |-- view | |-- html\",\"func main() { router := gin.Default() // 加载静态文件目录 router.Static(\\\"/static\\\", \\\"./static\\\") // 加载静态文件目录 router.StaticFS(\\\"/view\\\", http.Dir(\\\"view\\\")) // 加载静态文件 router.StaticFile(\\\"/favicon\\\", \\\"./static/favicon.ico\\\") router.Run(\\\":8080\\\") }\"]},\"1000\":{\"h\":\"跨域配置\",\"t\":[\"Gin 本身是没有对于跨域配置做出任何处理，需要自行编写中间件来进行实现相应的需求，其实难度也不大，稍微熟悉 HTTP 协议的人一般都能写出来，逻辑基本上都是那一套。\",\"func CorsMiddle() gin.HandlerFunc { return func(c *gin.Context) { method := c.Request.Method origin := c.Request.Header.Get(\\\"Origin\\\") if origin != \\\"\\\" { // 生产环境中的服务端通常都不会填 *，应当填写指定域名 c.Header(\\\"Access-Control-Allow-Origin\\\", origin) // 允许使用的HTTP METHOD c.Header(\\\"Access-Control-Allow-Methods\\\", \\\"POST, GET, OPTIONS, PUT, DELETE, UPDATE\\\") // 允许使用的请求头 c.Header(\\\"Access-Control-Allow-Headers\\\", \\\"Origin, X-Requested-With, Content-Type, Accept, Authorization\\\") // 允许客户端访问的响应头 c.Header(\\\"Access-Control-Expose-Headers\\\", \\\"Content-Length, Access-Control-Allow-Origin, Access-Control-Allow-Headers, Cache-Control, Content-Language, Content-Type\\\") // 是否需要携带认证信息 Credentials 可以是 cookies、authorization headers 或 TLS client certificates // 设置为true时，Access-Control-Allow-Origin不能为 * c.Header(\\\"Access-Control-Allow-Credentials\\\", \\\"true\\\") } // 放行OPTION请求，但不执行后续方法 if method == \\\"OPTIONS\\\" { c.AbortWithStatus(http.StatusNoContent) } // 放行 c.Next() } }\",\"将中间件注册为全局中间件即可\"]},\"1001\":{\"h\":\"会话控制\",\"t\":[\"在目前的时代中，流行的三种 Web 会话控制总共有三种，cookie，session，JWT。\"]},\"1002\":{\"h\":\"Cookie\",\"t\":[\"ookie 中的信息是以键值对的形式储存在浏览器中，而且在浏览器中可以直接看到数据\",\"优点：\",\"结构简单\",\"数据持久\",\"缺点：\",\"大小受限\",\"明文存储\",\"容易受到 CSRF 攻击\",\"import ( \\\"fmt\\\" \\\"github.com/gin-gonic/gin\\\" ) func main() { router := gin.Default() router.GET(\\\"/cookie\\\", func(c *gin.Context) { // 获取对应的cookie cookie, err := c.Cookie(\\\"gin_cookie\\\") if err != nil { cookie = \\\"NotSet\\\" // 设置cookie 参数：key，val，存在时间，目录，域名，是否允许他人通过js访问cookie，仅http c.SetCookie(\\\"gin_cookie\\\", \\\"test\\\", 3600, \\\"/\\\", \\\"localhost\\\", false, true) } fmt.Printf(\\\"Cookie value: %s \\\\n\\\", cookie) }) router.Run() }\",\"单纯的 cookie 在五六年前用的比较多，不过作者一般很少使用单纯的 cookie 来做会话控制，这样做确实不太安全。\"]},\"1003\":{\"h\":\"Session\",\"t\":[\"session 存储在服务器中，然后发送一个 cookie 存储在浏览器中，cookie 中存储的是 session_id，之后每次请求服务器通过 session_id 可以获取对应的 session 信息\",\"优点：\",\"存储在服务端，增加安全性，便于管理\",\"缺点：\",\"存储在服务端，增大服务器开销，降低性能\",\"基于 cookie 识别，不安全\",\"认证信息在分布式情况下不同步\",\"Session 与 Cookie 是不分家的，每次要用到 Session，默认就是要用到 Cookie 了。Gin 默认是不支持 Session 的，因为 Cookie 是 Http 协议里面的内容，但 Session 不是，不过有第三方中间件支持，安装依赖即可，仓库地址：gin-contrib/sessions: Gin middleware for session management (github.com)\",\"go get github.com/gin-contrib/sessions\",\"支持 cookie，Redis，MongoDB，GORM，PostgreSQL\",\"func main() { r := gin.Default() // 创建基于Cookie的存储引擎 store := cookie.NewStore([]byte(\\\"secret\\\")) // 设置Session中间件，mysession即session名称，也是cookie的名称 r.Use(sessions.Sessions(\\\"mysession\\\", store)) r.GET(\\\"/incr\\\", func(c *gin.Context) { // 初始化session session := sessions.Default(c) var count int // 获取值 v := session.Get(\\\"count\\\") if v == nil { count = 0 } else { count = v.(int) count++ } // 设置 session.Set(\\\"count\\\", count) // 保存 session.Save() c.JSON(200, gin.H{\\\"count\\\": count}) }) r.Run(\\\":8000\\\") }\",\"一般不推荐通过 Cookie 存储 Sesison，推荐使用 Redis，其他例子还请自行去官方仓库了解。\"]},\"1004\":{\"h\":\"JWT\",\"t\":[\"优点：\",\"基于 JSON，多语言通用\",\"可以存储非敏感信息\",\"占用很小，便于传输\",\"服务端无需存储，利于分布式拓展\",\"缺点：\",\"Token 刷新问题\",\"一旦签发则无法主动控制\",\"自从前端革命以来，前端程序员不再只是一个“写页面的”，前后端分离的趋势愈演愈烈，JWT 是最适合前后端分离和分布式系统来做会话控制的，具有很大的天然优势。考虑到 JWT 已经完全脱离 Gin 的内容，且没有任何中间件支持，因为 JWT 本身就是不局限于任何框架任何语言，在这里就不作细致的讲解，可以前往另一篇文档：JWT\"]},\"1005\":{\"h\":\"日志管理\",\"t\":[\"Gin 默认使用的日志中间件采用的是os.Stdout，只有最基本的功能，毕竟 Gin 只专注于 Web 服务，大多数情况下应该使用更加成熟的日志框架，不过这并不在本章的讨论范围内，而且 Gin 的拓展性很高，可以很轻易的整合其他框架，这里只讨论其自带的日志服务。\"]},\"1006\":{\"h\":\"控制台颜色\",\"t\":[\"gin.DisableConsoleColor() // 关闭控制台日志颜色\",\"除了在开发的时候，大多数时候都不建议开启此项\"]},\"1007\":{\"h\":\"日志写入文件\",\"t\":[\"func main() { e := gin.Default() // 关掉控制台颜色 gin.DisableConsoleColor() // 创建两个日志文件 log1, _ := os.Create(\\\"info1.log\\\") log2, _ := os.Create(\\\"info2.log\\\") // 同时记录进两个日志文件 gin.DefaultWriter = io.MultiWriter(log1, log2) e.GET(\\\"/hello\\\", Hello) log.Fatalln(e.Run(\\\":8080\\\")) }\",\"gin 自带的日志支持写入多个文件，但内容是相同的，使用起来不太方便，并且不会将请求日志写入文件中。\",\"func main() { router := gin.New() // LoggerWithFormatter 中间件会写入日志到 gin.DefaultWriter // 默认 gin.DefaultWriter = os.Stdout router.Use(gin.LoggerWithFormatter(func(param gin.LogFormatterParams) string { //TODO 写入对应文件的逻辑 ...... // 输出自定义格式 return fmt.Sprintf(\\\"%s - [%s] \\\\\\\"%s %s %s %d %s \\\\\\\"%s\\\\\\\" %s\\\\\\\"\\\\n\\\", param.ClientIP, param.TimeStamp.Format(time.RFC1123), param.Method, param.Path, param.Request.Proto, param.StatusCode, param.Latency, param.Request.UserAgent(), param.ErrorMessage, ) })) router.Use(gin.Recovery()) router.GET(\\\"/ping\\\", func(c *gin.Context) { c.String(200, \\\"pong\\\") }) router.Run(\\\":8080\\\") }\",\"通过自定义中间件，可以实现日志写入文件中\"]},\"1008\":{\"h\":\"路由调试日志格式\",\"t\":[\"这里修改的只是启动时输出路由信息的的日志\",\"func main() { e := gin.Default() gin.SetMode(gin.DebugMode) gin.DebugPrintRouteFunc = func(httpMethod, absolutePath, handlerName string, nuHandlers int) { if gin.IsDebugging() { log.Printf(\\\"路由 %v %v %v %v\\\\n\\\", httpMethod, absolutePath, handlerName, nuHandlers) } } e.GET(\\\"/hello\\\", Hello) log.Fatalln(e.Run(\\\":8080\\\")) }\",\"输出\",\"2022/12/21 17:19:13 路由 GET /hello main.Hello 3\",\"结语：Gin 算是 Go 语言 Web 框架中最易学习的一种，因为 Gin 真正做到了职责最小化，只是单纯的负责 Web 服务，其他的认证逻辑，数据缓存等等功能都交给开发者自行完成，相比于那些大而全的框架，轻量简洁的 Gin 对于初学者而言更适合也更应该去学习，因为 Gin 并没有强制使用某一种规范，项目该如何构建，采用什么结构都需要自行斟酌，对于初学者而言更能锻炼能力。\"]},\"1009\":{\"h\":\"swag\",\"t\":[\"swaggo/swag 是 Swagger API 2.0 在 go 语言中的一个实现，通过在书写指定格式的注释就可以生成swagger.json和swagger.yaml类型的接口文档，方便导出和导入。\",\"仓库：swaggo/swag: Automatically generate RESTful API documentation with Swagger 2.0 for Go. (github.com)\",\"文档：swaggo/swag: Automatically generate RESTful API documentation with Swagger 2.0 for Go. (github.com)\",\"swag 默认支持的 web 框架如下所示，本文以 gin 为例子，来演示 gin 结合 swagger 快速生成接口文档的例子。\",\"gin\",\"echo\",\"buffalo\",\"net/http\",\"gorilla/mux\",\"go-chi/chi\",\"flamingo\",\"fiber\",\"atreugo\",\"hertz\",\"提示\",\"如果不熟悉 swagger 语法，可以前往About Swagger Specification | Documentation | Swagger\"]},\"1010\":{\"h\":\"安装\",\"t\":[\"首先下载 swagger 命令行工具\",\"go install github.com/swaggo/swag/cmd/swag@latest\",\"然后下载 swagger 源码依赖\",\"go get github.com/swaggo/swag\",\"提示\",\"为避免出现问题，两者版本必须保持一致。\",\"然后下载 swagger 的静态文件库，html，css，js 之类的，都被嵌到了 go 代码中。\",\"go get github.com/swaggo/files@latest\",\"最后下载 swagger 的 gin 适配库\",\"go get github.com/swaggo/gin-swagger@latest\",\"因为本文是只用 gin 做示例，其他 web 框架的适配器请自行了解，基本都是大同小异。\"]},\"1011\":{\"h\":\"使用\",\"t\":[\"使用 go mod 创建一个最基本的 go 项目，新建main.go，写入如下内容。\",\"package main import ( \\\"fmt\\\" \\\"github.com/gin-gonic/gin\\\" ) // @title Swagger Example API // @version 1.0 // @description This is a sample server celler server. // @contact.name API Support // @contact.url http://www.swagger.io/support // @contact.email support@swagger.io // @BasePath /api/v1 func main() { engine := gin.Default() engine.GET(\\\"/api/v1/ping\\\", Ping) engine.Run(\\\":80\\\") } // Ping godoc // @Summary say hello world // @Description return hello world json format content // @param name query string true \\\"name\\\" // @Tags system // @Produce json // @Router /ping [get] func Ping(ctx *gin.Context) { ctx.JSON(200, gin.H{ \\\"message\\\": fmt.Sprintf(\\\"Hello World!%s\\\", ctx.Query(\\\"name\\\")), }) }\",\"这是一个很简单的 gin web 例子，main 函数上的注释是文档的基本信息，Ping 函数则是一个普通的接口。接下来执行命令生成文档，默认是在main.go同级的 docs 目录下\",\"swag init\",\"修改main.go代码\",\"package main import ( \\\"fmt\\\" \\\"github.com/gin-gonic/gin\\\" swaggerFiles \\\"github.com/swaggo/files\\\" ginSwagger \\\"github.com/swaggo/gin-swagger\\\" // 匿名导入生成的接口文档包 _ \\\"golearn/docs\\\" ) // @title Swagger Example API // @version 1.0 // @description This is a sample server celler server. // @contact.name API Support // @contact.url http://www.swagger.io/support // @contact.email support@swagger.io // @BasePath /api/v1 func main() { engine := gin.Default() // 注册swagger静态文件路由 engine.GET(\\\"/swagger/*any\\\", ginSwagger.WrapHandler(swaggerFiles.Handler)) engine.GET(\\\"/api/v1/ping\\\", Ping) engine.Run(\\\":80\\\") } // Ping godoc // @Summary say hello world // @Description return hello world json format content // @param name query string true \\\"name\\\" // @Tags system // @Produce json // @Router /ping [get] func Ping(ctx *gin.Context) { ctx.JSON(200, gin.H{ \\\"message\\\": fmt.Sprintf(\\\"Hello World!%s\\\", ctx.Query(\\\"name\\\")), }) }\",\"运行程序，访问127.0.0.1/swagger/index.html，界面如下\",\"如此便运行起了一个基本的接口文档。接下来除了一些特别要注意的点，基本上和其他语言使用起来没有什么太大的差别。\"]},\"1012\":{\"h\":\"参数\",\"t\":[\"定义参数的格式为\",\"@param name paramtype datatype isRequired comment\",\"一个例子如下\",\"@param userId query int true \\\"user unique id\\\"\",\"其中支持的参数类型有\",\"query\",\"path\",\"header\",\"body\",\"formData\",\"数据类型有\",\"string (string)\",\"integer (int, uint, uint32, uint64)\",\"number (float32)\",\"boolean (bool)\",\"user defined struct\",\"参数类型也可以是你自己的类型，前提是能够被 swagger 扫描到。\"]},\"1013\":{\"h\":\"响应\",\"t\":[\"定义接口响应的基本格式如下\",\"// @Success 200 {array} model.Account // @Failure 400 {object} httputil.HTTPError // @Failure 404 {object} httputil.HTTPError // @Failure 500 {object} httputil.HTTPError\",\"由状态码，基本类型，数据类型组成。{array}表示是一个数组，会展现数据类型的数组形式，{object}就会展现数据类型的原有形式。比如一般我们会定义一个统一的响应体\",\"type JSONResult struct { Code int `json:\\\"code\\\" ` Message string `json:\\\"message\\\"` Data interface{} `json:\\\"data\\\"` }\",\"Data字段的类型是不确定的，在描述响应用例时，可以将其组合，如下\",\"// 组合 @success 200 {object} jsonresult.JSONResult{data=Account} \\\"desc\\\" // 数组 @success 200 {object} jsonresult.JSONResult{data=[]Account} \\\"desc\\\"\"]},\"1014\":{\"h\":\"模型\",\"t\":[\"给结构体字段加注释会被被 swagger 扫描为模型字段注释\",\"package model type Account struct { // account id ID int `json:\\\"id\\\" example:\\\"1\\\"` // username Name string `json:\\\"name\\\" example:\\\"account name\\\"` }\",\"其中example标签的值会被作为示例值在页面中展示，当然它还支持字段限制\",\"type Foo struct { Bar string `minLength:\\\"4\\\" maxLength:\\\"16\\\"` Baz int `minimum:\\\"10\\\" maximum:\\\"20\\\" default:\\\"15\\\"` Qux []string `enums:\\\"foo,bar,baz\\\"` }\",\"所有的模型在使用时都要确保能被 swagger 扫描到，否则不会起作用。\"]},\"1015\":{\"h\":\"认证\",\"t\":[\"在认证这块支持\",\"Basic Auth\",\"API Key\",\"OAuth2 app auth\",\"OAuth2 implicit auth\",\"OAuth2 password auth\",\"OAuth2 access code auth\",\"假如接口认证用的是 JWT，存放在 header 中的Authorization字段中，我们可以如下定义\",\"// @securityDefinitions.apikey Bearer // @in header // @name Authorization\",\"本质上这只是一个 apikey，如果你传入的是 bearer token 的话，需要自己手动加上 Bearer 前缀。\",\"然后在你需要认证的接口上加上如下注释\",\"// @security Bearer\",\"它的值是你的securityDefinitions定义的名称。\"]},\"1016\":{\"h\":\"配置\",\"t\":[\"swag 实际上是将多个不同的 swagger 实例存放在一个 map 中，ginSwagger 作为适配器从实例中读取doc.json也就是 API 接口的定义文件，swaggerFiles 提供静态的 HTML 文件用于展示网页，解析 API 定义并生成界面，整个流程明白以后，就可以进行自定义的操作了。\",\"// Name is a unique name be used to register swag instance. // 默认实例名称 const Name = \\\"swagger\\\" var ( swaggerMu sync.RWMutex // 实例表 swags map[string]Swagger )\",\"func CustomWrapHandler(config *Config, handler *webdav.Handler) gin.HandlerFunc { var once sync.Once if config.InstanceName == \\\"\\\" { config.InstanceName = swag.Name } if config.Title == \\\"\\\" { config.Title = \\\"Swagger UI\\\" } // create a template with name index, _ := template.New(\\\"swagger_index.html\\\").Parse(swaggerIndexTpl) var matcher = regexp.MustCompile(`(.*)(index\\\\.html|doc\\\\.json|favicon-16x16\\\\.png|favicon-32x32\\\\.png|/oauth2-redirect\\\\.html|swagger-ui\\\\.css|swagger-ui\\\\.css\\\\.map|swagger-ui\\\\.js|swagger-ui\\\\.js\\\\.map|swagger-ui-bundle\\\\.js|swagger-ui-bundle\\\\.js\\\\.map|swagger-ui-standalone-preset\\\\.js|swagger-ui-standalone-preset\\\\.js\\\\.map)[?|.]*`) return func(ctx *gin.Context) { if ctx.Request.Method != http.MethodGet { ctx.AbortWithStatus(http.StatusMethodNotAllowed) return } // 路由匹配 matches := matcher.FindStringSubmatch(ctx.Request.RequestURI) if len(matches) != 3 { ctx.String(http.StatusNotFound, http.StatusText(http.StatusNotFound)) return } path := matches[2] once.Do(func() { handler.Prefix = matches[1] }) switch filepath.Ext(path) { case \\\".html\\\": ctx.Header(\\\"Content-Type\\\", \\\"text/html; charset=utf-8\\\") case \\\".css\\\": ctx.Header(\\\"Content-Type\\\", \\\"text/css; charset=utf-8\\\") case \\\".js\\\": ctx.Header(\\\"Content-Type\\\", \\\"application/javascript\\\") case \\\".png\\\": ctx.Header(\\\"Content-Type\\\", \\\"image/png\\\") case \\\".json\\\": ctx.Header(\\\"Content-Type\\\", \\\"application/json; charset=utf-8\\\") } switch path { // 主页 case \\\"index.html\\\": _ = index.Execute(ctx.Writer, config.toSwaggerConfig()) // API描述文件 case \\\"doc.json\\\": doc, err := swag.ReadDoc(config.InstanceName) if err != nil { ctx.AbortWithStatus(http.StatusInternalServerError) return } ctx.String(http.StatusOK, doc) default: handler.ServeHTTP(ctx.Writer, ctx.Request) } } }\",\"通过生成的 go 代码来自动完成实例注册，下方是自动生成的docs.go的部分代码\",\"// SwaggerInfo holds exported Swagger Info so clients can modify it var SwaggerInfo = &swag.Spec{ Version: \\\"\\\", Host: \\\"\\\", BasePath: \\\"\\\", Schemes: []string{}, Title: \\\"\\\", Description: \\\"\\\", InfoInstanceName: \\\"swagger\\\", SwaggerTemplate: docTemplate, LeftDelim: \\\"{{\\\", RightDelim: \\\"}}\\\", } func init() { // 注册实例 swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo) }\",\"可以看到在init函数中有一个 Register 函数用来注册当前实例，如果想要修改实例名称不建议在该文件进行编辑，因为docs.go文件是自动生成的，只需要在生成代码时使用--instanceName appapi参数。为了方便，可以使用 go generate 命令嵌入的到 go 文件中，方便自动生成代码，如下。\",\"// swagger declarative api comment // @title App Internal API Documentation // @version v1.0.0 // @description Wilson api documentation // @BasePath /api/v1 //go:generate swag init --generatedTime --instanceName appapi -g api.go -d ./ --output ./swagger\",\"个人并不喜欢将 swagger 的通用信息注释写在main.go或main函数上，将这些注释写在go generate上方最合适不过。\",\"提示\",\"如果需要多个实例，务必保持实例名称唯一，否则会panic\",\"为了定制化一些配置，需要用ginSwagger.CustomWrapHandler，它相比前者多了一个 Config 参数，释义如下\",\"// Config stores ginSwagger configuration variables. type Config struct { // The url pointing to API definition (normally swagger.json or swagger.yaml). Default is `doc.json`. URL string // 接口列表展开状态 DocExpansion string // 实例名称 InstanceName string // 标题 Title string // 展开深度 DefaultModelsExpandDepth int // 顾名思义 DeepLinking bool PersistAuthorization bool Oauth2DefaultClientID string }\",\"使用swaggerFiles.NewHandler()来替代默认的 Handler，在多个实例时尤其要如此。\",\"engine.GET(openapi.ApiDoc, ginSwagger.CustomWrapHandler(openapi.Config, swaggerFiles.NewHandler()))\",\"除此之外还可以进行类型重写等一系列操作，都是比较简单的，更多内容可以阅读官方文档。\"]},\"1017\":{\"h\":\"注意事项\",\"t\":[\"swag 是根据注释来生成 openapi 的接口描述文件的，在生成时，指定的目录必须要包含接口文档的基本信息，默认是在main.go里面查找\",\"swag init默认指定的是当前目录，值为./，可以使用swag init -d指定多个目录，使用逗号分隔，第一个指定的目录必须包含接口文档的基本信息。例如\",\"swag init -d ./,./api\",\"-g，接口文档的基本信息的存放文件可以自定义文件名，默认是main.go，在生成文档时，使用-g参数指定文件名\",\"swag init -g api.go -d ./,./api\",\"该命令的意思是在./api.go解析接口文档的基本信息，同时在./和./api两个目录下查找和解析其他接口的注释信息并生成对应的文档。\",\"-o参数可以指定文档描述文件的输出路径，默认是./docs，例:\",\"swag init -o ./api/docs\",\"--ot可以指定输出文件类型，默认是（docs.go,swagger.json,swagger.yaml），如果想要使用 go 程序加载 swagger ui，go 文件是必不可少的。\",\"swag init --ot go,yaml\",\"其余生成的 json 和 yaml 文件可以方便在其他接口管理软件上导入数据。\",\"注释写在哪里都一样，就算不写在函数上也一样能解析，只是写在函数上可读性好一些，本质上还是一个以注释形式和 go 源代码嵌在一起的 DSL。\",\"swag 还支持很多其他的参数，可以使用swag init -h查看。\"]},\"1018\":{\"h\":\"slice\",\"t\":[\"提示\",\"阅读本文需要unsafe标准库的知识。\",\"切片应该是 go 语言中最最常用的数据结构，没有之一（实际上内置的数据结构也没几个），几乎在任何地方都能看到它的身影。关于它的基本用法在语言入门中已经阐述过了，下面来看看它的内部长什么样，以及它内部是如何运作的。\"]},\"1019\":{\"h\":\"结构\",\"t\":[\"有关切片的实现，其源代码位于runtime/slice.go文件中。在运行时，切片以一个结构体的形式而存在，其类型为runtime.slice，如下所示。\",\"type slice struct { array unsafe.Pointer len int cap int }\",\"这个结构体只有三个字段\",\"array，指向底层数组的指针\",\"len，切片的长度，指的是数组中已有的元素数量\",\"cap，切片的容量，指的是数组能容纳元素的总数\",\"从上面的信息可以得知，切片的底层实现还是依赖于数组，在平时它只是一个结构体，只持有对数组的引用，以及容量和长度的记录。这样一来传递切片的成本就会非常低，只需要复制其数据的引用，并不用复制所有数据，并且在使用len和cap获取切片的长度和容量时，就等于是在获取其字段值，不需要去遍历数组。\",\"不过这同样也会带来一些不容易发现的问题，看下面的一个例子\",\"package main import \\\"fmt\\\" func main() { s := make([]int, 0, 10) s = append(s, 1, 2, 3, 4, 5) s1 := s[:] s1[0] = 2 fmt.Println(s) }\",\"[2 2 3 4 5]\",\"在上面的代码中，s1通过切割的方式创建了一个新的切片，但它和源切片所引用的都是同一个底层数组，修改s1中的数据也会导致s发生变化。所以复制切片的时候应该使用copy函数，后者复制的切片与前者毫不相干。再来看个例子\",\"func main() { s := make([]int, 0, 10) s = append(s, 1, 2, 3, 4, 5) s1 := s[:] s1 = append(s1, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10) s1[0] = 10 fmt.Println(s) fmt.Println(s1) }\",\"[1 2 3 4 5] [10 2 3 4 5 1 2 3 4 5 6 7 8 9 10]\",\"同样是使用切割方式复制切片，但这一次不会对源切片造成影响。最初s1和s确实指向的同一个数组，但是后续对s1添加了过多的元素超过了数组所能容纳的数量，于是便分配了一个更大的新数组来盛放元素，所以最后它们两个指向的就是不同的数组了。是不是觉得已经没问题了，那就再来看一个例子\",\"package main import \\\"fmt\\\" func main() { s := make([]int, 0, 10) appendData(s, 1, 2, 3, 4, 5, 6) fmt.Println(s) } func appendData[T comparable](s []T, data ...T) { s = append(s, data...) }\",\"[]\",\"明明已经添加了元素，但是打印出来的确是空切片，实际上数据确实是已经添加到了切片中，只不过是写入到了底层数组。go 中的函数参数是传值传递，所以参数s实际上源切片结构体的一个拷贝，而append操作在添加元素后会返回一个更新了长度的切片结构体，只不过赋值的是参数s而非源切片s，两者并其实没有什么联系。\",\"对于一个切片而言，它能访问和修改的起始位置取决于对数组的引用位置，偏移量取决于结构体中记录的长度。结构体中的指针除了可以指向开头，也可以数组的中间，就像下面这张图一样。\",\"一个底层数组可以被很多个切片所引用，且引用的位置和范围可以不同，就像上图一样，这种情况一般出现在对切片进行切割的时候，类似下面的代码\",\"s := make([]int, 0, 10) s1 := s[:4] s2 := s[4:6] s3 := s[7:]\",\"在切割时，生成的新切片的容量等于数组长度减去新切片引用的起始位置。例如s[4:6]生成的新切片容量就是6 = 10 - 4。当然，切片引用的范围也不一定非得相邻，也可以相互交错，不过这会产生非常大的麻烦，可能当前切片的数据在不知情的情况下就被别的切片修改了，比如上图中的紫色切片，如果在后续过程中使用append添加元素，就有可能会把绿色切片和蓝色切片的数据覆盖。为了避免这种情况，go 允许在切割时设置容量范围，语法如下。\",\"s4 = s[4:6:6]\",\"在这种情况下，它的容量就被限制到了 2，那么添加元素就会触发扩容，扩容后就是一个新数组了，与源数组就没有关系了，就不会有影响。你以为关于切片的问题到这里就结束了吗，其实并没有，再来看一个例子。\",\"package main import \\\"fmt\\\" func main() { s := make([]int, 0, 10) // 添加的元素数量刚好大于容量 appendData(s, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11) fmt.Println(s) } func appendData[T comparable](s []T, data ...T) { s = append(s, data...) }\",\"[]\",\"代码跟上一个例子没有区别，只是修改了一下入参，让添加的元素数量刚好大于切片的容量，这样在添加时就会触发扩容，这样一来，数据不仅没有添加到源切片s，甚至连其指向的底层数组也没有被写入数据，我们可以通过unsafe指针来证实一下，代码如下\",\"package main import ( \\\"fmt\\\" \\\"unsafe\\\" ) func main() { s := make([]int, 0, 10) // 添加的元素数量刚好大于容量 appendData(s, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11) fmt.Println(\\\"ori slice\\\", unsafe.SliceData(s)) unsafeIterator(unsafe.Pointer(unsafe.SliceData(s)), cap(s)) } func appendData[T comparable](s []T, data ...T) { s = append(s, data...) fmt.Println(\\\"new slice\\\", unsafe.SliceData(s)) unsafeIterator(unsafe.Pointer(unsafe.SliceData(s)), cap(s)) } func unsafeIterator(ptr unsafe.Pointer, offset int) { for ptr, i := ptr, 0; i < offset; ptr, i = unsafe.Add(ptr, unsafe.Sizeof(int(0))), i+1 { elem := *(*int)(ptr) fmt.Printf(\\\"%d, \\\", elem) } fmt.Println() }\",\"new slice 0xc0000200a0 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 0, 0, 0, 0, 0, 0, 0, 0, 0, ori slice 0xc000018190 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\",\"可以看到的是，源切片的底层数组空空如也，一点东西也没有，数据全都被写入新数组中了，不过跟源切片没什么关系，因为即便append返回了新的引用，修改的也只是形参s的值，影响不到源切片s。切片作为结构体确实可以让其非常轻量，但是上面的问题同样不可忽视，尤其是在实际的代码中这些问题通常藏的很深，很难被发现。\"]},\"1020\":{\"h\":\"创建\",\"t\":[\"在运行时，使用make函数创建切片的工作由runtime.makeslice，来完成，它的逻辑比较简单，该函数签名如下\",\"func makeslice(et *_type, len, cap int) unsafe.Pointer\",\"它接收三个参数，元素类型，长度，容量，完成后返回一个指向底层数组的指针，它的代码如下\",\"func makeslice(et *_type, len, cap int) unsafe.Pointer { // 计算需要的总内存，如果太大会导致数值溢出 // mem = sizeof(et) * cap mem, overflow := math.MulUintptr(et.Size_, uintptr(cap)) if overflow || mem > maxAlloc || len < 0 || len > cap { // mem = sizeof(et) * len mem, overflow := math.MulUintptr(et.Size_, uintptr(len)) if overflow || mem > maxAlloc || len < 0 { panicmakeslicelen() } panicmakeslicecap() } // 没问题的话就分配内存 return mallocgc(mem, et, true) }\",\"可以看到逻辑非常简单，总共就做了两件事\",\"计算所需内存\",\"分配内存空间\",\"如果条件检查失败了，就会直接panic\",\"内存计算时数值溢出了\",\"计算结果大于可分配的最大内存\",\"长度与容量不合法\",\"如果计算得到内存大于32KB，就会将其分配到堆上，完事之后就会返回一个指向底层数组的指针，构建runtime.slice结构体的工作并不由makeslice函数来完成。实际上，构建结构体的工作是编译期间完成的，运行时的makeslice函数只负责分配内存，类似如下的代码。\",\"var s runtime.slice s.array = runtime.makeslice(type,len,cap) s.len = len s.cap = cap\",\"感兴趣的话可以去看看生成的中间代码，跟这个类似。\",\"name s.ptr[*int]: v11 name s.len[int]: v7 name s.cap[int]: v8\",\"如果是使用数组来创建切片的话，比如下面这种\",\"var arr [5]int s := arr[:]\",\"这个过程就类似下面的代码\",\"var arr [5]int var s runtime.slice s.array = &arr s.len = len s.cap = cap\",\"go 会直接将该数组作为切片的底层数组，所以修改切片中的数据也会影响到数组的数据。在使用数组创建切片时，长度大小等于hight-low，容量等于max-low，其中max默认为数组长度，或者也可以在切割的时候手动指定容量，例如。\",\"var arr [5]int s := arr[2:3:4]\"]},\"1021\":{\"h\":\"访问\",\"t\":[\"访问切片就跟访问数组一样使用下标索引\",\"elem := s[i]\",\"切片的访问操作是在编译期间就已经完成了，通过生成中间代码的方式来访问，最终生成的代码可以理解为下面的伪代码\",\"p := s.ptr e := *(p + sizeof(elem(s)) * i)\",\"实际上是通过移动指针操作来访问对应下标元素的，对应cmd/compile/internal/ssagen.exprCheckPtr函数中的如下部分代码\",\"case ir.OINDEX: n := n.(*ir.IndexExpr) switch { case n.X.Type().IsSlice(): // 偏移指针 p := s.addr(n) return s.load(n.X.Type().Elem(), p)\",\"在通过len和cap函数访问切片的长度和容量时，也是同样的道理，也是对应cmd/compile/internal/ssagen.exprCheckPtr函数中的部分代码\",\"case ir.OLEN, ir.OCAP: n := n.(*ir.UnaryExpr) switch { case n.X.Type().IsSlice(): op := ssa.OpSliceLen if n.Op() == ir.OCAP { op = ssa.OpSliceCap } return s.newValue1(op, types.Types[types.TINT], s.expr(n.X))\",\"在实际生成的代码中，通过移动指针来访问切片结构体中的len字段，可以理解为下面的伪代码\",\"p := &s len := *(p + 8) cap := *(p + 16)\",\"假如现在有如下代码\",\"func lenAndCap(s []int) (int, int) { l := len(s) c := cap(s) return l, c }\",\"那么在生成中的某个阶段的中间代码大概率长这样\",\"v9 (+9) = ArgIntReg <int> {s+8} [1] : BX (l[int], s+8[int]) v10 (+10) = ArgIntReg <int> {s+16} [2] : CX (c[int], s+16[int]) v1 (?) = InitMem <mem> v3 (11) = Copy <int> v9 : AX v4 (11) = Copy <int> v10 : BX v11 (+11) = MakeResult <int,int,mem> v3 v4 v1 : <> Ret v11 (+11) name l[int]: v9 name c[int]: v10 name s+16[int]: v10 name s+8[int]: v9\",\"从上面大致就能看出来，一个加 8，一个加 16，很显然是通过指针偏移来访问的切片字段。\",\"倘若能在编译期间推断出它的长度和容量，就不会在运行时偏移指针来获取值，比如下面这种情况就不需要移动指针。\",\"s := make([]int, 10, 20) l := len(s) c := cap(s)\",\"变量 l和s的值会被直接替换成10和20。\"]},\"1022\":{\"h\":\"写入\"},\"1023\":{\"h\":\"修改\",\"t\":[\"s := make([]int, 10) s[0] = 100\",\"通过索引下标修改切片的值时，在编译期间会通过OpStore操作生成类似如下的伪代码\",\"p := &s l := *(p + 8) if !IsInBounds(l,i) { panic() } ptr := (s.ptr + i * sizeof(elem) * i) *ptr = val\",\"在生成中的某个阶段的中间代码大概率长这样\",\"v1 (?) = InitMem <mem> v5 (8) = Arg <[]int> {s} (s[[]int]) v6 (?) = Const64 <int> [100] v7 (?) = Const64 <int> [0] v8 (+9) = SliceLen <int> v5 v9 (9) = IsInBounds <bool> v7 v8 v14 (?) = Const64 <int64> [0] v12 (9) = SlicePtr <*int> v5 v15 (9) = Store <mem> {int} v12 v6 v1 v11 (9) = PanicBounds <mem> [0] v7 v7 v1 Exit v11 (9) name s[[]int]: v5 name s[*int]: name s+8[int]:\",\"可以看到代码访问切片长度以检查下标是否合法，最后通过移动指针来存储元素。\"]},\"1024\":{\"h\":\"添加\",\"t\":[\"通过append函数可以向切片添加元素\",\"var s []int s = append(s, 1, 2, 3)\",\"添加元素后，它会返回一个新的切片结构体，如果没有扩容的话相较于源切片只是更新了长度，否则会的话会指向一个新的数组。有关于append的使用问题在结构这部分已经讲的很详细了，不再过多阐述，下面会关注于append是如何工作的。\",\"在运行时，并没有类似runtime.appendslice这样的函数与之对应，添加元素的工作实际上在编译期就已经做好了，append函数会被展开对应的中间代码,判断的代码在cmd/compile/internal/walk/assign.go walkassign函数中，\",\"case ir.OAPPEND: // x = append(...) call := as.Y.(*ir.CallExpr) if call.Type().Elem().NotInHeap() { base.Errorf(\\\"%v can't be allocated in Go; it is incomplete (or unallocatable)\\\", call.Type().Elem()) } var r ir.Node switch { case isAppendOfMake(call): // x = append(y, make([]T, y)...) r = extendSlice(call, init) case call.IsDDD: r = appendSlice(call, init) // also works for append(slice, string). default: r = walkAppend(call, init, as) }\",\"可以看到分成三种情况\",\"添加若干个元素\",\"添加一个切片\",\"添加一个临时创建的切片\",\"下面会讲一讲生成的代码长什么样，这样明白append实际上是怎么工作的，代码生成的过程如果感兴趣可以自己去了解下。\",\"添加元素\",\"s = append(s, x, y, z)\",\"如果只是添加有限个元素，会由walkAppend函数展开成以下代码\",\"// 待添加元素数量 const argc = len(args) - 1 newLen := s.len + argc // 是否需要扩容 if uint(newLen) <= uint(s.cap) { s = s[:newLen] } else { s = growslice(s.ptr, newLen, s.cap, argc, elemType) } s[s.len - argc] = x s[s.len - argc + 1] = y s[s.len - argc + 2] = z\",\"首先计算出待添加元素数量，然后判断是否需要扩容，最后再一个个赋值。\",\"添加切片\",\"s = append(s, s1...)\",\"如果是直接添加一个切片，会由appendSlice函数展开成以下代码\",\"newLen := s.len + s1.len // Compare as uint so growslice can panic on overflow. if uint(newLen) <= uint(s.cap) { s = s[:newLen] } else { s = growslice(s.ptr, s.len, s.cap, s1.len, T) } memmove(&s[s.len-s1.len], &s1[0], s1.len*sizeof(T))\",\"还是跟之前一样，计算新长度，判断是否需要扩容，不同的是 go 并不会一个个去添加源切片的元素，而是选择直接复制内存。\",\"添加临时切片\",\"s = append(s, make([]T, l2)...)\",\"如果是添加一个临时创建的切片，会由extendslice函数展开成以下代码\",\"if l2 >= 0 { // Empty if block here for more meaningful node.SetLikely(true) } else { panicmakeslicelen() } s := l1 n := len(s) + l2 if uint(n) <= uint(cap(s)) { s = s[:n] } else { s = growslice(T, s.ptr, n, s.cap, l2, T) } // clear the new portion of the underlying array. hp := &s[len(s)-l2] hn := l2 * sizeof(T) memclr(hp, hn)\",\"对于临时添加的切片，go 会获取临时切片的长度，如果当前切片的容量不足以足以容纳，就会尝试扩容，完事后还会清除对应部分的内存。\"]},\"1025\":{\"h\":\"扩容\",\"t\":[\"由结构部分的内容可以得知，切片的底层依旧是一个数组，数组是一个长度固定的数据结构，但切片长度是可变的。切片在数组容量不足时，会申请一片更大的内存空间来存放数据，也就是一个新的数组，再将旧数据拷贝过去，然后切片的引用就会指向新数组，这个过程就被称为扩容。扩容的工作在运行时由runtime.growslice函数来完成，其函数签名如下\",\"func growslice(oldPtr unsafe.Pointer, newLen, oldCap, num int, et *_type) slice\",\"参数的简单解释\",\"oldPtr，指向旧数组的指针\",\"newLen，新数组的长度，newLen = oldLen + num\",\"oldCap，旧切片的容量，也就等于旧数组的长度\",\"et，元素类型\",\"它的返回值返回了一个新的切片，新切片跟原来的切片毫不相干，唯一共同点就是保存的数据是一样的。\",\"var s []int s = append(s, elems...)\",\"在使用append添加元素时，会要求将其返回值覆盖原切片，如果发生了扩容的话，返回的就是一个新切片了。\",\"在扩容时，首先需要确定新的长度和容量，对应下面的代码\",\"oldLen := newLen - num if newLen < 0 { panic(errorString(\\\"growslice: len out of range\\\")) } if et.Size_ == 0 { return slice{unsafe.Pointer(&zerobase), newLen, newLen} } newcap := oldCap // 双倍容量 doublecap := newcap + newcap if newLen > doublecap { newcap = newLen } else { const threshold = 256 if oldCap < threshold { newcap = doublecap } else { for 0 < newcap && newcap < newLen { // newcap += 0.25 * newcap + 192 newcap += (newcap + 3*threshold) / 4 } // 数值溢出了 if newcap <= 0 { newcap = newLen } } }\",\"由上面的代码可知，对于容量小于 256 的切片，容量增长一倍，而容量大于等于 256 的切片，则至少会是原容量的 1.25 倍，当前切片较小时，每次都直接增大一倍，可以避免频繁的扩容，当切片较大时，扩容的倍率就会减小，避免申请过多的内存而造成浪费。\",\"得到新长度和容量后，再计算所需内存，对应如下代码\",\"var overflow bool var lenmem, newlenmem, capmem uintptr switch { ... ... default: lenmem = uintptr(oldLen) * et.Size_ newlenmem = uintptr(newLen) * et.Size_ capmem, overflow = math.MulUintptr(et.Size_, uintptr(newcap)) capmem = roundupsize(capmem) // 最终的容量 newcap = int(capmem / et.Size_) capmem = uintptr(newcap) * et.Size_ } if overflow || capmem > maxAlloc { panic(errorString(\\\"growslice: len out of range\\\")) }\",\"内存计算公式就是mem = cap * sizeof(et)，为了方便内存对齐，过程中会将计算得到的内存向上取整为 2 的整数次方，并再次计算新容量。如果说新容量太大导致计算时数值溢出，或者说新内存超过了可以分配的最大内存，就会panic。\",\"var p unsafe.Pointer // 分配内存 p = mallocgc(capmem, nil, false) memclrNoHeapPointers(add(p, newlenmem), capmem-newlenmem) memmove(p, oldPtr, lenmem) return slice{p, newLen, newcap}\",\"计算出所需结果后，就分配指定大小的内存，再将newLen到newCap这个区间的内存清空，然后将旧数组的数据拷贝到新切片中，最后构建切片结构体。\"]},\"1026\":{\"h\":\"拷贝\",\"t\":[\"src := make([]int, 10) dst := make([]int, 20) copy(dst, src)\",\"当使用copy函数拷贝切片时，会由cmd/compile/internal/walk.walkcopy在编译期间生成的代码决定以何种方式拷贝，如果是在运行时调用，就会用到函数runtime.slicecopy，该函数负责拷贝切片，函数签名如下\",\"func slicecopy(toPtr unsafe.Pointer, toLen int, fromPtr unsafe.Pointer, fromLen int, width uintptr) int\",\"它接收源切片和目的切片的指针和长度，以及要拷贝的长度width。这个函数的逻辑十分简单，如下所示\",\"func slicecopy(toPtr unsafe.Pointer, toLen int, fromPtr unsafe.Pointer, fromLen int, width uintptr) int { if fromLen == 0 || toLen == 0 { return 0 } n := fromLen if toLen < n { n = toLen } if width == 0 { return n } // 计算要复制的字节数 size := uintptr(n) * width if size == 1 { *(*byte)(toPtr) = *(*byte)(fromPtr) } else { memmove(toPtr, fromPtr, size) } return n }\",\"width的取值，取决于两个切片的长度最小值。可以看到的是，在复制切片的时候并不是一个个遍历元素去复制的，而是选择了直接把底层数组的内存整块复制过去，当切片很大时拷贝内存带来性能的影响并不小。\",\"倘若不是在运行时调用，就会展开成如下形式的代码\",\"n := len(a) if n > len(b) { n = len(b) } if a.ptr != b.ptr { memmove(a.ptr, b.ptr, n*sizeof(elem(a))) }\",\"两种方式的原理都是一样的，都是通过拷贝内存的方式拷贝切片。memmove函数是由汇编实现的，感兴趣可以去runtime/memmove_amd64.s 浏览细节。\"]},\"1027\":{\"h\":\"清空\",\"t\":[\"package main func main() { s := make([]int, 0, 10) s = append(s, 1, 2, 3, 4, 5) clear(s) }\",\"在版本go1.21中，新增了内置函数clear函数可以用于清空切片的内容，或者说是将所有元素都置为零值。当clear函数作用于切片时，编译器会在编译期间由cmd/compile/internal/walk.arrayClear函数展开成下面这种形式\",\"if len(s) != 0 { hp = &s[0] hn = len(s)*sizeof(elem(s)) if elem(s).hasPointer() { memclrHasPointers(hp, hn) }else { memclrNoHeapPointers(hp, hn) } }\",\"首先判断切片长度是否为 0，然后计算需要清理的字节数，再根据元素是否是指针分成两种情况来处理，但最终都会用到memclrNoHeapPointers函数，其签名如下。\",\"func memclrNoHeapPointers(ptr unsafe.Pointer, n uintptr)\",\"它接收两个参数，一个是指向起始地址的真，另一个就是偏移量，也就是要清理的字节数。内存起始地址为切片所持有的引用的地址，偏移量n = sizeof(et) * len，该函数是由汇编实现，感兴趣可以去runtime/memclr_amd64.s查看细节。\",\"值得一提的是，如果源代码中尝试使用遍历来清空数组，例如这种\",\"for i := range s { s[i] = ZERO_val }\",\"在没有clear函数之前，通常都是这样来清空切片。在编译时，现在这段代码会被cmd/compile/internal/walk.arrayRangeClear函数优化成这种形式\",\"for i, v := range s { if len(s) != 0 { hp = &s[0] hn = len(s)*sizeof(elem(s)) if elem(s).hasPointer() { memclrHasPointers(hp, hn) }else { memclrNoHeapPointers(hp, hn) } // 停止循环 i = len(s) - 1 } }\",\"逻辑还是跟上面的一模一样，其中多了一行i = len(s)-1，其作用是为了在内存清除以后停止循环。\"]},\"1028\":{\"h\":\"遍历\",\"t\":[\"for i, e := range s { fmt.Println(i, e) }\",\"在使用for range遍历切片时，会由cmd/compile/internal/walk/range.go中的walkRange函数展开成如下形式\",\"// 拷贝结构体 hs := s // 获取底层数组指针 hu = uintptr(unsafe.Pointer(hs.ptr)) v1 := 0 v2 := zero for i := 0; i < hs.len; i++ { hp = (*T)(unsafe.Pointer(hu)) v1, v2 = i, *hp ... body of loop ... hu = uintptr(unsafe.Pointer(hp)) + elemsize }\",\"可以看到的是，for range的实现依旧是通过移动指针来遍历元素的。为了避免在遍历时切片被更新，事先拷贝了一份结构体hs，为了避免遍历结束后指针指向越界的内存，hu使用的uinptr类型来存放地址，在需要访问元素的时候才转换成unsafe.Pointer。\",\"变量v2也就是for range中的e，在整个遍历过程中从始至终都是一个变量，它只会被覆盖，不会重新创建。这一点引发了困扰 go 开发者十年的循环变量问题，到了版本go.1.21官方才终于决定要打算解决，预计在后面版本的更新中，v2的创建方式可能会变成下面这样。\",\"v2 := *hp\",\"构造中间代码过程这里省略了，这并不属于切片范围的知识，感兴趣可以自己去了解下。\"]},\"1029\":{\"h\":\"map\",\"t\":[\"go 与其它语言不同的是，映射表的支持是由map关键字提供的，而非将其封装为标准库。映射表是一种使用场景非常多的数据结构，底层有着许多的实现方式，最常见的两种方式就是红黑树和哈希表，go 采用的是哈希表实现方式。\",\"提示\",\"map 的实现中涉及到了大量的指针移动操作，所以阅读本文需要unsafe标准库的知识。\"]},\"1030\":{\"h\":\"内部结构\",\"t\":[\"runtime.hmap结构体就是代表着 go 中的map，与切片一样map的内部实现也是结构体。\",\"// A header for a Go map. type hmap struct { // Note: the format of the hmap is also encoded in cmd/compile/internal/reflectdata/reflect.go. // Make sure this stays in sync with the compiler's definition. count int // # live cells == size of map. Must be first (used by len() builtin) flags uint8 B uint8 // log_2 of # of buckets (can hold up to loadFactor * 2^B items) noverflow uint16 // approximate number of overflow buckets; see incrnoverflow for details hash0 uint32 // hash seed buckets unsafe.Pointer // array of 2^B Buckets. may be nil if count==0. oldbuckets unsafe.Pointer // previous bucket array of half the size, non-nil only when growing nevacuate uintptr // progress counter for evacuation (buckets less than this have been evacuated) extra *mapextra // optional fields }\",\"英文注释已经说明的很清晰了，下面对比较重要的字段进行一些简单的解释\",\"count，表示 hamp 中的元素数量，结果等同于len(map)。\",\"flags，hmap 的标志位，用于表示 hmap 处于什么状态，有以下几种可能。\",\"const ( iterator = 1 // 迭代器正在使用桶 oldIterator = 2 // 迭代器正在使用旧桶 hashWriting = 4 // 一个协程正在写入hmap sameSizeGrow = 8 // 正在等量扩容 )\",\"B，hmap 中的哈希桶的数量为1 << B。\",\"noverflow，hmap 中溢出桶的大致数量。\",\"hash0，哈希种子，在 hmap 被创建时指定，用于计算哈希值。\",\"buckets，存放哈希桶数组的指针。\",\"oldbuckets，存放 hmap 在扩容前哈希桶数组的指针。\",\"extra，存放着 hmap 中的溢出桶，溢出桶指的是就是当前桶已经满了，创建新的桶来存放元素，新创建的桶就是溢出桶。\",\"hamp 中的buckets也就是桶切片指针，在 go 中对应的结构为runtime.bmap，如下所示\",\"// A bucket for a Go map. type bmap struct { tophash [bucketCnt]uint8 }\",\"从上面可以看到它只有一个tophash的字段，该字段是用于存放每个键的高八位，不过实际上来说，bmap的字段不止这些，这是因为map可以存储各种类型的键值对，所以需要在编译时根据类型来推导占用的内存空间，在cmd/compile/internal/reflectdata/reflect.go中的MapBucketType函数的功能就是在编译时构造 bmap，它会进行一系列检查工作，比如 key 的类型是否comparable。\",\"// MapBucketType makes the map bucket type given the type of the map. func MapBucketType(t *types.Type) *types.Type\",\"所以实际上，bmap的结构如下，不过这些字段对我们是不可见的，go 在实际操作中是通过移动 unsafe 指针来进行访问\",\"type bmap struct { tophash [BUCKETSIZE]uint8 keys [BUCKETSIZE]keyType elems [BUCKETSIZE]elemType overflow *bucket }\",\"其中的一些解释如下\",\"tophash，存放每一个键的高八位值，对于一个 tophash 的元素而言，有下面几种特殊的值\",\"const ( emptyRest = 0 // 当前元素是空的，并且该元素后面也没有可用的键值了 emptyOne = 1 // 当前元素是空的，但是该元素后面有可用的键值。 evacuatedX = 2 // 扩容时出现，只能出现在oldbuckets中，表示当前元素被搬迁到了新哈希桶数组的上半区 evacuatedY = 3 // 扩容时出现只能出现在oldbuckets中，表示当前元素被搬迁到了新哈希桶数组的下半区 evacuatedEmpty = 4 // 扩容时出现，元素本身就是空的，在搬迁时被标记 minTopHash = 5 // 对于一个正常的键值来说tophash的最小值 )\",\"只要是tophash[i]的值大于minTophash的值，就说明对应下标存在正常的键值。\",\"keys，存放指定类型键的数组。\",\"elems，存放指定类型值的数组。\",\"overflow，指向溢出桶的指针。\",\"既然键值无法通过结构体字段来直接访问，为此 go 事先声明了一个常量dataoffset，它代表的是数据在bmap中的内存偏移量。\",\"const dataOffset = unsafe.Offsetof(struct { b bmap v int64 }{}.v)\",\"实际上，键值是存放在一个连续的内存地址中，类似于下面这种结构，这样做是为了避免内存对齐带来的空间浪费。\",\"k1,k2,k3,k4,k5,k6...v1,v2,v3,v4,v5,v6...\",\"所以对于一个 bmap 而言，指针移动dataoffset后，移动i*sizeof(keyType)就是第 i 个 key 的地址\",\"k := add(unsafe.Pointer(b), dataOffset+i*uintptr(t.KeySize))\",\"获取第 i 个 value 的地址也是同理\",\"e := add(unsafe.Pointer(b), dataOffset+bucketCnt*uintptr(t.KeySize)+i*uintptr(t.ValueSize))\",\"hamp中的buckets指针，就是指向的第一个哈希桶的地址，如果想要获取第 i 个哈希桶的地址，偏移量就是i*sizeof(bucket)。\",\"b := (*bmap)(add(h.buckets, i*uintptr(t.BucketSize)))\",\"在后续的内容中，这些操作会非常频繁的出现。\"]},\"1031\":{\"h\":\"哈希\"},\"1032\":{\"h\":\"冲突\",\"t\":[\"在 hmap 中，有一个字段extra专门用来存放溢出桶的信息，它会指向存放溢出桶的切片，其结构如下。\",\"type mapextra struct { // 溢出桶的指针切片 overflow *[]*bmap // 扩容前旧的溢出桶的指针切片 oldoverflow *[]*bmap // 指向下一个空闲的溢出桶的指针 nextOverflow *bmap }\",\"提示\",\"在上图中，蓝色部分是哈希桶数组，橙色部分是溢出哈希桶数组，溢出哈希桶下面统称为溢出桶。\",\"上图就可以比较好的展示 hmap 的大致结构，buckets指向哈希桶数组，extra指向溢出桶数组，桶bucket0指向溢出桶overflow0，两种不同的桶分别存放在两个切片中，两种桶的内存都是连续的。当两个键通过哈希后被分配到了同一个 bucket，这种情况就是发生了哈希冲突。go 中解决哈希冲突的方式就是拉链法，当发生冲突的键的数量大于桶的容量后，一般是 8 个，其值取决于internal/abi.MapBucketCount。然后就会创建一个新的桶来存放这些键，而这个桶就叫溢出桶，意为原来的桶装不下了，元素溢出到这个新桶里来了，创建完毕后，哈希桶会有一个指针指向新的溢出桶，这些桶的指针连起来就形成了一个bmap链表。\",\"对于拉链法而言，使用负载因子用于衡量哈希表的冲突情况，其计算公式如下\",\"loadfactor := len(elems) / len(buckets)\",\"当负载因子越大时，说明哈希冲突越多，也就是溢出桶的数量越多，那么在读写哈希表时，就需要遍历更多的溢出桶链表，才能找到指定的位置，所以性能就越差。为了改善这种情况，应该增加buckets桶的数量，也就是扩容，对于 hmap 而言，有两种情况会触发扩容\",\"负载因子超过阈值bucketCnt*13/16，其值至少是 6.5。\",\"溢出桶数量过多\",\"当负载因子越小时，说明 hmap 的内存利用率低，占用的内存就越大。go 中用于计算负载因子的函数是runtime.overLoadFactor，代码如下\",\"func overLoadFactor(count int, B uint8) bool { return count > bucketCnt && uintptr(count) > loadFactorNum*(bucketShift(B)/loadFactorDen) }\",\"其中loadFactorNum和loadFactorDen都是一个常数，bucketshift是计算1 << B，并且已知\",\"loadFactorNum = (bucketCnt * 13 / 16) * loadFactorDen\",\"所以化简一下就能得到\",\"count > bucketCnt && uintptr(count) / 1 << B > (bucketCnt * 13 / 16)\",\"其中(bucketCnt * 13 / 16)值为 6.5，1 << B就是哈希桶的数量，所以该函数的作用就是计算元素数量除以桶的数量值是否大于负载因子 6.5。\"]},\"1033\":{\"h\":\"计算\",\"t\":[\"go 内部计算哈希的函数位于runtime/alg.go文件中的f32hash，如下所示，包含了对 NaN 和 0 两种情况的处理。\",\"func f32hash(p unsafe.Pointer, h uintptr) uintptr { f := *(*float32)(p) switch { case f == 0: return c1 * (c0 ^ h) // +0, -0 case f != f: return c1 * (c0 ^ h ^ uintptr(fastrand())) // any kind of NaN default: return memhash(p, h, 4) } }\",\"可以看到的是，map 哈希计算方法并不是基于类型，而是基于内存，最终会走到memhash函数，该函数由汇编实现，逻辑位于runtime/asm*.s中。基于内存的哈希值不应该被持久化保存，因为它应该只在运行时被使用，不可能保证每一次运行内存分布都完全一致。\",\"在该文件中还有一个名为typehash的函数，该函数会根据不同类型来计算哈希值，不过 map 并不会使用这个函数来计算哈希。\",\"func typehash(t *_type, p unsafe.Pointer, h uintptr) uintptr\",\"这种实现相比上面那种更慢，但是更通用些，主要用于反射以及编译时的函数生成，比如下面这个函数。\",\"//go:linkname reflect_typehash reflect.typehash func reflect_typehash(t *_type, p unsafe.Pointer, h uintptr) uintptr { return typehash(t, p, h) }\"]},\"1034\":{\"h\":\"创建\",\"t\":[\"map 的初始化有两种方式，这一点已经在语言入门中阐述过了，一种是使用关键字map直接创建，另一种是使用make函数，不管用何种方式初始化，最后都是由runtime.makemap来创建 map，该函数签名如下\",\"func makemap(t *maptype, hint int, h *hmap) *hmap\",\"其中的参数\",\"t，指的是 map 的类型，不同的类型所需的内存占用不同\",\"hint，指的是make函数的第二个参数，map 预计元素的容量。\",\"h，指的是hmap的指针，可以为nil。\",\"返回值就是初始化完毕的hmap指针。该函数在初始化过程中有几个主要的工作。首先就是计算预计分配的内存是否会超出最大分配内存，对应如下代码\",\"// 将预计容量与桶类型的内存大小相乘 mem, overflow := math.MulUintptr(uintptr(hint), t.Bucket.Size_) // 数值溢出或者超出了最大分配内存 if overflow || mem > maxAlloc { hint = 0 }\",\"在先前的内部结构中已经提到过，hmap 内部是由桶组成的，在内存利用率最低的情况下，一个桶只有一个元素，占用的内存最多，所以预计的最大内存占用就是元素数量乘以对应类型的内存占用大小。当计算结果数值溢出了，或者超出了最大能分配的内存，就将 hint 置为 0，因为后续需要用 hint 来计算桶数组的容量。\",\"第二步初始化 hmap，并计算出一个随机的哈希种子，对应如下代码\",\"// 初始化 if h == nil { h = new(hmap) } // 获取一个随机的哈希种子 h.hash0 = fastrand()\",\"再根据 hint 的值计算出哈希桶的容量，对应的代码如下\",\"B := uint8(0) // 不断循环直到 hint / 1 << B < 6.5 for overLoadFactor(hint, B) { B++ } // 赋值给hmap h.B = B\",\"通过不断循环找到第一个满足(hint / 1 << B) < 6.5的 B 值，将其赋值给 hmap，在知晓了哈希桶的容量后，最后就是为哈希桶分配内存\",\"if h.B != 0 { var nextOverflow *bmap // 分配好的哈希桶，和预先分配的空闲溢出桶 h.buckets, nextOverflow = makeBucketArray(t, h.B, nil) // 如果预先分配了空闲溢出桶，就指向该溢出桶 if nextOverflow != nil { h.extra = new(mapextra) h.extra.nextOverflow = nextOverflow } }\",\"makeBucketArray函数会根据 B 的值，为哈希桶分配对应大小的内存，以及预先分配空闲的溢出桶，当 B 小于 4 时，就不会创建溢出桶，如果大于 4 那么就会创建2^B-4个溢出桶。对应runtime.makeBucketArray函数中的如下代码\",\"base := bucketShift(b) nbuckets := base // 小于4就不会创建溢出桶 if b >= 4 { // 预计桶的数量加上1 << (b-4) nbuckets += bucketShift(b - 4) // 溢出桶所需的内存 sz := t.Bucket.Size_ * nbuckets // 将内存空间向上取整 up := roundupsize(sz) if up != sz { // 不相等就采用up重新计算 nbuckets = up / t.Bucket.Size_ } }\",\"base指的是预计分配桶的数量，nbuckets指的是实际分配桶的数量，它加上了溢出桶的数量。\",\"if base != nbuckets { // 第一个可用的溢出桶 nextOverflow = (*bmap)(add(buckets, base*uintptr(t.BucketSize))) // 为了减少跟踪溢出桶的开销，将最后一个可用溢出桶的溢出指针指向哈希桶的头部 last := (*bmap)(add(buckets, (nbuckets-1)*uintptr(t.BucketSize))) // 最后一个溢出桶指向哈希桶 last.setoverflow(t, (*bmap)(buckets)) }\",\"当两者不相等时，就说明分配了额外的溢出桶，nextoverflow指针就是指向的第一个可用的溢出桶。由此可见，哈希桶与溢出桶其实是在同一块连续的内存中，这也是为什么在图中哈希桶数组与溢出桶数组是相邻的。\"]},\"1035\":{\"h\":\"访问\",\"t\":[\"在语法入门当中讲到过，访问 map 总共有三种方式，如下所示\",\"# 直接访问值 val := dict[key] # 访问值以及该键是否存在 val, exist := dict[key] # 遍历map for key, val := range dict{ }\",\"这三种方式所用到的函数都不相同，其中for range遍历 map 最为复杂。\"]},\"1036\":{\"h\":\"键值\",\"t\":[\"对于前两种方式而言，对应着两个函数，分别是runtime.mapaccess1和runtime.mapaccess2，函数签名如下\",\"func mapaccess1(t *maptype, h *hmap, key unsafe.Pointer) unsafe.Pointer func mapaccess2(t *maptype, h *hmap, key unsafe.Pointer) (unsafe.Pointer, bool)\",\"其中的 key 是指向访问 map 的键的指针，返回的时候也只会返回指针。在访问时，首先需要计算 key 的哈希值，定位 key 在哪个哈希桶，对应代码如下\",\"// 边界处理 if h == nil || h.count == 0 { if t.HashMightPanic() { t.Hasher(key, 0) // see issue 23734 } return unsafe.Pointer(&zeroVal[0]) } // 防止并发读写 if h.flags&hashWriting != 0 { fatal(\\\"concurrent map read and map write\\\") } // 使用指定类型的hasher计算哈希值 hash := t.Hasher(key, uintptr(h.hash0)) // (1 << B) - 1 m := bucketMask(h.B) // 通过移动指针定位key所在的哈希桶 b := (*bmap)(add(h.buckets, (hash&m)*uintptr(t.BucketSize)))\",\"在访问的一开始先进行边界情况处理，并防止 map 并发读写，当 map 处于并发读写状态时，就会发生 panic。再然后计算哈希值，bucketMask函数所干的事就是计算(1 << B) - 1 ，hash & m就等于hash & (1 << B) - 1 ，这是二进制取余操作，等价于hash % (1 << B)，使用位运算的好处就是更快。最后三行代码干的事就是将 key 计算得到的哈希值与当前 map 中的桶的数量取余，得到哈希桶的序号，然后根据序号移动指针获取 key 所在的哈希桶指针。\",\"在知晓了 key 在哪个哈希桶后，就可以展开查找了，这部分对应代码如下\",\" // 获取哈希值的高八位 top := tophash(hash) bucketloop: // 遍历bmap链表 for ; b != nil; b = b.overflow(t) { // bmap中的元素 for i := uintptr(0); i < bucketCnt; i++ { // 将计算得出的top与tophash中的元素进行对比 if b.tophash[i] != top { // 后续都是空的，没有了。 if b.tophash[i] == emptyRest { break bucketloop } // 不相等就继续遍历溢出桶 continue } // 根据i移动指针获取对应下标的键 k := add(unsafe.Pointer(b), dataOffset+i*uintptr(t.KeySize)) // 处理下指针 if t.IndirectKey() { k = *((*unsafe.Pointer)(k)) } // 比对两个键是否相等 if t.Key.Equal(key, k) { // 如果相等的话，就移动指针返回k对应下标的元素 // 从这行代码就能看出来键值的内存地址是连续的 e := add(unsafe.Pointer(b), dataOffset+bucketCnt*uintptr(t.KeySize)+i*uintptr(t.ValueSize)) if t.IndirectElem() { e = *((*unsafe.Pointer)(e)) } return e } } } // 没找到，返回零值。 return unsafe.Pointer(&zeroVal[0])\",\"在定位哈希桶时，是通过取余来定位的，所以 key 在哪个哈希桶取决于哈希值的低位，至于到底是低几位这取决于 B 的大小，而找到了哈希桶后，其中的 tophash 存放的是哈希值的高八位，因为低位取余值都是相同的，这样就不需要去一个个对比 key 是否相等，只对比哈希值高八位就够了。根据先前计算得到的哈希值获取其高八位，在 bmap 中的 tophash 数组一个个对比，如果高八位相等的话，再对比键是否相等，如果键也相等的话就说明找到了元素，不相等就继续遍历 tophash 数组，还找不到就继续遍历溢出桶 bmap 链表，直到 bmap 的tophash[i]为emptyRest退出循环，最后返回对应类型的零值。\",\"mapaccess2 函数与mapaccess1函数逻辑完全一致，仅仅多了一个布尔返回值，用于表示元素是否存在。\"]},\"1037\":{\"h\":\"遍历\",\"t\":[\"遍历 map 的语法如下\",\"for key, val := range dict { // do somthing... }\",\"在实际进行遍历时，go 使用了hiter结构体来存放遍历信息，hiter就是hmap interator的简写，意为哈希表迭代器，结构如下所示。\",\"// A hash iteration structure. // If you modify hiter, also change cmd/compile/internal/reflectdata/reflect.go // and reflect/value.go to match the layout of this structure. type hiter struct { key unsafe.Pointer // Must be in first position. Write nil to indicate iteration end (see cmd/compile/internal/walk/range.go). elem unsafe.Pointer // Must be in second position (see cmd/compile/internal/walk/range.go). t *maptype h *hmap buckets unsafe.Pointer // bucket ptr at hash_iter initialization time bptr *bmap // current bucket overflow *[]*bmap // keeps overflow buckets of hmap.buckets alive oldoverflow *[]*bmap // keeps overflow buckets of hmap.oldbuckets alive startBucket uintptr // bucket iteration started at offset uint8 // intra-bucket offset to start from during iteration (should be big enough to hold bucketCnt-1) wrapped bool // already wrapped around from end of bucket array to beginning B uint8 i uint8 bucket uintptr checkBucket uintptr }\",\"下面对它的一些字段做一些简单的解释\",\"key，elem就是for range遍历时获取到的键值\",\"buckets，在初始化迭代器时指定，指向哈希桶的头部\",\"bptr，当前正在遍历的 bmap\",\"startBucket，迭代开始时的起始桶序号\",\"offset，桶内偏移量，范围[0, bucketCnt-1]\",\"B，就是 hmap 的 B 值，\",\"i，桶内元素下标\",\"wrapped，是否从哈希桶数组末尾回到了头部\",\"在遍历开始前，go 通过runtime.mapiterinit函数来初始化遍历器，然后再通过函数runtime.mapinternext对 map 进行遍历，两者都需要用到hiter结构体，两个函数签名如下。\",\"func mapiterinit(t *maptype, h *hmap, it *hiter) func mapiternext(it *hiter)\",\"对于迭代器初始化而言，首先要获取 map 当前的一个快照，对应如下的代码。\",\"it.t = t it.h = h // 记录hmap当前状态的快照，只需要保存B值。 it.B = h.B it.buckets = h.buckets if t.Bucket.PtrBytes == 0 { h.createOverflow() it.overflow = h.extra.overflow it.oldoverflow = h.extra.oldoverflow }\",\"后续在迭代时，实际上遍历的是 map 的一个快照，而非实际的 map，所以在遍历过程中添加的元素和桶都不会被遍历到，并且同时并发遍历写入元素，有可能触发fatal。\",\"if h.flags&hashWriting != 0 { fatal(\\\"concurrent map iteration and map write\\\") }\",\"第二步再决定遍历的两个起始位置，第一个是起始桶的位置，第二个桶内的起始位置，这两个都是随机选的，对应如下代码\",\"// r是一个随机数 var r uintptr if h.B > 31-bucketCntBits { r = uintptr(fastrand64()) } else { r = uintptr(fastrand()) } // r % (1 << B) 得到起始桶的位置 it.startBucket = r & bucketMask(h.B) // r >> B % 8 得到起始桶内的元素起始位置 it.offset = uint8(r >> h.B & (bucketCnt - 1)) // 记录当前正在遍历的桶序号 it.bucket = it.startBucket\",\"通过fastrand()或fastrand64()获取一个随机数，两次取模运算得到桶起始位置和桶内起始位置。\",\"提示\",\"map 虽然不允许同时并发读写，但是允许同时并发遍历。\",\"接下来才真正开始迭代 map，如何对桶进行遍历，以及退出的策略，这部分对应下面的代码\",\"// hmap h := it.h // maptype t := it.t // 待遍历的桶的位置 bucket := it.bucket // 待遍历的bmap b := it.bptr // 桶内序号i i := it.i next: if b == nil { // 如果当前桶的位置与起始位置相等，说明是绕了一圈回来，后面的已经遍历过了 // 遍历结束，可以退出了 if bucket == it.startBucket && it.wrapped { it.key = nil it.elem = nil return } // 桶下标后移 bucket++ // bucket == 1 << B，就是走到哈希桶数组的末尾了 if bucket == bucketShift(it.B) { // 从头开始 bucket = 0 it.wrapped = true } i = 0 }\",\"哈希桶的起始位置选取是随机的，在遍历时，从起始位置向桶切片的末尾逐个迭代，走到1 << B时，然后再从头开始，当再次回到起始位置时，说明已经遍历完毕，然后退出。上面的代码是关于如何在 map 中遍历桶，而下面的代码描述的就是如何在桶内进行遍历。\",\"for ; i < bucketCnt; i++ { // (i + offset) % 8 offi := (i + it.offset) & (bucketCnt - 1) // 如果当前元素是空的就跳过 if isEmpty(b.tophash[offi]) || b.tophash[offi] == evacuatedEmpty { continue } // 移动指针获取键 k := add(unsafe.Pointer(b), dataOffset+uintptr(offi)*uintptr(t.KeySize)) if t.IndirectKey() { k = *((*unsafe.Pointer)(k)) } // 移动指针获取值 e := add(unsafe.Pointer(b), dataOffset+bucketCnt*uintptr(t.KeySize)+uintptr(offi)*uintptr(t.ValueSize)) // 处理等量扩容的情况，当键值被疏散到了其它位置后，需要重新去寻找键值。 if (b.tophash[offi] != evacuatedX && b.tophash[offi] != evacuatedY) || !(t.ReflexiveKey() || t.Key.Equal(k, k)) { it.key = k if t.IndirectElem() { e = *((*unsafe.Pointer)(e)) } it.elem = e } else { rk, re := mapaccessK(t, h, k) if rk == nil { continue } it.key = rk it.elem = re } it.bucket = bucket it.i = i + 1 return } // 没找到就去溢出桶里面找 b = b.overflow(t) i = 0 goto next\",\"提示\",\"在上面的扩容判断条件中，有一个表达式可能会让人感到困惑，如下\",\"t.Key.Equal(k, k)\",\"之所以要去判断k是否与自身相等，是为了过滤键为Nan的情况，如果一个元素的键是Nan，那么就会无法正常访问该元素，无论是遍历还是直接访问，或者是删除都无法正常进行，因为Nan != Nan永远成立，也就永远无法找到这个键。\",\"首先根据i值和offset值取模运算得到待遍历的桶内下标，通过移动指针获取键值，由于在 map 遍历期间，会有其它的写入操作触发了 map 的扩容，所以实际的键值可能已经不在原来的位置了，在这种情况下就需要使用mapaccessK函数去重新获取实际的键值，该函数签名如下\",\"func mapaccessK(t *maptype, h *hmap, key unsafe.Pointer) (unsafe.Pointer, unsafe.Pointer)\",\"它的功能与mapaccess1函数完全一致，区别在于mapaccessK函数会同时返回 key 值和 value 值。最终获取到了键值以后，将其赋值给迭代器的key，elem，然后更新迭代器的下标，这样就完成了一次迭代，代码执行就回到了for range的代码块中。如果在桶内没有找到，就再去溢出桶里面找，继续重复上面的步骤，直到溢出桶链表遍历完毕后，再继续迭代下一个哈希桶。\"]},\"1038\":{\"h\":\"修改\",\"t\":[\"修改 map 的语法如下\",\"dict[key] = val\",\"在 go 中，对于修改 map 的操作，由runtime.mapassign函数来完成，该函数签名如下\",\"func mapassign(t *maptype, h *hmap, key unsafe.Pointer) unsafe.Pointer\",\"其访问过程的逻辑与mapaccess1相同，不过 key 不存在时会为其分配一个位置，如果存在就更新，最后返回元素的指针。在开始时，需要做一些准备工作，这部分对应的代码如下\",\"// 不允许写入为nil的map if h == nil { panic(plainError(\\\"assignment to entry in nil map\\\")) } // 禁止同时并发写 if h.flags&hashWriting != 0 { fatal(\\\"concurrent map writes\\\") } // 计算key哈希值 hash := t.Hasher(key, uintptr(h.hash0)) // 修改hmap状态 h.flags ^= hashWriting // 初始化哈希桶 if h.buckets == nil { h.buckets = newobject(t.Bucket) // newarray(t.Bucket, 1) }\",\"上面的代码主要做了以下几件事\",\"hmap 状态检查\",\"计算 key 的哈希值\",\"检查哈希桶是否需要初始化\",\"再之后通过哈希值取模运算得到哈希桶位置，以及 key 的 tophash，代码对应如下\",\"again: // hash % (1 << B) bucket := hash & bucketMask(h.B) // 移动指针获取指定位置的bmap b := (*bmap)(add(h.buckets, bucket*uintptr(t.BucketSize))) // 计算tophash top := tophash(hash)\",\"现在确定了桶的位置，bmap，tophash，就可以开始查找元素了，这部分代码对应如下\",\"// 待插入的tophash var inserti *uint8 // 待插入的key值指针 var insertk unsafe.Pointer // 待插入的value值指针 var elem unsafe.Pointer bucketloop: for { // 遍历桶内的tophash数组 for i := uintptr(0); i < bucketCnt; i++ { // tophash不相等 if b.tophash[i] != top { // 如果当前桶内下标是空的，且还没有插入元素，就选取该位置插入 if isEmpty(b.tophash[i]) && inserti == nil { // 找到了一个合适的位置分配给key inserti = &b.tophash[i] insertk = add(unsafe.Pointer(b), dataOffset+i*uintptr(t.KeySize)) elem = add(unsafe.Pointer(b), dataOffset+bucketCnt*uintptr(t.KeySize)+i*uintptr(t.ValueSize)) } // 遍历完了就退出循环 if b.tophash[i] == emptyRest { break bucketloop } continue } // 如果tophash相等的话，则说明key可能已经存在了 k := add(unsafe.Pointer(b), dataOffset+i*uintptr(t.KeySize)) if t.IndirectKey() { k = *((*unsafe.Pointer)(k)) } // 判断key是否相等 if !t.Key.Equal(key, k) { continue } // 如果需要更新key值的话，就将key的内存直接复制到k处 if t.NeedKeyUpdate() { typedmemmove(t.Key, k, key) } // 得到了元素的指针 elem = add(unsafe.Pointer(b), dataOffset+bucketCnt*uintptr(t.KeySize)+i*uintptr(t.ValueSize)) // 更新完毕，返回元素指针 goto done } // 执行到这里说明没找到key，遍历溢出桶链表，继续找 ovf := b.overflow(t) if ovf == nil { break } b = ovf } // 执行到这里说明key没有存在于map中，但可能已经找到了一个合适的位置分配给key，也可能没有 // 没有找到一个合适的位置分配给key if inserti == nil { // 说明当前的哈希桶以及它的溢出桶都满了，那就再分配一个溢出桶 newb := h.newoverflow(t, b) // 在溢出桶中分配一个位置给key inserti = &newb.tophash[0] insertk = add(unsafe.Pointer(newb), dataOffset) elem = add(insertk, bucketCnt*uintptr(t.KeySize)) } // 如果存放的是key指针的话 if t.IndirectKey() { // 新分配内存，返回的是一个unsafe指针 kmem := newobject(t.Key) *(*unsafe.Pointer)(insertk) = kmem // 赋值给insertk，方便后面进行key的内存复制 insertk = kmem } // 如果存放的是元素指针 if t.IndirectElem() { // 分配内存 vmem := newobject(t.Elem) // 让指针指向vmem *(*unsafe.Pointer)(elem) = vmem } // 将key的内存直接复制到insertk的位置 typedmemmove(t.Key, insertk, key) *inserti = top // 数量加一 h.count++ done: // 执行到这里说明修改过程已经完成了 if h.flags&hashWriting == 0 { fatal(\\\"concurrent map writes\\\") } h.flags &^= hashWriting if t.IndirectElem() { elem = *((*unsafe.Pointer)(elem)) } // 返回元素指针 return elem\",\"在上述一大段代码中，首先进入 for 循环尝试在哈希桶和溢出桶中去查找，查找的逻辑与mapaccess完全一致，此时有三种可能\",\"第一种，在 map 中找到了已经存在的 key，直接跳到done代码块，返回元素指针\",\"第二种，在 map 中找到了一个位置分配给 key 使用，将 key 复制到指定位置，并返回元素指针\",\"第三种，所有桶都找完了，没有在 map 中找到可以分配给 key 的位置，创建一个新的溢出桶，并将 key 分配到桶中，然后将 key 复制到指定位置，并返回元素指针\",\"最终得到了元素指针后，就可以赋值了，不过这部分操作并不由mapassign函数来完成，它只负责返回元素指针，赋值操作是在编译器期间插入的，在代码里面看不见，但是编译后的代码可以看见，假设有下面的代码\",\"func main() { dict := make(map[string]string, 100) dict[\\\"hello\\\"] = \\\"world\\\" }\",\"通过命令如下命令得到汇编代码\",\"go tool compile -S -N -l main.go\",\"关键的地方就在这部分\",\"0x004e 00078 LEAQ type:map[string]string(SB), AX 0x0055 00085 CALL runtime.mapassign_faststr(SB) 0x005a 00090 MOVQ AX, main..autotmp_2+40(SP) 0x0083 00131 LEAQ go:string.\\\"world\\\"(SB), CX 0x008a 00138 MOVQ CX, (AX)\",\"可以看到调用了runtime.mapassign_faststr，其逻辑与mapassign完全相似，LEAQ go:string.\\\"world\\\"(SB), CX就是将字符串的地址存储到CX上，MOVQ CX, (AX)再将其存储到了AX上，于是就完成了元素的赋值。\"]},\"1039\":{\"h\":\"删除\",\"t\":[\"在 go 中，要想删除一个 map 的元素，只能使用内置函数delete，如下\",\"delete(dict, \\\"abc\\\")\",\"其内部调用的是runtime.mapdelete函数，该函数签名如下\",\"func mapdelete(t *maptype, h *hmap, key unsafe.Pointer)\",\"它会删除 map 中指定 key 的元素，不管元素是否存在于 map 中，它都不会有任何反应。函数开头做准备工作的逻辑都是类似的，无非就是下面几件事\",\"hmap 状态检查\",\"计算 key 的哈希值\",\"定位哈希桶\",\"计算 tophash\",\"前面有很多重复的内容，就不再赘述了，这里只关注它删除的逻辑，对应的部分代码如下。\",\"bOrig := b search: for ; b != nil; b = b.overflow(t) { for i := uintptr(0); i < bucketCnt; i++ { if b.tophash[i] != top { // 没找到就退出循环 if b.tophash[i] == emptyRest { break search } continue } // 移动指针找到key的位置 k := add(unsafe.Pointer(b), dataOffset+i*uintptr(t.KeySize)) k2 := k if t.IndirectKey() { k2 = *((*unsafe.Pointer)(k2)) } if !t.Key.Equal(key, k2) { continue } // 删除key if t.IndirectKey() { *(*unsafe.Pointer)(k) = nil } else if t.Key.PtrBytes != 0 { memclrHasPointers(k, t.Key.Size_) } // 移动指针找到元素的位置 e := add(unsafe.Pointer(b), dataOffset+bucketCnt*uintptr(t.KeySize)+i*uintptr(t.ValueSize)) // 删除元素 if t.IndirectElem() { *(*unsafe.Pointer)(e) = nil } else if t.Elem.PtrBytes != 0 { memclrHasPointers(e, t.Elem.Size_) } else { memclrNoHeapPointers(e, t.Elem.Size_) } notLast: // 数量减一 h.count-- // 重置哈希种子，减小冲突发生概率 if h.count == 0 { h.hash0 = fastrand() } break search } }\",\"通过上面的代码可以看到，查找的逻辑跟前面的操作是几乎完全一致的，找到元素，然后删除，hmap 记录的数量减一，当数量减为 0 时，就重置哈希种子。\",\"另一个要注意的点就是，在删除完元素后，需要修改当前下标的 tophash 状态，这部分对应的代码如下。当 i 在桶末尾时，判断根据下一个溢出桶来判断当前元素是否是最后一个可用元素，否则的话就直接查看相邻元素的哈希状态。如果当前元素不是最后一个可用的，就将状态置为emptyOne。\",\"// 将当前tophash标记为空 b.tophash[i] = emptyOne // 如果在tophash末尾 if i == bucketCnt-1 { // 溢出桶不为空，且溢出桶内有元素，说明当前元素不是最后一个 if b.overflow(t) != nil && b.overflow(t).tophash[0] != emptyRest { goto notLast } } else { // 相邻元素不为空 if b.tophash[i+1] != emptyRest { goto notLast } }\",\"如果元素确实是最后一个元素的话，就需要修正一下桶链表中部分桶的 tophash 数组的值，否则的话后续遍历时会导致无法在正确的位置退出。在 map 创建溢出桶的时候讲述过，go 为了减少追踪溢出桶的成本，最后一个溢出桶的overflow指针就是指向头部的哈希桶，所以它实际上是一个单向环形链表，链表的“头部”就是哈希桶。而这里的b是查找过后的b，很可能是链表中间的某一个溢出桶，逆序遍历环形链表查找最后一个存在的元素。尽管代码写的是正序遍历，由于链表是一个环，它不断正序遍历直到当前溢出桶的前一个为止，从结果上来说确实是逆序的。再然后逆序遍历桶中的 tophash 数组，将状态为emptyOne的元素更新为emptyRest，直到找到最后一个存在的元素。为避免无限陷入在环中，当回到了最开始的桶时，也就是bOrig，说明此时链表内已经没有可用的元素了，就可以退出循环了。\",\"// 执行到这里说明当前元素后面没有元素了 // 不断的倒序遍历bmap链表，倒序遍历桶内的tophash // 将状态为emptyOne的更新为emptyRest for { b.tophash[i] = emptyRest if i == 0 { if b == bOrig { break } c := b // 找到当前bmap链表的前一个 for b = bOrig; b.overflow(t) != c; b = b.overflow(t) { } i = bucketCnt - 1 } else { i-- } if b.tophash[i] != emptyOne { break } }\"]},\"1040\":{\"h\":\"清空\",\"t\":[\"在go1.21版本中，新增了内置函数clear，可以用于清空 map 中的所有元素，语法如下\",\"clear(dict)\",\"其内部调用了runtime.mapclear函数，它负责删除 map 中的所有元素，其函数签名如下\",\"func mapclear(t *maptype, h *hmap)\",\"该函数的逻辑并不复杂，首先需要将整个 map 标记为空，对应的代码如下。\",\"// 遍历每一个桶以及溢出桶，将所有的tophash元素置为emptyRest markBucketsEmpty := func(bucket unsafe.Pointer, mask uintptr) { for i := uintptr(0); i <= mask; i++ { b := (*bmap)(add(bucket, i*uintptr(t.BucketSize))) for ; b != nil; b = b.overflow(t) { for i := uintptr(0); i < bucketCnt; i++ { b.tophash[i] = emptyRest } } } } markBucketsEmpty(h.buckets, bucketMask(h.B))\",\"上面代码做的事情就是遍历每一个桶，将桶中的 tophash 数组的元素都置为emptyRest，将 map 标记为空，这样就能阻止迭代器继续迭代，然后再清空 map，对应的代码如下。\",\"// 重置哈希种子 h.hash0 = fastrand() // 重置extra结构体 if h.extra != nil { *h.extra = mapextra{} } // 这个操作会清除原来buckets的内存，并重新分配新的桶 _, nextOverflow := makeBucketArray(t, h.B, h.buckets) if nextOverflow != nil { // 分配新的空闲溢出桶 h.extra.nextOverflow = nextOverflow }\",\"通过makeBucketArray清除之前的桶的内存，然后新分配一个，这样一来就完成了桶的清除，除此之外还有一些细节，比如说将count置 0，还有其它的一些操作就不过多赘述。\"]},\"1041\":{\"h\":\"扩容\",\"t\":[\"在之前的所有操作中，为了更关注其本身的逻辑，所以屏蔽了很多跟扩容有关内容，这样会简单很多。扩容的逻辑其实比较复杂，放在最后就是不希望产生干扰，那么现在就来看看 go 是如何对 map 进行扩容的，前面已经提到过，触发扩容有两个条件：\",\"负载因子超过 6.5\",\"溢出桶的数量过多\",\"判断负载因子是否超过阈值的函数是runtime.overLoadFactor函数，在哈希冲突部分已经阐述过，而判断溢出桶的数量是否过多的函数是runtime.tooManyOverflowBuckets，其工作原理也很简单，代码如下\",\"func tooManyOverflowBuckets(noverflow uint16, B uint8) bool { if B > 15 { B = 15 } return noverflow >= uint16(1)<<(B&15) }\",\"上面的代码可以简化成如下表达式，一眼就能看懂。\",\"overflow >= 1 << (min(15,B) % 16)\",\"在这里，go 对于 too many 的定义是：溢出桶的数量跟哈希桶的数量差不多，如果阈值低了，就会做多余的工作，如果阈值高了，那么在扩容的时候就会占用大量的内存。在修改和删除元素时就有可能触发扩容，判断是否需要扩容的代码如下。\",\"if !h.growing() && (overLoadFactor(h.count+1, h.B) || tooManyOverflowBuckets(h.noverflow, h.B)) { hashGrow(t, h) goto again // Growing the table invalidates everything, so try again }\",\"可以看到的就是这三个条件限制\",\"当前不能正在扩容\",\"负载因子小于 6.5\",\"溢出桶数量不能过多\",\"负责扩容的函数自然就是runtime.hashGrow，其函数签名如下\",\"func hashGrow(t *maptype, h *hmap)\",\"实际上，扩容也分种类，根据不同条件触发的扩容其类型也不同，分为以下两种\",\"增量扩容\",\"等量扩容\"]},\"1042\":{\"h\":\"增量扩容\",\"t\":[\"当负载因子过大时，即元素数量较大于哈希桶的数量，当哈希冲突比较严重的时候，会形成很多溢出桶链表，这样会导致 map 读写性能下降，因为需要查找一个元素遍历更多的溢出桶链表，而遍历的时间复杂度是 O(n)，哈希表查找的时间复杂度主要取决于哈希值的计算时间和遍历的时间，当遍历的时间远小于计算哈希的时间时，查找的时间复杂度才能称为 O(1)。倘若哈希冲突比较频繁，过多 key 都被分配到了同一个哈希桶，溢出桶链表过长导致遍历时间增大，就会导致查找时间增大，而增删改操作都需要先进行查找操作，这样一来的话就会导致整个 map 的性能严重下降。\",\"像图中这种比较极端的情况，查找的时间复杂度基本上跟 O(n)没啥区别了。面对这种情况，解决办法就是新增更多的哈希桶，避免形成过长的溢出桶链表，这种方法也被称为增量扩容。\",\"在 go 中，增量扩容每次都会将 B 加一，也就是哈希桶的规模每次扩大一倍。扩容后，需要将旧数据搬迁到新的 map 中，倘若 map 中的元素数量以千万甚至亿计，一次性全部搬迁完的话耗时会很久，所以 go 采用的是逐步搬迁的策略，为此，go 会将 hamp 中的oldBuckets指向原来的哈希桶数组，表示这是旧数据，然后创建更大容量的哈希桶数组，让hmap中的buckets指向新的哈希桶数组，然后在每一次修改和删除元素时，将部分元素搬迁从旧桶搬到新桶，直到搬迁完毕，旧桶的内存才会被释放掉。\",\"func hashGrow(t *maptype, h *hmap) { // 差值 bigger := uint8(1) // 旧桶 oldbuckets := h.buckets // 新的哈希桶 newbuckets, nextOverflow := makeBucketArray(t, h.B+bigger, nil) flags := h.flags &^ (iterator | oldIterator) if h.flags&iterator != 0 { flags |= oldIterator } // B+bigger h.B += bigger h.flags = flags h.oldbuckets = oldbuckets h.buckets = newbuckets h.nevacuate = 0 h.noverflow = 0 // 溢出桶也要指定旧桶和新桶 if h.extra != nil && h.extra.overflow != nil { if h.extra.oldoverflow != nil { throw(\\\"oldoverflow is not nil\\\") } h.extra.oldoverflow = h.extra.overflow h.extra.overflow = nil } if nextOverflow != nil { if h.extra == nil { h.extra = new(mapextra) } h.extra.nextOverflow = nextOverflow } }\",\"上面的代码做的事情就是创建大一倍容量的新哈希桶，然后指定哈希新旧桶的引用，以及溢出新旧桶的引用，而实际的搬迁工作并不由hashGrow函数来完成，它只负责指定新旧桶，并更新hmap的一些状态。这些工作实际上是由runtime.growWork函数完成的，其函数签名如下\",\"func growWork(t *maptype, h *hmap, bucket uintptr)\",\"它会在mapassign函数和mapdelete函数中，以如下的形式被调用，其作用就是如果当前 map 正在扩容中，就进行一次部分搬迁工作。\",\"if h.growing() { growWork(t, h, bucket) }\",\"在进行修改和删除操作时，需要判断当前是否处于扩容中，这主要由hmap.growing方法来完成，内容很简单，就是判断oldbuckets是否为不为空，对应代码如下。\",\"func (h *hmap) growing() bool { return h.oldbuckets != nil }\",\"来看看growWork函数都干了些什么。\",\"func growWork(t *maptype, h *hmap, bucket uintptr) { // bucket % 1 << (B-1) evacuate(t, h, bucket&h.oldbucketmask()) if h.growing() { evacuate(t, h, h.nevacuate) } }\",\"其中bucket&h.oldbucketmask()操作是计算得到旧桶的位置，确保将要搬迁的是当前桶的旧桶。从函数中可以看到真正负责搬迁工作的是runtime.evacuate函数，其中用到了evaDst结构体用来表示搬迁目的地，主要作用是在搬迁的过程中迭代新桶，它的结构如下。\",\"type evacDst struct { b *bmap // 搬迁目的地的新桶 i int // 桶内下标 k unsafe.Pointer // 指向新键目的地的指针 e unsafe.Pointer // 指向新值目的地的指针 }\",\"在搬迁开始之前，go 会分配两个evacDst结构体，一个指向新哈希桶的上半区，另一个指向新哈希桶的下半区，对应的代码如下\",\"// 定位旧桶中指定的哈希桶 b := (*bmap)(add(h.oldbuckets, oldbucket*uintptr(t.BucketSize))) // 旧桶的长度 = 1 << (B - 1) newbit := h.noldbuckets() var xy [2]evacDst x := &xy[0] // 指向新桶的上半区 x.b = (*bmap)(add(h.buckets, oldbucket*uintptr(t.BucketSize))) x.k = add(unsafe.Pointer(x.b), dataOffset) x.e = add(x.k, bucketCnt*uintptr(t.KeySize)) // 判断是不是等量扩容 if !h.sameSizeGrow() { y := &xy[1] // 指向新桶的下半区 y.b = (*bmap)(add(h.buckets, (oldbucket+newbit)*uintptr(t.BucketSize))) y.k = add(unsafe.Pointer(y.b), dataOffset) y.e = add(y.k, bucketCnt*uintptr(t.KeySize)) }\",\"旧桶的搬迁目的地是两个新桶，搬迁后，桶中的部分数据会在上半区，另一部分的数据会在下半区，这样做是希望扩容后的数据能够更加均匀的分布，分布的越均匀，map 的查找性能就会越好。go 如何将数据搬迁到两个新桶中，对应着下面的代码。\",\"// 遍历溢出桶链表 for ; b != nil; b = b.overflow(t) { // 拿到每个桶的第一键值对 k := add(unsafe.Pointer(b), dataOffset) e := add(k, bucketCnt*uintptr(t.KeySize)) // 遍历桶中的每一个键值对 for i := 0; i < bucketCnt; i, k, e = i+1, add(k, uintptr(t.KeySize)), add(e, uintptr(t.ValueSize)) { top := b.tophash[i] // 如果是空的就跳过 if isEmpty(top) { b.tophash[i] = evacuatedEmpty continue } // 新哈希桶不应该处于搬迁状态 // 否则的话肯定是出问题了 if top < minTopHash { throw(\\\"bad map state\\\") } k2 := k if t.IndirectKey() { k2 = *((*unsafe.Pointer)(k2)) } // 该变量决定了当前键值对被搬迁到上半区还是下半区 // 它的值只能是0或1 var useY uint8 if !h.sameSizeGrow() { // 重新计算哈希值 hash := t.Hasher(k2, uintptr(h.hash0)) // 处理k2 != k2的特殊情况， if h.flags&iterator != 0 && !t.ReflexiveKey() && !t.Key.Equal(k2, k2) { useY = top & 1 top = tophash(hash) } else { // hash % 1 << (B - 1) if hash&newbit != 0 { useY = 1 } } } // 检查常量的值 if evacuatedX+1 != evacuatedY || evacuatedX^1 != evacuatedY { throw(\\\"bad evacuatedN\\\") } // 更新旧桶的tophash，表示当前元素已被搬迁 b.tophash[i] = evacuatedX + useY // evacuatedX + 1 == evacuatedY // 指定搬迁目的地 dst := &xy[useY] // evacuation destination // 新桶容量不够用了建个溢出桶 if dst.i == bucketCnt { dst.b = h.newoverflow(t, dst.b) dst.i = 0 dst.k = add(unsafe.Pointer(dst.b), dataOffset) dst.e = add(dst.k, bucketCnt*uintptr(t.KeySize)) } dst.b.tophash[dst.i&(bucketCnt-1)] = top // mask dst.i as an optimization, to avoid a bounds check // 复制键 if t.IndirectKey() { *(*unsafe.Pointer)(dst.k) = k2 // copy pointer } else { typedmemmove(t.Key, dst.k, k) // copy elem } // 复制值 if t.IndirectElem() { *(*unsafe.Pointer)(dst.e) = *(*unsafe.Pointer)(e) } else { typedmemmove(t.Elem, dst.e, e) } // 后移新桶目的指针，为下一个键值做准备 dst.i++ dst.k = add(dst.k, uintptr(t.KeySize)) dst.e = add(dst.e, uintptr(t.ValueSize)) } }\",\"从上面的代码可以看到，go 会遍历旧桶链表中的每一个桶中的每一个元素，将其中的数据搬到新桶中，决定数据到底是去上半区还是下半区取决于重新计算后的哈希值\",\"// hash % 1 << (B - 1) if hash&newbit != 0 { useY = 1 }\",\"在搬迁后，会将当前元素的 tophash 置为evacuatedX或evacuated，如果在扩容的过程中尝试查找数据，通过此状态就可以得知数据已经被搬迁，就知道要去新桶里面找对应的数据。这部分逻辑对应runtime.mapaccess1函数中的如下代码。\",\"if c := h.oldbuckets; c != nil { if !h.sameSizeGrow() { // There used to be half as many buckets; mask down one more power of two. m >>= 1 } oldb := (*bmap)(add(c, (hash&m)*uintptr(t.BucketSize))) // 如果旧桶已经被搬迁了就不找了 if !evacuated(oldb) { b = oldb } }\",\"在访问元素时，如果当前正处于扩容状态，会先去尝试去旧桶里面查找，如果旧桶已经被搬迁了就不去旧桶里面找。回到搬迁这块，此时已经确定了搬迁的目的地，接下来要做就是将数据复制到新桶中，然后让evacDst结构体指向下一个目的地。\",\"dst := &xy[useY] dst.b.tophash[dst.i&(bucketCnt-1)] = top typedmemmove(t.Key, dst.k, k) typedmemmove(t.Elem, dst.e, e) if h.flags&oldIterator == 0 && t.Bucket.PtrBytes != 0 { b := add(h.oldbuckets, oldbucket*uintptr(t.BucketSize)) ptr := add(b, dataOffset) n := uintptr(t.BucketSize) - dataOffset memclrHasPointers(ptr, n) }\",\"这样操作直到当前桶全部搬迁完毕，然后 go 就会将当前旧桶键值数据全部内存清除，只留下一个哈希桶 tophash 数组（留下是因为后续要靠 tophash 数组判断搬迁状态），旧桶中的溢出桶内存由于不再被引用后续会被 GC 回收掉。hmap中有一个字段nevacuate用来记录搬迁进度，每搬完一个旧的哈希桶，就会加一，当它的值与旧桶的数量相等时，就说明整个 map 的扩容已经完成了，接下来就由runtime.advanceEvacuationMark函数进行扩容的收尾工作。\",\"func advanceEvacuationMark(h *hmap, t *maptype, newbit uintptr) { h.nevacuate++ stop := h.nevacuate + 1024 if stop > newbit { stop = newbit } for h.nevacuate != stop && bucketEvacuated(t, h, h.nevacuate) { h.nevacuate++ } if h.nevacuate == newbit { // newbit = len(oldbuckets) h.oldbuckets = nil if h.extra != nil { h.extra.oldoverflow = nil } h.flags &^= sameSizeGrow } }\",\"它会统计已搬迁数量并确认是否与旧桶数量相等，相等的话就清除对于所有旧桶和旧溢出桶的引用，至此扩容完毕。\",\"在growWork函数中，总共调用了两次evacuate函数，第一次是搬当前正在访问桶的旧桶，第二次是搬h.nevacuate所指向的旧桶，总共搬了两次，说明逐步搬迁时，每一次都会搬两个桶。\"]},\"1043\":{\"h\":\"等量扩容\",\"t\":[\"前面提到过，等量扩容的触发条件是溢出桶数量过多，假如 map 先是添加了大量的元素，然后又大量删除元素，这样一来可能很多桶都是空的，可能有些桶有很多的元素，数据分布十分不均匀，有相当多的溢出桶都是空的，占用了不少的内存。为了解决这类问题，就需要创建一个同等容量的新 map，重新分配一次哈希桶，这个过程就叫等量扩容。所以其实并不是扩容操作，只是将所有元素二次分配使数据分布更加均匀，等量扩容操作是糅合在增量扩容操作中的，其逻辑与增量扩容完全一致，新旧 map 容量完全相等。\",\"在hashGrow函数中，如果负载因子没有超过阈值，进行的就是等量扩容，go 更新h.flags的状态为sameSizeGrow，h.B也不会加一，所以新创建的哈希桶容量也不会有变化，对应代码如下。\",\"bigger := uint8(1) if !overLoadFactor(h.count+1, h.B) { bigger = 0 h.flags |= sameSizeGrow } oldbuckets := h.buckets newbuckets, nextOverflow := makeBucketArray(t, h.B+bigger, nil)\",\"在evacuate函数中，刚开始创建eavcDst结构体时，如果是等量扩容的话就只会创建一个结构体指向新桶，对应代码如下。\",\"if !h.sameSizeGrow() { y := &xy[1] y.b = (*bmap)(add(h.buckets, (oldbucket+newbit)*uintptr(t.BucketSize))) y.k = add(unsafe.Pointer(y.b), dataOffset) y.e = add(y.k, bucketCnt*uintptr(t.KeySize)) }\",\"并且在搬迁元素的时候，等量扩容不会重新计算哈希值，也没有上下半区的选择\",\"if !h.sameSizeGrow() { // 重新计算哈希值 hash := t.Hasher(k2, uintptr(h.hash0)) // 处理k2 != k2的特殊情况， if h.flags&iterator != 0 && !t.ReflexiveKey() && !t.Key.Equal(k2, k2) { useY = top & 1 top = tophash(hash) } else { // hash % 1 << (B - 1) if hash&newbit != 0 { useY = 1 } } }\",\"除了这些，其它的逻辑与增量扩容完全一致。经过等量扩容哈希桶重新分配过后，溢出桶的数量就会减少，旧的溢出桶都会被 GC 回收掉。\"]},\"1044\":{\"h\":\"syncmap\",\"t\":[\"go 标准库提供的sync.Map是一个并发安全的 map，使用它时不需要使用锁之类的方式来控制，其实现不算特别复杂，去掉注释总共也就两三百行代码。\"]},\"1045\":{\"h\":\"结构\",\"t\":[\"type Map struct { mu Mutex read atomic.Pointer[readOnly] dirty map[any]*entry misses int }\",\"它总共只有四个字段，分别如下\",\"read，只读的 map，可以理解为对dirty的缓存\",\"dirty，一个普通的 map\",\"misses，访问read时没有命中的次数\",\"mu，保护dirty的并发安全\",\"read是sync.readonly类型，其内部依旧是一个 map，其中的amended字段表示dirty是否包含read所没有的 key。\",\"type readOnly struct { m map[any]*entry amended bool // true if the dirty map contains some key not in m. }\",\"另外entry类型结构如下，p是一个指向 value 的指针。\",\"type entry struct { p atomic.Pointer[any] }\",\"对于一个 entry 而言，它有三种可能的情况\",\"正常情况，存放了对应的值\",\"p为nil，表示该键值对已被删除，此时 dirty 可能为空，或者其可能依旧存在于 dirty 中。\",\"p == expunged，expunged是一个空的接口对象，同样代表了键值对已经被删除且不存在于 dirty 中。\",\"标准库 map 的并发安全是通过读写分离来实现的，read和dirty所存储的entry指针都是指向的同一片 value，read是只读的，所以多个协程访问时也不会有安全问题，dirty是可以被修改的，受到互斥锁的保护，misses记录了 key 访问没有命中的次数，当次数累计到一定的值后，当前的dirty就会转变为read，misses清零，这就是sync.Map大致的工作逻辑，后续会对其操作进行更加细致的分析。\"]},\"1046\":{\"h\":\"读\",\"t\":[\"读操作对应Map.Load方法，代码如下\",\"func (m *Map) Load(key any) (value any, ok bool) { read := m.loadReadOnly() e, ok := read.m[key] if !ok && read.amended { m.mu.Lock() read = m.loadReadOnly() e, ok = read.m[key] if !ok && read.amended { e, ok = m.dirty[key] m.missLocked() } m.mu.Unlock() } if !ok { return nil, false } return e.load() }\",\"它首先会访问 read，如果存在的话就直接返回，否则就会去尝试持有mu互斥锁，然后再去访问 read，因为在获得锁的期间 dirty 有可能晋升为 read，倘若还是没有找到，最终就会去访问 dirty，并记录一次 miss，然后解锁。\",\"func (m *Map) missLocked() { m.misses++ if m.misses < len(m.dirty) { return } m.read.Store(&readOnly{m: m.dirty}) m.dirty = nil m.misses = 0 }\",\"通过missLocked方法可以看出，dirty 晋升为 read 的阈值条件是m.misses >= len(m.dirty)。\"]},\"1047\":{\"h\":\"写\",\"t\":[\"写操作对应的是Store方法，不过实际上也是由Swap方法来完成，previous代表着先前的值，loaded表示 key 是否存在。\",\"func (m *Map) Swap(key, value any) (previous any, loaded bool)\",\"写操作的流程分为两部分，如果访问的 key 存在于 read 中的话，那么就会直接获取对应的entry，然后通过 CAS 来更新entry的值，期间不需要上锁。\",\"read := m.loadReadOnly() if e, ok := read.m[key]; ok { if v, ok := e.trySwap(&value); ok { if v == nil { return nil, false } return *v, true } }\",\"在自旋的期间，如果p == expunged则代表着该 key 已经被删除了，就会直接返回。\",\"func (e *entry) trySwap(i *any) (*any, bool) { for { p := e.p.Load() if p == expunged { return nil, false } if e.p.CompareAndSwap(p, i) { return p, true } } }\",\"如果 key 不存在于 read 中，就会尝试获取锁来进行接下来的操作，接下来分三种情况。第一种情况，在获取锁的期间 dirty 晋升为了 read，如果访问到的entry是expunged，则说明它已经被删除了，且不存在于 dirty 中，这时需要将其添加到 dirty 中，然后再存储对应的值。\",\"read = m.loadReadOnly() if e, ok := read.m[key]; ok { if e.unexpungeLocked() { m.dirty[key] = e } if v := e.swapLocked(&value); v != nil { loaded = true previous = *v } }\",\"第二种情况，read 中没有，但是 dirty 中有，也是直接存储对应的值\",\"if e, ok := m.dirty[key]; ok { if v := e.swapLocked(&value); v != nil { loaded = true previous = *v } }\",\"第三种情况，read 中没有，dirty 中也没有，在这里如果read.amended为false的话，代表着 dirty 是空的，然后会使用m.dirtyLocked将 read 中所有未删除的键值对复制到 ditry 中，然后将read.amended标记为true，最后会直接新建一个 entry 来存放对应的值。\",\"else { if !read.amended { // We're adding the first new key to the dirty map. // Make sure it is allocated and mark the read-only map as incomplete. m.dirtyLocked() m.read.Store(&readOnly{m: read.m, amended: true}) } m.dirty[key] = newEntry(value) } func (m *Map) dirtyLocked() { if m.dirty != nil { return } read := m.loadReadOnly() m.dirty = make(map[any]*entry, len(read.m)) for k, e := range read.m { if !e.tryExpungeLocked() { m.dirty[k] = e } } }\"]},\"1048\":{\"h\":\"删\",\"t\":[\"删除操作对应的是LoadAndDelete方法，它的思路与读操作几乎完全一致，只是多了一个delete函数的调用。\",\"func (m *Map) LoadAndDelete(key any) (value any, loaded bool) { read := m.loadReadOnly() e, ok := read.m[key] if !ok && read.amended { m.mu.Lock() read = m.loadReadOnly() e, ok = read.m[key] if !ok && read.amended { e, ok = m.dirty[key] delete(m.dirty, key) m.missLocked() } m.mu.Unlock() } if ok { return e.delete() } return nil, false }\",\"删除键值对的时候永远只会对 ditry 执行delete操作，对应 read 而言，只会将它所存储的 entry 的值修改为nil。\",\"func (e *entry) delete() (value any, ok bool) { for { p := e.p.Load() if p == nil || p == expunged { return nil, false } if e.p.CompareAndSwap(p, nil) { return *p, true } } }\"]},\"1049\":{\"h\":\"遍历\",\"t\":[\"遍历操作对应着Range方法\",\"func (m *Map) Range(f func(key, value any) bool) { read := m.loadReadOnly() if read.amended { m.mu.Lock() read = m.loadReadOnly() if read.amended { read = readOnly{m: m.dirty} m.read.Store(&read) m.dirty = nil m.misses = 0 } m.mu.Unlock() } for k, e := range read.m { v, ok := e.load() if !ok { continue } if !f(k, v) { break } } }\",\"在遍历时只会遍历 read，如果read.amended为true，代表 read 中的 key 有缺失，这时会直接将 ditry 晋升为 read，然后通过for range循环来遍历，并对每一个键值对调用回调函数。\"]},\"1050\":{\"h\":\"性能\",\"t\":[\"sync.Map采用了读写分离的方式来进行并发控制，它更适合读多写少的场景，因为在大部分情况下访问一个键值对的时候不需要加锁。但是如果要新增一个元素的话，就需要持有一个全局锁，它会阻塞当前 map 的所有操作，这就导致了写性能的低下，所以sync.Map并不适用于所有情况，对于读少写多的情况，可以采用分段锁的方式来实现，这样可以避免阻塞全局，这里推荐一个开源实现orcaman/concurrent-map: a thread-safe concurrent map for go (github.com)，采用分片的方式实现，且支持泛型，在性能和使用体验上都会好一些。\"]},\"1051\":{\"h\":\"string\",\"t\":[\"string是 go 中一个非常常见的基础数据类型，也是我在 go 语言中接触到的第一个数据类型\",\"package main import \\\"fmt\\\" func main() { fmt.Println(\\\"hello,world!\\\") }\",\"相信这段代码大多数人在刚接触 go 时都有敲过。在builtin/builtin.go中有关于string的简单描述\",\"// string is the set of all strings of 8-bit bytes, conventionally but not // necessarily representing UTF-8-encoded text. A string may be empty, but // not nil. Values of string type are immutable. type string string\",\"从上面这段话可以得到以下几个信息\",\"string是 8 位字节的集合\",\"string类型通常是UTF-8编码\",\"string可以是空的，但不会是nil\",\"string是不可变的\",\"这几个特点对于经常使用 go 的人来说应该早就了熟于心了，那么下面就来看点不一样的。\"]},\"1052\":{\"h\":\"结构\",\"t\":[\"在 go 中，字符串在运行时由runtime.stringStruct结构体表示，不过它并不对外暴露，作为替代可以使用reflect.StringHeader。\",\"提示\",\"虽然StringHeader在版本go.1.21已经被废弃了，不过它确实很直观，下面的内容还是会使用它来进行讲述，并不影响理解，详情见Issues · golang/go (github.com)。\",\"// runtime/string.go type stringStruct struct { str unsafe.Pointer len int } // reflect/value.go type StringHeader struct { Data uintptr Len int }\",\"其中的字段释义如下\",\"Data，是一个指向字符串内存起始地址的指针\",\"Len，字符串的字节数\",\"下面是一个通过 unsafe 指针访问字符串地址的例子\",\"func main() { str := \\\"hello,world!\\\" h := *((*reflect.StringHeader)(unsafe.Pointer(&str))) for i := 0; i < h.Len; i++ { fmt.Printf(\\\"%s \\\", string(*((*byte)(unsafe.Add(unsafe.Pointer(h.Data), uintptr(i)*unsafe.Sizeof(str[0])))))) } }\",\"不过 go 现在推荐使用unsafe.StringData来代替\",\"func main() { str := \\\"hello,world!\\\" ptr := unsafe.Pointer(unsafe.StringData(str)) for i := 0; i < len(str); i++ { fmt.Printf(\\\"%s \\\", string(*((*byte)(unsafe.Add(ptr, uintptr(i)*unsafe.Sizeof(str[0])))))) } }\",\"两者输出都是一样的\",\"h e l l o , w o r l d !\",\"字符串其本质上就是一片连续的内存地址，每一个地址上都存储着一个字节，换句话说就是一个字节数组，通过len函数获取的结果是字节的数量，而非字符串中字符的数量，当字符串中的字符是非 ASCII 字符是尤其如此。\",\"string本身只占很小的内存即一个指向真实数据的指针，这样一来传递字符串的成本就会非常低。个人认为，由于只持有一个内存的引用，如果可以被随意修改的话，日后很难知道原来的指向是否还是想要的数据（要么使用反射要么使用unsafe包），除非说旧数据的使用者在使用过后永远不再需要这个字符串，另一个优点就是天生并发安全，任何人在常规情况下都无法对其进行修改。\"]},\"1053\":{\"h\":\"拼接\",\"t\":[\"字符串的拼接语法如下所示，直接使用+运算符进行拼接。\",\"var ( hello = \\\"hello\\\" dot = \\\",\\\" world = \\\"world\\\" last = \\\"!\\\" ) str := hello + dot + world + last\",\"拼接的操作在运行时由runtime.concatstrings函数完成，如果是下面这种字面量拼接，编译器会直接推断出结果。\",\"str := \\\"hello\\\" + \\\",\\\" + \\\"world\\\" + \\\"!\\\" _ = str\",\"通过输出其汇编代码就能知道结果，部分如下所示\",\"LEAQ go:string.\\\"hello,world!\\\"(SB), AX MOVQ AX, main.str(SP)\",\"很显然的是编译器直接将其视作一个完整的字符串，其值在编译期就已经确定了，并不会由runtime.concatstrings在运行时来拼接，只有拼接字符串变量才会在运行时完成，其函数签名如下，它接收一个字节数组和一个字符串切片。\",\"func concatstrings(buf *tmpBuf, a []string) string\",\"当拼接的字符串变量小于 5 时，会使用下面的函数代替（个人猜测：由参数和匿名变量传递，它们都是存在栈上，相比于运行时创建的切片更好 GC？），虽然其最后还是由concatstrings来完成拼接。\",\"func concatstring2(buf *tmpBuf, a0, a1 string) string { return concatstrings(buf, []string{a0, a1}) } func concatstring3(buf *tmpBuf, a0, a1, a2 string) string { return concatstrings(buf, []string{a0, a1, a2}) } func concatstring4(buf *tmpBuf, a0, a1, a2, a3 string) string { return concatstrings(buf, []string{a0, a1, a2, a3}) } func concatstring5(buf *tmpBuf, a0, a1, a2, a3, a4 string) string { return concatstrings(buf, []string{a0, a1, a2, a3, a4}) }\",\"下面来看看concatstrings函数里面干了些什么\",\"func concatstrings(buf *tmpBuf, a []string) string { idx := 0 l := 0 count := 0 for i, x := range a { n := len(x) // 长度为0跳过 if n == 0 { continue } // 数值计算溢出 if l+n < l { throw(\\\"string concatenation too long\\\") } l += n // 计数 count++ idx = i } // 没有字符串直接返回空串 if count == 0 { return \\\"\\\" } // 如果只有一个字符串的话，直接返回 if count == 1 && (buf != nil || !stringDataOnStack(a[idx])) { return a[idx] } // 为新字符串开辟内存 s, b := rawstringtmp(buf, l) for _, x := range a { // 复制 copy(b, x) // 截断 b = b[len(x):] } return s }\",\"首先做的事情是统计要拼接字符串的总长度和数量，然后根据总长度分配内存，rawstringtmp函数会返回一个字符串s和字节切片b，虽然其长度是确定的但它们没有任何内容，因为它们本质上是两个指向新内存地址的指针，分配内存的代码如下\",\"func rawstring(size int) (s string, b []byte) { // 没有指定类型 p := mallocgc(uintptr(size), nil, false) // 虽然分配了内存但是上面什么都没有 return unsafe.String((*byte)(p), size), unsafe.Slice((*byte)(p), size) }\",\"返回的字符串s是为了方便表示，字节切片b是为了方便修改字符串，它们两个指向的都是同一个内存地址。\",\"for _, x := range a { // 复制 copy(b, x) // 截断 b = b[len(x):] }\",\"copy函数在运行时调用的是runtime.slicecopy ，它所做的工作就是直接把src的内存直接复制到dst的地址，所有字符串都复制完毕后，整个拼接过程也就结束了。倘若复制的字符串非常大，这个过程将会相当消耗性能。\"]},\"1054\":{\"h\":\"转换\",\"t\":[\"前面提到过，字符串本身是不可以修改的，如果尝试修改连编译都没法通过，go 会如下报错\",\"str := \\\"hello\\\" + \\\",\\\" + \\\"world\\\" + \\\"!\\\" str[0] = '1'\",\"cannot assign to string (neither addressable nor a map index expression)\",\"想要修改字符串的话，就需要先将其类型转换至字节切片[]byte，使用起来很简单\",\"bs := []byte(str)\",\"其内部调用了函数runtime.stringtoslicebyte，它的逻辑还是非常简单的，代码如下\",\"func stringtoslicebyte(buf *tmpBuf, s string) []byte { var b []byte if buf != nil && len(s) <= len(buf) { *buf = tmpBuf{} b = buf[:len(s)] } else { b = rawbyteslice(len(s)) } copy(b, s) return b }\",\"如果字符串长度小于缓冲区长度的话就直接返回缓冲区的字节切片，这样在小字符串转换的时候可以节省内存。否则的话，就会开辟一片与字符串长度相当的内存，然后将字符串复制到新的内存地址中，其中函数rawbyteslice(len(s))所做的事与之前rawstring函数类似，都是分配内存。\",\"同样的，字节切片在语法上也可以很轻易的转换成字符串\",\"str := string([]byte{'h','e','l','l','o'})\",\"其内部调用的是runtime.slicebytetostring函数，也很容易理解，代码如下\",\"func slicebytetostring(buf *tmpBuf, ptr *byte, n int) string { if n == 0 { return \\\"\\\" } if n == 1 { p := unsafe.Pointer(&staticuint64s[*ptr]) if goarch.BigEndian { p = add(p, 7) } return unsafe.String((*byte)(p), 1) } var p unsafe.Pointer if buf != nil && n <= len(buf) { p = unsafe.Pointer(buf) } else { p = mallocgc(uintptr(n), nil, false) } memmove(p, unsafe.Pointer(ptr), uintptr(n)) return unsafe.String((*byte)(p), n) }\",\"首先处理切片长度为 0 和 1 的特殊情况，在这种情况不用进行内存复制。然后就是小于缓冲区长度就用缓冲区的内存，否则就开辟新内存，最后再用memmove函数把内存直接复制过去，复制过后的内存与源内存没有任何关联，所以可以随意的修改。\",\"值得注意的是，上面两种转换方法，都需要进行内存复制，如果待复制的内存非常大，性能消耗也会很大。在版本更新到go1.20时，unsafe包更新了下面几个函数。\",\"// 传入指向内存地址的类型指针和数据长度，返回其切片表达形式 func Slice(ptr *ArbitraryType, len IntegerType) []ArbitraryType // 传入一个切片，得到指向其底层数组的指针 func SliceData(slice []ArbitraryType) *ArbitraryType // 根据传入的地址和长度，返回字符串 func String(ptr *byte, len IntegerType) string // 传入一个字符串，返回其起始内存地址，不过返回的字节不能被修改 func StringData(str string) *byte\",\"尤其是String和StringData 函数，它们并不涉及内存复制，也可以完成转换，不过需要注意的是，使用它们的前提是，得确保数据是只读的，后续不会有任何修改，否则的话字符串就会发生变化，看下面的例子。\",\"func main() { bs := []byte(\\\"hello,world!\\\") s := unsafe.String((*byte)(unsafe.SliceData(bs)), len(bs)) bs[0] = 'b' fmt.Println(s) }\",\"首先通过SliceData获取字节切片的底层数组的地址，然后通过String获取其字符串表达形式，后续再直接修改字节切片，字符串同样也会发生变化，这显然违背了字符串的初衷。再来看个例子\",\"func main() { str := \\\"hello,world!\\\" bytes := unsafe.Slice(unsafe.StringData(str), len(str)) fmt.Println(bytes) // fatal bytes[0] = 'b' fmt.Println(str) }\",\"获取了字符串其切片表达形式后，如果尝试修改字节切片，就会直接fatal，下面换个声明字符串的方式看看有什么区别。\",\"func main() { var str string fmt.Scanln(&str) bytes := unsafe.Slice(unsafe.StringData(str), len(str)) fmt.Println(bytes) bytes[0] = 'b' fmt.Println(str) }\",\"hello,world! [104 101 108 108 111 44 119 111 114 108 100 33] bello,world!\",\"从结果可以看出来，确实修改成功了。之前所以fatal，在于变量str存储的是字符串字面量，字符串字面量都存储在只读数据段，而非堆栈，从根本上就断绝了字面量声明的字符串后续会被修改的可能性，对于一个普通的字符串变量而言，本质上来说它确实可以被修改，但是这种写法编译器不允许。总之，使用unsafe函数来操作字符串转换并不安全，除非能保证永远不会对数据进行修改。\"]},\"1055\":{\"h\":\"遍历\",\"t\":[\"s := \\\"hello world!\\\" for i, r := range s { fmt.Println(i, r) }\",\"为了处理多字节字符的情况，遍历字符串一般会使用for range循环。当使用for range遍历字符串时，编译器会在编译期间展开成如下形式的代码\",\"ha := s for hv1 := 0; hv1 < len(ha); { hv1t := hv1 hv2 := rune(ha[hv1]) // 判断是否是单字节字符 if hv2 < utf8.RuneSelf { hv1++ } else { hv2, hv1 = decoderune(ha, hv1) } i, r = hv1t, hv2 // 循环体 }\",\"在展开的代码中，for range循环会替换成经典的for循环，在循环中，会判断当前字节是否是单字节字符，如果是多字节字符的话会调用运行时函数runtime.decoderune来获取其完整编码，然后再赋值给i,r，处理完过后就到了源代码中定义的循环体执行。\",\"负责构造中间代码的工作由cmd/compile/internal/walk/range.go中的walkRange函数来完成，同时它也负责处理所有能被for range遍历的类型，这里就不展开了，感兴趣的可以自己去了解。\"]},\"1056\":{\"h\":\"chan\",\"t\":[\"channel 是一个特殊的数据结构，是 go 语言贯彻 CSP 思想的典型代表，CSP 思想的核心就是进程之间通过消息通信来进行数据的交换，对应的，通过 channel 我们可以很轻松地在协程之间通信。\",\"import \\\"fmt\\\" func main() { done := make(chan struct{}) go func() { // do something done <- struct{}{} }() <-done fmt.Println(\\\"finished\\\") }\",\"除了通信之外，通过 channel 也还可以实现协程同步之类的操作，而在需要并发的系统中，channel 的身影几乎随处可见，为了能够更好的理解 channel 工作方式，下面就会介绍其原理。\"]},\"1057\":{\"h\":\"结构\",\"t\":[\"channel 在运行时对于的表示是runtime.hchan结构体，它所包含的字段并不多，如下\",\"type hchan struct { qcount uint // total data in the queue dataqsiz uint // size of the circular queue buf unsafe.Pointer // points to an array of dataqsiz elements elemsize uint16 closed uint32 elemtype *_type // element type sendx uint // send index recvx uint // receive index recvq waitq // list of recv waiters sendq waitq // list of send waiters lock mutex }\",\"从上面可以很明显的看到lock字段，channel 实际上是一个有锁的同步环形队列，其它的字段介绍如下\",\"qcount，表示总数据数\",\"dataqsize，环形队列的大小\",\"buf，指向大小为dataqsize的数组的指针，也就是环形队列\",\"closed，channel 是否关闭\",\"sendx，recvx，表示发送和接收的索引\",\"sendq，recvq，表示发送和接收的协程链表，其组成元素是runtime.sudog\",\"type waitq struct { first *sudog last *sudog }\",\"通过下面一张图可以很清晰的明白 channel 的结构\",\"当对 channel 使用len和cap函数时，返回的实际上是它的hchan.qcoun和hchan.dataqsiz字段。\"]},\"1058\":{\"h\":\"创建\",\"t\":[\"正常来说创建管道有且只有一种方式，使用make函数创建\",\"ch := make(chan int, size)\",\"编译器会将其翻译成对runtime.makechan函数的调用，由它来负责管道的实际创建，它的代码如下所示。\",\"func makechan(t *chantype, size int) *hchan { elem := t.Elem mem, overflow := math.MulUintptr(elem.Size_, uintptr(size)) var c *hchan switch { case mem == 0: c = (*hchan)(mallocgc(hchanSize, nil, true)) c.buf = c.raceaddr() case elem.PtrBytes == 0: c = (*hchan)(mallocgc(hchanSize+mem, nil, true)) c.buf = add(unsafe.Pointer(c), hchanSize) default: c = new(hchan) c.buf = mallocgc(mem, elem, true) } c.elemsize = uint16(elem.Size_) c.elemtype = elem c.dataqsiz = uint(size) return c }\",\"这部分逻辑比较简单，主要是在给管道分配内存，它首先会根据传入的size和元素类型elem.size来计算预计需要的内存大小，然后分为三种情况来处理\",\"size为 0，只分配hchanSize\",\"元素不包含指针，则分配对应内存大小的空间，并且环形队列的内存与管道的内存是连续的\",\"元素包含指针，管道和环形队列的内存单独分配\",\"如果环形队列中存放的是指针元素的话，因为它们引用了外部的元素，GC 在标记-清除阶段就可能会扫描这些指针，当存放的是非指针元素时分配在连续的内存上就避免了不必要的扫描。内存分配完毕后，最后再更新其它的一些记录信息的字段。\",\"顺便提一下，当管道容量是 64 位整数的时候，会使用runtime.makechan64函数来进行创建，它本质上也是对runtime.makechan的调用，只是多做了一个类型检查。\",\"func makechan64(t *chantype, size int64) *hchan { if int64(int(size)) != size { panic(plainError(\\\"makechan: size out of range\\\")) } return makechan(t, int(size)) }\",\"一般来说size都最好不要超过math.MaxInt32。\"]},\"1059\":{\"h\":\"发送\",\"t\":[\"向管道发送数据时，我们会将要发送的数据置于箭头的右方\",\"ch <- struct{}{}\",\"编译器会将其翻译成runtime.chansend1，真正负责发送数据的是runtime.chansend函数，chansend1会向其传递elem指针，它指向发送元素的指针。\",\"// entry point for c <- x from compiled code. func chansend1(c *hchan, elem unsafe.Pointer) { chansend(c, elem, true, getcallerpc()) }\",\"它首先会检查管道是否为nil，block表示当前的发送操作是否是阻塞的（block的值与select结构有关），如果阻塞发送且管道是nil则直接崩溃。在非阻塞发送情况下，会在不加锁的情况下直接判断管道是否满了，如果满了就直接返回。\",\"func chansend(c *hchan, ep unsafe.Pointer, block bool, callerpc uintptr) bool { if c == nil { if !block { return false } gopark(nil, nil, waitReasonChanSendNilChan, traceBlockForever, 2) throw(\\\"unreachable\\\") } if !block && c.closed == 0 && full(c) { return false } ... }\",\"随后才开始加锁，并检测管道是否关闭，如果已经关闭了就会panic\",\"func chansend(c *hchan, ep unsafe.Pointer, block bool, callerpc uintptr) bool { lock(&c.lock) if c.closed != 0 { unlock(&c.lock) panic(plainError(\\\"send on closed channel\\\")) } ... }\",\"再之后从recvq队列中出队一个sudog，然后由runtime.send函数进行发送。\",\"if sg := c.recvq.dequeue(); sg != nil { send(c, sg, ep, func() { unlock(&c.lock) }, 3) return true }\",\"send函数内容如下，它会更新recvx和sendx，然后使用runtime.memmove函数将通信数据的内存直接复制到接收方协程的目标元素地址上，然后通过runtime.goready函数使接收方协程变为_Grunnable状态，以便重新参与调度。\",\"func send(c *hchan, sg *sudog, ep unsafe.Pointer, unlockf func(), skip int) { c.recvx++ if c.recvx == c.dataqsiz { c.recvx = 0 } c.sendx = c.recvx // c.sendx = (c.sendx+1) % c.dataqsiz if sg.elem != nil { sendDirect(c.elemtype, sg, ep) sg.elem = nil } gp := sg.g unlockf() gp.param = unsafe.Pointer(sg) sg.success = true goready(gp, skip+1) } func sendDirect(t *_type, sg *sudog, src unsafe.Pointer) { dst := sg.elem memmove(dst, src, t.Size_) }\",\"在上面的这个过程中，因为可以找到等待接收的协程，所以数据就直接发送给了接收方，并没有存放在环形队列中，倘若没有可用的接受方协程且容量足够，就会将其放入环形队列缓冲区中，然后直接返回。\",\"func chansend(c *hchan, ep unsafe.Pointer, block bool, callerpc uintptr) bool { ... if c.qcount < c.dataqsiz { qp := chanbuf(c, c.sendx) typedmemmove(c.elemtype, qp, ep) c.sendx++ if c.sendx == c.dataqsiz { c.sendx = 0 } c.qcount++ unlock(&c.lock) return true } ... }\",\"倘若缓冲区满了，如果是在非阻塞发送的情况下就会直接返回\",\"if !block { unlock(&c.lock) return false }\",\"如果是阻塞发送，则会进入下面的代码流程\",\"func chansend(c *hchan, ep unsafe.Pointer, block bool, callerpc uintptr) bool { ... gp := getg() mysg := acquireSudog() mysg.releasetime = 0 mysg.elem = ep mysg.waitlink = nil mysg.g = gp mysg.isSelect = false mysg.c = c gp.waiting = mysg gp.param = nil c.sendq.enqueue(mysg) gp.parkingOnChan.Store(true) gopark(chanparkcommit, unsafe.Pointer(&c.lock), waitReasonChanSend, traceBlockChanSend, 2) KeepAlive(ep) ... }\",\"首先它会将当前的协程构造成sudog并加入hchan.sendq等待发送协程队列，然后由runtime.gopark使当前协程阻塞，变为_Gwaitting状态直到再次被接收方唤醒，并且在会通过runtime.KeepLAlive对要发送的数据进行保活来确保接收方成功复制。当被唤醒后就会进入接下来的收尾流程\",\"func chansend(c *hchan, ep unsafe.Pointer, block bool, callerpc uintptr) bool { ... gp.waiting = nil gp.activeStackChans = false closed := !mysg.success gp.param = nil mysg.c = nil if closed { if c.closed == 0 { throw(\\\"chansend: spurious wakeup\\\") } panic(plainError(\\\"send on closed channel\\\")) } releaseSudog(mysg) return true }\",\"可以看到的是对于管道发送数据而言总共有下面几种情况\",\"管道为nil，程序崩溃\",\"管道已关闭，发生panic\",\"revq队列不为空，直接发送给接收方\",\"没有协程等待，加入缓冲区\",\"缓冲区满了，发送协程进入阻塞状态，等待其它协程接收数据\",\"值得注意的是，在上面发送的逻辑中没有看到对于缓冲区溢出数据的处理，这部分数据不可能抛弃掉，它保存在了sudog.elem，由接收方来进行处理。\"]},\"1060\":{\"h\":\"接收\",\"t\":[\"在 go 中从管道接收数据的语法有两种，第一种是只读取数据\",\"data <- ch\",\"第二种是判断数据是否读取成功\",\"data, ok <- ch\",\"上面两种语法会被编译器翻译成对runtime.chanrecv1和runtime.chanrecv1的调用，不过它们实际上只是对runtime.chanrecv的调用。接收的逻辑开头部分与发送的逻辑类似，都会先对管道判空。\",\"func chanrecv(c *hchan, ep unsafe.Pointer, block bool) (selected, received bool) { if c == nil { if !block { return } gopark(nil, nil, waitReasonChanReceiveNilChan, traceBlockForever, 2) throw(\\\"unreachable\\\") } ... }\",\"然后在非阻塞读取情况下，不加锁判断管道是否为空，如果管道未关闭就直接返回，管道已关闭则清空接收元素的内存。\",\"func chanrecv(c *hchan, ep unsafe.Pointer, block bool) (selected, received bool) { ... if !block && empty(c) { if atomic.Load(&c.closed) == 0 { return } if empty(c) { if ep != nil { typedmemclr(c.elemtype, ep) } return true, false } } ... }\",\"然后加锁访问hchan.sendq队列，通过下面if c.closed != 0这个分支可以看到，即便管道已经关闭了，但如果管道中还有元素存在，并不会直接返回，依然会往下执行消费元素的代码，这也是为什么管道关闭后仍然允许读取的原因。\",\"func chanrecv(c *hchan, ep unsafe.Pointer, block bool) (selected, received bool) { ... if c.closed != 0 { if c.qcount == 0 { unlock(&c.lock) if ep != nil { typedmemclr(c.elemtype, ep) } return true, false } } else { if sg := c.sendq.dequeue(); sg != nil { recv(c, sg, ep, func() { unlock(&c.lock) }, 3) return true, true } } ... }\",\"如果管道没有关闭，就会查看sendq队列是否有协程正在等待发送，是的话就由runitme.recv来处理该发送方协程。\",\"func recv(c *hchan, sg *sudog, ep unsafe.Pointer, unlockf func(), skip int) { if c.dataqsiz == 0 { if ep != nil { recvDirect(c.elemtype, sg, ep) } } else { qp := chanbuf(c, c.recvx) // copy data from queue to receiver if ep != nil { typedmemmove(c.elemtype, ep, qp) } // copy data from sender to queue typedmemmove(c.elemtype, qp, sg.elem) c.recvx++ if c.recvx == c.dataqsiz { c.recvx = 0 } c.sendx = c.recvx // c.sendx = (c.sendx+1) % c.dataqsiz } sg.elem = nil gp := sg.g unlockf() gp.param = unsafe.Pointer(sg) sg.success = true goready(gp, skip+1) }\",\"第一种情况，管道容量为 0 即无缓冲管道，接收方会直接通过runtime.recvDirect函数从发送方复制数据，第二种情况缓冲区已满，虽然在前面并没有看到判断缓冲区是否满了的逻辑，但实际上当缓冲区容量不为 0 且有发送方等待发送就已经代表了缓冲区已经满了，因为只有缓冲区满了发送方才会阻塞等待发送，这部分逻辑是由发送方来进行判断的。然后接收方会从缓冲区将头部元素出队并将其内存复制到目标接收元素的指针，再将发送方协程要发送的数据复制后并入队（在这里我们就看到了接收方对于溢出缓冲区数据的处理方式），最后会由runtime.goready去唤醒发送方协程，使其变为_Grunnable状态，以便重新加入调度。\",\"倘若没有等待发送的协程，就会去查看缓冲区是否有等待消费的元素，将头部元素出队并复制其内存到接收方目标元素，然后返回。\",\"func chanrecv(c *hchan, ep unsafe.Pointer, block bool) (selected, received bool) { ... if c.qcount > 0 { // Receive directly from queue qp := chanbuf(c, c.recvx) if ep != nil { typedmemmove(c.elemtype, ep, qp) } typedmemclr(c.elemtype, qp) c.recvx++ if c.recvx == c.dataqsiz { c.recvx = 0 } c.qcount-- unlock(&c.lock) return true, true } ... }\",\"到最后如果没有管道中没有可消费的元素，就会由runtime.gopark将当前协程变为_Gwwaiting状态，阻塞等待直到被发送方协程唤醒。\",\"func chanrecv(c *hchan, ep unsafe.Pointer, block bool) (selected, received bool) { ... gp := getg() mysg := acquireSudog() mysg.elem = ep mysg.waitlink = nil gp.waiting = mysg mysg.g = gp mysg.isSelect = false mysg.c = c gp.param = nil c.recvq.enqueue(mysg) gp.parkingOnChan.Store(true) gopark(chanparkcommit, unsafe.Pointer(&c.lock), waitReasonChanReceive, traceBlockChanRecv, 2) ... }\",\"被唤醒后，就会返回，此时返回的success值来自sudog.success，如果发送方成功发送数据那么该字段应该由发送方设置为true，这部分逻辑我们可以在runtime.send函数中看到。\",\"func send(c *hchan, sg *sudog, ep unsafe.Pointer, unlockf func(), skip int) { ... sg.success = true goready(gp, skip+1) } func chanrecv(c *hchan, ep unsafe.Pointer, block bool) (selected, received bool) { ... gp.waiting = nil gp.activeStackChans = false success := mysg.success gp.param = nil mysg.c = nil releaseSudog(mysg) return true, success }\",\"相对应的，在发送方runtime.chansend末尾对于sudog.success判断，其来源也是接收方在runtime.recv函数中的设置，通过这些可以发现接收方和发送方两者相辅相成才能让管道正常运作。总的来说，接收数据要比发送数据稍微复杂一些，总共有以下几种情况\",\"管道为nil，程序崩溃\",\"管道已关闭，如果管道是空的就直接返回，如果不为空则跳到第 5 个情况执行\",\"缓冲区容量为 0，sendq中有等待发送的协程，则直接复制发送方的数据，然后唤醒发送方。\",\"缓冲区满了，sendq中有等待发送的协程，将缓冲区头部元素出队，发送方的数据入队，然后唤醒发送方。\",\"缓冲区没满且数量不为 0，将缓冲区头部元素出队，然后返回。\",\"缓冲区是空的，进入阻塞状态，等待被发送方唤醒。\"]},\"1061\":{\"h\":\"关闭\",\"t\":[\"对于关闭管道而言，我们会使用内置函数close\",\"close(ch)\",\"编译器会将其翻译成对runtime.closechan的调用，如果传递的管道为nil或者已关闭，则会直接panic\",\"func closechan(c *hchan) { if c == nil { panic(plainError(\\\"close of nil channel\\\")) } lock(&c.lock) if c.closed != 0 { unlock(&c.lock) panic(plainError(\\\"close of closed channel\\\")) } c.closed = 1 ... }\",\"然后将这个管道的sendq和recvq中的所有阻塞的协程都出队并将它们全部都通过runtime.goready唤醒\",\"func closechan(c *hchan) { ... var glist gList // release all readers for { sg := c.recvq.dequeue() gp := sg.g sg.success = false glist.push(gp) } // release all writers (they will panic) for { sg := c.sendq.dequeue() gp := sg.g sg.success = false glist.push(gp) } // Ready all Gs now that we've dropped the channel lock. for !glist.empty() { gp := glist.pop() gp.schedlink = 0 goready(gp, 3) } }\",\"提示\",\"顺带一提，go 允许单向管道，有着下面几个规则\",\"只读管道不能发送数据\",\"只读管道不能关闭\",\"只写管道不能读取数据\",\"这些错误早在编译期的类型检查阶段就会找出来，不会留到运行时，感兴趣可以到下面这两个包阅读相关代码\",\"cmd/compile/internal/types2\",\"cmd/compile/internal/typecheck\",\"// cmd/compile/internal/types2/stmt.go: 425 case *syntax.SendStmt: ... if uch.dir == RecvOnly { check.errorf(s, InvalidSend, invalidOp+\\\"cannot send to receive-only channel %s\\\", &ch) return } check.assignment(&val, uch.elem, \\\"send\\\")\"]},\"1062\":{\"h\":\"判断关闭\",\"t\":[\"在很早的时候（go1 之前），有一个内置函数closed用于判断管道是否关闭，不过后面很快就被删掉了。这是因为管道的使用场景通常都是多协程的情况，假设它返回true确实可以代表管道已经关闭了，但是如果它返回了false，那么并不能代表管道就真的没有关闭，因为谁也不知道在下一刻谁会把管道关闭掉，所以这个返回值是不可信的，如果以这个返回值为依据来判断是否向管道发送数据就更是危险了，因为向已关闭的管道发送数据会发生panic。\",\"如果实在需要，可以自己实现一个。一种方案是通过写管道来判断管道是关闭，代码如下\",\"func closed(ch chan int) (ans bool) { defer func() { if err := recover(); err != nil { ans = true } }() ch <- 0 return ans }\",\"不过这样也是有副作用的，如果没关闭的话就会向里面写入冗余的数据，而且会进入 defer-recover 处理过程，造成额外的性能损失，所以写方案可以直接放弃。读方案的话可以考虑，不过不能直接读管道，因为直接读block参数值为true将会阻塞协程，应该结合select来使用，管道与select结合时就是非阻塞的。\",\"func closed(ch chan int) bool { select { case _, received := <-ch: return !received default: return false } }\",\"这种只是看起来要比上面好一点点，它的情况仅仅适用于管道已关闭且管道缓冲区中没有元素，如果有元素的话还会平白无故的消费掉这个元素，还是没有一个很好的实现。\",\"但其实我们根本就不需要判断管道是否关闭，理由在开头已经讲过了因为返回值并不可信，正确地使用管道并正确的关闭才是我们应该做的，所以\",\"永远不要在接收方关闭管道，关闭只读管道不能通过编译这点已经很明确地告诉你不要这么做了，交给发送方来做这件事。\",\"如果有多个发送方，应该单独让一个协程来完成关闭操作，确保close只有一方调用且只会调用一次。\",\"传递管道时，最好限制只读或只写\",\"遵循这几个原则，就能确保不会出太大的问题。\"]},\"1063\":{\"h\":\"select\",\"t\":[\"select 是一种可以同时监听多个管道状态的结构，它的语法跟 switch 类似\",\"import ( \\\"context\\\" \\\"log/slog\\\" \\\"os\\\" \\\"os/signal\\\" \\\"time\\\" ) func main() { finished := make(chan struct{}) ctx, stop := signal.NotifyContext(context.Background(), os.Kill, os.Interrupt) defer stop() slog.Info(\\\"running\\\") go func() { time.Sleep(time.Second * 2) finished <- struct{}{} }() select { case <-ctx.Done(): slog.Info(\\\"shutting down\\\") case <-finished: slog.Info(\\\"finished\\\") } }\",\"这段代码通过将 context，管道，select 三者结合使用实现了一个简单的程序平滑退出的逻辑，代码中 select 同时监听着ctx.Done和finished两个管道，它退出的条件有两个，一是操作系统发送退出信号，二是finished管道有消息可以读取即用户代码任务完成，这样我们就可以在程序退出时做收尾工作。\",\"众所周知，select 有两个非常重要的特性，一是非阻塞，在管道的发送与接收的源代码中可以看到对于 select 做了一些处理，可以在非阻塞的情况下判断管道是否可用，二是随机化，如果有多个管道可用的话它会随机选一个来执行，不遵守既定的顺序可以让每个管道都相对公平地得到执行，否则在极端情况下一些管道可能永远也不会被处理。因为它的工作全部都跟管道有关，所以先建议阅读chan这篇文章，了解了管道后再来了解 select 会畅通很多。\"]},\"1064\":{\"h\":\"结构\",\"t\":[\"运行时只有一个runtime.scase结构体表示 select 的分支，每一个case的运行时表示就是scase。\",\"type scase struct { c *hchan // chan elem unsafe.Pointer // data element }\",\"其中的c指的是管道，elem表示接收或发送元素的指针，实际上 select 关键字指的是runtime.selectgo函数。\"]},\"1065\":{\"h\":\"原理\",\"t\":[\"select 的使用方式被 go 分成了四种情况来进行优化，这一点可以在cmd/compile/internal/walk.walkSelectCases函数中看到对于这四种情况的处理逻辑。\",\"func walkSelectCases(cases []*ir.CommClause) []ir.Node { ncas := len(cases) sellineno := base.Pos // optimization: zero-case select if ncas == 0 { return []ir.Node{mkcallstmt(\\\"block\\\")} } // optimization: one-case select: single op. if ncas == 1 { ... } // optimization: two-case select but one is default: single non-blocking op. if ncas == 2 && dflt != nil { ... } ... return init }\"]},\"1066\":{\"h\":\"优化\",\"t\":[\"编译器会对前三种情况进行优化，第一种情况是 case 数量为 0 时即一个空的 select，我们都知道空的 select 语句会造成当前协程永久阻塞。\",\"select{}\",\"之所以会阻塞是因为编译器将其翻译成了对runtime.block函数的直接调用\",\"func block() { gopark(nil, nil, waitReasonSelectNoCases, traceBlockForever, 1) // forever }\",\"而block函数又调用了runtime.gopark函数，使得当前协程变为_Gwaitting状态，并进入永久阻塞，再也不会得到调度。\",\"第二种情况，只有一个 case 且不是 default，这种情况编译器会直接将其翻译成对管道的收发操作，并且还是阻塞式的，例如下面的这种代码\",\"func main() { ch := make(chan int) select { case <-ch: // do something } }\",\"它会被翻译成对runtime.chanrecv1函数的直接调用，从汇编代码中就可以看出来\",\"TEXT main.main(SB), ABIInternal, $2 ... LEAQ type:chan int(SB), AX XORL BX, BX PCDATA $1, $0 CALL runtime.makechan(SB) XORL BX, BX NOP CALL runtime.chanrecv1(SB) ADDQ $16, SP POPQ BP ...\",\"在只有一个 case 的情况下对管道进行发送数据也是同样的道理，它会被翻译成对runtime.chansend1函数的直接调用，同样也是阻塞式的。\",\"第三种情况，有两个 case 且其中一个是 default\",\"func main() { ch := make(chan int) select { case ch <- 1: // do something default: // do something } }\",\"这种情况会将其翻译成一个对runtime.selectnbsend调用的if语句，如下\",\"if selectnbsend(ch, 1) { // do something } else { // do something }\",\"如果是接收管道数据就会翻译成对runtime.selectnbrecv的调用\",\"ch := make(chan int) select { case x, ok := <-ch: // do something default: // do something }\",\"if selected, ok = selectnbrecv(&v, c); selected { // do something } else { // do something }\",\"指的是注意的是，这种情况下对管道的接收或发送是非阻塞式的，我们可以很明显的看到其中的blcok参数为false。\",\"func selectnbsend(c *hchan, elem unsafe.Pointer) (selected bool) { return chansend(c, elem, false, getcallerpc()) } func selectnbrecv(elem unsafe.Pointer, c *hchan) (selected, received bool) { return chanrecv(c, elem, false) }\",\"而不论是对管道发送或接收数据，在blcok为false时都有一个快速路径可以在不加锁的情况下判断是否可以发送或接收数据，正如下所示\",\"func chanrecv(c *hchan, ep unsafe.Pointer, block bool) (selected, received bool) { if !block && empty(c) { if atomic.Load(&c.closed) == 0 { return } return true, false } ... } func chansend(c *hchan, ep unsafe.Pointer, block bool, callerpc uintptr) bool { if !block && c.closed == 0 && full(c) { return false } ... }\",\"对于读取管道时，如果管道是空的就会直接返回，对于写管道时，如果管道未关闭且已经满了也会直接返回，在一般情况下它们是会造成协程阻塞的，但是与 select 结合使用就不会。\"]},\"1067\":{\"h\":\"处理\",\"t\":[\"上面三种只是对特殊情况的优化，正常使用的 select 关键字会被翻译成对runtime.selectgo函数的调用，它的处理逻辑长达 400 多行。\",\"func selectgo(cas0 *scase, order0 *uint16, pc0 *uintptr, nsends, nrecvs int, block bool) (int, bool)\",\"编译器会将所有的 case 语句收集一个scase数组，然后传递给selectgo函数，处理完成后返回两个返回值\",\"第一个是随机选取的管道下标，表示哪一个管道被处理了，没有的话返回-1\",\"第二个表示对于读管道操作而言是否成功读取\",\"这里简单解释下其参数\",\"cas0，scase数组的头部指针，前半部分存放的是写管道 case，后半部分存放的读管道 case，以nsends来区分\",\"order0，它的长度是scase数组的两倍，前半部分分配给pollorder数组，后半部分分配给lockorder数组\",\"nsends和nrecvs表示读/写管道 case 的数量，两者之和就是 case 的总数\",\"block表示是否阻塞，如果有defaultcase 就代表非阻塞，其值为true，否则为true。\",\"pc0，指向一个[ncases]uintptr的数组头部，用于竞态分析，后面可以忽略它，对于理解 select 而言没什么帮助\",\"假设有下面的代码\",\"func main() { ch := make(chan int) select { case ch <- 1: println(1) case ch <- 2: println(2) case ch <- 3: println(3) case ch <- 4: println(4) default: println(\\\"default\\\") } }\",\"查看其汇编形式，这里为了方便理解省去了部分代码\",\"0x0000 00000 TEXT main.main(SB), ABIInterna ... 0x0023 00035 CALL runtime.makechan(SB) 0x0028 00040 MOVQ $1, main..autotmp_2+72(SP) // 1 2 3 4几个临时变量 0x0031 00049 MOVQ $2, main..autotmp_4+64(SP) 0x003a 00058 MOVQ $3, main..autotmp_6+56(SP) 0x0043 00067 MOVQ $4, main..autotmp_8+48(SP) ... 0x00c8 00200 CALL runtime.selectgo(SB) // 调用runtime.selectgo函数 0x00cd 00205 TESTQ AX, AX 0x00d0 00208 JLT 352 // 跳转到default分支 0x00d6 00214 PCDATA $1, $-1 0x00d6 00214 JEQ 320 // 跳转到分支4 0x00d8 00216 CMPQ AX, $1 0x00dc 00220 JEQ 288 // 跳转到分支3 0x00de 00222 NOP 0x00e0 00224 CMPQ AX, $2 0x00e4 00228 JNE 258 // 跳转到分支2 0x00e6 00230 PCDATA $1, $0 0x00e6 00230 CALL runtime.printlock(SB) 0x00eb 00235 MOVL $3, AX 0x00f0 00240 CALL runtime.printint(SB) 0x00f5 00245 CALL runtime.printnl(SB) 0x00fa 00250 CALL runtime.printunlock(SB) 0x00ff 00255 NOP 0x0100 00256 JMP 379 0x0102 00258 CALL runtime.printlock(SB) 0x0107 00263 MOVL $4, AX 0x010c 00268 CALL runtime.printint(SB) 0x0111 00273 CALL runtime.printnl(SB) 0x0116 00278 CALL runtime.printunlock(SB) 0x011b 00283 JMP 379 0x011d 00285 NOP 0x0120 00288 CALL runtime.printlock(SB) 0x0125 00293 MOVL $2, AX 0x012a 00298 CALL runtime.printint(SB) 0x012f 00303 CALL runtime.printnl(SB) 0x0134 00308 CALL runtime.printunlock(SB) 0x0139 00313 JMP 379 0x013b 00315 NOP 0x0140 00320 CALL runtime.printlock(SB) 0x0145 00325 MOVL $1, AX 0x014a 00330 CALL runtime.printint(SB) 0x014f 00335 CALL runtime.printnl(SB) 0x0154 00340 CALL runtime.printunlock(SB) 0x0159 00345 JMP 379 0x015b 00347 NOP 0x0160 00352 CALL runtime.printlock(SB) 0x0165 00357 LEAQ go:string.\\\"default\\\\n\\\"(SB) 0x016c 00364 MOVL $8, BX 0x0171 00369 CALL runtime.printstring(SB) 0x0176 00374 CALL runtime.printunlock(SB) 0x017b 00379 PCDATA $1, $-1 0x017b 00379 ADDQ $160, SP 0x0182 00386 POPQ BP 0x0183 00387 RET\",\"可以看到在调用selectgo函数后是有一个判断+跳转逻辑存在的，通过这些我们不难反推出其原来的样子\",\"casei, ok := runtime.selectgo() if casei == -1 { println(\\\"default\\\") } else if casei == 3 { println(4) } else if casei == 2 { println(3) } else if casei == 1 { println(2) } else { println(1) }\",\"编译器生成的实际代码可能和这个有出入，但大致意思是差不多的。所以编译器会在调用完selectgo函数后同时使用if语句来判断轮到哪一个管道被执行，并且在调用之前，编译器还会生成一个 for 循环来收集scase数组不过这里省略掉了。\",\"在知晓了外部是如何使用selectgo函数以后，下面就来了解selectgo函数内部是如何工作的。它首先会初始化几个数组，nsends+nrecvs表示 case 的总数，从下面的代码也可以看出 case 数量的最大值也就是1 << 16，pollorder决定了管道的执行顺序，lockorder决定了管道的锁定顺序。\",\"cas1 := (*[1 << 16]scase)(unsafe.Pointer(cas0)) // 它的长度是scase数组的两倍，前半部分分配给pollorder数组，后半部分分配给lockorder数组。 order1 := (*[1 << 17]uint16)(unsafe.Pointer(order0)) ncases := nsends + nrecvs scases := cas1[:ncases:ncases] pollorder := order1[:ncases:ncases] lockorder := order1[ncases:][:ncases:ncases]\",\"接下来初始化pollorder数组，它存放的是待执行管道的sacses数组下标\",\"norder := 0 for i := range scases { cas := &scases[i] // Omit cases without channels from the poll and lock orders. if cas.c == nil { cas.elem = nil // allow GC continue } j := fastrandn(uint32(norder + 1)) pollorder[norder] = pollorder[j] pollorder[j] = uint16(i) norder++ } pollorder = pollorder[:norder] lockorder = lockorder[:norder]\",\"它会遍历整个scases数组，然后通过runtime.fastrandn生成[0, i]之间的随机数，再将它与i交换，过程中会跳过管道为nil的 case，遍历完成后就得到了一个元素被打乱了的pollorder数组，如下图所示\",\"然后对pollorder数组根据管道的地址大小使用堆排序就得到了lockorder数组，再调用runtime.sellock按照顺序将其上锁\",\"func sellock(scases []scase, lockorder []uint16) { var c *hchan for _, o := range lockorder { c0 := scases[o].c if c0 != c { c = c0 lock(&c.lock) } } }\",\"这里值得注意的是，对管道按照地址大小排序是为了避免死锁，因为 select 操作本身不需要锁允许并发。假设按照pollorder随机顺序加锁，那么考虑下面代码的情况\",\"ch1 := make(chan int) ch2 := make(chan int) ch3 := make(chan int) ch4 := make(chan int) poll := func() { select { case ch1 <- 1: println(1) case ch2 <- 2: println(2) case ch3 <- 3: println(3) case ch4 <- 4: println(4) default: println(\\\"default\\\") } } // A go poll() // B go poll() // C go poll()\",\"三个协程 ABC 都走到了加锁这一步骤，并且它们彼此加锁顺序都是随机的互不相同，有可能造成这样一种情况，如下图所示\",\"假设 ABC 加锁顺序跟上图一样，那么造成死锁的可能性就非常大，比如 A 会先持有ch2的锁，然后去尝试获取ch1的锁，但假设ch1已经被协程 B 锁住了，协程 B 又会去尝试获取ch2的锁，那么这样就造成了死锁。\",\"如果所有协程都按照同样的顺序加锁，就不会发送死锁问题，这也是lockorder要按照地址大小来进行排序的根本原因。\",\"上完锁之后，就开始了真正的处理阶段，首先遍历pollorder数组，按照之前打乱的顺序访问管道，逐个遍历找到一个可用的管道\",\"for _, casei := range pollorder { casi = int(casei) cas = &scases[casi] c = cas.c if casi >= nsends { // 读管道 sg = c.sendq.dequeue() if sg != nil { goto recv } if c.qcount > 0 { goto bufrecv } if c.closed != 0 { goto rclose } } else { // 写管道 if c.closed != 0 { goto sclose } sg = c.recvq.dequeue() if sg != nil { goto send } if c.qcount < c.dataqsiz { goto bufsend } } }\",\"可以看到这里对读/写管道做了 6 种情况的处理，下面分别进行讲解。第一种情况，读取管道且有发送方正在等待发送，这里会走到runtime.recv函数，其作用已经讲过了，它最终会唤醒发送方协程，再唤醒之前回调函数会将全部管道解锁。\",\"recv: // can receive from sleeping sender (sg) recv(c, sg, cas.elem, func() { selunlock(scases, lockorder) }, 2) recvOK = true goto retc\",\"第二种情况，读取管道，没有发送方正在等待，缓冲区元素数量大于 0，这里会直接从缓冲区中读取数据，其逻辑跟runtime.chanrecv中完全一致，然后解锁。\",\"bufrecv: recvOK = true qp = chanbuf(c, c.recvx) if cas.elem != nil { typedmemmove(c.elemtype, cas.elem, qp) } typedmemclr(c.elemtype, qp) c.recvx++ if c.recvx == c.dataqsiz { c.recvx = 0 } c.qcount-- selunlock(scases, lockorder) goto retc\",\"第三种情况，读取管道，但管道已经关闭了，且缓冲区中没有剩余元素，这里会先解锁然后直接返回。\",\"rclose: selunlock(scases, lockorder) recvOK = false if cas.elem != nil { typedmemclr(c.elemtype, cas.elem) } goto retc\",\"第四种情况，向已关闭的管道发送数据，这里会先解锁然后panic，\",\"sclose: selunlock(scases, lockorder) panic(plainError(\\\"send on closed channel\\\"))\",\"第五种情况，有接收方正在阻塞等待，这里会调用runitme.send函数，并最终唤醒接收方协程，在唤醒之前回调函数会将全部管道解锁。\",\"send: send(c, sg, cas.elem, func() { selunlock(scases, lockorder) }, 2) goto retc\",\"第六种情况，没有接收方协程等待，将要发送的数据放入缓冲区，然后解锁。\",\"bufsend: typedmemmove(c.elemtype, chanbuf(c, c.sendx), cas.elem) c.sendx++ if c.sendx == c.dataqsiz { c.sendx = 0 } c.qcount++ selunlock(scases, lockorder) goto retc\",\"然后上面所有情况最后都会走入retc这个分支，而它要做的只有返回选中的管道下标casi以及代表着是否读取成功的recvOk。\",\"retc: return casi, recvOK\",\"第七种情况，没有找到可用的管道，且代码中包含default 分支，则解锁管道然后直接返回，这里返回的casi为-1 即表示没有可用的管道。\",\"if !block { selunlock(scases, lockorder) casi = -1 goto retc }\",\"最后一种情况，没有找到可用的管道，且代码中不包含default分支，那么当前协程会陷入阻塞状态，在这之前selectgo会将当前协程加入所有监听管道的recvq/sendq队列中\",\"gp = getg() nextp = &gp.waiting for _, casei := range lockorder { casi = int(casei) cas = &scases[casi] c = cas.c sg := acquireSudog() sg.g = gp sg.isSelect = true sg.elem = cas.elem sg.releasetime = 0 sg.c = c *nextp = sg nextp = &sg.waitlink if casi < nsends { c.sendq.enqueue(sg) } else { c.recvq.enqueue(sg) } }\",\"这里会将创建若干个sudog并将其和对应的管道链接起来，如下图所示\",\"然后由runtime.gopark阻塞，在阻塞前会将管道解锁，解锁的工作由runtime.selparkcommit函数完成，它被作为回调函数传入了gopark中。\",\"gp.param = nil // Signal to anyone trying to shrink our stack that we're about // to park on a channel. The window between when this G's status // changes and when we set gp.activeStackChans is not safe for // stack shrinking. gp.parkingOnChan.Store(true) gopark(selparkcommit, nil, waitReasonSelect, traceBlockSelect, 1) gp.activeStackChans = false\",\"被唤醒后的第一件事情就是解除sudog与管道的链接\",\"sellock(scases, lockorder) gp.selectDone.Store(0) sg = (*sudog)(gp.param) gp.param = nil casi = -1 cas = nil caseSuccess = false sglist = gp.waiting // Clear all elem before unlinking from gp.waiting. for sg1 := gp.waiting; sg1 != nil; sg1 = sg1.waitlink { sg1.isSelect = false sg1.elem = nil sg1.c = nil } gp.waiting = nil\",\"然后将sudog从之前管道的等待队列中移除\",\"for _, casei := range lockorder { k = &scases[casei] if sg == sglist { // sg has already been dequeued by the G that woke us up. casi = int(casei) cas = k caseSuccess = sglist.success if sglist.releasetime > 0 { caseReleaseTime = sglist.releasetime } } else { c = k.c if int(casei) < nsends { c.sendq.dequeueSudoG(sglist) } else { c.recvq.dequeueSudoG(sglist) } } sgnext = sglist.waitlink sglist.waitlink = nil releaseSudog(sglist) sglist = sgnext }\",\"在上面的过程中一定会找到一个唤醒方协程所处理的管道，然后根据caseSuccess来做出最后的处理。对于写操作而言，sg.success为false代表管道已经关闭了，而且整个 go 运行时也只有close函数会主动将该字段设置为false，这表明当前协程是唤醒方通过close函数唤醒的。对于读操作而言，如果是被发送方唤醒的，数据读取操作也早在被唤醒前由发送方通过runtime.send函数完成了，其值为true，如果是被close函数唤醒的，跟前面一样都是直接返回。\",\"c = cas.c if casi < nsends { if !caseSuccess { goto sclose } } else { recvOK = caseSuccess } selunlock(scases, lockorder) goto retc\",\"到此整个 select 的逻辑都大致理清楚了，上面分了好几种情况，可见 select 处理起来还是比较复杂的。\"]},\"1068\":{\"h\":\"nil\"},\"1069\":{\"h\":\"引子\",\"t\":[\"在某一次编写代码的过程中，我需要调用Close()方法来关闭多个对象，就像下面的代码一样\",\"type A struct { b B c C d D } func (a A) Close() error { if a.b != nil { if err := a.b.Close(); err != nil { return err } } if a.c != nil { if err := a.c.Close(); err != nil { return err } } if a.d != nil { if err := a.d.Close(); err != nil { return err } } return nil }\",\"但写这么多if判断感觉不太优雅，B，C和D都实现了Close方法，应该可以更简洁一点，于是我把它们放进了一个切片中，然后循环判断\",\"func (a A) Close() error { closers := []io.Closer{ a.b, a.c, a.d, } for _, closer := range closers { if closer != nil { if err := closer.Close(); err != nil { return err } } } return nil }\",\"这样看起来似乎要更好一点，那么运行一下看看\",\"func main() { var a A if err := a.Close(); err != nil { panic(err) } fmt.Println(\\\"success\\\") }\",\"结果出乎意料，居然崩了，错误信息如下，意思就是不能对nil接收者调用方法，循环中的if closer != nil似乎没有起到过滤作用，\",\"panic: value method main.B.Close called using nil *B pointer\",\"上面这个例子是笔者曾经遇到过的一个 bug 的简化版，很多初学者刚开始可能都会和我一样犯这种错误，下面就来讲讲到底是怎么个回事。\"]},\"1070\":{\"h\":\"接口\",\"t\":[\"在之前的章节提到过，nil是引用类型的零值，比如切片，map，通道，函数，指针，接口的零值。对于切片，map，通道，函数，可以将它们都看作是指针，都是由指针指向具体的实现。\",\"但唯独接口不一样，接口由两个东西组成：类型和值\",\"当试图对一个变量赋值nil时，会无法通过编译，并且提示如下信息\",\"use of untyped nil in assignment\",\"内容大致为不能声明一个值为untyped nil的变量。既然有untyped nil，相对的就肯定会有typed nil，而这种情况往往出现在接口身上。看下面一个简单的例子\",\"func main() { var p *int fmt.Println(p) fmt.Println(p == nil) var pa any pa = p fmt.Println(pa) fmt.Println(pa == nil) }\",\"输出\",\"<nil> true <nil> false\",\"结果非常奇怪，明明pa的输出就是nil，但它就是不等于nil，我们可以通过反射来看看它到底是什么\",\"func main() { var p *int fmt.Println(p) fmt.Println(p == nil) var pa any pa = p fmt.Println(reflect.TypeOf(pa)) fmt.Println(reflect.ValueOf(pa)) }\",\"输出\",\"<nil> true *int <nil>\",\"从结果可以看到，它实际上是(*int)(nil)，也就是说pa存储的类型是*int，而它实际的值是nil，当对一个接口类型的值进行相等运算的时候，首先会判断它们的类型是否相等，如果类型不相等，则直接判定为不相等，其次再去判断值是否相等，这一段的接口判断的逻辑可以参考自cmd/compile/internal/walk.walkCompare函数。\",\"所以，如果想要一个接口等于nil，必须要它的值为nil，并且类型也为nil，因为接口中的类型实际上也是一个指针\",\"type iface struct { tab *itab data unsafe.Pointer }\",\"如果想要绕开类型，直接判断其值是否为nil，可以使用反射，下面是一个例子\",\"func main() { var p *int fmt.Println(p) fmt.Println(p == nil) var pa any pa = p fmt.Println(reflect.ValueOf(pa).IsNil()) }\",\"通过IsNil()可以直接判断其值是否为nil，这样一来就不会出现上述的问题了。所以在平时使用的过程中，假设函数的返回值是一个接口类型，如果你想返回一个零值，最好直接返回nil，不要返回任何具体实现的零值，就算它实现了该接口，但它永远也不会等于nil，这就可能导致例子里面的错误。\"]},\"1071\":{\"h\":\"小结\",\"t\":[\"解决了上面的问题，接下来看看下面这几个例子\",\"当结构体的接收者为指针接收者时，nil是可用的，看下面一个例子\",\"type A struct { } func (a *A) Do() { } func main() { var a *A a.Do() }\",\"这段代码可以正常运行，并且不会报空指针错误。\",\"当切片为nil的时候，可以访问它的长度和容量，也可以对其添加元素\",\"func main() { var s []int fmt.Println(len(s)) fmt.Println(cap(s)) s = append(s, 1) }\",\"当 map 为nil的时候，还可以对其进行访问\",\"func main() { var s map[string]int i, ok := s[\\\"\\\"] fmt.Println(i, ok) fmt.Println(len(s)) }\",\"上面例子中的这些有关于nil的特性可能会让人比较困惑，尤其是对于 go 的初学者而言，nil代表着上面几种类型的零值，也就是默认值，默认值应当表现出默认的行为，这也正是 go 的设计者所希望看到的：让nil变得更有用，而不是直接抛出空指针错误。这一理念同样也体现在标准库中，比如开启一个 HTTP 服务器可以这样写\",\"http.ListenAndServe(\\\":8080\\\", nil)\",\"我们可以直接传入一个nil Handler，然后http库就会使用默认的Handler来处理 HTTP 请求。\",\"提示\",\"感兴趣的可以看看这个视频Understanding nil - Gopher Conference 2016，讲的非常清晰易懂。\"]},\"1072\":{\"h\":\"defer\",\"t\":[\"defer在 go 的日常开发中是一个出现频率非常高的关键字，它会以先进后出的方式来执行defer关联的函数，很多时候我们利用这种机制来进行一些资源的释放操作，比如文件关闭之类的操作。\",\"fd, err := os.Open(\\\"/dev/stdin\\\") if err != nil{ return err } defer fd.Close() ...\",\"如此高频出现的关键字，使得我们有必要去了解一下它背后的结构。\"]},\"1073\":{\"h\":\"结构\",\"t\":[\"defer关键字对应runtime._defer结构体，它的结构并不复杂\",\"type _defer struct { started bool heap bool openDefer bool sp uintptr // sp at time of defer pc uintptr // pc at time of defer fn func() // can be nil for open-coded defers _panic *_panic // panic that is running defer link *_defer // next defer on G; can point to either heap or stack! fd unsafe.Pointer // funcdata for the function associated with the frame varp uintptr // value of varp for the stack frame framepc uintptr }\",\"其中的fn字段是defer关键字对应的函数，link表示下一个链接的defer，sp和pc记录了调用方的函数信息，用于判断defer属于哪一个函数。defer 在运行时以链表的形式存在，链表的头部就在协程 G 上，所以defer实际上是与协程直接关联的。\",\"type g struct { ... _panic *_panic // innermost panic - offset known to liblink _defer *_defer // innermost defer ... }\",\"当协程执行函数时，就会按照顺序将函数中的defer从链表的头部加入\",\"defer fn1() defer fn2() defer fn3()\",\"上面那段代码就对应这幅图\",\"除了协程之外，P 也跟defer有一定的关联，在 P 的结构体中，有一个deferpool字段，如所示。\",\"type p struct { ... deferpool []*_defer // pool of available defer structs (see panic.go) deferpoolbuf [32]*_defer ... }\",\"deferpool中存放着预分配好的defer结构，用于给与 P 关联的协程 G 分配新的defer结构，可以减少开销。\"]},\"1074\":{\"h\":\"分配\",\"t\":[\"在语法上对defer关键字的使用，编译器会将其转为为对runtime.deferproc函数的调用。比如 go 代码是这样写的\",\"defer fn1(x, y)\",\"而编译后实际上的代码是这样的\",\"deferproc(func(){ fn1(x, y) })\",\"所以实际上defer传入的函数是没有参数也没有返回值的，deferproc函数代码如下所示\",\"func deferproc(fn func()) { gp := getg() d := newdefer() d.link = gp._defer gp._defer = d d.fn = fn d.pc = getcallerpc() d.sp = getcallersp() return0() }\",\"该函数负责创建defer结构并将其加入协程 G 链表的头部，其中的runtime.newdefer函数就会尝试从 P 中的deferpool来获取预分配的defer结构。\",\"if len(pp.deferpool) == 0 && sched.deferpool != nil { lock(&sched.deferlock) for len(pp.deferpool) < cap(pp.deferpool)/2 && sched.deferpool != nil { d := sched.deferpool sched.deferpool = d.link d.link = nil pp.deferpool = append(pp.deferpool, d) } unlock(&sched.deferlock) }\",\"它首先会从全局的sched.deferpool向局部的deferpool装填一半的defer结构，然后再从 P 中的deferpool尝试去获取\",\"if n := len(pp.deferpool); n > 0 { d = pp.deferpool[n-1] pp.deferpool[n-1] = nil pp.deferpool = pp.deferpool[:n-1] } if d == nil { // Allocate new defer. d = new(_defer) } d.heap = true\",\"最后实在找不到才会使用手动分配的方式。最后可以看到有这么一段代码\",\"d.heap = true\",\"这表示defer在堆上分配，相应的当其为false时，就会在栈上分配，栈上分配的内存会在返回时自动回收，其内存管理效率要比在堆上更高，而决定是否在栈上分配的因素就是循环层数，这部分逻辑可以追溯到cmd/compile/ssagen中的escape.goDeferStmt方法的这一小段，如下所示\",\"func (e *escape) goDeferStmt(n *ir.GoDeferStmt) { ... if n.Op() == ir.ODEFER && e.loopDepth == 1 { k = e.later(e.discardHole()) n.SetEsc(ir.EscNever) } ... }\",\"e.loopDepth表示的就是当前语句的循环层数，如果当前defer语句不在循环中，就会将其分配到栈上。\",\"case ir.ODEFER: n := n.(*ir.GoDeferStmt) if s.hasOpenDefers { s.openDeferRecord(n.Call.(*ir.CallExpr)) } else { d := callDefer if n.Esc() == ir.EscNever { d = callDeferStack } s.callResult(n.Call.(*ir.CallExpr), d) }\",\"如果是在栈上分配的话，就会直接在栈上创建defer结构体，最终会由runtime.deferprocStack函数来完成defer结构的创建。\",\"if k == callDeferStack { // Make a defer struct d on the stack. if stksize != 0 { s.Fatalf(\\\"deferprocStack with non-zero stack size %d: %v\\\", stksize, n) } t := deferstruct() ... // Call runtime.deferprocStack with pointer to _defer record. ACArgs = append(ACArgs, types.Types[types.TUINTPTR]) aux := ssa.StaticAuxCall(ir.Syms.DeferprocStack, s.f.ABIDefault.ABIAnalyzeTypes(nil, ACArgs, ACResults)) callArgs = append(callArgs, addr, s.mem()) call = s.newValue0A(ssa.OpStaticLECall, aux.LateExpansionResultType(), aux) call.AddArgs(callArgs...) call.AuxInt = int64(types.PtrSize) // deferprocStack takes a *_defer arg\",\"deferprocStack函数的签名如下\",\"func deferprocStack(d *_defer)\",\"其具体的创建逻辑与deferproc并无太大区别，主要的区别在于，在栈上分配时是defer结构的来源是直接创建的结构体，在堆上分配的defer来源是new函数。\"]},\"1075\":{\"h\":\"执行\",\"t\":[\"当函数将要返回或者发生panic时，便会进入runtime.deferreturn函数，它负责从协程的链表中取出defer并执行。\",\"func deferreturn() { gp := getg() for { d := gp._defer sp := getcallersp() if d.sp != sp { return } fn := d.fn d.fn = nil gp._defer = d.link freedefer(d) fn() } }\",\"首先会通过getcallersp()获取当前函数的栈帧并与defer结构中的sp做比较来判断defer是否属于当前函数，然后将defer结构从链表头部取出，并使用gp._defer = d.link执行下一个defer，再通过runtuime.freedefer函数将defer结构释放回池中，最后再调用fn执行，就这样一直循环到执行完属于当前函数的所有defer结束为止。\"]},\"1076\":{\"h\":\"开放编码\",\"t\":[\"defer的使用并非毫无成本，虽然它在语法上给我们提供了便利，但毕竟它不是直接进行函数调用，中间会进行经过一系列的过程，所以还是会造成性能损耗，所以后来 go 官方设计了一种优化方——开放编码，它是一种对defer的优化方式，其原英文名叫 open-coded，国内基本上都给翻译成了开放编码，这里的 open 指的是展开的意思，就是将defer函数的代码展开到当前函数代码中，就像函数内联一样。这种优化方式有以下几个限制条件\",\"函数中的defer数量不能超过 8 个\",\"defer与return两者数量的乘积不能超过 15\",\"defer不能出现在循环中\",\"未禁用编译优化\",\"没有手动调用os.Exit()\",\"不需要从堆上复制参数\",\"这部分判断逻辑可以追溯到cmd/compile/ssagen.buildssa函数的下面这部分代码\",\"s.hasOpenDefers = base.Flag.N == 0 && s.hasdefer && !s.curfn.OpenCodedDeferDisallowed() if s.hasOpenDefers && len(s.curfn.Exit) > 0 { s.hasOpenDefers = false } if s.hasOpenDefers { for _, f := range s.curfn.Type().Results().FieldSlice() { if !f.Nname.(*ir.Name).OnStack() { s.hasOpenDefers = false break } } } if s.hasOpenDefers && s.curfn.NumReturns*s.curfn.NumDefers > 15 { s.hasOpenDefers = false }\",\"然后 go 会在当前函数创建一个 8 位整数变量deferBits来当作 bitmap 用于标记defer，每一位标记一个，8 位整数uint8最多表示 8 个，如果对应位为 1，那么对应的开放编码优化后的defer就会在函数要返回时执行。\"]},\"1077\":{\"h\":\"panic\",\"t\":[\"panic是 go 的内置函数，当遇到不可恢复的错误时，程序往往就会抛出panic，比如常见的空指针访问\",\"func main() { var a *int *a = 1 }\",\"运行上面这段代码，程序就会抛出如下的panic，然后程序就会停止。\",\"panic: runtime error: invalid memory address or nil pointer dereference\",\"在一些情况下，我们也会手动调用panic函数来让程序退出，从而避免更严重的后果。平时也会用另一个内置函数recover来捕获panic，并配合defer使用。\",\"func main() { defer func() { if err := recover(); err != nil { fmt.Println(err) } }() var a *int *a = 1 }\",\"为什么recover函数一定要在defer里面使用，recover做了些什么工作，这些问题都会在下面的内容得到解答。\"]},\"1078\":{\"h\":\"结构\",\"t\":[\"panic在运行时也有对应的结构进行表示，那就是runtime._panic，其结构并不复杂，如下。\",\"type _panic struct { argp unsafe.Pointer // pointer to arguments of deferred call run during panic; cannot move - known to liblink arg any // argument to panic link *_panic // link to earlier panic pc uintptr // where to return to in runtime if this panic is bypassed sp unsafe.Pointer // where to return to in runtime if this panic is bypassed recovered bool // whether this panic is over aborted bool // the panic was aborted goexit bool }\",\"它的结构与defer非常类似，\",\"link指向下一个_panic结构，\",\"pc和sp指向调用函数的执行现场便于日后恢复，\",\"arg就是panic函数的参数，\",\"argp指向defer的参数，panic发生后便会触发defer的执行\",\"aborted表示其是否被强制停止\",\"panic跟defer一样，也是以链表的形式存在于协程中\",\"type g struct { _panic *_panic // innermost panic - offset known to liblink _defer *_defer // innermost defer }\"]},\"1079\":{\"h\":\"恐慌\",\"t\":[\"无论是我们主动调用panic函数，抑或是程序发生的panic，最终都会走入runtime.gopanic函数中\",\"func gopanic(e any)\",\"在开始时，首先会检测参数是否为nil，如果是nil的话就会 new 一个runtime.PanicNilError类型的错误\",\"if e == nil { if debug.panicnil.Load() != 1 { e = new(PanicNilError) } else { panicnil.IncNonDefault() } }\",\"然后将当前的panic加入协程的链表头部\",\"var p _panic p.arg = e p.link = gp._panic gp._panic = (*_panic)(noescape(unsafe.Pointer(&p)))\",\"随后进入for循环开始逐个处理当前协程的defer链表\",\"for { d := gp._defer if d == nil { break } if d.started { if d._panic != nil { d._panic.aborted = true } d._panic = nil } d.started = true d._panic = (*_panic)(noescape(unsafe.Pointer(&p))) ... }\",\"如果当前的defer已经被其它的panic触发了，即_defer.started == true，那么较早的panic将不会执行。然后再执行defer对应的函数\",\"p.argp = unsafe.Pointer(getargp()) d.fn() p.argp = nil d._panic = nil d.fn = nil gp._defer = d.link freedefer(d)\",\"执行完后回收当前的defer结构，继续执行下一个defer，当执行完全部的defer结构后且期间没有被恢复，就会进入runtime.fatalpanic函数，该函数是unrecoverable即不可恢复的\",\"func fatalpanic(msgs *_panic) { pc := getcallerpc() sp := getcallersp() gp := getg() var docrash bool systemstack(func() { if startpanic_m() && msgs != nil { runningPanicDefers.Add(-1) printpanics(msgs) } docrash = dopanic_m(gp, pc, sp) }) if docrash { crash() } systemstack(func() { exit(2) }) *(*int)(nil) = 0 // not reached }\",\"在这期间会让printpanics打印panic的信息，我们通常看到的调用栈信息就是由它输出的，最后由runtime.exit函数通过系统调用_ExitProcess退出程序。\"]},\"1080\":{\"h\":\"恢复\",\"t\":[\"通过调用内置函数recover，编译期间会变为对runtime.gorecover函数的调用\",\"func gorecover(argp uintptr) any { gp := getg() p := gp._panic if p != nil && !p.goexit && !p.recovered && argp == uintptr(p.argp) { p.recovered = true return p.arg } return nil }\",\"它的实现非常简单，只干了p.recovered = true这么一件事，而真正负责处理恢复逻辑的代码实际上在gopanic函数里\",\"for { ... d.fn() ... if p.recovered { ... } }\",\"恢复的逻辑在defer执行后，到这里也就明白了为什么recover函数只能在defer中使用，如果在defer之外使用recover函数的话gp._panic就等于nil，自然p.recovered就不会被设置为true，那么在gopanic函数中也就不会走到恢复这部分逻辑里面来。\",\"if p.recovered { gp._panic = p.link for gp._panic != nil && gp._panic.aborted { gp._panic = gp._panic.link } if gp._panic == nil { gp.sig = 0 } gp.sigcode0 = uintptr(sp) gp.sigcode1 = pc mcall(recovery) throw(\\\"recovery failed\\\") }\",\"恢复时会清理链表中那些已经被强制停止的panic，然后进入runtime.recovery函数中，由runtime.gogo回到用户函数的正常逻辑流程中\",\"func recovery(gp *g) { // Info about defer passed in G struct. sp := gp.sigcode0 pc := gp.sigcode1 gp.sched.sp = sp gp.sched.pc = pc gp.sched.lr = 0 gp.sched.ret = 1 gogo(&gp.sched) }\",\"然后有一个重点需要注意的是这行代码\",\"gp.sched.ret = 1\",\"它将ret值设置成为了 1，从runtime.deferproc的函数注释中可以看代码下面这些内容\",\"func deferproc(fn func()) { ... // deferproc returns 0 normally. // a deferred func that stops a panic // makes the deferproc return 1. // the code the compiler generates always // checks the return value and jumps to the // end of the function if deferproc returns != 0. return0() }\",\"编译器生成的中间代码会检查该值是否为 1，如果是的话就会直接执行runtime.deferreturn函数，通常该函数只有在函数返回之前才会执行，这也说明了为什么recover过后函数会直接返回。\"]},\"1081\":{\"h\":\"netpoll\"},\"1082\":{\"h\":\"sysmon\",\"t\":[\"sysmon是一个普通的函数，直译为系统监控，去掉注释部分也就 200 来行代码。它会在程序引导阶段时被分配一个单独的线程来启动，之后会在后台不断地监控 Go 程序运行时的状态，并作出相应的处理。关于它启动这部分的代码可以在runtime.main函数中查看到：\",\"func main() { ... mp := getg().m mainStarted = true systemstack(func() { newm(sysmon, nil, -1) }) ... }\",\"系统监控本身只是一个for循环，每一轮循环的间隔时间为 20 微秒，随着程序空闲指数的上升，间隔时间最多会提升至 10 毫秒。在每一轮循环中，它主要做了下面几件事情：\",\"辅助协程调度，抢占长时间运行的协程\",\"检查内存情况，并判断是否需要进行垃圾回收\"]},\"1083\":{\"h\":\"gmp\",\"t\":[\"go 语言最大的特点之一就是它对于并发的天然支持，仅需一个关键字就可以开启一个协程，就像下面例子所演示的一样。\",\"import ( \\\"fmt\\\" \\\"sync\\\" ) func main() { var wg sync.WaitGroup wg.Add(2) go func() { defer wg.Done() fmt.Println(\\\"hello world!\\\") }() go func() { defer wg.Done() fmt.Println(\\\"hello world too!\\\") }() wg.Wait() }\",\"go 语言的协程使用起来如此的简单，对于开发者来说几乎不需要做什么额外的工作，这也是它受欢迎的原因之一。不过在简单的背后，是一个并不简单的并发调度器在支撑着这一切，它的名字相信各位或多或少都应该听说过，因为其主要参与者分别由 G（协程），M（系统线程），P（处理器）这三个成员组成，所以也被称为 GMP 调度器。GMP 调度器的设计影响着整个 go 语言运行时的设计，GC，网络轮询器，可以说它就是整个语言最核心的一块，如果对它能够有一定的了解，在日后的工作中说不定会有些许帮助。\"]},\"1084\":{\"h\":\"历史\",\"t\":[\"Go 语言的并发调度模型并发不是完全原创的，它吸收了很多前人的经验和教训，经过不断发展和改进才有了现在的样子。它借鉴过的语言有下面这些：\",\"Occam -1983\",\"Erlang - 1986\",\"Newsqueak - 1988\",\"Concurrent ML - 1993\",\"Alef - 1995\",\"Limbo - 1996\",\"影响最为巨大的还是霍尔在 1978 年发表了一篇关于 CSP（Communicate Sequential Process）的论文，该论文的基本思想是进程与进程之间通过通信来进行数据的交换。在上面的几门编程语言中无一不受到了 CSP 思想的影响，Erlang 就是最为典型的一个面向消息的编程语言，著名开源消息队列中间件 RabbitMQ 就是采用 Erlang 编写的。到了现如今，随着的计算机和互联网的发展，并发支持几乎已经成为了一个现代语言的标配，结合了 CSP 思想的 go 语言便应运而生。\"]},\"1085\":{\"h\":\"调度模型\",\"t\":[\"首先来简单的介绍下 GMP 成的三个成员\",\"G，Goroutine，指的是 go 语言中的协程\",\"M，Machine，指是系统线程或者叫工作线程（worker thread），由操作系统来负责调度\",\"P，Processor，并非指 CPU 处理器，是 go 自己抽象的一个概念，指的是工作在系统线程上的处理器，通过它来调度每一个系统线程上的协程。\",\"协程就是一种更加轻量的线程，规模更小，所需的资源也会更少，创建和销毁和调度的时机都是由 go 语言运行时来完成，而并非操作系统，所以它的管理成本要比线程低很多。不过协程也是依附于线程的，协程执行所需的时间片来自于线程，线程所需的时间片来自于操作系统，而不同的线程间的切换是有一定成本的，如何让协程利用好线程的时间片就是设计的关键所在。\",\"1:N\",\"解决问题的最好办法就是忽略这个问题，既然线程切换是有成本的，那直接不切换就行了。将所有的协程都分配到一个内核线程上，这样就只涉及到了协程间的切换。\",\"线程与协程间的关系是1:N，这样做有一个非常明显的缺点，当今时代的计算机几乎都是多核 CPU，这样的分配无法利用充分利用多核 CPU 的性能。\",\"N:N\",\"另一种方法，一个线程对应一个协程，一个协程可以享受该线程的所有时间片，多个线程也可以利用好多核 CPU 的性能。但是，线程的创建和切换成本是比较高的，如果是一比一的关系，反而没有利用好协程的轻量这一优势。\",\"M:N\",\"M 个线程对应 N 个协程，且 M 小于 N。多个线程对应多个协程，每一个线程都会对应若干个协程，由处理器 P 来负责调度协程 G 如何使用线程的时间片。这种方法是相对而言比较好的一种，也是 Go 一直沿用至今的调度模型。\",\"M 只有与处理器 P 关联后才能执行任务，go 会创建GOMAXPROCS个处理器，所以真正能够用于执行任务的线程数量就是GOMAXPROCS个，它的默认值是当前机器上的 CPU 逻辑核数，我们也可以手动去设置它的值。\",\"通过代码修改runtime.GOMAXPROCS(N)，并且可以在运行时动态调整，调用后直接 STW。\",\"设置环境变量export GOMAXPROCS=N，静态。\",\"在实际情况下，M 的数量会大于 P 的数量，因为在运行时会需要它们去处理其它的任务，比如一些系统调用，最大值是 10000。\",\"GMP 这三个参与者以及调度器本身在运行时都有其对应的类型表示，它们都位于runtime/runtime2.go文件中，下面会对其结构进行简单的介绍，方便在后面进行理解。\"]},\"1086\":{\"h\":\"G\",\"t\":[\"G 在运行时的表现类型是runtime.g结构体，是调度模型中最基本的调度单元，其结构如下所示，为了方便理解，删去了不少的字段。\",\"type g struct { stack stack // offset known to runtime/cgo _panic *_panic // innermost panic - offset known to liblink _defer *_defer // innermost defer m *m // current m; offset known to arm liblink sched gobuf goid uint64 waitsince int64 // approx time when the g become blocked waitreason waitReason // if status==Gwaiting atomicstatus atomic.Uint32 preempt bool // preemption signal, duplicates stackguard0 = stackpreempt startpc uintptr // pc of goroutine function parentGoid uint64 // goid of goroutine that created this goroutine waiting *sudog // sudog structures this g is waiting on (that have a valid elem ptr); in lock order }\",\"第一个字段就是属于该协程的栈的内存起始地址和结束地址\",\"type stack struct { lo uintptr hi uintptr }\",\"_panic和_defer是分别指向panic栈和defer栈的指针\",\"_panic *_panic // innermost panic - offset known to liblink _defer *_defer // innermost defer\",\"m正在执行当前 g 的协程\",\"m *m // current m; offset known to arm liblink\",\"preempt表示当前协程是否需要被抢占，等价于g.stackguard0 = stackpreempt\",\"preempt bool // preemption signal, duplicates stackguard0 = stackpreempt\",\"atomicstatus用于存储协程 G 的状态值，它有以下可选的值\",\"名称\",\"描述\",\"_Gidle\",\"刚被分配，且未被初始化\",\"_Grunnable\",\"表示当前协程可以运行，位于等待队列中\",\"_Grunning\",\"表示当前协程正在执行用户代码\",\"_Gsyscall\",\"被分配了一个 M，用于执行系统调用，\",\"_Gwaiting\",\"协程阻塞，阻塞的原因见下文\",\"_Gdead\",\"表示当前协程未被使用，可能刚刚退出，也可能刚刚初始化\",\"_Gcopystack\",\"表示协程栈正在移动，在此期间不执行用户代码，也不位于等待队列中\",\"_Gpreempted\",\"阻塞自身进入抢占，等待被抢占方唤醒\",\"_Gscan\",\"GC 正在扫描协程栈空间，可以其它状态共存\",\"sched用于存储协程上下文信息用于恢复协程的执行现场，可以看到里面存储着sp，pc，ret指针。\",\"type gobuf struct { sp uintptr pc uintptr g guintptr ctxt unsafe.Pointer ret uintptr lr uintptr bp uintptr // for framepointer-enabled architectures }\",\"waiting 表示当前协程正在等待的协程，waitsince记录了协程发生阻塞的时刻，waitreason表示协程阻塞的原因，可选的值如下。\",\"var waitReasonStrings = [...]string{ waitReasonZero: \\\"\\\", waitReasonGCAssistMarking: \\\"GC assist marking\\\", waitReasonIOWait: \\\"IO wait\\\", waitReasonChanReceiveNilChan: \\\"chan receive (nil chan)\\\", waitReasonChanSendNilChan: \\\"chan send (nil chan)\\\", waitReasonDumpingHeap: \\\"dumping heap\\\", waitReasonGarbageCollection: \\\"garbage collection\\\", waitReasonGarbageCollectionScan: \\\"garbage collection scan\\\", waitReasonPanicWait: \\\"panicwait\\\", waitReasonSelect: \\\"select\\\", waitReasonSelectNoCases: \\\"select (no cases)\\\", waitReasonGCAssistWait: \\\"GC assist wait\\\", waitReasonGCSweepWait: \\\"GC sweep wait\\\", waitReasonGCScavengeWait: \\\"GC scavenge wait\\\", waitReasonChanReceive: \\\"chan receive\\\", waitReasonChanSend: \\\"chan send\\\", waitReasonFinalizerWait: \\\"finalizer wait\\\", waitReasonForceGCIdle: \\\"force gc (idle)\\\", waitReasonSemacquire: \\\"semacquire\\\", waitReasonSleep: \\\"sleep\\\", waitReasonSyncCondWait: \\\"sync.Cond.Wait\\\", waitReasonSyncMutexLock: \\\"sync.Mutex.Lock\\\", waitReasonSyncRWMutexRLock: \\\"sync.RWMutex.RLock\\\", waitReasonSyncRWMutexLock: \\\"sync.RWMutex.Lock\\\", waitReasonTraceReaderBlocked: \\\"trace reader (blocked)\\\", waitReasonWaitForGCCycle: \\\"wait for GC cycle\\\", waitReasonGCWorkerIdle: \\\"GC worker (idle)\\\", waitReasonGCWorkerActive: \\\"GC worker (active)\\\", waitReasonPreempted: \\\"preempted\\\", waitReasonDebugCall: \\\"debug call\\\", waitReasonGCMarkTermination: \\\"GC mark termination\\\", waitReasonStoppingTheWorld: \\\"stopping the world\\\", }\",\"goid和parentGoid表示当前协程和父协程的唯一标识，startpc表示当前协程入口函数的地址。\"]},\"1087\":{\"h\":\"M\",\"t\":[\"M在运行时表现为runtime.m结构体，是对工作线程的抽象\",\"type m struct { id int64 g0 *g // goroutine with scheduling stack curg *g // current running goroutine gsignal *g // signal-handling g goSigStack gsignalStack // Go-allocated signal handling stack p puintptr // attached p for executing go code (nil if not executing go code) nextp puintptr oldp puintptr // the p that was attached before executing a syscall mallocing int32 throwing throwType preemptoff string // if != \\\"\\\", keep curg running on this m locks int32 dying int32 spinning bool // m is out of work and is actively looking for work tls [tlsSlots]uintptr ... }\",\"同样的，M 内部的字段也有很多，这里仅介绍部分字段方便理解。\",\"id，M 的唯一标识符\",\"g0，拥有调度栈的协程\",\"curg，正在工作线程上运行的用户协程\",\"gsignal，负责处理线程信号的协程\",\"goSigStack，go 分配的用于信号处理的栈空间\",\"p，处理器 P 的地址，oldp指向在执行系统调用前的 P，nextp指向新分配的 P\",\"mallocing，用于表示当前是否正在分配新的内存空间\",\"throwing，表示当 M 发生的错误类型\",\"preemptoff，抢占标识符，当它为空串时表示当前正在运行的协程可以被抢占\",\"locks，表示当前 M\\\"锁\\\"的数量，不为 0 时禁止抢占\",\"dying，表示 M 发生了无法挽回的panic，有[0,3]四个可选值，从低到高表示严重程度。\",\"spinning，表示 M 正处于空闲状态，并且随时可用。\",\"tls，线程本地存储\"]},\"1088\":{\"h\":\"P\",\"t\":[\"P 在运行时由runtime.p表示，负责调度 M 与 G 之间的工作，其结构如下所示\",\"type p struct { id int32 status uint32 // one of pidle/prunning/... schedtick uint32 // incremented on every scheduler call syscalltick uint32 // incremented on every system call sysmontick sysmontick // last tick observed by sysmon m muintptr // back-link to associated m (nil if idle) // Queue of runnable goroutines. Accessed without lock. runqhead uint32 runqtail uint32 runq [256]guintptr runnext guintptr // Available G's (status == Gdead) gFree struct { gList n int32 } // preempt is set to indicate that this P should be enter the // scheduler ASAP (regardless of what G is running on it). preempt bool ... }\",\"status表示 P 的状态，有以下几个可选值\",\"值\",\"描述\",\"_Pidle\",\"P 位于空闲状态，可以被调度器分配 M，也有可能只是在其它状态间转换\",\"_Prunning\",\"P 与 M 关联，并且正在执行用户代码\",\"_Psyscall\",\"表示与 P 关联的 M 正在进行系统调用，在此期间 P 可能会被其它的 M 抢占\",\"_Pgcstop\",\"表示 P 因 GC 而停止\",\"_Pdead\",\"P 的大部分资源都被剥夺，将不再会被使用\",\"下面几个字段记录了 P 中的runq本地队列，可以看到本地队列的最大数量是 256，超过此数量后 G 会被放到全局队列中去。\",\"runqhead uint32 runqtail uint32 runq [256]guintptr\",\"runnext表示下一个可用的 G\",\"runnext guintptr\",\"其它的几个字段释义如下\",\"id，P 的唯一标识符\",\"schedtick，随着协程调度次数的增加而增加，在runtime.execute函数中可见。\",\"syscalltick，随着系统调用的次数增加而增加\",\"sysmontick，记录了上一次被系统监控观察的信息\",\"m，与 P 关联的 M\",\"gFree，空闲的 G 列表\",\"preempt，表示 P 应该再次进入调度\",\"全局队列的信息则存放在runtime.schedt结构体中，是调度器在运行时的表示形式，如下。\",\"type schedt struct { ... midle muintptr // idle m's waiting for work ngsys atomic.Int32 // number of system goroutines pidle puintptr // idle p's // Global runnable queue. runq gQueue runqsize int32 ... }\"]},\"1089\":{\"h\":\"初始化\",\"t\":[\"调度器的初始化位于 go 程序的引导阶段，负责引导 go 程序的就是runtime.rt0_go函数，它由汇编实现位于文件runtime/asm_*.s中，部分代码如下\",\"TEXT runtime·rt0_go(SB),NOSPLIT|NOFRAME|TOPFRAME,$0 ... ... CALL runtime·check(SB) MOVL 24(SP), AX // copy argc MOVL AX, 0(SP) MOVQ 32(SP), AX // copy argv MOVQ AX, 8(SP) CALL runtime·args(SB) CALL runtime·osinit(SB) CALL runtime·schedinit(SB) // create a new goroutine to start program MOVQ $runtime·mainPC(SB), AX // entry PUSHQ AX CALL runtime·newproc(SB) POPQ AX // start this M CALL runtime·mstart(SB) CALL runtime·abort(SB) // mstart should never return RET\",\"可以通过下面两行可以看到对runtime·osinit和runtime·schedinit的调用。\",\"CALL runtime·osinit(SB) CALL runtime·schedinit(SB)\",\"前者负责初始化操作系统相关的工作，后者负责调度器的初始化，也就是runtime·schedinit函数。它会在程序启动时负责初始化调度器运行所需的资源，下面是简化后的代码。\",\"func schedinit() { ... gp := getg() sched.maxmcount = 10000 // The world starts stopped. worldStopped() ... stackinit() mallocinit() mcommoninit(gp.m, -1) lock(&sched.lock) procs := ncpu if n, ok := atoi32(gogetenv(\\\"GOMAXPROCS\\\")); ok && n > 0 { procs = n } if procresize(procs) != nil { throw(\\\"unknown runnable goroutine during bootstrap\\\") } unlock(&sched.lock) ... // World is effectively started now, as P's can run. worldStarted() ... }\",\"runtime.getg函数由汇编实现，它的功能是获取到当前协程的运行时表示，也就是runtime.g结构体的指针。通过sched.maxmcount = 10000可以看到，在调度器初始化的时候就设置了 M 的最大数量为 10000，这个值是固定的且没法修改。再之后就是初始化堆栈，然后才是runtime.mcommoninit函数来初始化 M，其函数实现如下\",\"func mcommoninit(mp *m, id int64) { gp := getg() // g0 stack won't make sense for user (and is not necessary unwindable). if gp != gp.m.g0 { callers(1, mp.createstack[:]) } lock(&sched.lock) if id >= 0 { mp.id = id } else { mp.id = mReserveID() } ... mpreinit(mp) if mp.gsignal != nil { mp.gsignal.stackguard1 = mp.gsignal.stack.lo + stackGuard } // Add to allm so garbage collector doesn't free g->m // when it is just in a register or thread-local storage. mp.alllink = allm // NumCgoCall() iterates over allm w/o schedlock, // so we need to publish it safely. atomicstorep(unsafe.Pointer(&allm), unsafe.Pointer(mp)) unlock(&sched.lock) ... }\",\"该函数对 M 进行预初始化，主要做了以下工作\",\"分配 M 的 id\",\"单独分配一个 G 用来处理线程信号，由runtime.mpreinit函数完成\",\"将其作为全局 M 链表runtime.allm的头结点\",\"接下来初始化 P，其数量默认是 CPU 的逻辑核数，其次是环境变量的值。\",\"procs := ncpu if n, ok := atoi32(gogetenv(\\\"GOMAXPROCS\\\")); ok && n > 0 { procs = n } if procresize(procs) != nil { throw(\\\"unknown runnable goroutine during bootstrap\\\") }\",\"最后由runtime.procresize函数来负责初始化 P，它会根据传入的数量来修改runtime.allp这个存放所有 P 的全局切片。首先根据数量大小判断是否需要扩容\",\"if nprocs > int32(len(allp)) { // Synchronize with retake, which could be running // concurrently since it doesn't run on a P. lock(&allpLock) if nprocs <= int32(cap(allp)) { allp = allp[:nprocs] } else { nallp := make([]*p, nprocs) // Copy everything up to allp's cap so we // never lose old allocated Ps. copy(nallp, allp[:cap(allp)]) allp = nallp } unlock(&allpLock) }\",\"然后再初始化每一个 P\",\"// initialize new P's for i := old; i < nprocs; i++ { pp := allp[i] if pp == nil { pp = new(p) } pp.init(i) atomicstorep(unsafe.Pointer(&allp[i]), unsafe.Pointer(pp)) }\",\"如果当前协程正在使用的 P 需要被销毁，则将其替换为allp[0]，由runtime.acquirep函数来完成 M 与新 P 的关联。\",\"gp := getg() if gp.m.p != 0 && gp.m.p.ptr().id < nprocs { gp.m.p.ptr().status = _Prunning gp.m.p.ptr().mcache.prepareForSweep() } else { if gp.m.p != 0 { gp.m.p.ptr().m = 0 } gp.m.p = 0 pp := allp[0] pp.m = 0 pp.status = _Pidle acquirep(pp) }\",\"随后销毁不再需要的 P，在销毁时会释放 P 的所有资源，将其本地队列中所有的 G 放入全局队列中，销毁完毕然后对allp进行切片。\",\"// release resources from unused P's for i := nprocs; i < old; i++ { pp := allp[i] pp.destroy() // can't free P itself because it can be referenced by an M in syscall } // Trim allp. if int32(len(allp)) != nprocs { lock(&allpLock) allp = allp[:nprocs] unlock(&allpLock) }\",\"最后将空闲的 P 链接成一个链表，并最终返回链表的头结点\",\"var runnablePs *p for i := nprocs - 1; i >= 0; i-- { pp := allp[i] if gp.m.p.ptr() == pp { continue } pp.status = _Pidle if runqempty(pp) { pidleput(pp, now) } else { pp.m.set(mget()) pp.link.set(runnablePs) runnablePs = pp } } return runnablePs\",\"再之后，调度器初始化完毕，由runtime.worldStarted将所有的 P 恢复运行。\",\"MOVQ $runtime·mainPC(SB), AX // entry PUSHQ AX CALL runtime·newproc(SB) POPQ AX // start this M CALL runtime·mstart(SB)\",\"然后会通过runtime.newproc函数创建一个新的协程来启动 go 程序，随后调用runtime.mstart来正式启动调度器的运行，它同样是由汇编实现，其内部会调用runtime.mstart0函数进行创建，该函数部分代码如下\",\"gp := getg() osStack := gp.stack.lo == 0 if osStack { size := gp.stack.hi if size == 0 { size = 16384 * sys.StackGuardMultiplier } gp.stack.hi = uintptr(noescape(unsafe.Pointer(&size))) gp.stack.lo = gp.stack.hi - size + 1024 } gp.stackguard0 = gp.stack.lo + stackGuard gp.stackguard1 = gp.stackguard0 mstart1()\",\"此时的 M 只有拥有一个协程g0，该协程使用线程的系统栈，并非单独分配的栈空间。mstart0函数会先初始化 G 的栈边界，然后交给mstart1去完成剩下的初始化工作。\",\"gp := getg() gp.sched.g = guintptr(unsafe.Pointer(gp)) gp.sched.pc = getcallerpc() gp.sched.sp = getcallersp() asminit() minit() if gp.m == &m0 { mstartm0() } if fn := gp.m.mstartfn; fn != nil { fn() } if gp.m != &m0 { acquirep(gp.m.nextp.ptr()) gp.m.nextp = 0 } schedule()\",\"在开始之前，首先会记录当前的执行现场，因为初始化成功之后就会进入调度循环并且永远也不会返回，其它的调用可以复用执行现场从mstart1函数返回达到退出线程的目的。记录完毕后，由runtime.asminit和runtime.minit两个函数负责初始化系统栈，然后由runtime.mstartm0函数设置用于处理信号的回调。执行回调函数m.mstartfn后 ，runtime.acquirep函数将 M 与先前创建好的 P 进行关联，最后进入调度循环。\",\"这里调用的runtime.schudule是整个 go 运行时的第一轮调度循环，代表着调度器正式开始工作。\"]},\"1090\":{\"h\":\"线程\",\"t\":[\"在调度器中，G 想要执行用户代码要依靠 P，而 P 要正常工作必须要与一个 M 关联，M 指的就是系统线程。\"]},\"1091\":{\"h\":\"创建\",\"t\":[\"M 的创建是由函数runtime.newm完成的，它接受一个函数和 P 以及 id 作为参数，作为参数的函数不能闭包。\",\"func newm(fn func(), pp *p, id int64) { acquirem() mp := allocm(pp, fn, id) mp.nextp.set(pp) mp.sigmask = initSigmask newm1(mp) releasem(getg().m) }\",\"在开始前，newm会先调用runtime.allocm函数来创建线程的运行时表示也就是 M，在过程中会使用runtime.mcommoninit函数来初始化 M 的栈边界。\",\"func allocm(pp *p, fn func(), id int64) *m { allocmLock.rlock() // The caller owns pp, but we may borrow (i.e., acquirep) it. We must // disable preemption to ensure it is not stolen, which would make the // caller lose ownership. acquirem() gp := getg() if gp.m.p == 0 { acquirep(pp) // temporarily borrow p for mallocs in this function } mp := new(m) mp.mstartfn = fn mcommoninit(mp, id) mp.g0.m = mp releasem(gp.m) allocmLock.runlock() return mp }\",\"再之后由runtime.newm1调用runtime.newosproc函数来完成真正的系统线程的创建。\",\"func newm1(mp *m) { execLock.rlock() newosproc(mp) execLock.runlock() }\",\"runtim.newosproc的实现会根据操作系统的不同而不同，具体怎么创建就不是我们要关心的事了，由操作系统负责，然后由runtime.mstart来启动 M 的工作。\"]},\"1092\":{\"h\":\"退出\",\"t\":[\"runtime.gogo(&mp.g0.sched)\",\"在初始的时候提到过，在调用mstart1函数时将执行现场保存在了 g0的sched字段中，将该字段传给runtime.gogo函数（汇编实现）就可以让线程跳到执行现场继续执行，在保存的时候用的是getcallerpc()，所以恢复现场的时候是回到了mstar0函数。\",\"mstart1() if mStackIsSystemAllocated() { osStack = true } mexit(osStack)\",\"执行现场恢复后，按照执行顺序就会进入mexit函数来退出线程。\",\"mp := getg().m unminit() lock(&sched.lock) for pprev := &allm; *pprev != nil; pprev = &(*pprev).alllink { if *pprev == mp { *pprev = mp.alllink } } mp.freeWait.Store(freeMWait) mp.freelink = sched.freem sched.freem = mp unlock(&sched.lock) handoffp(releasep()) mdestroy(mp) exitThread(&mp.freeWait)\",\"它总共做了以下几个主要的事情\",\"调用runtime.uminit来撤销runtime.minit的工作\",\"从全局变量allm中删除该 M\",\"将调度器的freem指向当前 M\",\"由runtime.releasep将 P 与当前 M 解绑，并由runtime.handoffp让 P 跟其它的 M 绑定以继续工作\",\"由runtime.destroy负责销毁 M 的资源\",\"最后由操作系统来退出线程\",\"到此 M 就成功退出了。\"]},\"1093\":{\"h\":\"暂停\",\"t\":[\"当因为调度器调度，GC，系统调用等原因需要暂停 M 时，就会调用runtime.stopm函数来暂停线程，下面是简化后的代码。\",\"func stopm() { gp := getg() lock(&sched.lock) mput(gp.m) unlock(&sched.lock) mPark() acquirep(gp.m.nextp.ptr()) gp.m.nextp = 0 }\",\"它首先会将 M 放入全局的空闲 M 列表中，然后由mPark()将当前线程阻塞在notesleep(&gp.m.park)这里，当被唤醒过后该函数就会返回\",\"func mPark() { gp := getg() notesleep(&gp.m.park) noteclear(&gp.m.park) }\",\"唤醒后的 M 会去寻找一个 P 进行绑定从而继续执行任务。\"]},\"1094\":{\"h\":\"协程\",\"t\":[\"协程的生命周期刚好对应着协程的几个状态，了解协程的生命周期对了解调度器会很有帮助，毕竟整个调度器就是围绕着协程来设计的，整个协程的生命周期就如下图所示。\",\"_Gcopystack是协程栈扩张时具有的状态，在协程栈部分进行讲解。\"]},\"1095\":{\"h\":\"创建\",\"t\":[\"协程的创建从语法层面上来讲只需要一个go关键字加一个函数。\",\"go doSomething()\",\"编译后会变成runtime.newproc函数的调用\",\"func newproc(fn *funcval) { gp := getg() pc := getcallerpc() systemstack(func() { newg := newproc1(fn, gp, pc) pp := getg().m.p.ptr() runqput(pp, newg, true) if mainStarted { wakep() } }) }\",\"由runtime.newproc1来完成实际的创建，在创建时首先会锁住 M，禁止抢占，然后会去 P 的本地gfree列表中寻找空闲的 G 来重复利用，如果找不到就由runtime.malg 创建一个新的 G，并为其分配 2kb 的栈空间。此时 G 的状态为_Gdead。\",\"mp := acquirem() // disable preemption because we hold M and P in local vars. pp := mp.p.ptr() newg := gfget(pp) if newg == nil { newg = malg(stackMin) casgstatus(newg, _Gidle, _Gdead) allgadd(newg) // publishes with a g->status of Gdead so GC scanner doesn't look at uninitialized stack. }\",\"在 go1.18 及以后，参数的拷贝不再由newproc1函数完成，在这之前，会使用runtime.memmove来拷贝函数的参数。现在的话只是负责重置协程的栈空间，将runtime.goexit作为栈底由它来进行协程的退出处理，然后设置入口函数的 PCnewg.startpc = fn.fn表示从这里开始执行，设置完成后，此时 G 的状态为_Grunnable。\",\"totalSize := uintptr(4*goarch.PtrSize + sys.MinFrameSize) // extra space in case of reads slightly beyond frame totalSize = alignUp(totalSize, sys.StackAlign) sp := newg.stack.hi - totalSize spArg := sp if usesLR { // caller's LR *(*uintptr)(unsafe.Pointer(sp)) = 0 prepGoExitFrame(sp) spArg += sys.MinFrameSize } memclrNoHeapPointers(unsafe.Pointer(&newg.sched), unsafe.Sizeof(newg.sched)) newg.sched.sp = sp newg.stktopsp = sp newg.sched.pc = abi.FuncPCABI0(goexit) + sys.PCQuantum // +PCQuantum so that previous instruction is in same function newg.sched.g = guintptr(unsafe.Pointer(newg)) gostartcallfn(&newg.sched, fn) newg.parentGoid = callergp.goid newg.gopc = callerpc newg.ancestors = saveAncestors(callergp) newg.startpc = fn.fn casgstatus(newg, _Gdead, _Grunnable)\",\"最后设置 G 的唯一标识符，然后释放 M，返回创建的协程 G。\",\"newg.goid = pp.goidcache pp.goidcache++ releasem(mp) return newg\",\"协程创建完毕后，会由runtime.runqput函数尝试将其放入 P 的本地队列中，如果放不下就放到全局队列中。在协程创建的整个过程中，其状态变化首先是由_Gidle变为_Gdead，设置好入口函数后由_Gdead变为_Grunnable。\"]},\"1096\":{\"h\":\"退出\",\"t\":[\"在创建的时候 go 就已经将runtime.goexit函数作为协程的栈底，那么当协程执行完毕后最终就会走入该函数，经过调用链goexit->goexit1->goexit0，最终由runtime.goexit0来负责协程的退出工作。\",\"func goexit0(gp *g) { mp := getg().m pp := mp.p.ptr() ... casgstatus(gp, _Grunning, _Gdead) ... gp.m = nil locked := gp.lockedm != 0 gp.lockedm = 0 mp.lockedg = 0 gp.preemptStop = false gp.paniconfault = false gp._defer = nil // should be true already but just in case. gp._panic = nil // non-nil for Goexit during panic. points at stack-allocated data. gp.writebuf = nil gp.waitreason = waitReasonZero gp.param = nil gp.labels = nil gp.timer = nil dropg() ... gfput(pp, gp) ... schedule() }\",\"该函数主要做了下面几个事情\",\"设置状态为_Gdead\",\"重置字段值\",\"dropg()切断 M 与 G 之间的关联\",\"gfput(pp, gp) 将当前 G 放入 P 的本地空闲列表中\",\"schedule()进行新一轮调度，将 M 的执行权让给其它的 G\",\"退出后，协程的状态由_Grunning变化为_Gdead，在以后新建协程时仍有可能被重复利用。\"]},\"1097\":{\"h\":\"系统调用\",\"t\":[\"当协程 G 在执行用户代码时如果进行了系统调用，触发系统调用的方法有两种\",\"syscall标准库的系统调用\",\"cgo 调用\",\"因为系统调用会阻塞工作线程，所以在此之前需要进行准备工作，由runtime.entersyscall函数完成这一过程，但前者也只是对runtime.reentersyscall函数的一个简单调用，实际的工作是由后者来完成的。首先会锁住当前的 M，在进行准备期间 G 禁止被抢占，也禁止栈扩张，设置gp.stackguard0 = stackPreempt表示在准备工作完成后将 P 的执行权将被其它的 G 抢占，然后保留协程的执行现场，方便系统调用返回后恢复。\",\"gp := getg() // Disable preemption because during this function g is in Gsyscall status, // but can have inconsistent g->sched, do not let GC observe it. gp.m.locks++ // Entersyscall must not call any function that might split/grow the stack. // (See details in comment above.) // Catch calls that might, by replacing the stack guard with something that // will trip any stack check and leaving a flag to tell newstack to die. gp.stackguard0 = stackPreempt gp.throwsplit = true // Leave SP around for GC and traceback. save(pc, sp) gp.syscallsp = sp gp.syscallpc = pc\",\"再之后，因为了防止长时间阻塞而影响其它 G 的执行，M 与 P 会解绑，解绑后的 M 和 G 会因执行系统调用而阻塞，而 P 在解绑以后可能会与其它空闲的 M 绑定从而让 P 本地队列中其它的 G 能够继续工作。\",\"casgstatus(gp, _Grunning, _Gsyscall) gp.m.syscalltick = gp.m.p.ptr().syscalltick pp := gp.m.p.ptr() pp.m = 0 gp.m.oldp.set(pp) gp.m.p = 0 atomic.Store(&pp.status, _Psyscall) gp.m.locks--\",\"在准备工作完成后，释放 M 的锁，在此期间 G 的状态由_Grunning变为_Gsyscall，P 的状态变为_Psyscall。\",\"当系统调用返回后，线程 M 不再阻塞，对应的 G 也需要再次被调度来执行用户代码，由runtime.exitsyscall函数来完成这个善后的工作。首先锁住当前的 M，获取旧 P 的引用。\",\"gp := getg() gp.waitsince = 0 oldp := gp.m.oldp.ptr() gp.m.oldp = 0\",\"此时分为两种情况来处理，第一种情况是是否有 P 可以直接使用，runtime.exitsyscallfast函数会判断原来的 P 是否可用，即 P 的状态是否为_Psyscall，否则的话就会去找空闲的 P。\",\"func exitsyscallfast(oldp *p) bool { gp := getg() // Freezetheworld sets stopwait but does not retake P's. if sched.stopwait == freezeStopWait { return false } // Try to re-acquire the last P. if oldp != nil && oldp.status == _Psyscall && atomic.Cas(&oldp.status, _Psyscall, _Pidle) { // There's a cpu for us, so we can run. wirep(oldp) exitsyscallfast_reacquired() return true } // Try to get any other idle P. if sched.pidle != 0 { var ok bool systemstack(func() { ok = exitsyscallfast_pidle() }) if ok { return true } } return false }\",\"如果成功找到了可用的 P，M 会与 P 进行绑定，G 由_Gsyscall状态切换为_Grunning状态，然后通过runtime.GoschedG 主动让出执行权，P 进入调度循环寻找其它可用的 G。\",\"oldp := gp.m.oldp.ptr() gp.m.oldp = 0 if exitsyscallfast(oldp) { // There's a cpu for us, so we can run. gp.m.p.ptr().syscalltick++ // We need to cas the status and scan before resuming... casgstatus(gp, _Gsyscall, _Grunning) // Garbage collector isn't running (since we are), // so okay to clear syscallsp. gp.syscallsp = 0 gp.m.locks-- if gp.preempt { // restore the preemption request in case we've cleared it in newstack gp.stackguard0 = stackPreempt } else { // otherwise restore the real stackGuard, we've spoiled it in entersyscall/entersyscallblock gp.stackguard0 = gp.stack.lo + stackGuard } gp.throwsplit = false if sched.disable.user && !schedEnabled(gp) { // Scheduling of this goroutine is disabled. Gosched() } return }\",\"假如没有找到的话，M 会与 G 解绑，G 由_Gsyscall切换为_Grunnable状态，然后再次尝试是否能找到空闲的 P，如果没有找到就直接将 G 放入全局队列中，然后进入新一轮调度循环，旧 M 由runtime.stopm进入空闲状态，等待日后的新任务。如果 P 找到了的话，旧 M 和 G 与新的 P 进行关联，然后继续执行用户代码，状态由_Grunnable变为_Grunning。\",\"func exitsyscall0(gp *g) { casgstatus(gp, _Gsyscall, _Grunnable) dropg() lock(&sched.lock) var pp *p if schedEnabled(gp) { pp, _ = pidleget(0) } var locked bool if pp == nil { globrunqput(gp) } unlock(&sched.lock) if pp != nil { acquirep(pp) execute(gp, false) // Never returns. } stopm() schedule() // Never returns. }\",\"在退出系统调用后，G 的状态最终有两种结果，一种是等待被调度的_Grunnable，一种是继续运行的_Grunning。\"]},\"1098\":{\"h\":\"挂起\",\"t\":[\"当前协程因为一些原因挂起的时候，状态会由_Grunnable变为_Gwaiting，挂起的原因有很多，可以是因为通道阻塞，select，锁或者是time.sleep，更多原因见G 结构。拿time.Sleep举例，它实际上是链接到了runtime.timesleep，后者的代码如下。\",\"func timeSleep(ns int64) { if ns <= 0 { return } gp := getg() t := gp.timer if t == nil { t = new(timer) gp.timer = t } t.f = goroutineReady t.arg = gp t.nextwhen = nanotime() + ns if t.nextwhen < 0 { // check for overflow. t.nextwhen = maxWhen } gopark(resetForSleep, unsafe.Pointer(t), waitReasonSleep, traceBlockSleep, 1) }\",\"可以看出，它通过getg获取当前的协程，再通过runtime.gopark使得当前的协程挂起。runtime.gopark会更新 G 和 M 的阻塞原因，释放 M 的锁\",\"mp := acquirem() gp := mp.curg status := readgstatus(gp) if status != _Grunning && status != _Gscanrunning { throw(\\\"gopark: bad g status\\\") } mp.waitlock = lock mp.waitunlockf = unlockf gp.waitreason = reason mp.waitTraceBlockReason = traceReason mp.waitTraceSkip = traceskip releasem(mp) // can't do anything that might move the G between Ms here. mcall(park_m)\",\"然后切换到系统栈上由runtime.park_m来将 G 的状态切换为_Gwaiting，然后切断 M 与 G 之间的关联并进入新的调度循环从而将执行权让给其它的 G。挂起后，G 即不执行用户代码，也不在本地队列中，只是保持着对 M 和 P 的引用。\",\"mp := getg().m casgstatus(gp, _Grunning, _Gwaiting) dropg() schedule()\",\"在runtime.timesleep函数中有这么一行代码，指定了t.f的值\",\"t.f = goroutineReady\",\"这个runtime.goroutineReady函数的作用就是用于唤醒挂起的协程，它会调用runtime.ready函数来唤醒协程\",\"status := readgstatus(gp) // Mark runnable. mp := acquirem() casgstatus(gp, _Gwaiting, _Grunnable) runqput(mp.p.ptr(), gp, next) wakep() releasem(mp)\",\"唤醒后，将 G 的状态切换为_Grunnable，然后将 G 放入 P 的本地队列中等待日后被调度。\"]},\"1099\":{\"h\":\"协程栈\",\"t\":[\"go 语言中的协程是典型的有栈协程，每开启一个协程都会为其在堆上分配一个独立的栈空间，并且它会随着使用量的变化而增长或缩小。在调度器初始化的时候，runtime.stackinit函数负责来初始化全局的栈空间缓存stackpool和stackLarge。\",\"func stackinit() { if _StackCacheSize&_PageMask != 0 { throw(\\\"cache size must be a multiple of page size\\\") } for i := range stackpool { stackpool[i].item.span.init() lockInit(&stackpool[i].item.mu, lockRankStackpool) } for i := range stackLarge.free { stackLarge.free[i].init() lockInit(&stackLarge.lock, lockRankStackLarge) } }\",\"除此之外，每一个 P 都有一个自己独立的栈空间缓存mcache\",\"type p struct { ... mcache *mcache ... } type mcache struct { _ sys.NotInHeap nextSample uintptr scanAlloc uintptr tiny uintptr tinyoffset uintptr tinyAllocs uintptr alloc [numSpanClasses]*mspan stackcache [_NumStackOrders]stackfreelist flushGen atomic.Uint32 }\",\"线程缓存mcache是每一个线程独立的且不是分配在堆内存上，访问的时候不需要加锁，这三个栈缓存在后续分配空间的时候都会用到。\"]},\"1100\":{\"h\":\"分配\",\"t\":[\"在新建协程时，如果没有可重复利用的协程，就会选择为其分配一个新的栈空间，它的大小默认为 2KB。\",\"newg := gfget(pp) if newg == nil { newg = malg(stackMin) casgstatus(newg, _Gidle, _Gdead) allgadd(newg) // publishes with a g->status of Gdead so GC scanner doesn't look at uninitialized stack. }\",\"负责分配栈空间的函数就是runtime.stackalloc\",\"func stackalloc(n uint32) stack\",\"根据申请的栈内存大小是否小于 32KB 分为两种情况，32KB 同时也是 go 中判断是小对象还是大对象的标准。倘若小于这个值就会从stackpool缓存中去获取，当 M 与 P 绑定且 M 不允许被抢占时，就会去本地的线程缓存中获取。\",\"if n < fixedStack<<_NumStackOrders && n < _StackCacheSize { order := uint8(0) n2 := n for n2 > fixedStack { order++ n2 >>= 1 } var x gclinkptr if stackNoCache != 0 || thisg.m.p == 0 || thisg.m.preemptoff != \\\"\\\" { lock(&stackpool[order].item.mu) x = stackpoolalloc(order) unlock(&stackpool[order].item.mu) } else { c := thisg.m.p.ptr().mcache x = c.stackcache[order].list if x.ptr() == nil { stackcacherefill(c, order) x = c.stackcache[order].list } c.stackcache[order].list = x.ptr().next c.stackcache[order].size -= uintptr(n) } v = unsafe.Pointer(x) }\",\"倘若大于 32KB，就会去stackLarge缓存中获取，如果还不够的话就直接在堆上分配内存。\",\"else { var s *mspan npage := uintptr(n) >> _PageShift log2npage := stacklog2(npage) // Try to get a stack from the large stack cache. lock(&stackLarge.lock) if !stackLarge.free[log2npage].isEmpty() { s = stackLarge.free[log2npage].first stackLarge.free[log2npage].remove(s) } unlock(&stackLarge.lock) lockWithRankMayAcquire(&mheap_.lock, lockRankMheap) if s == nil { // Allocate a new stack from the heap. s = mheap_.allocManual(npage, spanAllocStack) if s == nil { throw(\\\"out of memory\\\") } osStackAlloc(s) s.elemsize = uintptr(n) } v = unsafe.Pointer(s.base()) }\",\"完事后返回栈空间的低地址和高地址\",\"return stack{uintptr(v), uintptr(v) + uintptr(n)}\"]},\"1101\":{\"h\":\"扩容\",\"t\":[\"默认的协程栈大小为 2KB，足够轻量，所以创建一个协程的成本非常低，但这不一定够用，当栈空间不够用的时候就需要扩容。编译器会在函数的开头插入runtime.morestack函数来检查当前协程是否需要进行栈扩容，如果需要的话就调用runtime.newstack来完成真正的扩容操作。\",\"提示\",\"由于morestack几乎会在所有函数的开头都被插入，所以栈扩容检查的时机也是一个协程抢占点。\",\"thisg := getg() gp := thisg.m.curg // Allocate a bigger segment and move the stack. oldsize := gp.stack.hi - gp.stack.lo newsize := oldsize * 2 // The goroutine must be executing in order to call newstack, // so it must be Grunning (or Gscanrunning). casgstatus(gp, _Grunning, _Gcopystack) // The concurrent GC will not scan the stack while we are doing the copy since // the gp is in a Gcopystack status. copystack(gp, newsize) casgstatus(gp, _Gcopystack, _Grunning) gogo(&gp.sched)\",\"可以看到，计算后的栈空间容量是原来的两倍，由runtime.copystack函数来完成栈拷贝的工作，在拷贝前 G 的状态由_Grunning切换为_Gcopystack。\",\"func copystack(gp *g, newsize uintptr) { old := gp.stack used := old.hi - gp.sched.sp // allocate new stack new := stackalloc(uint32(newsize)) // Compute adjustment. var adjinfo adjustinfo adjinfo.old = old adjinfo.delta = new.hi - old.hi // Copy the stack (or the rest of it) to the new location memmove(unsafe.Pointer(new.hi-ncopy), unsafe.Pointer(old.hi-ncopy), ncopy) // Adjust remaining structures that have pointers into stacks. // We have to do most of these before we traceback the new // stack because gentraceback uses them. adjustctxt(gp, &adjinfo) adjustdefers(gp, &adjinfo) adjustpanics(gp, &adjinfo) if adjinfo.sghi != 0 { adjinfo.sghi += adjinfo.delta } // Swap out old stack for new one gp.stack = new gp.stackguard0 = new.lo + stackGuard // NOTE: might clobber a preempt request gp.sched.sp = new.hi - used gp.stktopsp += adjinfo.delta // Adjust pointers in the new stack. var u unwinder for u.init(gp, 0); u.valid(); u.next() { adjustframe(&u.frame, &adjinfo) } stackfree(old) }\",\"该函数总共做了以下几个工作\",\"分配新的栈空间\",\"将旧栈内存通过runtime.memmove直接复制到新的栈空间中，\",\"调整包含栈指针的结构，比如 defer，panic 等\",\"更新 G 的栈空间字段\",\"通过runtime.adjustframe调整指向旧栈内存的指针\",\"释放旧栈的内存\",\"完成后，G 的状态由_Gcopystack切换为_Grunning，并由runtime.gogo函数让 G 继续执行用户代码。正是因为协程栈扩容的存在，所以 go 中的内存是不稳定的。\"]},\"1102\":{\"h\":\"收缩\",\"t\":[\"当 G 的状态为_Grunnable，_Gsyscall，_Gwaiting时，GC 会扫描协程栈的内存空间。\",\"func scanstack(gp *g, gcw *gcWork) int64 { switch readgstatus(gp) &^ _Gscan { case _Grunnable, _Gsyscall, _Gwaiting: // ok } ... if isShrinkStackSafe(gp) { // Shrink the stack if not much of it is being used. shrinkstack(gp) } ... }\",\"实际的栈收缩工作由runtime.shrinkstack来完成。\",\"func shrinkstack(gp *g) { if !isShrinkStackSafe(gp) { throw(\\\"shrinkstack at bad time\\\") } oldsize := gp.stack.hi - gp.stack.lo newsize := oldsize / 2 if newsize < fixedStack { return } avail := gp.stack.hi - gp.stack.lo if used := gp.stack.hi - gp.sched.sp + stackNosplit; used >= avail/4 { return } copystack(gp, newsize) }\",\"当使用的栈空间不足原有的 1/4 时，就会通过runtime.copystack将其缩小为原来的 1/2，后面的工作跟之前就没什么两样了。\"]},\"1103\":{\"h\":\"分段栈\",\"t\":[\"从copystack的过程可以看到，它会将旧栈内存拷贝到一个更大的栈空间上，不管是原来的栈还是新的栈它们的内存地址都是连续的。而在远古时期的 go 语言中，栈扩容时做法和现在不一样，那会觉得内存拷贝太消耗性能了，采用的是分段栈的思路，如果栈空间内存不够用了，就再申请一片新的栈空间，原有的栈空间内存不会释放也不会被拷贝，彼此之前通过指针链接起来，形成了一个栈链表，这也就是分段栈的由来，就如下图所示\",\"这样做的好处在于不用拷贝原有的栈，但缺点也十分的明显，就是会十分频繁的触发栈扩容和缩容。当栈空间的空闲内存所剩无几时，新的函数调用会触发栈的扩容，当这些函数返回时，不再需要新的栈空间了后就又会触发缩容，假如这些函数调用的频率非常高，那么就会非常频繁的触发扩容和缩容，这种操作所造成的性能损耗是非常大的。\",\"所以在 go1.4 之后换成了连续栈，连续栈因为分配了一个容量更大的栈空间，不会出现已使用内存达到临界值时因函数调用而频繁的触发扩缩容这种情况，并且由于内存地址是连续的，根据缓存的空间局部性原理而言，连续栈对 CPU 缓存也更加友好。\"]},\"1104\":{\"h\":\"调度循环\",\"t\":[\"在调度器初始化部分提到过，在runtime.mstart1函数中，M 与 P 成功关联后就会进入第一个runtime.schedule调度循环正式开始调度 G 以执行用户代码。在调度循环中，这一部分就主要是 P 在发挥作用。M 对应着系统线程，G 对应着入口函数也就是用户代码，但 P 并不像 M 和 G 一样有着对应的实体，它只是一个抽象的概念，作为中间人处理着 M 和 G 之间的关系。\",\"func schedule() { mp := getg().m top: pp := mp.p.ptr() pp.preempt = false if mp.spinning { resetspinning() } gp, inheritTime, tryWakeP := findRunnable() // blocks until work is available execute(gp, inheritTime) }\",\"上面的代码经过简化，删去了许多条件判断，最核心的点只有两个runtime.findRunnable和runtime.execute，前者负责找到一个 G，并且一定会返回一个可用的 G，后者负责让 G 继续执行用户代码。\",\"对于findRunnable函数而言，第一个 G 来源就是 P 的本地队列\",\"// local runq if gp, inheritTime := runqget(pp); gp != nil { return gp, inheritTime, false }\",\"如果本地队列没有 G，那么就尝试从全局队列中获取\",\"// global runq if sched.runqsize != 0 { lock(&sched.lock) gp := globrunqget(pp, 0) unlock(&sched.lock) if gp != nil { return gp, false, false } }\",\"如果本地和全局队列中都没有找到，就会尝试从网络轮询器中获取\",\"if netpollinited() && netpollWaiters.Load() > 0 && sched.lastpoll.Load() != 0 { if list := netpoll(0); !list.empty() { // non-blocking gp := list.pop() injectglist(&list) casgstatus(gp, _Gwaiting, _Grunnable) if traceEnabled() { traceGoUnpark(gp, 0) } return gp, false, false } }\",\"倘若还找不到，最终就会从其它的 P 去偷取它本地队列中的 G。在创建协程的时候提到过，P 的本地队列中的 G 一大来源是当前协程派生的子协程，然而并非所有的协程都会创建子协程，这样就可能会出现一部分 P 非常忙碌，另一部分 P 是空闲的，这会导致一种情况，有的 G 因为一直在等待而迟迟无法被运行，而另一边的 P 十分清闲，什么事也没有。为了能够压榨所有的 P，让它们发挥最大的工作效率，当 P 找不到 G 的时候，就会去其它 P 的本地队列中“偷取”能够执行的 G，这样一来，每一个 P 都能拥有较为均匀的 G 队列，就很少会出现 P 与 P 之间隔岸观火的情况了。\",\"gp, inheritTime, tnow, w, newWork := stealWork(now) if gp != nil { // Successfully stole. return gp, inheritTime, false }\",\"runtime.stealWork会随机选一个 P 来进行偷取，真正的偷取工作由runtime.runqgrab函数来完成，它会尝试偷取该 P 本地队列一半的 G。\",\"for { h := atomic.LoadAcq(&pp.runqhead) // load-acquire, synchronize with other consumers t := atomic.LoadAcq(&pp.runqtail) // load-acquire, synchronize with the producer n := t - h n = n - n/2 if n > uint32(len(pp.runq)/2) { // read inconsistent h and t continue } for i := uint32(0); i < n; i++ { g := pp.runq[(h+i)%uint32(len(pp.runq))] batch[(batchHead+i)%uint32(len(batch))] = g } if atomic.CasRel(&pp.runqhead, h, h+n) { // cas-release, commits consume return n } }\",\"整个偷取工作会进行四次，如果四次后也偷不到 G 那么就返回。如果最终无法找到，当前 M 会被runtime.stopm给暂停，直到被唤醒后继续重复上面的步骤。当找到并返回了一个 G 后，就将其交给runtime.execute来运行 G。\",\"mp := getg().m mp.curg = gp gp.m = mp casgstatus(gp, _Grunnable, _Grunning) gp.waitsince = 0 gp.preempt = false gp.stackguard0 = gp.stack.lo + stackGuard gogo(&gp.sched)\",\"首先更新 M 的curg，然后更新 G 的状态为_Grunning，最后交给runtime.gogo来恢复 G 的运行。\",\"总的的来说，在调度循环中 G 的来源根据优先级来分有四个\",\"P 的本地队列\",\"全局队列\",\"网络轮询器\",\"从其它 P 的本地队列偷\",\"runtime.execute在执行过后并不会返回，刚获取的 G 也不会永远执行下去，在某一个时机触发调度以后，它的执行权会被剥夺，然后进入新一轮调度循环，将执行权让给其它的 G。\"]},\"1105\":{\"h\":\"调度策略\",\"t\":[\"不同的 G 执行用户代码的时长可能不同，部分 G 可能会耗时很长，部分 G 耗时很短，执行时机长的 G 可能会导致其它的 G 迟迟无法得到执行，所以交替执行 G 才是正确的方式，在操作系统中这种工作方式被称之为并发。\"]},\"1106\":{\"h\":\"协作式调度\",\"t\":[\"协作式调度的基本思路是，让 G 自行将执行权让给其它的 G，主要有两种方法。\",\"第一种方法就是在用户代码中主动让权，go 提供了runtime.Gosched()函数，使用者可以自己决定在何时让出执行权，不过在很多时候调度器内部的工作细节都使用者来说都是一个黑盒，很难去判断到底什么时候该主动让权，对使用者的要求比较高，并且 go 的调度器力求对使用者屏蔽大部分细节，追求更简单的使用方法，在这种情况下让使用者也参与到调度工作中并非是什么好事。\",\"第二种方法是抢占标记，虽然它的名字有抢占的字眼，但它本质上还是协作式调度策略。思路就是在函数的头部插入抢占检测代码runtime.morestack()，插入的过程在编译期完成，前面提到过它原本是用于进行栈扩容检测的函数，因为其检测点是每一个函数的调用，这同样是一个进行抢占检测的良好时机。runtime.newstack函数上半部分都是在进行抢占检测，下半部分则在进行栈扩容检测，前面为了避免干扰就将这部分省掉了，现在就来看看这部分干了什么。首先会根据gp.stackguard0进行抢占判断，如果不需要的话就继续执行用户代码。\",\"stackguard0 := atomic.Loaduintptr(&gp.stackguard0) preempt := stackguard0 == stackPreempt if preempt { if !canPreemptM(thisg.m) { gp.stackguard0 = gp.stack.lo + stackGuard gogo(&gp.sched) // never return } }\",\"当g.stackguard0 == stackPreempt时，由runtime.canPreemptM()函数来判断协程条件是否需要被抢占，代码如下，\",\"func canPreemptM(mp *m) bool { return mp.locks == 0 && mp.mallocing == 0 && mp.preemptoff == \\\"\\\" && mp.p.ptr().status == _Prunning }\",\"可以看到能够被抢占需要满足四个条件\",\"M 没有被锁住\",\"没有正在分配内存\",\"没有禁用抢占\",\"P 处于_Prunning状态\",\"而在以下两种种情况会将g.stackguard0设置为stackPreempt\",\"需要进行垃圾回收时\",\"发生系统调用时\",\"if preempt { if gp.preemptShrink { gp.preemptShrink = false shrinkstack(gp) } // Act like goroutine called runtime.Gosched. gopreempt_m(gp) // never return }\",\"最后就会走到runtime.gopreempt_m()主动让出当前协程的执行权。首先切断 M 与 G 之间的联系，状态变为_Grunnbale，然后将 G 放入全局队列中，最后进入调度循环将执行权让给其它的 G。\",\"casgstatus(gp, _Grunning, _Grunnable) dropg() lock(&sched.lock) globrunqput(gp) unlock(&sched.lock) schedule()\",\"这样一来，所有的协程在进行函数调用时都可能会进入该函数进行抢占检测，这种策略得依赖函数调用这一时机才能触发抢占并且主动让权。在 1.14 之前，go 一直都是沿用的这种调度策略，但这样会有一个问题，如果没有函数调用，就没法检测了，比如下面这段经典代码，应该在很多教程中都有出现\",\"func main() { // 限制P的数量只能为1 runtime.GOMAXPROCS(1) // 协程1 go func() { for { // 该协程不停的空转 } }() // 进入系统调用，主协程让权给其它协程 time.Sleep(time.Millisecond) println(\\\"exit\\\") }\",\"代码中创建了一个空转的协程 1，然后主协程因为系统调用主动让权，此时协程 1 正在被调度，但因为它根本就不调用函数，也就没法进行抢占检测，由于 P 只有一个，没有其它空闲的 P，这样会导致主协程永远无法被调度，exit也就永远无法输出，不过这种问题也仅限于 go1.14 之前。\"]},\"1107\":{\"h\":\"抢占式调度\",\"t\":[\"官方在 go1.14 加入了基于信号的抢占式调度策略，这是一种异步抢占策略，通过异步线程发送信号的方式来进行抢占线程，基于信号的抢占式调度目前只有有两个入口，分别是系统监控和 GC。\",\"在系统监控的循环中，会遍历每一个 P，如果 P 正在调度的 G 执行时间超过了 10ms，就会强制触发抢占。这部分工作由runtime.retake函数完成，下面是简化的后代码。\",\"func retake(now int64) uint32 { n := 0 lock(&allpLock) for i := 0; i < len(allp); i++ { pp := allp[i] if pp == nil { continue } pd := &pp.sysmontick s := pp.status sysretake := false if s == _Prunning || s == _Psyscall { // Preempt G if it's running for too long. t := int64(pp.schedtick) if int64(pd.schedtick) != t { pd.schedtick = uint32(t) pd.schedwhen = now } else if pd.schedwhen+forcePreemptNS <= now { preemptone(pp) sysretake = true } } } unlock(&allpLock) return uint32(n) }\",\"当需要进行垃圾回收时，如果 G 是状态是_Grunning，也就是还在运行，同样也会触发抢占。\",\"func suspendG(gp *g) suspendGState { for i := 0; ; i++ { switch s := readgstatus(gp); s { case _Grunning: gp.preemptStop = true gp.preempt = true gp.stackguard0 = stackPreempt casfrom_Gscanstatus(gp, _Gscanrunning, _Grunning) if preemptMSupported && debug.asyncpreemptoff == 0 && needAsync { now := nanotime() if now >= nextPreemptM { nextPreemptM = now + yieldDelay/2 preemptM(asyncM) } } ...... ...... func preemptM(mp *m) { if mp.signalPending.CompareAndSwap(0, 1) { if GOOS == \\\"darwin\\\" || GOOS == \\\"ios\\\" { pendingPreemptSignals.Add(1) } signalM(mp, sigPreempt) } }\",\"两个抢占入口最后都会进入runtime.preemptM函数中，由它来完成抢占信号的发送。当信号成功发送后，在runtime.mstart时通过runtime.initsig注册的信号处理器回调函数runtime.sighandler就会派上用场，如果检测到发送的是抢占信号，就会开始抢占。\",\"func sighandler(sig uint32, info *siginfo, ctxt unsafe.Pointer, gp *g) { ... if sig == sigPreempt && debug.asyncpreemptoff == 0 && !delayedSignal { // Might be a preemption signal. doSigPreempt(gp, c) } ... }\",\"doSigPreempt会修改目标协程的上下文，注入调用runtime.asyncPreempt。\",\"func doSigPreempt(gp *g, ctxt *sigctxt) { // Check if this G wants to be preempted and is safe to // preempt. if wantAsyncPreempt(gp) { if ok, newpc := isAsyncSafePoint(gp, ctxt.sigpc(), ctxt.sigsp(), ctxt.siglr()); ok { // Adjust the PC and inject a call to asyncPreempt. ctxt.pushCall(abi.FuncPCABI0(asyncPreempt), newpc) } } ...\",\"这样一来当重新切换回用户代码的时候，目标协程就会走到runtime.asyncPreempt函数，在该函数中涉及到runtime.asyncPreempt2的调用。\",\"TEXT ·asyncPreempt(SB),NOSPLIT|NOFRAME,$0-0 PUSHQ BP MOVQ SP, BP // Save flags before clobbering them PUSHFQ // obj doesn't understand ADD/SUB on SP, but does understand ADJSP ADJSP $368 // But vet doesn't know ADJSP, so suppress vet stack checking ... CALL ·asyncPreempt2(SB) ... RET\",\"它会让当前协程停止工作并进行一轮新的调度循环从而将执行权让给其它协程。\",\"func asyncPreempt2() { gp := getg() gp.asyncSafePoint = true if gp.preemptStop { mcall(preemptPark) } else { mcall(gopreempt_m) } gp.asyncSafePoint = false }\",\"这一过程过程都发生在runtime.asyncPreempt函数中，它由汇编实现（位于runtime/preempt_*.s中）并且会在调度完成后恢复先前被修改的协程上下文，以便让该协程在日后能够正常恢复。在采用异步抢占策略以后，之前的例子就不再会永久阻塞主协程了，当空转协程运行一定时间后就会被强制执行调度循环，从而将执行权让给了主协程，最终让程序能够正常结束。\"]},\"1108\":{\"h\":\"小结\",\"t\":[\"总的来说，触发调度的时机有以下几个：\",\"函数调用\",\"系统调用\",\"系统监控\",\"垃圾回收，垃圾回收对于执行时间过长的协程也会进行抢占\",\"协程因管道，锁等原因而挂起\",\"调度策略主要就是两大类，协作式和抢占式，协作式是主动让出执行权，抢占式是异步抢占执行权，两者共存才形成了如今的调度器。\"]},\"1109\":{\"h\":\"memory\",\"t\":[\"与传统的 c/c++不同，go 是一个 gc 语言，大多数情况下内存的分配和销毁由 go 来进行自动管理，一个对象的内存应该被分配到栈上还是堆上由编译器来进行决定，基本上不需要用户参与内存管理，用户要做的仅仅就是使用内存。在 go 中堆内存管理主要有两个大的组件，内存分配器负责堆内存的分配，垃圾回收器负责回收释放无用的堆内存，本文主要讲的就是内存分配器的工作方式，go 内存分配器很大程度上受到了谷歌的 TCMalloc 内存分配器的影响。\"]},\"1110\":{\"h\":\"分配器\",\"t\":[\"在 go 中有两种内存分配器，一种是线性分配器，另一种就是链式分配。\"]},\"1111\":{\"h\":\"线性分配\",\"t\":[\"线性分配器对应着runtime.linearAlloc结构体，如下所示\",\"type linearAlloc struct { next uintptr // next free byte mapped uintptr // one byte past end of mapped space end uintptr // end of reserved space mapMemory bool // transition memory from Reserved to Ready if true }\",\"该分配器会向操作系统预先申请一片连续的内存空间，next指向可使用的内存地址，end指向内存空间的末尾地址，大概可以理解为下图。\",\"线性分配器的内存分配方式非常好理解，根据要申请的内存大小检查是否有足够的剩余空间来容纳，如果足够的话就更新next字段并返回剩余空间的起始地址，代码如下。\",\"func (l *linearAlloc) alloc(size, align uintptr, sysStat *sysMemStat) unsafe.Pointer { p := alignUp(l.next, align) if p+size > l.end { return nil } l.next = p + size return unsafe.Pointer(p) }\",\"这种分配方式的优点就是快速和简单，缺点也相当明显，就是无法重新利用已释放的内存，因为next字段只会指向剩余的空间内存地址，对于先前已使用后被释放的内存空间则无法感知，这样做会造成很大的内存空间浪费，如下图所示。\",\"所以线性分配并不是 go 中主要的分配方式，它只在 32 位机器上作为内存预分配的功能来使用。\"]},\"1112\":{\"h\":\"链式分配\",\"t\":[\"链式分配器器对应着结构体runtime.fixalloc，链式分配器分配的内存不是连续的，以单向链表的形式存在。链式分配器由若干个固定大小的内存块组成，而每一个内存块由若干个固定大小的内存片组成，每一次进行内存分配时，都会使用一个固定大小的内存片。\",\"type fixalloc struct { size uintptr first func(arg, p unsafe.Pointer) // called first time p is returned arg unsafe.Pointer list *mlink chunk uintptr // use uintptr instead of unsafe.Pointer to avoid write barriers nchunk uint32 // bytes remaining in current chunk nalloc uint32 // size of new chunks in bytes inuse uintptr // in-use bytes now stat *sysMemStat zero bool // zero allocations } type mlink struct { _ sys.NotInHeap next *mlink }\",\"它的字段不像线性分配器一样简单易懂，这里简单介绍一下重要的\",\"size，指的是每次内存分配时使用多少的内存。\",\"list，指向可复用内存片的头节点，每一片内存空间的大小由size决定。\",\"chunk，指向当前正在使用的内存块中的空闲地址\",\"nchunk，当前内存块的剩余可用字节数\",\"nalloc， 内存块的大小，固定为 16KB。\",\"inuse，总共已使用了多少字节的内存\",\"zero，在复用内存块时，是否将内存清零\",\"链式分配器持有着当前内存块和可复用内存片的引用，每一个内存块的大小都固定为 16KB，这个值在初始化时就被设置好了。\",\"const _FixAllocChunk = 16 << 10 func (f *fixalloc) init(size uintptr, first func(arg, p unsafe.Pointer), arg unsafe.Pointer, stat *sysMemStat) { if size > _FixAllocChunk { throw(\\\"runtime: fixalloc size too large\\\") } if min := unsafe.Sizeof(mlink{}); size < min { size = min } f.size = size f.first = first f.arg = arg f.list = nil f.chunk = 0 f.nchunk = 0 f.nalloc = uint32(_FixAllocChunk / size * size) f.inuse = 0 f.stat = stat f.zero = true }\",\"内存块的分布如下图所示，图中的内存块是按照创建时间的先后来进行排列的，实际上它们的地址是不连续的。\",\"链式分配器每一次分配的内存大小也是固定的，由fixalloc.size来决定，在分配时会首先检查是否有可复用的内存块，如果有的话则优先使用复用内存块，然后才会去使用当前的内存块，如果当前的内存块的剩余空间不足以容纳就会创建一个新的内存块，这部分逻辑对应如下代码。\",\"func (f *fixalloc) alloc() unsafe.Pointer { if f.size == 0 { print(\\\"runtime: use of FixAlloc_Alloc before FixAlloc_Init\\\\n\\\") throw(\\\"runtime: internal error\\\") } if f.list != nil { v := unsafe.Pointer(f.list) f.list = f.list.next f.inuse += f.size if f.zero { memclrNoHeapPointers(v, f.size) } return v } if uintptr(f.nchunk) < f.size { f.chunk = uintptr(persistentalloc(uintptr(f.nalloc), 0, f.stat)) f.nchunk = f.nalloc } v := unsafe.Pointer(f.chunk) if f.first != nil { f.first(f.arg, v) } f.chunk = f.chunk + f.size f.nchunk -= uint32(f.size) f.inuse += f.size return v }\",\"链式分配器的优点正是它可以复用被释放的内存，复用内存的基本单位是一个固定大小的内存片，其大小由fixalloc.size决定，在释放内存时，链式分配器会将该内存片作为头结点添加到空闲内存片链表中，代码如下所示\",\"func (f *fixalloc) free(p unsafe.Pointer) { f.inuse -= f.size v := (*mlink)(p) v.next = f.list f.list = v }\"]},\"1113\":{\"h\":\"内存组件\",\"t\":[\"go 中的内存分配器主要由msapn，heaparena，mcache，mcentral，mheap这几个组件构成，它们之间层层作用，管理着整个 go 的堆内存。\"]},\"1114\":{\"h\":\"mspan\",\"t\":[\"runtime.mspan是 go 内存分配中基本的单位，其结构如下\",\"type mspan struct { next *mspan // next span in list, or nil if none prev *mspan // previous span in list, or nil if none startAddr uintptr // address of first byte of span aka s.base() npages uintptr // number of pages in span freeindex uintptr spanclass spanClass // size class and noscan (uint8) needzero uint8 // needs to be zeroed before allocation elemsize uintptr // computed from sizeclass or from npages limit uintptr // end of data in span state mSpanStateBox // mSpanInUse etc; accessed atomically (get/set methods) nelems uintptr // number of object in the span. allocCache uint64 allocCount uint16 // number of allocated objects ... }\",\"mspan与mspan之间以双向链表的形式通过next和prev进行链接，内存地址并不连续。每一个msapn管理着mspan.npages个runtime.pageSize大小的页内存，通常来说页的大小就是 8KB，并且由mspan.startAddr记录着这些页的起始地址和mspan.limit记录着已使用内存的末端地址。每一个mspan所存放的元素大小elemsize是固定的，所以能容纳的元素数量也是固定的。由于数量固定，对象存放就像是数组一样分布在mspan中，范围为[0, nelems]，同时由freeindex记录着下一个可用于存放对象的索引。mspan总共有三种状态\",\"mSpanDead，内存已经被释放\",\"mSpanInUse，被分配到了堆上\",\"mSpanManual，被分配到了用于手动管理内存的部分，比如说栈。\",\"决定着mspan元素大小的是spanClass，spanClass自身是一个uint8类型的整数，高七位存放着表示0-67的 class 值，最后一位用于表示noscan即是否包含指针。\",\"type spanClass uint8 func (sc spanClass) sizeclass() int8 { return int8(sc >> 1) } func (sc spanClass) noscan() bool { return sc&1 != 0 }\",\"它总共有 68 种不同的值，所有值都以打表的形式存放于runtime.sizeclasses.go文件中，在运行时，使用spanClass通过runtime.class_to_size可获得mspan的对象大小，通过class_to_allocnpages可获得mspan的页数。\",\"class\",\"最大对象大小\",\"span 大小\",\"对象数量\",\"尾部浪费\",\"最大内存浪费率\",\"最小对齐\",\"1\",\"8\",\"8192\",\"1024\",\"0\",\"87.50%\",\"8\",\"2\",\"16\",\"8192\",\"512\",\"0\",\"43.75%\",\"16\",\"3\",\"24\",\"8192\",\"341\",\"8\",\"29.24%\",\"8\",\"4\",\"32\",\"8192\",\"256\",\"0\",\"21.88%\",\"32\",\"5\",\"48\",\"8192\",\"170\",\"32\",\"31.52%\",\"16\",\"6\",\"64\",\"8192\",\"128\",\"0\",\"23.44%\",\"64\",\"7\",\"80\",\"8192\",\"102\",\"32\",\"19.07%\",\"16\",\"8\",\"96\",\"8192\",\"85\",\"32\",\"15.95%\",\"32\",\"9\",\"112\",\"8192\",\"73\",\"16\",\"13.56%\",\"16\",\"10\",\"128\",\"8192\",\"64\",\"0\",\"11.72%\",\"128\",\"11\",\"144\",\"8192\",\"56\",\"128\",\"11.82%\",\"16\",\"12\",\"160\",\"8192\",\"51\",\"32\",\"9.73%\",\"32\",\"13\",\"176\",\"8192\",\"46\",\"96\",\"9.59%\",\"16\",\"14\",\"192\",\"8192\",\"42\",\"128\",\"9.25%\",\"64\",\"15\",\"208\",\"8192\",\"39\",\"80\",\"8.12%\",\"16\",\"16\",\"224\",\"8192\",\"36\",\"128\",\"8.15%\",\"32\",\"17\",\"240\",\"8192\",\"34\",\"32\",\"6.62%\",\"16\",\"18\",\"256\",\"8192\",\"32\",\"0\",\"5.86%\",\"256\",\"19\",\"288\",\"8192\",\"28\",\"128\",\"12.16%\",\"32\",\"20\",\"320\",\"8192\",\"25\",\"192\",\"11.80%\",\"64\",\"21\",\"352\",\"8192\",\"23\",\"96\",\"9.88%\",\"32\",\"22\",\"384\",\"8192\",\"21\",\"128\",\"9.51%\",\"128\",\"23\",\"416\",\"8192\",\"19\",\"288\",\"10.71%\",\"32\",\"24\",\"448\",\"8192\",\"18\",\"128\",\"8.37%\",\"64\",\"25\",\"480\",\"8192\",\"17\",\"32\",\"6.82%\",\"32\",\"26\",\"512\",\"8192\",\"16\",\"0\",\"6.05%\",\"512\",\"27\",\"576\",\"8192\",\"14\",\"128\",\"12.33%\",\"64\",\"28\",\"640\",\"8192\",\"12\",\"512\",\"15.48%\",\"128\",\"29\",\"704\",\"8192\",\"11\",\"448\",\"13.93%\",\"64\",\"30\",\"768\",\"8192\",\"10\",\"512\",\"13.94%\",\"256\",\"31\",\"896\",\"8192\",\"9\",\"128\",\"15.52%\",\"128\",\"32\",\"1024\",\"8192\",\"8\",\"0\",\"12.40%\",\"1024\",\"33\",\"1152\",\"8192\",\"7\",\"128\",\"12.41%\",\"128\",\"34\",\"1280\",\"8192\",\"6\",\"512\",\"15.55%\",\"256\",\"35\",\"1408\",\"16384\",\"11\",\"896\",\"14.00%\",\"128\",\"36\",\"1536\",\"8192\",\"5\",\"512\",\"14.00%\",\"512\",\"37\",\"1792\",\"16384\",\"9\",\"256\",\"15.57%\",\"256\",\"38\",\"2048\",\"8192\",\"4\",\"0\",\"12.45%\",\"2048\",\"39\",\"2304\",\"16384\",\"7\",\"256\",\"12.46%\",\"256\",\"40\",\"2688\",\"8192\",\"3\",\"128\",\"15.59%\",\"128\",\"41\",\"3072\",\"24576\",\"8\",\"0\",\"12.47%\",\"1024\",\"42\",\"3200\",\"16384\",\"5\",\"384\",\"6.22%\",\"128\",\"43\",\"3456\",\"24576\",\"7\",\"384\",\"8.83%\",\"128\",\"44\",\"4096\",\"8192\",\"2\",\"0\",\"15.60%\",\"4096\",\"45\",\"4864\",\"24576\",\"5\",\"256\",\"16.65%\",\"256\",\"46\",\"5376\",\"16384\",\"3\",\"256\",\"10.92%\",\"256\",\"47\",\"6144\",\"24576\",\"4\",\"0\",\"12.48%\",\"2048\",\"48\",\"6528\",\"32768\",\"5\",\"128\",\"6.23%\",\"128\",\"49\",\"6784\",\"40960\",\"6\",\"256\",\"4.36%\",\"128\",\"50\",\"6912\",\"49152\",\"7\",\"768\",\"3.37%\",\"256\",\"51\",\"8192\",\"8192\",\"1\",\"0\",\"15.61%\",\"8192\",\"52\",\"9472\",\"57344\",\"6\",\"512\",\"14.28%\",\"256\",\"53\",\"9728\",\"49152\",\"5\",\"512\",\"3.64%\",\"512\",\"54\",\"10240\",\"40960\",\"4\",\"0\",\"4.99%\",\"2048\",\"55\",\"10880\",\"32768\",\"3\",\"128\",\"6.24%\",\"128\",\"56\",\"12288\",\"24576\",\"2\",\"0\",\"11.45%\",\"4096\",\"57\",\"13568\",\"40960\",\"3\",\"256\",\"9.99%\",\"256\",\"58\",\"14336\",\"57344\",\"4\",\"0\",\"5.35%\",\"2048\",\"59\",\"16384\",\"16384\",\"1\",\"0\",\"12.49%\",\"8192\",\"60\",\"18432\",\"73728\",\"4\",\"0\",\"11.11%\",\"2048\",\"61\",\"19072\",\"57344\",\"3\",\"128\",\"3.57%\",\"128\",\"62\",\"20480\",\"40960\",\"2\",\"0\",\"6.87%\",\"4096\",\"63\",\"21760\",\"65536\",\"3\",\"256\",\"6.25%\",\"256\",\"64\",\"24576\",\"24576\",\"1\",\"0\",\"11.45%\",\"8192\",\"65\",\"27264\",\"81920\",\"3\",\"128\",\"10.00%\",\"128\",\"66\",\"28672\",\"57344\",\"2\",\"0\",\"4.91%\",\"4096\",\"67\",\"32768\",\"32768\",\"1\",\"0\",\"12.50%\",\"8192\",\"关于这些值的计算逻辑可以在runtime.mksizeclasses.go的printComment函数中找到，其中的最大内存浪费率的计算公式为\",\"float64((size-prevSize-1)*objects+tailWaste) / float64(spanSize)\",\"例如，当class为 2，其最大内存浪费率为\",\"((16-8-1)*512+0)/8192 = 0.4375\",\"当class值为 0 时，就是专用于分配大于 32KB 以上的大对象所使用的spanClass，基本上一个大对象就会占用一个mspan。所以，go 的堆内存实际上是由若干个不同固定大小的mspan组成。\"]},\"1115\":{\"h\":\"heaparena\",\"t\":[\"前面提到了mspan是由若干个页组成，但mspan只是持有页的地址引用，并不负责管理这些页，真正负责管理这些页内存的是runtime.heaparena。每一个heaparena管理着若干个页，heaparena的大小由runtime.heapArenaBytes决定，通常是 64MB。bitmap用于标识页中对应的地址是否存放了对象，zeroedBase就是该heaparena所管理的页内存的起始地址，并且由spans记录着每一个页由哪个mspan使用。\",\"type heapArena struct { _ sys.NotInHeap bitmap [heapArenaBitmapWords]uintptr noMorePtrs [heapArenaBitmapWords / 8]uint8 spans [pagesPerArena]*mspan pageInUse [pagesPerArena / 8]uint8 pageMarks [pagesPerArena / 8]uint8 pageSpecials [pagesPerArena / 8]uint8 checkmarks *checkmarksMap zeroedBase uintptr }\",\"有关于页与mspan记录的逻辑可以在mheap.setSpans方法中找到，如下所示\",\"func (h *mheap) setSpans(base, npage uintptr, s *mspan) { p := base / pageSize ai := arenaIndex(base) ha := h.arenas[ai.l1()][ai.l2()] for n := uintptr(0); n < npage; n++ { i := (p + n) % pagesPerArena if i == 0 { ai = arenaIndex(base + n*pageSize) ha = h.arenas[ai.l1()][ai.l2()] } ha.spans[i] = s } }\",\"在 go 堆中，是由一个二维的heaparena数组来管理所有的页内存，参见mheap.arenas字段。\",\"type mheap struct { arenas [1 << arenaL1Bits]*[1 << arenaL2Bits]*heapArena }\",\"在 64 位 windows 平台上，数组的一维是1 << 6，二维是1 << 16，在 64 位 linux 平台上，一维则是 1，二维就是1 << 22。这个由所有heaparena组成的二维数组就构成了 go 运行时的虚拟内存空间，总体来看就如下图所示。\",\"尽管heaparena之间是相邻的，但它们所管理的页内存之间是不连续的。\"]},\"1116\":{\"h\":\"mcache\",\"t\":[\"mcache对应着runtime.mcache结构体，在并发调度一文中就已经出现过，尽管它的名字叫mcache但它实际上是与处理器 P 绑定的。mcache是每一个处理器 P 上的内存缓存，其中包含了mspan链表数组alloc，数组的大小固定为136，刚好是spanClass数量的两倍，还有微对象缓存tiny，其中tiny指向微对象内存的起始地址，tinyoffset则是空闲内存相对于起始地址的偏移量，tinyAllocs表示分配了多少个微对象。关于栈缓存stackcached，可以前往栈内存分配进行了解。\",\"type mcache struct { _ sys.NotInHeap nextSample uintptr // trigger heap sample after allocating this many bytes scanAlloc uintptr // bytes of scannable heap allocated tiny uintptr tinyoffset uintptr tinyAllocs uintptr alloc [numSpanClasses]*mspan stackcache [_NumStackOrders]stackfreelist flushGen atomic.Uint32 }\",\"在刚初始化时，mcache中的alloc中的链表都只包含一个空的头结点runtime.emptymspan，也就是没有可用内存的mspan。\",\"func allocmcache() *mcache { var c *mcache systemstack(func() { lock(&mheap_.lock) c = (*mcache)(mheap_.cachealloc.alloc()) c.flushGen.Store(mheap_.sweepgen) unlock(&mheap_.lock) }) for i := range c.alloc { c.alloc[i] = &emptymspan } c.nextSample = nextSample() return c }\",\"仅当在需要进行内存分配时，才会向mcentral申请一个新的mspan来替换原来的空 span，这部分的工作由mcache.refill方法完成，它唯一的调用入口就是runtime.mallocgc函数，下面是简化后的代码。\",\"func (c *mcache) refill(spc spanClass) { // Return the current cached span to the central lists. s := c.alloc[spc] // Get a new cached span from the central lists. s = mheap_.central[spc].mcentral.cacheSpan() if s == nil { throw(\\\"out of memory\\\") } c.scanAlloc = 0 c.alloc[spc] = s }\",\"使用mcache的好处在于内存分配时不需要全局锁，不过当其内存不足时需要访问mcentral，这时仍然需要加锁。\"]},\"1117\":{\"h\":\"mcentral\",\"t\":[\"runtime.mcentral管理着堆中所有存放着小对象的mspan，在mcache申请内存时也是由mcentral进行分配。\",\"type mcentral struct { _ sys.NotInHeap spanclass spanClass partial [2]spanSet full [2]spanSet }\",\"mcentral的字段很少，spanClass表示所存储的mspan类型，partial和full是两个spanSet，前者存放有空闲内存的mspan，后者存放无空闲内存的mspan。mcentral由mheap堆直接进行管理，在运行时总共有 136 个mcentral。\",\"type mheap struct { central [numSpanClasses]struct { mcentral mcentral pad [(cpu.CacheLinePadSize - unsafe.Sizeof(mcentral{})%cpu.CacheLinePadSize) % cpu.CacheLinePadSize]byte } }\",\"mcentral主要负责两个工作，当内存足够时向mcache分配可用的mspan，当内存不足时向mheap申请分配一个新的mspan。向mcache分配mspan的工作由mcentral.cacheSpan方法来完成。首先会在空闲列表的已清扫集合中寻找可用的mspan。\",\"// Try partial swept spans first. sg := mheap_.sweepgen if s = c.partialSwept(sg).pop(); s != nil { goto havespan }\",\"如果没找到，就在空闲列表的未清扫集合中寻找可用的mspan\",\"for ; spanBudget >= 0; spanBudget-- { s = c.partialUnswept(sg).pop() if s == nil { break } if s, ok := sl.tryAcquire(s); ok { s.sweep(true) sweep.active.end(sl) goto havespan } }\",\"如果仍然没有找到，就到非空闲列表的未清扫集合去寻找\",\"for ; spanBudget >= 0; spanBudget-- { s = c.fullUnswept(sg).pop() if s == nil { break } if s, ok := sl.tryAcquire(s); ok { s.sweep(true) freeIndex := s.nextFreeIndex() if freeIndex != s.nelems { s.freeindex = freeIndex sweep.active.end(sl) goto havespan } c.fullSwept(sg).push(s.mspan) } }\",\"如果最终还是没有找到，那么就会由mcentral.grow方法向mheap申请分配一个新的mspan。\",\"s = c.grow() if s == nil { return nil }\",\"在正常情况下，无论如何都会返回一个可用的mspan。\",\"havespan: freeByteBase := s.freeindex &^ (64 - 1) whichByte := freeByteBase / 8 // Init alloc bits cache. s.refillAllocCache(whichByte) s.allocCache >>= s.freeindex % 64 return s\",\"对于向mheap申请mspan的过程，实则是调用了mheap.alloc方法，该方法会返回一个新的mspan。\",\"func (c *mcentral) grow() *mspan { npages := uintptr(class_to_allocnpages[c.spanclass.sizeclass()]) size := uintptr(class_to_size[c.spanclass.sizeclass()]) s := mheap_.alloc(npages, c.spanclass) if s == nil { return nil } n := s.divideByElemSize(npages << _PageShift) s.limit = s.base() + size*n s.initHeapBits(false) return s }\",\"将其初始化好后就可以分配给mcache使用。\"]},\"1118\":{\"h\":\"mheap\",\"t\":[\"runtimme.mheap是 go 语言堆内存的管理者，在运行时它作为全局变量runtime.mheap_而存在。\",\"var mheap_ mheap\",\"它管理着所有被创建的mspan，所有的mcentral，以及所有的heaparena，还有许多其它的各式各样的分配器，其简化后的结构如下所示\",\"type mheap struct { _ sys.NotInHeap lock mutex allspans []*mspan // all spans out there pagesInUse atomic.Uintptr // pages of spans in stats mSpanInUse pagesSwept atomic.Uint64 // pages swept this cycle pagesSweptBasis atomic.Uint64 // pagesSwept to use as the origin of the sweep ratio arenas [1 << arenaL1Bits]*[1 << arenaL2Bits]*heapArena allArenas []arenaIdx sweepArenas []arenaIdx central [numSpanClasses]struct { mcentral mcentral pad [(cpu.CacheLinePadSize - unsafe.Sizeof(mcentral{})%cpu.CacheLinePadSize) % cpu.CacheLinePadSize]byte } pages pageAlloc // page allocation data structure spanalloc fixalloc // allocator for span* cachealloc fixalloc // allocator for mcache* specialfinalizeralloc fixalloc // allocator for specialfinalizer* specialprofilealloc fixalloc // allocator for specialprofile* specialReachableAlloc fixalloc // allocator for specialReachable specialPinCounterAlloc fixalloc // allocator for specialPinCounter arenaHintAlloc fixalloc // allocator for arenaHints }\",\"对于mheap而言，在运行时主要有以下四个工作要做\",\"初始化堆\",\"分配mspan\",\"释放mspan\",\"堆扩容\",\"下面按照顺序来讲讲这四件事。\"]},\"1119\":{\"h\":\"初始化\",\"t\":[\"堆的初始化时期位于程序的引导阶段，同时也是调度器的初始化阶段，其调用顺序为\",\"schedinit() -> mallocinit() -> mheap_.init()\",\"在初始化时期，它主要是负责执行各个分配器的初始化工作\",\"func (h *mheap) init() { h.spanalloc.init(unsafe.Sizeof(mspan{}), recordspan, unsafe.Pointer(h), &memstats.mspan_sys) h.cachealloc.init(unsafe.Sizeof(mcache{}), nil, nil, &memstats.mcache_sys) h.specialfinalizeralloc.init(unsafe.Sizeof(specialfinalizer{}), nil, nil, &memstats.other_sys) h.specialprofilealloc.init(unsafe.Sizeof(specialprofile{}), nil, nil, &memstats.other_sys) h.specialReachableAlloc.init(unsafe.Sizeof(specialReachable{}), nil, nil, &memstats.other_sys) h.specialPinCounterAlloc.init(unsafe.Sizeof(specialPinCounter{}), nil, nil, &memstats.other_sys) h.arenaHintAlloc.init(unsafe.Sizeof(arenaHint{}), nil, nil, &memstats.other_sys) h.spanalloc.zero = false for i := range h.central { h.central[i].mcentral.init(spanClass(i)) } h.pages.init(&h.lock, &memstats.gcMiscSys, false) }\",\"其中就包括了负责分配mspan的分配器mheap.spanalloc和负责页分配的分配器mheap.pages，以及所有mcentral的初始化。\"]},\"1120\":{\"h\":\"分配\",\"t\":[\"在mheap中，mspan的分配都由mheap.allocSpan方法来完成\",\"func (h *mheap) allocSpan(npages uintptr, typ spanAllocType, spanclass spanClass) (s *mspan)\",\"如果申请分配的内存足够小，即满足npages < pageCachePages/4，那么就会尝试不加锁在本地的 P 中的mspan缓存中去获取一个可用的mspan，倘若 P 的缓存是空的话，还会先进行初始化\",\"// If the cache is empty, refill it. if c.empty() { lock(&h.lock) *c = h.pages.allocToCache() unlock(&h.lock) }\",\"然后再从 P 缓存中获取，由mheap.tryAllocMSpan方法完成。\",\"pp := gp.m.p.ptr() if !needPhysPageAlign && pp != nil && npages < pageCachePages/4 { c := &pp.pcache base, scav = c.alloc(npages) if base != 0 { s = h.tryAllocMSpan() if s != nil { goto HaveSpan } } }\",\"从 P 缓存中获取mspan的代码如下，它会尝试获取缓存中最后一个mspan。\",\"func (h *mheap) tryAllocMSpan() *mspan { pp := getg().m.p.ptr() // If we don't have a p or the cache is empty, we can't do // anything here. if pp == nil || pp.mspancache.len == 0 { return nil } // Pull off the last entry in the cache. s := pp.mspancache.buf[pp.mspancache.len-1] pp.mspancache.len-- return s }\",\"如果申请的内存比较大的话，就会在堆上分配内存，这个过程中需要持有锁\",\"lock(&h.lock) if base == 0 { // Try to acquire a base address. base, scav = h.pages.alloc(npages) if base == 0 { var ok bool growth, ok = h.grow(npages) if !ok { unlock(&h.lock) return nil } base, scav = h.pages.alloc(npages) if base == 0 { throw(\\\"grew heap, but no adequate free space found\\\") } } } if s == nil { // We failed to get an mspan earlier, so grab // one now that we have the heap lock. s = h.allocMSpanLocked() } unlock(&h.lock)\",\"首先会使用pageAlloc.alloc来为其分配足够的页内存，如果堆内存不够的会就由mheap.grow来进行扩容。页内存分配完成后，就会由链式分配mheap.spanalloc分配 64 个mspan到 P 本地的缓存中，64 正好是缓存数组长度的一半，然后再从 P 缓存中返回一个可用的mspan。\",\"func (h *mheap) allocMSpanLocked() *mspan { assertLockHeld(&h.lock) pp := getg().m.p.ptr() if pp == nil { // We don't have a p so just do the normal thing. return (*mspan)(h.spanalloc.alloc()) } // Refill the cache if necessary. if pp.mspancache.len == 0 { const refillCount = len(pp.mspancache.buf) / 2 for i := 0; i < refillCount; i++ { pp.mspancache.buf[i] = (*mspan)(h.spanalloc.alloc()) } pp.mspancache.len = refillCount } // Pull off the last entry in the cache. s := pp.mspancache.buf[pp.mspancache.len-1] pp.mspancache.len-- return s }\",\"根据上面两种情况，最终都能得到一个可用的mspan，最后将mspan初始化完毕后就可以返回了\",\"HaveSpan: h.initSpan(s, typ, spanclass, base, npages) return s\"]},\"1121\":{\"h\":\"释放\",\"t\":[\"既然mspan是由链式分配器的，自然释放内存的时候也由它来进行释放。\",\"func (h *mheap) freeSpanLocked(s *mspan, typ spanAllocType) { assertLockHeld(&h.lock) // Mark the space as free. h.pages.free(s.base(), s.npages) s.state.set(mSpanDead) h.freeMSpanLocked(s) }\",\"首先会通过页分配器mheap.pages标记指定的页内存被释放，然后将mspan的状态设置为mSpanDead，最后由mheap.spanalloc分配器释放mspan。\",\"func (h *mheap) freeMSpanLocked(s *mspan) { assertLockHeld(&h.lock) pp := getg().m.p.ptr() // First try to free the mspan directly to the cache. if pp != nil && pp.mspancache.len < len(pp.mspancache.buf) { pp.mspancache.buf[pp.mspancache.len] = s pp.mspancache.len++ return } // Failing that (or if we don't have a p), just free it to // the heap. h.spanalloc.free(unsafe.Pointer(s)) }\",\"如果 P 缓存未满的话，会将其放入 P 本地的缓存中继续使用，否则的话它会被释放回堆内存。\"]},\"1122\":{\"h\":\"扩容\",\"t\":[\"heaparena所管理的页内存空间并非在初期就已经全部申请好了，只有需要用到内存的时候才会去分配。负责给堆内存扩容的是mheap.grow方法，下面是简化后的代码。\",\"func (h *mheap) grow(npage uintptr) (uintptr, bool) { assertLockHeld(&h.lock) ask := alignUp(npage, pallocChunkPages) * pageSize totalGrowth := uintptr(0) end := h.curArena.base + ask nBase := alignUp(end, physPageSize) if nBase > h.curArena.end || end < h.curArena.base { av, asize := h.sysAlloc(ask, &h.arenaHints, true) if uintptr(av) == h.curArena.end { h.curArena.end = uintptr(av) + asize } else { // Switch to the new space. h.curArena.base = uintptr(av) h.curArena.end = uintptr(av) + asize } nBase = alignUp(h.curArena.base+ask, physPageSize) } ... }\",\"它首先会根据npage计算所需内存并进行对齐， 然后判断当前heaparena是否有足够的内存，如果不够的话就会由mheap.sysAlloc为当前heaparena申请更多内存或者分配一个新的heaparena。\",\"func (h *mheap) sysAlloc(n uintptr, hintList **arenaHint, register bool) (v unsafe.Pointer, size uintptr) { n = alignUp(n, heapArenaBytes) if hintList == &h.arenaHints { v = h.arena.alloc(n, heapArenaBytes, &gcController.heapReleased) if v != nil { size = n goto mapped } } ... }\",\"首先会尝试使用线性分配器mheap.arena在预分配的内存空间中申请一块内存，如果失败就根据hintList来进行扩容，hintList的类型为runtime.arenaHint，它专门记录了用于heaparena扩容相关的地址信息。\",\"for *hintList != nil { hint := *hintList p := hint.addr v = sysReserve(unsafe.Pointer(p), n) if p == uintptr(v) { hint.addr = p size = n break } if v != nil { sysFreeOS(v, n) } *hintList = hint.next h.arenaHintAlloc.free(unsafe.Pointer(hint)) }\",\"内存申请完毕后，再将其更新到arenas二维数组中\",\"for ri := arenaIndex(uintptr(v)); ri <= arenaIndex(uintptr(v)+size-1); ri++ { l2 := h.arenas[ri.l1()] var r *heapArena r = (*heapArena)(h.heapArenaAlloc.alloc(unsafe.Sizeof(*r), goarch.PtrSize, &memstats.gcMiscSys)) atomic.StorepNoWB(unsafe.Pointer(&l2[ri.l2()]), unsafe.Pointer(r)) }\",\"最后再由页分配器将这片内存标记为就绪状态。\",\"// Update the page allocator's structures to make this // space ready for allocation. h.pages.grow(v, nBase-v) totalGrowth += nBase - v\"]},\"1123\":{\"h\":\"对象分配\",\"t\":[\"go 在为对象分配内存的时候，根据大小划分为了三个不同的类型：\",\"微对象 - tiny，小于 16B\",\"小对象 - small，小于 32KB\",\"大对象 - large，大于 32KB\",\"根据三种不同的类型，在分配内存的时候会执行不同的逻辑。负责为对象分配内存的函数是runtime.mallocgc，其函数签名如下\",\"func mallocgc(size uintptr, typ *_type, needzero bool) unsafe.Pointer\",\"它只有三个参数，内存大小，类型，以及一个布尔值用于表示是否需要清空内存。它是所有 go 对象内存分配的入口函数，平时在使用new函数创建指针时同样也会走入该函数，当内存分配成功后，它返回的指针就是该对象的地址。在mpan部分中提到过，每一个mspan都拥有一个spanClass，spanClass决定了mspan的固定大小，并且 go 将对象从[0, 32KB]的范围分成了 68 种不同的大小，所以 go 内存由若干个不同的大小固定的mspan链表组成。在分配对象内存时，只需按照对象大小计算出对应的spanClass，然后再根据spanClass找到对应的mspan链表，最后再从链表中寻找可用的mspan，这种分级的做法能较为有效的解决内存碎片的问题。\"]},\"1124\":{\"h\":\"微对象\",\"t\":[\"所有小于 16B 的非指针微对象会由 P 中的微分配器被分配到同一片连续内存中，在runitme.mcache，由tiny字段记录了这片内存的基地址。\",\"type mcache struct { tiny uintptr tinyoffset uintptr tinyAllocs uintptr }\",\"微对象的大小由runtime.maxTinySize常量来决定，都是 16B，用于存储微对象的内存块同样也是这个大小，一般来说这里存储的对象都是一些小字符串，负责分配微对象的部分代码如下所示。\",\"if size <= maxSmallSize { if noscan && size < maxTinySize { off := c.tinyoffset if off+size <= maxTinySize && c.tiny != 0 { x = unsafe.Pointer(c.tiny + off) c.tinyoffset = off + size c.tinyAllocs++ mp.mallocing = 0 releasem(mp) return x } // Allocate a new maxTinySize block. span = c.alloc[tinySpanClass] v := nextFreeFast(span) if v == 0 { v, span, shouldhelpgc = c.nextFree(tinySpanClass) } x = unsafe.Pointer(v) (*[2]uint64)(x)[0] = 0 (*[2]uint64)(x)[1] = 0 if (size < c.tinyoffset || c.tiny == 0) { c.tiny = uintptr(x) c.tinyoffset = size } size = maxTinySize\",\"如果当前的微内存块还有足够的空间来容纳，就直接使用当前内存块，即off+size <= maxTinySize。如果不够的话，就会先尝试从mcache的 span 缓存中寻找可用的空间，如果也不行的话就会向mcentral申请一个mspan，不管如何最终都会得到一个可用的地址，最后再用新的微对象内存块替换掉旧的。\"]},\"1125\":{\"h\":\"小对象\",\"t\":[\"go 语言运行时大部分对象都是位于[16B, 32KB]这个范围内的小对象，小对象的分配过程最麻烦，但代码却是最少，负责小对象分配的部分代码如下。\",\"var sizeclass uint8 if size <= smallSizeMax-8 { sizeclass = size_to_class8[divRoundUp(size, smallSizeDiv)] } else { sizeclass = size_to_class128[divRoundUp(size-smallSizeMax, largeSizeDiv)] } size = uintptr(class_to_size[sizeclass]) spc := makeSpanClass(sizeclass, noscan) span = c.alloc[spc] v := nextFreeFast(span) if v == 0 { v, span, shouldhelpgc = c.nextFree(spc) } x = unsafe.Pointer(v) if needzero && span.needzero != 0 { memclrNoHeapPointers(x, size) }\",\"首先会根据对象的大小计算出应该使用哪一类的spanClass，然后由runtime.nextFreeFast根据spanClass尝试去mcache中对应的缓存mspan获取可用的内存空间。\",\"func nextFreeFast(s *mspan) gclinkptr { theBit := sys.TrailingZeros64(s.allocCache) // Is there a free object in the allocCache? if theBit < 64 { result := s.freeindex + uintptr(theBit) if result < s.nelems { freeidx := result + 1 if freeidx%64 == 0 && freeidx != s.nelems { return 0 } s.allocCache >>= uint(theBit + 1) s.freeindex = freeidx s.allocCount++ return gclinkptr(result*s.elemsize + s.base()) } } return 0 }\",\"mspan.allocCache的作用是记录内存空间是否有对象使用，并且它是按照对象数量来将内存一个个划分而非按照空间大小来划分，这相当于是把mspan看了一个对象数组，如下图所示。\",\"allocCache是一个 64 位数字，每一位对应着一片内存空间，如果某一位为 0 表示有对象使用，如果是 1 的话表示这片内存是空闲的。sys.TrailingZeros64(s.allocCache)的目的就是计算尾随零的数量，如果结果是 64 的话则表明没有空闲的内存可以使用，如果有的话再计算得到空闲内存的偏移量加上mspan的基地址然后返回。\",\"当mcache中没有足够的空间时，就会再去mcentral中去申请，这部分工作由mcache.nextFree方法来完成\",\"func (c *mcache) nextFree(spc spanClass) (v gclinkptr, s *mspan, shouldhelpgc bool) { s = c.alloc[spc] shouldhelpgc = false freeIndex := s.nextFreeIndex() if freeIndex == s.nelems { c.refill(spc) shouldhelpgc = true s = c.alloc[spc] freeIndex = s.nextFreeIndex() } v = gclinkptr(freeIndex*s.elemsize + s.base()) s.allocCount++ return }\",\"其中的mcache.refill会负责向mcentral申请一个可用的mspan。\",\"func (c *mcache) refill(spc spanClass) { ... s = mheap_.central[spc].mcentral.cacheSpan() ... }\",\"而mcentral.cacheSpan方法会在内存不足时由mcentral.grow来进行扩容，扩容则又会向mheap去申请新的mspan。\",\"func (c *mcentral) grow() *mspan { ... s := mheap_.alloc(npages, c.spanclass) ... return s }\",\"所以最后看来，小对象的内存分配是一级一级往下走的，先是mcache，然后是mcentral，最后是mheap。mcache分配的成本最低，因为它是 P 本地的缓存，分配内存时不需要持有锁，mcentral其次，直接向mheap申请内存成本最高，因为mheap.alloc方法会竞争整个堆的全局锁。\"]},\"1126\":{\"h\":\"大对象\",\"t\":[\"大对象分配最为简单，如果对象的大小超过了 32KB，就会直接向mheap申请分配一个新的mspan来容纳，负责分配大对象的部分代码如下。\",\"shouldhelpgc = true span = c.allocLarge(size, noscan) span.freeindex = 1 span.allocCount = 1 size = span.elemsize x = unsafe.Pointer(span.base()) if needzero && span.needzero != 0 { if noscan { delayedZeroing = true } else { memclrNoHeapPointers(x, size) } }\",\"其中mcache.allocLarge负责向mheap申请大对象的内存空间\",\"func (c *mcache) allocLarge(size uintptr, noscan bool) *mspan { ... spc := makeSpanClass(0, noscan) s := mheap_.alloc(npages, spc) ... return s }\",\"从代码中可以看到的是大对象使用的spanClass值为 0，大对象基本上都是一个对象占用一个mpan。\"]},\"1127\":{\"h\":\"其它\"},\"1128\":{\"h\":\"内存统计\",\"t\":[\"go 运行时对用户暴露了一个函数ReadMemStats，可以用于统计运行时的内存情况。\",\"func ReadMemStats(m *MemStats) { _ = m.Alloc // nil check test before we switch stacks, see issue 61158 stopTheWorld(stwReadMemStats) systemstack(func() { readmemstats_m(m) }) startTheWorld() }\",\"但是使用它的代价非常大，从代码中可以看到分析内存情况前需要 STW，而 STW 的时长可能是几毫秒到几百毫秒不等，一般只有在调试和问题排查的时候才会使用。runtime.MemStats结构体记录了有关堆内存，栈内存，和 GC 相关的信息\",\"type MemStats struct { // 总体统计 Alloc uint64 TotalAlloc uint64 Sys uint64 Lookups uint64 Mallocs uint64 Frees uint64 // 堆内存统计 HeapAlloc uint64 HeapSys uint64 HeapIdle uint64 HeapInuse uint64 HeapReleased uint64 HeapObjects uint64 // 栈内存统计 StackInuse uint64 StackSys uint64 // 内存组件统计 MSpanInuse uint64 MSpanSys uint64 MCacheInuse uint64 MCacheSys uint64 BuckHashSys uint64 // gc相关的统计 GCSys uint64 OtherSys uint64 NextGC uint64 LastGC uint64 PauseTotalNs uint64 PauseNs [256]uint64 PauseEnd [256]uint64 NumGC uint32 NumForcedGC uint32 GCCPUFraction float64 EnableGC bool DebugGC bool BySize [61]struct { Size uint32 Mallocs uint64 Frees uint64 } }\"]},\"1129\":{\"h\":\"NotInHeap\",\"t\":[\"内存分配器显然用来分配堆内存的，但堆又被分为了两部分，一部分是 go 运行时自身所需要的堆内存，另一部分是开放给用户使用的堆内存。所以在一些结构中可以看到这样的嵌入字段\",\"_ sys.NotInHeap\",\"表示该类型的内存不会分配在用户堆上，这种嵌入字段在内存分配组件中尤为常见，比如表示用户堆的结构体runtime.mheap\",\"type mheap struct { _ sys.NotInHeap }\",\"sys.NotInHeap的真正作用是为了避免内存屏障以提高运行时效率，而用户堆需要运行 GC 所以需要内存屏障。\"]},\"1130\":{\"h\":\"gc\",\"t\":[\"垃圾回收要干的事就是将不再使用的对象内存释放，腾出空间给其它对象使用。就这么简单的一句描述但它实现起来却非常不简单，垃圾回收的发展历史已经有了几十年，最早在上世纪 60 年代的 Lisp 语言就首次采用了垃圾回收机制，我们所熟知的 Python，Objective-C，其主要的 GC 机制就是引用计数，Java，C#采用的是分代回收。在今天来看垃圾回收，从回收算法来看，可以大致分为下面几个大类：\",\"引用计数：让每一个对象记录自身被引用了多少次，当计数为 0 时，就将其回收\",\"标记清除：将活动的对象做标记，将未标记的对象进行回收\",\"复制算法：将活动对象复制到新的内存中，将旧内存中的所有对象全部回收，达到回收垃圾目的\",\"标记压缩：标记清除的升级版，回收时将活动对象移动到堆的头部，方便管理\",\"从应用方式来看，可以分为下面几个大类：\",\"全局回收：一次直接回收所有的垃圾\",\"分代回收：根据对象的存活时间分成不同的代，然后采用不同的回收算法\",\"增量回收：每一次只进行局部的垃圾回收\",\"提示\",\"前往The Journey of Go's Garbage Collector阅读英文原文，了解更多有关 Go 垃圾回收的历史\",\"在刚发布时，Go 的垃圾回收机制十分简陋，只有简单的标记清除算法，垃圾回收所造成的 STW（Stop The World，指因垃圾回收暂停整个程序）高达几秒甚至更久。意识到这一问题的 Go 团队变开始着手改进垃圾回收算法，在 go1.0 到 go1.8 版本之间，他们先后尝试过很多设想\",\"读屏障并发复制 GC：读屏障的开销有很多不确定性，这种方案被取消了\",\"面向请求的收集器（ROC）：需要时刻开启写屏障，拖累运行速度，拉低了编译时间\",\"分代回收：分代回收在 go 中的效率并不高，因为 go 的编译器会倾向于将新对象分配到栈上，长期存在的对象分配到堆上，所以新生代对象大多数会被栈直接回收。\",\"无写屏障的卡片标记：通过哈希散列成本来替代写屏障的成本，需要硬件配合\",\"最后 Go 团队还是选择了三色并发标记+写屏障的组合，并且在后续的版本中不断的改进和优化，这种做法也一直沿用到现在，下面一组图展示了从 go1.4 至 go1.9 的 GC 延时变化。\",\"在写下本文时，go 的最新版本已经快要来到了 go1.23，对于如今的 go 来讲，GC 性能早已不算问题了，现在的 GC 延时大部分情况下都低于 100 微秒，满足绝大部分业务场景的需要。\",\"总的来说，Go 中的垃圾回收可以分为下面几个阶段\",\"扫描阶段：从栈和全局变量中收集根对象\",\"标记阶段：将对象着色\",\"标记终止阶段：处理善后工作，关闭屏障\",\"回收阶段：释放和回收垃圾对象的内存\"]},\"1131\":{\"h\":\"概念\",\"t\":[\"在官方文档和文章中可能会出现以下的一些概念，下面简单的解释说明一下\",\"赋值器（mutator）：一种术语化的表达方式，指的是用户程序，在 go 中指的是用户代码\",\"收集器（collector）：指的就是负责垃圾回收的程序，在 go 中负责垃圾回收的就是运行时\",\"终结器（finalizer）：指的是在标记扫描工作完成后，负责回收释放清理对象内存的代码\",\"控制器：指的是runtime.gcController全局变量，它的类型为gcControllerState，后者实现了调步算法，负责确认何时进行垃圾回收和执行多少工作量。\",\"限制器：指的是runtime.gcCPULimiter，它负责在垃圾回收时防止 CPU 占用率过高而影响到用户程序\"]},\"1132\":{\"h\":\"触发\",\"t\":[\"func gcStart(trigger gcTrigger)\",\"垃圾回收由runtime.gcStart函数来开启，它只接收参数runtime.gcTrigger结构体，其中包含了 GC 触发的原因，当前时间，以及这是第几轮 GC。\",\"type gcTrigger struct { kind gcTriggerKind now int64 // gcTriggerTime: current time n uint32 // gcTriggerCycle: cycle number to start }\",\"其中gcTriggerKind有以下几种可选值\",\"const ( // gcTriggerHeap indicates that a cycle should be started when // the heap size reaches the trigger heap size computed by the // controller. gcTriggerHeap gcTriggerKind = iota // gcTriggerTime indicates that a cycle should be started when // it's been more than forcegcperiod nanoseconds since the // previous GC cycle. gcTriggerTime // gcTriggerCycle indicates that a cycle should be started if // we have not yet started cycle number gcTrigger.n (relative // to work.cycles). gcTriggerCycle )\",\"总的来说垃圾回收的触发时机有三种\",\"创建新对象时：在调用runtime.mallocgc分配内存时，如果监测到堆内存达到了阈值（一般来说是上一次 GC 时的两倍，该值也会被调步算法进行调整），便会开启垃圾回收\",\"func mallocgc(size uintptr, typ *_type, needzero bool) unsafe.Pointer { ... if shouldhelpgc { if t := (gcTrigger{kind: gcTriggerHeap}); t.test() { gcStart(t) } } ... }\",\"定时强制触发：go 在运行时会启动一个单独的协程来运行runtime.forcegchelper函数，如果长时间没有进行垃圾回收，它便会强制开启 GC，这个时间由runtime.forcegcperiod常量决定，其值为 2 分钟，同时在系统监控协程中也会定时检查是否需要强制 GC\",\"func forcegchelper() { for { ... gcStart(gcTrigger{kind: gcTriggerTime, now: nanotime()}) ... } }\",\"func sysmon() { ... for { ... // check if we need to force a GC if t := (gcTrigger{kind: gcTriggerTime, now: now}); t.test() && forcegc.idle.Load() { lock(&forcegc.lock) forcegc.idle.Store(false) var list gList list.push(forcegc.g) injectglist(&list) unlock(&forcegc.lock) } } }\",\"手动触发：通过runtime.GC函数，用户可以手动触发垃圾回收。\",\"func GC() { ... n := work.cycles.Load() gcStart(gcTrigger{kind: gcTriggerCycle, n: n + 1}) ... }\",\"提示\",\"感兴趣可以前往Go Gc Pacer Re-Design阅读英文原文，里面讲解了有关于触发 GC 的调步算法(pacing algorithm)的设计理念和改进，因其内容比较复杂涉及过多的数学公式，正文中不做过多阐述。\"]},\"1133\":{\"h\":\"标记\",\"t\":[\"现如今 Go 的 GC 算法依然是先标记后清除这样一个步骤，但其实现不再像以前一样简单。\"]},\"1134\":{\"h\":\"标记-清除\",\"t\":[\"先从最简单的标记清除算法开始讲起，在内存中，对象与对象之间的引用关系会构成一个图，垃圾回收的工作就在这个图上进行，工作分为两个阶段：\",\"标记阶段：从根节点（根节点通常是栈上的变量，全局变量等活跃对象）开始，逐个遍历每一个可以到达的节点，并将其标记为活跃对象，直到遍历完所有可以到达的节点，\",\"清除阶段：遍历堆中的所有对象，将未标记的对象回收，将其内存空间释放或是复用。\",\"在回收的过程中，对象图的结构不能被改变，所以要将整个程序停止，也就是 STW，回收完毕以后才能继续运行，这种算法的缺点就在于耗时较长，比较影响程序的运行效率，这是早期版本 Go 使用的标记算法，它的缺点比较明显\",\"会产生内存碎片（由于 Go TCMalloc 式的内存管理方式，碎片问题的影响并不大）\",\"在标记阶段会扫描堆的所有对象\",\"会导致 STW，暂停整个程序，且时间不短\"]},\"1135\":{\"h\":\"三色标记\",\"t\":[\"为了改进效率，Go 采用了经典的三色标记算法，所谓三色，指的是黑灰白三色：\",\"黑色：在标记过程中对象已访问过，并且它所直接引用的对象也都已经访问过，表示活跃的对象\",\"灰色：在标记过程中对象已访问过，但它所直接引用的对象并未全部访问，当全部访问完后会转变为黑色，表示活跃的对象\",\"白色：在标记过程中从未被访问过，在访问过后会变为灰色，表示可能为垃圾对象，\",\"在三色标记工作开始时，场上只有灰色和白色对象，所有根对象都是灰色，其它对象都是白色，如下图所示\",\"每一轮标记开始时，先从灰色对象开始，将灰色对象标记为黑色，表示其为活跃对象，然后再将黑色对象所有直接引用的对象标记为灰色，剩下的就是白色，此时场上就有了黑白灰三种颜色。\",\"不断重复上述步骤，直到场上只剩下黑色和白色对象，当灰色对象集合为空时，就代表着标记结束，如下图\",\"在标记结束后，在清除阶段只需将白色集合中对象的内存释放即可。\"]},\"1136\":{\"h\":\"不变性\",\"t\":[\"三色标记法本身没法进行并发标记（指程序一边运行一边标记），如果在标记时对象图结构发生了改变，这可能会导致两种情况\",\"多标：在对象被标记为黑色对象后，用户程序删除了对于该对象的所有引用，那么它应该是白色对象需要被清除\",\"漏标：在对象被标记为白色对象后，用户程序中有其它对象引用了该对象，那么它应该是黑色对象不应该被清除\",\"对于第一种情况其实可以接受，因为未被清理的对象可以在下一轮回收中被处理掉。但第二种情况就没法接受了，正在使用中的对象内存被错误的释放，会造成严重的程序错误，这是必须要避免的问题。\",\"三色不变性这一概念来自于 Pekka P. Pirinen 于 1998 年发表的论文《Barrier techniques for incremental tracing》，它指在并发标记时的对象颜色的两个不变性：\",\"强三色不变性：黑色对象不可以直接引用白色对象\",\"弱三色不变性：当黑色对象直接引用白色对象时，必须有另一个灰色对象可以直接或间接访问到该灰色对象，称作受到灰色对象的保护\",\"对于强三色不变性而言，已知黑色对象 3 是已经访问过的对象，且其子对象也全都访问过并标记为灰色对象，如果此时用户程序并发的给黑色对象 3 添加白色对象 7 的新引用，正常来说白色对象 7 应该被标记为灰色，但由于黑色对象 3 已经被访问过了，对象 7 不会被访问，所以它始终都是白色对象，并最终被错误的清理掉。\",\"对于弱三色不变性而言，它其实跟强三色不变性同理，因为灰色对象能够直接或间接的访问到该白色对象，后续标记过程中它最终会被标记为灰色对象，从而避免被误清理。\",\"通过不变性，可以确保在标记过程中不会有对象被误清理，也就能保证并发条件下的标记工作的正确性，从而可以使得三色标记并发的工作，这样一来其标记效率相比于标记-清除算法会提升相当多。要在并发情况下保证三色不变性，关键就在于屏障技术。\"]},\"1137\":{\"h\":\"标记工作\",\"t\":[\"在 GC 扫描阶段时，有一个全局变量runtime.gcphase用于表示 GC 的状态，有如下可选值：\",\"_GCoff：标记工作未开始\",\"_GCmark：标记工作已开始\",\"_GCmarktermination：标记工作将要终止\",\"当标记工作开始时，runtime.gcphase的状态为_GCmark，执行标记工作的是runtime.gcDrain函数，其中runtime.gcWork参数是一个缓冲池，它存放着要追踪的对象指针。\",\"func gcDrain(gcw *gcWork, flags gcDrainFlags)\",\"在工作时，它会尝试从缓冲池去获取可追踪的指针，如果有的话则会调用runtime.scanobject函数继续执行扫描任务，它的作用是不断的扫描缓冲区中的对象，将它们染黑。\",\"if work.full == 0 { gcw.balance() } b := gcw.tryGetFast() if b == 0 { b = gcw.tryGet() if b == 0 { // Flush the write barrier // buffer; this may create // more work. wbBufFlush() b = gcw.tryGet() } } if b == 0 { // Unable to get work. break } scanobject(b, gcw)\",\"当 P 被抢占或将发生 STW 时，扫描工作才会停止\",\"for !(gp.preempt && (preemptible || sched.gcwaiting.Load() || pp.runSafePointFn != 0)) { ... scanobject(b, gcw) ... }\",\"runtime.gcwork是一个采用了生产者/消费者模型的队列，该队列负责存放待扫描的灰色对象，每一个处理器 P 本地都有这样一个队列，对应``runtime.p.gcw`字段。\",\"func scanobject(b uintptr, gcw *gcWork) { ... for { var addr uintptr if hbits, addr = hbits.nextFast(); addr == 0 { if hbits, addr = hbits.next(); addr == 0 { break } } scanSize = addr - b + goarch.PtrSize obj := *(*uintptr)(unsafe.Pointer(addr)) if obj != 0 && obj-b >= n { if obj, span, objIndex := findObject(obj, b, addr-b); obj != 0 { greyobject(obj, b, addr-b, span, gcw, objIndex) } } } gcw.bytesMarked += uint64(n) gcw.heapScanWork += int64(scanSize) }\",\"runitme.scanobject函数在扫描时会不断的将可达的白色对象标记为灰色，然后通过调用gcw.put放入本地的队列中，同时gcDrain函数也会不断的通过gcw.tryget来尝试获取灰色对象以继续扫描。标记扫描的过程是增量式的，不需要一口气完成所有的标记工作，标记任务因一些原因被抢占时就会中断，等到恢复后可以根据队列中剩余的灰色对象继续完成标记工作。\"]},\"1138\":{\"h\":\"后台标记\",\"t\":[\"标记工作并不会在 GC 开始时立即执行，在刚触发 GC 时，go 会创建与当前处理器 P 总数量相同的标记任务，它们会被添加到全局任务队列中，然后进入休眠直到在标记阶段被唤醒。在运行时，由runtime.gcBgMarkStartWorkers来进行任务的分配，标记任务实际上指的就是runtime.gcBgMarkWorker函数，其中gcBgMarkWorkerCount和gomaxprocs两个运行时全局变量分别表示当前 worker 的数量和处理器 P 的数量。\",\"func gcBgMarkStartWorkers() { // Background marking is performed by per-P G's. Ensure that each P has // a background GC G. // // Worker Gs don't exit if gomaxprocs is reduced. If it is raised // again, we can reuse the old workers; no need to create new workers. for gcBgMarkWorkerCount < gomaxprocs { go gcBgMarkWorker() notetsleepg(&work.bgMarkReady, -1) noteclear(&work.bgMarkReady) // The worker is now guaranteed to be added to the pool before // its P's next findRunnableGCWorker. gcBgMarkWorkerCount++ } }\",\"在 worker 启动后，它会创建一个runtime.gcBgMarkWorkerNode结构体，将其加入全局的 worker 池runitme.gcBgMarkWorkerPool，然后调用runtime.gopark函数让协程其陷入休眠\",\"func gcBgMarkWorker() { ... node := new(gcBgMarkWorkerNode) node.gp.set(gp) notewakeup(&work.bgMarkReady) for { // Go to sleep until woken by // gcController.findRunnableGCWorker. gopark(func(g *g, nodep unsafe.Pointer) bool { node := (*gcBgMarkWorkerNode)(nodep) // Release this G to the pool. gcBgMarkWorkerPool.push(&node.node) // Note that at this point, the G may immediately be // rescheduled and may be running. return true }, unsafe.Pointer(node), waitReasonGCWorkerIdle, traceBlockSystemGoroutine, 0) } ... }\",\"有两种情况可以唤醒 worker\",\"处于标记阶段时，调度循环会通过runtime.runtime.gcController.findRunnableGCWorker函数来唤醒休眠的 worker\",\"处于标记阶段时，如果处理器 P 当前为空闲状态，调度循环会尝试直接从全局 worker 池gcBgMarkWorkerPool中获取可用的 worker\",\"func findRunnable() (gp *g, inheritTime, tryWakeP bool) { top: // Try to schedule a GC worker. if gcBlackenEnabled != 0 { gp, tnow := gcController.findRunnableGCWorker(pp, now) if gp != nil { return gp, false, true } now = tnow } ... // We have nothing to do. // // If we're in the GC mark phase, can safely scan and blacken objects, // and have work to do, run idle-time marking rather than give up the P. if gcBlackenEnabled != 0 && gcMarkWorkAvailable(pp) && gcController.addIdleMarkWorker() { node := (*gcBgMarkWorkerNode)(gcBgMarkWorkerPool.pop()) if node != nil { pp.gcMarkWorkerMode = gcMarkWorkerIdleMode gp := node.gp.ptr() trace := traceAcquire() casgstatus(gp, _Gwaiting, _Grunnable) if trace.ok() { trace.GoUnpark(gp, 0) traceRelease(trace) } return gp, false, false } gcController.removeIdleMarkWorker() } ... }\",\"处理器 P 有结构体中有一个字段gcMarkWorkerMode来表示标记任务的执行模式，它有以下几个可选值：\",\"gcMarkWorkerNotWorker：表示当前处理器 P 没有正在执行标记任务\",\"gcMarkWorkerDedicatedMode：表示当前处理器 P 专门用于执行标记任务，且期间不会被抢占。\",\"gcMarkWorkerFractionalMode：表示当前处理器是因为 GC 利用率不达标（25%达标）才执行的标记任务，执行期间可以被抢占。假设当前处理器 P 数量为 5，根据计算公式此时需要一个专用处理标记任务的处理器 P，利用率只达到了 20%，剩下 5%的利用率就需要开启一个FractionalMode的处理器 P 来弥补。具体的计算代码如下所示\",\"func (c *gcControllerState) startCycle(markStartTime int64, procs int, trigger gcTrigger) { ... totalUtilizationGoal := float64(procs) * gcBackgroundUtilization dedicatedMarkWorkersNeeded := int64(totalUtilizationGoal + 0.5) if float64(dedicatedMarkWorkersNeeded) > totalUtilizationGoal { // Too many dedicated workers. dedicatedMarkWorkersNeeded-- } c.fractionalUtilizationGoal = (totalUtilizationGoal - float64(dedicatedMarkWorkersNeeded)) / float64(procs) ... }\",\"gcMarkWorkerIdleMode：表示当前处理器是因为空闲才执行标记任务，执行期间可以被抢占。\",\"Go 团队不希望 GC 占用过多的性能从而影响用户程序的正常运行，根据这些不同的模式进行标记工作，可以在不浪费性能也不影响用户程序的情况下完成 GC。可以注意到的是标记任务的基本分配单位是处理器 P，所以标记工作是并发进行的，多个标记任务和用户程序之间并发的执行，互不影响。\"]},\"1139\":{\"h\":\"标记辅助\",\"t\":[\"协程 G 在运行时有一个字段gcAssistBytes，这里将其称为 GC 辅助积分。处于 GC 标记状态时，当一个协程尝试申请若干大小的内存，它会被扣除与申请内存大小相同的积分。如果此时积分为负数，那么该协程必须辅助完成定量的 GC 扫描任务来偿还积分，当积分为正数时，协程就可以不需要去完成辅助标记任务了。\",\"扣除积分的函数为runtime.deductAssistCredit，它会在runtime.mallocgc函数分配内存前被调用。\",\"func deductAssistCredit(size uintptr) *g { var assistG *g if gcBlackenEnabled != 0 { // Charge the current user G for this allocation. assistG = getg() if assistG.m.curg != nil { assistG = assistG.m.curg } // Charge the allocation against the G. We'll account // for internal fragmentation at the end of mallocgc. assistG.gcAssistBytes -= int64(size) if assistG.gcAssistBytes < 0 { // This G is in debt. Assist the GC to correct // this before allocating. This must happen // before disabling preemption. gcAssistAlloc(assistG) } } return assistG }\",\"然而当协程完成定量的辅助扫描工作后，就会偿还定量的积分给当前协程，实际负责辅助标记的函数是runtime.gcDrainN。\",\"func gcAssistAlloc1(gp *g, scanWork int64) { ... gcw := &getg().m.p.ptr().gcw // 完成工作了 workDone := gcDrainN(gcw, scanWork) ... assistBytesPerWork := gcController.assistBytesPerWork.Load() gp.gcAssistBytes += 1 + int64(assistBytesPerWork*float64(workDone)) ... }\",\"由于扫描是并发的，记录下来的工作量中只有一部分是当前协程的，余下的工作量会根据辅助队列的顺序来逐个偿还给其它协程，如果还有剩余的话，就会添加到全局积分gcController.assistBytesPerWork中。\",\"func gcFlushBgCredit(scanWork int64) { // 如果队列为空则直接添加到全局积分中 if work.assistQueue.q.empty() { gcController.bgScanCredit.Add(scanWork) return } assistBytesPerWork := gcController.assistBytesPerWork.Load() scanBytes := int64(float64(scanWork) * assistBytesPerWork) lock(&work.assistQueue.lock) for !work.assistQueue.q.empty() && scanBytes > 0 { gp := work.assistQueue.q.pop() if scanBytes+gp.gcAssistBytes >= 0 { scanBytes += gp.gcAssistBytes gp.gcAssistBytes = 0 ready(gp, 0, false) } else { gp.gcAssistBytes += scanBytes scanBytes = 0 work.assistQueue.q.pushBack(gp) break } } // 还有剩余 if scanBytes > 0 { assistWorkPerByte := gcController.assistWorkPerByte.Load() scanWork = int64(float64(scanBytes) * assistWorkPerByte) gcController.bgScanCredit.Add(scanWork) } unlock(&work.assistQueue.lock) }\",\"相应的，当需要偿还的积分过多时（申请的内存过大），也可以使用全局积分来抵消部分自己的借债\",\"func gcAssistAlloc(gp *g) { ... assistWorkPerByte := gcController.assistWorkPerByte.Load() assistBytesPerWork := gcController.assistBytesPerWork.Load() debtBytes := -gp.gcAssistBytes scanWork := int64(assistWorkPerByte * float64(debtBytes)) if scanWork < gcOverAssistWork { scanWork = gcOverAssistWork debtBytes = int64(assistBytesPerWork * float64(scanWork)) } // 用全局积分抵押 bgScanCredit := gcController.bgScanCredit.Load() stolen := int64(0) if bgScanCredit > 0 { if bgScanCredit < scanWork { stolen = bgScanCredit gp.gcAssistBytes += 1 + int64(assistBytesPerWork*float64(stolen)) } else { stolen = scanWork gp.gcAssistBytes += debtBytes } gcController.bgScanCredit.Add(-stolen) scanWork -= stolen if scanWork == 0 { return } } ... }\",\"标记辅助是在高负载的情况下的一种平衡手段，用户程序分配内存的速度远高于标记的速度，分配多少内存就进行多少标记工作。\"]},\"1140\":{\"h\":\"标记终止\",\"t\":[\"当所有可达的灰色对象都被染黑了过后，此时就由_GCmark状态过渡到_GCmarktermination状态，这个过程由runtime.gcMarkDone函数来完成。在开始时，它会检查是否仍有任务要执行，\",\"top: if !(gcphase == _GCmark && work.nwait == work.nproc && !gcMarkWorkAvailable(nil)) { return } gcMarkDoneFlushed = 0 // 将所有因写屏障拦截的标记操作全部批量的执行 forEachP(waitReasonGCMarkTermination, func(pp *p) { wbBufFlush1(pp) pp.gcw.dispose() if pp.gcw.flushedWork { atomic.Xadd(&gcMarkDoneFlushed, 1) pp.gcw.flushedWork = false } }) if gcMarkDoneFlushed != 0 { goto top }\",\"当没有任何全局任务和本地任务要执行后，调用runtime.stopTheWorldWithSema进行 STW，然后做一些收尾的工作\",\"// Disable assists and background workers. We must do // this before waking blocked assists. atomic.Store(&gcBlackenEnabled, 0) // Notify the CPU limiter that GC assists will now cease. gcCPULimiter.startGCTransition(false, now) // Wake all blocked assists. These will run when we // start the world again. gcWakeAllAssists() // In STW mode, re-enable user goroutines. These will be // queued to run after we start the world. schedEnableUser(true) // endCycle depends on all gcWork cache stats being flushed. // The termination algorithm above ensured that up to // allocations since the ragged barrier. gcController.endCycle(now, int(gomaxprocs), work.userForced) // Perform mark termination. This will restart the world. gcMarkTermination(stw)\",\"首先将runtime.BlackenEnabled置为 0，表示标记工作已经结束了，通知限制器标记辅助已经结束了，关闭内存屏障，唤醒所有因辅助标记而休眠的协程，然后再重新唤醒所有的用户协程，还要收集本轮扫描工作的各种数据来调整调步算法来为下一轮扫描做准备，收尾工作完成后，调用runtime.gcSweep函数清理垃圾对象，最后再调用runtime.startTheWorldWithSema让程序恢复运行。\"]},\"1141\":{\"h\":\"屏障\",\"t\":[\"内存屏障的作用可以理解为 hook 了对象的赋值行为，在赋值前做一些指定的操作，这种 hook 代码通常在编译期间由编译器插入到代码中。前面提到过，三色标记在并发情况下添加和删除对象引用都会导致问题，由于这两个都是写操作（删除就是赋空值），所以拦截它们的屏障被统称为写屏障。但屏障机制并非毫无成本，拦截内存写操作会造成额外的开销，因此屏障机制只在堆上生效，考虑到实现复杂度和性能损耗，对于栈和寄存器则不起作用范围内。\",\"提示\",\"想要了解更多 Go 对于屏障技术的应用细节，前往Eliminate STW stack rescan阅读英文原文，本文参考了许多内容。\"]},\"1142\":{\"h\":\"插入写屏障\",\"t\":[\"插入写屏障由 Dijkstra 提出的，它满足强三色不变式。当给黑色对象添加了一个新的白色对象引用时，插入写屏障会拦截此操作，将该白色对象标记为灰色，这样可以避免黑色对象直接引用白色对象，保证了强三色不变性，这个相当好理解。\",\"前面提到过写屏障不会应用在栈上，如果在并发标记的过程中栈对象的引用关系发生了变化，比如栈中的黑色对象引用了堆中的白色对象，所以为了确保栈对象的正确性，只能在标记结束后再次将栈中的所有对象全部标记为灰色对象，然后重新扫描一遍，等于是一轮标记要扫描两次栈空间，并且第二次扫描时必须要 STW，假如程序中同时存在成百上千个协程栈，那么这一扫描过程的耗时将不容忽视，根据官方统计的数据，重新扫描的耗时大概在 10-100 毫秒左右。\",\"优点：扫描时不需要 STW\",\"缺点：需要二次扫描栈空间保证正确性，需要 STW\"]},\"1143\":{\"h\":\"删除写屏障\",\"t\":[\"删除写屏障由 Yuasa 提出，又称基于起始快照的屏障，该方式在开始时需要 STW 来对根对象进行快照记录，并且它会将所有根对象标黑，所有的一级子对象标灰，这样其余的白色子对象都会处于灰色对象的保护之下。Go 团队并没有直接应用删除写屏障，而是选择了将其与插入写屏障混合使用，所以为了方便后续的理解，这里还是要讲一下。删除写屏障在并发条件下保证正确性的规则是：当从灰色或白色对象删除对白色对象的引用时，都会直接将白色对象标记为灰色对象。\",\"分两种情况来解读：\",\"删除灰色对象对于白色对象的引用：由于不知道白色对象下游是否被黑色对象引用，此举可能会切断灰色对象对于白色对象的保护\",\"删除白色对象对于白色对象的引用：由于不知道白色对象上游是否被灰色保护，下游是否被黑色对象引用，此举也可能会切断灰色对于白色对象的保护\",\"不管是哪种情况，删除写屏障都会将被引用的白色对象标记为灰色，这样一来就能满足弱三色不变式。这是一种保守的做法，因为上下游情况未知，将其标记为灰色就等于不再视其为垃圾对象，就算删除引用后会导致该对象不可达也就是成为垃圾对象时，也仍然会将其标记为灰色，它会在下轮扫描中被释放掉，这总好过对象被误清理而导致的内存错误。\",\"优点：由于栈对象全黑，所以不需要二次扫描栈空间\",\"缺点：在扫描开始时需要 STW 来对栈空间的根对象进行快照\"]},\"1144\":{\"h\":\"混合写屏障\",\"t\":[\"go1.8 版本引用了新的屏障机制：混合写屏障，即插入写屏障与删除写屏障的混合，结合了它们两个的优点：\",\"插入写屏障起始时不需要 STW 来进行快照\",\"删除写屏障不需要 STW 来二次扫描栈空间\",\"下面是官方给出的的伪代码：\",\"writePointer(slot, ptr): shade(*slot) if current stack is grey: shade(ptr) *slot = ptr\",\"简单讲解下里面的一些概念，其中slot是一个指针，表示对其它对象的引用，*slot是原对象，ptr是新对象，*slot=ptr是一次赋值操作，等于修改对象的引用，赋空值就是删除引用，shade()表示将一个对象标记为灰色，shade(*slot)就是将原对象标记为灰色，shade(ptr)就是将新对象标记为灰色，下面是一个例图，假设对象 1 原来引用着对象 2，然后用户程序修改了引用，让对象 1 引用了对象 3，混合写屏障捕捉到了这一行为，其中*slot代表的就是对象 2，ptr代表的就是对象 1。\",\"官方用一句话概括了上面伪代码的作用\",\"the write barrier shades the object whose reference is being overwritten, and, if the current goroutine's stack has not yet been scanned, also shades the reference being installed.\",\"翻译过来就是，当混合写屏障拦截到写操作时，会将原对象标记为灰色，如果当前协程栈还未被扫描过时，就将新对象也标记为灰色。\",\"标记工作开始时，需要扫描栈空间以收集根对象，这时会直接将其全部标记为黑色，在此期间任何新创建对象也会被标记为黑色，保证栈中的所有都是黑色对象，所以伪代码中的current stack is grey表示的就是当前协程栈还未被扫描过，所以协程栈只有两种状态，要么全黑要么全灰，在由全灰变为全黑的过程中是需要暂停当前协程的，所以在混合写屏障下依然会有局部的 STW。当协程栈全黑时，此时一定满足强三色不变式，因为扫描后栈中的黑色对象只会引用灰色对象，不会存在黑色对象直接引用白色对象的情况，所以此时不需要插入写屏障，对应伪代码\",\"if current stack is grey: shade(ptr)\",\"但仍然需要删除写屏障来满足弱三色不变式，也就是\",\"shade(*slot)\",\"在扫描完毕后，由于栈空间的对象已经是全黑的了，就不再需要去二次扫描栈空间了，可以节省掉 STW 的时间。\",\"至此，也就是 go1.8 版本往后，Go 大体上确立了垃圾回收的基本框架，后续版本有关垃圾回收的优化也都是建立在混合写屏障的基础之上的，由于已经消除了大部分的 STW，此时垃圾回收的平均延时已经降低到了微秒级别。\"]},\"1145\":{\"h\":\"着色缓存\",\"t\":[\"在之前提到的屏障机制中，在拦截到写操作时都是立即标记对象颜色，在采用混合写屏障后，由于需要对原对象和新对象都行进行标记，所以工作量会翻倍，同时编译器插入的代码也会增加。为了进行优化，在 go1.10 版本中，写屏障在进行着色时不再会立即标记对象颜色，而是会将原对象和新对象存入一个缓存池中，等积攒到了一定数量后，再进行批量标记，这样做效率更高。\",\"负责缓存的结构是runtime.wbBuf，它实际上是一个数组，大小为 512。\",\"type wbBuf struct { next uintptr end uintptr buf [wbBufEntries]uintptr }\",\"每一个 P 本地都有这样一个缓存\",\"type p struct { ... wbBuf wbBuf ... }\",\"在标记工作进行时，如果gcw队列中没有可用的灰色对象，就会将缓存中的对象放入本地队列中。\",\"func gcDrain(gcw *gcWork, flags gcDrainFlags) { for !(gp.preempt && (preemptible || sched.gcwaiting.Load() || pp.runSafePointFn != 0)) { if work.full == 0 { gcw.balance() } b := gcw.tryGetFast() if b == 0 { b = gcw.tryGet() if b == 0 { // 刷新写屏障缓存 wbBufFlush() b = gcw.tryGet() } } if b == 0 { break } scanobject(b, gcw) } }\",\"另外一种情况是，当标记终止时，也会检查每一个 P 本地的wbBuf是否有剩下的灰色对象\",\"func gcMarkDone() { ... forEachP(waitReasonGCMarkTermination, func(pp *p) { wbBufFlush1(pp) pp.gcw.dispose() }) ... }\"]},\"1146\":{\"h\":\"回收\",\"t\":[\"在垃圾回收中，最重要的部分在于如何找出垃圾对象，也就是扫描标记工作，而在标记工作完成后，回收工作就相对没那么复杂，它只需要将未标记的对象回收释放就行。这部分代码主要在runtime/mgcsweep.go文件中，根据文件中注释可以得知 Go 中的回收算法分为两种。\"]},\"1147\":{\"h\":\"对象回收\",\"t\":[\"对象回收的工作会在标记终止阶段，由runtime.sweepone来完成清理工作，过程是异步的。在清理时，它会尝试在内存单元中寻找未标记的对象，然后回收掉。倘若整个内存单元都未被标记，那么这一个单元都会被回收掉。\",\"func sweepone() uintptr { sl := sweep.active.begin() npages := ^uintptr(0) var noMoreWork bool for { s := mheap_.nextSpanForSweep() if s == nil { noMoreWork = sweep.active.markDrained() break } if state := s.state.get(); state != mSpanInUse { continue } // 尝试获取回收器 if s, ok := sl.tryAcquire(s); ok { npages = s.npages // 清理 if s.sweep(false) { mheap_.reclaimCredit.Add(npages) } else { npages = 0 } break } } sweep.active.end(sl) return npages }\",\"对于对象回收算法而言，回收整个单元比较的困难，所以就有了第二个回收算法。\"]},\"1148\":{\"h\":\"单元回收\",\"t\":[\"单元回收的工作是在内存分配前进行的，由runtime.mheap.reclaim方法来完成，它会在堆中寻找所有对象都未被标记的内存单元，然后将整个单元回收。\",\"func (h *mheap) reclaim(npage uintptr) { mp := acquirem() trace := traceAcquire() if trace.ok() { trace.GCSweepStart() traceRelease(trace) } arenas := h.sweepArenas locked := false for npage > 0 { if credit := h.reclaimCredit.Load(); credit > 0 { take := credit if take > npage { take = npage } if h.reclaimCredit.CompareAndSwap(credit, credit-take) { npage -= take } continue } idx := uintptr(h.reclaimIndex.Add(pagesPerReclaimerChunk) - pagesPerReclaimerChunk) if idx/pagesPerArena >= uintptr(len(arenas)) { h.reclaimIndex.Store(1 << 63) break } nfound := h.reclaimChunk(arenas, idx, pagesPerReclaimerChunk) if nfound <= npage { npage -= nfound } else { h.reclaimCredit.Add(nfound - npage) npage = 0 } } trace = traceAcquire() if trace.ok() { trace.GCSweepDone() traceRelease(trace) } releasem(mp) }\",\"对于内存单元而言，有一个sweepgen字段用于表明其回收状态\",\"mspan.sweepgen == mheap.sweepgen - 2：该内存单元需要回收\",\"mspan.sweepgen == mheap.sweepgen - 1：该内存单元正在被回收\",\"mspan.sweepgen == mheap.sweepgen：该内存单元已经被回收了，可以正常使用\",\"mspan.sweepgen == mheap.sweepgen + 1：内存单元在缓存中，且需要回收\",\"mspan.sweepgen == mheap.sweepgen + 3：内存单元已经被回收了，但仍然在缓存中\",\"mheap.sweepgen会随着 GC 轮次而增加，并且每一次都会+2。\"]},\"1149\":{\"h\":\"mutex\",\"t\":[\"锁是操作系统中的一种重要的同步原语，Go语言在标准库中总共有互斥锁和读写锁两种锁的实现，分别对应了\",\"sync.Mutex，互斥锁，读读互斥，读写互斥，写写互斥\",\"sync.RWMutex，读写锁，读读共享，读写互斥，写写互斥\",\"它们的业务使用场景非常常见，用于在并发情况下保护某一片共享内存能够顺序地访问和修改，正如下面的例子\",\"import ( \\\"fmt\\\" \\\"sync\\\" ) func main() { var i int var wg sync.WaitGroup var mu sync.Mutex for range 10 { wg.Add(1) go func() { defer wg.Done() mu.Lock() viewI := i mu.Unlock() viewI++ mu.Lock() i = viewI mu.Unlock() }() } wg.Wait() fmt.Println(i) }\",\"如果没有锁的保护，那么该函数每次执行输出的结果都可能不同的，无法预测，显然在大部分场景中我们都不希望发生这样的情况。这个案例对于大部分人来说都很简单，或许你对已经对锁的使用得心应手，但未必了解Go语言的锁内部是如何实现的，它本身的代码并不复杂，本文接下来会进行较为详细的讲解。\"]},\"1150\":{\"h\":\"Locker\",\"t\":[\"在开始之前我们先看一个类型sync.Locker，它是Go定义的一组接口\",\"// A Locker represents an object that can be locked and unlocked. type Locker interface { Lock() Unlock() }\",\"它提供的方法非常的简单易懂，就是加锁和解锁，不过由于Go接口实现优于约定的特性，所以大部分人可能都从来没见过它，这里也只是简单提一嘴，因为它确实没那么重要，后面所讲的两个锁也是都实现了该接口。\"]},\"1151\":{\"h\":\"Mutex\",\"t\":[\"互斥锁Mutex的类型定义位于sync/mutex.go文件中，它是一个结构体类型，如下\",\"type Mutex struct { state int32 sema uint32 }\",\"字段释义如下：\",\"state - 字段表示锁的状态\",\"sema - 即信号量semaphore，它指向全局runtime.semTable中的信号量。\",\"先来讲讲这个state\",\"const ( mutexLocked = 1 << iota // mutex is locked mutexWoken mutexStarving )\",\"state是一个32位的整数类型，低3位用于表示上面的三种状态，总共有三种状态，这三种状态并非独立的，它们可以共存。\",\"mutexLocked=1 - 被锁住\",\"mutexWoken=2 - 被唤醒\",\"mutexStarving=4 - 饥饿模式\",\"而高29位用于表示有多少个协程正在等待锁，所以理论上来说一个互斥锁最多可以被2^29+1个协程同时使用，然而现实中不太可能会有这么多的协程，即便每个只占2KB（初始栈空间大小），这么多的协程所需要的内存空间也要1TB左右\",\"+-----------------------------------+---------------+------------+-------------+ | waiter | mutexStarving | mutexWoken | mutexLocked | +-----------------------------------+---------------+------------+-------------+ | 29 bits | 1 bit | 1 bit | 1 bit | +-----------------------------------+---------------+------------+-------------+\",\"互斥锁一共有两种模式，一是正常模式，二是饥饿模式（关于何为饥饿模式，官方有详细的英文注释），正常模式就是在等待队列中的协程按照先入先出的顺序持有锁，这种是一般的情况，也是性能最好的时候，因为大家都按照访问的顺序来持有锁就不会出任何问题。饥饿模式就是不一般的情况，这个饥饿指的是等待协程长时间无法持有锁而一直处于阻塞状态，并不是说互斥锁是饥饿状态，那么什么时候协程会处于饥饿状态呢？官方给出一个例子，一个因为互斥锁而阻塞且刚刚唤醒的协程，另一个是代码刚刚运行到这块尝试持有锁的协程（喜欢插队的），由于后者正处于运行的状态（正在占用CPU时间片），它获取锁的优先级肯定是要高很多的，并且在极端情况下像这样的协程可能会有很多，那么刚刚唤醒的协程就会一直无法持有锁（一直插队没完没了了）。\",\"const ( starvationThresholdNs = 1e6 )\",\"为了避免这种情况，如果有协程超过1ms仍未持有锁，互斥锁就会进入饥饿模式。在饥饿模式下，互斥锁的所有权会直接移交给等待队列中最前面的协程，新来的协程不会尝试持有锁，而且进入队尾等待。就这样，饥饿模式下互斥锁的所有权会全部由等待队列中协程逐个持有（让排队的人先持有，插队的后面去），当协程持有锁后，如果自己是最后一个等待协程或等待时间小于1ms，就会将互斥锁切换回正常模式。这种饥饿模式的设计，就避免了一些协程长时间无法持有锁而“饿死”的情况。\"]},\"1152\":{\"h\":\"TryLock\",\"t\":[\"互斥锁提供了两个方法来进行加锁：\",\"Lock()，以阻塞的方式获取锁\",\"TryLock()，非阻塞的方式获取锁\",\"先来看看TryLock的代码，因为它的实现更简单\",\"func (m *Mutex) TryLock() bool { old := m.state if old&(mutexLocked|mutexStarving) != 0 { return false } if !atomic.CompareAndSwapInt32(&m.state, old, old|mutexLocked) { return false } return true }\",\"它开始时会进行检查，如果锁已经被持有了，或者处于饥饿状态（即很多协程正在等待锁），那么当前协程无法获得锁。否则的话通过CAS操作尝试更新状态为mutexLocked，如果CAS操作返回false，则表示在此期间有其它协程成功获得了锁，那么当前协程无法获得锁，否则成功获得锁。从这里的代码可以看出，TryLock()的调用者就是那个尝试插队的人，因为它不管有没有协程正在等待，就直接抢夺锁（old可能不等于0）。\"]},\"1153\":{\"h\":\"Lock\",\"t\":[\"下面是Lock的代码，它也会使用CAS操作来尝试直接持有锁，只不过它更“老实”，它只会在没有协程阻塞等待时才会去直接持有锁（old=0）。\",\"func (m *Mutex) Lock() { // Fast path: grab unlocked mutex. if atomic.CompareAndSwapInt32(&m.state, 0, mutexLocked) { return } // Slow path (outlined so that the fast path can be inlined) m.lockSlow() }\",\"倘若它发现有协程正在阻塞等待，那么它就会“老实”地到后面排队，进入lockslow自旋流程等待锁（互斥锁的核心）。首先会准备一些变量\",\"func (m *Mutex) lockSlow() { var waitStartTime int64 starving := false awoke := false iter := 0 old := m.state\",\"waitStartTime: 用于记录等待开始的时间，检查是否进入饥饿模式。\",\"starving: 表示当前协程是否已经超过1ms未获得锁。\",\"awoke: 标记当前协程是否已被唤醒。\",\"iter: 计数器，记录自旋的次数。\",\"old: 获取当前互斥锁的状态\",\"然后进入for循环，判断当前协程能否进入自旋状态。自旋是一种多线程间同步机制（仅多核系统，单核系统自旋没有任何意义），又称为忙等待（busy-waiting），线程未持有锁时不会直接挂起切换线程上下文而是进入循环，过程中会一直占用CPU时间片，如果在锁竞争不大和持有锁时间很短的的场景下，这样避免了频繁线程上下文，可以提高性能，然而它并不是万能的，滥用自旋可能导致以下危险的后果：\",\"CPU占用过高：等待线程会消耗大量的 CPU 资源，尤其是在锁被占用的时间较长时，这样会导致系统中的其他线程无法得到足够的 CPU 时间，从而影响系统的整体性能。\",\"缓存一致性问题：自旋锁的忙等待特性会导致线程在高速缓存（cache）中反复读取锁的状态，这会产生缓存一致性问题，如果自旋的线程在不同的核心上运行，并且锁的状态没有被及时更新到全局内存中，可能会出现内存顺序问题，导致线程读到的锁状态不准确。频繁的缓存一致性同步会显著降低性能，尤其是在有大量线程竞争锁的情况下。\",\"所以并不是所有的协程都能够进入自旋状态，它需要经过以下的严格判断\",\"for { if old&(mutexLocked|mutexStarving) == mutexLocked && runtime_canSpin(iter) { if !awoke && old&mutexWoken == 0 && old>>mutexWaiterShift != 0 && atomic.CompareAndSwapInt32(&m.state, old, old|mutexWoken) { awoke = true } runtime_doSpin() iter++ old = m.state continue } ... }\",\"条件如下：\",\"当前锁已经被持有且不能处于饥饿状态，否则意味着已经有协程长时间无法获得锁，这时候直接进入阻塞流程。\",\"进入runtime.sync_runtime_canSpin判断流程\",\"const ( active_spin = 4 ) func sync_runtime_canSpin(i int) bool { if i >= active_spin || ncpu <= 1 || gomaxprocs <= sched.npidle.Load()+sched.nmspinning.Load()+1 { return false } if p := getg().m.p.ptr(); !runqempty(p) { return false } return true }\",\"自旋次数小于runtime.active_spin，默认是4次，次数多了浪费资源。\",\"CPU核数大于1，单核系统自旋没有任何意义。\",\"当前的 gomaxprocs 大于空闲 P 和正在自旋的 P 数量之和加 1，即说明当前没有足够的可用处理器来进行自旋\",\"当前P的本地队列必须空的，否则说明有其它用户任务要执行，不能进行自旋\",\"如果判断可以自旋的话，就会调用runtime.sync_runtime_doSpin进入自旋，实际上它就是执行了30次PAUSE指令。\",\"const ( active_spin_cnt = 30 ) func sync_runtime_doSpin() { procyield(active_spin_cnt) }\",\"TEXT runtime·procyield(SB),NOSPLIT,$0-0 MOVL cycles+0(FP), AX again: PAUSE SUBL $1, AX JNZ again RET\",\"如果不能进行自旋，就只会有两种下场：成功获得锁和进入等待队列陷入阻塞，不过在此之前还有很多事处理：\",\"如果不为饥饿模式，就尝试获取锁\",\"new := old if old&mutexStarving == 0 { new |= mutexLocked }\",\"如果锁已经被占用或现在是饥饿模式，则等待的协程数+1\",\"if old&(mutexLocked|mutexStarving) != 0 { new += 1 << mutexWaiterShift }\",\"如果当前协程已经处于饥饿状态，且锁仍然被占用，则进入饥饿模式\",\"if starving && old&mutexLocked != 0 { new |= mutexStarving }\",\"如果当前协程自旋被唤醒，则加上mutexWoken标志\",\"if awoke { new &^= mutexWoken }\",\"然后就开始尝试通过CAS去更新锁的状态，更新失败就直接开始下一轮循环\",\"if atomic.CompareAndSwapInt32(&m.state, old, new) { ... }else { ... }\",\"更新成功的话就开始下面的判断。\",\"原状态并非饥饿模式，且没有协程占用锁，那么当前协程可以直接持有锁，退出流程，继续执行用户代码。\",\"if old&(mutexLocked|mutexStarving) == 0 { break }\",\"尝试持有锁失败，记录下等待时间，其中LIFO如果为true，表示队列后进先出，否则就是FIFO先进先出。\",\"queueLifo := waitStartTime != 0 if waitStartTime == 0 { waitStartTime = runtime_nanotime() }\",\"尝试获取信号量，进入runtime.semacquire1函数，如果能获取信号量就直接返回不会阻塞，否则的话就会调用runtime.gopark挂起当前协程等待信号量的释放（信号量里面的细节就不深究了，不然一个个讲解没完没了了，感兴趣可以自己去了解）。\",\"runtime_SemacquireMutex(&m.sema, queueLifo, 1)\",\"走到这一步有两种可能，一是直接成功获取信号量，二是阻塞刚刚被唤醒成功获得信号量，不管是哪一种都成功获得了信号量，如果现在是饥饿模式，就可以直接获得锁。\",\"starving = starving || runtime_nanotime()-waitStartTime > starvationThresholdNs old = m.state if old&mutexStarving != 0 { delta := int32(mutexLocked - 1<<mutexWaiterShift) if !starving || old>>mutexWaiterShift == 1 { delta -= mutexStarving } atomic.AddInt32(&m.state, delta) break }\",\"如果不是饥饿模式，则重置iter，重新开始自旋流程。\",\"awoke = true iter = 0\",\"至此，加锁的流程就结束了，整个过程比较复杂，过程中用到了自旋等待和信号量阻塞等待两种方式，平衡了性能和公平性，适用于大多数的锁竞争情况。\"]},\"1154\":{\"h\":\"Unlock\",\"t\":[\"解锁的流程相对而言要简单很多，它首先会尝试快速解锁，如果new为0的话表示现在没有等待协程，且不是饥饿模式，即解锁成功，可以直接返回。\",\"func (m *Mutex) Unlock() { new := atomic.AddInt32(&m.state, -mutexLocked) if new != 0 { m.unlockSlow(new) } }\",\"否则就需要进入unlockslow的流程\",\"首先判断是否已经解锁了\",\"if (new+mutexLocked)&mutexLocked == 0 { fatal(\\\"sync: unlock of unlocked mutex\\\") }\",\"如果是饥饿模式，就直接释放信号量，完成解锁。在饥饿模式下，当前解锁的协程将直接将锁的所有权交给下一个等待的协程。\",\"if new&mutexStarving == 0 { ... } else { runtime_Semrelease(&m.sema, true, 1) }\",\"不是饥饿模式，进入正常解锁流程\",\"如果没有协程正在等待，或者有其它被唤醒的协程已经获得了锁，又或者说锁进入了饥饿模式\",\"if old>>mutexWaiterShift == 0 || old&(mutexLocked|mutexWoken|mutexStarving) != 0 { return }\",\"否则的话，就释放信号量唤醒下一个等待的协程，将当前锁的状态设置为mutexWoken\",\"new = (old - 1<<mutexWaiterShift) | mutexWoken if atomic.CompareAndSwapInt32(&m.state, old, new) { runtime_Semrelease(&m.sema, false, 1) return } old = m.state\",\"最后，解锁的流程就结束了。\"]},\"1155\":{\"h\":\"RWMutex\",\"t\":[\"读写互斥锁RWMutex的类型定义位于sync/rwmutex.go文件中，它的实现也基于互斥锁。\",\"type RWMutex struct { w Mutex // held if there are pending writers writerSem uint32 // semaphore for writers to wait for completing readers readerSem uint32 // semaphore for readers to wait for completing writers readerCount atomic.Int32 // number of pending readers readerWait atomic.Int32 // number of departing readers }\",\"下面是各个字段的释义\",\"w，一个互斥锁，写者协程持有该互斥锁时，其它写者协程和读者协程将被阻塞。\",\"writerSem，写信号量，用于阻塞写者协程来等待读者协程，写者协程获取信号量，读者协程释放信号量。\",\"readerSem，读信号量，用于阻塞读者协程来等待写者协程，读者协程获取信号量，写者协程释放信号量。\",\"readerCount，核心字段，整个读写锁都靠它来维护状态。\",\"readerWait，表示写者协程被阻塞时，需要等待的读者协程个数\",\"读写锁大致的原理就是，通过互斥锁来使得写者协程间互斥，通过两个信号量writerSem和readerSem来使得读写互斥，读读共享。\"]},\"1156\":{\"h\":\"readerCount\",\"t\":[\"由于这个readerCount变化比较多，且很重要，所以单独拎出来说，它大致上归纳为以下几种状态\",\"0，当前读写锁既没有读写协程活跃也没有写者协程活跃，处于空闲的状态。\",\"-rwmutexMaxReaders，一个写者协程已经持有了互斥锁，当前没有活跃的读者协程\",\"-rwmutexMaxReaders+N，一个写者协程已经持有了写锁，当前的读者协程需要阻塞等待释放写锁\",\"``N-rwmutexMaxReaders`，一个写者协程已经持有了互斥锁，需要阻塞等待读者协程释放读锁\",\"N，当前有N个活跃读者协程，即加了N个读锁\",\"其中rwmutexMaxReaders是一个常量值，它的值是互斥锁可以阻塞等待协程数量的2倍，因为一半是读者协程，一半是写者协程。\",\"const rwmutexMaxReaders = 1 << 30\",\"整个读写锁部分就这个readerCount比较复杂，理解了它的变化也就搞明白了读写锁的工作流程。\"]},\"1157\":{\"h\":\"TryLock\",\"t\":[\"还是老样子，先来看看最简单的TryLock()\",\"func (rw *RWMutex) TryLock() bool { if !rw.w.TryLock() { return false } if !rw.readerCount.CompareAndSwap(0, -rwmutexMaxReaders) { rw.w.Unlock() return false } return true }\",\"开始时，它会尝试调用互斥锁的TryLock()，如果失败了就直接返回。然后用CAS操作尝试去将readerCount的值从0更新为-rwmutexMaxReaders。0代表的是没有正在工作的读者协程，-rwmutexMaxReaders表示现在写者协程已经持有了互斥锁。CAS操作更新失败就将互斥锁解锁，成功的话就返回true。\"]},\"1158\":{\"h\":\"Lock\",\"t\":[\"接下来是Lock()，它的实现也很简单。\",\"func (rw *RWMutex) Lock() { rw.w.Lock() r := rw.readerCount.Add(-rwmutexMaxReaders) + rwmutexMaxReaders if r != 0 && rw.readerWait.Add(r) != 0 { runtime_SemacquireRWMutex(&rw.writerSem, false, 0) } }\",\"首先它会跟其它的写者协程竞争直到持有互斥锁，然后进行这么一个操作，先原子地减去-rwmutexMaxReaders，然后再将得到的新值非原子地加上rwmutexMaxReaders\",\"r = rw.readerCount.Add(-rwmutexMaxReaders) + rwmutexMaxReaders\",\"拆成两步来看\",\"这是为了通知其它读者协程现在正有写者协程尝试持有锁，在TryLock部分已经讲过了。\",\"rw.readerCount.Add(-rwmutexMaxReaders)\",\"又加上rwmutexMaxReaders得到了r，这个r代表的就是现在正在工作的读者协程数量。\",\"r = rw.readerCount.Add(-rwmutexMaxReaders) + rwmutexMaxReaders\",\"然后判断是否有读者协程正在工作，然年后将readerWait的值加r，最终还是不为0的话表示需要等待这些读者协程工作完，则进入runtime_SemacquireRWMutex流程尝试获取信号量writerSem，该信号量是由读者协程释放的，如果能拿到信号量就表示读者协程已经工作完毕，否则的话就需要进入阻塞队列等待（这部分信号量的逻辑跟互斥锁那块基本上一致）。\"]},\"1159\":{\"h\":\"UnLock\",\"t\":[\"然后是UnLock()，释放写锁。\",\"func (rw *RWMutex) Unlock() { r := rw.readerCount.Add(rwmutexMaxReaders) if r >= rwmutexMaxReaders { fatal(\\\"sync: Unlock of unlocked RWMutex\\\") } for i := 0; i < int(r); i++ { runtime_Semrelease(&rw.readerSem, false, 0) } rw.w.Unlock() }\",\"它的流程如下\",\"前面提到过在加锁的时候会将readerCount更新为负值，这里再加上 rwmutexMaxReaders，就表示现在没有写者协程正在工作，然后得到的值就是正在阻塞等待的读者协程数量。\",\"r := rw.readerCount.Add(rwmutexMaxReaders)\",\"如果它本身就是0或大于0，代表着写锁已经被释放了\",\"if r >= rwmutexMaxReaders { fatal(\\\"sync: Unlock of unlocked RWMutex\\\") }\",\"释放信号量readerSem，唤醒等待的读者协程\",\"for i := 0; i < int(r); i++ { runtime_Semrelease(&rw.readerSem, false, 0) }\",\"最后再释放互斥锁，唤醒等待的写者协程。\",\"rw.w.Unlock()\",\"释放写锁完成。\"]},\"1160\":{\"h\":\"TryRLock\",\"t\":[\"接下来看看读锁部分，这是TryRLock的代码\",\"func (rw *RWMutex) TryRLock() bool { for { c := rw.readerCount.Load() if c < 0 { return false } if rw.readerCount.CompareAndSwap(c, c+1) { return true } } }\",\"它总共只干两件事\",\"判断是否有写者协程正在工作，有的话则加锁失败。\",\"c := rw.readerCount.Load() if c < 0 { return false }\",\"尝试将readerCount加1，如果更新成功了则加锁成功\",\"if rw.readerCount.CompareAndSwap(c, c+1) { return true }\",\"否则继续循环判断直到退出\",\"可以看到这里依赖的readerCount都是在写锁部分维护的，这也是为什么要先讲写锁的原因，因为复杂核心的地方都在写锁部分维护。\"]},\"1161\":{\"h\":\"RLock\",\"t\":[\"RLock的逻辑更简单\",\"func (rw *RWMutex) RLock() { if rw.readerCount.Add(1) < 0 { runtime_SemacquireRWMutexR(&rw.readerSem, false, 0) } }\",\"它会尝试将readerCount的值加1，如果得到的新值还是小于0，说明写者协程正在工作，则进入readerSem信号量阻塞流程，当前协程会进入阻塞队列等待。\"]},\"1162\":{\"h\":\"RUnLock\",\"t\":[\"RUnLock的也是一样的简单易懂\",\"func (rw *RWMutex) RUnlock() { if r := rw.readerCount.Add(-1); r < 0 { rw.rUnlockSlow(r) } } func (rw *RWMutex) rUnlockSlow(r int32) { if r+1 == 0 || r+1 == -rwmutexMaxReaders { fatal(\\\"sync: RUnlock of unlocked RWMutex\\\") } if rw.readerWait.Add(-1) == 0 { runtime_Semrelease(&rw.writerSem, false, 1) } }\",\"它首先会尝试讲readerCount减一，表示活跃读者协程数量减一，如果得到的值大于0表示可以直接释放，因为现在没有写者协程持有互斥锁，小于0表示有写者协程已经持有了互斥锁，它正在等待当前的所有读者协程完成工作。接下来进入runlockSlow的流程\",\"如果原来的readerCount值为0（锁是空闲的）或者为-rwmutexMaxReaders（写者协程没有需要等待的读者协程，即读锁已经全部释放），则表示当前没有活跃的读者协程，不需要解锁\",\"if r+1 == 0 || r+1 == -rwmutexMaxReaders { fatal(\\\"sync: RUnlock of unlocked RWMutex\\\") }\",\"如果有活跃的读者协程的话，则将readerWait减一，如果当前读者协程是最后一个活跃的读者，则释放writerSem 信号量，唤醒等待的写者协程。\",\"if rw.readerWait.Add(-1) == 0 { runtime_Semrelease(&rw.writerSem, false, 1) }\",\"释放读锁的流程结束。\"]},\"1163\":{\"h\":\"context\"},\"1164\":{\"h\":\"cond\",\"t\":[\"sync.Cond 是 Go 标准库中的条件变量，它是唯一一个需要手动初始化的同步工具。与其他同步原语不同，sync.Cond 需要传入一个互斥锁 (sync.Mutex) 来保护共享资源的访问。它允许协程在某个条件满足之前进入等待状态，并在条件满足时被唤醒。\"]},\"1165\":{\"h\":\"示例代码\",\"t\":[\"package main import ( \\\"fmt\\\" \\\"sync\\\" \\\"time\\\" ) var i = 0 func main() { var mu sync.Mutex var wg sync.WaitGroup // 创建一个条件变量，并传入互斥锁 cd := sync.NewCond(&mu) // 添加 4 个待处理的协程 wg.Add(4) // 创建 3 个协程，每个协程都会等待条件满足 for j := range 3 { go func() { defer wg.Done() mu.Lock() for i <= 100 { // 条件不满足时，协程会被阻塞在此 cd.Wait() } fmt.Printf(\\\"%d wake up\\\\n\\\", j) mu.Unlock() }() } // 创建一个协程，用来更新条件并唤醒其他协程 go func() { defer wg.Done() for { mu.Lock() i++ // 更新共享变量 mu.Unlock() if i > 100 { cd.Broadcast() // 条件满足时唤醒所有等待的协程 break } time.Sleep(time.Millisecond * 10) // 模拟工作负载 } }() // 等待所有协程完成 wg.Wait() }\",\"在上面的示例中，共享变量 i 被多个协程并发访问和修改。通过互斥锁 mu 来确保在并发条件下，访问 i 的操作是安全的。然后，通过 sync.NewCond(&mu) 创建了一个条件变量 cd，它依赖于 mu 锁来保证在等待时对共享资源的访问是同步的。\",\"三个等待的协程：每个协程通过 cd.Wait() 阻塞自己，直到条件满足（i > 100）。这些协程会在共享资源 i 的值更新之前一直处于阻塞状态。\",\"一个更新条件并唤醒其他协程的协程：当条件满足时（即 i > 100），这个协程通过 cd.Broadcast() 唤醒所有等待的协程，让它们继续执行。\"]},\"1166\":{\"h\":\"结构\",\"t\":[\"type Cond struct { // L is held while observing or changing the condition L Locker notify notifyList } type notifyList struct { // wait is the ticket number of the next waiter. It is atomically // incremented outside the lock. wait atomic.Uint32 notify uint32 // List of parked waiters. lock mutex head *sudog tail *sudog }\",\"其结构并不复杂：\",\"L，互斥锁，这里的类型是Locker接口，而不是具体的锁类型\",\"notify，等待协程的通知链表\",\"比较重要的是runtime.notifyList结构\",\"wait，原子值，记录了有多少个等待协程\",\"notify，指向下一个将要被唤醒的协程，从0开始递增\",\"lock，互斥锁，并不是我们传入的锁，而是runtime内部实现的一个锁\",\"head，tail，链表指针\",\"它总共就三个方法\",\"Wait， 阻塞等待\",\"Signal ，唤醒一个等待协程\",\"Broadcast，唤醒所有等待协程\",\"它的大部分实现都被隐藏在了runtime库下，这些实现位于runtime/sema.go文件中，以至于在标准库中它的代码非常简短，其基本原理就是一个加了锁的阻塞队列。\"]},\"1167\":{\"h\":\"Wait\",\"t\":[\"Wait方法会让协程自身陷入阻塞等待，直到被唤醒。\",\"func (c *Cond) Wait() { t := runtime_notifyListAdd(&c.notify) c.L.Unlock() runtime_notifyListWait(&c.notify, t) c.L.Lock() }\",\"它首先会将自身加入notifyList中，但其实只是将notifyList.wait加一而已，这里的操作就相当于len(notifyList)-1，得到了最后一个元素的下标\",\"func notifyListAdd(l *notifyList) uint32 { return l.wait.Add(1) - 1 }\",\"真正的加入操作是在notifyListWait函数中完成\",\"func notifyListWait(l *notifyList, t uint32) { ... }\",\"在该函数中，它首先会对链表进行上锁，然后快速判断当前协程是否已经被唤醒了，如果已经唤醒了就直接返回，不需要阻塞等待。\",\"lockWithRank(&l.lock, lockRankNotifyList) // Return right away if this ticket has already been notified. if less(t, l.notify) { unlock(&l.lock) return }\",\"如果没有被唤醒，则构造成sudog加入队列，然后通过gopark挂起。\",\"s := acquireSudog() s.g = getg() s.ticket = t s.releasetime = 0 if l.tail == nil { l.head = s } else { l.tail.next = s } l.tail = s goparkunlock(&l.lock, waitReasonSyncCondWait, traceBlockCondWait, 3)\",\"被唤醒后释放sudog结构\",\"releaseSudog(s)\"]},\"1168\":{\"h\":\"Signal\",\"t\":[\"Signal会按照队列先入先出的顺序唤醒阻塞的协程\",\"func (c *Cond) Signal() { runtime_notifyListNotifyOne(&c.notify) }\",\"它的流程如下\",\"不加锁直接判断，l.wait是否等于l.notify，相等则表示所有协程都已经唤醒\",\"if l.wait.Load() == atomic.Load(&l.notify) { return }\",\"加锁后，再判断一次是否都已经被唤醒\",\"lockWithRank(&l.lock, lockRankNotifyList) t := l.notify if t == l.wait.Load() { unlock(&l.lock) return }\",\"l.notify加一\",\"atomic.Store(&l.notify, t+1)\",\"循环遍历链表，找到需要被唤醒的协程，最后通过runtime.goready来唤醒协程。\",\"for p, s := (*sudog)(nil), l.head; s != nil; p, s = s, s.next { if s.ticket == t { n := s.next if p != nil { p.next = n } else { l.head = n } if n == nil { l.tail = p } unlock(&l.lock) s.next = nil readyWithTime(s, 4) return } } unlock(&l.lock)\"]},\"1169\":{\"h\":\"Broadcast\",\"t\":[\"Broadcast会唤醒所有阻塞的协程\",\"func (c *Cond) Broadcast() { runtime_notifyListNotifyAll(&c.notify) }\",\"它的流程基本上是一致的\",\"无锁检查，是否都已经被唤醒了\",\"// Fast-path: if there are no new waiters since the last notification // we don't need to acquire the lock. if l.wait.Load() == atomic.Load(&l.notify) { return }\",\"加锁，清空链表，然后释放锁，后续新到达的协程会被添加到链表头部\",\"lockWithRank(&l.lock, lockRankNotifyList) s := l.head l.head = nil l.tail = nil atomic.Store(&l.notify, l.wait.Load()) unlock(&l.lock)\",\"遍历链表，唤醒所有协程\",\"for s != nil { next := s.next s.next = nil readyWithTime(s, 4) s = next }\"]},\"1170\":{\"h\":\"小结\",\"t\":[\"sync.Cond 最常见的使用场景是需要在多个协程之间同步某些条件，通常应用于生产者-消费者模型、任务调度等场景。在这些场景中，多个协程需要等待某些条件满足才能继续执行，或者需要在条件改变时通知多个协程。它提供了一种灵活且高效的方式来管理协程间的同步。通过与互斥锁配合使用，sync.Cond 可以确保共享资源的访问安全，并且可以在特定条件满足时控制协程的执行顺序。理解其内部实现原理有助于我们更好地掌握并发编程的技巧，尤其是在涉及复杂条件同步时。\"]},\"1171\":{\"h\":\"Once\",\"t\":[\"sync.Once 是 Go 标准库中的一个同步工具，用于确保某个函数在并发环境下只执行一次。它通常用于延迟初始化、全局资源的初始化等场景，确保某个特定的操作只会被执行一次，即使有多个协程并发执行。\",\"package main import ( \\\"fmt\\\" \\\"sync\\\" ) func main() { var wg sync.WaitGroup var once sync.Once for i := range 10 { wg.Add(1) go func() { defer wg.Done() once.Do(func() { fmt.Println(i) }) }() } wg.Wait() }\",\"在上面的代码中，总共有 10 个协程，但无论如何，只有一个协程会执行 once.Do() 中的 fmt.Println(i)。具体是哪一个协程会打印，取决于哪个协程最先到达 once.Do()。\"]},\"1172\":{\"h\":\"结构\",\"t\":[\"type Once struct { done atomic.Uint32 m Mutex }\",\"它的内部结构非常简单\",\"done，一个原子值，用于表示是否被执行过\",\"m，互斥锁，用于阻塞其它想要执行的协程\",\"它的原理就是在执行前先加锁，然后更新done，执行完毕后解锁。\"]},\"1173\":{\"h\":\"Do\",\"t\":[\"func (o *Once) Do(f func()) { if o.done.Load() == 0 { o.doSlow(f) } } func (o *Once) doSlow(f func()) { o.m.Lock() defer o.m.Unlock() if o.done.Load() == 0 { defer o.done.Store(1) f() } }\",\"代码整体上非常简单，流程如下：\",\"直接加载原子值，如果已经执行过了就直接返回\",\"没有执行过，则尝试持有锁，这里可能是多个协程在竞争互斥锁\",\"当胜者成功持有锁后，还需要再一次判断done的值，因为在你持有锁后，别人可能已经完成加锁-执行-解锁一条龙了，这时你才刚被唤醒。\",\"执行目标函数\",\"更新done值\",\"释放锁\"]},\"1174\":{\"h\":\"小结\",\"t\":[\"sync.Once 是一个非常简洁而高效的同步工具，它确保了并发环境下某个操作只执行一次，从而避免了重复工作或资源的浪费。\"]},\"1175\":{\"h\":\"waitgroup\",\"t\":[\"WaitGroup，由Go标准库提供，它的功能就是用于等待一组协程运行完毕。\",\"package main import ( \\\"fmt\\\" \\\"sync\\\" ) func main() { var wg sync.WaitGroup for i := range 10 { wg.Add(1) go func() { defer wg.Done() fmt.Println(i) }() } wg.Wait() }\",\"这是一段非常简单的代码，它的功能就是开启10个协程打印0-9，并等待它们运行完毕。它的用法不再赘述，接下来我们来了解下它的基本工作原理，一点也不复杂。\"]},\"1176\":{\"h\":\"结构\",\"t\":[\"它的类型定义位于sync/waitgroup.go文件中\",\"type WaitGroup struct { noCopy noCopy state atomic.Uint64 // high 32 bits are counter, low 32 bits are waiter count. sema uint32 }\",\"字段释义如下：\",\"state，表示WaitGroup的状态，高32位用于统计被等待协程的数量，低32位用于统计等待wg完成的协程数量。\",\"sema，信号量，在sync标准库里它几乎无处不在。\",\"它的核心就在于Add()和Wait()这两个方法，基本工作原理就是信号量，Wait()方法尝试获取信号量，Add()方法释放信号量，来实现M个协程等待一组N个协程运行完毕。\"]},\"1177\":{\"h\":\"Add\",\"t\":[\"Add方法就是增加需要等待协程的数量。\",\"func (wg *WaitGroup) Add(delta int) { state := wg.state.Add(uint64(delta) << 32) v := int32(state >> 32) w := uint32(state) if v < 0 { panic(\\\"sync: negative WaitGroup counter\\\") } if w != 0 && delta > 0 && v == int32(delta) { panic(\\\"sync: WaitGroup misuse: Add called concurrently with Wait\\\") } if v > 0 || w == 0 { return } if wg.state.Load() != state { panic(\\\"sync: WaitGroup misuse: Add called concurrently with Wait\\\") } wg.state.Store(0) for ; w != 0; w-- { runtime_Semrelease(&wg.sema, false, 0) } }\",\"流程如下：\",\"它首先会对wg.state进行移位操作，分别获取高32位和低32位，对应变量v和w\",\"state := wg.state.Add(uint64(delta) << 32) v := int32(state >> 32) w := uint32(state)\",\"然后开始判断，v代表的是wg计数，w代表的等待wg完成的协程数量\",\"如果v小于0，直接panic，负数没有任何意义\",\"if v < 0 { panic(\\\"sync: negative WaitGroup counter\\\") }\",\"w不为0，且delta与v相等，表示Wait()方法与Add()方法被并发地调用，这是错误的使用方式\",\"if w != 0 && delta > 0 && v == int32(delta) { panic(\\\"sync: WaitGroup misuse: Add called concurrently with Wait\\\") }\",\"如果v大于0，或者w等于0，表示现在没有等待wg完成的协程，可以直接返回\",\"if v > 0 || w == 0 { return }\",\"走到这一步说明v等于0，且w大于0，即当前没有协程运行，但是有协程正在等待wg完成，所以就需要释放信号量，唤醒这些协程。\",\"if wg.state.Load() != state { panic(\\\"sync: WaitGroup misuse: Add called concurrently with Wait\\\") } wg.state.Store(0) for ; w != 0; w-- { runtime_Semrelease(&wg.sema, false, 0) }\",\"Done()方法其实就是Add(-1)，没有什么要讲的。\"]},\"1178\":{\"h\":\"Wait\",\"t\":[\"如果当前有其它协程需要等待运行完成，Wait方法的调用会使当前协程陷入阻塞。\",\"func (wg *WaitGroup) Wait() { for { state := wg.state.Load() v := int32(state >> 32) w := uint32(state) if v == 0 { return } // Increment waiters count. if wg.state.CompareAndSwap(state, state+1) { runtime_Semacquire(&wg.sema) if wg.state.Load() != 0 { panic(\\\"sync: WaitGroup is reused before previous Wait has returned\\\") } return } } }\",\"它的流程就是一个for循环\",\"读取高32位和低32位，得到需要被等待协程的数量，和等待协程的数量，如果没有协程需要等待，就直接返回\",\"state := wg.state.Load() v := int32(state >> 32) w := uint32(state) if v == 0 { return }\",\"否则就通过CAS操作将等待协程数量加一，然后尝试获取信号量，进入阻塞等待队列\",\"// Increment waiters count. if wg.state.CompareAndSwap(state, state+1) { runtime_Semacquire(&wg.sema) ... }\",\"当等待协程被唤醒后（因为所有被等待的协程都运行完毕了，释放了信号量），检查state ，如果不为0，表示在Wait()和Add()又被并发的使用了\",\"if wg.state.Load() != 0 { panic(\\\"sync: WaitGroup is reused before previous Wait has returned\\\") } return\",\"如果CAS没有更新成功，则继续循环\"]},\"1179\":{\"h\":\"小结\",\"t\":[\"最后要提醒下，在使用WaitGroup时，Add和Wait不要并发的调用。\"]},\"1180\":{\"h\":\"\",\"t\":[\"404 Not Found\"]},\"1181\":{\"h\":\"Community\"},\"1182\":{\"h\":\"Essential\"},\"1183\":{\"h\":\"Ds\"},\"1184\":{\"h\":\"Err\"},\"1185\":{\"h\":\"Network\"},\"1186\":{\"h\":\"Runtime\"},\"1187\":{\"h\":\"Sync\"}},\"dirtCount\":0,\"index\":[[\"共享变量\",{\"1\":{\"1165\":1}}],[\"共识协议\",{\"0\":{\"84\":1}}],[\"拆成两步来看\",{\"1\":{\"1158\":1}}],[\"走到这一步说明v等于0\",{\"1\":{\"1177\":1}}],[\"走到这一步有两种可能\",{\"1\":{\"1153\":1}}],[\"走到1\",{\"1\":{\"1037\":1}}],[\"频繁的缓存一致性同步会显著降低性能\",{\"1\":{\"1153\":1}}],[\"滥用自旋可能导致以下危险的后果\",{\"1\":{\"1153\":1}}],[\"饿死\",{\"1\":{\"1151\":1}}],[\"喜欢插队的\",{\"1\":{\"1151\":1}}],[\"饥饿模式下互斥锁的所有权会全部由等待队列中协程逐个持有\",{\"1\":{\"1151\":1}}],[\"饥饿模式就是不一般的情况\",{\"1\":{\"1151\":1}}],[\"饥饿模式\",{\"1\":{\"1151\":1}}],[\"轮次而增加\",{\"1\":{\"1148\":1}}],[\"轮询策略\",{\"1\":{\"145\":1}}],[\"着色缓存\",{\"0\":{\"1145\":1}}],[\"赋空值就是删除引用\",{\"1\":{\"1144\":1}}],[\"赋值器\",{\"1\":{\"1131\":1}}],[\"赋值操作是在编译器期间插入的\",{\"1\":{\"1038\":1}}],[\"赋值给insertk\",{\"1\":{\"1038\":1}}],[\"赋值给hmap\",{\"1\":{\"1034\":1}}],[\"赋值给原字符串\",{\"1\":{\"376\":1}}],[\"赋值指针\",{\"1\":{\"433\":1}}],[\"赋值会用到运算符=\",{\"1\":{\"329\":1}}],[\"赋值\",{\"0\":{\"329\":1},\"1\":{\"406\":1,\"432\":1}}],[\"混合写屏障捕捉到了这一行为\",{\"1\":{\"1144\":1}}],[\"混合写屏障\",{\"0\":{\"1144\":1},\"1\":{\"1144\":1}}],[\"屏障\",{\"0\":{\"1141\":1}}],[\"屏蔽其内部实现\",{\"1\":{\"567\":1}}],[\"扣除积分的函数为runtime\",{\"1\":{\"1139\":1}}],[\"辅助积分\",{\"1\":{\"1139\":1}}],[\"辅助协程调度\",{\"1\":{\"1082\":1}}],[\"互不影响\",{\"1\":{\"1138\":1}}],[\"互斥量总是悲观的认为共享数据肯定会被修改\",{\"1\":{\"490\":1}}],[\"互斥锁的核心\",{\"1\":{\"1153\":1}}],[\"互斥锁的所有权会直接移交给等待队列中最前面的协程\",{\"1\":{\"1151\":1}}],[\"互斥锁提供了两个方法来进行加锁\",{\"1\":{\"1152\":1}}],[\"互斥锁就会进入饥饿模式\",{\"1\":{\"1151\":1}}],[\"互斥锁一共有两种模式\",{\"1\":{\"1151\":1}}],[\"互斥锁mutex的类型定义位于sync\",{\"1\":{\"1151\":1}}],[\"互斥锁相关信息的跟踪\",{\"1\":{\"557\":1}}],[\"互斥锁适合读操作与写操作频率都差不多的情况\",{\"1\":{\"481\":1}}],[\"互斥锁\",{\"0\":{\"480\":1},\"1\":{\"462\":1,\"1149\":1,\"1166\":2,\"1172\":1}}],[\"池gcbgmarkworkerpool中获取可用的\",{\"1\":{\"1138\":1}}],[\"池runitme\",{\"1\":{\"1138\":1}}],[\"池中的对象可能会在没有任何通知的情况下被\",{\"1\":{\"485\":1}}],[\"称作受到灰色对象的保护\",{\"1\":{\"1136\":1}}],[\"弱三色不变性\",{\"1\":{\"1136\":1}}],[\"弱化了\",{\"1\":{\"88\":1}}],[\"漏标\",{\"1\":{\"1136\":1}}],[\"场上只有灰色和白色对象\",{\"1\":{\"1135\":1}}],[\"白色\",{\"1\":{\"1135\":1}}],[\"灰色\",{\"1\":{\"1135\":1}}],[\"黑色对象不可以直接引用白色对象\",{\"1\":{\"1136\":1}}],[\"黑色\",{\"1\":{\"1135\":1}}],[\"碎片问题的影响并不大\",{\"1\":{\"1134\":1}}],[\"式的内存管理方式\",{\"1\":{\"1134\":1}}],[\"满足绝大部分业务场景的需要\",{\"1\":{\"1130\":1}}],[\"满了\",{\"1\":{\"468\":1}}],[\"拉低了编译时间\",{\"1\":{\"1130\":1}}],[\"拉取式迭代器依然同理\",{\"1\":{\"584\":1}}],[\"拉取式迭代器也是同理\",{\"1\":{\"584\":1}}],[\"拉取式迭代器都会有特定的函数如next\",{\"1\":{\"583\":1}}],[\"拉取式迭代器\",{\"0\":{\"583\":1},\"1\":{\"583\":1,\"588\":1}}],[\"拖累运行速度\",{\"1\":{\"1130\":1}}],[\"机制就是引用计数\",{\"1\":{\"1130\":1}}],[\"腾出空间给其它对象使用\",{\"1\":{\"1130\":1}}],[\"腾讯开源\",{\"1\":{\"53\":1}}],[\"页内存分配完成后\",{\"1\":{\"1120\":1}}],[\"页面中有几个可供选择的选项\",{\"1\":{\"557\":1}}],[\"尾部浪费\",{\"1\":{\"1114\":1}}],[\"固定为\",{\"1\":{\"1112\":1}}],[\"固定长度的对应类型的零值集合\",{\"1\":{\"321\":1}}],[\"限制器\",{\"1\":{\"1131\":1}}],[\"限制p的数量只能为1\",{\"1\":{\"1106\":1}}],[\"限制了切割后的容量\",{\"1\":{\"372\":1}}],[\"追求更简单的使用方法\",{\"1\":{\"1106\":1}}],[\"追求极致的路由性能\",{\"1\":{\"962\":1}}],[\"迟迟无法得到执行\",{\"1\":{\"1105\":1}}],[\"偷取\",{\"1\":{\"1104\":1}}],[\"找不到\",{\"1\":{\"1104\":1}}],[\"找到需要被唤醒的协程\",{\"1\":{\"1168\":1}}],[\"找到了的话\",{\"1\":{\"1097\":1}}],[\"找到了一个合适的位置分配给key\",{\"1\":{\"1038\":1}}],[\"找到当前bmap链表的前一个\",{\"1\":{\"1039\":1}}],[\"找到元素\",{\"1\":{\"1039\":1}}],[\"找到列表中所有的导入都已被初始化的第一个包\",{\"1\":{\"116\":1}}],[\"彼此之前通过指针链接起来\",{\"1\":{\"1103\":1}}],[\"收尾工作完成后\",{\"1\":{\"1140\":1}}],[\"收集器\",{\"1\":{\"1131\":1}}],[\"收缩\",{\"0\":{\"1102\":1}}],[\"收到了不管什么请求都要告诉\",{\"1\":{\"142\":1}}],[\"挂起后\",{\"1\":{\"1098\":1}}],[\"挂起的原因有很多\",{\"1\":{\"1098\":1}}],[\"挂起\",{\"0\":{\"1098\":1}}],[\"挂了的话\",{\"1\":{\"142\":1}}],[\"绑定的\",{\"1\":{\"1116\":1}}],[\"绑定且\",{\"1\":{\"1100\":1}}],[\"绑定从而让\",{\"1\":{\"1097\":1}}],[\"绑定以继续工作\",{\"1\":{\"1092\":1}}],[\"触发的原因\",{\"1\":{\"1132\":1}}],[\"触发\",{\"0\":{\"1132\":1}}],[\"触发调度的时机有以下几个\",{\"1\":{\"1108\":1}}],[\"触发系统调用的方法有两种\",{\"1\":{\"1097\":1}}],[\"触发扩容有两个条件\",{\"1\":{\"1041\":1}}],[\"及以后\",{\"1\":{\"1095\":1}}],[\"及以前\",{\"1\":{\"563\":1}}],[\"汇编实现\",{\"1\":{\"1092\":1}}],[\"销毁完毕然后对allp进行切片\",{\"1\":{\"1089\":1}}],[\"抢占式是异步抢占执行权\",{\"1\":{\"1108\":1}}],[\"抢占式调度\",{\"0\":{\"1107\":1}}],[\"抢占\",{\"1\":{\"1088\":1,\"1097\":1}}],[\"抢占标识符\",{\"1\":{\"1087\":1}}],[\"抢占长时间运行的协程\",{\"1\":{\"1082\":1}}],[\"成的三个成员\",{\"1\":{\"1085\":1}}],[\"成功的话就返回true\",{\"1\":{\"1157\":1}}],[\"成功获得锁和进入等待队列陷入阻塞\",{\"1\":{\"1153\":1}}],[\"成功关联后就会进入第一个runtime\",{\"1\":{\"1104\":1}}],[\"成功\",{\"1\":{\"946\":1}}],[\"成功加锁会返回true\",{\"1\":{\"481\":1}}],[\"成功后\",{\"1\":{\"144\":1}}],[\"著名开源消息队列中间件\",{\"1\":{\"1084\":1}}],[\"影响最为巨大的还是霍尔在\",{\"1\":{\"1084\":1}}],[\"影响不到源切片s\",{\"1\":{\"1019\":1}}],[\"历史\",{\"0\":{\"1084\":1}}],[\"间隔时间最多会提升至\",{\"1\":{\"1082\":1}}],[\"间隔后就是指定的生成路径\",{\"1\":{\"201\":1}}],[\"抑或是程序发生的panic\",{\"1\":{\"1079\":1}}],[\"恐慌\",{\"0\":{\"1079\":1}}],[\"栈内存统计\",{\"1\":{\"1128\":1}}],[\"栈内存\",{\"1\":{\"1128\":1}}],[\"栈扩容时做法和现在不一样\",{\"1\":{\"1103\":1}}],[\"栈上分配的内存会在返回时自动回收\",{\"1\":{\"1074\":1}}],[\"栈空间不足时\",{\"1\":{\"552\":1}}],[\"居然崩了\",{\"1\":{\"1069\":1}}],[\"种不同的大小\",{\"1\":{\"1123\":1}}],[\"种不同的值\",{\"1\":{\"1114\":1}}],[\"种情况的处理\",{\"1\":{\"1067\":1}}],[\"种类\",{\"1\":{\"143\":1}}],[\"逐个遍历每一个可以到达的节点\",{\"1\":{\"1134\":1}}],[\"逐个遍历找到一个可用的管道\",{\"1\":{\"1067\":1}}],[\"逐渐正在被新的标记语言替代\",{\"1\":{\"618\":1}}],[\"做了一些处理\",{\"1\":{\"1063\":1}}],[\"做示例\",{\"1\":{\"1010\":1}}],[\"造成额外的性能损失\",{\"1\":{\"1062\":1}}],[\"思路就是在函数的头部插入抢占检测代码runtime\",{\"1\":{\"1106\":1}}],[\"思想的\",{\"1\":{\"1084\":1}}],[\"思想的影响\",{\"1\":{\"1084\":1}}],[\"思想的核心就是进程之间通过消息通信来进行数据的交换\",{\"1\":{\"1056\":1}}],[\"思想的典型代表\",{\"1\":{\"1056\":1}}],[\"思考下面几种情况\",{\"1\":{\"582\":1}}],[\"思考下面这一段代码\",{\"1\":{\"331\":1}}],[\"晋升为了\",{\"1\":{\"1047\":1}}],[\"晋升为\",{\"1\":{\"1046\":1,\"1049\":1}}],[\"留下是因为后续要靠\",{\"1\":{\"1042\":1}}],[\"搬迁后\",{\"1\":{\"1042\":1}}],[\"搬迁目的地的新桶\",{\"1\":{\"1042\":1}}],[\"差值\",{\"1\":{\"1042\":1}}],[\"差不多都是直接调用的事情\",{\"1\":{\"981\":1}}],[\"差不多了\",{\"1\":{\"817\":1}}],[\"差不多\",{\"1\":{\"344\":1}}],[\"旧\",{\"1\":{\"1097\":2}}],[\"旧的溢出桶都会被\",{\"1\":{\"1043\":1}}],[\"旧桶中的溢出桶内存由于不再被引用后续会被\",{\"1\":{\"1042\":1}}],[\"旧桶的搬迁目的地是两个新桶\",{\"1\":{\"1042\":1}}],[\"旧桶的长度\",{\"1\":{\"1042\":1}}],[\"旧桶的内存才会被释放掉\",{\"1\":{\"1042\":1}}],[\"旧桶\",{\"1\":{\"1042\":1}}],[\"旧切片的容量\",{\"1\":{\"1025\":1}}],[\"倒序遍历桶内的tophash\",{\"1\":{\"1039\":1}}],[\"倒不如无论何时要么都用值接收者\",{\"1\":{\"414\":1}}],[\"逆序遍历环形链表查找最后一个存在的元素\",{\"1\":{\"1039\":1}}],[\"逆向排序\",{\"0\":{\"687\":1}}],[\"状态变为\",{\"1\":{\"1106\":1}}],[\"状态会由\",{\"1\":{\"1098\":1}}],[\"状态由\",{\"1\":{\"1097\":1}}],[\"状态\",{\"1\":{\"1039\":1}}],[\"状态检查\",{\"1\":{\"1038\":1,\"1039\":1}}],[\"状态码中\",{\"1\":{\"990\":1}}],[\"状态码\",{\"1\":{\"989\":1}}],[\"范围为\",{\"1\":{\"1114\":1}}],[\"范围\",{\"1\":{\"1037\":1}}],[\"防止并发读写\",{\"1\":{\"1036\":1}}],[\"边界处理\",{\"1\":{\"1036\":1}}],[\"置为evacuatedx或evacuated\",{\"1\":{\"1042\":1}}],[\"置为\",{\"1\":{\"1034\":1}}],[\"桶中的部分数据会在上半区\",{\"1\":{\"1042\":1}}],[\"桶下标后移\",{\"1\":{\"1037\":1}}],[\"桶内下标\",{\"1\":{\"1042\":1}}],[\"桶内序号i\",{\"1\":{\"1037\":1}}],[\"桶内元素下标\",{\"1\":{\"1037\":1}}],[\"桶内偏移量\",{\"1\":{\"1037\":1}}],[\"桶bucket0指向溢出桶overflow0\",{\"1\":{\"1032\":1}}],[\"桶的高度就是桶的容量\",{\"1\":{\"364\":1}}],[\"溢出哈希桶下面统称为溢出桶\",{\"1\":{\"1032\":1}}],[\"溢出桶也要指定旧桶和新桶\",{\"1\":{\"1042\":1}}],[\"溢出桶链表过长导致遍历时间增大\",{\"1\":{\"1042\":1}}],[\"溢出桶数量不能过多\",{\"1\":{\"1041\":1}}],[\"溢出桶数量过多\",{\"1\":{\"1032\":1}}],[\"溢出桶的数量就会减少\",{\"1\":{\"1043\":1}}],[\"溢出桶的数量跟哈希桶的数量差不多\",{\"1\":{\"1041\":1}}],[\"溢出桶的数量过多\",{\"1\":{\"1041\":1}}],[\"溢出桶的指针切片\",{\"1\":{\"1032\":1}}],[\"溢出桶不为空\",{\"1\":{\"1039\":1}}],[\"溢出桶所需的内存\",{\"1\":{\"1034\":1}}],[\"溢出桶指的是就是当前桶已经满了\",{\"1\":{\"1030\":1}}],[\"橙色部分是溢出哈希桶数组\",{\"1\":{\"1032\":1}}],[\"蓝色部分是哈希桶数组\",{\"1\":{\"1032\":1}}],[\"冲突\",{\"0\":{\"1032\":1}}],[\"英文注释已经说明的很清晰了\",{\"1\":{\"1030\":1}}],[\"英文名\",{\"1\":{\"293\":1}}],[\"停止循环\",{\"1\":{\"1027\":1}}],[\"浏览细节\",{\"1\":{\"1026\":1}}],[\"浏览hello\",{\"1\":{\"152\":1}}],[\"得确保数据是只读的\",{\"1\":{\"1054\":1}}],[\"得到需要被等待协程的数量\",{\"1\":{\"1178\":1}}],[\"得到了最后一个元素的下标\",{\"1\":{\"1167\":1}}],[\"得到了元素的指针\",{\"1\":{\"1038\":1}}],[\"得到指向其底层数组的指针\",{\"1\":{\"1054\":1}}],[\"得到起始桶内的元素起始位置\",{\"1\":{\"1037\":1}}],[\"得到起始桶的位置\",{\"1\":{\"1037\":1}}],[\"得到哈希桶的序号\",{\"1\":{\"1036\":1}}],[\"得到新长度和容量后\",{\"1\":{\"1025\":1}}],[\"得益于此\",{\"1\":{\"544\":1,\"673\":1}}],[\"得益于\",{\"1\":{\"19\":1,\"504\":1}}],[\"唯一共同点就是保存的数据是一样的\",{\"1\":{\"1025\":1}}],[\"唯一的好处可能就是符合官方的迭代器规范\",{\"1\":{\"583\":1}}],[\"待插入的value值指针\",{\"1\":{\"1038\":1}}],[\"待插入的key值指针\",{\"1\":{\"1038\":1}}],[\"待插入的tophash\",{\"1\":{\"1038\":1}}],[\"待遍历的bmap\",{\"1\":{\"1037\":1}}],[\"待遍历的桶的位置\",{\"1\":{\"1037\":1}}],[\"待添加元素数量\",{\"1\":{\"1024\":1}}],[\"待测试函数只有一行输出时\",{\"1\":{\"520\":1}}],[\"阅读本文需要unsafe标准库的知识\",{\"1\":{\"1018\":1}}],[\"阅读起来就就更加恼火了\",{\"1\":{\"589\":1}}],[\"阅读起来也相当的方便\",{\"1\":{\"4\":1}}],[\"展开深度\",{\"1\":{\"1016\":1}}],[\"展示最近\",{\"1\":{\"561\":1}}],[\"展示每组主函数的协程相关统计信息\",{\"1\":{\"561\":1}}],[\"展示每一个包的测试包\",{\"1\":{\"20\":1}}],[\"展示每一个包及其所依赖的每一个包的名称\",{\"1\":{\"20\":1}}],[\"展示过程中所执行的命令\",{\"1\":{\"27\":1}}],[\"展示一个模块的撤回版本\",{\"1\":{\"20\":1}}],[\"展示一个模块所有可用的信息\",{\"1\":{\"20\":1}}],[\"展示所有会被编译器编译的包\",{\"1\":{\"20\":1}}],[\"展示go的版本信息\",{\"1\":{\"2\":1}}],[\"展示源代码中的文档\",{\"1\":{\"2\":1}}],[\"务必保持实例名称唯一\",{\"1\":{\"1016\":1}}],[\"轻量简洁的\",{\"1\":{\"1008\":1}}],[\"轻量级的命令行框架\",{\"1\":{\"615\":1}}],[\"考虑到实现复杂度和性能损耗\",{\"1\":{\"1141\":1}}],[\"考虑到\",{\"1\":{\"1004\":1}}],[\"利于分布式拓展\",{\"1\":{\"1004\":1}}],[\"利用率只达到了\",{\"1\":{\"1138\":1}}],[\"利用率不达标\",{\"1\":{\"1138\":1}}],[\"利用管道的阻塞条件\",{\"1\":{\"467\":1}}],[\"利用闭包\",{\"1\":{\"399\":1}}],[\"利用反射可以获取这些信息\",{\"1\":{\"198\":1}}],[\"利用\",{\"1\":{\"166\":1}}],[\"利用好doc命令可以帮助你更方便的阅读文档\",{\"1\":{\"4\":1}}],[\"识别\",{\"1\":{\"1003\":1}}],[\"识别的话就得手动设置扫描路径\",{\"1\":{\"193\":1}}],[\"降低性能\",{\"1\":{\"1003\":1}}],[\"攻击\",{\"1\":{\"1002\":1}}],[\"放入\",{\"1\":{\"1096\":1,\"1098\":1}}],[\"放入全局的空闲\",{\"1\":{\"1093\":1}}],[\"放入全局队列中\",{\"1\":{\"1089\":1,\"1097\":1,\"1106\":1}}],[\"放入一个对象\",{\"1\":{\"485\":1}}],[\"放在最后就是不希望产生干扰\",{\"1\":{\"1041\":1}}],[\"放行\",{\"1\":{\"1000\":1}}],[\"放行option请求\",{\"1\":{\"1000\":1}}],[\"生产环境中的服务端通常都不会填\",{\"1\":{\"1000\":1}}],[\"生成后的代码如下\",{\"1\":{\"824\":1}}],[\"生成具体的函数体\",{\"1\":{\"823\":1}}],[\"生成文件后\",{\"1\":{\"629\":1}}],[\"生成的新切片容量就是6\",{\"1\":{\"1019\":1}}],[\"生成的新切片的容量等于数组长度减去新切片引用的起始位置\",{\"1\":{\"1019\":1}}],[\"生成的\",{\"1\":{\"827\":1,\"828\":1}}],[\"生成的代码对于\",{\"1\":{\"823\":1}}],[\"生成的代码体积最大\",{\"1\":{\"198\":1}}],[\"生成的一个函数\",{\"1\":{\"823\":1}}],[\"生成的文件会在指定目录中保持与protobuf文件相同的相对结构\",{\"1\":{\"201\":1}}],[\"生成路径\",{\"1\":{\"201\":1}}],[\"生成代码\",{\"0\":{\"152\":1},\"1\":{\"158\":1}}],[\"生成器是用于生成业务代码\",{\"1\":{\"148\":1}}],[\"生成\",{\"0\":{\"201\":1},\"1\":{\"9\":1,\"40\":2,\"94\":1}}],[\"光是使用默认的配置是远远不够的\",{\"1\":{\"997\":1}}],[\"光是阅读它们的源代码就需要花费不少时间\",{\"1\":{\"614\":1}}],[\"使得我们有必要去了解一下它背后的结构\",{\"1\":{\"1072\":1}}],[\"使得当前协程变为\",{\"1\":{\"1066\":1}}],[\"使得文件下载异常简单\",{\"1\":{\"986\":1}}],[\"使其变为\",{\"1\":{\"1060\":1}}],[\"使用mcache的好处在于内存分配时不需要全局锁\",{\"1\":{\"1116\":1}}],[\"使用make函数创建\",{\"1\":{\"1058\":1}}],[\"使用make函数创建切片的工作由runtime\",{\"1\":{\"1020\":1}}],[\"使用max函数比较最大值\",{\"1\":{\"332\":1}}],[\"使用者可以自己决定在何时让出执行权\",{\"1\":{\"1106\":1}}],[\"使用len和cap函数时\",{\"1\":{\"1057\":1}}],[\"使用了hiter结构体来存放遍历信息\",{\"1\":{\"1037\":1}}],[\"使用了两种很形象的操作符来表示读写操作\",{\"1\":{\"465\":1}}],[\"使用位运算的好处就是更快\",{\"1\":{\"1036\":1}}],[\"使用指定类型的hasher计算哈希值\",{\"1\":{\"1036\":1}}],[\"使用负载因子用于衡量哈希表的冲突情况\",{\"1\":{\"1032\":1}}],[\"使用render写入响应头\",{\"1\":{\"981\":1}}],[\"使用reflect\",{\"1\":{\"431\":1,\"438\":1}}],[\"使用方法也几乎没有什么差别\",{\"1\":{\"976\":1}}],[\"使用方法基本上与httprouter一致\",{\"1\":{\"968\":1}}],[\"使用json\",{\"1\":{\"970\":1}}],[\"使用别名\",{\"1\":{\"948\":1}}],[\"使用字段验证时\",{\"1\":{\"946\":1}}],[\"使用多个验证标记\",{\"1\":{\"938\":2}}],[\"使用率\",{\"0\":{\"911\":1,\"914\":1},\"1\":{\"908\":1}}],[\"使用结构体标签可以指定主键字段\",{\"1\":{\"858\":1}}],[\"使用预编译语句\",{\"1\":{\"852\":1}}],[\"使用预定义\",{\"0\":{\"780\":1}}],[\"使用本地时间\",{\"1\":{\"841\":1}}],[\"使用变量\",{\"1\":{\"791\":1}}],[\"使用私钥将\",{\"1\":{\"785\":1}}],[\"使用option进行验证\",{\"1\":{\"784\":1}}],[\"使用output注释来检测输出\",{\"1\":{\"520\":1}}],[\"使用hs256算法\",{\"1\":{\"779\":1}}],[\"使用help命令查看所有testflag\",{\"1\":{\"38\":1}}],[\"使用不同的密钥来进行签名和验证\",{\"1\":{\"777\":1}}],[\"使用内置函数recover\",{\"1\":{\"607\":1}}],[\"使用内置函数panic即可\",{\"1\":{\"605\":1}}],[\"使用内置函数close来关闭一个管道\",{\"1\":{\"464\":1}}],[\"使用内置函数copy\",{\"1\":{\"378\":1}}],[\"使用的标记算法\",{\"1\":{\"1134\":1}}],[\"使用的什么数据库\",{\"1\":{\"851\":1}}],[\"使用的前提是入参必须是接口类型\",{\"1\":{\"597\":1}}],[\"使用的案例可以前往consul\",{\"1\":{\"176\":1}}],[\"使用类型别名后看起来会简洁一些\",{\"1\":{\"594\":1}}],[\"使用类型别名后的例子如下\",{\"1\":{\"594\":1}}],[\"使用~符号\",{\"1\":{\"574\":1}}],[\"使用起重机a\",{\"1\":{\"567\":1}}],[\"使用起来很简单\",{\"1\":{\"1054\":1}}],[\"使用起来不太方便\",{\"1\":{\"1007\":1}}],[\"使用起来也要比原来更方便\",{\"1\":{\"581\":1}}],[\"使用起来如下所示\",{\"1\":{\"582\":1}}],[\"使用起来如下\",{\"1\":{\"578\":1,\"584\":1}}],[\"使用起来十分简单\",{\"1\":{\"550\":1,\"982\":1}}],[\"使用起来十分的简单\",{\"1\":{\"421\":1,\"486\":1}}],[\"使用起来跟平常文件系统没什么区别\",{\"1\":{\"41\":1}}],[\"使用技术b\",{\"1\":{\"567\":3}}],[\"使用技术a\",{\"1\":{\"567\":3}}],[\"使用完毕后记得使用free释放内存\",{\"1\":{\"536\":1}}],[\"使用完毕后释放\",{\"1\":{\"485\":1}}],[\"使用spanclass通过runtime\",{\"1\":{\"1114\":1}}],[\"使用swaggerfiles\",{\"1\":{\"1016\":1}}],[\"使用shouldbind来让gin自动推断\",{\"1\":{\"971\":1}}],[\"使用scanrows方法可以将每一行的结果扫描到结构体中\",{\"1\":{\"882\":1}}],[\"使用slicedata的例子如下\",{\"1\":{\"753\":1}}],[\"使用strings\",{\"1\":{\"525\":1}}],[\"使用sync\",{\"1\":{\"486\":1}}],[\"使用情况\",{\"1\":{\"525\":1}}],[\"使用xprog运行测试\",{\"1\":{\"519\":1}}],[\"使用对象\",{\"1\":{\"485\":1}}],[\"使用互斥锁可以非常完美的解决上述问题\",{\"1\":{\"480\":1}}],[\"使用它们的前提是\",{\"1\":{\"1054\":1}}],[\"使用它时不需要使用锁之类的方式来控制\",{\"1\":{\"1044\":1}}],[\"使用它可以很轻易的实现等待一组协程的效果\",{\"1\":{\"472\":1}}],[\"使用它的前提是必须在一个支持\",{\"1\":{\"20\":1}}],[\"使用clause\",{\"1\":{\"881\":1}}],[\"使用close函数对其进行关闭操作会导致\",{\"1\":{\"468\":1}}],[\"使用c\",{\"1\":{\"541\":1}}],[\"使用convertibleto方法可以判断一个类型是否可以被转换为另一个指定的类型\",{\"1\":{\"437\":1}}],[\"使用use指令\",{\"1\":{\"513\":1}}],[\"使用unsafe函数来操作字符串转换并不安全\",{\"1\":{\"1054\":1}}],[\"使用unsafe\",{\"1\":{\"434\":1}}],[\"使用uri建立连接\",{\"1\":{\"221\":1}}],[\"使用type\",{\"1\":{\"433\":1}}],[\"使用例子如下\",{\"1\":{\"417\":2,\"418\":2,\"605\":1,\"755\":1}}],[\"使用空格进行分隔\",{\"1\":{\"409\":1}}],[\"使用具名返回值时\",{\"1\":{\"397\":1}}],[\"使用拓展表达式切割的切片容量为max\",{\"1\":{\"371\":1}}],[\"使用标签\",{\"1\":{\"357\":1}}],[\"使用标签来中断外层循环\",{\"1\":{\"356\":1}}],[\"使用其它进制时\",{\"1\":{\"341\":1}}],[\"使用flag\",{\"1\":{\"633\":1}}],[\"使用fmt\",{\"1\":{\"341\":1}}],[\"使用form\",{\"1\":{\"970\":1}}],[\"使用for\",{\"1\":{\"137\":1}}],[\"使用默认db\",{\"1\":{\"241\":1,\"243\":1}}],[\"使用函数elasticsearch\",{\"1\":{\"205\":1}}],[\"使用最为广泛\",{\"1\":{\"172\":1}}],[\"使用grpc\",{\"1\":{\"170\":1,\"174\":1}}],[\"使用go语言编写的ini文件的解析库\",{\"1\":{\"815\":1}}],[\"使用go\",{\"1\":{\"7\":1,\"13\":1,\"14\":1,\"15\":1,\"16\":1,\"19\":1,\"801\":1}}],[\"使用errorinfo作为\",{\"1\":{\"168\":1}}],[\"使用时可以根据自己的需求来进行配置\",{\"1\":{\"852\":1}}],[\"使用时\",{\"1\":{\"166\":1,\"602\":1}}],[\"使用示例如下\",{\"1\":{\"165\":1,\"419\":2,\"607\":1,\"677\":1,\"678\":1,\"679\":1,\"680\":1}}],[\"使用拦截器\",{\"1\":{\"165\":1,\"166\":1}}],[\"使用流式响应时\",{\"1\":{\"157\":1}}],[\"使用流式请求时\",{\"1\":{\"157\":1}}],[\"使用生成器生成\",{\"1\":{\"152\":1}}],[\"使用到的所有端口\",{\"1\":{\"143\":1}}],[\"使用此协议来在服务集群间进行互相通知\",{\"1\":{\"142\":1}}],[\"使用如下的优先级来读取配置\",{\"1\":{\"789\":1}}],[\"使用如下\",{\"1\":{\"115\":1}}],[\"使用该库可以很方便的通过\",{\"1\":{\"803\":1}}],[\"使用该指令后\",{\"1\":{\"46\":1}}],[\"使用该参数时\",{\"1\":{\"20\":1}}],[\"使用除了这些参数之外的其它参数就可以关闭缓存\",{\"1\":{\"38\":1}}],[\"使用下列参数时将会默认开启缓存\",{\"1\":{\"38\":1}}],[\"使用格式如下\",{\"1\":{\"37\":1,\"44\":1}}],[\"使用给定\",{\"1\":{\"27\":1}}],[\"使用|来可以表示多个\",{\"1\":{\"7\":1}}],[\"使用逗号分隔\",{\"1\":{\"7\":1,\"1017\":1}}],[\"使用模块代理可以有效的提升模块的下载速度\",{\"1\":{\"7\":1}}],[\"使用命令\",{\"1\":{\"7\":1}}],[\"使用\",{\"0\":{\"361\":1,\"365\":1,\"489\":1,\"576\":1,\"812\":1,\"820\":1,\"925\":1,\"939\":1,\"1011\":1},\"1\":{\"7\":1,\"14\":1,\"37\":1,\"85\":1,\"136\":1,\"147\":1,\"152\":1,\"546\":1,\"547\":2,\"572\":3,\"611\":1,\"734\":1,\"803\":1,\"849\":1,\"905\":1,\"982\":1,\"1011\":1,\"1017\":1,\"1038\":1}}],[\"删去了许多条件判断\",{\"1\":{\"1104\":1}}],[\"删去了不少的字段\",{\"1\":{\"1086\":1}}],[\"删\",{\"0\":{\"1048\":1}}],[\"删掉了许多元素的值\",{\"1\":{\"982\":1}}],[\"删除白色对象对于白色对象的引用\",{\"1\":{\"1143\":1}}],[\"删除灰色对象对于白色对象的引用\",{\"1\":{\"1143\":1}}],[\"删除写屏障不需要\",{\"1\":{\"1144\":1}}],[\"删除写屏障都会将被引用的白色对象标记为灰色\",{\"1\":{\"1143\":1}}],[\"删除写屏障在并发条件下保证正确性的规则是\",{\"1\":{\"1143\":1}}],[\"删除写屏障由\",{\"1\":{\"1143\":1}}],[\"删除写屏障\",{\"0\":{\"1143\":1}}],[\"删除就是赋空值\",{\"1\":{\"1141\":1}}],[\"删除操作对应的是loadanddelete方法\",{\"1\":{\"1048\":1}}],[\"删除操作相较于其他操作要简单的多\",{\"1\":{\"421\":1}}],[\"删除key\",{\"1\":{\"1039\":1}}],[\"删除关联\",{\"0\":{\"898\":1}}],[\"删除记录会用到delete方法\",{\"1\":{\"888\":1}}],[\"删除后触发\",{\"1\":{\"861\":1}}],[\"删除前触发\",{\"1\":{\"861\":1}}],[\"删除在\",{\"1\":{\"708\":1}}],[\"删除成功\",{\"1\":{\"421\":2}}],[\"删除当前目录下所有的文件与子目录\",{\"1\":{\"421\":2}}],[\"删除单个文件或者空目录\",{\"1\":{\"421\":1}}],[\"删除所有元素\",{\"1\":{\"367\":1}}],[\"删除权值在min和max区间的元素\",{\"1\":{\"282\":1}}],[\"删除指定子串\",{\"0\":{\"708\":1}}],[\"删除指定目录的所有文件和目录包括子目录与子文件\",{\"1\":{\"421\":1}}],[\"删除指定排名区间的元素\",{\"1\":{\"282\":1}}],[\"删除指定范围的元素\",{\"1\":{\"268\":1}}],[\"删除指定元素\",{\"1\":{\"268\":1,\"275\":1,\"282\":1}}],[\"删除元素\",{\"0\":{\"268\":1,\"273\":1,\"275\":1,\"282\":1,\"367\":1},\"1\":{\"1039\":1}}],[\"删除map的一个字段\",{\"1\":{\"259\":1}}],[\"删除键值对的时候永远只会对\",{\"1\":{\"1048\":1}}],[\"删除键\",{\"0\":{\"246\":1,\"259\":1}}],[\"删除数据\",{\"1\":{\"237\":1}}],[\"删除文档\",{\"0\":{\"228\":1}}],[\"删除若干个指定的索引\",{\"1\":{\"210\":1}}],[\"删除\",{\"0\":{\"210\":1,\"215\":1,\"237\":1,\"385\":1,\"421\":1,\"888\":1,\"1039\":1},\"1\":{\"861\":1}}],[\"删除的条件是目录是空的\",{\"1\":{\"168\":1}}],[\"删除一个键值对\",{\"1\":{\"486\":2}}],[\"删除一个键值对需要用到内置函数delete\",{\"1\":{\"385\":1}}],[\"删除一个指定的文档\",{\"1\":{\"215\":1}}],[\"删除一个版本回退项\",{\"1\":{\"26\":1}}],[\"删除一个替换依赖项\",{\"1\":{\"26\":1}}],[\"删除一个排除依赖项\",{\"1\":{\"26\":1}}],[\"删除一个依赖项\",{\"1\":{\"26\":1}}],[\"删除无用的依赖\",{\"1\":{\"22\":1}}],[\"副本在复制时\",{\"1\":{\"982\":1}}],[\"异步处理函数\",{\"1\":{\"982\":2}}],[\"异步处理需要结合\",{\"1\":{\"982\":1}}],[\"异步处理\",{\"0\":{\"982\":1}}],[\"异步定时任务框架\",{\"1\":{\"66\":1}}],[\"渲染一个html模板\",{\"1\":{\"981\":1}}],[\"渲染\",{\"0\":{\"980\":1}}],[\"渲染提供了易于使用的\",{\"1\":{\"963\":1}}],[\"截断\",{\"1\":{\"1053\":2}}],[\"截止目前2022\",{\"1\":{\"964\":1}}],[\"截至目前笔者写下本文时\",{\"1\":{\"7\":1}}],[\"树的路由\",{\"1\":{\"963\":1}}],[\"胜在轻量易拓展\",{\"1\":{\"962\":1}}],[\"您一定会喜欢\",{\"1\":{\"962\":1}}],[\"您可以使用\",{\"1\":{\"862\":2}}],[\"您可以在定义消息类型的字段时使用包名\",{\"1\":{\"192\":1}}],[\"您可以向protobuf文件添加一个可选的包修饰符\",{\"1\":{\"192\":1}}],[\"速度提高了\",{\"1\":{\"962\":1}}],[\"捕获全部参数\",{\"0\":{\"957\":1}}],[\"填了什么type\",{\"1\":{\"953\":1}}],[\"填充\",{\"1\":{\"833\":1,\"834\":1}}],[\"填充切片\",{\"1\":{\"587\":1}}],[\"市\",{\"1\":{\"952\":7}}],[\"校验逻辑\",{\"1\":{\"949\":1}}],[\"校验和确保安全性\",{\"1\":{\"18\":1}}],[\"校验和\",{\"1\":{\"10\":1}}],[\"足够轻量\",{\"1\":{\"1101\":1}}],[\"足够满足基本时候\",{\"1\":{\"949\":1}}],[\"足足浪费了\",{\"1\":{\"410\":1}}],[\"失败\",{\"1\":{\"946\":1}}],[\"失败后会不断尝试\",{\"1\":{\"143\":1}}],[\"滔博市\",{\"1\":{\"942\":1,\"943\":1,\"944\":1}}],[\"隔开逗号之间不能有空格\",{\"1\":{\"938\":1}}],[\"颜色\",{\"1\":{\"934\":4}}],[\"媒体存取控制位址\",{\"1\":{\"932\":1}}],[\"💯go\",{\"1\":{\"926\":2}}],[\"磁盘相关的函数是由disk包提供的\",{\"1\":{\"913\":1}}],[\"磁盘\",{\"0\":{\"913\":1}}],[\"容易受到\",{\"1\":{\"1002\":1}}],[\"容器的系统信息\",{\"1\":{\"904\":1}}],[\"容量完全相等\",{\"1\":{\"1043\":1}}],[\"容量增长一倍\",{\"1\":{\"1025\":1}}],[\"容量等于max\",{\"1\":{\"1020\":1}}],[\"容量100的整型切片\",{\"1\":{\"393\":1}}],[\"容量不足\",{\"1\":{\"371\":1}}],[\"容量超过\",{\"1\":{\"365\":2}}],[\"容量变成原来的\",{\"1\":{\"365\":2}}],[\"容量小于\",{\"1\":{\"365\":1}}],[\"容量为10的映射表\",{\"1\":{\"393\":1}}],[\"容量为原来的\",{\"1\":{\"365\":1}}],[\"容量为\",{\"1\":{\"365\":1}}],[\"容量\",{\"1\":{\"364\":1,\"365\":3,\"1020\":1}}],[\"容量对于切片才有意义\",{\"1\":{\"361\":1}}],[\"免不了需要获取程序所允许的平台系统信息\",{\"1\":{\"904\":1}}],[\"免去了我们手动操作命令行\",{\"1\":{\"560\":1}}],[\"何时提交\",{\"1\":{\"902\":1}}],[\"软删除\",{\"0\":{\"889\":1}}],[\"视图\",{\"1\":{\"863\":1}}],[\"迁移\",{\"0\":{\"863\":1}}],[\"迁移时为字段添加注释\",{\"1\":{\"862\":1}}],[\"钩子\",{\"0\":{\"861\":1}}],[\"约束多个维度\",{\"1\":{\"863\":1}}],[\"约束\",{\"1\":{\"849\":1,\"862\":1,\"863\":1}}],[\"约束了类型形参的类型范围\",{\"1\":{\"571\":1}}],[\"权当是抛砖引玉\",{\"1\":{\"848\":1}}],[\"权限为0666\",{\"1\":{\"416\":1}}],[\"权限位\",{\"1\":{\"416\":1}}],[\"权限不足被拒绝访问\",{\"1\":{\"168\":1}}],[\"乘法\",{\"1\":{\"845\":1}}],[\"乘法的优先级比加法要高\",{\"1\":{\"311\":1}}],[\"减小冲突发生概率\",{\"1\":{\"1039\":1}}],[\"减法\",{\"1\":{\"845\":1}}],[\"减少内存的分配与释放频率\",{\"1\":{\"485\":1}}],[\"减少内存开销\",{\"1\":{\"117\":1}}],[\"减少了\",{\"1\":{\"410\":1}}],[\"减少了其资源使用\",{\"1\":{\"122\":1}}],[\"备份次数\",{\"1\":{\"841\":1}}],[\"映射到的结构体\",{\"1\":{\"840\":1}}],[\"映射表是一种使用场景非常多的数据结构\",{\"1\":{\"1029\":1}}],[\"映射表的支持是由map关键字提供的\",{\"1\":{\"1029\":1}}],[\"映射表其中之一\",{\"1\":{\"433\":1}}],[\"映射表数据结构实现通常有两种\",{\"1\":{\"381\":1}}],[\"映射表\",{\"0\":{\"381\":1},\"1\":{\"320\":1,\"321\":1,\"355\":1,\"393\":1,\"460\":1}}],[\"麻烦的点在于配置出一个适合自己项目的日志\",{\"1\":{\"838\":1}}],[\"级别化的日志组件\",{\"1\":{\"836\":1}}],[\"级别越高检查造成运行时开销越大\",{\"1\":{\"533\":1}}],[\"连续栈对\",{\"1\":{\"1103\":1}}],[\"连续栈因为分配了一个容量更大的栈空间\",{\"1\":{\"1103\":1}}],[\"连线\",{\"1\":{\"835\":1}}],[\"连接表的外键必须要指定正确\",{\"1\":{\"893\":1}}],[\"连接池最多等待这个拿出去的连接多长时间\",{\"1\":{\"242\":1}}],[\"连接配置\",{\"0\":{\"242\":1,\"852\":1}}],[\"连接配置项\",{\"1\":{\"166\":2}}],[\"连接到数据库\",{\"0\":{\"232\":1},\"1\":{\"851\":1}}],[\"连接时\",{\"1\":{\"205\":1}}],[\"连接了\",{\"1\":{\"205\":1}}],[\"连接\",{\"0\":{\"205\":1,\"221\":1,\"851\":1}}],[\"连接超时\",{\"0\":{\"170\":1}}],[\"连接对象\",{\"1\":{\"166\":2}}],[\"画线\",{\"0\":{\"835\":1}}],[\"描点\",{\"0\":{\"834\":1}}],[\"描述上述情形\",{\"1\":{\"567\":1}}],[\"描述的函数时\",{\"1\":{\"400\":1}}],[\"描述的函数最后都会被逐个执行\",{\"1\":{\"400\":1}}],[\"描述\",{\"1\":{\"51\":1,\"52\":1,\"53\":1,\"54\":1,\"55\":1,\"56\":1,\"57\":1,\"58\":1,\"59\":1,\"60\":1,\"61\":1,\"62\":1,\"63\":1,\"64\":1,\"65\":1,\"66\":1,\"67\":1,\"68\":1,\"69\":1,\"70\":1,\"71\":1,\"72\":1,\"73\":1,\"74\":1,\"75\":1,\"76\":1,\"77\":1,\"78\":1,\"79\":1,\"80\":1,\"81\":1,\"82\":1,\"83\":1,\"84\":1,\"85\":1,\"315\":1,\"318\":1,\"319\":1,\"341\":1,\"1086\":1,\"1088\":1}}],[\"坐标位置绘制一个半径400的圆\",{\"1\":{\"833\":1}}],[\"宽1000\",{\"1\":{\"833\":1}}],[\"手写一样可以\",{\"1\":{\"823\":1}}],[\"手动触发\",{\"1\":{\"1132\":1}}],[\"手动事务会用到下面三个方法\",{\"1\":{\"902\":1}}],[\"手动指定了int类型\",{\"1\":{\"571\":1}}],[\"手动采集就是通过代码来控制\",{\"1\":{\"556\":1}}],[\"手动\",{\"0\":{\"556\":1,\"902\":1}}],[\"手动创建的一个只读或只写的管道没有什么太大的意义\",{\"1\":{\"469\":1}}],[\"手动创建\",{\"0\":{\"161\":1}}],[\"试一试自动类型转换\",{\"1\":{\"817\":1}}],[\"试图进行指针运算\",{\"1\":{\"392\":1}}],[\"典型读取操作\",{\"1\":{\"817\":1}}],[\"超过此数量后\",{\"1\":{\"1088\":1}}],[\"超赞的\",{\"1\":{\"814\":1}}],[\"超时\",{\"1\":{\"471\":2}}],[\"超时过后便会退出循环\",{\"1\":{\"471\":1}}],[\"超时时间被传递到了服务端\",{\"1\":{\"171\":1}}],[\"超时逻辑处理\",{\"1\":{\"171\":1}}],[\"超时控制\",{\"0\":{\"169\":1}}],[\"超时传递原理\",{\"1\":{\"147\":1}}],[\"忽略该字段\",{\"1\":{\"812\":2,\"813\":1,\"862\":1}}],[\"忽略大小写相等\",{\"0\":{\"709\":1}}],[\"深拷贝\",{\"1\":{\"810\":1}}],[\"深度复制\",{\"1\":{\"56\":1}}],[\"载入\",{\"1\":{\"805\":1}}],[\"载荷\",{\"0\":{\"773\":1},\"1\":{\"771\":1}}],[\"别人可能已经完成加锁\",{\"1\":{\"1173\":1}}],[\"别名\",{\"0\":{\"794\":1,\"937\":1}}],[\"别想搞什么个性化\",{\"1\":{\"17\":1}}],[\"私钥加密\",{\"1\":{\"785\":1}}],[\"私有模块的模块路径前缀的通用模式列表\",{\"1\":{\"511\":1}}],[\"私有模块\",{\"0\":{\"511\":1}}],[\"私有\",{\"1\":{\"294\":1}}],[\"业务模块使用公钥对\",{\"1\":{\"785\":1}}],[\"令牌\",{\"1\":{\"775\":1}}],[\"令牌的保存时间不应超过所需的时间\",{\"1\":{\"775\":1}}],[\"令牌的类型为\",{\"1\":{\"772\":1}}],[\"令牌的类型\",{\"1\":{\"772\":1}}],[\"令牌的标准结构\",{\"1\":{\"771\":1}}],[\"警告\",{\"1\":{\"773\":1,\"788\":1}}],[\"签发者\",{\"1\":{\"773\":1}}],[\"签名的返回值\",{\"1\":{\"828\":1}}],[\"签名或解析\",{\"1\":{\"778\":1}}],[\"签名使用的方法\",{\"1\":{\"778\":1}}],[\"签名泄露了则\",{\"1\":{\"777\":1}}],[\"签名部分所使用的加密算法为\",{\"1\":{\"772\":1}}],[\"签名\",{\"0\":{\"774\":1},\"1\":{\"675\":1,\"676\":1,\"771\":1,\"779\":1,\"781\":1,\"785\":1}}],[\"签名如下\",{\"1\":{\"460\":1,\"484\":1,\"583\":1,\"678\":1,\"679\":1,\"680\":1}}],[\"头部只是声明一些基本信息\",{\"1\":{\"772\":1}}],[\"头部\",{\"0\":{\"772\":1},\"1\":{\"771\":1,\"1039\":1}}],[\"紧凑的\",{\"1\":{\"770\":1}}],[\"严格来说\",{\"1\":{\"821\":1}}],[\"严格来说casbin都将将其看待为字符串\",{\"1\":{\"765\":1}}],[\"严格区分大小写\",{\"1\":{\"298\":1}}],[\"余下的工作量会根据辅助队列的顺序来逐个偿还给其它协程\",{\"1\":{\"1139\":1}}],[\"余下的同理\",{\"1\":{\"764\":1}}],[\"余数\",{\"0\":{\"657\":1}}],[\"演示下模型文件的工作过程\",{\"1\":{\"764\":1}}],[\"拒绝改写\",{\"1\":{\"763\":1}}],[\"拒绝优先于允许\",{\"1\":{\"758\":1}}],[\"拒绝优先\",{\"1\":{\"758\":1}}],[\"量词则判断是否所有的策略规则都满足匹配器\",{\"1\":{\"763\":1}}],[\"量词判断是否存在一条策略规则满足匹配器\",{\"1\":{\"763\":1}}],[\"效果定义部分为\",{\"1\":{\"763\":1}}],[\"效果定义部分对匹配结果再次作出逻辑组合判断\",{\"1\":{\"763\":1}}],[\"效果\",{\"0\":{\"763\":1},\"1\":{\"759\":1}}],[\"效果图如下\",{\"1\":{\"94\":1}}],[\"策略定义部分为\",{\"1\":{\"760\":1}}],[\"策略\",{\"0\":{\"760\":1},\"1\":{\"759\":1}}],[\"策略规则按照先后次序确定优先级\",{\"1\":{\"758\":1}}],[\"租户设置不同的角色集\",{\"1\":{\"758\":1}}],[\"租户的rbac\",{\"1\":{\"758\":1}}],[\"诸如\",{\"1\":{\"758\":1}}],[\"某些场景可能只针对资源的类型\",{\"1\":{\"758\":1}}],[\"某一天\",{\"1\":{\"87\":1}}],[\"拥有调度栈的协程\",{\"1\":{\"1087\":1}}],[\"拥有多个\",{\"1\":{\"849\":1}}],[\"拥有一个\",{\"1\":{\"849\":1}}],[\"拥有更多人力物力的大公司会更倾向于自己开发一套权限框架\",{\"1\":{\"758\":1}}],[\"拥有良好的性能和较低的上手难度\",{\"1\":{\"88\":1}}],[\"兼容\",{\"1\":{\"851\":1}}],[\"兼容性准则的保护\",{\"1\":{\"745\":1}}],[\"兼容主流系统\",{\"1\":{\"74\":1}}],[\"点\",{\"1\":{\"739\":1}}],[\"迭代开始时的起始桶序号\",{\"1\":{\"1037\":1}}],[\"迭代map也是同理\",{\"1\":{\"732\":1}}],[\"迭代语句的格式如下\",{\"1\":{\"732\":1}}],[\"迭代\",{\"0\":{\"732\":1,\"882\":1}}],[\"迭代器正在使用旧桶\",{\"1\":{\"1030\":1}}],[\"迭代器正在使用桶\",{\"1\":{\"1030\":1}}],[\"迭代器部分的代码可读性会降低\",{\"1\":{\"589\":1}}],[\"迭代器收集成一个\",{\"1\":{\"585\":1}}],[\"迭代器都会调用yield函数\",{\"1\":{\"582\":1}}],[\"迭代器就是一个函数\",{\"1\":{\"582\":1}}],[\"迭代器就是一个闭包函数\",{\"1\":{\"581\":1}}],[\"迭代器是一个函数\",{\"1\":{\"582\":1}}],[\"迭代器\",{\"0\":{\"580\":1},\"1\":{\"583\":1,\"585\":1,\"589\":1}}],[\"熟悉\",{\"1\":{\"729\":1}}],[\"根节点通常是栈上的变量\",{\"1\":{\"1134\":1}}],[\"根对象\",{\"1\":{\"730\":1}}],[\"根对象就是传入的data\",{\"1\":{\"725\":1}}],[\"根据文件中注释可以得知\",{\"1\":{\"1146\":1}}],[\"根据官方统计的数据\",{\"1\":{\"1142\":1}}],[\"根据官方定义\",{\"1\":{\"582\":1}}],[\"根据这些不同的模式进行标记工作\",{\"1\":{\"1138\":1}}],[\"根据这种方式还能实现参数校验的功能\",{\"1\":{\"202\":1}}],[\"根据计算公式此时需要一个专用处理标记任务的处理器\",{\"1\":{\"1138\":1}}],[\"根据对象的存活时间分成不同的代\",{\"1\":{\"1130\":1}}],[\"根据三种不同的类型\",{\"1\":{\"1123\":1}}],[\"根据大小划分为了三个不同的类型\",{\"1\":{\"1123\":1}}],[\"根据上面两种情况\",{\"1\":{\"1120\":1}}],[\"根据要申请的内存大小检查是否有足够的剩余空间来容纳\",{\"1\":{\"1111\":1}}],[\"根据缓存的空间局部性原理而言\",{\"1\":{\"1103\":1}}],[\"根据申请的栈内存大小是否小于\",{\"1\":{\"1100\":1}}],[\"根据不同条件触发的扩容其类型也不同\",{\"1\":{\"1041\":1}}],[\"根据不同平台不同语言自动生成客户端和服务端的服务存根\",{\"1\":{\"147\":1}}],[\"根据先前计算得到的哈希值获取其高八位\",{\"1\":{\"1036\":1}}],[\"根据i移动指针获取对应下标的键\",{\"1\":{\"1036\":1}}],[\"根据键值取得对应的文件列表\",{\"1\":{\"985\":1}}],[\"根据参数创建索引\",{\"1\":{\"862\":1}}],[\"根据传入的地址和长度\",{\"1\":{\"1054\":1}}],[\"根据传入的对应语言的unicode\",{\"1\":{\"717\":1}}],[\"根据传入对应语言的unicode\",{\"1\":{\"717\":1}}],[\"根据子串\",{\"1\":{\"716\":4}}],[\"根据给定的\",{\"1\":{\"714\":1}}],[\"根据实现的定义\",{\"1\":{\"568\":1}}],[\"根据实际情况判断输出\",{\"1\":{\"341\":1}}],[\"根据规范提供具体的功能\",{\"1\":{\"567\":1}}],[\"根据自家公司的独门技术造出了绝世起重机并交给了建筑公司\",{\"1\":{\"567\":1}}],[\"根据自己的情况选择系统和版本即可\",{\"1\":{\"148\":1}}],[\"根据测试的结果看来\",{\"1\":{\"525\":1}}],[\"根据依赖压缩包所计算出的哈希值\",{\"1\":{\"510\":1}}],[\"根据\",{\"1\":{\"509\":1,\"934\":1}}],[\"根据最小可用版本原则\",{\"1\":{\"508\":1}}],[\"根据一个key读取值\",{\"1\":{\"486\":1}}],[\"根据直觉来讲\",{\"1\":{\"479\":1}}],[\"根据内存对齐规则而言\",{\"1\":{\"410\":1}}],[\"根据内存来计算哈希值\",{\"1\":{\"44\":1}}],[\"根据格式化的字符串扫描\",{\"1\":{\"344\":1}}],[\"根据空格分隔\",{\"1\":{\"344\":1}}],[\"根据序号值的变化会自动的赋值给后续的常量\",{\"1\":{\"325\":1}}],[\"根据以往的惯例\",{\"1\":{\"291\":1}}],[\"根据sha值执行脚本\",{\"1\":{\"283\":1}}],[\"根据请求类型来分则有一元\",{\"1\":{\"164\":1}}],[\"稍微熟悉\",{\"1\":{\"1000\":1}}],[\"稍微复杂一点的是模板引擎的模板语法\",{\"1\":{\"723\":1}}],[\"稍微修改下后如下\",{\"1\":{\"471\":1}}],[\"稍微修改了一下\",{\"1\":{\"414\":1}}],[\"örnek\",{\"1\":{\"717\":2}}],[\"önnek\",{\"1\":{\"717\":2}}],[\"决定着mspan元素大小的是spanclass\",{\"1\":{\"1114\":1}}],[\"决定数据到底是去上半区还是下半区取决于重新计算后的哈希值\",{\"1\":{\"1042\":1}}],[\"决定\",{\"1\":{\"716\":2}}],[\"寻找前后缀\",{\"0\":{\"711\":1}}],[\"寻找某一个指定值\",{\"1\":{\"587\":1}}],[\"天然支持\",{\"1\":{\"702\":1}}],[\"天然并发\",{\"1\":{\"88\":1}}],[\"够转换的字符串如下\",{\"1\":{\"694\":1}}],[\"立方根\",{\"0\":{\"668\":1}}],[\"幂\",{\"0\":{\"666\":1}}],[\"四个可选值\",{\"1\":{\"1087\":1}}],[\"四舍五入\",{\"0\":{\"663\":1}}],[\"四台虚拟机中\",{\"1\":{\"143\":1}}],[\"检测\",{\"0\":{\"658\":1,\"659\":1}}],[\"检查state\",{\"1\":{\"1178\":1}}],[\"检查内存情况\",{\"1\":{\"1082\":1}}],[\"检查常量的值\",{\"1\":{\"1042\":1}}],[\"检查哈希桶是否需要初始化\",{\"1\":{\"1038\":1}}],[\"检查错误链中是否有\",{\"1\":{\"603\":1}}],[\"检查源文件夹的状态\",{\"1\":{\"426\":1}}],[\"检查未使用的函数返回值\",{\"1\":{\"37\":1}}],[\"检查未初始化的复合结构\",{\"1\":{\"37\":1}}],[\"检查uintptr到unsafe\",{\"1\":{\"37\":1}}],[\"检查不可到达的代码\",{\"1\":{\"37\":1}}],[\"检查不合法的结构化日志调用\",{\"1\":{\"37\":1}}],[\"检查测试和示例的常见错误用法\",{\"1\":{\"37\":1}}],[\"检查结构体tag是否正确\",{\"1\":{\"37\":1}}],[\"检查字符串整型转换\",{\"1\":{\"37\":1}}],[\"检查已知接口方法的签名是否正确\",{\"1\":{\"37\":1}}],[\"检查无缓冲的chan\",{\"1\":{\"37\":1}}],[\"检查printf的格式化参数是否正确\",{\"1\":{\"37\":1}}],[\"检查函数和nil之间是否存在无用的比较\",{\"1\":{\"37\":1}}],[\"检查接口到接口的类型断言\",{\"1\":{\"37\":1}}],[\"检查编译优化后的汇编代码是否在保存帧指针之前对其进行清除\",{\"1\":{\"37\":1}}],[\"检查go工具链指令\",{\"1\":{\"37\":1}}],[\"检查违反cgao指针传递规则的行为\",{\"1\":{\"37\":1}}],[\"检查build\",{\"1\":{\"37\":1}}],[\"检查是否进入饥饿模式\",{\"1\":{\"1153\":1}}],[\"检查是否在测试中使用协程调用testing\",{\"1\":{\"37\":1}}],[\"检查是否有等于或超过整数宽度的移位\",{\"1\":{\"37\":1}}],[\"检查是否有无用的变量\",{\"1\":{\"37\":1}}],[\"检查是否错误使用httpresponse\",{\"1\":{\"37\":1}}],[\"检查是否错误使用逻辑运算符\",{\"1\":{\"37\":1}}],[\"检查是否向errors\",{\"1\":{\"37\":1}}],[\"检查是否发生了锁的值复制\",{\"1\":{\"37\":1}}],[\"检查使用sync\",{\"1\":{\"37\":1}}],[\"检查汇编文件是否与go声明不匹配\",{\"1\":{\"37\":1}}],[\"绝对值\",{\"0\":{\"656\":1}}],[\"绝世起重机出故障了\",{\"1\":{\"567\":1}}],[\"初始栈空间大小\",{\"1\":{\"1151\":1}}],[\"初始值\",{\"1\":{\"649\":1}}],[\"初始化堆\",{\"1\":{\"1118\":1}}],[\"初始化哈希桶\",{\"1\":{\"1038\":1}}],[\"初始化session\",{\"1\":{\"1003\":1}}],[\"初始化操作只执行了一次\",{\"1\":{\"484\":1}}],[\"初始化animal类型的变量\",{\"1\":{\"414\":1}}],[\"初始化的时候就像map一样指定字段名称再初始化字段值\",{\"1\":{\"405\":1}}],[\"初始化一个新的工作区\",{\"1\":{\"514\":1}}],[\"初始化一个\",{\"1\":{\"382\":1}}],[\"初始化\",{\"0\":{\"324\":1,\"360\":1,\"364\":1,\"382\":1,\"566\":1,\"1089\":1,\"1119\":1},\"1\":{\"484\":2,\"1034\":1}}],[\"初始化该包并将其从列表中删除\",{\"1\":{\"116\":1}}],[\"短文件名称\",{\"1\":{\"649\":1}}],[\"短变量声明方式无法对一个已存在的变量使用\",{\"1\":{\"329\":1}}],[\"短变量声明可以批量初始化\",{\"1\":{\"329\":1}}],[\"短变量初始化不能使用nil\",{\"1\":{\"329\":1}}],[\"短变量初始化\",{\"1\":{\"329\":1}}],[\"性别是一个必须填写的字段\",{\"1\":{\"952\":1}}],[\"性别为必填字段\",{\"1\":{\"952\":3}}],[\"性别\",{\"1\":{\"633\":2,\"636\":2,\"952\":4}}],[\"性能早已不算问题了\",{\"1\":{\"1130\":1}}],[\"性能消耗也会很大\",{\"1\":{\"1054\":1}}],[\"性能消耗也是一个问题\",{\"1\":{\"352\":1}}],[\"性能要好得多\",{\"1\":{\"962\":1}}],[\"性能大概会提升\",{\"1\":{\"900\":1}}],[\"性能优化到极致\",{\"1\":{\"848\":1}}],[\"性能比直接类型转换要好\",{\"1\":{\"756\":1}}],[\"性能分析的唯一手段就只能通过\",{\"1\":{\"548\":1}}],[\"性能分析\",{\"0\":{\"548\":1}}],[\"性能分析等方方面面\",{\"1\":{\"88\":1}}],[\"性能方面\",{\"1\":{\"136\":1}}],[\"性能\",{\"0\":{\"588\":1,\"1050\":1},\"1\":{\"88\":1,\"117\":1,\"963\":1}}],[\"姓名必须包含文本\",{\"1\":{\"952\":5}}],[\"姓名\",{\"1\":{\"633\":2,\"636\":2,\"952\":4}}],[\"缩进\",{\"0\":{\"627\":1}}],[\"散列表\",{\"1\":{\"621\":1}}],[\"快\",{\"1\":{\"617\":1}}],[\"快速生成接口文档的例子\",{\"1\":{\"1009\":1}}],[\"快速响应\",{\"0\":{\"981\":1}}],[\"快速的\",{\"1\":{\"836\":1}}],[\"快速的模板引擎\",{\"1\":{\"60\":1}}],[\"快速开始\",{\"0\":{\"141\":1,\"241\":1,\"723\":1,\"805\":1,\"817\":1,\"833\":1,\"838\":1,\"847\":1,\"965\":1},\"1\":{\"286\":1}}],[\"快速完成文件大小与字符串之间的转换\",{\"1\":{\"81\":1}}],[\"快速\",{\"1\":{\"75\":1,\"963\":1}}],[\"快速获取\",{\"1\":{\"63\":1}}],[\"快速序列化库\",{\"1\":{\"63\":1}}],[\"慢\",{\"1\":{\"617\":1}}],[\"较多\",{\"1\":{\"617\":1}}],[\"较复杂\",{\"1\":{\"617\":1}}],[\"较简单\",{\"1\":{\"617\":2}}],[\"处于空闲的状态\",{\"1\":{\"1156\":1}}],[\"处于标记阶段时\",{\"1\":{\"1138\":2}}],[\"处于\",{\"1\":{\"1106\":1,\"1139\":1}}],[\"处于并发读写状态时\",{\"1\":{\"1036\":1}}],[\"处于什么状态\",{\"1\":{\"1030\":1}}],[\"处于挂起状态一定的时间\",{\"1\":{\"743\":1}}],[\"处于实验阶段\",{\"1\":{\"616\":1}}],[\"处理善后工作\",{\"1\":{\"1130\":1}}],[\"处理起来还是比较复杂的\",{\"1\":{\"1067\":1}}],[\"处理完成后返回两个返回值\",{\"1\":{\"1067\":1}}],[\"处理完过后就到了源代码中定义的循环体执行\",{\"1\":{\"1055\":1}}],[\"处理过程\",{\"1\":{\"1062\":1}}],[\"处理k2\",{\"1\":{\"1042\":1,\"1043\":1}}],[\"处理等量扩容的情况\",{\"1\":{\"1037\":1}}],[\"处理下指针\",{\"1\":{\"1036\":1}}],[\"处理更为简单\",{\"1\":{\"856\":1}}],[\"处理加密的包\",{\"1\":{\"616\":1}}],[\"处理编码的包\",{\"1\":{\"616\":1}}],[\"处理文件路径的包\",{\"1\":{\"616\":1}}],[\"处理斜杠分隔路径的包\",{\"1\":{\"616\":1}}],[\"处理元素值\",{\"1\":{\"587\":1}}],[\"处理\",{\"0\":{\"603\":1,\"1067\":1},\"1\":{\"114\":1,\"963\":1}}],[\"处理库\",{\"1\":{\"81\":4}}],[\"处理器\",{\"0\":{\"959\":1},\"1\":{\"81\":1,\"165\":1,\"1083\":1,\"1085\":1,\"1087\":1,\"1138\":1}}],[\"环形队列的大小\",{\"1\":{\"1057\":1}}],[\"环的实现\",{\"1\":{\"616\":1}}],[\"环境引用吗\",{\"1\":{\"399\":1}}],[\"环境的话\",{\"1\":{\"156\":1}}],[\"环境\",{\"1\":{\"104\":1}}],[\"环境变量了解更多关于环境变量的信息\",{\"1\":{\"92\":1}}],[\"环境变量配置的变化\",{\"1\":{\"92\":1}}],[\"环境变量\",{\"1\":{\"11\":2,\"40\":1,\"789\":1}}],[\"环境变量的信息\",{\"1\":{\"7\":1}}],[\"伪随机包\",{\"1\":{\"616\":1}}],[\"伪版本号则可以细化到指定某一个\",{\"1\":{\"509\":1}}],[\"伪版本\",{\"1\":{\"509\":1}}],[\"排序会用到order方法\",{\"1\":{\"876\":1}}],[\"排序操作包\",{\"1\":{\"616\":1}}],[\"排版的顺序是随意的\",{\"1\":{\"97\":1}}],[\"距离本站刚建立的时间也已经快有一年多了\",{\"1\":{\"616\":1}}],[\"云计算等等\",{\"1\":{\"615\":1}}],[\"云原生微服务框架\",{\"1\":{\"53\":2}}],[\"经验丰富的人可能几天就上手了\",{\"1\":{\"609\":1}}],[\"经过调用链goexit\",{\"1\":{\"1096\":1}}],[\"经过不断发展和改进才有了现在的样子\",{\"1\":{\"1084\":1}}],[\"经过等量扩容哈希桶重新分配过后\",{\"1\":{\"1043\":1}}],[\"经过自定义的解析器解析后\",{\"1\":{\"175\":1}}],[\"经过\",{\"1\":{\"171\":1,\"539\":1}}],[\"恢复运行\",{\"1\":{\"1089\":1}}],[\"恢复时会清理链表中那些已经被强制停止的panic\",{\"1\":{\"1080\":1}}],[\"恢复的逻辑在defer执行后\",{\"1\":{\"1080\":1}}],[\"恢复\",{\"0\":{\"607\":1,\"1080\":1}}],[\"碰巧遇到了子协程发生panic\",{\"1\":{\"606\":1}}],[\"父协程早已完成的函数的执行\",{\"1\":{\"606\":1}}],[\"父协程善后工作要花费20ms\",{\"1\":{\"606\":1}}],[\"父协程阻塞等待子协程执行完毕\",{\"1\":{\"606\":1}}],[\"父级取消\",{\"1\":{\"477\":4}}],[\"综上所述\",{\"1\":{\"606\":1}}],[\"善后\",{\"0\":{\"606\":1}}],[\"善于利用\",{\"1\":{\"3\":1}}],[\"肯定会触发\",{\"1\":{\"604\":1}}],[\"层层包装下就形成了一条错误链表\",{\"1\":{\"602\":1}}],[\"抛给上一层调用者\",{\"1\":{\"602\":1}}],[\"抛弃了类与继承\",{\"1\":{\"403\":1}}],[\"抛弃了while语句\",{\"1\":{\"353\":1}}],[\"丑陋\",{\"1\":{\"598\":1}}],[\"易于调试\",{\"1\":{\"598\":1}}],[\"易于使用\",{\"1\":{\"71\":1}}],[\"心智负担小\",{\"1\":{\"598\":1}}],[\"凡事都是有好有坏的\",{\"1\":{\"598\":1}}],[\"准确的来说\",{\"1\":{\"598\":1}}],[\"准备三个文件\",{\"1\":{\"736\":1}}],[\"准备\",{\"0\":{\"285\":1,\"494\":1}}],[\"准备数据\",{\"0\":{\"233\":1}}],[\"准备五台虚拟机\",{\"1\":{\"144\":1}}],[\"强三色不变性\",{\"1\":{\"1136\":1}}],[\"强大灵活的命令行解析库\",{\"1\":{\"615\":1}}],[\"强烈推荐使用\",{\"1\":{\"615\":1}}],[\"强类型则指的是在程序中执行严格的类型检查\",{\"1\":{\"591\":1}}],[\"强制所有程序员花函数后的括号不换行\",{\"1\":{\"309\":1}}],[\"强制重新构建\",{\"1\":{\"8\":1}}],[\"理解其内部实现原理有助于我们更好地掌握并发编程的技巧\",{\"1\":{\"1170\":1}}],[\"理解了它的变化也就搞明白了读写锁的工作流程\",{\"1\":{\"1156\":1}}],[\"理解的时候要根据代码来思考\",{\"1\":{\"563\":1}}],[\"理由在开头已经讲过了因为返回值并不可信\",{\"1\":{\"1062\":1}}],[\"理性的看待\",{\"1\":{\"589\":1}}],[\"违背了\",{\"1\":{\"589\":1}}],[\"链式分配器会将该内存片作为头结点添加到空闲内存片链表中\",{\"1\":{\"1112\":1}}],[\"链式分配器的优点正是它可以复用被释放的内存\",{\"1\":{\"1112\":1}}],[\"链式分配器每一次分配的内存大小也是固定的\",{\"1\":{\"1112\":1}}],[\"链式分配器持有着当前内存块和可复用内存片的引用\",{\"1\":{\"1112\":1}}],[\"链式分配器由若干个固定大小的内存块组成\",{\"1\":{\"1112\":1}}],[\"链式分配器分配的内存不是连续的\",{\"1\":{\"1112\":1}}],[\"链式分配器器对应着结构体runtime\",{\"1\":{\"1112\":1}}],[\"链式分配\",{\"0\":{\"1112\":1}}],[\"链式调用\",{\"0\":{\"586\":1}}],[\"链表指针\",{\"1\":{\"1166\":1}}],[\"链表runtime\",{\"1\":{\"1089\":1}}],[\"链表的头部\",{\"1\":{\"1074\":1}}],[\"链表的头部就在协程\",{\"1\":{\"1073\":1}}],[\"链表的\",{\"1\":{\"1039\":1}}],[\"链表\",{\"1\":{\"1036\":1}}],[\"链接成一个链表\",{\"1\":{\"1089\":1}}],[\"链接库\",{\"0\":{\"544\":1}}],[\"链接器做出了重大改进\",{\"1\":{\"122\":1}}],[\"链接类型名称\",{\"1\":{\"44\":1}}],[\"绕了一圈又回到原点\",{\"1\":{\"583\":1}}],[\"老实\",{\"1\":{\"1153\":2}}],[\"老实说这么做确实多此一举\",{\"1\":{\"583\":1}}],[\"老版本的项目升级到新版本大概率没法正常运行\",{\"1\":{\"505\":1}}],[\"→\",{\"1\":{\"583\":2}}],[\"达标\",{\"1\":{\"1138\":1}}],[\"达到回收垃圾目的\",{\"1\":{\"1130\":1}}],[\"达到分组的效果\",{\"1\":{\"324\":1}}],[\"达不到返回的效果\",{\"1\":{\"582\":1}}],[\"呢\",{\"1\":{\"582\":1}}],[\"既然mspan是由链式分配器的\",{\"1\":{\"1121\":1}}],[\"既然线程切换是有成本的\",{\"1\":{\"1085\":1}}],[\"既然有untyped\",{\"1\":{\"1070\":1}}],[\"既然键值无法通过结构体字段来直接访问\",{\"1\":{\"1030\":1}}],[\"既然循环体中的代码是作为回调函数传入迭代器的\",{\"1\":{\"582\":1}}],[\"既然是集合\",{\"1\":{\"574\":1}}],[\"认证\",{\"0\":{\"1015\":1}}],[\"认证信息在分布式情况下不同步\",{\"1\":{\"1003\":1}}],[\"认证失败则返回失败信息\",{\"1\":{\"785\":1}}],[\"认证通过则返回业务信息\",{\"1\":{\"785\":1}}],[\"认证中心创建密钥对\",{\"1\":{\"785\":1}}],[\"认证授权\",{\"0\":{\"78\":1,\"172\":1}}],[\"认识\",{\"0\":{\"581\":1}}],[\"刚好是spanclass数量的两倍\",{\"1\":{\"1116\":1}}],[\"刚好能用一个字节表示\",{\"1\":{\"377\":1}}],[\"刚获取的\",{\"1\":{\"1104\":1}}],[\"刚被分配\",{\"1\":{\"1086\":1}}],[\"刚开始创建eavcdst结构体时\",{\"1\":{\"1043\":1}}],[\"刚开源不久\",{\"1\":{\"849\":1}}],[\"刚推出泛型的时候确实导致编译更慢了\",{\"1\":{\"579\":1}}],[\"几个方法实现\",{\"1\":{\"578\":1}}],[\"几乎在任何地方都能看到它的身影\",{\"1\":{\"1018\":1}}],[\"几乎没有任何依赖\",{\"1\":{\"823\":1}}],[\"几乎没有原生的\",{\"1\":{\"533\":1}}],[\"几乎每个程序员都能说出属于自己的理由\",{\"1\":{\"309\":1}}],[\"几乎所有的\",{\"1\":{\"146\":1,\"637\":1}}],[\"借由上面的那种方式就可以返回泛型零值\",{\"1\":{\"577\":1}}],[\"队列中的元素类型可以是任意的\",{\"1\":{\"577\":1}}],[\"队列\",{\"0\":{\"577\":1},\"1\":{\"1104\":1}}],[\"底层有着许多的实现方式\",{\"1\":{\"1029\":1}}],[\"底层类型\",{\"1\":{\"574\":1}}],[\"底层所存储的数据是否相等\",{\"1\":{\"568\":1}}],[\"含有类型集的接口又称为general\",{\"1\":{\"574\":1}}],[\"毫无节制的使用泛型会使得代码难以维护\",{\"1\":{\"571\":1}}],[\"毫秒左右\",{\"1\":{\"1142\":1}}],[\"毫秒时间戳\",{\"1\":{\"862\":2}}],[\"毫秒内\",{\"1\":{\"479\":1}}],[\"毫秒计算\",{\"1\":{\"479\":1}}],[\"毫秒读取一个数据\",{\"1\":{\"467\":1}}],[\"毫秒\",{\"1\":{\"88\":1,\"467\":1,\"479\":1,\"1082\":1}}],[\"难道要每一个类型都要编写一个函数吗\",{\"1\":{\"571\":1}}],[\"难免会有疏漏和勘误\",{\"1\":{\"95\":1}}],[\"难免会出现一些因\",{\"1\":{\"16\":1}}],[\"呼声最高的事情就是希望加入泛型\",{\"1\":{\"570\":1}}],[\"组织下\",{\"1\":{\"966\":1}}],[\"组成的元组\",{\"1\":{\"568\":1}}],[\"组合\",{\"0\":{\"407\":1},\"1\":{\"1013\":1}}],[\"组合式的邮件服务器\",{\"1\":{\"71\":1}}],[\"继续执行用户代码\",{\"1\":{\"1101\":1,\"1104\":1,\"1153\":1}}],[\"继续执行下一个defer\",{\"1\":{\"1079\":1}}],[\"继续找\",{\"1\":{\"1038\":1}}],[\"继续重复上面的步骤\",{\"1\":{\"1037\":1}}],[\"继续读取文件\",{\"1\":{\"417\":1}}],[\"继承\",{\"1\":{\"567\":1}}],[\"线性分配器的内存分配方式非常好理解\",{\"1\":{\"1111\":1}}],[\"线性分配器对应着runtime\",{\"1\":{\"1111\":1}}],[\"线性分配\",{\"0\":{\"1111\":1}}],[\"线越粗\",{\"1\":{\"560\":1}}],[\"线程未持有锁时不会直接挂起切换线程上下文而是进入循环\",{\"1\":{\"1153\":1}}],[\"线程缓存mcache是每一个线程独立的且不是分配在堆内存上\",{\"1\":{\"1099\":1}}],[\"线程\",{\"0\":{\"1090\":1},\"1\":{\"1097\":1}}],[\"线程本地存储\",{\"1\":{\"1087\":1}}],[\"线程的创建和切换成本是比较高的\",{\"1\":{\"1085\":1}}],[\"线程与协程间的关系是1\",{\"1\":{\"1085\":1}}],[\"线程所需的时间片来自于操作系统\",{\"1\":{\"1085\":1}}],[\"线程上运行的协程时间线\",{\"1\":{\"561\":1}}],[\"线程原因\",{\"1\":{\"557\":1}}],[\"线程安全的命令行进度条\",{\"1\":{\"64\":1}}],[\"线程安全的\",{\"1\":{\"61\":1}}],[\"火焰图\",{\"1\":{\"560\":1}}],[\"替换字符串\",{\"0\":{\"715\":1}}],[\"替换掉文件名即可\",{\"1\":{\"559\":1,\"560\":1}}],[\"替换语义化版本号\",{\"1\":{\"509\":1}}],[\"灵活的可扩展插件\",{\"1\":{\"849\":1}}],[\"灵活\",{\"1\":{\"556\":1}}],[\"灵活强大的权限管理库\",{\"1\":{\"78\":1}}],[\"采样\",{\"1\":{\"839\":1}}],[\"采集的话\",{\"1\":{\"559\":1,\"560\":1}}],[\"采集\",{\"0\":{\"555\":1},\"1\":{\"556\":2}}],[\"采集数据\",{\"1\":{\"554\":1}}],[\"采用了经典的三色标记算法\",{\"1\":{\"1135\":1}}],[\"采用分片的方式实现\",{\"1\":{\"1050\":1}}],[\"采用的是分代回收\",{\"1\":{\"1130\":1}}],[\"采用的是分段栈的思路\",{\"1\":{\"1103\":1}}],[\"采用的是逐步搬迁的策略\",{\"1\":{\"1042\":1}}],[\"采用的是哈希表实现方式\",{\"1\":{\"1029\":1}}],[\"采用什么结构都需要自行斟酌\",{\"1\":{\"1008\":1}}],[\"采用结构体来记录状态\",{\"1\":{\"583\":1}}],[\"采用对象池后\",{\"1\":{\"485\":1}}],[\"采用逗号分隔\",{\"1\":{\"7\":1}}],[\"采用\",{\"1\":{\"7\":2,\"139\":1}}],[\"诞生时间为模板\",{\"1\":{\"739\":1}}],[\"诞生以来就从未停止过\",{\"1\":{\"598\":1}}],[\"诞生的目的就是为了解放开发者\",{\"1\":{\"553\":1}}],[\"诞生之后\",{\"1\":{\"7\":1}}],[\"毕竟整个调度器就是围绕着协程来设计的\",{\"1\":{\"1094\":1}}],[\"毕竟签名的密钥也是同一个\",{\"1\":{\"777\":1}}],[\"毕竟\",{\"1\":{\"553\":1,\"1005\":1}}],[\"人工分析就不是那么的轻松了\",{\"1\":{\"550\":1}}],[\"人更名为\",{\"1\":{\"227\":1}}],[\"逃逸分析便是要分析程序中的内存分配情况\",{\"1\":{\"549\":1}}],[\"逃逸分析\",{\"0\":{\"549\":1}}],[\"热点代码路径等等\",{\"1\":{\"548\":1}}],[\"堆内存统计\",{\"1\":{\"1128\":1}}],[\"堆的初始化时期位于程序的引导阶段\",{\"1\":{\"1119\":1}}],[\"堆扩容\",{\"1\":{\"1118\":1}}],[\"堆中\",{\"1\":{\"1115\":1}}],[\"堆是一种特殊的数据结构\",{\"1\":{\"578\":1}}],[\"堆\",{\"0\":{\"578\":1}}],[\"堆分配情况\",{\"1\":{\"548\":1}}],[\"堆栈跟踪\",{\"1\":{\"839\":1}}],[\"堆栈信息等许多方面\",{\"1\":{\"554\":1}}],[\"堆栈\",{\"1\":{\"168\":1}}],[\"吧\",{\"1\":{\"547\":1}}],[\"确保某个特定的操作只会被执行一次\",{\"1\":{\"1171\":1}}],[\"确保close只有一方调用且只会调用一次\",{\"1\":{\"1062\":1}}],[\"确保将要搬迁的是当前桶的旧桶\",{\"1\":{\"1042\":1}}],[\"确实修改成功了\",{\"1\":{\"1054\":1}}],[\"确实不应该\",{\"1\":{\"598\":1}}],[\"确实可以带来好处\",{\"1\":{\"547\":1}}],[\"确认正确安装\",{\"1\":{\"91\":1}}],[\"配合slices\",{\"1\":{\"585\":2}}],[\"配套工具链将无法使用\",{\"1\":{\"547\":1}}],[\"配置好后\",{\"1\":{\"990\":1}}],[\"配置中的键是不区分大小写的\",{\"1\":{\"789\":1}}],[\"配置文件的方式来进行翻译\",{\"1\":{\"953\":1}}],[\"配置文件已更改\",{\"1\":{\"793\":1}}],[\"配置文件未找到\",{\"1\":{\"791\":1}}],[\"配置文件\",{\"1\":{\"617\":1,\"618\":1,\"621\":1,\"789\":1}}],[\"配置文件注册的方式可以前往register\",{\"1\":{\"145\":1}}],[\"配置文件注册和\",{\"1\":{\"145\":1}}],[\"配置\",{\"0\":{\"839\":1,\"998\":1,\"1016\":1},\"1\":{\"175\":1,\"617\":1,\"640\":1}}],[\"配置存放目录\",{\"1\":{\"141\":1}}],[\"配置管理器\",{\"1\":{\"63\":1}}],[\"制作完成后\",{\"1\":{\"545\":1}}],[\"谈到了指针避不开内存\",{\"1\":{\"543\":1}}],[\"联合体\",{\"0\":{\"541\":1}}],[\"话虽如此\",{\"1\":{\"536\":1}}],[\"掉了或者发生偏移\",{\"1\":{\"533\":1}}],[\"需在函数签名上方加上\",{\"1\":{\"533\":1}}],[\"需要传入一个互斥锁\",{\"1\":{\"1164\":1}}],[\"需要传入一个自定义的比较器\",{\"1\":{\"578\":1}}],[\"需要阻塞等待读者协程释放读锁\",{\"1\":{\"1156\":1}}],[\"需要等待的读者协程个数\",{\"1\":{\"1155\":1}}],[\"需要扫描栈空间以收集根对象\",{\"1\":{\"1144\":1}}],[\"需要二次扫描栈空间保证正确性\",{\"1\":{\"1142\":1}}],[\"需要硬件配合\",{\"1\":{\"1130\":1}}],[\"需要时刻开启写屏障\",{\"1\":{\"1130\":1}}],[\"需要被销毁\",{\"1\":{\"1089\":1}}],[\"需要判断当前是否处于扩容中\",{\"1\":{\"1042\":1}}],[\"需要将旧数据搬迁到新的\",{\"1\":{\"1042\":1}}],[\"需要将其设置为true\",{\"1\":{\"990\":1}}],[\"需要修改当前下标的\",{\"1\":{\"1039\":1}}],[\"需要做一些准备工作\",{\"1\":{\"1038\":1}}],[\"需要重新去寻找键值\",{\"1\":{\"1037\":1}}],[\"需要自己手动加上\",{\"1\":{\"1015\":1}}],[\"需要自行编写中间件来进行实现相应的需求\",{\"1\":{\"1000\":1}}],[\"需要自行编写逻辑来进行读取时切片的动态扩容\",{\"1\":{\"417\":1}}],[\"需要简单的了解下内部原理\",{\"1\":{\"995\":1}}],[\"需要进行垃圾回收时\",{\"1\":{\"1106\":1}}],[\"需要进行相应的跨域处理\",{\"1\":{\"984\":1}}],[\"需要进行一些额外的操作\",{\"1\":{\"449\":1}}],[\"需要注意的一点是\",{\"1\":{\"977\":1}}],[\"需要注意的是如果使用的是automigrate\",{\"1\":{\"864\":1}}],[\"需要注意的是base64与base64url不是同一种编码方式\",{\"1\":{\"771\":1}}],[\"需要注意的是c必须是大写字母\",{\"1\":{\"530\":1}}],[\"需要注意的是有些参数只有企业版能用\",{\"1\":{\"141\":1}}],[\"需要注意的是gopath的位置不能与goroot相同\",{\"1\":{\"7\":1}}],[\"需要注意的是\",{\"1\":{\"7\":1,\"168\":1,\"169\":1,\"190\":1,\"360\":1,\"385\":1,\"479\":1,\"520\":1,\"606\":1,\"725\":1,\"758\":1}}],[\"需要十分注意\",{\"1\":{\"946\":1}}],[\"需要我们手动创建验证器\",{\"1\":{\"941\":1}}],[\"需要我们根据\",{\"1\":{\"174\":1}}],[\"需要用ginswagger\",{\"1\":{\"1016\":1}}],[\"需要用\",{\"1\":{\"875\":1}}],[\"需要定义\",{\"1\":{\"824\":1}}],[\"需要与\",{\"1\":{\"803\":1}}],[\"需要确保每一个请求都能被正确的映射到对应的函数上\",{\"1\":{\"987\":1}}],[\"需要确保\",{\"1\":{\"781\":1}}],[\"需要ed25519\",{\"1\":{\"777\":1}}],[\"需要类型\",{\"1\":{\"777\":1}}],[\"需要先搞明白里面的每一个字段的含义\",{\"1\":{\"839\":1}}],[\"需要先进行sort\",{\"1\":{\"687\":1}}],[\"需要先了解接口\",{\"1\":{\"414\":1}}],[\"需要第三方包解决或者自己封装\",{\"1\":{\"598\":1}}],[\"需要处理\",{\"1\":{\"598\":1}}],[\"需要返回零值\",{\"1\":{\"577\":1}}],[\"需要安装graphviz\",{\"1\":{\"559\":1}}],[\"需要引入runtime\",{\"1\":{\"556\":1}}],[\"需要为这个库编写简洁明了的readme\",{\"1\":{\"498\":1}}],[\"需要为其分配内存\",{\"1\":{\"391\":1}}],[\"需要使用utf8十六进制表达形式替换\",{\"1\":{\"938\":1}}],[\"需要使用c\",{\"1\":{\"536\":1}}],[\"需要使用到time包下的sleep函数\",{\"1\":{\"462\":1}}],[\"需要使用sync\",{\"1\":{\"389\":1}}],[\"需要同时打开两个文件\",{\"1\":{\"419\":1}}],[\"需要满足关系low<=\",{\"1\":{\"371\":1}}],[\"需要结合引用次数和更新时间来决定是否采用该依赖\",{\"1\":{\"503\":1}}],[\"需要结合其他关键字来进行使用\",{\"1\":{\"351\":1}}],[\"需要结合多协程开启异步任务才能更好的处理逻辑\",{\"1\":{\"159\":1}}],[\"需要保持一致\",{\"1\":{\"232\":1}}],[\"需要开启允许使用别名的配置项\",{\"1\":{\"190\":1}}],[\"需要一个自定义的解析构造器来进行构造\",{\"1\":{\"175\":1}}],[\"需要知晓服务端的\",{\"1\":{\"174\":1}}],[\"需要在创建\",{\"1\":{\"165\":1}}],[\"需要调用传入的\",{\"1\":{\"158\":1}}],[\"需要\",{\"1\":{\"62\":1,\"529\":1,\"777\":2,\"1142\":1}}],[\"究其原因在于\",{\"1\":{\"527\":1}}],[\"�\",{\"1\":{\"527\":4}}],[\"𐑄\",{\"1\":{\"527\":7}}],[\"临界区间通常为\",{\"1\":{\"526\":1}}],[\"临时对象\",{\"1\":{\"485\":1}}],[\"临时对象池\",{\"1\":{\"485\":1}}],[\"临时文件\",{\"1\":{\"416\":1,\"510\":1}}],[\"样本的显著性水平\",{\"1\":{\"526\":1}}],[\"²\",{\"1\":{\"526\":6}}],[\"¹\",{\"1\":{\"526\":41}}],[\"∞\",{\"1\":{\"526\":38}}],[\"±\",{\"1\":{\"526\":38}}],[\"核数\",{\"0\":{\"910\":1},\"1\":{\"525\":1,\"908\":1}}],[\"核数列表\",{\"1\":{\"525\":1}}],[\"核心字段\",{\"1\":{\"1155\":1}}],[\"核心\",{\"0\":{\"430\":1}}],[\"帮助函数不会单独作为一个测试用例用于执行\",{\"1\":{\"522\":1}}],[\"控制器\",{\"1\":{\"1131\":1}}],[\"控制台颜色\",{\"0\":{\"1006\":1}}],[\"控制台输出间隔字符串\",{\"1\":{\"839\":1}}],[\"控制连续记录之间的间隔\",{\"1\":{\"862\":1}}],[\"控制内存分配统计的频率\",{\"1\":{\"519\":1}}],[\"控制协程阻塞统计频率\",{\"1\":{\"519\":1}}],[\"控制面和数据面\",{\"1\":{\"142\":1}}],[\"统一资源名\",{\"1\":{\"932\":1}}],[\"统一资源定位符\",{\"1\":{\"932\":1}}],[\"统一资源标识符编码\",{\"1\":{\"932\":1}}],[\"统一资源标识符\",{\"1\":{\"932\":1}}],[\"统一使用别名any来替代interface\",{\"1\":{\"429\":1}}],[\"统计锁竞争情况并写入文件\",{\"1\":{\"519\":1}}],[\"统计内存分配情况并写入文件\",{\"1\":{\"519\":1}}],[\"统计\",{\"1\":{\"519\":1}}],[\"统计覆盖率测试的情况并写入文件\",{\"1\":{\"519\":1}}],[\"统计测试中协程阻塞情况并写入文件\",{\"1\":{\"519\":1}}],[\"统计基准测试的内存分配\",{\"1\":{\"519\":1}}],[\"耗时很短\",{\"1\":{\"1105\":1}}],[\"耗时\",{\"1\":{\"518\":1}}],[\"耗时的不确定的\",{\"1\":{\"462\":1}}],[\"养成良好的测试风格\",{\"1\":{\"517\":1}}],[\"避免形成过长的溢出桶链表\",{\"1\":{\"1042\":1}}],[\"避免申请过多的内存而造成浪费\",{\"1\":{\"1025\":1}}],[\"避免的冗杂的其他信息\",{\"1\":{\"522\":1}}],[\"避免后续因维护不及时产生\",{\"1\":{\"516\":1}}],[\"避免了因版本变更时\",{\"1\":{\"92\":1}}],[\"良好的测试可以提前发现程序的中错误\",{\"1\":{\"516\":1}}],[\"旨在更好的进行本地的多模块开发工作\",{\"1\":{\"512\":1}}],[\"算法依然是先标记后清除这样一个步骤\",{\"1\":{\"1133\":1}}],[\"算法名称\",{\"1\":{\"510\":1}}],[\"算是\",{\"1\":{\"1008\":1}}],[\"算是对文件系统的抽象\",{\"1\":{\"616\":1}}],[\"算是一种语法糖\",{\"1\":{\"408\":1}}],[\"记得给冲突字段添加索引\",{\"1\":{\"867\":1}}],[\"记得要导入这个包\",{\"1\":{\"557\":1}}],[\"记录了有多少个等待协程\",{\"1\":{\"1166\":1}}],[\"记录了上一次被系统监控观察的信息\",{\"1\":{\"1088\":1}}],[\"记录下等待时间\",{\"1\":{\"1153\":1}}],[\"记录下来的工作量中只有一部分是当前协程的\",{\"1\":{\"1139\":1}}],[\"记录自旋的次数\",{\"1\":{\"1153\":1}}],[\"记录完毕后\",{\"1\":{\"1089\":1}}],[\"记录的数量减一\",{\"1\":{\"1039\":1}}],[\"记录当前正在遍历的桶序号\",{\"1\":{\"1037\":1}}],[\"记录hmap当前状态的快照\",{\"1\":{\"1037\":1}}],[\"记录开始时间\",{\"1\":{\"996\":1}}],[\"记录发生错误的时间\",{\"1\":{\"603\":1}}],[\"记录格式为模块名\",{\"1\":{\"510\":1}}],[\"记于\",{\"1\":{\"0\":1}}],[\"撤回版本范围\",{\"1\":{\"509\":1}}],[\"撤回一些版本\",{\"1\":{\"509\":1}}],[\"带参数\",{\"1\":{\"823\":1}}],[\"带有标记名的字段名优先于字段的实际名称\",{\"1\":{\"952\":1}}],[\"带有方法集的接口无法并入类型集\",{\"1\":{\"575\":1}}],[\"带有\",{\"1\":{\"509\":1}}],[\"带来非常大的压力\",{\"1\":{\"485\":1}}],[\"域名\",{\"1\":{\"509\":1,\"1002\":1}}],[\"域套接字端点地址\",{\"1\":{\"932\":1}}],[\"域套接字\",{\"1\":{\"416\":1}}],[\"框选的表示最终选择的版本\",{\"1\":{\"508\":1}}],[\"框架的适配器请自行了解\",{\"1\":{\"1010\":1}}],[\"框架如下所示\",{\"1\":{\"1009\":1}}],[\"框架中最易学习的一种\",{\"1\":{\"1008\":1}}],[\"框架中相当盛行\",{\"1\":{\"821\":1}}],[\"框架中\",{\"1\":{\"557\":1,\"962\":1}}],[\"框架gin\",{\"1\":{\"503\":1}}],[\"框架gin中的gin\",{\"1\":{\"473\":1}}],[\"框架都是基于\",{\"1\":{\"146\":1}}],[\"框架\",{\"0\":{\"51\":1},\"1\":{\"51\":10,\"146\":2,\"230\":1,\"610\":1,\"637\":1,\"962\":1}}],[\"框架依赖库\",{\"1\":{\"19\":1}}],[\"遵循这几个原则\",{\"1\":{\"1062\":1}}],[\"遵循上述的规范\",{\"1\":{\"517\":1}}],[\"遵循最小版本选择原则\",{\"1\":{\"508\":1}}],[\"遵守\",{\"1\":{\"239\":1}}],[\"符合语义化版本规范\",{\"1\":{\"493\":1}}],[\"符号进行注释\",{\"1\":{\"763\":1}}],[\"符号与参数必须相隔一个空格\",{\"1\":{\"725\":1}}],[\"符号\",{\"1\":{\"725\":1}}],[\"符号来消除参数前后的空白\",{\"1\":{\"725\":1}}],[\"符号衔接变量名就可以在模板中访问对应的值\",{\"1\":{\"725\":1}}],[\"符号链接\",{\"1\":{\"416\":1}}],[\"符号之间的间隔会显得更紧凑\",{\"1\":{\"311\":1}}],[\"淘汰掉了曾经老旧的工具\",{\"1\":{\"492\":1}}],[\"期间不需要上锁\",{\"1\":{\"1047\":1}}],[\"期间也不乏出现了一些佼佼者例如\",{\"1\":{\"492\":1}}],[\"期望的结果是4ex\",{\"1\":{\"527\":1}}],[\"期望值\",{\"1\":{\"490\":2}}],[\"局部中间件被执行\",{\"1\":{\"994\":1}}],[\"局部中间件可以注册到单个路由上\",{\"1\":{\"994\":1}}],[\"局部中间件即作用范围为局部\",{\"1\":{\"994\":1}}],[\"局部中间件\",{\"0\":{\"994\":1}}],[\"局面一时间混乱了起来\",{\"1\":{\"492\":1}}],[\"局域网通信地址\",{\"1\":{\"141\":1}}],[\"各种配置文件\",{\"1\":{\"621\":1}}],[\"各有优劣\",{\"1\":{\"555\":1}}],[\"各大社区开发者百家争鸣\",{\"1\":{\"492\":1}}],[\"各个节点都知晓了对方的存在\",{\"1\":{\"143\":1}}],[\"各个服务通过\",{\"1\":{\"142\":1}}],[\"各个模块已经完成发版工作\",{\"1\":{\"35\":1}}],[\"问题\",{\"1\":{\"490\":1}}],[\"涉及到的操作并不复杂\",{\"1\":{\"490\":1}}],[\"乐观锁本身并不是锁\",{\"1\":{\"490\":1}}],[\"增量回收\",{\"1\":{\"1130\":1}}],[\"增量扩容每次都会将\",{\"1\":{\"1042\":1}}],[\"增量扩容\",{\"0\":{\"1042\":1},\"1\":{\"1041\":1}}],[\"增大服务器开销\",{\"1\":{\"1003\":1}}],[\"增加安全性\",{\"1\":{\"1003\":1}}],[\"增加一段时间间隔\",{\"1\":{\"737\":1}}],[\"增加秒\",{\"1\":{\"737\":1}}],[\"增加\",{\"1\":{\"489\":2}}],[\"增强了net\",{\"1\":{\"115\":1}}],[\"低32位用于统计等待wg完成的协程数量\",{\"1\":{\"1176\":1}}],[\"低3位用于表示上面的三种状态\",{\"1\":{\"1151\":1}}],[\"低廉的学习成本使其在web领域称为了主流的数据交换格式\",{\"1\":{\"624\":1}}],[\"低\",{\"1\":{\"486\":1,\"617\":4}}],[\"申请的内存过大\",{\"1\":{\"1139\":1}}],[\"申请一个打印缓冲区\",{\"1\":{\"485\":1}}],[\"申请一个对象\",{\"1\":{\"485\":1}}],[\"申请对象\",{\"1\":{\"485\":1}}],[\"行为这一过程由业务逻辑决定\",{\"1\":{\"764\":1}}],[\"行\",{\"1\":{\"484\":1}}],[\"行号\",{\"1\":{\"40\":1}}],[\"七个因条件变量而阻塞的读协程都恢复了运行\",{\"1\":{\"482\":1}}],[\"七牛云\",{\"1\":{\"501\":1}}],[\"七牛云开源的脚本语言\",{\"1\":{\"75\":1}}],[\"七牛云开源的\",{\"1\":{\"62\":1}}],[\"七牛云开源\",{\"1\":{\"53\":1}}],[\"七牛云提供并开源\",{\"1\":{\"7\":1}}],[\"唤醒这些协程\",{\"1\":{\"1177\":1}}],[\"唤醒一个等待协程\",{\"1\":{\"1166\":1}}],[\"唤醒一个因条件阻塞的协程\",{\"1\":{\"482\":1}}],[\"唤醒所有协程\",{\"1\":{\"1169\":1}}],[\"唤醒所有等待协程\",{\"1\":{\"1166\":1}}],[\"唤醒所有等待的协程\",{\"1\":{\"1165\":1}}],[\"唤醒所有因辅助标记而休眠的协程\",{\"1\":{\"1140\":1}}],[\"唤醒所有因条件变量阻塞的协程\",{\"1\":{\"482\":1}}],[\"唤醒所有因条件阻塞的协程\",{\"1\":{\"482\":1}}],[\"唤醒等待的写者协程\",{\"1\":{\"1159\":1,\"1162\":1}}],[\"唤醒等待的读者协程\",{\"1\":{\"1159\":1}}],[\"唤醒后\",{\"1\":{\"1098\":1}}],[\"唤醒后的\",{\"1\":{\"1093\":1}}],[\"条件满足时唤醒所有等待的协程\",{\"1\":{\"1165\":1}}],[\"条件不满足时\",{\"1\":{\"1165\":1}}],[\"条件不满足就一直阻塞\",{\"1\":{\"482\":1}}],[\"条件如下\",{\"1\":{\"1153\":1}}],[\"条件查询会用到where方法\",{\"1\":{\"875\":1}}],[\"条件语句的格式如下所示\",{\"1\":{\"731\":1}}],[\"条件\",{\"0\":{\"731\":1}}],[\"条件变量使用起来非常简单\",{\"1\":{\"482\":1}}],[\"条件变量\",{\"0\":{\"482\":1},\"1\":{\"482\":2}}],[\"条件控制语句总共有三种if\",{\"1\":{\"347\":1}}],[\"条件控制\",{\"0\":{\"347\":1}}],[\"获得写锁的时候\",{\"1\":{\"481\":1}}],[\"获取当前互斥锁的状态\",{\"1\":{\"1153\":1}}],[\"获取当前函数的栈帧并与defer结构中的sp做比较来判断defer是否属于当前函数\",{\"1\":{\"1075\":1}}],[\"获取旧\",{\"1\":{\"1097\":1}}],[\"获取了字符串其切片表达形式后\",{\"1\":{\"1054\":1}}],[\"获取哈希值的高八位\",{\"1\":{\"1036\":1}}],[\"获取哈希表键长度\",{\"0\":{\"262\":1}}],[\"获取第\",{\"1\":{\"1030\":1}}],[\"获取底层数组指针\",{\"1\":{\"1028\":1}}],[\"获取对应的cookie\",{\"1\":{\"1002\":1}}],[\"获取参数\",{\"1\":{\"986\":1}}],[\"获取gin解析好的multipart表单\",{\"1\":{\"985\":1}}],[\"获取文件名\",{\"1\":{\"986\":1}}],[\"获取文件\",{\"1\":{\"984\":1}}],[\"获取基本的身份凭据\",{\"1\":{\"960\":1}}],[\"获取详情\",{\"1\":{\"862\":2}}],[\"获取目标指定索引的元素\",{\"1\":{\"728\":1}}],[\"获取模板\",{\"1\":{\"723\":1}}],[\"获取连接\",{\"1\":{\"682\":1}}],[\"获取前缀\",{\"1\":{\"648\":1}}],[\"获取结构体反射类型\",{\"1\":{\"451\":2,\"452\":1}}],[\"获取到structfield后\",{\"1\":{\"450\":1}}],[\"获取到的\",{\"1\":{\"162\":1}}],[\"获取到的文件名就只有相对于模块路径的相对路径\",{\"1\":{\"8\":1}}],[\"获取该指针所指向的元素\",{\"1\":{\"449\":1}}],[\"获取字段\",{\"1\":{\"449\":1}}],[\"获取函数的反射值\",{\"1\":{\"446\":1}}],[\"获取值\",{\"0\":{\"443\":1},\"1\":{\"1003\":1}}],[\"获取指针指向的元素\",{\"1\":{\"442\":1}}],[\"获取一个随机数\",{\"1\":{\"1037\":1}}],[\"获取一个随机的哈希种子\",{\"1\":{\"1034\":1}}],[\"获取一个私有字段\",{\"1\":{\"449\":1}}],[\"获取一个反射值的指针方式有两种\",{\"1\":{\"441\":1}}],[\"获取一个反射值的元素反射值\",{\"1\":{\"440\":1}}],[\"获取一个集合的元素个数\",{\"1\":{\"271\":1}}],[\"获取一个指定\",{\"1\":{\"213\":1}}],[\"获取集合中的所有成员\",{\"1\":{\"271\":1}}],[\"获取map长度\",{\"1\":{\"262\":1}}],[\"获取所有的map的键\",{\"1\":{\"261\":1}}],[\"获取所有的键\",{\"0\":{\"261\":1}}],[\"获取整个map\",{\"1\":{\"258\":1}}],[\"获取若干个索引的信息\",{\"1\":{\"208\":1}}],[\"获取\",{\"0\":{\"208\":1,\"213\":1},\"1\":{\"162\":1,\"163\":1}}],[\"获取操作系统信息\",{\"1\":{\"74\":1}}],[\"释义\",{\"1\":{\"519\":1}}],[\"释义如下\",{\"1\":{\"92\":1,\"1016\":1}}],[\"释放了信号量\",{\"1\":{\"1178\":1}}],[\"释放锁\",{\"1\":{\"1173\":1}}],[\"释放信号量readersem\",{\"1\":{\"1159\":1}}],[\"释放和回收垃圾对象的内存\",{\"1\":{\"1130\":1}}],[\"释放mspan\",{\"1\":{\"1118\":1}}],[\"释放旧栈的内存\",{\"1\":{\"1101\":1}}],[\"释放\",{\"0\":{\"1121\":1},\"1\":{\"1097\":1,\"1098\":1}}],[\"释放内存\",{\"1\":{\"543\":1}}],[\"释放写锁完成\",{\"1\":{\"1159\":1}}],[\"释放写锁\",{\"1\":{\"481\":4,\"482\":4,\"1159\":1}}],[\"释放读锁的流程结束\",{\"1\":{\"1162\":1}}],[\"释放读锁\",{\"1\":{\"481\":8,\"482\":8}}],[\"尤其会发生这样的问题\",{\"1\":{\"479\":1}}],[\"尤其是对于\",{\"1\":{\"1071\":1}}],[\"尤其是对于一些基础类型\",{\"1\":{\"830\":1}}],[\"尤其是string和stringdata\",{\"1\":{\"1054\":1}}],[\"尤其是前后端分离的项目时\",{\"1\":{\"984\":1}}],[\"尤其是将其作为函数参数传递时\",{\"1\":{\"472\":1}}],[\"尤其是在涉及复杂条件同步时\",{\"1\":{\"1170\":1}}],[\"尤其是在有大量线程竞争锁的情况下\",{\"1\":{\"1153\":1}}],[\"尤其是在锁被占用的时间较长时\",{\"1\":{\"1153\":1}}],[\"尤其是在实际的代码中这些问题通常藏的很深\",{\"1\":{\"1019\":1}}],[\"尤其是在处理切片类型的时候\",{\"1\":{\"589\":1}}],[\"尤其是在并发量特别大和实例化对象成本特别高的时候更能体现出优势\",{\"1\":{\"485\":1}}],[\"尤其是在扩容后\",{\"1\":{\"414\":1}}],[\"尤其是在业务中一些结构体的字段数可能多大几十个或者数百个\",{\"1\":{\"410\":1}}],[\"尤其是在延迟调用中将函数返回值作为参数的情况尤其需要注意\",{\"1\":{\"402\":1}}],[\"尤其是\",{\"1\":{\"180\":1}}],[\"锁来保证在等待时对共享资源的访问是同步的\",{\"1\":{\"1165\":1}}],[\"锁是空闲的\",{\"1\":{\"1162\":1}}],[\"锁是操作系统中的一种重要的同步原语\",{\"1\":{\"1149\":1}}],[\"锁等原因而挂起\",{\"1\":{\"1108\":1}}],[\"锁或者是time\",{\"1\":{\"1098\":1}}],[\"锁住了\",{\"1\":{\"1067\":1}}],[\"锁的意义在于保护不变量\",{\"1\":{\"479\":1}}],[\"锁\",{\"0\":{\"479\":1,\"881\":1},\"1\":{\"554\":1,\"849\":1,\"1087\":1}}],[\"逻辑核数\",{\"1\":{\"1085\":1}}],[\"逻辑位于runtime\",{\"1\":{\"1033\":1}}],[\"逻辑还是跟上面的一模一样\",{\"1\":{\"1027\":1}}],[\"逻辑基本上都是那一套\",{\"1\":{\"1000\":1}}],[\"逻辑可以忽略\",{\"1\":{\"899\":1}}],[\"逻辑也很简单\",{\"1\":{\"476\":1}}],[\"逻辑全是之前的内容\",{\"1\":{\"164\":1}}],[\"计时中间件\",{\"1\":{\"996\":1}}],[\"计时器中间件\",{\"0\":{\"996\":1}}],[\"计数器\",{\"1\":{\"1153\":1}}],[\"计数\",{\"1\":{\"1053\":1}}],[\"计数完全无法作用到真正的waitgroup上\",{\"1\":{\"472\":1}}],[\"计数10\",{\"1\":{\"472\":1}}],[\"计数就\",{\"1\":{\"472\":1}}],[\"计算后的栈空间容量是原来的两倍\",{\"1\":{\"1101\":1}}],[\"计算tophash\",{\"1\":{\"1038\":1}}],[\"计算key哈希值\",{\"1\":{\"1038\":1}}],[\"计算得到的哈希值与当前\",{\"1\":{\"1036\":1}}],[\"计算\",{\"0\":{\"1033\":1},\"1\":{\"1038\":1,\"1039\":2}}],[\"计算要复制的字节数\",{\"1\":{\"1026\":1}}],[\"计算出所需结果后\",{\"1\":{\"1025\":1}}],[\"计算新长度\",{\"1\":{\"1024\":1}}],[\"计算结果大于可分配的最大内存\",{\"1\":{\"1020\":1}}],[\"计算所需内存\",{\"1\":{\"1020\":1}}],[\"计算所有数字类型的两数之和\",{\"1\":{\"571\":1}}],[\"计算需要的总内存\",{\"1\":{\"1020\":1}}],[\"计算时间间隔\",{\"1\":{\"996\":1}}],[\"计算相对路径\",{\"1\":{\"426\":1}}],[\"计算并重新排布结构体字段来最小化结构体占用的内存\",{\"1\":{\"410\":1}}],[\"永久阻塞\",{\"1\":{\"471\":1}}],[\"永远不要在接收方关闭管道\",{\"1\":{\"1062\":1}}],[\"永远也不会执行\",{\"1\":{\"476\":1}}],[\"永远也不会被执行\",{\"1\":{\"471\":1}}],[\"永远也不会退出\",{\"1\":{\"354\":1}}],[\"永远也无法精准的预判到它到底会输出什么\",{\"1\":{\"462\":1}}],[\"永远都是以return关键字后的值为最高优先级\",{\"1\":{\"397\":1}}],[\"告诉主协程可以退出了\",{\"1\":{\"471\":1}}],[\"退出流程\",{\"1\":{\"1153\":1}}],[\"退出后\",{\"1\":{\"1096\":1}}],[\"退出\",{\"0\":{\"1092\":1,\"1096\":1},\"1\":{\"682\":1}}],[\"退出循环\",{\"1\":{\"471\":1}}],[\"退出时\",{\"1\":{\"141\":1}}],[\"箭头符号<\",{\"1\":{\"469\":2}}],[\"阻塞自己\",{\"1\":{\"1165\":1}}],[\"阻塞自身进入抢占\",{\"1\":{\"1086\":1}}],[\"阻塞的原因见下文\",{\"1\":{\"1086\":1}}],[\"阻塞等待\",{\"1\":{\"1166\":1}}],[\"阻塞等待直到被发送方协程唤醒\",{\"1\":{\"1060\":1}}],[\"阻塞等待下一个连接建立\",{\"1\":{\"682\":1}}],[\"阻塞等待函数f执行完毕后才会返回\",{\"1\":{\"523\":1}}],[\"阻塞等待条件生效\",{\"1\":{\"482\":1}}],[\"阻塞等待其他协程来读取数据\",{\"1\":{\"468\":1}}],[\"阻塞等待其他协程写入数据\",{\"1\":{\"468\":1}}],[\"阻塞等待读取\",{\"1\":{\"467\":1}}],[\"阻止编译器优化时的函数内联\",{\"1\":{\"45\":1}}],[\"译为管道\",{\"1\":{\"463\":1}}],[\"译名云原生计算基金会\",{\"1\":{\"146\":1}}],[\"信号量里面的细节就不深究了\",{\"1\":{\"1153\":1}}],[\"信号量\",{\"1\":{\"462\":1,\"1162\":1,\"1176\":1}}],[\"信息\",{\"0\":{\"445\":1,\"907\":1,\"909\":1,\"918\":1},\"1\":{\"908\":1,\"1003\":1}}],[\"情况并写入文件\",{\"1\":{\"519\":1}}],[\"情况如下\",{\"1\":{\"462\":2}}],[\"情况就不同了\",{\"1\":{\"414\":1}}],[\"判为完全相等\",{\"1\":{\"460\":1}}],[\"判断当前协程能否进入自旋状态\",{\"1\":{\"1153\":1}}],[\"判断关闭\",{\"0\":{\"1062\":1}}],[\"判断是不是等量扩容\",{\"1\":{\"1042\":1}}],[\"判断是否有写者协程正在工作\",{\"1\":{\"1160\":1}}],[\"判断是否是单字节字符\",{\"1\":{\"1055\":1}}],[\"判断是否需要扩容的代码如下\",{\"1\":{\"1041\":1}}],[\"判断是否需要扩容\",{\"1\":{\"1024\":1}}],[\"判断是否执行\",{\"1\":{\"484\":1}}],[\"判断负载因子是否超过阈值的函数是runtime\",{\"1\":{\"1041\":1}}],[\"判断根据下一个溢出桶来判断当前元素是否是最后一个可用元素\",{\"1\":{\"1039\":1}}],[\"判断key是否相等\",{\"1\":{\"1038\":1}}],[\"判断的代码在cmd\",{\"1\":{\"1024\":1}}],[\"判断两个时间是否表示同一瞬间\",{\"1\":{\"737\":1}}],[\"判断字段值是不是等于\",{\"1\":{\"949\":1}}],[\"判断字段是否存在\",{\"1\":{\"260\":1}}],[\"判断字符串\",{\"1\":{\"706\":2}}],[\"判断一个时间是否在它之前\",{\"1\":{\"737\":1}}],[\"判断一个时间是否在它之后\",{\"1\":{\"737\":1}}],[\"判断一个字符串\",{\"1\":{\"706\":1}}],[\"判断一个切片是否有序\",{\"1\":{\"689\":1}}],[\"判断一个元素是否属于这个集合\",{\"1\":{\"271\":1}}],[\"判断键是否存在\",{\"0\":{\"260\":1}}],[\"管道与select结合时就是非阻塞的\",{\"1\":{\"1062\":1}}],[\"管道容量为\",{\"1\":{\"1060\":1}}],[\"管道已关闭则清空接收元素的内存\",{\"1\":{\"1060\":1}}],[\"管道已关闭\",{\"1\":{\"1059\":1,\"1060\":1}}],[\"管道和环形队列的内存单独分配\",{\"1\":{\"1058\":1}}],[\"管道操作在模板中经常出现\",{\"1\":{\"729\":1}}],[\"管道可能经过层层传递\",{\"1\":{\"468\":1}}],[\"管道为nil\",{\"1\":{\"468\":1,\"1059\":1,\"1060\":1}}],[\"管道中的数据流动方式与队列一样\",{\"1\":{\"465\":1}}],[\"管道更适合协程间通信\",{\"1\":{\"462\":1}}],[\"管道\",{\"0\":{\"458\":1,\"463\":1,\"729\":1},\"1\":{\"462\":1,\"1063\":1}}],[\"管理着整个\",{\"1\":{\"1113\":1}}],[\"管理\",{\"1\":{\"156\":1,\"539\":1}}],[\"桥梁\",{\"0\":{\"429\":1}}],[\"静态\",{\"1\":{\"1085\":1}}],[\"静态资源在以往基本上是服务端不可或缺的一部分\",{\"1\":{\"999\":1}}],[\"静态资源配置\",{\"0\":{\"999\":1}}],[\"静态指的是\",{\"1\":{\"591\":1}}],[\"静态强类型\",{\"0\":{\"591\":1}}],[\"静态链接库调用成功\",{\"1\":{\"546\":1}}],[\"静态链接库\",{\"0\":{\"546\":1}}],[\"静态这一词是体现在对外表现的抽象的接口类型是不变的\",{\"1\":{\"428\":1}}],[\"静态接口类型\",{\"1\":{\"428\":1}}],[\"静态编译和交叉编译这两点对于运维而言也十分友好\",{\"1\":{\"88\":1}}],[\"静态编译后的二进制文件不依赖额外的运行环境\",{\"1\":{\"88\":1}}],[\"密切相关\",{\"1\":{\"427\":1}}],[\"遇到文件就创建新文件并复制\",{\"1\":{\"426\":1}}],[\"遇到文件夹就创建文件夹\",{\"1\":{\"426\":1}}],[\"遇到错误的包时正常输出\",{\"1\":{\"20\":1}}],[\"刷盘\",{\"1\":{\"422\":1}}],[\"刷新写屏障缓存\",{\"1\":{\"1145\":1}}],[\"刷新问题\",{\"1\":{\"1004\":1}}],[\"刷新\",{\"0\":{\"422\":1}}],[\"扩容则又会向mheap去申请新的mspan\",{\"1\":{\"1125\":1}}],[\"扩容后\",{\"1\":{\"1042\":1}}],[\"扩容后就是一个新数组了\",{\"1\":{\"1019\":1}}],[\"扩容也分种类\",{\"1\":{\"1041\":1}}],[\"扩容前旧的溢出桶的指针切片\",{\"1\":{\"1032\":1}}],[\"扩容时出现只能出现在oldbuckets中\",{\"1\":{\"1030\":1}}],[\"扩容时出现\",{\"1\":{\"1030\":2}}],[\"扩容的逻辑其实比较复杂\",{\"1\":{\"1041\":1}}],[\"扩容的倍率就会减小\",{\"1\":{\"1025\":1}}],[\"扩容的工作在运行时由runtime\",{\"1\":{\"1025\":1}}],[\"扩容\",{\"0\":{\"1025\":1,\"1041\":1,\"1101\":1,\"1122\":1},\"1\":{\"417\":1}}],[\"扩展了对\",{\"1\":{\"117\":1}}],[\"针对协程介绍中最开始的例子\",{\"1\":{\"472\":1}}],[\"针对于第一种方法\",{\"1\":{\"417\":1}}],[\"针对指定索引对文本字符串进行分析\",{\"1\":{\"209\":1}}],[\"倘若它发现有协程正在阻塞等待\",{\"1\":{\"1153\":1}}],[\"倘若整个内存单元都未被标记\",{\"1\":{\"1147\":1}}],[\"倘若还找不到\",{\"1\":{\"1104\":1}}],[\"倘若还是没有找到\",{\"1\":{\"1046\":1}}],[\"倘若大于\",{\"1\":{\"1100\":1}}],[\"倘若小于这个值就会从stackpool缓存中去获取\",{\"1\":{\"1100\":1}}],[\"倘若缓冲区满了\",{\"1\":{\"1059\":1}}],[\"倘若没有等待发送的协程\",{\"1\":{\"1060\":1}}],[\"倘若没有可用的接受方协程且容量足够\",{\"1\":{\"1059\":1}}],[\"倘若没有default分支\",{\"1\":{\"471\":1}}],[\"倘若复制的字符串非常大\",{\"1\":{\"1053\":1}}],[\"倘若哈希冲突比较频繁\",{\"1\":{\"1042\":1}}],[\"倘若不是在运行时调用\",{\"1\":{\"1026\":1}}],[\"倘若能在编译期间推断出它的长度和容量\",{\"1\":{\"1021\":1}}],[\"倘若每一个项目都要自己手写一套\",{\"1\":{\"758\":1}}],[\"倘若想要对结构体进行排序的话必须实现sort\",{\"1\":{\"683\":1}}],[\"倘若想要传入两个float64类型的浮点数求和的话\",{\"1\":{\"571\":1}}],[\"倘若使用复杂的结构\",{\"1\":{\"620\":1}}],[\"倘若使用复制的值\",{\"1\":{\"472\":1}}],[\"倘若你学习完后感到无处施展拳脚\",{\"1\":{\"609\":1}}],[\"倘若执行的不是单纯的两数相加\",{\"1\":{\"547\":1}}],[\"倘若\",{\"1\":{\"533\":1,\"1042\":1,\"1120\":1}}],[\"倘若是递归锁的话\",{\"1\":{\"479\":1}}],[\"倘若有其他协程已经写入了数据\",{\"1\":{\"467\":1}}],[\"倘若循环中子协程的工作不只是一个简单的输出数字\",{\"1\":{\"462\":1}}],[\"倘若要修改结构体字段值\",{\"1\":{\"449\":1}}],[\"倘若通过反射来修改反射值\",{\"1\":{\"442\":1}}],[\"倘若只是想获取该文件的一些信息\",{\"1\":{\"416\":1}}],[\"倘若此时player\",{\"1\":{\"193\":1}}],[\"黏滞位\",{\"1\":{\"416\":1}}],[\"剩下\",{\"1\":{\"1138\":1}}],[\"剩下的就是白色\",{\"1\":{\"1135\":1}}],[\"剩下的内存全都越界了\",{\"1\":{\"539\":1}}],[\"剩下的容量不足以使用\",{\"1\":{\"168\":1}}],[\"剩余逻辑如下\",{\"1\":{\"417\":1}}],[\"剩余的值用于控制行为\",{\"1\":{\"416\":1}}],[\"形成了一个栈链表\",{\"1\":{\"1103\":1}}],[\"形成一个良好的规范\",{\"1\":{\"414\":1}}],[\"形参具体是什么类型取决于传进来什么类型\",{\"1\":{\"571\":1}}],[\"形式的存在\",{\"1\":{\"168\":1}}],[\"形式输出\",{\"1\":{\"37\":1}}],[\"改写刚刚的sum\",{\"1\":{\"533\":1}}],[\"改成指针接收者就正常了\",{\"1\":{\"414\":1}}],[\"改成如下的顺序\",{\"1\":{\"410\":1}}],[\"改为了值接收者\",{\"1\":{\"414\":1}}],[\"改为\",{\"1\":{\"414\":1}}],[\"翻译器组件\",{\"1\":{\"952\":1}}],[\"翻译一下就是\",{\"1\":{\"706\":1}}],[\"翻译成人话就是\",{\"1\":{\"574\":1}}],[\"翻译过来就是\",{\"1\":{\"414\":1,\"563\":2,\"1144\":1}}],[\"翻看get命令的源代码\",{\"1\":{\"18\":1}}],[\"遗憾的是\",{\"1\":{\"413\":1}}],[\"浪费了\",{\"1\":{\"410\":1}}],[\"明文存储\",{\"1\":{\"1002\":1}}],[\"明显\",{\"1\":{\"617\":1}}],[\"明白了上面的规则后\",{\"1\":{\"410\":1}}],[\"明明pa的输出就是nil\",{\"1\":{\"1070\":1}}],[\"明明已经添加了元素\",{\"1\":{\"1019\":1}}],[\"明明\",{\"1\":{\"331\":1}}],[\"拓展中间件十分丰富\",{\"1\":{\"992\":1}}],[\"拓展性非常高\",{\"1\":{\"992\":1}}],[\"拓展性强\",{\"1\":{\"406\":1}}],[\"拓展表达式就是为了解决此类问题而生的\",{\"1\":{\"371\":1}}],[\"拓展表达式\",{\"0\":{\"371\":1}}],[\"刻意弱化了面向对象的功能\",{\"1\":{\"403\":1}}],[\"答案如下\",{\"1\":{\"402\":1}}],[\"答案是\",{\"1\":{\"331\":1}}],[\"半天排查不出来是什么原因\",{\"1\":{\"402\":1}}],[\"延时大部分情况下都低于\",{\"1\":{\"1130\":1}}],[\"延时变化\",{\"1\":{\"1130\":1}}],[\"延时都不会超过\",{\"1\":{\"88\":1}}],[\"延迟调用通常用于释放文件资源\",{\"1\":{\"400\":1}}],[\"延迟调用\",{\"0\":{\"400\":1}}],[\"闭包中的操作应该使用参数tx\",{\"1\":{\"901\":1}}],[\"闭包事务\",{\"1\":{\"901\":1}}],[\"闭包recover不会恢复外部函数的任何panic\",{\"1\":{\"607\":1}}],[\"闭包函数可以看作调用了一个函数\",{\"1\":{\"607\":1}}],[\"闭包与拉取式迭代器的用法都大差不差\",{\"1\":{\"583\":1}}],[\"闭包的用法是这样的\",{\"1\":{\"583\":1}}],[\"闭包的输出是\",{\"1\":{\"402\":1}}],[\"闭包引用了函数外的变量\",{\"1\":{\"551\":1}}],[\"闭包引用\",{\"0\":{\"551\":1}}],[\"闭包\",{\"0\":{\"399\":1},\"1\":{\"399\":2,\"583\":1}}],[\"变为\",{\"1\":{\"1059\":1}}],[\"变长参数可以接收\",{\"1\":{\"396\":1}}],[\"变量v2也就是for\",{\"1\":{\"1028\":1}}],[\"变量验证\",{\"0\":{\"945\":1}}],[\"变量必须先声明才能使用\",{\"1\":{\"727\":1}}],[\"变量遮蔽问题\",{\"1\":{\"598\":1}}],[\"变量的内存分配是由编译器决定的\",{\"1\":{\"549\":1}}],[\"变量的例子\",{\"1\":{\"543\":1}}],[\"变量的声明会用到var关键字\",{\"1\":{\"328\":1}}],[\"变量e就会以指数级增长一次\",{\"1\":{\"399\":1}}],[\"变量都是有效的\",{\"1\":{\"355\":1}}],[\"变量之间的比较有一个大前提\",{\"1\":{\"332\":1}}],[\"变量a被重新赋值\",{\"1\":{\"329\":1}}],[\"变量名的命名规则必须遵守标识符的命名规则\",{\"1\":{\"328\":1}}],[\"变量名\",{\"1\":{\"328\":1}}],[\"变量以查看更多细节\",{\"1\":{\"327\":1}}],[\"变量是用于保存一个值的存储位置\",{\"1\":{\"327\":1}}],[\"变量命名等等\",{\"1\":{\"298\":1}}],[\"变量隐藏问题\",{\"1\":{\"137\":1}}],[\"变量\",{\"0\":{\"327\":1,\"727\":1},\"1\":{\"4\":1,\"294\":2,\"295\":1,\"543\":1,\"945\":1,\"1021\":1}}],[\"缓冲区元素数量大于\",{\"1\":{\"1067\":1}}],[\"缓冲区是空的\",{\"1\":{\"1060\":1}}],[\"缓冲区没满且数量不为\",{\"1\":{\"1060\":1}}],[\"缓冲区容量为\",{\"1\":{\"1060\":1}}],[\"缓冲区为空\",{\"1\":{\"468\":1}}],[\"缓冲区已经满了\",{\"1\":{\"467\":1}}],[\"缓冲区有空位了\",{\"1\":{\"467\":1}}],[\"缓冲区满了以后就开始阻塞等待读协程来读取\",{\"1\":{\"467\":1}}],[\"缓冲区满了\",{\"1\":{\"467\":1,\"1059\":1,\"1060\":1}}],[\"缓冲区大小为1的管道\",{\"1\":{\"464\":1,\"467\":1}}],[\"缓冲区大小为10的通道\",{\"1\":{\"393\":1}}],[\"缓冲区默认大小为\",{\"1\":{\"419\":1}}],[\"缓存一致性问题\",{\"1\":{\"1153\":1}}],[\"缓存未满的话\",{\"1\":{\"1121\":1}}],[\"缓存中寻找可用的空间\",{\"1\":{\"1124\":1}}],[\"缓存中返回一个可用的mspan\",{\"1\":{\"1120\":1}}],[\"缓存中获取mspan的代码如下\",{\"1\":{\"1120\":1}}],[\"缓存中获取\",{\"1\":{\"1120\":1}}],[\"缓存中间件管理器\",{\"1\":{\"61\":1}}],[\"缓存也更加友好\",{\"1\":{\"1103\":1}}],[\"缓存没有大小限制且不会自动删除\",{\"1\":{\"507\":1}}],[\"缓存\",{\"1\":{\"61\":2}}],[\"缓存组件\",{\"0\":{\"61\":1}}],[\"报错如下\",{\"1\":{\"392\":1,\"469\":1}}],[\"报告漏洞\",{\"1\":{\"2\":1}}],[\"禁止被抢占\",{\"1\":{\"1097\":1}}],[\"禁止抢占\",{\"1\":{\"1095\":1}}],[\"禁止同时并发写\",{\"1\":{\"1038\":1}}],[\"禁止密码和用户名一致\",{\"1\":{\"946\":1}}],[\"禁止指针运算\",{\"0\":{\"392\":1}}],[\"禁用嵌套事务\",{\"1\":{\"852\":1}}],[\"禁用默认事务\",{\"1\":{\"852\":1}}],[\"禁用内联优化\",{\"1\":{\"550\":1}}],[\"禁用了一些参数\",{\"1\":{\"545\":1}}],[\"禁用\",{\"1\":{\"117\":1}}],[\"禁用测试缓存\",{\"1\":{\"38\":1}}],[\"禁用符号表\",{\"1\":{\"10\":1}}],[\"清理\",{\"1\":{\"1147\":1}}],[\"清理项目模块\",{\"1\":{\"506\":1}}],[\"清空链表\",{\"1\":{\"1169\":1}}],[\"清空\",{\"0\":{\"387\":1,\"1027\":1,\"1040\":1}}],[\"清除算法会提升相当多\",{\"1\":{\"1136\":1}}],[\"清除阶段\",{\"1\":{\"1134\":1}}],[\"清除阶段就可能会扫描这些指针\",{\"1\":{\"1058\":1}}],[\"清除脚本缓存\",{\"1\":{\"283\":1}}],[\"清除\",{\"0\":{\"1134\":1},\"1\":{\"15\":1}}],[\"清除编译缓存\",{\"1\":{\"15\":1}}],[\"清除fuzz\",{\"1\":{\"15\":1}}],[\"清除所有下载的模块缓存\",{\"1\":{\"15\":1}}],[\"清除所有产生的测试缓存\",{\"1\":{\"15\":1}}],[\"清除所有go\",{\"1\":{\"15\":1}}],[\"清除对应的归档文件或二进制文件\",{\"1\":{\"15\":1}}],[\"清除对象文件\",{\"1\":{\"2\":1}}],[\"清除无用的文件等\",{\"1\":{\"14\":1}}],[\"求两个时间的差值\",{\"1\":{\"737\":1}}],[\"求对数\",{\"0\":{\"664\":1}}],[\"求其平均耗时\",{\"1\":{\"547\":1}}],[\"求长度\",{\"1\":{\"383\":1}}],[\"求字符串长度使用内置函数len\",{\"1\":{\"377\":1}}],[\"合起来就是v1\",{\"1\":{\"505\":1}}],[\"合法的\",{\"1\":{\"380\":1}}],[\"合并\",{\"1\":{\"162\":1}}],[\"界\",{\"1\":{\"380\":1}}],[\"界面如下\",{\"1\":{\"1011\":1}}],[\"界面会返回\",{\"1\":{\"143\":1}}],[\"界面\",{\"1\":{\"5\":1,\"141\":1}}],[\"世纪\",{\"1\":{\"618\":1}}],[\"世\",{\"1\":{\"380\":1}}],[\"世界\",{\"1\":{\"292\":2,\"297\":1,\"309\":2,\"334\":1,\"380\":4,\"696\":3,\"704\":3,\"731\":2}}],[\"\",{\"1\":{\"380\":1}}],[\"\",{\"1\":{\"380\":1}}],[\"ç\",{\"1\":{\"380\":1}}],[\"\",{\"1\":{\"380\":1}}],[\"¸\",{\"1\":{\"380\":1}}],[\"拼接的操作在运行时由runtime\",{\"1\":{\"1053\":1}}],[\"拼接目标路径\",{\"1\":{\"426\":1}}],[\"拼接\",{\"0\":{\"379\":1,\"1053\":1}}],[\"è\",{\"1\":{\"377\":1}}],[\"普通字符串由\",{\"1\":{\"374\":1}}],[\"普通字符串\",{\"1\":{\"374\":1}}],[\"却连s1也一起修改了\",{\"1\":{\"371\":1}}],[\"拷贝结构体\",{\"1\":{\"1028\":1}}],[\"拷贝\",{\"0\":{\"368\":1,\"378\":1,\"1026\":1}}],[\"原状态并非饥饿模式\",{\"1\":{\"1153\":1}}],[\"原来引用着对象\",{\"1\":{\"1144\":1}}],[\"原来需要对指针数组解引用\",{\"1\":{\"117\":1}}],[\"原有的栈空间内存不会释放也不会被拷贝\",{\"1\":{\"1103\":1}}],[\"原理\",{\"0\":{\"1065\":1}}],[\"原始token字符串\",{\"1\":{\"778\":1}}],[\"原始错误\",{\"1\":{\"603\":2}}],[\"原始压缩包等\",{\"1\":{\"507\":1}}],[\"原生\",{\"1\":{\"588\":1}}],[\"原生字符串里面所有的字符都会原封不动的输出\",{\"1\":{\"374\":1}}],[\"原生字符串由反引号表示\",{\"1\":{\"374\":1}}],[\"原生字符串\",{\"1\":{\"374\":1}}],[\"原本不可排序的类型传入比较器后也可以使用堆了\",{\"1\":{\"578\":1}}],[\"原字符为\",{\"1\":{\"527\":1}}],[\"原因是字符串反转后变成了非utf8格式\",{\"1\":{\"527\":1}}],[\"原子值\",{\"1\":{\"1166\":1}}],[\"原子的存储值\",{\"1\":{\"489\":1}}],[\"原子的交换值\",{\"1\":{\"489\":1}}],[\"原子的获取值\",{\"1\":{\"489\":1}}],[\"原子或原语操作\",{\"1\":{\"487\":1}}],[\"原子\",{\"0\":{\"487\":1}}],[\"原子加载数据\",{\"1\":{\"484\":1}}],[\"原文为dynamic\",{\"1\":{\"428\":1}}],[\"原\",{\"1\":{\"365\":2}}],[\"倍左右\",{\"1\":{\"486\":1}}],[\"倍\",{\"1\":{\"365\":3,\"962\":1,\"1025\":1}}],[\"预计桶的数量加上1\",{\"1\":{\"1034\":1}}],[\"预计元素的容量\",{\"1\":{\"1034\":1}}],[\"预计在后面版本的更新中\",{\"1\":{\"1028\":1}}],[\"预加载从语法上直接查询\",{\"1\":{\"899\":1}}],[\"预加载是直接对实体记录进行查询\",{\"1\":{\"899\":1}}],[\"预加载用于查询关联数据\",{\"1\":{\"899\":1}}],[\"预加载\",{\"0\":{\"899\":1}}],[\"预编译模式\",{\"1\":{\"849\":1}}],[\"预留的\",{\"1\":{\"365\":1}}],[\"预览版本的开发始于\",{\"1\":{\"138\":1}}],[\"水的高度一定小于等于桶的高度\",{\"1\":{\"364\":1}}],[\"水并不是满的\",{\"1\":{\"364\":1}}],[\"举几个例子\",{\"1\":{\"382\":1}}],[\"举个例子解释一下长度与容量的区别\",{\"1\":{\"364\":1}}],[\"举例\",{\"1\":{\"91\":1}}],[\"若要永久删除的话可以使用unscope方法\",{\"1\":{\"889\":1}}],[\"若要将数组转换为切片类型\",{\"1\":{\"362\":1}}],[\"若是涉及到html的模板处理建议使用后者会更安全\",{\"1\":{\"722\":1}}],[\"若你尝试去访问一个私有的类型\",{\"1\":{\"295\":1}}],[\"子协程应该使用context的副本\",{\"1\":{\"982\":1}}],[\"子协程要执行一些逻辑\",{\"1\":{\"606\":1}}],[\"子查询就是嵌套查询\",{\"1\":{\"880\":1}}],[\"子查询\",{\"0\":{\"880\":1},\"1\":{\"849\":1,\"880\":1}}],[\"子模板只是在一个模板内部声明多个命名的模板\",{\"1\":{\"734\":1}}],[\"子串的位置\",{\"0\":{\"712\":1}}],[\"子串出现次数\",{\"0\":{\"707\":1}}],[\"子测试\",{\"0\":{\"523\":1}}],[\"子数组范围\",{\"1\":{\"362\":4}}],[\"子托管\",{\"1\":{\"71\":1}}],[\"切断\",{\"1\":{\"1096\":1}}],[\"切割字符串\",{\"1\":{\"375\":1}}],[\"切割的区间为左闭右开\",{\"1\":{\"362\":1}}],[\"切割数组的格式为arr\",{\"1\":{\"362\":1}}],[\"切割\",{\"0\":{\"362\":1}}],[\"切片作为结构体确实可以让其非常轻量\",{\"1\":{\"1019\":1}}],[\"切片引用的范围也不一定非得相邻\",{\"1\":{\"1019\":1}}],[\"切片以一个结构体的形式而存在\",{\"1\":{\"1019\":1}}],[\"切片应该是\",{\"1\":{\"1018\":1}}],[\"切片长度最大值为5\",{\"1\":{\"944\":1}}],[\"切片验证\",{\"0\":{\"944\":1}}],[\"切片操作包\",{\"1\":{\"616\":1}}],[\"切片类型\",{\"1\":{\"568\":1}}],[\"切片与数组都可以使用简单表达式来进行切割\",{\"1\":{\"371\":1}}],[\"切片与数组最大的区别在于切片的容量会自动扩张\",{\"1\":{\"364\":1}}],[\"切片初始化部分修改为如下代码即可\",{\"1\":{\"370\":1}}],[\"切片中的每一个切片长度都可能是不相同的\",{\"1\":{\"370\":1}}],[\"切片元素的删除需要结合append函数来使用\",{\"1\":{\"367\":1}}],[\"切片元素的插入也是需要结合append函数来使用\",{\"1\":{\"366\":1}}],[\"切片可以通过append函数实现许多操作\",{\"1\":{\"365\":1}}],[\"切片的访问操作是在编译期间就已经完成了\",{\"1\":{\"1021\":1}}],[\"切片的容量\",{\"1\":{\"1019\":1}}],[\"切片的容量代表着切片总共能装多少个元素\",{\"1\":{\"364\":1}}],[\"切片的长度\",{\"1\":{\"1019\":1}}],[\"切片的长度代表着切片中元素的个数\",{\"1\":{\"364\":1}}],[\"切片的底层依旧是一个数组\",{\"1\":{\"1025\":1}}],[\"切片的底层实现还是依赖于数组\",{\"1\":{\"1019\":1}}],[\"切片的底层实现依旧是数组\",{\"1\":{\"364\":1}}],[\"切片的底层数组的例子如下\",{\"1\":{\"539\":1}}],[\"切片的情况的实际上跟上面讲到的字符串差不多\",{\"1\":{\"539\":1}}],[\"切片的遍历与数组完全一致\",{\"1\":{\"369\":1}}],[\"切片的基本使用与数组完全一致\",{\"1\":{\"365\":1}}],[\"切片的初始化方式有以下几种\",{\"1\":{\"364\":1}}],[\"切片在数组容量不足时\",{\"1\":{\"1025\":1}}],[\"切片在拷贝时需要确保目标切片有足够的长度\",{\"1\":{\"368\":1}}],[\"切片在\",{\"1\":{\"363\":1}}],[\"切片在容量不够时会自行扩容\",{\"1\":{\"358\":1}}],[\"切片不可比较\",{\"1\":{\"332\":1}}],[\"切片\",{\"0\":{\"358\":1,\"363\":1,\"456\":1,\"539\":1},\"1\":{\"320\":1,\"321\":1,\"323\":1,\"355\":1,\"433\":2,\"460\":2,\"580\":1,\"728\":1,\"732\":1,\"927\":1,\"945\":1}}],[\"切片现在可以转换为数组指针类型\",{\"1\":{\"120\":1}}],[\"区块链\",{\"1\":{\"615\":1}}],[\"区别就是不会根据主键排序\",{\"1\":{\"870\":1}}],[\"区别在于mapaccessk函数会同时返回\",{\"1\":{\"1037\":1}}],[\"区别在于\",{\"1\":{\"751\":1}}],[\"区别在于后者会将非\",{\"1\":{\"696\":1}}],[\"区别在于前两者的测试数据都需要开发者手动编写\",{\"1\":{\"527\":1}}],[\"区别在于前者无序\",{\"1\":{\"381\":1}}],[\"区别只是切片可以动态变化长度\",{\"1\":{\"365\":1}}],[\"区别只是最后一种得到的值是指针\",{\"1\":{\"360\":1}}],[\"区间数字的代码\",{\"1\":{\"354\":1}}],[\"循环遍历链表\",{\"1\":{\"1168\":1}}],[\"循环中的if\",{\"1\":{\"1069\":1}}],[\"循环中使用\",{\"1\":{\"401\":1}}],[\"循环来收集scase数组不过这里省略掉了\",{\"1\":{\"1067\":1}}],[\"循环体\",{\"1\":{\"1055\":1}}],[\"循环体的\",{\"1\":{\"582\":1}}],[\"循环尝试在哈希桶和溢出桶中去查找\",{\"1\":{\"1038\":1}}],[\"循环的\",{\"1\":{\"588\":1}}],[\"循环内计数1\",{\"1\":{\"472\":1}}],[\"循环\",{\"0\":{\"401\":1},\"1\":{\"401\":1,\"588\":1}}],[\"循环控制\",{\"0\":{\"353\":1}}],[\"循环变量的引用问题\",{\"1\":{\"37\":1}}],[\"跳转到分支2\",{\"1\":{\"1067\":1}}],[\"跳转到分支3\",{\"1\":{\"1067\":1}}],[\"跳转到分支4\",{\"1\":{\"1067\":1}}],[\"跳转到default分支\",{\"1\":{\"1067\":1}}],[\"跳来跳去的很降低代码可读性\",{\"1\":{\"352\":1}}],[\"跳过regexp匹配的测试用例\",{\"1\":{\"519\":1}}],[\"跳过指定的\",{\"1\":{\"40\":1}}],[\"跳过指定的测试用例\",{\"1\":{\"38\":1}}],[\"跳过模块代理\",{\"1\":{\"7\":1}}],[\"缺点也相当明显\",{\"1\":{\"1111\":1}}],[\"缺点也很明显\",{\"1\":{\"10\":1}}],[\"缺点\",{\"1\":{\"1002\":1,\"1003\":1,\"1004\":1,\"1142\":1,\"1143\":1}}],[\"缺少格式化动词\",{\"1\":{\"341\":1}}],[\"码是否在字符串\",{\"1\":{\"706\":1}}],[\"码\",{\"1\":{\"341\":2,\"934\":1}}],[\"码对应的字符\",{\"1\":{\"341\":1}}],[\"任务调度等场景\",{\"1\":{\"1170\":1}}],[\"任意匹配的子串删除\",{\"1\":{\"718\":3}}],[\"任意\",{\"1\":{\"341\":5}}],[\"任何人在常规情况下都无法对其进行修改\",{\"1\":{\"1052\":1}}],[\"任何插入和更新操作失败后都会回滚\",{\"1\":{\"900\":1}}],[\"任何类型的指针都可以转换为unsafe\",{\"1\":{\"751\":1}}],[\"任何能够产生数据的操作都称其为pipeline\",{\"1\":{\"729\":1}}],[\"任何自定义类型都可以实现接口\",{\"1\":{\"567\":1}}],[\"任何内置的关键字冲突\",{\"1\":{\"298\":1}}],[\"任何实现了driver\",{\"1\":{\"231\":1}}],[\"积累到了一定阈值再输出到指定的writer中\",{\"1\":{\"340\":1}}],[\"输入的总数\",{\"1\":{\"527\":1}}],[\"输入\",{\"0\":{\"342\":1},\"1\":{\"559\":1}}],[\"输入输出\",{\"0\":{\"334\":1}}],[\"输出自定义格式\",{\"1\":{\"1007\":1}}],[\"输出纳秒\",{\"1\":{\"996\":1}}],[\"输出代码\",{\"1\":{\"899\":1}}],[\"输出代码的汇编形式\",{\"1\":{\"9\":1}}],[\"输出timeerror的时间\",{\"1\":{\"603\":1}}],[\"输出文件名\",{\"1\":{\"598\":1}}],[\"输出文件内容\",{\"1\":{\"26\":1}}],[\"输出错误信息\",{\"1\":{\"598\":1}}],[\"输出更详细的测试日志\",{\"1\":{\"519\":1}}],[\"输出模块依赖图\",{\"1\":{\"506\":1}}],[\"输出模块而不是输出包\",{\"1\":{\"20\":1}}],[\"输出都如下\",{\"1\":{\"472\":1}}],[\"输出方法个数\",{\"1\":{\"451\":2,\"452\":1}}],[\"输出第一个返回值的类型\",{\"1\":{\"445\":1}}],[\"输出第一个参数的类型\",{\"1\":{\"445\":1}}],[\"输出参数\",{\"1\":{\"445\":1}}],[\"输出函数名称\",{\"1\":{\"445\":1}}],[\"输出其名称\",{\"1\":{\"433\":1}}],[\"输出包路径\",{\"1\":{\"433\":1}}],[\"输出又变回\",{\"1\":{\"402\":1}}],[\"输出的结果就会变得非常有迷惑性\",{\"1\":{\"606\":1}}],[\"输出的是\",{\"1\":{\"402\":1}}],[\"输出的字符串两端有双引号\",{\"1\":{\"341\":1}}],[\"输出为\",{\"1\":{\"399\":1,\"417\":1,\"433\":1,\"568\":1,\"606\":3,\"736\":1,\"899\":1}}],[\"输出是字节而不是字符\",{\"1\":{\"375\":1}}],[\"输出如下\",{\"1\":{\"354\":1,\"368\":1,\"380\":1,\"401\":1,\"416\":2,\"417\":1,\"435\":1,\"442\":1,\"477\":2,\"478\":1,\"484\":1,\"486\":1,\"525\":1,\"550\":1,\"581\":1,\"627\":1,\"725\":2,\"949\":1}}],[\"输出指针所指向的地址\",{\"1\":{\"341\":1}}],[\"输出字符对应的\",{\"1\":{\"341\":1}}],[\"输出值对应的\",{\"1\":{\"341\":1}}],[\"输出值原本的形式\",{\"1\":{\"341\":1}}],[\"输出布尔值\",{\"1\":{\"341\":1}}],[\"输出完整\",{\"1\":{\"341\":1}}],[\"输出结构体\",{\"1\":{\"449\":2}}],[\"输出结构体字段的数量\",{\"1\":{\"448\":2}}],[\"输出结构体时将加上字段名\",{\"1\":{\"341\":1}}],[\"输出结果如下\",{\"1\":{\"533\":1}}],[\"输出结果为\",{\"1\":{\"370\":1,\"431\":1,\"434\":1,\"438\":1,\"995\":1}}],[\"输出结果\",{\"1\":{\"224\":1,\"432\":1,\"436\":1,\"470\":1,\"731\":1}}],[\"输出整型的大写十六进制表示\",{\"1\":{\"341\":1}}],[\"输出整型的完整大写十六进制表示\",{\"1\":{\"341\":1}}],[\"输出整型的完整小写十六进制表示\",{\"1\":{\"341\":1}}],[\"输出整型的完整八进制表示\",{\"1\":{\"341\":1}}],[\"输出整型的小写十六进制表示\",{\"1\":{\"341\":1}}],[\"输出整型的八进制表示\",{\"1\":{\"341\":1}}],[\"输出整型的二进制表现形式\",{\"1\":{\"341\":1}}],[\"输出二进制完整的表现形式\",{\"1\":{\"341\":1}}],[\"输出科学计数法形式\",{\"1\":{\"341\":1}}],[\"输出浮点数\",{\"1\":{\"341\":1}}],[\"输出十进制整型值\",{\"1\":{\"341\":1}}],[\"输出string\",{\"1\":{\"341\":1}}],[\"输出百分号\",{\"1\":{\"341\":1}}],[\"输出中的所有节点都属于\",{\"1\":{\"143\":1}}],[\"输出美观的命令行表格\",{\"1\":{\"64\":1}}],[\"输出处理的文件\",{\"1\":{\"40\":1}}],[\"输出每一个用例的测试结果\",{\"1\":{\"38\":1}}],[\"输出每一个依赖\",{\"1\":{\"28\":1}}],[\"输出\",{\"0\":{\"336\":1},\"1\":{\"34\":1,\"44\":2,\"202\":1,\"205\":2,\"207\":1,\"208\":1,\"209\":1,\"210\":1,\"212\":1,\"213\":1,\"214\":1,\"215\":1,\"225\":2,\"227\":2,\"229\":1,\"258\":1,\"341\":1,\"356\":2,\"357\":2,\"362\":3,\"372\":1,\"387\":1,\"399\":1,\"400\":1,\"411\":1,\"414\":2,\"437\":1,\"439\":1,\"440\":1,\"441\":2,\"443\":1,\"445\":1,\"446\":1,\"448\":2,\"449\":1,\"450\":1,\"451\":1,\"452\":1,\"455\":1,\"459\":1,\"460\":2,\"467\":2,\"486\":1,\"531\":2,\"534\":1,\"535\":1,\"536\":2,\"539\":2,\"540\":1,\"541\":2,\"542\":1,\"543\":2,\"551\":1,\"552\":1,\"553\":2,\"566\":1,\"567\":1,\"568\":1,\"578\":1,\"583\":1,\"585\":6,\"587\":4,\"603\":1,\"606\":1,\"607\":1,\"608\":1,\"619\":1,\"620\":1,\"622\":1,\"623\":1,\"628\":1,\"629\":1,\"713\":1,\"714\":1,\"715\":2,\"716\":1,\"717\":1,\"718\":1,\"719\":1,\"720\":1,\"721\":1,\"725\":1,\"727\":1,\"732\":1,\"733\":1,\"779\":1,\"780\":1,\"781\":1,\"782\":1,\"783\":1,\"784\":1,\"812\":3,\"813\":1,\"817\":1,\"942\":1,\"943\":1,\"944\":2,\"945\":2,\"946\":1,\"948\":1,\"950\":1,\"951\":1,\"952\":2,\"953\":1,\"977\":1,\"982\":1,\"985\":1,\"991\":1,\"993\":1,\"994\":1,\"996\":1,\"1008\":1,\"1070\":2}}],[\"输出执行过程\",{\"1\":{\"24\":1}}],[\"输出那些被删除的模块依赖\",{\"1\":{\"24\":1}}],[\"输出依赖图\",{\"1\":{\"22\":1}}],[\"输出被编译的包\",{\"1\":{\"18\":1}}],[\"输出发生变化的文件名\",{\"1\":{\"17\":1}}],[\"输出所有错误\",{\"1\":{\"17\":1}}],[\"输出格式化前后的文件差异\",{\"1\":{\"17\":1}}],[\"输出优化决策\",{\"1\":{\"9\":1}}],[\"输出编译的包\",{\"1\":{\"8\":1}}],[\"输出编译过程中的详细指令\",{\"1\":{\"8\":1}}],[\"输出源代码\",{\"1\":{\"4\":1}}],[\"块的颜色越深\",{\"1\":{\"560\":1}}],[\"块与块之间的变量相互独立\",{\"1\":{\"333\":1}}],[\"块现在必须加括号\",{\"1\":{\"138\":1}}],[\"布尔值\",{\"1\":{\"695\":1}}],[\"布尔值转字符串\",{\"0\":{\"695\":1}}],[\"布尔\",{\"1\":{\"332\":1,\"341\":1}}],[\"布尔类型的参数必须使用等号\",{\"1\":{\"634\":1}}],[\"布尔类型只有真值和假值\",{\"1\":{\"315\":1}}],[\"布尔类型\",{\"0\":{\"315\":1},\"1\":{\"321\":1}}],[\"交给发送方来做这件事\",{\"1\":{\"1062\":1}}],[\"交互时\",{\"1\":{\"803\":1}}],[\"交集\",{\"1\":{\"574\":2}}],[\"交换设备\",{\"0\":{\"920\":1}}],[\"交换内存\",{\"0\":{\"919\":1}}],[\"交换方法\",{\"1\":{\"683\":1,\"688\":1}}],[\"交换值\",{\"1\":{\"489\":2}}],[\"交换\",{\"0\":{\"331\":1}}],[\"交叉编译时默认禁用\",{\"1\":{\"136\":1}}],[\"交叉编译支持的语言非常多\",{\"1\":{\"11\":1}}],[\"交叉编译指的是可以在本地编译成其它系统的目标代码\",{\"1\":{\"11\":1}}],[\"交叉编译\",{\"0\":{\"11\":1},\"1\":{\"88\":1}}],[\"匿名导入生成的接口文档包\",{\"1\":{\"1011\":1}}],[\"匿名导入的包无法被使用\",{\"1\":{\"295\":1}}],[\"匿名结构体是不支持泛型的\",{\"1\":{\"573\":1}}],[\"匿名结构不支持泛型\",{\"1\":{\"573\":1}}],[\"匿名字段的名称默认为类型名\",{\"1\":{\"407\":1}}],[\"匿名函数不支持自定义泛型\",{\"1\":{\"573\":1}}],[\"匿名函数就是没有签名的函数\",{\"1\":{\"398\":1}}],[\"匿名函数\",{\"0\":{\"398\":1}}],[\"匿名\",{\"0\":{\"330\":1}}],[\"繁琐\",{\"1\":{\"326\":1,\"617\":1}}],[\"占了一行的位置\",{\"1\":{\"325\":1}}],[\"占用过多的性能从而影响用户程序的正常运行\",{\"1\":{\"1138\":1}}],[\"占用率过高而影响到用户程序\",{\"1\":{\"1131\":1}}],[\"占用了不少的内存\",{\"1\":{\"1043\":1}}],[\"占用的内存最多\",{\"1\":{\"1034\":1}}],[\"占用的内存就越大\",{\"1\":{\"1032\":1}}],[\"占用很小\",{\"1\":{\"1004\":1}}],[\"占用越高\",{\"1\":{\"560\":2}}],[\"占用\",{\"1\":{\"548\":1}}],[\"占用不同的端口\",{\"1\":{\"175\":1}}],[\"占用资源很低\",{\"1\":{\"142\":1}}],[\"括起来以提升可读性\",{\"1\":{\"324\":1}}],[\"括起来或者反引号\",{\"1\":{\"306\":1}}],[\"零垃圾\",{\"1\":{\"954\":1}}],[\"零值0也会被创建\",{\"1\":{\"891\":1}}],[\"零值为\",{\"1\":{\"845\":1}}],[\"零值或未初始化的\",{\"1\":{\"382\":1}}],[\"零值并不仅仅只是字面上的数字零\",{\"1\":{\"321\":1}}],[\"零值\",{\"0\":{\"321\":1},\"1\":{\"321\":1}}],[\"零内存分配的\",{\"1\":{\"54\":1}}],[\"键的类型必须是可比较的\",{\"1\":{\"572\":1}}],[\"键为字符串类型\",{\"1\":{\"320\":1}}],[\"键值是存放在一个连续的内存地址中\",{\"1\":{\"1030\":1}}],[\"键值数据库\",{\"1\":{\"614\":2}}],[\"键值对类型的字段\",{\"1\":{\"187\":1}}],[\"键值存储\",{\"1\":{\"139\":1,\"789\":1}}],[\"键值\",{\"0\":{\"1036\":1},\"1\":{\"63\":1,\"839\":1}}],[\"长期存在的对象分配到堆上\",{\"1\":{\"1130\":1}}],[\"长期持有其指针引用\",{\"1\":{\"539\":1}}],[\"长度大小等于hight\",{\"1\":{\"1020\":1}}],[\"长度是有限制的\",{\"1\":{\"866\":1}}],[\"长度方法\",{\"1\":{\"683\":1}}],[\"长度未知\",{\"0\":{\"553\":1}}],[\"长度范围内的元素完全相等\",{\"1\":{\"460\":1}}],[\"长度与容量不合法\",{\"1\":{\"1020\":1}}],[\"长度与容量\",{\"1\":{\"364\":1}}],[\"长度\",{\"0\":{\"377\":1},\"1\":{\"364\":1,\"1020\":1}}],[\"长度必须为一个常量表达式\",{\"1\":{\"360\":1}}],[\"长度被指定后就不能被改变\",{\"1\":{\"358\":1}}],[\"长度为0跳过\",{\"1\":{\"1053\":1}}],[\"长度为10\",{\"1\":{\"393\":1}}],[\"长度为\",{\"1\":{\"320\":1}}],[\"长时间运行的协程在发生函数调用时会被抢占\",{\"1\":{\"135\":1}}],[\"派生类型\",{\"0\":{\"320\":1}}],[\"浮点排序\",{\"0\":{\"685\":1}}],[\"浮点常量\",{\"0\":{\"652\":1}}],[\"浮点数赋值\",{\"1\":{\"727\":1}}],[\"浮点数转字符串\",{\"0\":{\"698\":1}}],[\"浮点数\",{\"0\":{\"538\":1}}],[\"浮点数字面量\",{\"0\":{\"302\":1}}],[\"浮点\",{\"1\":{\"341\":4}}],[\"浮点型\",{\"0\":{\"317\":1}}],[\"花括号省略\",{\"0\":{\"312\":1}}],[\"意识到这一问题的\",{\"1\":{\"1130\":1}}],[\"意思就是不能对nil接收者调用方法\",{\"1\":{\"1069\":1}}],[\"意思非常明确\",{\"1\":{\"469\":1}}],[\"意为哈希表迭代器\",{\"1\":{\"1037\":1}}],[\"意为原来的桶装不下了\",{\"1\":{\"1032\":1}}],[\"意为检测该函数的输出是不是\",{\"1\":{\"520\":1}}],[\"意义\",{\"1\":{\"763\":1}}],[\"意大利语\",{\"1\":{\"377\":1}}],[\"意味着优先进行运算\",{\"1\":{\"311\":1}}],[\"意在取代先前的指令\",{\"1\":{\"42\":1}}],[\"众所周知直接使用字符串进行+拼接性能是很低的\",{\"1\":{\"525\":1}}],[\"众所周知\",{\"1\":{\"311\":1,\"1063\":1}}],[\"平衡了性能和公平性\",{\"1\":{\"1153\":1}}],[\"平时在使用new函数创建指针时同样也会走入该函数\",{\"1\":{\"1123\":1}}],[\"平时在编写代码的时候也可以稍微注意一下\",{\"1\":{\"308\":1}}],[\"平时也会用另一个内置函数recover来捕获panic\",{\"1\":{\"1077\":1}}],[\"平常在开发时\",{\"1\":{\"904\":1}}],[\"平方根\",{\"0\":{\"667\":1}}],[\"平台上\",{\"1\":{\"1115\":2}}],[\"平台就是mingw\",{\"1\":{\"530\":1}}],[\"平台而言\",{\"1\":{\"90\":1}}],[\"平台\",{\"1\":{\"12\":2,\"116\":1}}],[\"平台下会将当前文件编译进去\",{\"1\":{\"12\":1}}],[\"跟其它的\",{\"1\":{\"1092\":1}}],[\"跟前面一样都是直接返回\",{\"1\":{\"1067\":1}}],[\"跟这个类似\",{\"1\":{\"1020\":1}}],[\"跟上图一样\",{\"1\":{\"543\":1}}],[\"跟\",{\"1\":{\"531\":1}}],[\"跟大多数语言类似\",{\"1\":{\"307\":1}}],[\"跟踪所有的协程\",{\"1\":{\"557\":1}}],[\"跟踪\",{\"1\":{\"146\":1}}],[\"今天天气不错\",{\"1\":{\"306\":1}}],[\"双倍容量\",{\"1\":{\"1025\":1}}],[\"双线链表的实现\",{\"1\":{\"616\":1}}],[\"双向管道可以转换为单向管道\",{\"1\":{\"469\":1}}],[\"双向管道指的是既可以写\",{\"1\":{\"469\":1}}],[\"双向流式的处理逻辑无论是客户端还是服务端\",{\"1\":{\"159\":1}}],[\"双向流式\",{\"0\":{\"159\":1},\"1\":{\"159\":1,\"196\":1}}],[\"双向流和集成授权\",{\"1\":{\"147\":1}}],[\"双引号表示\",{\"1\":{\"374\":1}}],[\"双引号转义\",{\"1\":{\"305\":1}}],[\"双循环打印九九乘法表\",{\"1\":{\"354\":1}}],[\"纵向制表符号\",{\"1\":{\"305\":1}}],[\"横向制表符号\",{\"1\":{\"305\":1}}],[\"换句话说就是一个字节数组\",{\"1\":{\"1052\":1}}],[\"换成一个\",{\"1\":{\"441\":1}}],[\"换行\",{\"1\":{\"374\":4}}],[\"换行也被当作空格\",{\"1\":{\"344\":1}}],[\"换行符号\",{\"1\":{\"305\":1}}],[\"换页符号\",{\"1\":{\"305\":1}}],[\"响铃符号\",{\"1\":{\"305\":1}}],[\"响应体也是需要自己手动处理的\",{\"1\":{\"210\":1}}],[\"响应数据\",{\"1\":{\"166\":1}}],[\"响应\",{\"0\":{\"1013\":1},\"1\":{\"151\":1,\"971\":1}}],[\"响应查询\",{\"1\":{\"142\":1}}],[\"响应示例\",{\"1\":{\"106\":1,\"107\":1,\"108\":1,\"109\":1,\"110\":1,\"111\":1,\"112\":1}}],[\"ä\",{\"1\":{\"304\":1,\"380\":1}}],[\"^uintptr\",{\"1\":{\"1147\":1}}],[\"^uint\",{\"1\":{\"651\":1}}],[\"^~~~~~~~~~~~~~~\",{\"1\":{\"533\":1}}],[\"^$\",{\"1\":{\"518\":1}}],[\"^=\",{\"1\":{\"299\":1,\"1038\":2,\"1042\":1,\"1153\":1}}],[\"^\",{\"1\":{\"299\":2,\"1033\":3,\"1042\":1,\"1102\":1,\"1117\":1}}],[\"运算符查看更多细节\",{\"1\":{\"299\":1}}],[\"运算符\",{\"0\":{\"299\":1}}],[\"运行上面这段代码\",{\"1\":{\"1077\":1}}],[\"运行程序\",{\"1\":{\"1011\":1}}],[\"运行全局更新\",{\"1\":{\"852\":1}}],[\"运行容器\",{\"1\":{\"800\":1}}],[\"运行的输入总数\",{\"1\":{\"527\":1}}],[\"运行测试\",{\"1\":{\"519\":1}}],[\"运行命令行程序\",{\"1\":{\"497\":1}}],[\"运行查看\",{\"1\":{\"143\":1}}],[\"运行好后\",{\"1\":{\"143\":1}}],[\"运行如下命令\",{\"1\":{\"143\":3,\"513\":1}}],[\"运行\",{\"0\":{\"155\":1},\"1\":{\"141\":1,\"145\":1,\"153\":1}}],[\"运行时自身所需要的堆内存\",{\"1\":{\"1129\":1}}],[\"运行时对用户暴露了一个函数readmemstats\",{\"1\":{\"1128\":1}}],[\"运行时的虚拟内存空间\",{\"1\":{\"1115\":1}}],[\"运行时的第一轮调度循环\",{\"1\":{\"1089\":1}}],[\"运行时的makeslice函数只负责分配内存\",{\"1\":{\"1020\":1}}],[\"运行时也只有close函数会主动将该字段设置为false\",{\"1\":{\"1067\":1}}],[\"运行时只有一个runtime\",{\"1\":{\"1064\":1}}],[\"运行时操作包\",{\"1\":{\"616\":1}}],[\"运行时和编译器完全由\",{\"1\":{\"132\":1}}],[\"运行时采用稀疏堆布局\",{\"1\":{\"126\":1}}],[\"运行时将更积极的向操作系统释放申请的内存\",{\"1\":{\"125\":1}}],[\"运行时现在会根据协程栈的平均使用情况来选择一个合适的大小为其初始化栈空间内存\",{\"1\":{\"118\":1}}],[\"运行指定的\",{\"1\":{\"40\":1}}],[\"运行指定的测试用例\",{\"1\":{\"38\":1}}],[\"运行指定的go工具\",{\"1\":{\"2\":1}}],[\"运行后就会输出\",{\"1\":{\"10\":1}}],[\"命名\",{\"1\":{\"942\":1}}],[\"命名参数示例\",{\"1\":{\"968\":1}}],[\"命名参数\",{\"0\":{\"956\":1},\"1\":{\"849\":1}}],[\"命名可以为unit\",{\"1\":{\"521\":1}}],[\"命名规则如下\",{\"1\":{\"298\":1}}],[\"命令嵌入的到\",{\"1\":{\"1016\":1}}],[\"命令安装\",{\"1\":{\"905\":1}}],[\"命令中开启了详细日志和内存分析\",{\"1\":{\"525\":1}}],[\"命令首先会将依赖包下载到本地的缓存目录中\",{\"1\":{\"510\":1}}],[\"命令如下\",{\"1\":{\"503\":1}}],[\"命令手册\",{\"1\":{\"244\":1}}],[\"命令怎么用\",{\"1\":{\"244\":1}}],[\"命令和方法名一一对应\",{\"1\":{\"244\":1}}],[\"命令用于遥测数据管理\",{\"1\":{\"114\":1}}],[\"命令参数解析器\",{\"1\":{\"64\":1}}],[\"命令vet是一个\",{\"1\":{\"37\":1}}],[\"命令实际上都是它们的别名\",{\"1\":{\"14\":1}}],[\"命令的包\",{\"1\":{\"4\":1}}],[\"命令行标记标记\",{\"1\":{\"789\":1}}],[\"命令行参数解析包\",{\"1\":{\"616\":1}}],[\"命令行工具\",{\"0\":{\"615\":1},\"1\":{\"1010\":1}}],[\"命令行或网页\",{\"1\":{\"558\":1}}],[\"命令行用的是gitbash\",{\"1\":{\"529\":1}}],[\"命令行程序的文件存放在cmd\",{\"1\":{\"496\":1}}],[\"命令行\",{\"0\":{\"2\":1,\"64\":1,\"559\":1}}],[\"命令\",{\"0\":{\"1\":1,\"514\":1},\"1\":{\"3\":2,\"7\":2,\"8\":1,\"31\":1,\"40\":1,\"143\":1,\"244\":1,\"493\":1,\"506\":1,\"514\":1}}],[\"公钥解密\",{\"1\":{\"785\":1}}],[\"公钥则有业务服务持有\",{\"1\":{\"785\":1}}],[\"公司\",{\"1\":{\"567\":1}}],[\"公司开源的一款服务发现与注册工具\",{\"1\":{\"139\":1}}],[\"公共校验的模块路径前缀的通用模式列表\",{\"1\":{\"511\":1}}],[\"公有\",{\"1\":{\"294\":1}}],[\"词法结构\",{\"1\":{\"289\":1}}],[\"参见mheap\",{\"1\":{\"1115\":1}}],[\"参考浮点数精度\",{\"1\":{\"700\":1}}],[\"参考浮点数格式化类型\",{\"1\":{\"700\":1}}],[\"参考手册的内容永远会随着版本的变化而变化\",{\"1\":{\"289\":1}}],[\"参考手册的重要性不言而喻\",{\"1\":{\"289\":1}}],[\"参考手册\",{\"0\":{\"289\":1}}],[\"参数的拷贝不再由newproc1函数完成\",{\"1\":{\"1095\":1}}],[\"参数的简单解释\",{\"1\":{\"1025\":1}}],[\"参数类型也可以是你自己的类型\",{\"1\":{\"1012\":1}}],[\"参数类型约束\",{\"1\":{\"119\":1}}],[\"参数时\",{\"1\":{\"974\":1}}],[\"参数解析\",{\"0\":{\"967\":1}}],[\"参数可以有多个\",{\"1\":{\"952\":1}}],[\"参数可以是一个指定的包名\",{\"1\":{\"20\":1}}],[\"参数匹配符号\",{\"1\":{\"938\":1}}],[\"参数预计算\",{\"0\":{\"402\":1}}],[\"参数列表\",{\"1\":{\"395\":2}}],[\"参数列表数量\",{\"1\":{\"341\":2}}],[\"参数不合法\",{\"1\":{\"168\":1}}],[\"参数传入的\",{\"1\":{\"163\":1}}],[\"参数\",{\"0\":{\"396\":1,\"725\":1,\"969\":1,\"1012\":1},\"1\":{\"143\":3,\"519\":1,\"969\":1,\"1002\":1,\"1016\":1}}],[\"参数释义\",{\"1\":{\"141\":1}}],[\"参数会以\",{\"1\":{\"112\":1}}],[\"参数有如下\",{\"1\":{\"34\":1}}],[\"少数支持中文\",{\"1\":{\"286\":1}}],[\"风格\",{\"0\":{\"308\":1},\"1\":{\"954\":1}}],[\"风格建议\",{\"1\":{\"286\":1}}],[\"风格的搜索和数据分析引擎\",{\"1\":{\"203\":1}}],[\"风格的模板引擎\",{\"1\":{\"60\":1}}],[\"风格的数据处理库\",{\"1\":{\"58\":1}}],[\"风格的\",{\"1\":{\"51\":1}}],[\"订阅指定频道\",{\"1\":{\"284\":1}}],[\"杀死当前正在运行的脚本\",{\"1\":{\"283\":1}}],[\"元素包含指针\",{\"1\":{\"1058\":1}}],[\"元素不包含指针\",{\"1\":{\"1058\":1}}],[\"元素溢出到这个新桶里来了\",{\"1\":{\"1032\":1}}],[\"元素本身就是空的\",{\"1\":{\"1030\":1}}],[\"元素类型\",{\"1\":{\"1020\":1,\"1025\":1}}],[\"元素必须包含字符a\",{\"1\":{\"944\":1}}],[\"元素是可比较类型的数组\",{\"1\":{\"332\":1}}],[\"元素排名\",{\"0\":{\"279\":1}}],[\"元编程\",{\"1\":{\"88\":1}}],[\"加入了基于信号的抢占式调度策略\",{\"1\":{\"1107\":1}}],[\"加入缓冲区\",{\"1\":{\"1059\":1}}],[\"加入元素\",{\"0\":{\"278\":1}}],[\"加一\",{\"1\":{\"1042\":1}}],[\"加法\",{\"1\":{\"845\":1}}],[\"加载静态文件\",{\"1\":{\"999\":1}}],[\"加载静态文件目录\",{\"1\":{\"999\":2}}],[\"加载某一个静态文件\",{\"1\":{\"999\":1}}],[\"加载某一个fs\",{\"1\":{\"999\":1}}],[\"加载某一静态文件夹\",{\"1\":{\"999\":1}}],[\"加载html文件\",{\"1\":{\"980\":1}}],[\"加载\",{\"1\":{\"489\":1}}],[\"加载值\",{\"1\":{\"489\":1}}],[\"加载脚本\",{\"1\":{\"283\":1}}],[\"加写锁\",{\"1\":{\"481\":1}}],[\"加读锁\",{\"1\":{\"481\":1}}],[\"加锁后\",{\"1\":{\"1168\":1}}],[\"加锁的流程就结束了\",{\"1\":{\"1153\":1}}],[\"加锁顺序跟上图一样\",{\"1\":{\"1067\":1}}],[\"加锁是希望数据不会被其他协程修改\",{\"1\":{\"479\":1}}],[\"加锁只需要lock\",{\"1\":{\"479\":1}}],[\"加锁\",{\"1\":{\"467\":2,\"480\":2,\"484\":1,\"1169\":1}}],[\"加上枚举类型名就可以访问\",{\"1\":{\"542\":1}}],[\"加上名称就可以访问\",{\"1\":{\"541\":1}}],[\"加上\",{\"1\":{\"7\":1,\"30\":1,\"38\":1}}],[\"弹出并删除n给元素\",{\"1\":{\"273\":1}}],[\"弹出并删除该元素\",{\"1\":{\"273\":1}}],[\"往go\",{\"1\":{\"514\":1}}],[\"往有序集合中加入元素\",{\"1\":{\"278\":1}}],[\"往一个集合里面添加元素\",{\"1\":{\"270\":1}}],[\"往后不再记录每周快照版本\",{\"1\":{\"138\":1}}],[\"集合操作\",{\"0\":{\"272\":1}}],[\"集合\",{\"0\":{\"269\":1}}],[\"集群无法正常工作\",{\"1\":{\"143\":1}}],[\"集群搭建示例\",{\"0\":{\"143\":1}}],[\"集群中\",{\"1\":{\"142\":1}}],[\"集群中处于该模式的\",{\"1\":{\"141\":1}}],[\"集群被称为一个数据中心\",{\"1\":{\"142\":1}}],[\"集群就构成了一个数据中心\",{\"1\":{\"142\":1}}],[\"集群的示意图\",{\"1\":{\"142\":1}}],[\"集群不会开始选举投票\",{\"1\":{\"141\":1}}],[\"右边弹出元素\",{\"1\":{\"267\":1}}],[\"右边添加\",{\"1\":{\"265\":1}}],[\"右键菜单\",{\"1\":{\"94\":1}}],[\"左边弹出元素\",{\"1\":{\"267\":1}}],[\"左边添加\",{\"1\":{\"265\":1}}],[\"左右\",{\"1\":{\"8\":1,\"10\":1,\"117\":1,\"900\":1}}],[\"遍历链表\",{\"1\":{\"1169\":1}}],[\"遍历堆中的所有对象\",{\"1\":{\"1134\":1}}],[\"遍历完成后就得到了一个元素被打乱了的pollorder数组\",{\"1\":{\"1067\":1}}],[\"遍历完了就退出循环\",{\"1\":{\"1038\":1}}],[\"遍历字符串一般会使用for\",{\"1\":{\"1055\":1}}],[\"遍历操作对应着range方法\",{\"1\":{\"1049\":1}}],[\"遍历桶中的每一个键值对\",{\"1\":{\"1042\":1}}],[\"遍历桶内的tophash数组\",{\"1\":{\"1038\":1}}],[\"遍历每一个桶以及溢出桶\",{\"1\":{\"1040\":1}}],[\"遍历溢出桶链表\",{\"1\":{\"1038\":1,\"1042\":1}}],[\"遍历期间\",{\"1\":{\"1037\":1}}],[\"遍历结束\",{\"1\":{\"1037\":1}}],[\"遍历bmap链表\",{\"1\":{\"1036\":1}}],[\"遍历文件列表\",{\"1\":{\"985\":1}}],[\"遍历替换字符串\",{\"0\":{\"713\":1}}],[\"遍历map\",{\"1\":{\"486\":2,\"1035\":1}}],[\"遍历map中的键值对\",{\"1\":{\"263\":1}}],[\"遍历赋值\",{\"1\":{\"456\":1}}],[\"遍历输出返回值\",{\"1\":{\"452\":1}}],[\"遍历输出方法信息\",{\"1\":{\"451\":2,\"452\":1}}],[\"遍历集合\",{\"1\":{\"276\":1}}],[\"遍历\",{\"0\":{\"276\":1,\"369\":1,\"380\":1,\"386\":1,\"1028\":1,\"1037\":1,\"1049\":1,\"1055\":1},\"1\":{\"1037\":1}}],[\"遍历哈希表的键值对\",{\"0\":{\"263\":1}}],[\"批量删除的话就是传入切片\",{\"1\":{\"888\":1}}],[\"批量查询最常用的是find方法\",{\"1\":{\"873\":1}}],[\"批量创建的size\",{\"1\":{\"852\":1}}],[\"批量插入\",{\"1\":{\"849\":1}}],[\"批量声明常量可以用\",{\"1\":{\"324\":1}}],[\"批量访问\",{\"1\":{\"258\":1}}],[\"批量设置\",{\"1\":{\"258\":1}}],[\"批量存取\",{\"0\":{\"255\":1}}],[\"读者协程获取信号量\",{\"1\":{\"1155\":1}}],[\"读者协程释放信号量\",{\"1\":{\"1155\":1}}],[\"读信号量\",{\"1\":{\"1155\":1}}],[\"读读共享\",{\"1\":{\"1149\":1,\"1155\":1}}],[\"读读互斥\",{\"1\":{\"1149\":1}}],[\"读屏障的开销有很多不确定性\",{\"1\":{\"1130\":1}}],[\"读屏障并发复制\",{\"1\":{\"1130\":1}}],[\"读管道\",{\"1\":{\"1067\":1}}],[\"读方案的话可以考虑\",{\"1\":{\"1062\":1}}],[\"读多写少\",{\"1\":{\"481\":1,\"482\":1}}],[\"读\",{\"0\":{\"1046\":1},\"1\":{\"468\":1}}],[\"读协程读取数据时\",{\"1\":{\"482\":1}}],[\"读协程可以正常获得读锁\",{\"1\":{\"481\":1}}],[\"读协程也执行结束\",{\"1\":{\"467\":1}}],[\"读协程执行完毕\",{\"1\":{\"467\":1}}],[\"读一个\",{\"1\":{\"467\":1}}],[\"读写互斥\",{\"1\":{\"1149\":2}}],[\"读写互斥锁rwmutex的类型定义位于sync\",{\"1\":{\"1155\":1}}],[\"读写互斥锁内部实现依旧是互斥锁\",{\"1\":{\"481\":1}}],[\"读写互斥锁\",{\"1\":{\"462\":1}}],[\"读写性能下降\",{\"1\":{\"1042\":1}}],[\"读写分离\",{\"1\":{\"849\":1}}],[\"读写锁大致的原理就是\",{\"1\":{\"1155\":1}}],[\"读写锁\",{\"0\":{\"481\":1},\"1\":{\"1149\":1}}],[\"读写无缓冲管道\",{\"1\":{\"468\":1}}],[\"读写\",{\"0\":{\"465\":1},\"1\":{\"415\":1,\"416\":1}}],[\"读写操作\",{\"0\":{\"258\":1}}],[\"读操作对应map\",{\"1\":{\"1046\":1}}],[\"读操作\",{\"1\":{\"389\":1}}],[\"读取高32位和低32位\",{\"1\":{\"1178\":1}}],[\"读取管道\",{\"1\":{\"1067\":2}}],[\"读取管道且有发送方正在等待发送\",{\"1\":{\"1067\":1}}],[\"读取配置使用viper\",{\"1\":{\"840\":1}}],[\"读取配置\",{\"1\":{\"791\":1}}],[\"读取配置文件的一个示例\",{\"1\":{\"791\":1}}],[\"读取配置文件\",{\"0\":{\"791\":1}}],[\"读取名为config的配置文件\",{\"1\":{\"791\":1}}],[\"读取顺序\",{\"0\":{\"789\":1}}],[\"读取或存入\",{\"1\":{\"486\":1}}],[\"读取并删除\",{\"1\":{\"486\":1}}],[\"读取空缓冲区的管道\",{\"1\":{\"468\":1}}],[\"读取空的管道和写入已满的管道都会造成阻塞\",{\"1\":{\"467\":1}}],[\"读取完毕\",{\"1\":{\"467\":2}}],[\"读取有缓冲管道时\",{\"1\":{\"467\":1}}],[\"读取数据时也是同理\",{\"1\":{\"466\":1}}],[\"读取数据\",{\"1\":{\"465\":1,\"466\":2,\"467\":1,\"468\":1,\"486\":1}}],[\"读取\",{\"0\":{\"417\":1,\"424\":1},\"1\":{\"467\":11,\"975\":1}}],[\"读取固定长度的数组\",{\"1\":{\"344\":1}}],[\"读取两个数字\",{\"1\":{\"344\":1}}],[\"读取输入内容\",{\"1\":{\"343\":1}}],[\"读取值\",{\"1\":{\"241\":1}}],[\"哈希桶的起始位置选取是随机的\",{\"1\":{\"1037\":1}}],[\"哈希桶与溢出桶其实是在同一块连续的内存中\",{\"1\":{\"1034\":1}}],[\"哈希桶会有一个指针指向新的溢出桶\",{\"1\":{\"1032\":1}}],[\"哈希计算方法并不是基于类型\",{\"1\":{\"1033\":1}}],[\"哈希\",{\"0\":{\"1031\":1}}],[\"哈希值\",{\"1\":{\"510\":1}}],[\"哈希表查找的时间复杂度主要取决于哈希值的计算时间和遍历的时间\",{\"1\":{\"1042\":1}}],[\"哈希表\",{\"0\":{\"257\":1},\"1\":{\"381\":1}}],[\"哈希种子\",{\"1\":{\"44\":1,\"1030\":1}}],[\"取决于哪个协程最先到达\",{\"1\":{\"1171\":1}}],[\"取决于两个切片的长度最小值\",{\"1\":{\"1026\":1}}],[\"取决于注册对应tag的模板有多少个占位符\",{\"1\":{\"952\":1}}],[\"取决于文件数量\",{\"1\":{\"8\":1}}],[\"取反运算\",{\"1\":{\"728\":1}}],[\"取整\",{\"0\":{\"660\":1}}],[\"取其中一条数据如下\",{\"1\":{\"526\":1}}],[\"取消的流程除了要额外的关闭timer之外\",{\"1\":{\"478\":1}}],[\"取消过期时间\",{\"0\":{\"248\":1},\"1\":{\"248\":1}}],[\"过多\",{\"1\":{\"1042\":1}}],[\"过滤元素\",{\"1\":{\"587\":1}}],[\"过滤条件\",{\"1\":{\"224\":1,\"225\":2}}],[\"过了一段时间\",{\"1\":{\"567\":1}}],[\"过程是异步的\",{\"1\":{\"1147\":1}}],[\"过程中用到了自旋等待和信号量阻塞等待两种方式\",{\"1\":{\"1153\":1}}],[\"过程中涉及不同操作系统的系统调用\",{\"1\":{\"904\":1}}],[\"过程中不涉及内存拷贝\",{\"1\":{\"756\":1}}],[\"过程中不会涉及到内存拷贝\",{\"1\":{\"754\":1}}],[\"过程中的类型变化如下\",{\"1\":{\"751\":1}}],[\"过程中会一直占用cpu时间片\",{\"1\":{\"1153\":1}}],[\"过程中会跳过管道为nil的\",{\"1\":{\"1067\":1}}],[\"过程中会将计算得到的内存向上取整为\",{\"1\":{\"1025\":1}}],[\"过程中会下载很多的依赖\",{\"1\":{\"503\":1}}],[\"过程中会导致其他协程阻塞\",{\"1\":{\"490\":1}}],[\"过程与访问函数信息一致\",{\"1\":{\"451\":1}}],[\"过大的缓冲区就不用放回对象池\",{\"1\":{\"485\":1}}],[\"过期时间\",{\"0\":{\"247\":1},\"1\":{\"773\":1}}],[\"空闲的\",{\"1\":{\"1088\":1}}],[\"空闲连接\",{\"1\":{\"242\":1}}],[\"空集就是没有交集\",{\"1\":{\"574\":1}}],[\"空集\",{\"1\":{\"574\":1}}],[\"空接口类型可以代表所有的类型\",{\"1\":{\"596\":1}}],[\"空接口是所有类型集的集合\",{\"1\":{\"574\":1}}],[\"空接口与空集并不同\",{\"1\":{\"574\":1}}],[\"空接口\",{\"0\":{\"568\":1},\"1\":{\"574\":1}}],[\"空接口就是连接\",{\"1\":{\"429\":1}}],[\"空间不足\",{\"0\":{\"552\":1}}],[\"空结构体的使用场景有很多\",{\"1\":{\"411\":1}}],[\"空结构体没有字段\",{\"1\":{\"411\":1}}],[\"空结构体\",{\"0\":{\"411\":1}}],[\"空格进行对齐\",{\"1\":{\"17\":1}}],[\"空格表示\",{\"1\":{\"12\":1}}],[\"序号\",{\"1\":{\"316\":1}}],[\"序号从0开始\",{\"1\":{\"242\":1}}],[\"序列化成\",{\"1\":{\"952\":1}}],[\"序列化时默认是没有任何缩进的\",{\"1\":{\"627\":1}}],[\"序列化库\",{\"1\":{\"63\":4}}],[\"序列化\",{\"0\":{\"63\":1,\"619\":1,\"622\":1,\"625\":1,\"798\":1},\"1\":{\"621\":1,\"629\":1,\"845\":2}}],[\"事先声明了一个常量dataoffset\",{\"1\":{\"1030\":1}}],[\"事先拷贝了一份结构体hs\",{\"1\":{\"1028\":1}}],[\"事务\",{\"0\":{\"238\":1,\"900\":1},\"1\":{\"849\":1}}],[\"事实上一个个写代码注册非常的繁琐\",{\"1\":{\"953\":1}}],[\"事实上当初\",{\"1\":{\"579\":1}}],[\"事实上第一种函数读取的文件仅仅只是只读的\",{\"1\":{\"416\":1}}],[\"事实上\",{\"1\":{\"143\":1,\"187\":1}}],[\"赵六\",{\"1\":{\"236\":1}}],[\"广州市\",{\"1\":{\"235\":1}}],[\"广域网通信地址\",{\"1\":{\"141\":1}}],[\"李四\",{\"1\":{\"235\":1,\"636\":2}}],[\"王五\",{\"1\":{\"233\":1}}],[\"北京市\",{\"1\":{\"233\":1}}],[\"张三\",{\"1\":{\"233\":1,\"633\":2,\"636\":3}}],[\"知识这里不会做过多的赘述\",{\"1\":{\"230\":1}}],[\"聚合操作会用到mongo\",{\"1\":{\"229\":1}}],[\"聚合\",{\"0\":{\"229\":1}}],[\"插队的后面去\",{\"1\":{\"1151\":1}}],[\"插槽的效果\",{\"1\":{\"735\":1}}],[\"插槽\",{\"0\":{\"735\":1}}],[\"插入写屏障起始时不需要\",{\"1\":{\"1144\":1}}],[\"插入写屏障会拦截此操作\",{\"1\":{\"1142\":1}}],[\"插入写屏障由\",{\"1\":{\"1142\":1}}],[\"插入写屏障\",{\"0\":{\"1142\":1}}],[\"插入的过程在编译期完成\",{\"1\":{\"1106\":1}}],[\"插入元素\",{\"0\":{\"366\":1},\"1\":{\"366\":1}}],[\"插入如下数据\",{\"1\":{\"223\":1}}],[\"插件\",{\"1\":{\"201\":1}}],[\"插件驱动\",{\"1\":{\"70\":1}}],[\"早期\",{\"1\":{\"332\":1}}],[\"早期有些社区维护的库\",{\"1\":{\"219\":1}}],[\"早一年\",{\"1\":{\"88\":1}}],[\"松散的结构可以存储不同类型的数据\",{\"1\":{\"218\":1}}],[\"把内存分配控制的这么细\",{\"1\":{\"553\":1}}],[\"把动态库放到exe的同级目录下\",{\"1\":{\"545\":1}}],[\"把\",{\"1\":{\"217\":1}}],[\"匹配定义部分为\",{\"1\":{\"762\":1}}],[\"匹配\",{\"0\":{\"762\":1},\"1\":{\"759\":1}}],[\"匹配的子串删除\",{\"1\":{\"718\":2}}],[\"匹配的库将不会通过\",{\"1\":{\"7\":1}}],[\"匹配某一字段\",{\"1\":{\"216\":1}}],[\"查找的时间复杂度基本上跟\",{\"1\":{\"1042\":1}}],[\"查找的时间复杂度才能称为\",{\"1\":{\"1042\":1}}],[\"查找的逻辑跟前面的操作是几乎完全一致的\",{\"1\":{\"1039\":1}}],[\"查找的逻辑与mapaccess完全一致\",{\"1\":{\"1038\":1}}],[\"查找时也会忽略大小写进行正确的重定向\",{\"1\":{\"954\":1}}],[\"查找关联\",{\"0\":{\"896\":1}}],[\"查询的结果可以收集到一个指定类型的切片中\",{\"1\":{\"871\":1}}],[\"查询后触发\",{\"1\":{\"861\":1}}],[\"查询记录值\",{\"1\":{\"681\":1}}],[\"查询记录的\",{\"1\":{\"510\":1}}],[\"查询该依赖包的哈希值\",{\"1\":{\"510\":1}}],[\"查询类型\",{\"0\":{\"251\":1}}],[\"查询过期时间\",{\"0\":{\"249\":1}}],[\"查询一个是get\",{\"1\":{\"234\":1}}],[\"查询\",{\"0\":{\"234\":1,\"868\":1},\"1\":{\"234\":1,\"681\":1,\"861\":1}}],[\"查询多个\",{\"0\":{\"225\":1}}],[\"查询单个\",{\"0\":{\"224\":1}}],[\"查询文档\",{\"0\":{\"223\":1}}],[\"查询所有文档\",{\"1\":{\"216\":1}}],[\"查看其汇编形式\",{\"1\":{\"1067\":1}}],[\"查看源代码\",{\"1\":{\"560\":1}}],[\"查看订阅状态\",{\"1\":{\"284\":1}}],[\"查看服务状态\",{\"1\":{\"205\":1}}],[\"查看更多\",{\"1\":{\"194\":1}}],[\"查看指定\",{\"1\":{\"111\":1}}],[\"查看指定包的所有文档\",{\"1\":{\"4\":1}}],[\"查看\",{\"1\":{\"110\":1,\"144\":2,\"168\":1,\"770\":1,\"862\":2,\"992\":1}}],[\"查看模块\",{\"1\":{\"21\":1}}],[\"查看所有包\",{\"1\":{\"21\":1}}],[\"查看所有支持的值\",{\"1\":{\"7\":2}}],[\"查看文件变更\",{\"1\":{\"17\":1}}],[\"查看私有的类型\",{\"1\":{\"4\":1}}],[\"查看go环境变量信息\",{\"1\":{\"2\":1}}],[\"搜索\",{\"0\":{\"216\":1},\"1\":{\"216\":1}}],[\"索引\",{\"0\":{\"206\":1,\"859\":1},\"1\":{\"448\":1,\"451\":1,\"849\":1,\"862\":1,\"863\":2}}],[\"证书\",{\"1\":{\"205\":1}}],[\"冒号\",{\"1\":{\"201\":1}}],[\"感觉好像就是提供几个构造器\",{\"1\":{\"823\":1}}],[\"感觉好像没什么区别\",{\"1\":{\"201\":1}}],[\"感兴趣的话可以去看看生成的中间代码\",{\"1\":{\"1020\":1}}],[\"感兴趣的可以看看这个视频understanding\",{\"1\":{\"1071\":1}}],[\"感兴趣的可以自己去了解\",{\"1\":{\"1055\":1}}],[\"感兴趣的可以自行了解\",{\"1\":{\"620\":1}}],[\"感兴趣的可以了解\",{\"1\":{\"957\":1}}],[\"感兴趣可以前往go\",{\"1\":{\"1132\":1}}],[\"感兴趣可以前往toml\",{\"1\":{\"617\":1}}],[\"感兴趣可以到下面这两个包阅读相关代码\",{\"1\":{\"1061\":1}}],[\"感兴趣可以去runtime\",{\"1\":{\"1026\":1,\"1027\":1}}],[\"感兴趣可以去看看这里的源码实现\",{\"1\":{\"711\":1}}],[\"感兴趣可以了解\",{\"1\":{\"786\":1}}],[\"感兴趣可以在\",{\"1\":{\"615\":1}}],[\"感兴趣可以看看\",{\"1\":{\"598\":1}}],[\"感兴趣可以自己去了解\",{\"1\":{\"1153\":1}}],[\"感兴趣可以自己去了解下\",{\"1\":{\"1028\":1}}],[\"感兴趣可以自己去搜索\",{\"1\":{\"200\":1}}],[\"感兴趣可以自己去官网了解\",{\"1\":{\"137\":1}}],[\"感兴趣可以自己了解\",{\"1\":{\"7\":1}}],[\"幸运的是\",{\"1\":{\"201\":1,\"462\":1}}],[\"扫描时不需要\",{\"1\":{\"1142\":1}}],[\"扫描任务来偿还积分\",{\"1\":{\"1139\":1}}],[\"扫描工作才会停止\",{\"1\":{\"1137\":1}}],[\"扫描阶段时\",{\"1\":{\"1137\":1}}],[\"扫描阶段\",{\"1\":{\"1130\":1}}],[\"扫描为模型字段注释\",{\"1\":{\"1014\":1}}],[\"扫描到\",{\"1\":{\"1012\":1,\"1014\":1}}],[\"扫描从os\",{\"1\":{\"344\":1}}],[\"扫描\",{\"0\":{\"252\":1}}],[\"扫描路径\",{\"1\":{\"201\":1}}],[\"扫描并输出源代码中可能存在的问题\",{\"1\":{\"2\":1}}],[\"假如程序中同时存在成百上千个协程栈\",{\"1\":{\"1142\":1}}],[\"假如这些函数调用的频率非常高\",{\"1\":{\"1103\":1}}],[\"假如没有找到的话\",{\"1\":{\"1097\":1}}],[\"假如\",{\"1\":{\"1043\":1}}],[\"假如现在有如下代码\",{\"1\":{\"1021\":1}}],[\"假如接口认证用的是\",{\"1\":{\"1015\":1}}],[\"假如所有的记录都不存在\",{\"1\":{\"895\":1}}],[\"假如你的实体模型使用了软删除\",{\"1\":{\"889\":1}}],[\"假如禁用了\",{\"1\":{\"510\":1}}],[\"假如还需要生成\",{\"1\":{\"200\":1}}],[\"假设对象\",{\"1\":{\"1144\":1}}],[\"假设当前处理器\",{\"1\":{\"1138\":1}}],[\"假设函数的返回值是一个接口类型\",{\"1\":{\"1070\":1}}],[\"假设\",{\"1\":{\"1067\":1}}],[\"假设按照pollorder随机顺序加锁\",{\"1\":{\"1067\":1}}],[\"假设它返回true确实可以代表管道已经关闭了\",{\"1\":{\"1062\":1}}],[\"假设项目的目录如下\",{\"1\":{\"999\":1}}],[\"假设我们有以上四个接口\",{\"1\":{\"988\":1}}],[\"假设通过hs256算法创建并签名生成了一个token\",{\"1\":{\"782\":1,\"783\":1}}],[\"假设t2不大于t1并且两者内存布局等效\",{\"1\":{\"751\":1}}],[\"假设这是一个占用内存很大的结构体\",{\"1\":{\"485\":1}}],[\"假设在上面例子中不是简单的\",{\"1\":{\"401\":1}}],[\"假设在编译时指定了pb\",{\"1\":{\"193\":1}}],[\"假设有下面的代码\",{\"1\":{\"1038\":1,\"1067\":1}}],[\"假设有下面这样一个结构体\",{\"1\":{\"406\":1}}],[\"假设有如下结构体\",{\"1\":{\"410\":1,\"447\":1}}],[\"假设有如下的文件结构\",{\"1\":{\"193\":1}}],[\"假设有一桶水\",{\"1\":{\"364\":1}}],[\"假设一个函数会运行非常底层的代码\",{\"1\":{\"46\":1}}],[\"假设现在有如下源文件\",{\"1\":{\"17\":1}}],[\"去偷取它本地队列中的\",{\"1\":{\"1104\":1}}],[\"去掉注释部分也就\",{\"1\":{\"1082\":1}}],[\"去掉注释总共也就两三百行代码\",{\"1\":{\"1044\":1}}],[\"去掉时间的单调时钟读数\",{\"1\":{\"737\":1}}],[\"去查询关联的\",{\"1\":{\"899\":1}}],[\"去引用表中查找符合条件的记录\",{\"1\":{\"896\":1}}],[\"去哪里寻找库文件\",{\"1\":{\"545\":1}}],[\"去哪里寻找导入的文件\",{\"1\":{\"7\":1}}],[\"去完成\",{\"1\":{\"529\":1}}],[\"去除注释真正的代码逻辑只有\",{\"1\":{\"484\":1}}],[\"去洛谷做几道简单的\",{\"1\":{\"346\":1}}],[\"去下载最新版的\",{\"1\":{\"200\":1}}],[\"嵌套切片也是一个道理\",{\"1\":{\"944\":1}}],[\"嵌套字段\",{\"1\":{\"862\":1}}],[\"嵌套事务\",{\"1\":{\"849\":1}}],[\"嵌套\",{\"0\":{\"733\":1}}],[\"嵌套消息\",{\"0\":{\"191\":1}}],[\"嵌入字段的列名前缀\",{\"1\":{\"862\":1}}],[\"嵌入结构体的作用是为了方便指定外键和引用\",{\"1\":{\"860\":1}}],[\"嵌入的标准\",{\"1\":{\"781\":1}}],[\"嵌入\",{\"0\":{\"531\":1}}],[\"嵌入式的\",{\"1\":{\"62\":2}}],[\"弃用字段\",{\"0\":{\"189\":1}}],[\"弃用ioutil包\",{\"1\":{\"121\":1}}],[\"说实话不认真看很难知道这是一个什么类型\",{\"1\":{\"592\":1}}],[\"说人话其实就是表示一个字段在传输时会有多种可能的类型\",{\"1\":{\"195\":1}}],[\"说白了其实就是数组\",{\"1\":{\"187\":1}}],[\"说明写者协程正在工作\",{\"1\":{\"1161\":1}}],[\"说明逐步搬迁时\",{\"1\":{\"1042\":1}}],[\"说明此时链表内已经没有可用的元素了\",{\"1\":{\"1039\":1}}],[\"说明当前元素不是最后一个\",{\"1\":{\"1039\":1}}],[\"说明当前的哈希桶以及它的溢出桶都满了\",{\"1\":{\"1038\":1}}],[\"说明已经遍历完毕\",{\"1\":{\"1037\":1}}],[\"说明是绕了一圈回来\",{\"1\":{\"1037\":1}}],[\"说明哈希冲突越多\",{\"1\":{\"1032\":1}}],[\"说明只是有\",{\"1\":{\"505\":1}}],[\"说明项目增加了新的特性\",{\"1\":{\"505\":1}}],[\"说明项目发生了不兼容的改动\",{\"1\":{\"505\":1}}],[\"说明\",{\"1\":{\"106\":1,\"107\":1,\"108\":1,\"112\":1,\"506\":1,\"862\":1,\"1032\":1}}],[\"次数多了浪费资源\",{\"1\":{\"1153\":1}}],[\"次\",{\"1\":{\"519\":2,\"547\":1}}],[\"次或多次\",{\"1\":{\"187\":1}}],[\"次版本的更新意味着有新功能添加同时保持向下兼容\",{\"1\":{\"113\":1}}],[\"次版本\",{\"1\":{\"113\":1}}],[\"领域通信相关\",{\"1\":{\"180\":1,\"629\":1}}],[\"领导者\",{\"1\":{\"142\":1}}],[\"🦍\",{\"1\":{\"178\":1}}],[\"存在于\",{\"1\":{\"1047\":1}}],[\"存在时间\",{\"1\":{\"1002\":1}}],[\"存在时会覆盖原有配置\",{\"1\":{\"792\":1}}],[\"存在的话则不会覆盖\",{\"1\":{\"792\":1}}],[\"存在的话会覆盖\",{\"1\":{\"792\":1}}],[\"存在循环导入的话将会无法通过编译\",{\"1\":{\"295\":1}}],[\"存入数据\",{\"1\":{\"486\":1}}],[\"存值时使用已存在的键会覆盖原有的值\",{\"1\":{\"384\":1}}],[\"存值的方式也类似数组存值一样\",{\"1\":{\"384\":1}}],[\"存值\",{\"0\":{\"384\":1}}],[\"存储\",{\"1\":{\"1003\":1}}],[\"存储在服务端\",{\"1\":{\"1003\":2}}],[\"存储在服务器中\",{\"1\":{\"1003\":1}}],[\"存储在浏览器中\",{\"1\":{\"1003\":1}}],[\"存储到上下文中\",{\"1\":{\"975\":1}}],[\"存储了数据大小\",{\"1\":{\"820\":1}}],[\"存储值\",{\"1\":{\"489\":2}}],[\"存储一个键值对\",{\"1\":{\"486\":1}}],[\"存储数据库\",{\"1\":{\"239\":1}}],[\"存储格式是\",{\"1\":{\"218\":1}}],[\"存储的\",{\"1\":{\"175\":1}}],[\"存放了对应的值\",{\"1\":{\"1045\":1}}],[\"存放的是哈希值的高八位\",{\"1\":{\"1036\":1}}],[\"存放指定类型值的数组\",{\"1\":{\"1030\":1}}],[\"存放指定类型键的数组\",{\"1\":{\"1030\":1}}],[\"存放每一个键的高八位值\",{\"1\":{\"1030\":1}}],[\"存放着\",{\"1\":{\"1030\":1}}],[\"存放哈希桶数组的指针\",{\"1\":{\"1030\":1}}],[\"存放在\",{\"1\":{\"1015\":1}}],[\"存放数据\",{\"1\":{\"164\":1}}],[\"存放临时文件\",{\"1\":{\"92\":1}}],[\"存放缓存文件\",{\"1\":{\"92\":1}}],[\"存放用于编译的缓存信息\",{\"1\":{\"7\":1}}],[\"存放\",{\"1\":{\"7\":1,\"1030\":1}}],[\"存放二进制文件\",{\"1\":{\"7\":1}}],[\"存放一些工具库和头文件\",{\"1\":{\"7\":1}}],[\"存放一些依赖\",{\"1\":{\"7\":1}}],[\"甚至连其指向的底层数组也没有被写入数据\",{\"1\":{\"1019\":1}}],[\"甚至没法删除该键值对\",{\"1\":{\"385\":1}}],[\"甚至拿\",{\"1\":{\"175\":1}}],[\"甚至还可以用来更新\",{\"1\":{\"18\":1}}],[\"负数没有任何意义\",{\"1\":{\"1177\":1}}],[\"负载因子小于\",{\"1\":{\"1041\":1}}],[\"负载因子超过\",{\"1\":{\"1041\":1}}],[\"负载因子超过阈值bucketcnt\",{\"1\":{\"1032\":1}}],[\"负载均衡\",{\"0\":{\"177\":1}}],[\"负载均衡策略为轮询\",{\"1\":{\"175\":1}}],[\"负责缓存的结构是runtime\",{\"1\":{\"1145\":1}}],[\"负责确认何时进行垃圾回收和执行多少工作量\",{\"1\":{\"1131\":1}}],[\"负责回收释放清理对象内存的代码\",{\"1\":{\"1131\":1}}],[\"负责小对象分配的部分代码如下\",{\"1\":{\"1125\":1}}],[\"负责分配大对象的部分代码如下\",{\"1\":{\"1126\":1}}],[\"负责分配微对象的部分代码如下所示\",{\"1\":{\"1124\":1}}],[\"负责分配栈空间的函数就是runtime\",{\"1\":{\"1100\":1}}],[\"负责为对象分配内存的函数是runtime\",{\"1\":{\"1123\":1}}],[\"负责给堆内存扩容的是mheap\",{\"1\":{\"1122\":1}}],[\"负责引导\",{\"1\":{\"1089\":1}}],[\"负责调度\",{\"1\":{\"1088\":1}}],[\"负责处理线程信号的协程\",{\"1\":{\"1087\":1}}],[\"负责处理上层逻辑\",{\"1\":{\"529\":1}}],[\"负责构造中间代码的工作由cmd\",{\"1\":{\"1055\":1}}],[\"负责扩容的函数自然就是runtime\",{\"1\":{\"1041\":1}}],[\"负责将模板处理得到最后的翻译内容\",{\"1\":{\"952\":1}}],[\"负责日志的输出\",{\"1\":{\"839\":1}}],[\"负责日志的格式化\",{\"1\":{\"839\":1}}],[\"负责读的协程每次读取之前都会等待\",{\"1\":{\"467\":1}}],[\"负责读\",{\"1\":{\"467\":1}}],[\"负责写的协程一口气做多也只能写入\",{\"1\":{\"467\":1}}],[\"负责写\",{\"1\":{\"467\":1}}],[\"负责\",{\"1\":{\"415\":1}}],[\"负责监控目标地址和服务配置的更新\",{\"1\":{\"174\":1}}],[\"负责健康检查和服务同步\",{\"1\":{\"142\":1}}],[\"内第一次出现的子串\",{\"1\":{\"708\":1}}],[\"内的出现次数\",{\"1\":{\"707\":1}}],[\"内的任意字符串\",{\"1\":{\"706\":1}}],[\"内是否包含字符\",{\"1\":{\"706\":1}}],[\"内\",{\"1\":{\"706\":1,\"773\":1}}],[\"内任意字符的\",{\"1\":{\"706\":1}}],[\"内置渲染\",{\"1\":{\"963\":1}}],[\"内置支持的\",{\"1\":{\"763\":1}}],[\"内置的模板引擎库text\",{\"1\":{\"722\":1}}],[\"内置类型any就是interface\",{\"1\":{\"594\":1}}],[\"内置数据类型是否可比较的情况如下\",{\"1\":{\"568\":1}}],[\"内置函数cap来访问数组容量\",{\"1\":{\"361\":1}}],[\"内容大致为不能声明一个值为untyped\",{\"1\":{\"1070\":1}}],[\"内容很简单\",{\"1\":{\"1042\":1}}],[\"内容防篡改\",{\"1\":{\"770\":1}}],[\"内容如下\",{\"1\":{\"513\":1,\"532\":1,\"545\":1,\"823\":1}}],[\"内容比较详细\",{\"1\":{\"288\":1}}],[\"内部是由桶组成的\",{\"1\":{\"1034\":1}}],[\"内部计算哈希的函数位于runtime\",{\"1\":{\"1033\":1}}],[\"内部结构\",{\"0\":{\"1030\":1}}],[\"内部字段不对外暴露\",{\"1\":{\"719\":1}}],[\"内部字段都是零值的结构体\",{\"1\":{\"321\":1}}],[\"内部的字段也有很多\",{\"1\":{\"1087\":1}}],[\"内部的字段不同代表内部细节不一样\",{\"1\":{\"567\":1}}],[\"内部的其他方法例如work和boot都无法访问\",{\"1\":{\"567\":1}}],[\"内部实现改变而功能不变\",{\"1\":{\"567\":1}}],[\"内部使用reflect\",{\"1\":{\"432\":1}}],[\"内部有读写检测机制\",{\"1\":{\"389\":1}}],[\"内部包\",{\"0\":{\"296\":1}}],[\"内部\",{\"1\":{\"174\":1}}],[\"内存单元已经被回收了\",{\"1\":{\"1148\":1}}],[\"内存单元在缓存中\",{\"1\":{\"1148\":1}}],[\"内存屏障的作用可以理解为\",{\"1\":{\"1141\":1}}],[\"内存统计\",{\"0\":{\"1128\":1}}],[\"内存由若干个不同的大小固定的mspan链表组成\",{\"1\":{\"1123\":1}}],[\"内存大小\",{\"1\":{\"1123\":1}}],[\"内存申请完毕后\",{\"1\":{\"1122\":1}}],[\"内存已经被释放\",{\"1\":{\"1114\":1}}],[\"内存地址并不连续\",{\"1\":{\"1114\":1}}],[\"内存地址就可能发生了变化\",{\"1\":{\"543\":1}}],[\"内存组件统计\",{\"1\":{\"1128\":1}}],[\"内存组件\",{\"0\":{\"1113\":1}}],[\"内存块的分布如下图所示\",{\"1\":{\"1112\":1}}],[\"内存块的大小\",{\"1\":{\"1112\":1}}],[\"内存起始地址为切片所持有的引用的地址\",{\"1\":{\"1027\":1}}],[\"内存计算公式就是mem\",{\"1\":{\"1025\":1}}],[\"内存计算时数值溢出了\",{\"1\":{\"1020\":1}}],[\"内存相关\",{\"1\":{\"917\":1}}],[\"内存火焰图\",{\"1\":{\"560\":1}}],[\"内存分析图\",{\"1\":{\"560\":1}}],[\"内存分配中基本的单位\",{\"1\":{\"1114\":1}}],[\"内存分配器显然用来分配堆内存的\",{\"1\":{\"1129\":1}}],[\"内存分配器的影响\",{\"1\":{\"1109\":1}}],[\"内存分配器很大程度上受到了谷歌的\",{\"1\":{\"1109\":1}}],[\"内存分配器负责堆内存的分配\",{\"1\":{\"1109\":1}}],[\"内存分配完毕后\",{\"1\":{\"1058\":1}}],[\"内存分配抽样\",{\"1\":{\"557\":1}}],[\"内存分配的最终决定权依旧掌握在编译器手里\",{\"1\":{\"553\":1}}],[\"内存分配情况等\",{\"1\":{\"548\":1}}],[\"内存\",{\"0\":{\"917\":1},\"1\":{\"554\":1}}],[\"内存占用\",{\"1\":{\"548\":1}}],[\"内存占用和内存分配次数\",{\"1\":{\"526\":1}}],[\"内存安全问题\",{\"1\":{\"547\":1}}],[\"内存中各自保存了一份\",{\"1\":{\"536\":1}}],[\"内存和\",{\"1\":{\"536\":1}}],[\"内存值\",{\"1\":{\"490\":1}}],[\"内存对齐\",{\"0\":{\"410\":1}}],[\"内存进行软限制\",{\"1\":{\"118\":1}}],[\"内存模型向\",{\"1\":{\"118\":1}}],[\"内存管理\",{\"1\":{\"96\":1}}],[\"又被并发的使用了\",{\"1\":{\"1178\":1}}],[\"又加上rwmutexmaxreaders得到了r\",{\"1\":{\"1158\":1}}],[\"又会去尝试获取ch2的锁\",{\"1\":{\"1067\":1}}],[\"又初始化了一遍\",{\"1\":{\"484\":1}}],[\"又或者说锁进入了饥饿模式\",{\"1\":{\"1154\":1}}],[\"又或者说常用到的time包下的after函数\",{\"1\":{\"469\":1}}],[\"又或者是通用接口\",{\"1\":{\"575\":1}}],[\"又或者是作为通道的类型\",{\"1\":{\"411\":1}}],[\"又或者在运行过程中需要动态调整\",{\"1\":{\"472\":1}}],[\"又或者只有一部分子协程在主协程退出前成功运行\",{\"1\":{\"462\":1}}],[\"又或者作为\",{\"1\":{\"174\":1}}],[\"又限制了指针的使用\",{\"1\":{\"390\":1}}],[\"又导入了包\",{\"1\":{\"295\":1}}],[\"又可以是当作高速缓存存储\",{\"1\":{\"239\":1}}],[\"又称为忙等待\",{\"1\":{\"1153\":1}}],[\"又称基于起始快照的屏障\",{\"1\":{\"1143\":1}}],[\"又称\",{\"1\":{\"75\":1}}],[\"构建结构体的工作是编译期间完成的\",{\"1\":{\"1020\":1}}],[\"构建runtime\",{\"1\":{\"1020\":1}}],[\"构建器\",{\"1\":{\"849\":1}}],[\"构建option\",{\"1\":{\"843\":1}}],[\"构建日志级别\",{\"1\":{\"843\":1}}],[\"构建编码器\",{\"1\":{\"843\":1}}],[\"构建的\",{\"1\":{\"836\":1}}],[\"构建map反射值\",{\"1\":{\"457\":1}}],[\"构建库\",{\"1\":{\"64\":1}}],[\"构造中间代码过程这里省略了\",{\"1\":{\"1028\":1}}],[\"构造的一个值在使用后需要进行收尾工作\",{\"1\":{\"829\":1}}],[\"构造foo\",{\"1\":{\"823\":1}}],[\"构造指向该结构体未导出字段的指针反射值\",{\"1\":{\"449\":1}}],[\"构造器在初始化时应该使用resolver\",{\"1\":{\"174\":1}}],[\"构造器\",{\"1\":{\"174\":1}}],[\"└┬┘\",{\"1\":{\"174\":2}}],[\"└─compiler\",{\"1\":{\"200\":1}}],[\"└─protobuf\",{\"1\":{\"200\":1}}],[\"└─player\",{\"1\":{\"193\":1,\"201\":2}}],[\"└─include\",{\"1\":{\"200\":1}}],[\"└──┬──┘\",{\"1\":{\"174\":1}}],[\"└─────────┬─────────┘\",{\"1\":{\"174\":1}}],[\"└───────┬───────┘\",{\"1\":{\"174\":1}}],[\"└────┬────┘\",{\"1\":{\"174\":1}}],[\"└─yaml\",{\"1\":{\"28\":1}}],[\"└─assert\",{\"1\":{\"28\":1}}],[\"└─testify\",{\"1\":{\"28\":1}}],[\"└─stretchr\",{\"1\":{\"28\":1}}],[\"└─spew\",{\"1\":{\"28\":1}}],[\"└─difflib\",{\"1\":{\"28\":1}}],[\"└─errors\",{\"1\":{\"28\":1}}],[\"└─google\",{\"1\":{\"200\":1}}],[\"└─gopkg\",{\"1\":{\"28\":1}}],[\"└─go\",{\"1\":{\"28\":2}}],[\"└─vendor\",{\"1\":{\"28\":1}}],[\"┌───────────────┴───────────────┐┌───┴────┐\",{\"1\":{\"174\":1}}],[\"┌───────────────────┴─────────────────────┐\",{\"1\":{\"174\":1}}],[\"授权码模式的流程图\",{\"1\":{\"172\":1}}],[\"授权库\",{\"1\":{\"78\":1}}],[\"秒级时间间隔\",{\"1\":{\"840\":1}}],[\"秒\",{\"1\":{\"170\":1,\"242\":3,\"737\":2}}],[\"帧中\",{\"1\":{\"169\":1}}],[\"示例代码\",{\"0\":{\"1165\":1}}],[\"示例代码如下\",{\"1\":{\"537\":1}}],[\"示例二\",{\"1\":{\"968\":1,\"969\":1,\"970\":1}}],[\"示例一\",{\"1\":{\"968\":1,\"969\":1,\"970\":1}}],[\"示例输出如下\",{\"1\":{\"820\":1}}],[\"示例中使用f\",{\"1\":{\"527\":1}}],[\"示例中客户端\",{\"1\":{\"174\":1}}],[\"示例测试在标准库中出现的非常多\",{\"1\":{\"520\":1}}],[\"示例测试并不是一个官方定义的概念\",{\"1\":{\"520\":1}}],[\"示例测试并不像其他三种测试一样是为了发现程序的问题所在\",{\"1\":{\"520\":1}}],[\"示例测试\",{\"0\":{\"520\":1},\"1\":{\"516\":1,\"518\":1}}],[\"示例仓库地址\",{\"1\":{\"966\":1}}],[\"示例仓库中的go\",{\"1\":{\"513\":1}}],[\"示例仓库\",{\"1\":{\"493\":1,\"512\":1}}],[\"示例\",{\"0\":{\"513\":1,\"571\":1,\"636\":1,\"638\":1,\"639\":1,\"764\":1,\"778\":1,\"824\":1},\"1\":{\"354\":1,\"675\":1,\"676\":1,\"712\":2,\"713\":1,\"714\":1,\"715\":2,\"716\":1,\"717\":1,\"718\":1,\"719\":1,\"720\":1,\"721\":1,\"728\":1,\"763\":1,\"942\":1,\"943\":1,\"971\":1}}],[\"示例如下\",{\"1\":{\"168\":1,\"352\":1,\"420\":1,\"425\":1,\"434\":1,\"441\":1,\"450\":1,\"596\":1,\"597\":1,\"820\":1,\"828\":1}}],[\"示例来进行演示\",{\"1\":{\"150\":1}}],[\"能省去不少时间\",{\"1\":{\"290\":1}}],[\"能够执行的\",{\"1\":{\"1104\":1}}],[\"能够继续工作\",{\"1\":{\"1097\":1}}],[\"能够正确匹配\",{\"1\":{\"826\":1}}],[\"能够熟练运用标准库对日常开发将会有非常大的帮助\",{\"1\":{\"616\":1}}],[\"能够阅读\",{\"1\":{\"556\":1}}],[\"能够妥善使用官方提供的便利就能提升学习的效率从而减少不必要的时间浪费\",{\"1\":{\"285\":1}}],[\"能够解决不断涌现出的各种用例\",{\"1\":{\"203\":1}}],[\"能正常输出就说明安装成功\",{\"1\":{\"200\":1}}],[\"能出现这个我是没想到的\",{\"1\":{\"168\":1}}],[\"能做的事情不止服务发现\",{\"1\":{\"139\":1}}],[\"已知黑色对象\",{\"1\":{\"1136\":1}}],[\"已知这些类型的占用字节数\",{\"1\":{\"410\":1}}],[\"已过期等等\",{\"1\":{\"775\":1}}],[\"已存在相同的资源\",{\"1\":{\"168\":1}}],[\"已经被访问过了\",{\"1\":{\"1136\":1}}],[\"已经被删除了\",{\"1\":{\"1047\":1}}],[\"已经被赋予\",{\"1\":{\"331\":1}}],[\"已经完全脱离\",{\"1\":{\"1004\":1}}],[\"已经解析与验证\",{\"1\":{\"778\":1}}],[\"已经成为了现代服务端通信认证的主流方式之一\",{\"1\":{\"769\":1}}],[\"已经变成了\",{\"1\":{\"730\":1}}],[\"已经帮我们处理好了\",{\"1\":{\"582\":1}}],[\"已经取好了别名\",{\"1\":{\"534\":1}}],[\"已经添加语料库中的\",{\"1\":{\"527\":1}}],[\"已经初始化完毕了\",{\"1\":{\"484\":1}}],[\"已经尽可能的涵盖了一些通用场景\",{\"1\":{\"168\":1}}],[\"已经有\",{\"1\":{\"163\":1}}],[\"已经文件名\",{\"1\":{\"43\":1}}],[\"资源\",{\"1\":{\"1153\":1}}],[\"资源角色模型新增了一个g2\",{\"1\":{\"766\":1}}],[\"资源角色模型\",{\"0\":{\"766\":1}}],[\"资源枯竭\",{\"1\":{\"168\":1}}],[\"资源不存在\",{\"1\":{\"168\":1}}],[\"资料也并不是很完善\",{\"1\":{\"0\":1}}],[\"未禁用编译优化\",{\"1\":{\"1076\":1}}],[\"未使用的变量是无法通过编译的\",{\"1\":{\"330\":1}}],[\"未知错误\",{\"1\":{\"168\":1}}],[\"未来的\",{\"1\":{\"170\":1}}],[\"未来版本将不再提供支持\",{\"1\":{\"117\":1}}],[\"未来出问题不至于手足无措\",{\"1\":{\"90\":1}}],[\"涵盖了\",{\"1\":{\"554\":1}}],[\"涵盖了大部分的场景\",{\"1\":{\"168\":1}}],[\"涵盖了编译\",{\"1\":{\"88\":1}}],[\"错误信息如下\",{\"1\":{\"1069\":1}}],[\"错误管理\",{\"1\":{\"963\":1}}],[\"错误文件输出路径\",{\"1\":{\"839\":1}}],[\"错误日志\",{\"1\":{\"647\":1}}],[\"错误在传递的过程中可能会层层包装\",{\"1\":{\"602\":1}}],[\"错误中没有堆栈信息\",{\"1\":{\"598\":1}}],[\"错误提示所有的协程都已经退出\",{\"1\":{\"472\":1}}],[\"错误的类型有很多\",{\"1\":{\"416\":1}}],[\"错误的原因\",{\"1\":{\"168\":1}}],[\"错误例子如下\",{\"1\":{\"360\":1}}],[\"错误情况\",{\"1\":{\"341\":1}}],[\"错误示例\",{\"1\":{\"309\":1,\"329\":2,\"360\":1}}],[\"错误\",{\"0\":{\"598\":1},\"1\":{\"299\":1,\"602\":1}}],[\"错误写法\",{\"1\":{\"193\":1}}],[\"错误码\",{\"0\":{\"168\":1}}],[\"错误处理中的最后一步就是如何处理和检查错误\",{\"1\":{\"603\":1}}],[\"错误处理的提案和讨论自从\",{\"1\":{\"598\":1}}],[\"错误处理\",{\"0\":{\"167\":1,\"584\":1,\"783\":1},\"1\":{\"531\":1,\"950\":1,\"954\":1}}],[\"专门用于执行标记任务\",{\"1\":{\"1138\":1}}],[\"专门收集了一系列开源的\",{\"1\":{\"166\":1}}],[\"专用\",{\"1\":{\"416\":1}}],[\"专用于给切片\",{\"1\":{\"393\":1}}],[\"专用于给指针分配内存空间\",{\"1\":{\"393\":1}}],[\"专家编程\",{\"1\":{\"100\":1}}],[\"监测和重载配置\",{\"0\":{\"793\":1}}],[\"监听地址\",{\"1\":{\"682\":2}}],[\"监听端口\",{\"1\":{\"145\":1,\"153\":1}}],[\"监控等等其他功能\",{\"1\":{\"166\":1}}],[\"起源于\",{\"1\":{\"618\":1}}],[\"起重机b\",{\"1\":{\"567\":1}}],[\"起重机a\",{\"1\":{\"567\":1}}],[\"起重机接口\",{\"1\":{\"567\":1}}],[\"起到文档作用\",{\"1\":{\"520\":1}}],[\"起到了拦截的效果\",{\"1\":{\"166\":1}}],[\"起初抱着试一试的心态简单了解了下\",{\"1\":{\"0\":1}}],[\"要在并发情况下保证三色不变性\",{\"1\":{\"1136\":1}}],[\"要正常工作必须要与一个\",{\"1\":{\"1090\":1}}],[\"要合理结合dive标签使用\",{\"1\":{\"945\":1}}],[\"要多读源代码注释\",{\"1\":{\"838\":1}}],[\"要转换的整型数字\",{\"1\":{\"693\":1}}],[\"要转换的字符串\",{\"1\":{\"692\":1,\"694\":1,\"697\":1,\"699\":1}}],[\"要花费1ms\",{\"1\":{\"606\":1}}],[\"要这样做的话不妨考虑下自己实现的复杂度和性能\",{\"1\":{\"583\":1}}],[\"要使用errno\",{\"1\":{\"531\":1}}],[\"要使用对应的数据库\",{\"1\":{\"231\":1}}],[\"要更久的\",{\"1\":{\"530\":1}}],[\"要修改反射对象\",{\"1\":{\"430\":1}}],[\"要是事务成功提交了\",{\"1\":{\"238\":1}}],[\"要么全黑要么全灰\",{\"1\":{\"1144\":1}}],[\"要么读要么写\",{\"1\":{\"471\":1}}],[\"要么都用\",{\"1\":{\"414\":1}}],[\"要么建议使用\",{\"1\":{\"405\":1}}],[\"要么创建多个构造函数\",{\"1\":{\"405\":1}}],[\"要么就都用指针接收者\",{\"1\":{\"414\":1}}],[\"要么就都不用\",{\"1\":{\"414\":1}}],[\"要么就使用内置函数new手动分配\",{\"1\":{\"391\":1}}],[\"要么就是出错了\",{\"1\":{\"162\":1}}],[\"要么用\",{\"1\":{\"205\":1}}],[\"要么使用反射要么使用unsafe包\",{\"1\":{\"1052\":1}}],[\"要么使用取地址符将其他变量的地址赋值给该指针\",{\"1\":{\"391\":1}}],[\"要么使用\",{\"1\":{\"205\":1}}],[\"要求我们传入一个\",{\"1\":{\"174\":1}}],[\"要想删除一个\",{\"1\":{\"1039\":1}}],[\"要想一直监测管道\",{\"1\":{\"471\":1}}],[\"要想给\",{\"1\":{\"171\":1}}],[\"要想使创建的拦截器生效\",{\"1\":{\"165\":1}}],[\"拦截内存写操作会造成额外的开销\",{\"1\":{\"1141\":1}}],[\"拦截服务端\",{\"1\":{\"165\":1}}],[\"拦截器中间件\",{\"1\":{\"166\":1}}],[\"拦截器拦截的是每一个流对象的send和recve\",{\"1\":{\"165\":1}}],[\"拦截器拦截的是每一个\",{\"1\":{\"165\":1}}],[\"拦截器的例子\",{\"1\":{\"165\":2}}],[\"拦截器有两大类\",{\"1\":{\"164\":1}}],[\"拦截器\",{\"0\":{\"164\":1},\"1\":{\"164\":2,\"165\":2,\"166\":1}}],[\"了对象的赋值行为\",{\"1\":{\"1141\":1}}],[\"了\",{\"1\":{\"402\":1,\"598\":1,\"1003\":1}}],[\"了的话\",{\"1\":{\"163\":1}}],[\"了解更多有关\",{\"1\":{\"1130\":1}}],[\"了解协程的生命周期对了解调度器会很有帮助\",{\"1\":{\"1094\":1}}],[\"了解了管道后再来了解\",{\"1\":{\"1063\":1}}],[\"了解一下每一个版本的更新内容也会有所帮助\",{\"1\":{\"291\":1}}],[\"了解\",{\"1\":{\"145\":2}}],[\"声明部分通常是关于一个实体的数据\",{\"1\":{\"773\":1}}],[\"声明一个新类型通常需要一个类型名称以及一个基础类型\",{\"1\":{\"593\":1}}],[\"声明一个any类型的变量\",{\"1\":{\"432\":1}}],[\"声明一个personoptions类型\",{\"1\":{\"406\":1}}],[\"声明一个编号序列为保留字段\",{\"1\":{\"188\":1}}],[\"声明函数有两种办法\",{\"1\":{\"395\":1}}],[\"声明\",{\"0\":{\"328\":1,\"395\":1,\"404\":1,\"565\":1},\"1\":{\"188\":1}}],[\"声明具体名称的字段为保留字段\",{\"1\":{\"188\":1}}],[\"声明方式如下\",{\"1\":{\"187\":1}}],[\"声明用于接收值的md\",{\"1\":{\"163\":1}}],[\"声明类型\",{\"1\":{\"137\":1}}],[\"传输编码\",{\"1\":{\"986\":1}}],[\"传输控制协议地址\",{\"1\":{\"932\":3}}],[\"传统的\",{\"1\":{\"969\":1}}],[\"传递管道时\",{\"1\":{\"1062\":1}}],[\"传递\",{\"0\":{\"602\":1}}],[\"传递一些参数以控制特定的行为\",{\"1\":{\"9\":1}}],[\"传入一个字符串\",{\"1\":{\"1054\":1}}],[\"传入一个切片\",{\"1\":{\"1054\":1}}],[\"传入一个闭包函数\",{\"1\":{\"901\":1}}],[\"传入指向内存地址的类型指针和数据长度\",{\"1\":{\"1054\":1}}],[\"传入指针\",{\"1\":{\"449\":2}}],[\"传入dest指针方便让\",{\"1\":{\"869\":1}}],[\"传入对应的参数完成依赖注入\",{\"1\":{\"823\":1}}],[\"传入token字符串和验证钩子函数\",{\"1\":{\"782\":1,\"783\":1}}],[\"传入如下数据\",{\"1\":{\"733\":1}}],[\"传入如下的数据\",{\"1\":{\"730\":1,\"735\":1}}],[\"传入数据\",{\"1\":{\"732\":1}}],[\"传入的\",{\"1\":{\"963\":1}}],[\"传入的字符串甚至连一个token都不是\",{\"1\":{\"783\":1}}],[\"传入的数据\",{\"1\":{\"731\":1}}],[\"传入的数据如下\",{\"1\":{\"728\":1}}],[\"传入的信息最好是由\",{\"1\":{\"168\":1}}],[\"传入上下文\",{\"1\":{\"476\":1}}],[\"传入包装类型和函数体\",{\"1\":{\"459\":1}}],[\"传入参数数组\",{\"1\":{\"446\":1}}],[\"传入\",{\"1\":{\"165\":1,\"174\":1}}],[\"传入即可\",{\"1\":{\"163\":1}}],[\"传入偶数长度的字符串切片\",{\"1\":{\"161\":1}}],[\"值和\",{\"1\":{\"1037\":1}}],[\"值为\",{\"1\":{\"1017\":1,\"1032\":1}}],[\"值为整型的映射表\",{\"1\":{\"320\":1}}],[\"值处理下得到如下结果\",{\"1\":{\"952\":1}}],[\"值绑定\",{\"0\":{\"827\":1}}],[\"值得一看\",{\"1\":{\"589\":1}}],[\"值得一提的是\",{\"1\":{\"87\":1,\"386\":1,\"396\":1,\"1027\":1}}],[\"值得注意的是\",{\"1\":{\"584\":1,\"1054\":1,\"1059\":1}}],[\"值的类型约束为v\",{\"1\":{\"572\":1}}],[\"值是否相等\",{\"1\":{\"568\":2}}],[\"值接收者和指针接收者也是同样的道理\",{\"1\":{\"414\":1}}],[\"值接收者和指针接收者\",{\"1\":{\"413\":1}}],[\"值接收者\",{\"0\":{\"413\":1}}],[\"值\",{\"0\":{\"438\":1},\"1\":{\"364\":3,\"933\":2,\"1034\":1,\"1037\":2,\"1088\":1,\"1114\":1}}],[\"值就是\",{\"1\":{\"300\":1}}],[\"值就是什么\",{\"1\":{\"300\":1}}],[\"值也会被覆盖\",{\"1\":{\"160\":1}}],[\"小对象的内存分配是一级一级往下走的\",{\"1\":{\"1125\":1}}],[\"小对象的分配过程最麻烦\",{\"1\":{\"1125\":1}}],[\"小对象\",{\"0\":{\"1125\":1},\"1\":{\"1123\":1}}],[\"小内存占用\",{\"1\":{\"963\":1}}],[\"小时制的时间\",{\"1\":{\"739\":1}}],[\"小时格式化输出\",{\"1\":{\"739\":1}}],[\"小指数采用\",{\"1\":{\"698\":2}}],[\"小写e十进制指数\",{\"1\":{\"698\":1}}],[\"小写字母\",{\"1\":{\"160\":1,\"509\":1}}],[\"小\",{\"1\":{\"617\":1}}],[\"小细节\",{\"1\":{\"553\":1}}],[\"小版本号是\",{\"1\":{\"505\":1}}],[\"小于0表示有写者协程已经持有了互斥锁\",{\"1\":{\"1162\":1}}],[\"小于4就不会创建溢出桶\",{\"1\":{\"1034\":1}}],[\"小于等于\",{\"1\":{\"728\":1,\"935\":1}}],[\"小于\",{\"1\":{\"365\":1,\"715\":1,\"728\":1,\"935\":1,\"1034\":1,\"1085\":1,\"1123\":2}}],[\"小到变量命名\",{\"1\":{\"288\":1}}],[\"小结\",{\"0\":{\"217\":1,\"579\":1,\"589\":1,\"1071\":1,\"1108\":1,\"1170\":1,\"1174\":1,\"1179\":1}}],[\"小米信息部技术团队\",{\"1\":{\"147\":1}}],[\"里面讲解了有关于触发\",{\"1\":{\"1132\":1}}],[\"里面持有着一个底层数组的引用\",{\"1\":{\"536\":1}}],[\"里面使用了以下几种类型来映射数据库中的文档\",{\"1\":{\"222\":1}}],[\"里面的匹配的地址传入到\",{\"1\":{\"175\":1}}],[\"里面它以\",{\"1\":{\"171\":1}}],[\"里面有相当多的方便函数来简化操作\",{\"1\":{\"160\":1}}],[\"里面不少典故\",{\"1\":{\"87\":1}}],[\"本地的wbbuf是否有剩下的灰色对象\",{\"1\":{\"1145\":1}}],[\"本地的缓存\",{\"1\":{\"1125\":1}}],[\"本地的缓存中继续使用\",{\"1\":{\"1121\":1}}],[\"本地的缓存中\",{\"1\":{\"1120\":1}}],[\"本地都有这样一个缓存\",{\"1\":{\"1145\":1}}],[\"本地都有这样一个队列\",{\"1\":{\"1137\":1}}],[\"本地队列一半的\",{\"1\":{\"1104\":1}}],[\"本地队列中其它的\",{\"1\":{\"1097\":1}}],[\"本地依赖和go\",{\"1\":{\"510\":1}}],[\"本教程将采用go语言进行讲解\",{\"1\":{\"800\":1}}],[\"本身就是不局限于任何框架任何语言\",{\"1\":{\"1004\":1}}],[\"本身是没有对于跨域配置做出任何处理\",{\"1\":{\"1000\":1}}],[\"本身是采用go语言进行开发\",{\"1\":{\"758\":1}}],[\"本身也支持像原生\",{\"1\":{\"998\":1}}],[\"本身没法链式调用\",{\"1\":{\"586\":1}}],[\"本身做任何讲解\",{\"1\":{\"239\":1}}],[\"本来应该是将其分配到栈上\",{\"1\":{\"550\":1}}],[\"本质上来说它确实可以被修改\",{\"1\":{\"1054\":1}}],[\"本质上还是一个以注释形式和\",{\"1\":{\"1017\":1}}],[\"本质上这只是一个\",{\"1\":{\"1015\":1}}],[\"本质上是基于\",{\"1\":{\"493\":1}}],[\"本质上是一个\",{\"1\":{\"160\":1,\"995\":1}}],[\"本质上也是对openfile的封装\",{\"1\":{\"418\":1}}],[\"本篇不会对实现原理做过多的讲解\",{\"1\":{\"381\":1}}],[\"本节不会讲解\",{\"1\":{\"347\":1}}],[\"本站的第一个入门的案例就是输出一个字符串\",{\"1\":{\"334\":1}}],[\"本站的许多内容也是来自于官方网站\",{\"1\":{\"285\":1}}],[\"本次请求的配置项\",{\"1\":{\"166\":1}}],[\"本次一元rpc的一些请求信息\",{\"1\":{\"165\":1}}],[\"本文接下来会进行较为详细的讲解\",{\"1\":{\"1149\":1}}],[\"本文接下来将使用\",{\"1\":{\"851\":1}}],[\"本文参考了许多内容\",{\"1\":{\"1141\":1}}],[\"本文参考了以下文章的内容\",{\"1\":{\"147\":1}}],[\"本文主要讲的就是内存分配器的工作方式\",{\"1\":{\"1109\":1}}],[\"本文主要介绍使用在\",{\"1\":{\"218\":1}}],[\"本文以\",{\"1\":{\"1009\":1}}],[\"本文只是对它的基础入门内容做一个讲解\",{\"1\":{\"848\":1}}],[\"本文只是简单讲解如何利用\",{\"1\":{\"230\":1}}],[\"本文只是简单的叙述与介绍它们的使用\",{\"1\":{\"2\":1}}],[\"本文只能算是一个casbin入门文章\",{\"1\":{\"757\":1}}],[\"本文会讲解如何通过\",{\"1\":{\"415\":1}}],[\"本文会讲解如何用\",{\"1\":{\"203\":1}}],[\"本文使用的是github\",{\"1\":{\"240\":1}}],[\"本文仅仅讲解如何使用\",{\"1\":{\"239\":1}}],[\"本文用\",{\"1\":{\"204\":1}}],[\"好像也没做什么特别复杂的事情\",{\"1\":{\"823\":1}}],[\"好在这些情况\",{\"1\":{\"582\":1}}],[\"好在\",{\"1\":{\"548\":1}}],[\"好在大多情况下并不需要自行编写汇编\",{\"1\":{\"488\":1}}],[\"好吧\",{\"1\":{\"159\":4}}],[\"好不好用要根据实际体验来看\",{\"1\":{\"50\":1}}],[\"聊天服务\",{\"1\":{\"159\":1}}],[\"比对两个键是否相等\",{\"1\":{\"1036\":1}}],[\"比起直接操作字符串更加节省内存\",{\"1\":{\"719\":1}}],[\"比较重要的是runtime\",{\"1\":{\"1166\":1}}],[\"比较影响程序的运行效率\",{\"1\":{\"1134\":1}}],[\"比较简单易懂\",{\"1\":{\"945\":1,\"967\":1}}],[\"比较简单不再赘述\",{\"1\":{\"164\":1}}],[\"比较推荐使用手动事务\",{\"1\":{\"902\":1}}],[\"比较认同这个\",{\"1\":{\"849\":1}}],[\"比较巧妙\",{\"1\":{\"711\":1}}],[\"比较字符串\",{\"0\":{\"705\":1}}],[\"比较方法\",{\"1\":{\"683\":1,\"688\":1}}],[\"比较好用的解析\",{\"1\":{\"620\":1}}],[\"比较可惜的是\",{\"1\":{\"587\":1}}],[\"比较典型的例子就是其他语言中的foreach\",{\"1\":{\"582\":1}}],[\"比较器由调用者提供\",{\"1\":{\"578\":1}}],[\"比较\",{\"0\":{\"332\":1,\"935\":1}}],[\"比较流行\",{\"1\":{\"231\":1}}],[\"比它们还要更复杂些\",{\"1\":{\"158\":1}}],[\"比如栈中的黑色对象引用了堆中的白色对象\",{\"1\":{\"1142\":1}}],[\"比如表示用户堆的结构体runtime\",{\"1\":{\"1129\":1}}],[\"比如常见的空指针访问\",{\"1\":{\"1077\":1}}],[\"比如文件关闭之类的操作\",{\"1\":{\"1072\":1}}],[\"比如开启一个\",{\"1\":{\"1071\":1}}],[\"比如切片\",{\"1\":{\"1070\":1}}],[\"比如说栈\",{\"1\":{\"1114\":1}}],[\"比如说将count置\",{\"1\":{\"1040\":1}}],[\"比如说在迭代器循环中返回\",{\"1\":{\"582\":1}}],[\"比如上图中的紫色切片\",{\"1\":{\"1019\":1}}],[\"比如上述的例子输出可能如下\",{\"1\":{\"485\":1}}],[\"比如关联查找一个人的母亲\",{\"1\":{\"894\":1}}],[\"比如关闭一个文件\",{\"1\":{\"829\":1}}],[\"比如模型名\",{\"1\":{\"862\":1}}],[\"比如momid\",{\"1\":{\"860\":1}}],[\"比如map\",{\"1\":{\"37\":1}}],[\"比如id对应列名id\",{\"1\":{\"853\":1}}],[\"比如几乎所有的方法参数都是空接口类型\",{\"1\":{\"849\":1}}],[\"比如一些系统调用\",{\"1\":{\"1085\":1}}],[\"比如一般我们会定义一个统一的响应体\",{\"1\":{\"1013\":1}}],[\"比如一般大家都会把项目放在\",{\"1\":{\"23\":1}}],[\"比如一个用户\",{\"1\":{\"773\":1}}],[\"比如数组和结构体\",{\"1\":{\"751\":1}}],[\"比如数字字符串\",{\"1\":{\"725\":1}}],[\"比如template\",{\"1\":{\"736\":1}}],[\"比如timeformat分析器是检查time\",{\"1\":{\"37\":1}}],[\"比如pongo2\",{\"1\":{\"722\":1}}],[\"比如player\",{\"1\":{\"193\":1}}],[\"比如json\",{\"1\":{\"616\":1}}],[\"比如你可以不用任何外部依赖\",{\"1\":{\"616\":1}}],[\"比如对数据流进行排序\",{\"1\":{\"586\":1}}],[\"比如将所有人的地址搜集到一个字符串切片中\",{\"1\":{\"871\":1}}],[\"比如将person修改为下面这种\",{\"1\":{\"540\":1}}],[\"比如将上述t\",{\"1\":{\"522\":1}}],[\"比如想要执行test包下所有的测试用例\",{\"1\":{\"518\":1}}],[\"比如因cas引起\",{\"1\":{\"490\":1}}],[\"比如整型类型都会提供add方法来实现原子加减操作\",{\"1\":{\"489\":1}}],[\"比如协程\",{\"1\":{\"484\":1}}],[\"比如协程调度\",{\"1\":{\"96\":1}}],[\"比如再开几个子协程破坏了不变量\",{\"1\":{\"479\":1}}],[\"比如指定一个具体时间2023\",{\"1\":{\"478\":1}}],[\"比如之前提到过的\",{\"1\":{\"411\":1}}],[\"比如之前用到的memhash就会用到这个指令\",{\"1\":{\"47\":1}}],[\"比如sha1\",{\"1\":{\"616\":1}}],[\"比如shadows\",{\"1\":{\"37\":1}}],[\"比如string\",{\"1\":{\"382\":1}}],[\"比如os\",{\"1\":{\"330\":1}}],[\"比如通过\",{\"1\":{\"205\":1}}],[\"比如增删改查之类的\",{\"1\":{\"203\":1}}],[\"比如现有一个文件protos\",{\"1\":{\"201\":1}}],[\"比如``\",{\"1\":{\"201\":1}}],[\"比如生成openapi接口文档的插件等等\",{\"1\":{\"200\":1}}],[\"比如控制\",{\"1\":{\"198\":1}}],[\"比如服务的心跳检查\",{\"1\":{\"175\":1}}],[\"比如浏览器通过\",{\"1\":{\"174\":1}}],[\"比如使用rm删除一个非空的目录\",{\"1\":{\"168\":1}}],[\"比如磁盘容量不够了之类的情况\",{\"1\":{\"168\":1}}],[\"比如runtime\",{\"1\":{\"114\":1}}],[\"比如内存布局\",{\"1\":{\"114\":1}}],[\"比如编写一个\",{\"1\":{\"105\":1}}],[\"比如令人诟病的错误处理\",{\"1\":{\"88\":1}}],[\"比如在直接挂到后端的静态html页面就需要用到模板引擎\",{\"1\":{\"722\":1}}],[\"比如在\",{\"1\":{\"201\":1}}],[\"比如在example包下有一个test函数\",{\"1\":{\"44\":1}}],[\"比如在发生错误时\",{\"1\":{\"43\":1}}],[\"比如导入unsafe包\",{\"1\":{\"44\":1}}],[\"比如gzip\",{\"1\":{\"616\":1}}],[\"比如gin\",{\"1\":{\"557\":1}}],[\"比如github\",{\"1\":{\"509\":1}}],[\"比如git\",{\"1\":{\"493\":1}}],[\"比如generate\",{\"1\":{\"39\":1}}],[\"比如generate指令通常用于代码生成的功能\",{\"1\":{\"39\":1}}],[\"比如go\",{\"1\":{\"7\":1}}],[\"比如eslint\",{\"1\":{\"37\":1}}],[\"比如更新\",{\"1\":{\"18\":1}}],[\"比如v1\",{\"1\":{\"18\":1}}],[\"比如去除冗余的括号\",{\"1\":{\"17\":1}}],[\"比如执行如下的命令\",{\"1\":{\"15\":1}}],[\"比如下面这段经典代码\",{\"1\":{\"1106\":1}}],[\"比如下面这种情况就不需要移动指针\",{\"1\":{\"1021\":1}}],[\"比如下面这种\",{\"1\":{\"1020\":1}}],[\"比如下面这行代码\",{\"1\":{\"867\":1}}],[\"比如下面这个函数\",{\"1\":{\"1033\":1}}],[\"比如下面这个代码\",{\"1\":{\"414\":1}}],[\"比如下面这个例子\",{\"1\":{\"12\":1,\"26\":1,\"41\":1,\"295\":1,\"402\":1}}],[\"比如下面的例子\",{\"1\":{\"376\":1,\"598\":1,\"733\":1}}],[\"比如下面的代码只是声明了变量\",{\"1\":{\"329\":1}}],[\"比如下面的一个例子\",{\"1\":{\"294\":1}}],[\"比如下面几个\",{\"1\":{\"38\":1}}],[\"比如下面几个命令\",{\"1\":{\"38\":1}}],[\"比如下面简单的例子是以main\",{\"1\":{\"8\":1}}],[\"比如如果要查看代码的汇编形式\",{\"1\":{\"9\":1}}],[\"比如相对路径\",{\"1\":{\"8\":1}}],[\"比如查看runtime\",{\"1\":{\"4\":1}}],[\"比如查看runtime包的文档注释\",{\"1\":{\"4\":1}}],[\"比如\",{\"1\":{\"3\":1,\"7\":2,\"8\":1,\"9\":1,\"14\":1,\"27\":1,\"29\":2,\"30\":1,\"38\":1,\"39\":1,\"40\":1,\"41\":1,\"95\":1,\"124\":1,\"133\":1,\"139\":1,\"201\":1,\"231\":1,\"324\":1,\"329\":2,\"341\":1,\"478\":1,\"500\":1,\"534\":2,\"547\":1,\"559\":1,\"582\":2,\"615\":2,\"727\":1,\"732\":1,\"733\":1,\"851\":1,\"860\":1,\"874\":2,\"875\":1,\"1030\":1,\"1067\":1,\"1074\":1,\"1101\":1}}],[\"消费者模型\",{\"1\":{\"1170\":1}}],[\"消费者模型的队列\",{\"1\":{\"1137\":1}}],[\"消耗低\",{\"1\":{\"770\":1}}],[\"消息接收后\",{\"1\":{\"166\":1}}],[\"消息接收前\",{\"1\":{\"166\":1}}],[\"消息发送后\",{\"1\":{\"166\":1}}],[\"消息发送前\",{\"1\":{\"166\":1}}],[\"消息发送完了\",{\"1\":{\"158\":1}}],[\"消息发完了\",{\"1\":{\"159\":1}}],[\"消除后在运行时通过runtime\",{\"1\":{\"8\":1}}],[\"消除源文件路径前缀\",{\"1\":{\"8\":1}}],[\"暂停整个程序\",{\"1\":{\"1134\":1}}],[\"暂停\",{\"0\":{\"1093\":1}}],[\"暂停1ms\",{\"1\":{\"462\":1}}],[\"暂时不管其内部实现\",{\"1\":{\"988\":1}}],[\"暂时允许其存在\",{\"1\":{\"114\":1}}],[\"暂无消息\",{\"1\":{\"158\":2}}],[\"许多知名的项目都使用viper\",{\"1\":{\"788\":1}}],[\"许多\",{\"1\":{\"547\":1}}],[\"许多并发安全的数据结构都采用了cas来进行实现\",{\"1\":{\"490\":1}}],[\"许多命令\",{\"1\":{\"201\":1}}],[\"许多开源的框架也都是对这一个流程进行了封装\",{\"1\":{\"155\":1}}],[\"许多的内容都是查阅了大量的资料\",{\"1\":{\"0\":1}}],[\"例\",{\"0\":{\"779\":1,\"780\":1,\"781\":1,\"782\":1,\"783\":1,\"784\":1,\"785\":1},\"1\":{\"519\":1,\"945\":2,\"1017\":1}}],[\"例子通过unsafe\",{\"1\":{\"536\":1}}],[\"例子输出如下\",{\"1\":{\"481\":1}}],[\"例子中\",{\"1\":{\"860\":1}}],[\"例子中编写了一个名为printsum的函数\",{\"1\":{\"531\":1}}],[\"例子中的模板根据传入的语言lang来决定要以何种方式展示内容\",{\"1\":{\"731\":1}}],[\"例子中的交集肯定就是signedint\",{\"1\":{\"574\":1}}],[\"例子中的t\",{\"1\":{\"521\":1}}],[\"例子中的\",{\"1\":{\"509\":1}}],[\"例子中开启了\",{\"1\":{\"485\":1}}],[\"例子中创建了\",{\"1\":{\"477\":1}}],[\"例子中分别输出了字节的十进制形式和十六进制形式\",{\"1\":{\"380\":1}}],[\"例子中使用了匿名标识符\",{\"1\":{\"325\":1}}],[\"例子如下\",{\"1\":{\"331\":1,\"348\":1,\"351\":1,\"356\":1,\"357\":1,\"362\":1,\"376\":1,\"377\":1,\"382\":1,\"404\":1,\"408\":1,\"435\":1,\"452\":1,\"462\":3,\"464\":1,\"471\":1,\"480\":1,\"533\":1,\"534\":1,\"568\":1,\"574\":2,\"595\":2,\"603\":2,\"606\":1,\"727\":1}}],[\"例子\",{\"0\":{\"809\":1},\"1\":{\"155\":1,\"320\":1,\"509\":1,\"603\":1,\"648\":1,\"649\":1,\"739\":1,\"1011\":1}}],[\"例如这种\",{\"1\":{\"1027\":1}}],[\"例如s\",{\"1\":{\"1019\":1}}],[\"例如c\",{\"1\":{\"975\":1}}],[\"例如cmd\",{\"1\":{\"14\":1}}],[\"例如检查所需值的存在\",{\"1\":{\"963\":1}}],[\"例如可以在验证时提取\",{\"1\":{\"927\":1}}],[\"例如直接传结构体\",{\"1\":{\"888\":1}}],[\"例如想要查询出所有id值大于平均值的人\",{\"1\":{\"880\":1}}],[\"例如拉取镜像\",{\"1\":{\"800\":1}}],[\"例如rsa\",{\"1\":{\"777\":1}}],[\"例如r2\",{\"1\":{\"763\":1}}],[\"例如内容有篡改\",{\"1\":{\"775\":1}}],[\"例如有如下自定义函数\",{\"1\":{\"728\":1}}],[\"例如之前用到的index函数\",{\"1\":{\"728\":1}}],[\"例如将strings\",{\"1\":{\"719\":1}}],[\"例如zap等等\",{\"1\":{\"649\":1}}],[\"例如url之类的\",{\"1\":{\"616\":1}}],[\"例如常用的closer\",{\"1\":{\"616\":1}}],[\"例如defer\",{\"1\":{\"606\":1}}],[\"例如执行defer语句\",{\"1\":{\"606\":1}}],[\"例如erros包下的errorstring就是一个很简单的实现\",{\"1\":{\"601\":1}}],[\"例如int可以被int64类型所代表\",{\"1\":{\"595\":1}}],[\"例如int64类型的cas\",{\"1\":{\"490\":1}}],[\"例如现在有一个类型map\",{\"1\":{\"594\":1}}],[\"例如闭包中\",{\"1\":{\"573\":1}}],[\"例如上述例子中的\",{\"1\":{\"527\":1}}],[\"例如标准库context\",{\"1\":{\"520\":1}}],[\"例如200x\",{\"1\":{\"519\":1}}],[\"例如只运行所有的基准测试的命令如下\",{\"1\":{\"518\":1}}],[\"例如示例测试是examplexxxx\",{\"1\":{\"517\":1}}],[\"例如benchmark\",{\"1\":{\"517\":1}}],[\"例如要测试某一个功能\",{\"1\":{\"517\":1}}],[\"例如打开\",{\"1\":{\"509\":1}}],[\"例如事先知晓协程的数量\",{\"1\":{\"472\":1}}],[\"例如用于关闭通道的内置函数close的函数签名就用到了单向通道\",{\"1\":{\"469\":1}}],[\"例如性能问题等等\",{\"1\":{\"427\":1}}],[\"例如修改文件描述符和文件权限\",{\"1\":{\"416\":1}}],[\"例如切片是可寻址\",{\"1\":{\"414\":1}}],[\"例如访问字符串第一个元素\",{\"1\":{\"375\":1}}],[\"例如使用for\",{\"1\":{\"355\":1}}],[\"例如声明新变量\",{\"1\":{\"350\":1}}],[\"例如^a\",{\"1\":{\"299\":1}}],[\"例如a^b\",{\"1\":{\"299\":1}}],[\"例如包\",{\"1\":{\"295\":1}}],[\"例如一个常见的场景就是注册数据库驱动\",{\"1\":{\"295\":1}}],[\"例如默认的\",{\"1\":{\"174\":1}}],[\"例如下例中的tinyint与~int8有交集\",{\"1\":{\"575\":1}}],[\"例如下面例子中的v0\",{\"1\":{\"509\":1}}],[\"例如下面的这种代码\",{\"1\":{\"1066\":1}}],[\"例如下面的结构体\",{\"1\":{\"853\":1}}],[\"例如下面的模板\",{\"1\":{\"728\":1}}],[\"例如下面的例子\",{\"1\":{\"462\":1}}],[\"例如下面的错误示范\",{\"1\":{\"462\":1}}],[\"例如下面的函数func\",{\"1\":{\"398\":1}}],[\"例如下面的代码就可能会出现问题\",{\"1\":{\"751\":1}}],[\"例如下面的代码\",{\"1\":{\"168\":1,\"227\":1,\"333\":1}}],[\"例如下面的示例\",{\"1\":{\"21\":1}}],[\"例如下列情况有非常大的可能性会触发fatal\",{\"1\":{\"389\":1}}],[\"例如下方\",{\"1\":{\"772\":1,\"775\":1}}],[\"例如下方节选自os\",{\"1\":{\"600\":1}}],[\"例如下方代码例子\",{\"1\":{\"598\":1}}],[\"例如下方代码无论执行多少次都只会输出\",{\"1\":{\"471\":1}}],[\"例如下方代码\",{\"1\":{\"380\":1,\"462\":1}}],[\"例如下方的例子\",{\"1\":{\"774\":1,\"956\":1}}],[\"例如下方的例子中省略了max\",{\"1\":{\"371\":1}}],[\"例如下方的命令\",{\"1\":{\"518\":2}}],[\"例如下方的代码\",{\"1\":{\"380\":1,\"472\":1,\"487\":1}}],[\"例如下方的数学运算\",{\"1\":{\"311\":1}}],[\"例如下载由\",{\"1\":{\"504\":1}}],[\"例如下载\",{\"1\":{\"19\":1}}],[\"例如在amd64的机器上\",{\"1\":{\"750\":1}}],[\"例如在defer中再次闭包使用recover\",{\"1\":{\"607\":1}}],[\"例如在一个新的版本发布后发现了一个重大问题\",{\"1\":{\"509\":1}}],[\"例如在\",{\"1\":{\"291\":1}}],[\"例如在windows上编译成linux或darwin上的二进制文件\",{\"1\":{\"11\":1}}],[\"例如在1\",{\"1\":{\"7\":1}}],[\"例如ldflags\",{\"1\":{\"9\":1}}],[\"例如\",{\"1\":{\"7\":2,\"13\":1,\"19\":1,\"20\":1,\"32\":1,\"33\":1,\"37\":1,\"201\":1,\"297\":1,\"324\":1,\"329\":1,\"341\":1,\"348\":1,\"368\":1,\"380\":1,\"383\":1,\"384\":1,\"385\":1,\"386\":2,\"391\":5,\"392\":1,\"407\":1,\"432\":1,\"471\":1,\"492\":1,\"505\":1,\"509\":4,\"518\":2,\"568\":1,\"602\":1,\"725\":3,\"729\":1,\"748\":1,\"749\":1,\"750\":1,\"751\":3,\"752\":1,\"762\":1,\"767\":1,\"773\":1,\"791\":1,\"796\":1,\"799\":1,\"821\":1,\"828\":1,\"862\":8,\"863\":1,\"869\":1,\"930\":1,\"938\":1,\"946\":1,\"963\":1,\"971\":1,\"974\":1,\"1017\":1,\"1020\":1,\"1114\":1}}],[\"例如google\",{\"1\":{\"509\":1}}],[\"例如go\",{\"1\":{\"7\":1}}],[\"请看下面的一个例子\",{\"1\":{\"948\":1}}],[\"请自行了解\",{\"1\":{\"907\":1}}],[\"请移步泛型\",{\"1\":{\"569\":1}}],[\"请移步相关文档\",{\"1\":{\"151\":1}}],[\"请先自行了解和学习\",{\"1\":{\"218\":1}}],[\"请先自行学习\",{\"1\":{\"203\":1}}],[\"请查阅官方文档es\",{\"1\":{\"205\":1}}],[\"请求用时\",{\"1\":{\"996\":2}}],[\"请求响应对象和请求对象\",{\"1\":{\"986\":1}}],[\"请求期间发生的所有错误\",{\"1\":{\"963\":1}}],[\"请求中的\",{\"1\":{\"963\":1}}],[\"请求中的超时数据对应着headers\",{\"1\":{\"169\":1}}],[\"请求可以由一系列中间件和最终操作来处理\",{\"1\":{\"963\":1}}],[\"请求部分并不由casbin负责\",{\"1\":{\"761\":1}}],[\"请求定义部分为\",{\"1\":{\"761\":1}}],[\"请求一样差不多\",{\"1\":{\"207\":1}}],[\"请求加上一个超时时间\",{\"1\":{\"171\":1}}],[\"请求被打断\",{\"1\":{\"168\":1}}],[\"请求被取消\",{\"1\":{\"168\":1}}],[\"请求超时时间配置\",{\"1\":{\"640\":1}}],[\"请求超时\",{\"0\":{\"171\":1},\"1\":{\"168\":1}}],[\"请求数据\",{\"1\":{\"166\":1}}],[\"请求的状态\",{\"1\":{\"168\":1}}],[\"请求的状态变为send\",{\"1\":{\"162\":1}}],[\"请求的结束\",{\"1\":{\"165\":1}}],[\"请求的有unaryserverinterceptor和streamserverinterceptor\",{\"1\":{\"165\":1}}],[\"请求结束后才会被发送\",{\"1\":{\"162\":1}}],[\"请求成功了\",{\"1\":{\"162\":1}}],[\"请求处理起来的话不论是客户端还是服务端都要比一元\",{\"1\":{\"158\":1}}],[\"请求时作为\",{\"1\":{\"163\":1}}],[\"请求时\",{\"1\":{\"158\":1}}],[\"请求也就会结束\",{\"1\":{\"157\":2}}],[\"请求\",{\"0\":{\"761\":1},\"1\":{\"151\":1,\"759\":1,\"965\":1,\"984\":2,\"1071\":1}}],[\"请不要带着\",{\"1\":{\"95\":1}}],[\"名为id的字段就是主键\",{\"1\":{\"858\":1}}],[\"名字包含jack\",{\"1\":{\"942\":1,\"952\":3}}],[\"名字小写或下划线开头\",{\"1\":{\"294\":1}}],[\"名字这里取\",{\"1\":{\"148\":1}}],[\"名称以便在错误信息中显示\",{\"1\":{\"927\":1}}],[\"名称大写字母开头\",{\"1\":{\"294\":1}}],[\"名称\",{\"1\":{\"51\":1,\"52\":1,\"53\":1,\"54\":1,\"55\":1,\"56\":1,\"57\":1,\"58\":1,\"59\":1,\"60\":1,\"61\":1,\"62\":1,\"63\":1,\"64\":1,\"65\":1,\"66\":1,\"67\":1,\"68\":1,\"69\":1,\"70\":1,\"71\":1,\"72\":1,\"73\":1,\"74\":1,\"75\":1,\"76\":1,\"77\":1,\"78\":1,\"79\":1,\"80\":1,\"81\":1,\"82\":1,\"83\":1,\"84\":1,\"85\":1,\"98\":1,\"99\":1,\"100\":1,\"101\":1,\"102\":1,\"106\":1,\"107\":1,\"108\":1,\"112\":1,\"617\":1,\"1086\":1}}],[\"系语言\",{\"1\":{\"341\":1}}],[\"系列\",{\"1\":{\"147\":1}}],[\"系统监控\",{\"1\":{\"1108\":1}}],[\"系统监控本身只是一个for循环\",{\"1\":{\"1082\":1}}],[\"系统调用\",{\"0\":{\"1097\":1},\"1\":{\"1108\":1}}],[\"系统调用等原因需要暂停\",{\"1\":{\"1093\":1}}],[\"系统线程\",{\"1\":{\"1083\":1}}],[\"系统上\",{\"1\":{\"905\":1}}],[\"系统上至少需要\",{\"1\":{\"116\":1}}],[\"系统中局部的请求会经过此中间件\",{\"1\":{\"994\":1}}],[\"系统中\",{\"1\":{\"471\":1}}],[\"系统创建协程需要时间\",{\"1\":{\"462\":1}}],[\"系统创始人\",{\"1\":{\"87\":1}}],[\"系统内部错误\",{\"1\":{\"168\":1}}],[\"系统交互\",{\"0\":{\"74\":1}}],[\"熊喵君的博客\",{\"1\":{\"147\":1}}],[\"掘金\",{\"1\":{\"147\":1,\"175\":1,\"620\":1,\"750\":1}}],[\"教程\",{\"1\":{\"147\":1,\"218\":1}}],[\"虽然它的名字有抢占的字眼\",{\"1\":{\"1106\":1}}],[\"虽然它在语法上给我们提供了便利\",{\"1\":{\"1076\":1}}],[\"虽然在前面并没有看到判断缓冲区是否满了的逻辑\",{\"1\":{\"1060\":1}}],[\"虽然分配了内存但是上面什么都没有\",{\"1\":{\"1053\":1}}],[\"虽然其长度是确定的但它们没有任何内容\",{\"1\":{\"1053\":1}}],[\"虽然其最后还是由concatstrings来完成拼接\",{\"1\":{\"1053\":1}}],[\"虽然stringheader在版本go\",{\"1\":{\"1052\":1}}],[\"虽然不允许同时并发读写\",{\"1\":{\"1037\":1}}],[\"虽然本身自带的功能很少\",{\"1\":{\"992\":1}}],[\"虽然组件自带的验证\",{\"1\":{\"949\":1}}],[\"虽然有时候并不一定需要\",{\"1\":{\"790\":1}}],[\"虽然载荷部分也受到保护\",{\"1\":{\"773\":1}}],[\"虽然casbin设计了上述政策效果的语法\",{\"1\":{\"763\":1}}],[\"虽然并没有提供特定语法来访问某一个索引的值\",{\"1\":{\"725\":1}}],[\"虽然标准库中没有定义\",{\"1\":{\"582\":1}}],[\"虽然下列的写法是允许的\",{\"1\":{\"573\":1}}],[\"虽然这放在其他语言中看起来很离谱\",{\"1\":{\"567\":1}}],[\"虽然使用\",{\"1\":{\"547\":1}}],[\"虽然myint是一个值类型\",{\"1\":{\"414\":1}}],[\"虽然没有像\",{\"1\":{\"501\":1}}],[\"虽然没有明令禁止\",{\"1\":{\"401\":1}}],[\"虽然没法正常获取\",{\"1\":{\"386\":1}}],[\"虽然没法修改字符串\",{\"1\":{\"375\":1}}],[\"虽然可以不用指定类型\",{\"1\":{\"329\":1}}],[\"虽然\",{\"1\":{\"147\":1,\"175\":1,\"775\":1}}],[\"定时强制触发\",{\"1\":{\"1132\":1}}],[\"定时任务库\",{\"1\":{\"66\":2}}],[\"定位旧桶中指定的哈希桶\",{\"1\":{\"1042\":1}}],[\"定位哈希桶\",{\"1\":{\"1039\":1}}],[\"定位\",{\"1\":{\"1036\":1}}],[\"定义并生成界面\",{\"1\":{\"1016\":1}}],[\"定义接口响应的基本格式如下\",{\"1\":{\"1013\":1}}],[\"定义参数的格式为\",{\"1\":{\"1012\":1}}],[\"定义列的默认值\",{\"1\":{\"862\":1}}],[\"定义列数据类型的大小或长度\",{\"1\":{\"862\":1}}],[\"定义injector\",{\"1\":{\"824\":2}}],[\"定义完毕后\",{\"1\":{\"824\":1}}],[\"定义好数据\",{\"1\":{\"895\":1}}],[\"定义好\",{\"1\":{\"792\":1}}],[\"定义为\",{\"1\":{\"505\":1}}],[\"定义了alice属于domain1具有角色admin\",{\"1\":{\"767\":1}}],[\"定义了属于领域domain1的主体admin具有对data1进行read操作的权限\",{\"1\":{\"767\":1}}],[\"定义了一系列文件系统的接口\",{\"1\":{\"616\":1}}],[\"定义了一系列基础的io接口\",{\"1\":{\"616\":1}}],[\"定义了\",{\"1\":{\"168\":1}}],[\"定义的injector\",{\"1\":{\"823\":1}}],[\"定义的\",{\"1\":{\"167\":1,\"168\":1}}],[\"定义的字段\",{\"1\":{\"152\":2}}],[\"定义\",{\"0\":{\"151\":1,\"633\":1},\"1\":{\"194\":1}}],[\"定义服务的主体\",{\"1\":{\"168\":1}}],[\"定义服务\",{\"1\":{\"147\":1,\"151\":1}}],[\"特别适合用来表达或编辑数据结构\",{\"1\":{\"621\":1}}],[\"特殊字符\",{\"1\":{\"160\":1}}],[\"特点\",{\"0\":{\"147\":1,\"849\":1},\"1\":{\"156\":1}}],[\"特性也并不多\",{\"1\":{\"609\":1}}],[\"特性\",{\"0\":{\"88\":1,\"963\":1},\"1\":{\"530\":1}}],[\"官网中还给出了其他几个例子\",{\"1\":{\"508\":1}}],[\"官网查找\",{\"1\":{\"147\":1}}],[\"官网\",{\"1\":{\"146\":1,\"179\":1}}],[\"官方给出一个例子\",{\"1\":{\"1151\":1}}],[\"官方给出了两个快速开始的示例\",{\"1\":{\"838\":1}}],[\"官方给出了几种格式方法\",{\"1\":{\"698\":1}}],[\"官方给出了几个示例\",{\"1\":{\"168\":1}}],[\"官方给出了很明确的定义\",{\"1\":{\"428\":1}}],[\"官方用一句话概括了上面伪代码的作用\",{\"1\":{\"1144\":1}}],[\"官方在\",{\"1\":{\"1107\":1}}],[\"官方在参考手册中对于接口的定义为\",{\"1\":{\"563\":1}}],[\"官方设计了一种优化方\",{\"1\":{\"1076\":1}}],[\"官方地址\",{\"1\":{\"926\":1}}],[\"官方地址是在谷歌仓库里\",{\"1\":{\"88\":1}}],[\"官方例子很少\",{\"1\":{\"838\":1}}],[\"官方示例\",{\"1\":{\"831\":1,\"926\":1,\"961\":1}}],[\"官方api只有go和python版本\",{\"1\":{\"800\":1}}],[\"官方称viper可以满足所有应用程序配置需求\",{\"1\":{\"788\":1}}],[\"官方正在讨论向viper2过渡\",{\"1\":{\"786\":1}}],[\"官方并没有提供对于\",{\"1\":{\"621\":1}}],[\"官方并没有映射成\",{\"1\":{\"210\":1}}],[\"官方取这个名字是为了方便理解\",{\"1\":{\"581\":1}}],[\"官方有详细的英文注释\",{\"1\":{\"1151\":1}}],[\"官方有关于日志级别的枚举项\",{\"1\":{\"842\":1}}],[\"官方有一个简单的介绍\",{\"1\":{\"529\":1}}],[\"官方有专门的依赖查询网站\",{\"1\":{\"502\":1}}],[\"官方也不建议在\",{\"1\":{\"543\":1}}],[\"官方也没说干什么用的\",{\"1\":{\"510\":1}}],[\"官方也提供了相关的函数以供使用\",{\"1\":{\"165\":1}}],[\"官方对于上面四种测试类型的解释\",{\"1\":{\"516\":1}}],[\"官方对于模块的定义为\",{\"1\":{\"505\":1}}],[\"官方对于\",{\"1\":{\"492\":1}}],[\"官方对于教程的支持也是十分的丰富\",{\"1\":{\"285\":1}}],[\"官方终于推出了\",{\"1\":{\"492\":1}}],[\"官方终于要解决了\",{\"1\":{\"116\":1}}],[\"官方保证sync\",{\"1\":{\"485\":1}}],[\"官方大概每半年发布一个二级版本\",{\"1\":{\"291\":1}}],[\"官方仓库\",{\"1\":{\"239\":1,\"757\":1,\"776\":1,\"831\":1,\"836\":1}}],[\"官方聚合示例\",{\"1\":{\"229\":1}}],[\"官方删除示例\",{\"1\":{\"228\":1}}],[\"官方更新示例\",{\"1\":{\"227\":1}}],[\"官方创建实例\",{\"1\":{\"226\":1}}],[\"官方查询示例\",{\"1\":{\"223\":1}}],[\"官方非常详细的演示了如何使用上述四种类型\",{\"1\":{\"222\":1}}],[\"官方分布式搜索和分析引擎\",{\"1\":{\"203\":1}}],[\"官方教程\",{\"1\":{\"180\":1}}],[\"官方网址\",{\"1\":{\"146\":1,\"203\":1}}],[\"官方网站\",{\"1\":{\"88\":1}}],[\"官方如下回答\",{\"1\":{\"146\":1}}],[\"官方建议在整个程序的生命周期中\",{\"1\":{\"940\":1}}],[\"官方建议\",{\"1\":{\"143\":1}}],[\"官方文档地址\",{\"1\":{\"745\":1}}],[\"官方文档里面称其为pipeline\",{\"1\":{\"729\":1}}],[\"官方文档也有解释\",{\"1\":{\"370\":1}}],[\"官方文档也有介绍\",{\"1\":{\"42\":1}}],[\"官方文档中零值称为zero\",{\"1\":{\"321\":1}}],[\"官方文档\",{\"0\":{\"286\":1},\"1\":{\"139\":1,\"146\":1,\"239\":1,\"690\":1,\"702\":1,\"722\":1,\"757\":1,\"776\":1,\"831\":1,\"836\":1,\"848\":1,\"961\":1}}],[\"官方采用语义化版本来进行版本标识\",{\"1\":{\"113\":1}}],[\"官方本身没有提供\",{\"1\":{\"105\":1}}],[\"官方\",{\"1\":{\"104\":1,\"105\":1}}],[\"官方的中文文档已经很详细了\",{\"1\":{\"925\":1}}],[\"官方的操作系统交互库\",{\"1\":{\"74\":1}}],[\"官方的\",{\"1\":{\"62\":1}}],[\"官方的一个态度\",{\"1\":{\"17\":1}}],[\"官方驱动\",{\"1\":{\"62\":1}}],[\"官方提出了另一种解决办法\",{\"1\":{\"568\":1}}],[\"官方提供了一个格式化工具gofmt\",{\"1\":{\"308\":1}}],[\"官方提供了可以让我们自定义行输出格式的参数\",{\"1\":{\"21\":1}}],[\"官方提倡的方法是使用\",{\"1\":{\"38\":1}}],[\"官方专门记录了godebug\",{\"1\":{\"7\":1}}],[\"技术教程\",{\"1\":{\"146\":1}}],[\"技术论坛\",{\"1\":{\"99\":1}}],[\"移除\",{\"1\":{\"485\":1}}],[\"移除某一依赖\",{\"1\":{\"18\":1}}],[\"移动指针找到元素的位置\",{\"1\":{\"1039\":1}}],[\"移动指针找到key的位置\",{\"1\":{\"1039\":1}}],[\"移动指针获取指定位置的bmap\",{\"1\":{\"1038\":1}}],[\"移动指针获取值\",{\"1\":{\"1037\":1}}],[\"移动指针获取键\",{\"1\":{\"1037\":1}}],[\"移动i\",{\"1\":{\"1030\":1}}],[\"移动变量后\",{\"1\":{\"751\":1}}],[\"移动元素\",{\"0\":{\"274\":1}}],[\"移动应用程序和浏览器到后端服务的最后一英里分布式计算\",{\"1\":{\"146\":1}}],[\"远程过程调用\",{\"1\":{\"146\":1}}],[\"远程调用\",{\"1\":{\"145\":1,\"154\":1,\"174\":1,\"175\":1}}],[\"建筑完成\",{\"1\":{\"567\":3}}],[\"建筑得以顺利完成\",{\"1\":{\"567\":1}}],[\"建筑公司结构体内部声明了一个crane类型的成员变量\",{\"1\":{\"567\":1}}],[\"建筑公司不在乎是用什么技术实现的\",{\"1\":{\"567\":1}}],[\"建筑公司并不负责造起重机\",{\"1\":{\"567\":1}}],[\"建立连接后\",{\"1\":{\"159\":1,\"852\":1}}],[\"建立连接\",{\"0\":{\"243\":1},\"1\":{\"145\":1,\"154\":1,\"174\":1,\"175\":1,\"682\":2}}],[\"建议选择后者\",{\"1\":{\"971\":1}}],[\"建议要在注册之后导入\",{\"1\":{\"953\":1}}],[\"建议在使用时应当格外注意\",{\"1\":{\"751\":1}}],[\"建议在新版本稳定后及时将\",{\"1\":{\"113\":1}}],[\"建议还是用普通的构造函数来解决\",{\"1\":{\"406\":1}}],[\"建议预分配一个足够的容量\",{\"1\":{\"364\":1}}],[\"建议使用update方法\",{\"1\":{\"885\":1}}],[\"建议使用html\",{\"1\":{\"736\":1}}],[\"建议使用<stdint\",{\"1\":{\"537\":1}}],[\"建议使用下面这种方式进行转换\",{\"1\":{\"362\":1}}],[\"建议使用流对象的sendheader方法和setheader方法\",{\"1\":{\"162\":1}}],[\"建议使用第二个因为不需要魔法上网\",{\"1\":{\"104\":1}}],[\"建议使用微软的版本\",{\"1\":{\"62\":1}}],[\"建议使用go\",{\"1\":{\"25\":1,\"964\":1}}],[\"向mcache分配mspan的工作由mcentral\",{\"1\":{\"1117\":1}}],[\"向已关闭的管道发送数据\",{\"1\":{\"1067\":1}}],[\"向管道发送数据时\",{\"1\":{\"1059\":1}}],[\"向业务服务发起请求\",{\"1\":{\"785\":1}}],[\"向上取整\",{\"0\":{\"662\":1}}],[\"向下取整\",{\"0\":{\"661\":1}}],[\"向对象池申请的一个对象\",{\"1\":{\"485\":1}}],[\"向a管道写入数据\",{\"1\":{\"471\":1}}],[\"向文件写入字节切片也是类似的操作\",{\"1\":{\"418\":1}}],[\"向切片添加完元素后必须覆盖原切片\",{\"1\":{\"414\":1}}],[\"向集合\",{\"1\":{\"223\":1}}],[\"向\",{\"1\":{\"145\":1}}],[\"向unmarshal传递非指针或非接口类型\",{\"1\":{\"37\":1}}],[\"注入调用runtime\",{\"1\":{\"1107\":1}}],[\"注意事项\",{\"0\":{\"1017\":1}}],[\"注意引用表与被引用表的先后创建顺序\",{\"1\":{\"893\":1}}],[\"注意点\",{\"0\":{\"468\":1}}],[\"注意\",{\"0\":{\"389\":1},\"1\":{\"295\":1,\"416\":1,\"418\":1,\"804\":1,\"946\":1}}],[\"注意必须是全局变量\",{\"1\":{\"41\":1}}],[\"注释写在哪里都一样\",{\"1\":{\"1017\":1}}],[\"注释符号\",{\"1\":{\"726\":1}}],[\"注释并不会在最终的模板中生成\",{\"1\":{\"726\":1}}],[\"注释与内容之间建议隔一个空格\",{\"1\":{\"297\":1}}],[\"注释风格跟\",{\"1\":{\"182\":1}}],[\"注释\",{\"0\":{\"182\":1,\"297\":1,\"726\":1},\"1\":{\"182\":3,\"509\":1}}],[\"注销服务\",{\"1\":{\"145\":2}}],[\"注册实例\",{\"1\":{\"1016\":1}}],[\"注册swagger静态文件路由\",{\"1\":{\"1011\":1}}],[\"注册单个路由局部中间件\",{\"1\":{\"994\":1,\"996\":1}}],[\"注册路由组局部中间件\",{\"1\":{\"994\":1,\"996\":1}}],[\"注册全局中间件\",{\"1\":{\"993\":1,\"994\":1,\"996\":1}}],[\"注册处理器\",{\"1\":{\"989\":1,\"990\":1}}],[\"注册默认翻译器\",{\"1\":{\"952\":2}}],[\"注册类型验证函数和对应的类型\",{\"1\":{\"950\":1}}],[\"注册的\",{\"1\":{\"949\":1}}],[\"注册别名\",{\"1\":{\"948\":1}}],[\"注册中心其实就是存放着的就是服务注册名与真实服务地址的映射集合\",{\"1\":{\"175\":1}}],[\"注册自定义的consul解析器\",{\"1\":{\"145\":1}}],[\"注册builder\",{\"1\":{\"145\":1,\"175\":1}}],[\"注册服务\",{\"1\":{\"145\":2,\"153\":1}}],[\"注册\",{\"1\":{\"145\":2}}],[\"省略号必须存在\",{\"1\":{\"360\":1}}],[\"省略类型\",{\"1\":{\"132\":1,\"137\":1}}],[\"省掉了\",{\"1\":{\"144\":1}}],[\"属于是一种正常的流程错误\",{\"1\":{\"599\":1}}],[\"属于是单元测试和基准测试的一种增强\",{\"1\":{\"527\":1}}],[\"属于以下的其中之一\",{\"1\":{\"493\":1}}],[\"属于开箱即用\",{\"1\":{\"472\":1}}],[\"属于空间换时间的一种手段\",{\"1\":{\"410\":1}}],[\"属于\",{\"1\":{\"144\":2,\"849\":1}}],[\"属于企业版功能\",{\"1\":{\"143\":2}}],[\"每开启一个协程都会为其在堆上分配一个独立的栈空间\",{\"1\":{\"1099\":1}}],[\"每搬完一个旧的哈希桶\",{\"1\":{\"1042\":1}}],[\"每次都直接增大一倍\",{\"1\":{\"1025\":1}}],[\"每次要用到\",{\"1\":{\"1003\":1}}],[\"每次增加数字前都会先上锁\",{\"1\":{\"490\":1}}],[\"每次读取数据都需要花费1毫秒\",{\"1\":{\"467\":1}}],[\"每当一个协程执行完毕时调用done\",{\"1\":{\"472\":1}}],[\"每创建一个\",{\"1\":{\"401\":1,\"509\":1}}],[\"每将它调用一次\",{\"1\":{\"399\":1}}],[\"每声明一个变量\",{\"1\":{\"327\":1}}],[\"每种数据库都可能会不一样\",{\"1\":{\"232\":1}}],[\"每秒调用一次\",{\"1\":{\"175\":1}}],[\"每个协程通过\",{\"1\":{\"1165\":1}}],[\"每个协程都会等待条件满足\",{\"1\":{\"1165\":1}}],[\"每个数据库对\",{\"1\":{\"866\":1}}],[\"每个特性都经过了测试的重重考验\",{\"1\":{\"849\":1}}],[\"每个字段都会有名称和类型\",{\"1\":{\"181\":1}}],[\"每个服务都要自己实现一套认证逻辑\",{\"1\":{\"172\":1}}],[\"每个节点只能与同一分区的节点进行通信\",{\"1\":{\"143\":1}}],[\"每一位对应着一片内存空间\",{\"1\":{\"1125\":1}}],[\"每一位标记一个\",{\"1\":{\"1076\":1}}],[\"每一片内存空间的大小由size决定\",{\"1\":{\"1112\":1}}],[\"每一轮标记开始时\",{\"1\":{\"1135\":1}}],[\"每一轮循环的间隔时间为\",{\"1\":{\"1082\":1}}],[\"每一轮迭代时\",{\"1\":{\"582\":1}}],[\"每一次只进行局部的垃圾回收\",{\"1\":{\"1130\":1}}],[\"每一次进行内存分配时\",{\"1\":{\"1112\":1}}],[\"每一次都会搬两个桶\",{\"1\":{\"1042\":1}}],[\"每一次更新的变动都可以在更新日志中查看\",{\"1\":{\"291\":1}}],[\"每一次更新都保持着相当高的兼容性\",{\"1\":{\"113\":1}}],[\"每一次字段的=后面跟的应该是当前message中的唯一编号\",{\"1\":{\"187\":1}}],[\"每一次build都会产生许多文件\",{\"1\":{\"7\":1}}],[\"每一行是就是一个依赖\",{\"1\":{\"27\":1}}],[\"每一个处理器\",{\"1\":{\"1137\":1}}],[\"每一个heaparena管理着若干个页\",{\"1\":{\"1115\":1}}],[\"每一个mspan都拥有一个spanclass\",{\"1\":{\"1123\":1}}],[\"每一个mspan所存放的元素大小elemsize是固定的\",{\"1\":{\"1114\":1}}],[\"每一个msapn管理着mspan\",{\"1\":{\"1114\":1}}],[\"每一个内存块的大小都固定为\",{\"1\":{\"1112\":1}}],[\"每一个线程都会对应若干个协程\",{\"1\":{\"1085\":1}}],[\"每一个case的运行时表示就是scase\",{\"1\":{\"1064\":1}}],[\"每一个case只能操作一个管道\",{\"1\":{\"471\":1}}],[\"每一个地址上都存储着一个字节\",{\"1\":{\"1052\":1}}],[\"每一个请求对应的处理器也是中间件\",{\"1\":{\"992\":1}}],[\"每一个请求方法应当是相互独立的\",{\"1\":{\"956\":1}}],[\"每一个标准库的包级注释都会详细说明这个包是干什么用的\",{\"1\":{\"616\":1}}],[\"每一个错误都是通过函数调用的返回值产生的\",{\"1\":{\"598\":1}}],[\"每一个新声明的类型都必须有一个与之对应的基础类型\",{\"1\":{\"593\":1}}],[\"每一个测试用例的命名风格为testxxxx\",{\"1\":{\"521\":1}}],[\"每一个测试文件中都会有若干个测试函数用于不同的测试\",{\"1\":{\"517\":1}}],[\"每一个现代语言都会有属于自己的一个成熟的依赖管理工具\",{\"1\":{\"492\":1}}],[\"每一个原子类型都会提供以下三个方法\",{\"1\":{\"489\":1}}],[\"每一个协程在访问数据前\",{\"1\":{\"480\":1}}],[\"每一个键所映射的值都完全相等\",{\"1\":{\"460\":1}}],[\"每一个服务都需要对请求验证用户身份和权限\",{\"1\":{\"172\":1}}],[\"每一个分析器都是\",{\"1\":{\"37\":1}}],[\"每一个\",{\"1\":{\"28\":1,\"141\":1,\"142\":2,\"728\":1,\"1099\":1,\"1104\":1,\"1145\":1}}],[\"每一个迭代的包都将以下面结构体的形式传入\",{\"1\":{\"21\":1}}],[\"每一个行输出都是一个包\",{\"1\":{\"21\":1}}],[\"每一个子包就是一个单独的命令\",{\"1\":{\"4\":1}}],[\"每一篇文章的更新都是新的学习经验\",{\"1\":{\"0\":1}}],[\"创始人希望能够将错误可控\",{\"1\":{\"598\":1}}],[\"创始人之一也曾明确表示未来可能并不会有\",{\"1\":{\"113\":1}}],[\"创建新对象时\",{\"1\":{\"1132\":1}}],[\"创建新的桶来存放元素\",{\"1\":{\"1030\":1}}],[\"创建和销毁和调度的时机都是由\",{\"1\":{\"1085\":1}}],[\"创建和更新权限\",{\"1\":{\"862\":1}}],[\"创建溢出桶的时候讲述过\",{\"1\":{\"1039\":1}}],[\"创建基于cookie的存储引擎\",{\"1\":{\"1003\":1}}],[\"创建gin引擎\",{\"1\":{\"965\":1}}],[\"创建gprc服务器\",{\"1\":{\"145\":1,\"153\":1}}],[\"创建了一个条件变量\",{\"1\":{\"1165\":1}}],[\"创建了一个函数\",{\"1\":{\"949\":1}}],[\"创建了一个无缓冲管道\",{\"1\":{\"468\":1}}],[\"创建验证器\",{\"0\":{\"941\":1}}],[\"创建关联\",{\"0\":{\"895\":1}}],[\"创建完毕后\",{\"1\":{\"1032\":1}}],[\"创建完结构体后让\",{\"1\":{\"893\":1}}],[\"创建完成后\",{\"1\":{\"495\":1,\"866\":1}}],[\"创建的数目\",{\"1\":{\"866\":1}}],[\"创建的有缓冲管道\",{\"1\":{\"468\":2}}],[\"创建检查约束\",{\"1\":{\"862\":1}}],[\"创建后触发\",{\"1\":{\"861\":1}}],[\"创建前触发\",{\"1\":{\"861\":1}}],[\"创建logger\",{\"1\":{\"843\":1}}],[\"创建画布\",{\"1\":{\"833\":1}}],[\"创建token\",{\"1\":{\"781\":1}}],[\"创建密钥对\",{\"1\":{\"785\":1}}],[\"创建密钥\",{\"1\":{\"781\":1}}],[\"创建claims\",{\"1\":{\"780\":1,\"781\":1}}],[\"创建切片的事情是由makeslice函数在负责\",{\"1\":{\"559\":1}}],[\"创建切片反射值\",{\"1\":{\"456\":1}}],[\"创建模糊测试文件\",{\"1\":{\"527\":1}}],[\"创建时追踪当前时间\",{\"1\":{\"862\":1}}],[\"创建时\",{\"1\":{\"477\":1}}],[\"创建三个管道\",{\"1\":{\"471\":1}}],[\"创建两个日志文件\",{\"1\":{\"1007\":1}}],[\"创建两个无缓冲管道\",{\"1\":{\"467\":1}}],[\"创建两个协程\",{\"1\":{\"159\":1}}],[\"创建有缓冲管道\",{\"1\":{\"467\":2}}],[\"创建无缓冲管道\",{\"1\":{\"466\":2}}],[\"创建管道反射值\",{\"1\":{\"458\":1}}],[\"创建结构体反射值\",{\"1\":{\"455\":1}}],[\"创建成功\",{\"1\":{\"425\":1}}],[\"创建成功后返回返回一组\",{\"1\":{\"226\":1}}],[\"创建成功后会返回文档的\",{\"1\":{\"226\":1}}],[\"创建文件\",{\"1\":{\"426\":1}}],[\"创建文件夹\",{\"1\":{\"426\":1}}],[\"创建文件夹操作会用到os包下的两个函数\",{\"1\":{\"425\":1}}],[\"创建文档\",{\"0\":{\"226\":1}}],[\"创建redis连接客户端\",{\"1\":{\"241\":1,\"243\":1}}],[\"创建好的客户端流对象\",{\"1\":{\"166\":2}}],[\"创建流式\",{\"1\":{\"165\":1}}],[\"创建一条记录\",{\"1\":{\"866\":1}}],[\"创建一个协程\",{\"1\":{\"1165\":1}}],[\"创建一个协程十分的简单\",{\"1\":{\"462\":1}}],[\"创建一个条件变量\",{\"1\":{\"1165\":1}}],[\"创建一个新的\",{\"1\":{\"1095\":1}}],[\"创建一个新的溢出桶\",{\"1\":{\"1038\":1}}],[\"创建一个新的网络连接且比network和addr有着更高的优先级\",{\"1\":{\"242\":1}}],[\"创建一个最基本的\",{\"1\":{\"1011\":1}}],[\"创建一个路由组是将接口分类\",{\"1\":{\"988\":1}}],[\"创建一个\",{\"1\":{\"600\":1,\"643\":1}}],[\"创建一个无缓冲管道\",{\"1\":{\"467\":1}}],[\"创建一个如下的文档\",{\"1\":{\"212\":1}}],[\"创建一个索引\",{\"1\":{\"207\":1}}],[\"创建一个流式\",{\"1\":{\"166\":1}}],[\"创建一个空的项目\",{\"1\":{\"148\":1}}],[\"创建一元\",{\"1\":{\"165\":1,\"166\":1}}],[\"创建buf\",{\"1\":{\"156\":1}}],[\"创建如下的项目结构\",{\"1\":{\"150\":1}}],[\"创建客户端\",{\"1\":{\"145\":1,\"154\":1,\"174\":1,\"175\":1}}],[\"创建\",{\"0\":{\"207\":1,\"212\":1,\"391\":1,\"425\":1,\"453\":1,\"464\":1,\"495\":1,\"600\":1,\"605\":1,\"865\":1,\"1020\":1,\"1034\":1,\"1058\":1,\"1091\":1,\"1095\":1},\"1\":{\"143\":2,\"161\":1,\"861\":1,\"862\":1,\"1165\":1}}],[\"越多\",{\"1\":{\"142\":1}}],[\"客户都的负载均衡策略是轮询\",{\"1\":{\"145\":1}}],[\"客户代理\",{\"1\":{\"142\":1}}],[\"客户端携带\",{\"1\":{\"785\":1}}],[\"客户端发送数据\",{\"1\":{\"682\":1}}],[\"客户端发起一次请求\",{\"1\":{\"169\":1}}],[\"客户端数据传输相关的配置项\",{\"1\":{\"640\":1}}],[\"客户端流式\",{\"1\":{\"196\":1}}],[\"客户端代码\",{\"1\":{\"682\":1}}],[\"客户端代码如下\",{\"1\":{\"175\":1}}],[\"客户端代码使用\",{\"1\":{\"145\":1}}],[\"客户端调用服务端的指定服务之前\",{\"1\":{\"174\":1}}],[\"客户端在发起请求的时候\",{\"1\":{\"171\":1}}],[\"客户端在向服务端建立连接时\",{\"1\":{\"170\":1}}],[\"客户端在启动时注册解析器\",{\"1\":{\"145\":1}}],[\"客户端能不能根据返回的错误做特殊的处理呢\",{\"1\":{\"167\":1}}],[\"客户端重复使用withunaryinterceptor不会抛出\",{\"1\":{\"166\":1}}],[\"客户端连接对象\",{\"1\":{\"166\":1}}],[\"客户端拦截器\",{\"1\":{\"166\":3}}],[\"客户端拦截器跟服务端差不多\",{\"1\":{\"166\":1}}],[\"客户端拦截\",{\"0\":{\"166\":1}}],[\"客户端想要发送\",{\"1\":{\"163\":1}}],[\"客户端想要获取响应的\",{\"1\":{\"163\":1}}],[\"客户端使用的\",{\"1\":{\"175\":1}}],[\"客户端使用\",{\"0\":{\"163\":1}}],[\"客户端输出\",{\"1\":{\"159\":1}}],[\"客户端输出如下\",{\"1\":{\"155\":1,\"158\":1,\"166\":1}}],[\"客户端逻辑中并没有保证两个人聊天的消息收发顺序正确\",{\"1\":{\"159\":1}}],[\"客户端逻辑中\",{\"1\":{\"159\":1}}],[\"客户端服务端这些步骤的代码描述\",{\"1\":{\"159\":1}}],[\"客户端开了两个协程\",{\"1\":{\"158\":1}}],[\"客户端不需要像一元\",{\"1\":{\"157\":1}}],[\"客户端可以通过流来多次发送参数给服务端\",{\"1\":{\"157\":1}}],[\"客户端请求\",{\"1\":{\"157\":1}}],[\"客户端建立好连接后\",{\"1\":{\"155\":1}}],[\"客户端库来使用\",{\"1\":{\"104\":1}}],[\"客户端与服务端的实现\",{\"1\":{\"637\":1}}],[\"客户端与服务端建立连接的例子\",{\"1\":{\"221\":1}}],[\"客户端与服务端\",{\"1\":{\"71\":2}}],[\"客户端\",{\"0\":{\"640\":1},\"1\":{\"70\":2}}],[\"概述\",{\"1\":{\"757\":1}}],[\"概念定义\",{\"1\":{\"289\":1}}],[\"概念\",{\"0\":{\"142\":1,\"563\":1,\"1131\":1}}],[\"概览\",{\"0\":{\"96\":1}}],[\"节点尝试读取数据\",{\"1\":{\"144\":1}}],[\"节点添加一个\",{\"1\":{\"144\":1}}],[\"节点的优雅退出尤为重要\",{\"1\":{\"143\":1}}],[\"节点隶属的网段\",{\"1\":{\"143\":1}}],[\"节点隶属的分区\",{\"1\":{\"143\":1}}],[\"节点上\",{\"1\":{\"143\":1}}],[\"节点\",{\"1\":{\"141\":1,\"144\":1}}],[\"访问的时候不需要加锁\",{\"1\":{\"1099\":1}}],[\"访问没有命中的次数\",{\"1\":{\"1045\":1}}],[\"访问read时没有命中的次数\",{\"1\":{\"1045\":1}}],[\"访问值以及该键是否存在\",{\"1\":{\"1035\":1}}],[\"访问切片就跟访问数组一样使用下标索引\",{\"1\":{\"1021\":1}}],[\"访问控制模型被抽象为基于perm的配置文件\",{\"1\":{\"759\":1}}],[\"访问控制列表\",{\"1\":{\"758\":1}}],[\"访问认证方面的逻辑并不由casbin负责\",{\"1\":{\"758\":1}}],[\"访问到\",{\"1\":{\"539\":1}}],[\"访问速度对于国内的用户不甚友好\",{\"1\":{\"501\":1}}],[\"访问数据\",{\"1\":{\"479\":1,\"480\":1}}],[\"访问方法信息示例如下\",{\"1\":{\"451\":1}}],[\"访问方法与访问字段的过程很相似\",{\"1\":{\"451\":1}}],[\"访问方法\",{\"0\":{\"451\":1}}],[\"访问结构体字段的方法有两种\",{\"1\":{\"448\":1}}],[\"访问结果如下\",{\"1\":{\"41\":1}}],[\"访问字段\",{\"0\":{\"448\":1}}],[\"访问内存的次数\",{\"1\":{\"410\":1}}],[\"访问一个\",{\"1\":{\"383\":1}}],[\"访问集合元素\",{\"0\":{\"271\":1}}],[\"访问指定范围内的元素\",{\"1\":{\"267\":1}}],[\"访问指定下标的元素\",{\"1\":{\"267\":1}}],[\"访问元素\",{\"0\":{\"267\":1,\"280\":1}}],[\"访问列表长度\",{\"1\":{\"266\":1}}],[\"访问长度\",{\"0\":{\"266\":1}}],[\"访问其他节点会发现数据同样存在\",{\"1\":{\"143\":1}}],[\"访问\",{\"0\":{\"375\":1,\"383\":1,\"450\":1,\"1021\":1,\"1035\":1},\"1\":{\"143\":1,\"649\":1,\"1035\":1,\"1165\":1}}],[\"访问127\",{\"1\":{\"141\":1,\"1011\":1}}],[\"必要时在加锁的同时立即使用defer语句解锁\",{\"1\":{\"479\":1}}],[\"必要时为了提高可读性\",{\"1\":{\"348\":1}}],[\"必须有另一个灰色对象可以直接或间接访问到该灰色对象\",{\"1\":{\"1136\":1}}],[\"必须所有条件都满足\",{\"1\":{\"938\":1}}],[\"必须值\",{\"1\":{\"936\":1}}],[\"必须传入引用\",{\"1\":{\"866\":1}}],[\"必须与花括号相邻\",{\"1\":{\"726\":1}}],[\"必须在defer中使用\",{\"1\":{\"607\":1}}],[\"必须在集群中保持唯一\",{\"1\":{\"141\":1}}],[\"必须使用\",{\"1\":{\"602\":1}}],[\"必须是对外暴露的\",{\"1\":{\"823\":1}}],[\"必须是正整数\",{\"1\":{\"600\":1}}],[\"必须是lib前缀开头\",{\"1\":{\"546\":1}}],[\"必须是一个布尔值\",{\"1\":{\"348\":1}}],[\"必须要它的值为nil\",{\"1\":{\"1070\":1}}],[\"必须要指定文件类型\",{\"1\":{\"791\":1}}],[\"必须要指定当前文件夹\",{\"1\":{\"532\":1}}],[\"必须要在defer语句中运行\",{\"1\":{\"607\":1}}],[\"必须要嵌入该结构体\",{\"1\":{\"152\":1}}],[\"必须指定版本号\",{\"1\":{\"504\":1}}],[\"必须立刻有人接收\",{\"1\":{\"467\":1}}],[\"必须声明在参数列表的末尾\",{\"1\":{\"396\":1}}],[\"必须保持唯一\",{\"1\":{\"145\":1}}],[\"必选\",{\"1\":{\"106\":1}}],[\"启用错误转换\",{\"1\":{\"852\":1}}],[\"启动和扩容都十分迅捷\",{\"1\":{\"147\":1}}],[\"启动启动\",{\"1\":{\"144\":1}}],[\"启动时\",{\"1\":{\"144\":1}}],[\"启动后\",{\"1\":{\"141\":1,\"1138\":1}}],[\"启发\",{\"1\":{\"75\":1}}],[\"端口默认\",{\"1\":{\"141\":2}}],[\"同类型注册\",{\"1\":{\"951\":1}}],[\"同类型的开源工具也有很多\",{\"1\":{\"139\":1}}],[\"同意与拒绝\",{\"1\":{\"763\":1}}],[\"同slice函数\",{\"1\":{\"756\":1}}],[\"同slicedata函数\",{\"1\":{\"755\":1}}],[\"同命令\",{\"1\":{\"560\":1}}],[\"同步原语的阻塞跟踪\",{\"1\":{\"557\":1}}],[\"同步工作区的模块依赖\",{\"1\":{\"514\":1}}],[\"同理\",{\"1\":{\"509\":1,\"559\":1,\"824\":1}}],[\"同一个机器上的所有\",{\"1\":{\"507\":1}}],[\"同一个请求的等待间隔时间\",{\"1\":{\"168\":1}}],[\"同样代表了键值对已经被删除且不存在于\",{\"1\":{\"1045\":1}}],[\"同样是使用切割方式复制切片\",{\"1\":{\"1019\":1}}],[\"同样是二维的数组和切片\",{\"1\":{\"370\":1}}],[\"同样都是官方写的\",{\"1\":{\"603\":1}}],[\"同样也会触发抢占\",{\"1\":{\"1107\":1}}],[\"同样也是阻塞式的\",{\"1\":{\"1066\":1}}],[\"同样也是返回错误值\",{\"1\":{\"598\":1}}],[\"同样也提供了一些方式来对其进行配置\",{\"1\":{\"853\":1}}],[\"同样也可以自己定义\",{\"1\":{\"168\":1}}],[\"同样会下载一个文件\",{\"1\":{\"557\":1}}],[\"同样支持自定义序列化格式\",{\"1\":{\"798\":1}}],[\"同样支持嵌套结构\",{\"1\":{\"797\":1}}],[\"同样支持\",{\"1\":{\"529\":1}}],[\"同样可以\",{\"1\":{\"414\":1}}],[\"同样能看到正常的输出\",{\"1\":{\"174\":1}}],[\"同样的也可以覆盖默认基本类型的校验\",{\"1\":{\"950\":1}}],[\"同样的也可以修改数组元素\",{\"1\":{\"361\":1}}],[\"同样的也无法取地址\",{\"1\":{\"751\":1}}],[\"同样的也无法在类型约束中并入\",{\"1\":{\"575\":1}}],[\"同样的也支持这些数据格式的相关的操作\",{\"1\":{\"617\":1}}],[\"同样的还有t\",{\"1\":{\"521\":1}}],[\"同样的os包也为此提供了方便函数\",{\"1\":{\"416\":1}}],[\"同样的\",{\"1\":{\"143\":1,\"171\":1,\"174\":1,\"467\":1,\"563\":1,\"567\":1,\"575\":1,\"598\":1,\"742\":1,\"866\":1,\"956\":1,\"988\":1,\"1054\":1,\"1087\":1}}],[\"同时编译器插入的代码也会增加\",{\"1\":{\"1145\":1}}],[\"同时gcdrain函数也会不断的通过gcw\",{\"1\":{\"1137\":1}}],[\"同时由freeindex记录着下一个可用于存放对象的索引\",{\"1\":{\"1114\":1}}],[\"同时监听着ctx\",{\"1\":{\"1063\":1}}],[\"同时监测多个元素是否可用\",{\"1\":{\"471\":1}}],[\"同时它也负责处理所有能被for\",{\"1\":{\"1055\":1}}],[\"同时在系统监控协程中也会定时检查是否需要强制\",{\"1\":{\"1132\":1}}],[\"同时在\",{\"1\":{\"1017\":1}}],[\"同时记录进两个日志文件\",{\"1\":{\"1007\":1}}],[\"同时将多个类型注册到一个函数也是同样的道理\",{\"1\":{\"950\":1}}],[\"同时使用\",{\"1\":{\"803\":1}}],[\"同时如果是使用私钥\",{\"1\":{\"774\":1}}],[\"同时规定了用户角色与资源角色之间的用户关系\",{\"1\":{\"766\":1}}],[\"同时panic也可以被恢复来保证程序继续运行\",{\"1\":{\"604\":1}}],[\"同时接口也分为了两类\",{\"1\":{\"563\":1}}],[\"同时出现两个会更加进行细节的输出\",{\"1\":{\"550\":1}}],[\"同时修改头文件sum\",{\"1\":{\"533\":1}}],[\"同时需要确保环境变量cgo\",{\"1\":{\"530\":1}}],[\"同时模块\",{\"1\":{\"508\":1}}],[\"同时调用了add方法\",{\"1\":{\"484\":1}}],[\"同时为了更好的\",{\"1\":{\"390\":1}}],[\"同时if语句也可以包含一些简单的语句\",{\"1\":{\"348\":1}}],[\"同时里面也有着不少的代码示例\",{\"1\":{\"289\":1}}],[\"同时还指定了负载均衡的策略\",{\"1\":{\"175\":1}}],[\"同时\",{\"1\":{\"160\":1,\"227\":1,\"874\":1}}],[\"同时其他节点也不应该再使用bootstrap\",{\"1\":{\"143\":1}}],[\"同时移除了函数和\",{\"1\":{\"137\":1}}],[\"同时也是调度器的初始化阶段\",{\"1\":{\"1119\":1}}],[\"同时也是\",{\"1\":{\"1100\":1}}],[\"同时也是配置管理器\",{\"1\":{\"63\":1}}],[\"同时也需要用到两个类型的函数\",{\"1\":{\"952\":1}}],[\"同时也允许任何使用公钥验证的人正常访问\",{\"1\":{\"777\":1}}],[\"同时也支持其他的主流语言\",{\"1\":{\"758\":1}}],[\"同时也对<stdint\",{\"1\":{\"537\":1}}],[\"同时也会发现目录下多了一个名为go\",{\"1\":{\"503\":1}}],[\"同时也只有一个协程能够读取管道中的数据\",{\"1\":{\"465\":1}}],[\"同时也必须声明管道的存储类型\",{\"1\":{\"463\":1}}],[\"同时也可以用于并发控制\",{\"1\":{\"463\":1}}],[\"同时也抛弃了构造方法\",{\"1\":{\"403\":1}}],[\"同时也希望能够对其他人提供一点点帮助\",{\"1\":{\"97\":1}}],[\"同时因为简单的语法和较低的学习难度\",{\"1\":{\"88\":1}}],[\"健康检查和身份验证支持\",{\"1\":{\"146\":1}}],[\"健康检查\",{\"1\":{\"139\":1}}],[\"健壮灵活的邮件发送库\",{\"1\":{\"71\":1}}],[\"因其内容比较复杂涉及过多的数学公式\",{\"1\":{\"1132\":1}}],[\"因\",{\"1\":{\"1088\":1}}],[\"因特网协议地址\",{\"1\":{\"932\":6}}],[\"因系统调用而阻塞的协程信息\",{\"1\":{\"561\":1}}],[\"因同步原语而阻塞的协程信息\",{\"1\":{\"561\":1}}],[\"因网络\",{\"1\":{\"561\":1}}],[\"因该传递指针而不是值\",{\"1\":{\"472\":1}}],[\"因此屏障机制只在堆上生效\",{\"1\":{\"1141\":1}}],[\"因此必须位于pattern的尾部\",{\"1\":{\"957\":1}}],[\"因此必须非常小心地防止出现安全问题\",{\"1\":{\"775\":1}}],[\"因此num1的转换结果就是\",{\"1\":{\"595\":1}}],[\"因此不同类型的变量无法进行运算\",{\"1\":{\"595\":1}}],[\"因此下面这种写法是错误的\",{\"1\":{\"533\":1}}],[\"因此在正常的\",{\"1\":{\"513\":1}}],[\"因此熟悉go\",{\"1\":{\"509\":1}}],[\"因此ctx\",{\"1\":{\"476\":1}}],[\"因此\",{\"1\":{\"467\":1,\"637\":1,\"962\":1}}],[\"因此time\",{\"1\":{\"462\":1}}],[\"因此让每次循环都稍微的等一下\",{\"1\":{\"462\":1}}],[\"因此上下文切换开销非常小\",{\"1\":{\"462\":1}}],[\"因此无法轻松的分发用于验证的密钥\",{\"1\":{\"777\":1}}],[\"因此无法赋值给变量an\",{\"1\":{\"414\":1}}],[\"因此无法用于初始化数组长度\",{\"1\":{\"360\":1}}],[\"因此结果就是任何数字都不等于\",{\"1\":{\"384\":1}}],[\"因此a\",{\"1\":{\"299\":1}}],[\"因此尽可能的将频繁出现的字段赋予\",{\"1\":{\"187\":1}}],[\"因此有必要引入超时这一机制\",{\"1\":{\"169\":1}}],[\"因此部署起来十分的轻便\",{\"1\":{\"139\":1}}],[\"因为所有被等待的协程都运行完毕了\",{\"1\":{\"1178\":1}}],[\"因为所有类型的方法集都是空集的超集\",{\"1\":{\"568\":1}}],[\"因为现在没有写者协程持有互斥锁\",{\"1\":{\"1162\":1}}],[\"因为复杂核心的地方都在写锁部分维护\",{\"1\":{\"1160\":1}}],[\"因为一半是读者协程\",{\"1\":{\"1156\":1}}],[\"因为一直在等待而迟迟无法被运行\",{\"1\":{\"1104\":1}}],[\"因为大家都按照访问的顺序来持有锁就不会出任何问题\",{\"1\":{\"1151\":1}}],[\"因为大多数情况下接收方只知道接收数据\",{\"1\":{\"470\":1}}],[\"因为扫描后栈中的黑色对象只会引用灰色对象\",{\"1\":{\"1144\":1}}],[\"因为上下游情况未知\",{\"1\":{\"1143\":1}}],[\"因为灰色对象能够直接或间接的访问到该白色对象\",{\"1\":{\"1136\":1}}],[\"因为未被清理的对象可以在下一轮回收中被处理掉\",{\"1\":{\"1136\":1}}],[\"因为mheap\",{\"1\":{\"1125\":1}}],[\"因为了防止长时间阻塞而影响其它\",{\"1\":{\"1097\":1}}],[\"因为系统调用会阻塞工作线程\",{\"1\":{\"1097\":1}}],[\"因为初始化成功之后就会进入调度循环并且永远也不会返回\",{\"1\":{\"1089\":1}}],[\"因为其检测点是每一个函数的调用\",{\"1\":{\"1106\":1}}],[\"因为其主要参与者分别由\",{\"1\":{\"1083\":1}}],[\"因为其内容都是依赖于本地的文件\",{\"1\":{\"513\":1}}],[\"因为接口中的类型实际上也是一个指针\",{\"1\":{\"1070\":1}}],[\"因为直接读block参数值为true将会阻塞协程\",{\"1\":{\"1062\":1}}],[\"因为向已关闭的管道发送数据会发生panic\",{\"1\":{\"1062\":1}}],[\"因为谁也不知道在下一刻谁会把管道关闭掉\",{\"1\":{\"1062\":1}}],[\"因为只有缓冲区满了发送方才会阻塞等待发送\",{\"1\":{\"1060\":1}}],[\"因为可以找到等待接收的协程\",{\"1\":{\"1059\":1}}],[\"因为可读性很糟糕\",{\"1\":{\"405\":1}}],[\"因为在你持有锁后\",{\"1\":{\"1173\":1}}],[\"因为在运行时会需要它们去处理其它的任务\",{\"1\":{\"1085\":1}}],[\"因为在大部分情况下访问一个键值对的时候不需要加锁\",{\"1\":{\"1050\":1}}],[\"因为在获得锁的期间\",{\"1\":{\"1046\":1}}],[\"因为在这种情况下\",{\"1\":{\"533\":1}}],[\"因为在这里条件变量作用的是读协程\",{\"1\":{\"482\":1}}],[\"因为需要查找一个元素遍历更多的溢出桶链表\",{\"1\":{\"1042\":1}}],[\"因为next字段只会指向剩余的空间内存地址\",{\"1\":{\"1111\":1}}],[\"因为nan\",{\"1\":{\"1037\":1}}],[\"因为nil不属于任何类型\",{\"1\":{\"329\":1}}],[\"因为低位取余值都是相同的\",{\"1\":{\"1036\":1}}],[\"因为即便append返回了新的引用\",{\"1\":{\"1019\":1}}],[\"因为docs\",{\"1\":{\"1016\":1}}],[\"因为dog没有实现animal\",{\"1\":{\"414\":1}}],[\"因为本文是只用\",{\"1\":{\"1010\":1}}],[\"因为都比较简单易懂\",{\"1\":{\"981\":1}}],[\"因为会造成更多的传输消耗\",{\"1\":{\"981\":1}}],[\"因为外键默认可以为null\",{\"1\":{\"891\":1}}],[\"因为生成的insert\",{\"1\":{\"866\":1}}],[\"因为爸爸和妈妈可以有多个孩子\",{\"1\":{\"860\":1}}],[\"因为指定文件存在\",{\"1\":{\"792\":1}}],[\"因为后续需要用\",{\"1\":{\"1034\":1}}],[\"因为后续的代码无法保证同步运行\",{\"1\":{\"523\":1}}],[\"因为后者可以作用全局\",{\"1\":{\"728\":1}}],[\"因为两者的数据类型不同\",{\"1\":{\"701\":1}}],[\"因为两者类型不同\",{\"1\":{\"591\":1}}],[\"因为没有数据库程序就运行的毫无意义\",{\"1\":{\"605\":1}}],[\"因为没有其他协程来向管道中写入或读取数据\",{\"1\":{\"467\":1}}],[\"因为原有的配置中也没有填\",{\"1\":{\"953\":1}}],[\"因为原始错误是被结构体包裹起来的\",{\"1\":{\"603\":1}}],[\"因为原子操作的粒度过细\",{\"1\":{\"488\":1}}],[\"因为errorstring实现太过于简单\",{\"1\":{\"601\":1}}],[\"因为处理的方式非常简单\",{\"1\":{\"598\":1}}],[\"因为也就无法进行类型转换\",{\"1\":{\"595\":1}}],[\"因为前者是声明了一个新的类型\",{\"1\":{\"594\":1}}],[\"因为前者仅仅只是一个类型别名\",{\"1\":{\"568\":1}}],[\"因为tinyint在类型集int内\",{\"1\":{\"574\":1}}],[\"因为tinyint与int8底层类型就是一致的\",{\"1\":{\"574\":1}}],[\"因为无符号整数和有符号整数两个肯定没有交集\",{\"1\":{\"574\":1}}],[\"因为类型不匹配\",{\"1\":{\"571\":1}}],[\"因为它不管有没有协程正在等待\",{\"1\":{\"1152\":1}}],[\"因为它确实没那么重要\",{\"1\":{\"1150\":1}}],[\"因为它是\",{\"1\":{\"1125\":1}}],[\"因为它的实现更简单\",{\"1\":{\"1152\":1}}],[\"因为它的工作全部都跟管道有关\",{\"1\":{\"1063\":1}}],[\"因为它的参数必须是绝对路径\",{\"1\":{\"545\":1}}],[\"因为它们引用了外部的元素\",{\"1\":{\"1058\":1}}],[\"因为它们本质上是两个指向新内存地址的指针\",{\"1\":{\"1053\":1}}],[\"因为它们直接参与到\",{\"1\":{\"142\":1}}],[\"因为它应该只在运行时被使用\",{\"1\":{\"1033\":1}}],[\"因为它会顺着关系引用关系递归创建\",{\"1\":{\"864\":1}}],[\"因为它没有堆栈信息\",{\"1\":{\"603\":1}}],[\"因为它通过语法糖的方式解决了这类问题\",{\"1\":{\"598\":1}}],[\"因为它并非并发安全\",{\"1\":{\"583\":1}}],[\"因为它仅仅只是一组规范\",{\"1\":{\"566\":1}}],[\"因为该头文件生成的前提是所有\",{\"1\":{\"533\":1}}],[\"因为replace指令所指定的\",{\"1\":{\"512\":1}}],[\"因为协程被唤醒时并不能保证当前条件就已经满足了\",{\"1\":{\"482\":1}}],[\"因为hello函数内部对一个形参waitgroup调用done并不会作用到原来的mainwait上\",{\"1\":{\"472\":1}}],[\"因为子协程已经执行完毕了\",{\"1\":{\"470\":1}}],[\"因为不能对管道读写就失去了其存在的作用\",{\"1\":{\"469\":1}}],[\"因为管道缓冲区最大只有\",{\"1\":{\"467\":1}}],[\"因为缓冲区容量为\",{\"1\":{\"466\":1}}],[\"因为通过指针可以找到dog结构体\",{\"1\":{\"414\":1}}],[\"因为我们要在闭包中对\",{\"1\":{\"406\":1}}],[\"因为字符串本质是字节数组\",{\"1\":{\"375\":1}}],[\"因为标准输出本身就是一个文件\",{\"1\":{\"337\":1}}],[\"因为标准库的内容实在太过庞大所以随缘更新\",{\"1\":{\"96\":1}}],[\"因为数组长度也是类型的一部分\",{\"1\":{\"332\":1}}],[\"因为const仅支持基本数据类型\",{\"1\":{\"326\":1}}],[\"因为cmd\",{\"1\":{\"6\":1}}],[\"因为season是自定义类型\",{\"1\":{\"326\":1}}],[\"因为编译器没法找到这些文件\",{\"1\":{\"193\":1}}],[\"因为枚举项的默认值就是第一个元素\",{\"1\":{\"190\":1}}],[\"因为流式\",{\"1\":{\"162\":1}}],[\"因为这里输出的content\",{\"1\":{\"974\":1}}],[\"因为这里是虚拟机演示\",{\"1\":{\"144\":1}}],[\"因为这么做的话在回调函数结束时就会直接延迟调用了\",{\"1\":{\"582\":1}}],[\"因为这样的编码风格看起来就跟表格一样\",{\"1\":{\"524\":1}}],[\"因为这会影响到模块名\",{\"1\":{\"495\":1}}],[\"因为这两个数据结构本质上都是指针\",{\"1\":{\"396\":1}}],[\"因为这关系到数据的一致性\",{\"1\":{\"143\":1}}],[\"因为有很多系统本地并没有时区数据信息\",{\"1\":{\"122\":1}}],[\"因为有些命令的文档并不会写的那么仔细\",{\"1\":{\"4\":1}}],[\"因为些文件按照约定都是测试文件\",{\"1\":{\"8\":1}}],[\"因为\",{\"1\":{\"7\":1,\"167\":1,\"200\":1,\"376\":1,\"384\":1,\"400\":1,\"416\":1,\"536\":1,\"588\":1,\"591\":1,\"1003\":1,\"1004\":1,\"1008\":2,\"1067\":1,\"1130\":1}}],[\"选项模式是\",{\"1\":{\"406\":1}}],[\"选项模式\",{\"0\":{\"406\":1}}],[\"选中regexp匹配的模糊测试\",{\"1\":{\"519\":1}}],[\"选中regexp匹配的基准测试\",{\"1\":{\"519\":1}}],[\"选中集合\",{\"1\":{\"224\":1,\"225\":2}}],[\"选中数据库\",{\"1\":{\"224\":1,\"225\":2}}],[\"选举\",{\"1\":{\"142\":3}}],[\"选举时会给自己投票\",{\"1\":{\"141\":1}}],[\"选举算法进行选举的\",{\"1\":{\"142\":1}}],[\"选举算法\",{\"1\":{\"139\":1}}],[\"选择签名算法\",{\"0\":{\"777\":1}}],[\"选择下载\",{\"1\":{\"90\":1}}],[\"选择你的目标\",{\"1\":{\"11\":1}}],[\"选择你的目标操作系统\",{\"1\":{\"11\":1}}],[\"流行的三种\",{\"1\":{\"1001\":1}}],[\"流程如下\",{\"1\":{\"1173\":1,\"1177\":1}}],[\"流程都是从请求体中读取文件流\",{\"1\":{\"983\":1}}],[\"流程应该是服务端向注册中心注册自身服务\",{\"1\":{\"175\":1}}],[\"流信息\",{\"1\":{\"165\":1}}],[\"流对象的描述信息\",{\"1\":{\"166\":2}}],[\"流对象\",{\"1\":{\"165\":1}}],[\"流言\",{\"1\":{\"142\":1}}],[\"流量治理\",{\"1\":{\"139\":1}}],[\"流式rpc\",{\"1\":{\"163\":2}}],[\"流式\",{\"0\":{\"157\":1},\"1\":{\"158\":1,\"165\":1,\"166\":1}}],[\"流式处理\",{\"1\":{\"56\":1}}],[\"流式数据处理\",{\"1\":{\"56\":1}}],[\"持续了接近三年的时间\",{\"1\":{\"138\":1}}],[\"脚本\",{\"0\":{\"283\":1},\"1\":{\"138\":1,\"803\":1}}],[\"脚本语言\",{\"1\":{\"75\":1}}],[\"设备文件\",{\"1\":{\"416\":1}}],[\"设计更加合理\",{\"1\":{\"683\":1}}],[\"设计指南\",{\"1\":{\"147\":1}}],[\"设计了新的结构体\",{\"1\":{\"138\":1}}],[\"设置gp\",{\"1\":{\"1097\":1}}],[\"设置状态为\",{\"1\":{\"1096\":1}}],[\"设置好入口函数后由\",{\"1\":{\"1095\":1}}],[\"设置好后\",{\"1\":{\"90\":1}}],[\"设置完成后\",{\"1\":{\"1095\":1}}],[\"设置环境变量export\",{\"1\":{\"1085\":1}}],[\"设置session中间件\",{\"1\":{\"1003\":1}}],[\"设置cookie\",{\"1\":{\"1002\":1}}],[\"设置cors响应头\",{\"1\":{\"958\":1}}],[\"设置字段读的权限\",{\"1\":{\"862\":1}}],[\"设置字段写入的权限\",{\"1\":{\"862\":1}}],[\"设置线宽\",{\"1\":{\"835\":1}}],[\"设置点的坐标和半径\",{\"1\":{\"834\":1}}],[\"设置颜色黑色\",{\"1\":{\"833\":1}}],[\"设置嵌套分隔符\",{\"0\":{\"796\":1}}],[\"设置地区\",{\"1\":{\"737\":1}}],[\"设置前缀\",{\"1\":{\"648\":1}}],[\"设置统计n个协程竞争一个互斥锁的情况\",{\"1\":{\"519\":1}}],[\"设置覆盖率分析的模式\",{\"1\":{\"519\":1}}],[\"设置代理\",{\"0\":{\"501\":1}}],[\"设置1秒的超时时间\",{\"1\":{\"471\":1}}],[\"设置值\",{\"0\":{\"442\":1},\"1\":{\"457\":1}}],[\"设置指定下标的元素的值\",{\"1\":{\"265\":1}}],[\"设置过期时间\",{\"1\":{\"247\":1}}],[\"设置键值对\",{\"1\":{\"241\":1}}],[\"设置方法如下\",{\"1\":{\"193\":1}}],[\"设置结构体package\",{\"1\":{\"20\":1}}],[\"设置\",{\"1\":{\"11\":2,\"649\":1,\"1003\":1}}],[\"设置为true时\",{\"1\":{\"1000\":1}}],[\"设置为\",{\"1\":{\"7\":1}}],[\"设置调试选项\",{\"1\":{\"7\":1}}],[\"设置要使用的\",{\"1\":{\"7\":1}}],[\"设置工作区是否启用\",{\"1\":{\"7\":1}}],[\"设置模块管理的版本控制系统\",{\"1\":{\"7\":1}}],[\"规模更小\",{\"1\":{\"1085\":1}}],[\"规范的语言标签\",{\"1\":{\"934\":1}}],[\"规范\",{\"1\":{\"499\":1}}],[\"规定了\",{\"1\":{\"138\":1}}],[\"规则同上\",{\"1\":{\"519\":1}}],[\"规则如下\",{\"1\":{\"294\":1}}],[\"规则是可以自定义的\",{\"1\":{\"17\":1}}],[\"规则与goprivate一致\",{\"1\":{\"7\":3}}],[\"复用内存的基本单位是一个固定大小的内存片\",{\"1\":{\"1112\":1}}],[\"复用存储在上下文中的\",{\"1\":{\"975\":1}}],[\"复合主键\",{\"1\":{\"849\":1}}],[\"复合语义\",{\"1\":{\"137\":1}}],[\"复制算法\",{\"1\":{\"1130\":1}}],[\"复制过后的内存与源内存没有任何关联\",{\"1\":{\"1054\":1}}],[\"复制值\",{\"1\":{\"1042\":1}}],[\"复制键\",{\"1\":{\"1042\":1}}],[\"复制到指定位置\",{\"1\":{\"1038\":2}}],[\"复制方法\",{\"1\":{\"810\":1}}],[\"复制切片\",{\"1\":{\"810\":1}}],[\"复制同名的字段\",{\"1\":{\"810\":1}}],[\"复制字符串\",{\"0\":{\"704\":1},\"1\":{\"714\":1}}],[\"复制后的值也不应该继续使用\",{\"1\":{\"472\":1}}],[\"复制文件内容\",{\"1\":{\"426\":1}}],[\"复制成功\",{\"1\":{\"419\":1}}],[\"复制\",{\"0\":{\"419\":1,\"426\":1},\"1\":{\"419\":1,\"810\":1,\"812\":1,\"1053\":2}}],[\"复制想要的版本的链接\",{\"1\":{\"91\":1}}],[\"复数\",{\"1\":{\"700\":1}}],[\"复数转字符串\",{\"0\":{\"700\":1}}],[\"复数操作包\",{\"1\":{\"616\":1}}],[\"复数类型\",{\"0\":{\"318\":1}}],[\"复数字面量\",{\"0\":{\"303\":1}}],[\"复杂\",{\"1\":{\"158\":1,\"617\":1}}],[\"终结器\",{\"1\":{\"1131\":1}}],[\"终于\",{\"1\":{\"570\":1}}],[\"终于开始着手处理依赖管理这部分了\",{\"1\":{\"132\":1}}],[\"终止语句的定义\",{\"1\":{\"136\":1}}],[\"整体部分如下\",{\"1\":{\"840\":1}}],[\"整型赋值\",{\"1\":{\"727\":1}}],[\"整型转字符串\",{\"0\":{\"693\":1}}],[\"整型排序\",{\"0\":{\"684\":1}}],[\"整型值\",{\"1\":{\"580\":1}}],[\"整型切片指针\",{\"1\":{\"393\":1}}],[\"整型通道\",{\"1\":{\"320\":1}}],[\"整型\",{\"0\":{\"316\":1},\"1\":{\"316\":1,\"341\":3,\"809\":1}}],[\"整型字面量\",{\"0\":{\"301\":1}}],[\"整数常量\",{\"0\":{\"651\":1}}],[\"整数\",{\"0\":{\"537\":1},\"1\":{\"315\":1}}],[\"整个读写锁部分就这个readercount比较复杂\",{\"1\":{\"1156\":1}}],[\"整个读写锁都靠它来维护状态\",{\"1\":{\"1155\":1}}],[\"整个偷取工作会进行四次\",{\"1\":{\"1104\":1}}],[\"整个协程的生命周期就如下图所示\",{\"1\":{\"1094\":1}}],[\"整个拼接过程也就结束了\",{\"1\":{\"1053\":1}}],[\"整个流程明白以后\",{\"1\":{\"1016\":1}}],[\"整个系统所有的请求都会经过此中间件\",{\"1\":{\"993\":1}}],[\"整个组件只有三个\",{\"1\":{\"954\":1}}],[\"整个程序都会崩溃\",{\"1\":{\"604\":1}}],[\"整个过程比较复杂\",{\"1\":{\"1153\":1}}],[\"整个过程中也只创建了\",{\"1\":{\"485\":1}}],[\"整个过程非常短\",{\"1\":{\"11\":1}}],[\"整个结构体的内存占用似乎是\",{\"1\":{\"410\":1}}],[\"整个if语句的判断是从上到下\",{\"1\":{\"349\":1}}],[\"整个案例已经编写完毕\",{\"1\":{\"166\":1}}],[\"整除以前会抛出panic\",{\"1\":{\"136\":1}}],[\"顺着链表上寻找\",{\"1\":{\"602\":1}}],[\"顺带一提\",{\"1\":{\"193\":1,\"533\":1,\"543\":1,\"583\":1,\"1061\":1}}],[\"顺序也会变得不可预测\",{\"1\":{\"134\":1}}],[\"顺便提一下\",{\"1\":{\"1058\":1}}],[\"顺便提一嘴\",{\"1\":{\"8\":1}}],[\"顺便写一个测试文件进行单元测试\",{\"1\":{\"496\":1}}],[\"顺便一提\",{\"1\":{\"88\":1}}],[\"都能拥有较为均匀的\",{\"1\":{\"1104\":1}}],[\"都有一个自己独立的栈空间缓存mcache\",{\"1\":{\"1099\":1}}],[\"都走到了加锁这一步骤\",{\"1\":{\"1067\":1}}],[\"都需要进行内存复制\",{\"1\":{\"1054\":1}}],[\"都被分配到了同一个哈希桶\",{\"1\":{\"1042\":1}}],[\"都被嵌到了\",{\"1\":{\"1010\":1}}],[\"都无法当作类型实参\",{\"1\":{\"575\":1}}],[\"都无法通过编译\",{\"1\":{\"575\":1}}],[\"都无法并入类型集中\",{\"1\":{\"575\":1}}],[\"都只不过是将两个数相加而已\",{\"1\":{\"571\":1}}],[\"都先上锁\",{\"1\":{\"480\":1}}],[\"都不为nil时\",{\"1\":{\"460\":1}}],[\"都不支持这种写法\",{\"1\":{\"201\":1}}],[\"都为nil时\",{\"1\":{\"460\":2}}],[\"都推荐使用指针接收者\",{\"1\":{\"414\":1}}],[\"都可以修改内部的值\",{\"1\":{\"414\":1}}],[\"都会直接将白色对象标记为灰色对象\",{\"1\":{\"1143\":1}}],[\"都会直接省略掉\",{\"1\":{\"159\":1}}],[\"都会使用一个固定大小的内存片\",{\"1\":{\"1112\":1}}],[\"都会先对管道判空\",{\"1\":{\"1060\":1}}],[\"都会加载\",{\"1\":{\"733\":1}}],[\"都会有如下的文件\",{\"1\":{\"510\":1}}],[\"都会为其分配一块内存以存储对应类型的值\",{\"1\":{\"327\":1}}],[\"都位于esapi\",{\"1\":{\"206\":1}}],[\"都要比单向流式更复杂\",{\"1\":{\"159\":1}}],[\"都是由指针指向具体的实现\",{\"1\":{\"1070\":1}}],[\"都是由标准库testing提供\",{\"1\":{\"516\":1}}],[\"都是分配内存\",{\"1\":{\"1054\":1}}],[\"都是通过拷贝内存的方式拷贝切片\",{\"1\":{\"1026\":1}}],[\"都是通过自定义类型\",{\"1\":{\"326\":1}}],[\"都是比较简单的\",{\"1\":{\"1016\":1}}],[\"都是全英文\",{\"1\":{\"966\":1}}],[\"都是info\",{\"1\":{\"907\":1}}],[\"都是差不多的\",{\"1\":{\"899\":1}}],[\"都是差不的感觉\",{\"1\":{\"202\":1}}],[\"都是类似的\",{\"1\":{\"875\":1}}],[\"都是使用的字符串字面量来作为模板\",{\"1\":{\"736\":1}}],[\"都是对已有的\",{\"1\":{\"637\":1}}],[\"都是拿来配合其他数据流处理函数的\",{\"1\":{\"585\":1}}],[\"都是指向头部元素的指针\",{\"1\":{\"536\":1}}],[\"都是\",{\"1\":{\"168\":1,\"1124\":1}}],[\"都是为了在请求前或者请求后做一些特殊的工作并且不影响到本身的业务逻辑\",{\"1\":{\"164\":1}}],[\"都是空的\",{\"1\":{\"162\":1}}],[\"都是一个长时间运行的守护进程\",{\"1\":{\"142\":1}}],[\"都是一个代理\",{\"1\":{\"141\":1}}],[\"都是留给命令行接口给其它工具和脚本操作的\",{\"1\":{\"34\":1}}],[\"都在努力改进\",{\"1\":{\"129\":1}}],[\"垃圾收集造成的暂停时间低至\",{\"1\":{\"129\":1}}],[\"垃圾回收由runtime\",{\"1\":{\"1132\":1}}],[\"垃圾回收所造成的\",{\"1\":{\"1130\":1}}],[\"垃圾回收的工作就在这个图上进行\",{\"1\":{\"1134\":1}}],[\"垃圾回收的历史\",{\"1\":{\"1130\":1}}],[\"垃圾回收的发展历史已经有了几十年\",{\"1\":{\"1130\":1}}],[\"垃圾回收要干的事就是将不再使用的对象内存释放\",{\"1\":{\"1130\":1}}],[\"垃圾回收器负责回收释放无用的堆内存\",{\"1\":{\"1109\":1}}],[\"垃圾回收对于执行时间过长的协程也会进行抢占\",{\"1\":{\"1108\":1}}],[\"垃圾回收等\",{\"1\":{\"96\":1}}],[\"垃圾回收\",{\"1\":{\"88\":1,\"1108\":1}}],[\"`enums\",{\"1\":{\"1014\":1}}],[\"`exp`\",{\"1\":{\"778\":1}}],[\"`+url\",{\"1\":{\"986\":1}}],[\"`binding\",{\"1\":{\"977\":2}}],[\"`bind\",{\"1\":{\"971\":2}}],[\"`bson\",{\"1\":{\"224\":3,\"225\":6}}],[\"`valiate\",{\"1\":{\"942\":1}}],[\"`validate\",{\"1\":{\"930\":1,\"938\":1,\"942\":2,\"946\":3,\"948\":2,\"949\":1,\"950\":1,\"952\":11,\"953\":1}}],[\"`house\",{\"1\":{\"895\":1,\"896\":1,\"897\":2,\"898\":1}}],[\"`houses`\",{\"1\":{\"895\":1,\"896\":4,\"897\":1,\"898\":1}}],[\"`schools`\",{\"1\":{\"895\":1,\"896\":2,\"897\":2,\"898\":2}}],[\"`school\",{\"1\":{\"895\":4,\"896\":1,\"897\":6,\"898\":2}}],[\"`sub`\",{\"1\":{\"778\":1}}],[\"``n\",{\"1\":{\"1156\":1}}],[\"``\",{\"1\":{\"874\":1}}],[\"```go\",{\"1\":{\"498\":1}}],[\"```\",{\"1\":{\"498\":3}}],[\"```bash\",{\"1\":{\"498\":2}}],[\"`orders`\",{\"1\":{\"863\":1}}],[\"`updated\",{\"1\":{\"856\":2}}],[\"`user`\",{\"1\":{\"233\":4}}],[\"`created\",{\"1\":{\"856\":2}}],[\"`copier\",{\"1\":{\"812\":6,\"813\":3}}],[\"`doc\",{\"1\":{\"1016\":1}}],[\"`dad`\",{\"1\":{\"856\":2}}],[\"`db\",{\"1\":{\"234\":4}}],[\"`minimum\",{\"1\":{\"1014\":1}}],[\"`minlength\",{\"1\":{\"1014\":1}}],[\"`moms`\",{\"1\":{\"895\":1,\"896\":2,\"897\":2,\"898\":2,\"899\":2}}],[\"`mom\",{\"1\":{\"895\":3,\"897\":3,\"898\":2}}],[\"`mom`\",{\"1\":{\"856\":2}}],[\"`mapstructure\",{\"1\":{\"797\":1}}],[\"`gorm\",{\"1\":{\"854\":2,\"855\":2,\"856\":4,\"857\":2,\"858\":3,\"859\":11,\"860\":11,\"863\":2,\"866\":1,\"891\":1,\"892\":2,\"893\":6}}],[\"`wire\",{\"1\":{\"828\":1}}],[\"`jti`\",{\"1\":{\"778\":1}}],[\"`json\",{\"1\":{\"129\":2,\"409\":1,\"447\":3,\"455\":3,\"626\":4,\"778\":7,\"781\":1,\"839\":26,\"1013\":3,\"1014\":2}}],[\"`nbf`\",{\"1\":{\"778\":1}}],[\"`name\",{\"1\":{\"734\":1}}],[\"`name`=\",{\"1\":{\"884\":1,\"886\":2,\"887\":2}}],[\"`name`\",{\"1\":{\"233\":1,\"856\":2,\"863\":3,\"874\":2,\"879\":1,\"895\":5,\"896\":1,\"897\":5}}],[\"`idx\",{\"1\":{\"863\":1}}],[\"`id`=`id`\",{\"1\":{\"895\":2,\"897\":2}}],[\"`id`\",{\"1\":{\"233\":2,\"863\":4,\"874\":2,\"875\":3,\"884\":1,\"886\":2,\"887\":2,\"888\":4,\"895\":2,\"896\":5,\"897\":6,\"898\":5,\"899\":1}}],[\"`iat`\",{\"1\":{\"778\":1}}],[\"`iss`\",{\"1\":{\"778\":1}}],[\"`people`\",{\"1\":{\"895\":3,\"896\":4,\"897\":8,\"898\":9,\"899\":1}}],[\"`person`\",{\"1\":{\"856\":2,\"863\":1,\"871\":1,\"872\":1,\"873\":1,\"874\":5,\"875\":8,\"876\":2,\"877\":1,\"878\":1,\"879\":1,\"880\":3,\"881\":2,\"884\":1,\"885\":1,\"886\":2,\"887\":2,\"888\":11}}],[\"`person\",{\"1\":{\"734\":1,\"895\":3,\"896\":4,\"897\":7,\"898\":4}}],[\"`print\",{\"1\":{\"805\":1}}],[\"`properties\",{\"1\":{\"409\":1}}],[\"`protobuf\",{\"1\":{\"152\":2,\"167\":3}}],[\"`the\",{\"1\":{\"975\":3}}],[\"`this\",{\"1\":{\"723\":1}}],[\"`toml\",{\"1\":{\"409\":1}}],[\"`xml\",{\"1\":{\"618\":4}}],[\"`yaml\",{\"1\":{\"409\":1,\"621\":5,\"840\":13}}],[\"`key1\",{\"1\":{\"409\":1}}],[\"`这是一个原生字符串\",{\"1\":{\"374\":1}}],[\"`attachment\",{\"1\":{\"986\":1}}],[\"`aud`\",{\"1\":{\"778\":1}}],[\"`age\",{\"1\":{\"734\":1}}],[\"`age`=age\",{\"1\":{\"887\":2}}],[\"`age`\",{\"1\":{\"233\":1,\"895\":2,\"897\":2}}],[\"`abc`\",{\"1\":{\"306\":1}}],[\"`address`=\",{\"1\":{\"884\":1,\"885\":1,\"886\":2}}],[\"`address`\",{\"1\":{\"233\":1,\"856\":2,\"863\":1,\"871\":1,\"874\":1,\"878\":2,\"895\":2,\"897\":2}}],[\"`\",{\"1\":{\"129\":2,\"145\":2,\"152\":2,\"167\":3,\"175\":2,\"207\":2,\"209\":2,\"212\":2,\"214\":2,\"216\":6,\"224\":3,\"225\":6,\"234\":4,\"306\":3,\"374\":1,\"409\":5,\"447\":3,\"455\":3,\"618\":4,\"621\":5,\"626\":4,\"723\":1,\"725\":2,\"727\":2,\"733\":2,\"734\":3,\"778\":7,\"781\":1,\"797\":1,\"805\":1,\"812\":6,\"813\":3,\"828\":1,\"839\":26,\"840\":14,\"854\":2,\"855\":2,\"856\":4,\"857\":2,\"858\":3,\"859\":11,\"860\":11,\"863\":2,\"866\":1,\"891\":1,\"892\":3,\"893\":6,\"930\":1,\"938\":1,\"942\":3,\"946\":3,\"948\":2,\"949\":1,\"950\":1,\"952\":11,\"953\":1,\"971\":2,\"977\":2,\"1013\":3,\"1014\":5,\"1016\":2}}],[\"显示的值设置\",{\"1\":{\"789\":1}}],[\"显示每一时刻在\",{\"1\":{\"561\":1}}],[\"显示每一时刻在该处理器上运行的协程时间线\",{\"1\":{\"561\":1}}],[\"显示上下文中指定数目的冲突行\",{\"1\":{\"37\":1}}],[\"显然在大部分场景中我们都不希望发生这样的情况\",{\"1\":{\"1149\":1}}],[\"显然这是由于作用域不同\",{\"1\":{\"730\":1}}],[\"显然这很可能会触发\",{\"1\":{\"486\":1}}],[\"显然是不太可能的\",{\"1\":{\"571\":1}}],[\"显然是不可以的\",{\"1\":{\"571\":1}}],[\"显然项目的主目录并没有测试文件可供执行\",{\"1\":{\"518\":1}}],[\"显然传递一个指针比起传递一个切片所消耗的资源更小\",{\"1\":{\"414\":1}}],[\"显式的创建panic十分简单\",{\"1\":{\"605\":1}}],[\"显式的指明使用哪种类型\",{\"1\":{\"571\":1}}],[\"显式组合的方式\",{\"1\":{\"407\":1}}],[\"显式类型转换为字符串\",{\"1\":{\"376\":1}}],[\"显式类型转换为字节切片\",{\"1\":{\"376\":1}}],[\"显著降低了\",{\"1\":{\"127\":1}}],[\"显著提高了堆的扫描性能\",{\"1\":{\"125\":1}}],[\"虚线代表着略过了一些调用链\",{\"1\":{\"560\":1}}],[\"虚数i的后缀现在可以是任何的二进制\",{\"1\":{\"124\":1}}],[\"虚拟机和编译器\",{\"1\":{\"803\":1}}],[\"虚拟机中添加如下数据\",{\"1\":{\"143\":1}}],[\"虚拟机在演示的时候关闭了所有的防火墙\",{\"1\":{\"143\":1}}],[\"虚拟机\",{\"1\":{\"75\":2}}],[\"十分清闲\",{\"1\":{\"1104\":1}}],[\"十分轻便灵活\",{\"1\":{\"992\":1}}],[\"十分建议学习其他框架前先行掌握\",{\"1\":{\"637\":1}}],[\"十分常用\",{\"1\":{\"615\":1}}],[\"十几分钟就能上手\",{\"1\":{\"181\":1}}],[\"十六进制分数和二进制指数\",{\"1\":{\"698\":2}}],[\"十六进制\",{\"1\":{\"124\":2}}],[\"十进制\",{\"1\":{\"124\":2}}],[\"允许单向管道\",{\"1\":{\"1061\":1}}],[\"允许在切割时设置容量范围\",{\"1\":{\"1019\":1}}],[\"允许客户端访问的响应头\",{\"1\":{\"1000\":1}}],[\"允许使用的请求头\",{\"1\":{\"1000\":1}}],[\"允许使用的http\",{\"1\":{\"1000\":1}}],[\"允许使用下划线\",{\"1\":{\"301\":1}}],[\"允许应用程序在运行时动态读取一个配置文件\",{\"1\":{\"793\":1}}],[\"允许将普通函数用作\",{\"1\":{\"645\":1}}],[\"允许调用了t\",{\"1\":{\"519\":1}}],[\"允许函数有多个返回值\",{\"1\":{\"397\":1}}],[\"允许其存储的值在运行时动态的变化\",{\"1\":{\"327\":1}}],[\"允许它们作为\",{\"1\":{\"137\":1}}],[\"允许复制带有私有字段的结构体值\",{\"1\":{\"137\":1}}],[\"允许省略元素类型\",{\"1\":{\"132\":1}}],[\"允许unsafe\",{\"1\":{\"122\":1}}],[\"允许一个\",{\"1\":{\"117\":1}}],[\"发起的社区讨论\",{\"1\":{\"589\":1}}],[\"发生系统调用时\",{\"1\":{\"1106\":1}}],[\"发生了无法挽回的panic\",{\"1\":{\"1087\":1}}],[\"发生的错误类型\",{\"1\":{\"1087\":1}}],[\"发生panic\",{\"1\":{\"607\":4,\"1059\":1}}],[\"发生panic时后续的逻辑将无法执行\",{\"1\":{\"606\":1}}],[\"发生这种情况时\",{\"1\":{\"509\":1,\"510\":1}}],[\"发生错误时\",{\"1\":{\"417\":1}}],[\"发行版本已经到了\",{\"1\":{\"492\":1}}],[\"发送方的数据入队\",{\"1\":{\"1060\":1}}],[\"发送协程进入阻塞状态\",{\"1\":{\"1059\":1}}],[\"发送一个流响应并返回一个布尔值\",{\"1\":{\"981\":1}}],[\"发送数据或读取数据\",{\"1\":{\"682\":1}}],[\"发送数据\",{\"1\":{\"468\":1,\"469\":1,\"682\":1}}],[\"发送\",{\"0\":{\"1059\":1},\"1\":{\"162\":2,\"163\":1}}],[\"发送完毕\",{\"1\":{\"158\":2}}],[\"发送返回值并关闭连接\",{\"1\":{\"158\":1}}],[\"发送消息到指定频道\",{\"1\":{\"284\":1}}],[\"发送消息的协程\",{\"1\":{\"159\":1}}],[\"发送消息给指定用户\",{\"1\":{\"158\":1}}],[\"发送消息\",{\"1\":{\"158\":1}}],[\"发布新版本\",{\"1\":{\"513\":1}}],[\"发布订阅\",{\"0\":{\"284\":1}}],[\"发布\",{\"1\":{\"117\":1}}],[\"发明者之一\",{\"1\":{\"87\":1}}],[\"更好地组织路由\",{\"1\":{\"963\":1}}],[\"更好的方法是通过注册别名来提高复用性\",{\"1\":{\"948\":1}}],[\"更倾向于轻量化的框架\",{\"1\":{\"962\":1}}],[\"更不应该被编译\",{\"1\":{\"823\":1}}],[\"更大的区别在于垃圾回收的处理\",{\"1\":{\"751\":1}}],[\"更推荐这种写法\",{\"1\":{\"572\":1}}],[\"更换起重机b\",{\"1\":{\"567\":1}}],[\"更适合跟踪程序的运行细节\",{\"1\":{\"561\":1}}],[\"更适合处理这些基础的数据类型\",{\"1\":{\"488\":1}}],[\"更像是一种工程上的约定俗成\",{\"1\":{\"520\":1}}],[\"更多原因见g\",{\"1\":{\"1098\":1}}],[\"更多内容可以阅读官方文档\",{\"1\":{\"1016\":1}}],[\"更多的是使用短变量\",{\"1\":{\"391\":1}}],[\"更多的例子可以前往googleapis\",{\"1\":{\"168\":1}}],[\"更多细节可以前往官方文档了解\",{\"1\":{\"903\":1}}],[\"更多细节可以前往参考手册\",{\"1\":{\"314\":1}}],[\"更多细节前往参考手册\",{\"1\":{\"364\":1}}],[\"更多词汇和术语可以前往glossary\",{\"1\":{\"142\":1}}],[\"更能理解些\",{\"1\":{\"157\":1}}],[\"更易于发现的方法来添加每个\",{\"1\":{\"117\":1}}],[\"更新done值\",{\"1\":{\"1173\":1}}],[\"更新共享变量\",{\"1\":{\"1165\":1}}],[\"更新成功的话就开始下面的判断\",{\"1\":{\"1153\":1}}],[\"更新失败就直接开始下一轮循环\",{\"1\":{\"1153\":1}}],[\"更新h\",{\"1\":{\"1043\":1}}],[\"更新旧桶的tophash\",{\"1\":{\"1042\":1}}],[\"更新完毕\",{\"1\":{\"1038\":1}}],[\"更新完成后再解锁\",{\"1\":{\"480\":1}}],[\"更新时间并不是特别频繁\",{\"1\":{\"966\":1}}],[\"更新时追踪当前时间\",{\"1\":{\"862\":1}}],[\"更新关联\",{\"0\":{\"897\":1}}],[\"更新字段address的值\",{\"1\":{\"867\":1}}],[\"更新后触发\",{\"1\":{\"861\":1}}],[\"更新前触发\",{\"1\":{\"861\":1}}],[\"更新了\",{\"1\":{\"387\":1}}],[\"更新了package初始化顺序\",{\"1\":{\"116\":1}}],[\"更新数据\",{\"1\":{\"236\":1}}],[\"更新文档\",{\"0\":{\"227\":1}}],[\"更新文档内容\",{\"1\":{\"214\":1}}],[\"更新\",{\"0\":{\"214\":1,\"236\":1},\"1\":{\"861\":1,\"1101\":1}}],[\"更新日志\",{\"0\":{\"113\":1,\"291\":1}}],[\"更新的话只需要下载新的\",{\"1\":{\"90\":1,\"91\":1}}],[\"更新go\",{\"1\":{\"24\":1}}],[\"更新测试中的依赖版本\",{\"1\":{\"18\":1}}],[\"纳秒\",{\"1\":{\"116\":1,\"737\":1}}],[\"依然会往下执行消费元素的代码\",{\"1\":{\"1060\":1}}],[\"依据\",{\"1\":{\"568\":1}}],[\"依据规范造了一台更厉害的巨无霸起重机\",{\"1\":{\"567\":1}}],[\"依旧不足以作为错误信息返回给前端\",{\"1\":{\"952\":1}}],[\"依旧采用any进行约束\",{\"1\":{\"578\":1}}],[\"依旧是同一个锁\",{\"1\":{\"482\":1}}],[\"依旧可以读取数据\",{\"1\":{\"470\":1}}],[\"依旧可以通过值接收者来修改其内部值\",{\"1\":{\"414\":1}}],[\"依旧有着\",{\"1\":{\"403\":1}}],[\"依旧在原先访问到的值基础上加一\",{\"1\":{\"479\":1}}],[\"依旧在\",{\"1\":{\"116\":1}}],[\"依赖问题\",{\"1\":{\"547\":1}}],[\"依赖的代理服务器集合\",{\"1\":{\"511\":1}}],[\"依赖的源码压缩包\",{\"1\":{\"510\":1}}],[\"依赖的go\",{\"1\":{\"509\":1}}],[\"依赖的命令现在可以并发安全的使用\",{\"1\":{\"125\":1}}],[\"依赖难以管理\",{\"1\":{\"492\":1}}],[\"依赖\",{\"0\":{\"204\":1,\"231\":1},\"1\":{\"503\":1}}],[\"依赖安装\",{\"0\":{\"148\":1}}],[\"依赖管理\",{\"1\":{\"88\":2,\"132\":1,\"156\":1}}],[\"依赖管理等多个方面\",{\"1\":{\"2\":1}}],[\"依赖注入时会将一个具体的实现注入到接口上\",{\"1\":{\"826\":1}}],[\"依赖注入本就是应该如此简单的一个事情\",{\"1\":{\"823\":1}}],[\"依赖注入的理念只体现在使用上\",{\"1\":{\"821\":1}}],[\"依赖注入这个概念在\",{\"1\":{\"821\":1}}],[\"依赖注入容器\",{\"1\":{\"67\":1}}],[\"依赖注入工具\",{\"1\":{\"67\":1}}],[\"依赖注入\",{\"0\":{\"67\":1}}],[\"依赖导航\",{\"0\":{\"50\":1}}],[\"保证栈中的所有都是黑色对象\",{\"1\":{\"1144\":1}}],[\"保证了强三色不变性\",{\"1\":{\"1142\":1}}],[\"保证了数据的正确性\",{\"1\":{\"481\":1}}],[\"保证了recover的返回值不会是nil\",{\"1\":{\"116\":1}}],[\"保护dirty的并发安全\",{\"1\":{\"1045\":1}}],[\"保存\",{\"1\":{\"1003\":1}}],[\"保存到本地\",{\"1\":{\"985\":1}}],[\"保存到图片文件\",{\"1\":{\"833\":1}}],[\"保存在本地\",{\"1\":{\"984\":1}}],[\"保存前触发\",{\"1\":{\"861\":1}}],[\"保存完整的关联\",{\"1\":{\"852\":1}}],[\"保存大小\",{\"1\":{\"617\":1}}],[\"保存方式\",{\"1\":{\"617\":1}}],[\"保存后触发\",{\"1\":{\"861\":1}}],[\"保存后\",{\"1\":{\"143\":1}}],[\"保留了指针\",{\"1\":{\"390\":1}}],[\"保留指定范围的元素\",{\"1\":{\"268\":1}}],[\"保留字段就可以在编译期起到这么一个提醒作用\",{\"1\":{\"188\":1}}],[\"保留字段编号声明后\",{\"1\":{\"188\":1}}],[\"保留字段\",{\"0\":{\"188\":1}}],[\"保留使用的内部\",{\"1\":{\"160\":1}}],[\"保留从指定的主要\",{\"1\":{\"24\":1}}],[\"详情了解\",{\"1\":{\"981\":1}}],[\"详情见issues\",{\"1\":{\"1052\":1}}],[\"详情见\",{\"1\":{\"116\":1}}],[\"详细信息查看go\",{\"1\":{\"114\":1}}],[\"重置字段值\",{\"1\":{\"1096\":1}}],[\"重置extra结构体\",{\"1\":{\"1040\":1}}],[\"重置哈希种子\",{\"1\":{\"1039\":1,\"1040\":1}}],[\"重定向\",{\"0\":{\"991\":1}}],[\"重定向到特定的位置\",{\"1\":{\"981\":1}}],[\"重定向配置\",{\"1\":{\"640\":1}}],[\"重命名成功\",{\"1\":{\"420\":1}}],[\"重命名也可以理解为移动文件\",{\"1\":{\"420\":1}}],[\"重命名\",{\"0\":{\"250\":1,\"420\":1}}],[\"重试信息\",{\"1\":{\"168\":1}}],[\"重复复制字符串\",{\"0\":{\"714\":1}}],[\"重复代码多\",{\"1\":{\"598\":1}}],[\"重复使用unaryinterceptor会抛出如下\",{\"1\":{\"165\":1}}],[\"重复执行\",{\"1\":{\"116\":1}}],[\"重新开始自旋流程\",{\"1\":{\"1153\":1}}],[\"重新扫描的耗时大概在\",{\"1\":{\"1142\":1}}],[\"重新分配一次哈希桶\",{\"1\":{\"1043\":1}}],[\"重新计算哈希值\",{\"1\":{\"1042\":1,\"1043\":1}}],[\"重新组织索引\",{\"1\":{\"587\":1}}],[\"重新设计了\",{\"1\":{\"138\":1}}],[\"重新登陆shell\",{\"1\":{\"93\":1}}],[\"重写\",{\"1\":{\"132\":1,\"949\":1}}],[\"重量级更新\",{\"1\":{\"119\":1}}],[\"重要变化\",{\"1\":{\"118\":1,\"121\":1,\"122\":1,\"125\":1,\"126\":1,\"127\":1,\"130\":1,\"131\":1,\"134\":1}}],[\"按照执行顺序就会进入mexit函数来退出线程\",{\"1\":{\"1092\":1}}],[\"按照之前打乱的顺序访问管道\",{\"1\":{\"1067\":1}}],[\"按照顺序调用provider\",{\"1\":{\"824\":1}}],[\"按照\",{\"1\":{\"823\":1}}],[\"按照字典顺序进行字符串比较\",{\"1\":{\"705\":1}}],[\"按照字节来遍历会把中文字符拆开\",{\"1\":{\"380\":1}}],[\"按照常理来说应该这样使用\",{\"1\":{\"539\":1}}],[\"按照直觉来说\",{\"1\":{\"539\":1}}],[\"按照规范是在项目cmd\",{\"1\":{\"496\":1}}],[\"按照使用者的初衷来说\",{\"1\":{\"402\":1}}],[\"按照计算机科学的术语来讲是用于表达源代码中一个固定值的符号\",{\"1\":{\"300\":1}}],[\"按照domain\",{\"1\":{\"28\":1}}],[\"按导入路径对所有包进行排序\",{\"1\":{\"116\":1}}],[\"到这里也就明白了为什么recover函数只能在defer中使用\",{\"1\":{\"1080\":1}}],[\"到最后如果没有管道中没有可消费的元素\",{\"1\":{\"1060\":1}}],[\"到此整个\",{\"1\":{\"1067\":1}}],[\"到此\",{\"1\":{\"546\":1,\"1092\":1}}],[\"到此动态链接库调用成功\",{\"1\":{\"545\":1}}],[\"到目前为止\",{\"1\":{\"166\":1}}],[\"到同一个链上\",{\"1\":{\"165\":1}}],[\"到了现如今\",{\"1\":{\"1084\":1}}],[\"到了版本go\",{\"1\":{\"1028\":1}}],[\"到了这里就会发生错误了\",{\"1\":{\"974\":1}}],[\"到了\",{\"1\":{\"136\":1,\"332\":1}}],[\"到现在分别打印前\",{\"1\":{\"116\":1}}],[\"到\",{\"1\":{\"115\":1,\"144\":3,\"1130\":1}}],[\"个待处理的协程\",{\"1\":{\"1165\":1}}],[\"个mspan到\",{\"1\":{\"1120\":1}}],[\"个mcentral\",{\"1\":{\"1117\":1}}],[\"个线程对应\",{\"1\":{\"1085\":1}}],[\"个情况执行\",{\"1\":{\"1060\":1}}],[\"个哈希桶的地址\",{\"1\":{\"1030\":1}}],[\"个函数\",{\"1\":{\"908\":1}}],[\"个参数的\",{\"1\":{\"582\":1}}],[\"个可查看的项\",{\"1\":{\"560\":1}}],[\"个对象\",{\"1\":{\"485\":2}}],[\"个实例化后的对象在使用完毕后都需要由\",{\"1\":{\"485\":1}}],[\"个协程不断的存入数据\",{\"1\":{\"486\":1}}],[\"个协程不断的在池中申请和释放对象\",{\"1\":{\"485\":1}}],[\"个协程将会创建\",{\"1\":{\"485\":1}}],[\"个协程\",{\"1\":{\"485\":1,\"1085\":1,\"1165\":1,\"1171\":1}}],[\"个协程都需要各自实例化对象\",{\"1\":{\"485\":1}}],[\"个协程执行\",{\"1\":{\"479\":1}}],[\"个读协程\",{\"1\":{\"481\":1}}],[\"个写协程\",{\"1\":{\"481\":1}}],[\"个+1操作\",{\"1\":{\"479\":1}}],[\"个cancelctx\",{\"1\":{\"477\":1}}],[\"个数据\",{\"1\":{\"467\":2}}],[\"个管道\",{\"1\":{\"467\":1}}],[\"个或多个值\",{\"1\":{\"396\":1}}],[\"个或者\",{\"1\":{\"187\":1}}],[\"个元素为切片推送给调用者\",{\"1\":{\"585\":1}}],[\"个元素\",{\"1\":{\"367\":3}}],[\"个该字段\",{\"1\":{\"187\":1}}],[\"个字节的内存浪费\",{\"1\":{\"410\":1}}],[\"个字节是无用的\",{\"1\":{\"410\":1}}],[\"个字节吗\",{\"1\":{\"410\":1}}],[\"个字节\",{\"1\":{\"187\":1,\"377\":1,\"380\":2,\"410\":7,\"750\":1}}],[\"个帧\",{\"1\":{\"116\":1}}],[\"个\",{\"1\":{\"115\":1,\"168\":1,\"526\":1,\"582\":1,\"995\":1,\"1030\":2,\"1032\":1,\"1076\":2}}],[\"个人猜测\",{\"1\":{\"1053\":1}}],[\"个人认为\",{\"1\":{\"1052\":1}}],[\"个人并不喜欢将\",{\"1\":{\"1016\":1}}],[\"个人推荐用以下的目录结构来存放\",{\"1\":{\"92\":1}}],[\"个人非常推荐\",{\"1\":{\"65\":1}}],[\"优点\",{\"1\":{\"1002\":1,\"1003\":1,\"1004\":1,\"1142\":1,\"1143\":1}}],[\"优先级\",{\"1\":{\"758\":1,\"763\":1}}],[\"优先应用options\",{\"1\":{\"406\":1}}],[\"优先的\",{\"1\":{\"52\":1}}],[\"优化\",{\"0\":{\"1066\":1},\"1\":{\"954\":1}}],[\"优化程度最高\",{\"1\":{\"198\":1}}],[\"优化了\",{\"1\":{\"129\":1}}],[\"优化了小对象的分配效率\",{\"1\":{\"122\":1}}],[\"优化了append函数的扩容行为\",{\"1\":{\"119\":1}}],[\"优化了在\",{\"1\":{\"116\":1}}],[\"优化了time标准库的实现\",{\"1\":{\"114\":1}}],[\"优雅退出\",{\"1\":{\"141\":1}}],[\"想让\",{\"1\":{\"539\":1}}],[\"想获取最新消息还请前往官网\",{\"1\":{\"113\":1}}],[\"想要执行用户代码要依靠\",{\"1\":{\"1090\":1}}],[\"想要修改字符串的话\",{\"1\":{\"1054\":1}}],[\"想要更深一步学习\",{\"1\":{\"609\":1}}],[\"想要直接使用别人写好的库除了直接获取源代码之外\",{\"1\":{\"544\":1}}],[\"想要使用\",{\"1\":{\"530\":1}}],[\"想要清空缓存可以执行如下命令\",{\"1\":{\"507\":1}}],[\"想要清空\",{\"1\":{\"387\":1}}],[\"想要练手的话\",{\"1\":{\"346\":1}}],[\"想要访问包中的类型时\",{\"1\":{\"295\":1}}],[\"想要\",{\"1\":{\"193\":1}}],[\"想要了解更深的细节可以阅读官方文档\",{\"1\":{\"848\":1}}],[\"想要了解更多\",{\"1\":{\"1141\":1}}],[\"想要了解更多的话可以去百度\",{\"1\":{\"638\":1}}],[\"想要了解更多细节建议使用go\",{\"1\":{\"519\":1}}],[\"想要了解更多细节可以前往cmd\",{\"1\":{\"2\":1}}],[\"想要了解\",{\"1\":{\"381\":1}}],[\"想要了解可以在runtime\",{\"1\":{\"49\":1}}],[\"想要获得更详细的信息就需要使用\",{\"1\":{\"3\":1}}],[\"见coverage\",{\"1\":{\"117\":1}}],[\"见profile\",{\"1\":{\"116\":1}}],[\"见go\",{\"1\":{\"113\":1}}],[\"见semantic\",{\"1\":{\"113\":1}}],[\"五年过后\",{\"1\":{\"113\":1}}],[\"升级到最新版\",{\"1\":{\"113\":1}}],[\"鉴于\",{\"1\":{\"113\":1}}],[\"维护集群状态\",{\"1\":{\"142\":1}}],[\"维护时间都是六个月\",{\"1\":{\"113\":1}}],[\"维护版本\",{\"1\":{\"113\":1}}],[\"补丁版本是\",{\"1\":{\"505\":1}}],[\"补丁版本的更新意味着有问题被修复同时保持向下兼容\",{\"1\":{\"113\":1}}],[\"补丁版本\",{\"1\":{\"113\":1}}],[\"首先它会跟其它的写者协程竞争直到持有互斥锁\",{\"1\":{\"1158\":1}}],[\"首先它会将当前的协程构造成sudog并加入hchan\",{\"1\":{\"1059\":1}}],[\"首先判断是否已经解锁了\",{\"1\":{\"1154\":1}}],[\"首先判断切片长度是否为\",{\"1\":{\"1027\":1}}],[\"首先将runtime\",{\"1\":{\"1140\":1}}],[\"首先切断\",{\"1\":{\"1106\":1}}],[\"首先更新\",{\"1\":{\"1104\":1}}],[\"首先锁住当前的\",{\"1\":{\"1097\":1}}],[\"首先根据数量大小判断是否需要扩容\",{\"1\":{\"1089\":1}}],[\"首先根据i值和offset值取模运算得到待遍历的桶内下标\",{\"1\":{\"1037\":1}}],[\"首先来简单的介绍下\",{\"1\":{\"1085\":1}}],[\"首先会准备一些变量\",{\"1\":{\"1153\":1}}],[\"首先会根据对象的大小计算出应该使用哪一类的spanclass\",{\"1\":{\"1125\":1}}],[\"首先会根据gp\",{\"1\":{\"1106\":1}}],[\"首先会尝试使用线性分配器mheap\",{\"1\":{\"1122\":1}}],[\"首先会使用pagealloc\",{\"1\":{\"1120\":1}}],[\"首先会在空闲列表的已清扫集合中寻找可用的mspan\",{\"1\":{\"1117\":1}}],[\"首先会锁住当前的\",{\"1\":{\"1097\":1}}],[\"首先会记录当前的执行现场\",{\"1\":{\"1089\":1}}],[\"首先会检测参数是否为nil\",{\"1\":{\"1079\":1}}],[\"首先会通过页分配器mheap\",{\"1\":{\"1121\":1}}],[\"首先会通过getcallersp\",{\"1\":{\"1075\":1}}],[\"首先会通过loadint64来获取期望值\",{\"1\":{\"490\":1}}],[\"首先会判断它们的类型是否相等\",{\"1\":{\"1070\":1}}],[\"首先遍历pollorder数组\",{\"1\":{\"1067\":1}}],[\"首先处理切片长度为\",{\"1\":{\"1054\":1}}],[\"首先做的事情是统计要拼接字符串的总长度和数量\",{\"1\":{\"1053\":1}}],[\"首先进入\",{\"1\":{\"1038\":1}}],[\"首先要获取\",{\"1\":{\"1037\":1}}],[\"首先就是计算预计分配的内存是否会超出最大分配内存\",{\"1\":{\"1034\":1}}],[\"首先计算出待添加元素数量\",{\"1\":{\"1024\":1}}],[\"首先下载\",{\"1\":{\"1010\":1}}],[\"首先自定义\",{\"1\":{\"952\":1}}],[\"首先自己创建一个配置文件config\",{\"1\":{\"840\":1}}],[\"首先我们要自己书写配置文件\",{\"1\":{\"840\":1}}],[\"首先看一下直接使用最原始的日志的输出\",{\"1\":{\"840\":1}}],[\"首先看一下总体的配置结构体\",{\"1\":{\"839\":1}}],[\"首先定义一个简单的acl模型文件如下\",{\"1\":{\"764\":1}}],[\"首先定义结构体\",{\"1\":{\"618\":1,\"624\":1}}],[\"首先通过slicedata获取字节切片的底层数组的地址\",{\"1\":{\"1054\":1}}],[\"首先通过\",{\"1\":{\"723\":1}}],[\"首先声明队列类型\",{\"1\":{\"577\":1}}],[\"首先编译生成目标文件\",{\"1\":{\"545\":1}}],[\"首先准备一个lib\",{\"1\":{\"545\":1}}],[\"首先引入errno\",{\"1\":{\"531\":1}}],[\"首先需要将整个\",{\"1\":{\"1040\":1}}],[\"首先需要计算\",{\"1\":{\"1036\":1}}],[\"首先需要确定新的长度和容量\",{\"1\":{\"1025\":1}}],[\"首先需要首先自定义一个结构体实现handler接口中的servehttp\",{\"1\":{\"645\":1}}],[\"首先需要给语料种子库添加数据\",{\"1\":{\"527\":1}}],[\"首先需要下载该工具\",{\"1\":{\"526\":1}}],[\"首先需要注意几点规范\",{\"1\":{\"517\":1}}],[\"首先项目下有两个独立的\",{\"1\":{\"513\":1}}],[\"首先使用如下命令下载一个依赖\",{\"1\":{\"510\":1}}],[\"首先你需要一个可公网访问的源代码仓库\",{\"1\":{\"495\":1}}],[\"首先\",{\"1\":{\"428\":1}}],[\"首先创建文件\",{\"1\":{\"525\":1,\"527\":1}}],[\"首先创建一个头文件sum\",{\"1\":{\"532\":1}}],[\"首先创建一个hello\",{\"1\":{\"520\":1}}],[\"首先创建一个长度为\",{\"1\":{\"365\":1}}],[\"首先创建\",{\"1\":{\"223\":1,\"521\":1}}],[\"首先创建如下项目结构\",{\"1\":{\"159\":1}}],[\"首先创建如下的项目结构\",{\"1\":{\"158\":1}}],[\"首先从一个例子来看protobuf文件大体长什么样\",{\"1\":{\"181\":1}}],[\"首先分别启动\",{\"1\":{\"144\":1}}],[\"首次提出\",{\"1\":{\"462\":1}}],[\"首次实验性的支持了\",{\"1\":{\"126\":1}}],[\"首次发布\",{\"1\":{\"113\":2,\"114\":1,\"115\":1,\"116\":1,\"117\":1,\"118\":1,\"119\":1,\"120\":1,\"121\":1,\"122\":1,\"123\":1,\"124\":1,\"125\":1,\"126\":2,\"127\":1,\"128\":1,\"129\":1,\"130\":1,\"131\":1,\"132\":1,\"133\":1,\"134\":1,\"135\":1,\"136\":1,\"137\":1}}],[\"首页\",{\"1\":{\"101\":1}}],[\"具有很大的天然优势\",{\"1\":{\"1004\":1}}],[\"具有以下特点\",{\"1\":{\"845\":1}}],[\"具有轻量\",{\"1\":{\"769\":1}}],[\"具有超级用户的acl\",{\"1\":{\"758\":1}}],[\"具有返回值的内置函数不允许跟随在go关键字后面\",{\"1\":{\"462\":1}}],[\"具有高性能和强扩展性的微服务\",{\"1\":{\"51\":1}}],[\"具名管道\",{\"1\":{\"416\":1}}],[\"具体怎么创建就不是我们要关心的事了\",{\"1\":{\"1091\":1}}],[\"具体区别不作赘述\",{\"1\":{\"984\":1}}],[\"具体代码省略\",{\"1\":{\"840\":1}}],[\"具体何时调用交给\",{\"1\":{\"829\":1}}],[\"具体是哪一个协程会打印\",{\"1\":{\"1171\":1}}],[\"具体是如分配内存的\",{\"1\":{\"549\":1}}],[\"具体是什么类型交给编译器自行推断\",{\"1\":{\"329\":1}}],[\"具体行为与\",{\"1\":{\"511\":1}}],[\"具体在请求时设置多长的超时时间\",{\"1\":{\"171\":1}}],[\"具体的计算代码如下所示\",{\"1\":{\"1138\":1}}],[\"具体的策略规则并不会出现在模型文件中\",{\"1\":{\"760\":1}}],[\"具体的参数与上面对于的数据转换函数一致\",{\"1\":{\"701\":1}}],[\"具体的分析工作要留到后面再进行\",{\"1\":{\"557\":1}}],[\"具体的实现是由plan9汇编编写\",{\"1\":{\"488\":1}}],[\"具体的\",{\"1\":{\"230\":1}}],[\"具体的handler\",{\"1\":{\"165\":1}}],[\"具体的处理逻辑与上个例子类似\",{\"1\":{\"159\":1}}],[\"具体的处理逻辑可以由客户端自己决定\",{\"1\":{\"157\":1}}],[\"具体类型如下所示\",{\"1\":{\"165\":1,\"166\":1}}],[\"具体处理逻辑可以由服务端决定\",{\"1\":{\"157\":1}}],[\"具体原因看这里\",{\"1\":{\"112\":1}}],[\"返回创建的协程\",{\"1\":{\"1095\":1}}],[\"返回元素指针\",{\"1\":{\"1038\":3}}],[\"返回零值\",{\"1\":{\"1036\":1}}],[\"返回的实际上是它的hchan\",{\"1\":{\"1057\":1}}],[\"返回的字符串s是为了方便表示\",{\"1\":{\"1053\":1}}],[\"返回的是一个unsafe指针\",{\"1\":{\"1038\":1}}],[\"返回的时候也只会返回指针\",{\"1\":{\"1036\":1}}],[\"返回的就是一个新切片了\",{\"1\":{\"1025\":1}}],[\"返回的默认engine就使用两个默认中间件logger\",{\"1\":{\"992\":1}}],[\"返回结果\",{\"1\":{\"984\":1,\"985\":1}}],[\"返回结果集的长度\",{\"1\":{\"272\":3}}],[\"返回纯字符串格式的数据\",{\"1\":{\"979\":1}}],[\"返回字段即代表验证正确\",{\"1\":{\"950\":1}}],[\"返回字符串\",{\"1\":{\"709\":1,\"713\":1,\"1054\":1}}],[\"返回给客户端\",{\"1\":{\"785\":1}}],[\"返回给定集合的并集\",{\"1\":{\"272\":1}}],[\"返回给定集合的交集\",{\"1\":{\"272\":1}}],[\"返回给定集合的差集\",{\"1\":{\"272\":1}}],[\"返回验证密钥\",{\"1\":{\"782\":1,\"783\":1}}],[\"返回其起始内存地址\",{\"1\":{\"1054\":1}}],[\"返回其切片表达形式\",{\"1\":{\"1054\":1}}],[\"返回其字符串表达形式\",{\"1\":{\"756\":1}}],[\"返回其底层数组的其实地址\",{\"1\":{\"753\":1}}],[\"返回长度\",{\"1\":{\"728\":1}}],[\"返回最后一次出现的子串任意字符的下标\",{\"1\":{\"712\":1}}],[\"返回最后一次出现的子串的下标\",{\"1\":{\"712\":1}}],[\"返回第一次出现的子串的下标\",{\"1\":{\"712\":3}}],[\"返回切片的长度\",{\"1\":{\"688\":1}}],[\"返回命令行参数的个数\",{\"1\":{\"635\":1}}],[\"返回非命令行参数的个数\",{\"1\":{\"635\":1}}],[\"返回所有非命令参数\",{\"1\":{\"635\":1}}],[\"返回false时\",{\"1\":{\"486\":1}}],[\"返回了一个cancelctx和cancel函数\",{\"1\":{\"477\":1}}],[\"返回context和一个函数\",{\"1\":{\"477\":1}}],[\"返回nil\",{\"1\":{\"474\":1}}],[\"返回指针和error\",{\"1\":{\"824\":1}}],[\"返回指向反射值的指针反射值\",{\"1\":{\"454\":1}}],[\"返回指定区间的元素\",{\"1\":{\"280\":1}}],[\"返回空字符串\",{\"1\":{\"450\":1}}],[\"返回一个管道\",{\"1\":{\"477\":1}}],[\"返回一个指向v的原始值的unsafe\",{\"1\":{\"441\":1}}],[\"返回一个指向v的原始值的uintptr\",{\"1\":{\"441\":1}}],[\"返回一个指向v的原始值的uinptr\",{\"1\":{\"441\":1}}],[\"返回一个表示v地址的指针反射值\",{\"1\":{\"441\":1}}],[\"返回值就是初始化完毕的hmap指针\",{\"1\":{\"1034\":1}}],[\"返回值就是一个token结构体\",{\"1\":{\"782\":1,\"783\":1}}],[\"返回值为是否通过测试\",{\"1\":{\"523\":1}}],[\"返回值会返回对应的值和该值是否存在\",{\"1\":{\"486\":1}}],[\"返回值的数量\",{\"1\":{\"445\":1}}],[\"返回值类型为int\",{\"1\":{\"395\":1}}],[\"返回值组成\",{\"1\":{\"395\":1}}],[\"返回值\",{\"0\":{\"397\":1},\"1\":{\"395\":1}}],[\"返回值是指针\",{\"1\":{\"633\":1}}],[\"返回值是值\",{\"1\":{\"393\":1}}],[\"返回值是类型指针\",{\"1\":{\"393\":1}}],[\"返回值是添加后的切片\",{\"1\":{\"365\":1}}],[\"返回sha值\",{\"1\":{\"283\":1}}],[\"返回介于min和max之间的所有成员列表\",{\"1\":{\"280\":1}}],[\"返回介于min和max之间的成员数量\",{\"1\":{\"280\":1}}],[\"返回对应文件\",{\"1\":{\"986\":1}}],[\"返回对应的\",{\"1\":{\"106\":1}}],[\"返回对元素的权值\",{\"1\":{\"280\":1}}],[\"返回有序集合中该元素的排名\",{\"1\":{\"279\":2}}],[\"返回时\",{\"1\":{\"162\":1}}],[\"返回成功发送的消息数目\",{\"1\":{\"158\":1}}],[\"返回消息流\",{\"1\":{\"158\":1}}],[\"返回\",{\"1\":{\"116\":1,\"705\":3,\"737\":1,\"965\":1,\"980\":1}}],[\"返回格式化后的代码段\",{\"1\":{\"108\":1}}],[\"否\",{\"1\":{\"106\":1,\"568\":2}}],[\"否则继续循环判断直到退出\",{\"1\":{\"1160\":1}}],[\"否则说明有其它用户任务要执行\",{\"1\":{\"1153\":1}}],[\"否则意味着已经有协程长时间无法获得锁\",{\"1\":{\"1153\":1}}],[\"否则成功获得锁\",{\"1\":{\"1152\":1}}],[\"否则为true\",{\"1\":{\"1067\":1}}],[\"否则为false\",{\"1\":{\"486\":1}}],[\"否则在极端情况下一些管道可能永远也不会被处理\",{\"1\":{\"1063\":1}}],[\"否则不会起作用\",{\"1\":{\"1014\":1}}],[\"否则请求认证\",{\"1\":{\"960\":1}}],[\"否则以结构体属性名为准\",{\"1\":{\"628\":1}}],[\"否则程序立即停止运行并输出堆栈信息\",{\"1\":{\"604\":1}}],[\"否则调用unwrap\",{\"1\":{\"603\":1}}],[\"否则链式调用还可以更加简洁和优雅一些\",{\"1\":{\"587\":1}}],[\"否则这块内存是不会被自动释放掉的\",{\"1\":{\"543\":1}}],[\"否则找不到\",{\"1\":{\"532\":1}}],[\"否则就通过cas操作将等待协程数量加一\",{\"1\":{\"1178\":1}}],[\"否则就需要进入unlockslow的流程\",{\"1\":{\"1154\":1}}],[\"否则就是fifo先进先出\",{\"1\":{\"1153\":1}}],[\"否则就是一个空指针\",{\"1\":{\"391\":1}}],[\"否则就开辟新内存\",{\"1\":{\"1054\":1}}],[\"否则就插入\",{\"1\":{\"866\":1}}],[\"否则就只是一个普通的函数\",{\"1\":{\"520\":1}}],[\"否则就不会\",{\"1\":{\"518\":1}}],[\"否则就不是完全相等\",{\"1\":{\"460\":1}}],[\"否则就一直向上查找\",{\"1\":{\"477\":1}}],[\"否则就阻塞等待\",{\"1\":{\"480\":1}}],[\"否则就阻塞\",{\"1\":{\"472\":1}}],[\"否则就会去尝试持有mu互斥锁\",{\"1\":{\"1046\":1}}],[\"否则就会报错\",{\"1\":{\"725\":1}}],[\"否则就会停止\",{\"1\":{\"582\":1}}],[\"否则就会一直阻塞\",{\"1\":{\"467\":1}}],[\"否则就会阻塞等待\",{\"1\":{\"466\":1}}],[\"否则水就溢出来了\",{\"1\":{\"364\":1}}],[\"否则将会报错\",{\"1\":{\"953\":1}}],[\"否则将会\",{\"1\":{\"781\":1}}],[\"否则将会提示undefined\",{\"1\":{\"727\":1}}],[\"否则将无法正常解析\",{\"1\":{\"726\":1}}],[\"否则将无法通过编译\",{\"1\":{\"360\":1}}],[\"否则将新的值存入并返回\",{\"1\":{\"486\":1}}],[\"否则将不会起任何作用\",{\"1\":{\"7\":1}}],[\"否则生成的是切片\",{\"1\":{\"360\":1}}],[\"否则无法成功写入文件\",{\"1\":{\"418\":1}}],[\"否则无法通过编译\",{\"1\":{\"323\":1}}],[\"否则无法使用\",{\"1\":{\"7\":1}}],[\"否则编译将会不通过\",{\"1\":{\"188\":1}}],[\"否则编译不通过\",{\"1\":{\"137\":1}}],[\"否则会的话会指向一个新的数组\",{\"1\":{\"1024\":1}}],[\"否则会报错\",{\"1\":{\"864\":1}}],[\"否则会panic\",{\"1\":{\"433\":1,\"441\":2,\"1016\":1}}],[\"否则会死锁\",{\"1\":{\"175\":1}}],[\"否则会对\",{\"1\":{\"95\":1}}],[\"否则它会报告哪里发生了改变\",{\"1\":{\"29\":1}}],[\"否则的话通过cas操作尝试更新状态为mutexlocked\",{\"1\":{\"1152\":1}}],[\"否则的话它会被释放回堆内存\",{\"1\":{\"1121\":1}}],[\"否则的话就需要进入阻塞队列等待\",{\"1\":{\"1158\":1}}],[\"否则的话就会调用runtime\",{\"1\":{\"1153\":1}}],[\"否则的话就会去找空闲的\",{\"1\":{\"1097\":1}}],[\"否则的话就直接查看相邻元素的哈希状态\",{\"1\":{\"1039\":1}}],[\"否则的话字符串就会发生变化\",{\"1\":{\"1054\":1}}],[\"否则的话\",{\"1\":{\"1054\":1,\"1154\":1}}],[\"否则的话肯定是出问题了\",{\"1\":{\"1042\":1}}],[\"否则的话后续遍历时会导致无法在正确的位置退出\",{\"1\":{\"1039\":1}}],[\"否则的话什么也不做\",{\"1\":{\"490\":1}}],[\"否则的话编译不通过\",{\"1\":{\"296\":1}}],[\"否则的话应该使用\",{\"1\":{\"145\":1}}],[\"否则的话会提示你无法安装\",{\"1\":{\"19\":1}}],[\"否则的话也无法使用gobin目录的下的二进制文件\",{\"1\":{\"7\":1}}],[\"位机器上作为内存预分配的功能来使用\",{\"1\":{\"1111\":1}}],[\"位机上堆内存的最大值提升到了几十\",{\"1\":{\"136\":1}}],[\"位字节的集合\",{\"1\":{\"1051\":1}}],[\"位数字\",{\"1\":{\"1125\":1}}],[\"位数\",{\"1\":{\"697\":1,\"699\":1,\"700\":1}}],[\"位运算操作包\",{\"1\":{\"616\":1}}],[\"位整数uint8最多表示\",{\"1\":{\"1076\":1}}],[\"位整数变量deferbits来当作\",{\"1\":{\"1076\":1}}],[\"位整数的时候\",{\"1\":{\"1058\":1}}],[\"位整数\",{\"1\":{\"595\":2}}],[\"位整型\",{\"1\":{\"158\":1,\"316\":9}}],[\"位实数和虚数\",{\"1\":{\"318\":2}}],[\"位浮点数切片\",{\"1\":{\"320\":1}}],[\"位浮点数\",{\"1\":{\"317\":2}}],[\"位\",{\"1\":{\"316\":2,\"509\":1,\"750\":1,\"1115\":2}}],[\"位置开始删除\",{\"1\":{\"367\":1}}],[\"位置\",{\"1\":{\"106\":1,\"107\":1,\"108\":1,\"112\":1}}],[\"位于runtime\",{\"1\":{\"1107\":1}}],[\"位于空闲状态\",{\"1\":{\"1088\":1}}],[\"位于等待队列中\",{\"1\":{\"1086\":1}}],[\"位于bson\",{\"1\":{\"222\":1}}],[\"位于grpc\",{\"1\":{\"168\":1}}],[\"位于goroot\",{\"1\":{\"17\":1}}],[\"位于$goroot\",{\"1\":{\"7\":1}}],[\"服务配置\",{\"0\":{\"997\":1}}],[\"服务代码\",{\"1\":{\"200\":1}}],[\"服务代理\",{\"1\":{\"142\":1}}],[\"服务包含若干个\",{\"1\":{\"196\":1}}],[\"服务调度等等\",{\"1\":{\"175\":1}}],[\"服务下线等\",{\"1\":{\"175\":1}}],[\"服务不可用\",{\"1\":{\"168\":1}}],[\"服务端无需存储\",{\"1\":{\"1004\":1}}],[\"服务端建立新连接时\",{\"1\":{\"682\":1}}],[\"服务端接收数据\",{\"1\":{\"682\":1}}],[\"服务端代码\",{\"1\":{\"682\":1}}],[\"服务端代码如下\",{\"1\":{\"164\":1}}],[\"服务端\",{\"0\":{\"643\":1}}],[\"服务端生成的\",{\"1\":{\"205\":1}}],[\"服务端流式\",{\"1\":{\"196\":1}}],[\"服务端地址都是写死的\",{\"1\":{\"174\":1}}],[\"服务端会主动断开连接\",{\"1\":{\"170\":1}}],[\"服务端返回的所有的\",{\"1\":{\"168\":1}}],[\"服务端返回数据\",{\"1\":{\"157\":1}}],[\"服务端拦截\",{\"0\":{\"165\":1}}],[\"服务端拦截器和客户端拦截器\",{\"1\":{\"164\":1}}],[\"服务端获取\",{\"1\":{\"162\":1}}],[\"服务端使用\",{\"0\":{\"162\":1}}],[\"服务端输出分别如下\",{\"1\":{\"175\":1}}],[\"服务端输出\",{\"1\":{\"159\":1}}],[\"服务端输出如下\",{\"1\":{\"155\":1,\"166\":1}}],[\"服务端逻辑我们用多协程来进行处理\",{\"1\":{\"159\":1}}],[\"服务端逻辑中\",{\"1\":{\"159\":1}}],[\"服务端也可以随时通过流来返回数据\",{\"1\":{\"159\":1}}],[\"服务端不断的将消息放入队列中\",{\"1\":{\"158\":1}}],[\"服务端通过流式响应不断返回客户端想要的消息\",{\"1\":{\"158\":1}}],[\"服务端可以通过流多次发送数据给客户端\",{\"1\":{\"157\":1}}],[\"服务端可以不需要像一元\",{\"1\":{\"157\":1}}],[\"服务端是有两个的\",{\"1\":{\"145\":1}}],[\"服务\",{\"1\":{\"145\":1,\"196\":1,\"1005\":1,\"1008\":1}}],[\"服务集群中又分为追随者和领导者\",{\"1\":{\"142\":1}}],[\"服务注册负责告诉外界自己的地址\",{\"1\":{\"174\":1}}],[\"服务注册的方式有两种\",{\"1\":{\"145\":1}}],[\"服务注册与发现\",{\"0\":{\"145\":1,\"174\":1}}],[\"服务注册\",{\"1\":{\"139\":1}}],[\"服务发现负责监视服务地址的变化并更新\",{\"1\":{\"174\":1}}],[\"服务发现\",{\"1\":{\"139\":1}}],[\"服务网格\",{\"1\":{\"139\":1}}],[\"服务器可以这样写\",{\"1\":{\"1071\":1}}],[\"服务器在收到\",{\"1\":{\"775\":1}}],[\"服务器只需要一行代码\",{\"1\":{\"643\":1}}],[\"服务器的时候作为\",{\"1\":{\"165\":1}}],[\"服务器进行健康检查\",{\"1\":{\"109\":1}}],[\"服务器上\",{\"1\":{\"106\":1}}],[\"服务器地址\",{\"1\":{\"105\":1}}],[\"服务器本身是一个\",{\"1\":{\"105\":1}}],[\"服务器交互\",{\"1\":{\"104\":1,\"105\":1}}],[\"服务器\",{\"1\":{\"104\":1,\"105\":1,\"110\":1,\"503\":1,\"637\":1}}],[\"服务器会将上传的代码段存储到谷歌云存储\",{\"1\":{\"104\":1}}],[\"服务访问\",{\"1\":{\"41\":1}}],[\"煎鱼\",{\"1\":{\"102\":1}}],[\"煎鱼大佬\",{\"1\":{\"102\":1}}],[\"真正负责管理这些页内存的是runtime\",{\"1\":{\"1115\":1}}],[\"真正负责发送数据的是runtime\",{\"1\":{\"1059\":1}}],[\"真正的加入操作是在notifylistwait函数中完成\",{\"1\":{\"1167\":1}}],[\"真正的偷取工作由runtime\",{\"1\":{\"1104\":1}}],[\"真正的原子操作是由硬件指令层面支持的\",{\"1\":{\"487\":1}}],[\"真正做到了职责最小化\",{\"1\":{\"1008\":1}}],[\"真正有效的是其后的\",{\"1\":{\"509\":1}}],[\"真没什么逻辑\",{\"1\":{\"102\":1}}],[\"真有点东西\",{\"1\":{\"73\":1}}],[\"博客\",{\"0\":{\"102\":1}}],[\"非阻塞的方式获取锁\",{\"1\":{\"1152\":1}}],[\"非对称加密\",{\"1\":{\"777\":3}}],[\"非对称加密签名方法\",{\"1\":{\"777\":1}}],[\"非法的数据链接参数\",{\"1\":{\"605\":2}}],[\"非空接口的类型集是其所有元素的类型集的交集\",{\"1\":{\"574\":1}}],[\"非常忙碌\",{\"1\":{\"1104\":1}}],[\"非常好理解\",{\"1\":{\"731\":1}}],[\"非常多\",{\"1\":{\"617\":1}}],[\"非常适合用于命令行\",{\"1\":{\"615\":1}}],[\"非常致命的问题\",{\"1\":{\"598\":1}}],[\"非常相似\",{\"1\":{\"537\":1}}],[\"非常规文件\",{\"1\":{\"416\":1}}],[\"非常详细\",{\"1\":{\"101\":1}}],[\"非零整数也不能代表真值\",{\"1\":{\"315\":1}}],[\"非传统的序列化库\",{\"1\":{\"63\":1}}],[\"菜鸟教程\",{\"1\":{\"101\":1}}],[\"地到后面排队\",{\"1\":{\"1153\":1}}],[\"地区组件\",{\"1\":{\"952\":1}}],[\"地址必须以文本\",{\"1\":{\"952\":5}}],[\"地址支持\",{\"1\":{\"678\":1,\"679\":1,\"680\":1}}],[\"地址支持解析\",{\"1\":{\"677\":1}}],[\"地址解析\",{\"0\":{\"674\":1}}],[\"地址是否相等\",{\"1\":{\"568\":1}}],[\"地址\",{\"0\":{\"675\":1,\"677\":1,\"678\":1,\"679\":1,\"680\":1},\"1\":{\"104\":2,\"166\":1,\"222\":1,\"286\":1,\"287\":1,\"288\":1,\"289\":1,\"290\":1,\"291\":1,\"673\":1,\"681\":1,\"934\":2,\"952\":4}}],[\"地鼠文档\",{\"1\":{\"101\":2}}],[\"地理位置\",{\"0\":{\"68\":1}}],[\"论坛\",{\"0\":{\"101\":1}}],[\"程序运行时的状态\",{\"1\":{\"1082\":1}}],[\"程序往往就会抛出panic\",{\"1\":{\"1077\":1}}],[\"程序崩溃\",{\"1\":{\"1059\":1,\"1060\":1}}],[\"程序加载\",{\"1\":{\"1017\":1}}],[\"程序中嵌入\",{\"1\":{\"803\":1}}],[\"程序中导入别人写好的库\",{\"1\":{\"544\":1}}],[\"程序会直接崩掉报fatal\",{\"1\":{\"755\":1}}],[\"程序会panic\",{\"1\":{\"719\":1}}],[\"程序需要立刻停止运行\",{\"1\":{\"608\":1}}],[\"程序需要立即停止来处理该问题\",{\"1\":{\"604\":1}}],[\"程序执行剩下的逻辑后正常退出\",{\"1\":{\"607\":1}}],[\"程序正常退出\",{\"1\":{\"607\":5}}],[\"程序就会抛出如下的panic\",{\"1\":{\"1077\":1}}],[\"程序就直接退出了\",{\"1\":{\"606\":1}}],[\"程序就不应该启动\",{\"1\":{\"605\":1}}],[\"程序因为panic退出之前会做一些善后工作\",{\"1\":{\"606\":1}}],[\"程序应该立即退出\",{\"1\":{\"598\":1}}],[\"程序应该在处理完问题后立即退出\",{\"1\":{\"598\":1}}],[\"程序并执行\",{\"1\":{\"545\":1}}],[\"程序调用\",{\"1\":{\"533\":2}}],[\"程序将无法正常运行\",{\"1\":{\"472\":1}}],[\"程序开始时调用add初始化计数\",{\"1\":{\"472\":1}}],[\"程序是通过将包链接在一起来构建的\",{\"1\":{\"293\":1}}],[\"程序\",{\"1\":{\"290\":1,\"1089\":1}}],[\"程序而非\",{\"1\":{\"138\":1}}],[\"程序性能大概可以提升\",{\"1\":{\"136\":1}}],[\"程序性能有了较大幅度的提升\",{\"1\":{\"134\":1}}],[\"程序设计\",{\"1\":{\"102\":2}}],[\"程序设计语言\",{\"1\":{\"100\":1}}],[\"程序的就是runtime\",{\"1\":{\"1089\":1}}],[\"程序的引导阶段\",{\"1\":{\"1089\":1}}],[\"程序的网站\",{\"1\":{\"290\":1}}],[\"程序的构建信息\",{\"1\":{\"119\":1}}],[\"程序的入口参数\",{\"1\":{\"38\":1}}],[\"程序的部分执行行为\",{\"1\":{\"7\":1}}],[\"电子书\",{\"0\":{\"99\":1}}],[\"电子邮件\",{\"0\":{\"71\":1}}],[\"学校\",{\"1\":{\"899\":1}}],[\"学校与学生是一对多的关系\",{\"1\":{\"892\":1}}],[\"学会了\",{\"1\":{\"217\":1}}],[\"学\",{\"1\":{\"98\":1}}],[\"学习成本\",{\"1\":{\"617\":1}}],[\"学习的教程或工具\",{\"1\":{\"291\":1}}],[\"学习起来将会非常轻松\",{\"1\":{\"285\":1}}],[\"学习任何一门语言都是先笼统的了解这个语言的大致语法与结构\",{\"1\":{\"95\":1}}],[\"学习路上的成长经历\",{\"1\":{\"0\":1}}],[\"网页中总共有\",{\"1\":{\"560\":1}}],[\"网页分析可以可视化结果\",{\"1\":{\"560\":1}}],[\"网页\",{\"0\":{\"560\":1}}],[\"网络轮询器\",{\"1\":{\"1083\":1,\"1104\":1}}],[\"网络编程\",{\"0\":{\"612\":1,\"682\":1}}],[\"网络\",{\"0\":{\"921\":1,\"932\":1},\"1\":{\"340\":1,\"924\":1}}],[\"网络类型\",{\"1\":{\"242\":1}}],[\"网络基础设施自动更新等一系列功能\",{\"1\":{\"139\":1}}],[\"网络工具\",{\"0\":{\"70\":1}}],[\"网址\",{\"1\":{\"98\":1,\"99\":1,\"101\":1,\"102\":1}}],[\"导致线程读到的锁状态不准确\",{\"1\":{\"1153\":1}}],[\"导致原因是因为返回值包含了函数内的局部指针\",{\"1\":{\"550\":1}}],[\"导入静态链接库时\",{\"1\":{\"546\":1}}],[\"导入了fmt包\",{\"1\":{\"297\":1}}],[\"导入了包\",{\"1\":{\"295\":3}}],[\"导入的语法就是import加上包名\",{\"1\":{\"295\":1}}],[\"导入一个包就是导入这个包的所有公有的类型\",{\"1\":{\"295\":1}}],[\"导入\",{\"0\":{\"295\":1,\"631\":1,\"691\":1,\"703\":1,\"929\":1},\"1\":{\"776\":1,\"964\":1}}],[\"导入可以让多个protobuf文件共享定义\",{\"1\":{\"193\":1}}],[\"导航\",{\"1\":{\"98\":1}}],[\"导航站\",{\"0\":{\"98\":1},\"1\":{\"98\":1}}],[\"导出的函数\",{\"1\":{\"533\":1}}],[\"导出的类型\",{\"1\":{\"533\":1}}],[\"导出后的目录结构如下\",{\"1\":{\"28\":1}}],[\"导出到当前的\",{\"1\":{\"28\":1}}],[\"导出项目依赖到\",{\"1\":{\"22\":1}}],[\"随便发一个请求\",{\"1\":{\"989\":1}}],[\"随便都可以找到\",{\"1\":{\"615\":1}}],[\"随意选择喜欢的\",{\"1\":{\"954\":1}}],[\"随之而来的是项目复杂度的增加\",{\"1\":{\"571\":1}}],[\"随着系统调用的次数增加而增加\",{\"1\":{\"1088\":1}}],[\"随着协程调度次数的增加而增加\",{\"1\":{\"1088\":1}}],[\"随着的计算机和互联网的发展\",{\"1\":{\"1084\":1}}],[\"随着程序空闲指数的上升\",{\"1\":{\"1082\":1}}],[\"随着覆盖范围的不断扩大\",{\"1\":{\"527\":1}}],[\"随着时间的推移可能会有些出入\",{\"1\":{\"105\":1}}],[\"随机数据可以更好的测试程序的边界条件\",{\"1\":{\"527\":1}}],[\"随机返回count个元素\",{\"1\":{\"271\":1}}],[\"随后调用runtime\",{\"1\":{\"1089\":1}}],[\"随后销毁不再需要的\",{\"1\":{\"1089\":1}}],[\"随后进入for循环开始逐个处理当前协程的defer链表\",{\"1\":{\"1079\":1}}],[\"随后才开始加锁\",{\"1\":{\"1059\":1}}],[\"随后用浏览器或者任何的接口测试工具输入127\",{\"1\":{\"955\":1}}],[\"随后通过验证器注册一个tagnamefunc\",{\"1\":{\"952\":1}}],[\"随后使用compareandswapint64来进行比较交换\",{\"1\":{\"490\":1}}],[\"随后协程\",{\"1\":{\"484\":1}}],[\"随后又花费了\",{\"1\":{\"479\":1}}],[\"随后当读协程将缓冲区所有数据读取完毕后\",{\"1\":{\"467\":1}}],[\"随后客户端可以随时通过流来发送请求参数\",{\"1\":{\"159\":1}}],[\"随后这个团队又加入了各路人马\",{\"1\":{\"87\":1}}],[\"随缘更新\",{\"1\":{\"96\":1}}],[\"介绍\",{\"0\":{\"104\":1,\"180\":1,\"758\":1,\"788\":1,\"927\":1,\"962\":1},\"1\":{\"514\":1}}],[\"介绍一些由\",{\"1\":{\"96\":1}}],[\"介绍一些与\",{\"1\":{\"96\":1}}],[\"介绍几个常用的\",{\"1\":{\"38\":1}}],[\"偏移量就是i\",{\"1\":{\"1030\":1}}],[\"偏移量n\",{\"1\":{\"1027\":1}}],[\"偏移量取决于结构体中记录的长度\",{\"1\":{\"1019\":1}}],[\"偏移指针\",{\"1\":{\"1021\":1}}],[\"偏应用\",{\"1\":{\"96\":1}}],[\"偏理论\",{\"1\":{\"96\":1}}],[\"周边的生态\",{\"1\":{\"96\":1}}],[\"社区中\",{\"1\":{\"848\":1}}],[\"社区中有关于\",{\"1\":{\"598\":1}}],[\"社区里面有很多优秀的第三方模板引擎库\",{\"1\":{\"722\":1}}],[\"社区关于\",{\"1\":{\"570\":1}}],[\"社区生态\",{\"1\":{\"96\":1}}],[\"社区版配合插件\",{\"1\":{\"94\":1}}],[\"协作式是主动让出执行权\",{\"1\":{\"1108\":1}}],[\"协作式和抢占式\",{\"1\":{\"1108\":1}}],[\"协作式调度的基本思路是\",{\"1\":{\"1106\":1}}],[\"协作式调度\",{\"0\":{\"1106\":1}}],[\"协作式抢占的首次引入\",{\"1\":{\"135\":1}}],[\"协议里面的内容\",{\"1\":{\"1003\":1}}],[\"协议的人一般都能写出来\",{\"1\":{\"1000\":1}}],[\"协议返回给调用者\",{\"1\":{\"978\":1}}],[\"协议等常见任务的功能\",{\"1\":{\"673\":1}}],[\"协议中立\",{\"1\":{\"629\":1}}],[\"协议无关\",{\"1\":{\"180\":1}}],[\"协议广播给其他节点\",{\"1\":{\"143\":1}}],[\"协议版本\",{\"1\":{\"143\":1}}],[\"协议\",{\"1\":{\"142\":1,\"239\":1,\"673\":1,\"851\":1}}],[\"协议将\",{\"1\":{\"87\":1}}],[\"协程会被阻塞在此\",{\"1\":{\"1165\":1}}],[\"协程就可以不需要去完成辅助标记任务了\",{\"1\":{\"1139\":1}}],[\"协程就是一种更加轻量的线程\",{\"1\":{\"1085\":1}}],[\"协程因管道\",{\"1\":{\"1108\":1}}],[\"协程1\",{\"1\":{\"1106\":1}}],[\"协程创建完毕后\",{\"1\":{\"1095\":1}}],[\"协程的状态由\",{\"1\":{\"1096\":1}}],[\"协程的创建从语法层面上来讲只需要一个go关键字加一个函数\",{\"1\":{\"1095\":1}}],[\"协程的生命周期刚好对应着协程的几个状态\",{\"1\":{\"1094\":1}}],[\"协程的执行结果被覆盖了\",{\"1\":{\"479\":1}}],[\"协程阻塞\",{\"1\":{\"1086\":1}}],[\"协程执行所需的时间片来自于线程\",{\"1\":{\"1085\":1}}],[\"协程状态\",{\"1\":{\"548\":1}}],[\"协程并不知道这件事\",{\"1\":{\"479\":1}}],[\"协程并发执行的的顺序更加可控\",{\"1\":{\"472\":1}}],[\"协程最初访问到的值已经过时了\",{\"1\":{\"479\":1}}],[\"协程在计算完毕后\",{\"1\":{\"479\":1}}],[\"协程已经完成了访问和计算并成功更新了count的值\",{\"1\":{\"479\":1}}],[\"协程访问数据耗费\",{\"1\":{\"479\":1}}],[\"协程对于管道的操作是同步的\",{\"1\":{\"465\":1}}],[\"协程是并发执行的\",{\"1\":{\"462\":1}}],[\"协程这一概念并非\",{\"1\":{\"462\":1}}],[\"协程\",{\"0\":{\"462\":1,\"1094\":1},\"1\":{\"462\":1,\"554\":1,\"1067\":1,\"1083\":1,\"1139\":1}}],[\"协程栈\",{\"0\":{\"1099\":1}}],[\"协程栈的最小内存大小由\",{\"1\":{\"135\":1}}],[\"协程栈模型从分段栈改为连续栈\",{\"1\":{\"134\":1}}],[\"协程等相关内容\",{\"1\":{\"96\":1}}],[\"独有的东西\",{\"1\":{\"96\":1}}],[\"讲的非常清晰易懂\",{\"1\":{\"1071\":1}}],[\"讲一些\",{\"1\":{\"96\":1}}],[\"讲到了用\",{\"1\":{\"42\":1}}],[\"等积攒到了一定数量后\",{\"1\":{\"1145\":1}}],[\"等到恢复后可以根据队列中剩余的灰色对象继续完成标记工作\",{\"1\":{\"1137\":1}}],[\"等量扩容不会重新计算哈希值\",{\"1\":{\"1043\":1}}],[\"等量扩容操作是糅合在增量扩容操作中的\",{\"1\":{\"1043\":1}}],[\"等量扩容的触发条件是溢出桶数量过多\",{\"1\":{\"1043\":1}}],[\"等量扩容\",{\"0\":{\"1043\":1},\"1\":{\"1041\":1}}],[\"等同于\",{\"1\":{\"874\":1}}],[\"等同于s\",{\"1\":{\"725\":1}}],[\"等于修改对象的引用\",{\"1\":{\"1144\":1}}],[\"等于是一轮标记要扫描两次栈空间\",{\"1\":{\"1142\":1}}],[\"等于\",{\"1\":{\"935\":1}}],[\"等于日志选择性记录\",{\"1\":{\"839\":1}}],[\"等于也要开启\",{\"1\":{\"547\":1}}],[\"等等\",{\"1\":{\"559\":1}}],[\"等待协程的通知链表\",{\"1\":{\"1166\":1}}],[\"等待所有协程完成\",{\"1\":{\"1165\":1}}],[\"等待所有的协程执行完毕\",{\"1\":{\"472\":1}}],[\"等待线程会消耗大量的\",{\"1\":{\"1153\":1}}],[\"等待日后的新任务\",{\"1\":{\"1097\":1}}],[\"等待被抢占方唤醒\",{\"1\":{\"1086\":1}}],[\"等待被发送方唤醒\",{\"1\":{\"1060\":1}}],[\"等待其它协程接收数据\",{\"1\":{\"1059\":1}}],[\"等待取消中\",{\"1\":{\"477\":6,\"478\":6}}],[\"等待当前循环的协程执行完毕\",{\"1\":{\"472\":1}}],[\"等待子协程结束\",{\"1\":{\"481\":1,\"482\":1}}],[\"等待子协程\",{\"1\":{\"472\":1}}],[\"等其他协程来读\",{\"1\":{\"467\":1}}],[\"等其他关系数据库\",{\"1\":{\"231\":1}}],[\"等价\",{\"1\":{\"319\":2}}],[\"等价于g\",{\"1\":{\"1086\":1}}],[\"等价于go\",{\"1\":{\"519\":1}}],[\"等价于hash\",{\"1\":{\"1036\":1}}],[\"等价于下面的\",{\"1\":{\"856\":1}}],[\"等价于pointer\",{\"1\":{\"752\":1}}],[\"等价于stings\",{\"1\":{\"715\":1}}],[\"等价于nums\",{\"1\":{\"360\":1}}],[\"等价于无符号\",{\"1\":{\"316\":1}}],[\"等价于\",{\"1\":{\"225\":2,\"227\":1,\"350\":2,\"441\":1,\"595\":2,\"728\":1}}],[\"等之类的操作\",{\"1\":{\"214\":1}}],[\"等\",{\"1\":{\"95\":1,\"175\":1,\"471\":1,\"492\":1,\"519\":1,\"615\":1,\"1101\":1}}],[\"笔者也是从这里慢慢学习的gin框架\",{\"1\":{\"966\":1}}],[\"笔者在写这篇文章时是在\",{\"1\":{\"905\":1}}],[\"笔者以前就因为这个坑\",{\"1\":{\"402\":1}}],[\"笔者自己整了一个玩具goplay\",{\"1\":{\"104\":1}}],[\"笔者最开始也是这样\",{\"1\":{\"95\":1}}],[\"笔者本人也仅仅只是一名普通学生\",{\"1\":{\"95\":1}}],[\"笔者曾经给\",{\"1\":{\"88\":1}}],[\"适配库\",{\"1\":{\"1010\":1}}],[\"适配状态码204\",{\"1\":{\"958\":1}}],[\"适用范围\",{\"1\":{\"617\":1}}],[\"适用于大多数的锁竞争情况\",{\"1\":{\"1153\":1}}],[\"适用于大部分情况\",{\"1\":{\"339\":1}}],[\"适用于单机应用\",{\"1\":{\"61\":1}}],[\"适合用于生成图片\",{\"1\":{\"831\":1}}],[\"适合有需要的时候查询一些概念\",{\"1\":{\"289\":1}}],[\"适合想要快速了解\",{\"1\":{\"287\":1}}],[\"适合入门学习\",{\"1\":{\"95\":1}}],[\"再判断一次是否都已经被唤醒\",{\"1\":{\"1168\":1}}],[\"再进行批量标记\",{\"1\":{\"1145\":1}}],[\"再通过runtime\",{\"1\":{\"1098\":1}}],[\"再通过runtuime\",{\"1\":{\"1075\":1}}],[\"再通过engine\",{\"1\":{\"993\":1}}],[\"再唤醒之前回调函数会将全部管道解锁\",{\"1\":{\"1067\":1}}],[\"再也不会得到调度\",{\"1\":{\"1066\":1}}],[\"再之后由runtime\",{\"1\":{\"1091\":1}}],[\"再之后\",{\"1\":{\"1089\":1,\"1097\":1}}],[\"再之后就是初始化堆栈\",{\"1\":{\"1089\":1}}],[\"再之后从recvq队列中出队一个sudog\",{\"1\":{\"1059\":1}}],[\"再之后通过哈希值取模运算得到哈希桶位置\",{\"1\":{\"1038\":1}}],[\"再然后逆序遍历桶中的\",{\"1\":{\"1039\":1}}],[\"再然后计算哈希值\",{\"1\":{\"1036\":1}}],[\"再继续迭代下一个哈希桶\",{\"1\":{\"1037\":1}}],[\"再对比键是否相等\",{\"1\":{\"1036\":1}}],[\"再根据\",{\"1\":{\"1034\":1}}],[\"再根据元素是否是指针分成两种情况来处理\",{\"1\":{\"1027\":1}}],[\"再计算所需内存\",{\"1\":{\"1025\":1}}],[\"再将其更新到arenas二维数组中\",{\"1\":{\"1122\":1}}],[\"再将其存储到了ax上\",{\"1\":{\"1038\":1}}],[\"再将它与i交换\",{\"1\":{\"1067\":1}}],[\"再将发送方协程要发送的数据复制后并入队\",{\"1\":{\"1060\":1}}],[\"再将newlen到newcap这个区间的内存清空\",{\"1\":{\"1025\":1}}],[\"再将旧数据拷贝过去\",{\"1\":{\"1025\":1}}],[\"再将字符串的内存复制过去\",{\"1\":{\"376\":1}}],[\"再一次封装\",{\"1\":{\"986\":1}}],[\"再使用\",{\"1\":{\"526\":1}}],[\"再使用newoutgoingcontext会将先前的数据直接覆盖掉\",{\"1\":{\"163\":1}}],[\"再与go\",{\"1\":{\"510\":1}}],[\"再为其创建一个\",{\"1\":{\"499\":1}}],[\"再去了解它的具体实现\",{\"1\":{\"474\":1}}],[\"再去深究一些特性和细节\",{\"1\":{\"95\":1}}],[\"再输出\",{\"1\":{\"472\":1}}],[\"再读取数据也不会导致当前协程阻塞\",{\"1\":{\"470\":1}}],[\"再读取数据\",{\"1\":{\"470\":1}}],[\"再次执行输出\",{\"1\":{\"952\":1}}],[\"再次执行输出如下\",{\"1\":{\"462\":1}}],[\"再次执行就会报错\",{\"1\":{\"540\":1}}],[\"再次执行模糊测试看看还有没有问题\",{\"1\":{\"527\":1}}],[\"再次执行\",{\"1\":{\"523\":1}}],[\"再次运行项目\",{\"1\":{\"503\":1}}],[\"再次运行输出如下\",{\"1\":{\"416\":1}}],[\"再写入到目标文件中\",{\"1\":{\"419\":1}}],[\"再写入目标文件\",{\"1\":{\"419\":1}}],[\"再调用runtime\",{\"1\":{\"1067\":1}}],[\"再调用http\",{\"1\":{\"645\":1}}],[\"再调用\",{\"1\":{\"412\":1}}],[\"再初始化\",{\"1\":{\"412\":1}}],[\"再声明了三个方法get\",{\"1\":{\"412\":1}}],[\"再比如说在迭代器循环中使用defer\",{\"1\":{\"582\":1}}],[\"再比如\",{\"1\":{\"205\":1}}],[\"再安装如下插件\",{\"1\":{\"200\":1}}],[\"再执行命令生成代码\",{\"1\":{\"156\":1}}],[\"再来进行模糊测试\",{\"1\":{\"527\":1}}],[\"再来一个层级嵌套深一点的示例\",{\"1\":{\"477\":1}}],[\"再来一遍\",{\"1\":{\"441\":1}}],[\"再来看一个例子\",{\"1\":{\"1019\":1}}],[\"再来看个例子\",{\"1\":{\"1019\":1,\"1054\":1}}],[\"再来看下面这个结构体\",{\"1\":{\"410\":1}}],[\"再来看看其汇编形式\",{\"1\":{\"45\":1}}],[\"再来到helloworld\",{\"1\":{\"156\":1}}],[\"再运行客户端\",{\"1\":{\"155\":1}}],[\"再启动客户端\",{\"1\":{\"145\":1}}],[\"寄语\",{\"0\":{\"95\":1}}],[\"万能的编辑器\",{\"1\":{\"94\":1}}],[\"主页\",{\"1\":{\"1016\":1}}],[\"主机名\",{\"1\":{\"932\":2}}],[\"主机相关的\",{\"1\":{\"906\":1}}],[\"主机\",{\"0\":{\"906\":1}}],[\"主键mom\",{\"1\":{\"891\":1}}],[\"主键\",{\"0\":{\"858\":1},\"1\":{\"857\":1}}],[\"主题优先级\",{\"1\":{\"763\":1}}],[\"主模块引用了模块\",{\"1\":{\"508\":1}}],[\"主版本号要体现在模块名中\",{\"1\":{\"509\":1}}],[\"主版本号是\",{\"1\":{\"505\":1}}],[\"主版本的更新意味着发生了\",{\"1\":{\"113\":1}}],[\"主协程让权给其它协程\",{\"1\":{\"1106\":1}}],[\"主协程会等待子协程执行完毕后再退出\",{\"1\":{\"472\":1}}],[\"主协程会一直阻塞\",{\"1\":{\"471\":1}}],[\"主协程调用wait\",{\"1\":{\"472\":1}}],[\"主协程就已经结束了\",{\"1\":{\"462\":1}}],[\"主协程早已运行结束\",{\"1\":{\"462\":1}}],[\"主动让出当前协程的执行权\",{\"1\":{\"1106\":1}}],[\"主动让出执行权\",{\"1\":{\"1097\":1}}],[\"主动的去获取序列元素\",{\"1\":{\"583\":1}}],[\"主动将序列中的元素传递给yield函数\",{\"1\":{\"582\":1}}],[\"主动关闭请求并获取返回值\",{\"1\":{\"158\":1}}],[\"主动注册服务\",{\"1\":{\"145\":1}}],[\"主流的\",{\"1\":{\"94\":1}}],[\"主要有两种方法\",{\"1\":{\"1106\":1}}],[\"主要有包括\",{\"1\":{\"194\":1}}],[\"主要做了以下工作\",{\"1\":{\"1089\":1}}],[\"主要的区别在于\",{\"1\":{\"1074\":1}}],[\"主要作用是在搬迁的过程中迭代新桶\",{\"1\":{\"1042\":1}}],[\"主要提供了\",{\"1\":{\"908\":1}}],[\"主要影响堆栈跟踪\",{\"1\":{\"839\":1}}],[\"主要包含声明\",{\"1\":{\"773\":1}}],[\"主要使用的有如下函数\",{\"1\":{\"624\":1}}],[\"主要方法\",{\"1\":{\"621\":1}}],[\"主要负责分析程序的资源占用\",{\"1\":{\"561\":1}}],[\"主要格式为如下\",{\"1\":{\"371\":1}}],[\"主要分为单精度浮点数与双精度浮点数\",{\"1\":{\"317\":1}}],[\"主要分为无符号整型与有符号整型\",{\"1\":{\"316\":1}}],[\"主要是在给管道分配内存\",{\"1\":{\"1058\":1}}],[\"主要是对zapcore\",{\"1\":{\"840\":1}}],[\"主要是对于interface\",{\"1\":{\"839\":1}}],[\"主要是输出到文件和控制台\",{\"1\":{\"839\":1}}],[\"主要是一些输出格式化的配置\",{\"1\":{\"839\":1}}],[\"主要是写测试的时候用\",{\"1\":{\"616\":1}}],[\"主要是拿来给工具分析用的\",{\"1\":{\"557\":1}}],[\"主要是为了及时止损\",{\"1\":{\"604\":1}}],[\"主要是为了减轻\",{\"1\":{\"553\":1}}],[\"主要是为了解决切片共享底层数组的读写问题\",{\"1\":{\"371\":1}}],[\"主要是用来表示某个\",{\"1\":{\"197\":1}}],[\"主要是泛型相关\",{\"1\":{\"116\":1}}],[\"主要是格式化输出用\",{\"1\":{\"20\":1}}],[\"主要讲解\",{\"1\":{\"96\":1}}],[\"主要讲解关于\",{\"1\":{\"96\":1}}],[\"主要讲\",{\"1\":{\"96\":1}}],[\"主要讲一些十分基础的语法\",{\"1\":{\"96\":1}}],[\"主要用于反射以及编译时的函数生成\",{\"1\":{\"1033\":1}}],[\"主要用于实现程序的优雅关闭\",{\"1\":{\"616\":1}}],[\"主要用于\",{\"1\":{\"55\":1}}],[\"结语\",{\"1\":{\"1008\":1}}],[\"结尾\",{\"1\":{\"952\":7}}],[\"结束了先前的混乱局面\",{\"1\":{\"492\":1}}],[\"结束子协程\",{\"1\":{\"471\":1}}],[\"结束\",{\"1\":{\"374\":2}}],[\"结果非常奇怪\",{\"1\":{\"1070\":1}}],[\"结果出乎意料\",{\"1\":{\"1069\":1}}],[\"结果等同于len\",{\"1\":{\"1030\":1}}],[\"结果\",{\"1\":{\"625\":1,\"952\":1,\"984\":1,\"986\":1}}],[\"结果也提示了删除成功\",{\"1\":{\"503\":1}}],[\"结果大概率会如下\",{\"1\":{\"486\":1}}],[\"结果又不一样了\",{\"1\":{\"402\":1}}],[\"结果如下\",{\"1\":{\"346\":1}}],[\"结果没有变化\",{\"1\":{\"331\":1}}],[\"结果是常量的类型转换\",{\"1\":{\"323\":1}}],[\"结果输出如下\",{\"1\":{\"167\":1}}],[\"结合了它们两个的优点\",{\"1\":{\"1144\":1}}],[\"结合了\",{\"1\":{\"1084\":1}}],[\"结合使用就不会\",{\"1\":{\"1066\":1}}],[\"结合else使用\",{\"1\":{\"732\":1}}],[\"结合上面所讲的内容也就非常好懂\",{\"1\":{\"430\":1}}],[\"结合上面目录结构使用效果最佳\",{\"1\":{\"93\":1}}],[\"结合反射可以做出很多奇妙的功能\",{\"1\":{\"409\":1}}],[\"结合标签使用可以达到跳过外层循环的效果\",{\"1\":{\"357\":1}}],[\"结合标签一起使用可以达到终止外层循环的效果\",{\"1\":{\"356\":1}}],[\"结合到\",{\"1\":{\"163\":1}}],[\"结合\",{\"0\":{\"176\":1},\"1\":{\"145\":1,\"176\":1,\"1009\":1}}],[\"结构简单\",{\"1\":{\"1002\":1}}],[\"结构化\",{\"1\":{\"836\":1}}],[\"结构化日志库\",{\"1\":{\"54\":2}}],[\"结构\",{\"0\":{\"771\":1,\"1019\":1,\"1045\":1,\"1052\":1,\"1057\":1,\"1064\":1,\"1073\":1,\"1078\":1,\"1166\":1,\"1172\":1,\"1176\":1},\"1\":{\"620\":1,\"1098\":1}}],[\"结构如下所示\",{\"1\":{\"1037\":1}}],[\"结构如下\",{\"1\":{\"175\":1,\"201\":1}}],[\"结构体验证函数的区别在于\",{\"1\":{\"951\":1}}],[\"结构体验证\",{\"0\":{\"942\":1}}],[\"结构体中\",{\"1\":{\"866\":1}}],[\"结构体中的指针除了可以指向开头\",{\"1\":{\"1019\":1}}],[\"结构体中的\",{\"1\":{\"168\":1}}],[\"结构体通过实现这些接口\",{\"1\":{\"861\":1}}],[\"结构体构造\",{\"0\":{\"828\":1}}],[\"结构体代表了一个\",{\"1\":{\"778\":1}}],[\"结构体无法被当作匿名结构体嵌入\",{\"1\":{\"540\":1}}],[\"结构体是临时声明的匿名结构体\",{\"1\":{\"524\":1}}],[\"结构体如下\",{\"1\":{\"491\":1}}],[\"结构体来进行表示\",{\"1\":{\"428\":1}}],[\"结构体的内部可以由基本数据类型与实现了sql\",{\"1\":{\"853\":1}}],[\"结构体的内存占用长度至少是最大字段的整数倍\",{\"1\":{\"410\":1}}],[\"结构体的某些成员包含bit\",{\"1\":{\"540\":1}}],[\"结构体的例子\",{\"1\":{\"540\":1}}],[\"结构体的创建同样用到reflect\",{\"1\":{\"455\":1}}],[\"结构体的声明非常简单\",{\"1\":{\"404\":1}}],[\"结构体字段的内存分布遵循内存对齐的规则\",{\"1\":{\"410\":1}}],[\"结构体字面量元素时\",{\"1\":{\"137\":1}}],[\"结构体标签最广泛的应用就是在各种序列化格式中的别名定义\",{\"1\":{\"409\":1}}],[\"结构体标签的容错性很低\",{\"1\":{\"409\":1}}],[\"结构体标签是一种元编程的形式\",{\"1\":{\"409\":1}}],[\"结构体之间的关系是通过组合来表示的\",{\"1\":{\"407\":1}}],[\"结构体本身以及其内部的字段都遵守大小写命名的暴露方式\",{\"1\":{\"404\":1}}],[\"结构体可以存储一组不同类型的数据\",{\"1\":{\"403\":1}}],[\"结构体\",{\"0\":{\"403\":1,\"447\":1,\"455\":1,\"540\":1},\"1\":{\"57\":1,\"210\":1,\"320\":2,\"321\":1,\"460\":2,\"540\":2,\"568\":1,\"640\":1}}],[\"我需要调用close\",{\"1\":{\"1069\":1}}],[\"我更推荐后端存储时间戳\",{\"1\":{\"856\":1}}],[\"我建议使用slices标准库来进行排序\",{\"1\":{\"683\":1}}],[\"我推荐下面几个开源库\",{\"1\":{\"610\":1}}],[\"我推荐下面几个开源框架\",{\"1\":{\"610\":1}}],[\"我可以给出下面几个学习路线和示例项目以供参考\",{\"1\":{\"609\":1}}],[\"我可以告诉你大可不必担心\",{\"1\":{\"396\":1}}],[\"我认为这确实是一个实用的特性\",{\"1\":{\"589\":1}}],[\"我认为这绝对是利大于弊的\",{\"1\":{\"326\":1}}],[\"我比较推荐\",{\"1\":{\"495\":1}}],[\"我会先介绍下怎么使用官方文档以及如何利用官方提供的工具\",{\"1\":{\"285\":1}}],[\"我编写了一个多版本管理工具govm\",{\"1\":{\"93\":1}}],[\"我们所熟知的\",{\"1\":{\"1130\":1}}],[\"我们也会手动调用panic函数来让程序退出\",{\"1\":{\"1077\":1}}],[\"我们也可以手动去设置它的值\",{\"1\":{\"1085\":1}}],[\"我们也可以给分组的根路由注册处理器\",{\"1\":{\"988\":1}}],[\"我们也可以传入自定义的\",{\"1\":{\"12\":1}}],[\"我们会使用内置函数close\",{\"1\":{\"1061\":1}}],[\"我们会将要发送的数据置于箭头的右方\",{\"1\":{\"1059\":1}}],[\"我们拿上个例子举例\",{\"1\":{\"989\":1}}],[\"我们拿最简单的一个切片遍历来测试下它们的性能区别\",{\"1\":{\"588\":1}}],[\"我们将其分成了v1\",{\"1\":{\"988\":1}}],[\"我们应该手动指定解析方式\",{\"1\":{\"974\":1}}],[\"我们都知道空的\",{\"1\":{\"1066\":1}}],[\"我们都会使用结构体来承载数据\",{\"1\":{\"971\":1}}],[\"我们都不会直接使用上述的方法\",{\"1\":{\"640\":1}}],[\"我们加上了一个自定义标签\",{\"1\":{\"952\":2}}],[\"我们还可以使用clear方法来直接清空关联\",{\"1\":{\"898\":1}}],[\"我们通常看到的调用栈信息就是由它输出的\",{\"1\":{\"1079\":1}}],[\"我们通常会使用更加完善的第三方日志包\",{\"1\":{\"649\":1}}],[\"我们通过结果可以看到推送式迭代器与原生的for\",{\"1\":{\"588\":1}}],[\"我们通过iter\",{\"1\":{\"583\":1}}],[\"我们通过protoc编译器来完成此时\",{\"1\":{\"199\":1}}],[\"我们需要将信息格式化成\",{\"1\":{\"952\":1}}],[\"我们需要接着来美化一下错误信息\",{\"1\":{\"952\":1}}],[\"我们需要使用第三方包\",{\"1\":{\"621\":1}}],[\"我们需要辩证的看待一门语言\",{\"1\":{\"88\":1}}],[\"我们只需要写处理函数即可\",{\"1\":{\"645\":1}}],[\"我们只需使用即可\",{\"1\":{\"582\":1}}],[\"我们只想要第一个\",{\"1\":{\"330\":1}}],[\"我们从中可以明确的一点\",{\"1\":{\"582\":1}}],[\"我们之所以要进行逃逸分析\",{\"1\":{\"553\":1}}],[\"我们对它的要求不仅仅只是能运行\",{\"1\":{\"548\":1}}],[\"我们依然可以直接传递指针给\",{\"1\":{\"536\":1}}],[\"我们就可以在\",{\"1\":{\"544\":1}}],[\"我们就可以直接传递匿名函数\",{\"1\":{\"398\":1}}],[\"我们就需要自行实现很多逻辑\",{\"1\":{\"175\":1}}],[\"我们有一个函数sum可以计算两个数字的返回值\",{\"1\":{\"331\":1}}],[\"我们一般会单独创建一个文件夹来存放所有的protobuf文件\",{\"1\":{\"193\":1}}],[\"我们可以如下定义\",{\"1\":{\"1015\":1}}],[\"我们可以如下命令来进行替换\",{\"1\":{\"16\":1}}],[\"我们可以看到httprouter仅仅只是做了路由\",{\"1\":{\"955\":1}}],[\"我们可以处理成一个字符串作为信息返回\",{\"1\":{\"952\":1}}],[\"我们可以对结构体字段指定列名\",{\"1\":{\"854\":1}}],[\"我们可以控制\",{\"1\":{\"852\":1}}],[\"我们可以根据配置文件来进行动态配置\",{\"1\":{\"841\":1}}],[\"我们可以采用官方提供的其他时间编码器\",{\"1\":{\"840\":1}}],[\"我们可以做一些候选值限制的操作\",{\"1\":{\"817\":1}}],[\"我们可以通过反射来看看它到底是什么\",{\"1\":{\"1070\":1}}],[\"我们可以通过select方法来指定字段\",{\"1\":{\"874\":1}}],[\"我们可以通过构建clause来完成更加自定义的\",{\"1\":{\"867\":1}}],[\"我们可以通过结构体标签来达到重命名的效果\",{\"1\":{\"626\":1}}],[\"我们可以通过unsafe指针来证实一下\",{\"1\":{\"1019\":1}}],[\"我们可以通过unsafe\",{\"1\":{\"411\":1}}],[\"我们可以在iter库中找到如下解释\",{\"1\":{\"582\":1}}],[\"我们可以将两种类型绑定\",{\"1\":{\"826\":1}}],[\"我们可以将其组合来处理数据流\",{\"1\":{\"586\":1}}],[\"我们可以将其传递给yield函数让for\",{\"1\":{\"584\":1}}],[\"我们可以将其置为nil\",{\"1\":{\"553\":1}}],[\"我们可以将转换可视化的格式\",{\"1\":{\"559\":1}}],[\"我们可以很明显的看到其中的blcok参数为false\",{\"1\":{\"1066\":1}}],[\"我们可以很明显的看到整个调用栈的内存占用是\",{\"1\":{\"559\":1}}],[\"我们可以很轻松地在协程之间通信\",{\"1\":{\"1056\":1}}],[\"我们可以很方便的在编译时注入一些元信息\",{\"1\":{\"10\":1}}],[\"我们可以保证程序大部分的稳定性\",{\"1\":{\"548\":1}}],[\"我们可以把它改造成迭代器\",{\"1\":{\"581\":1}}],[\"我们可以把\",{\"1\":{\"533\":1}}],[\"我们可以这样编写go\",{\"1\":{\"513\":1}}],[\"我们可以自己写函数递归遍历整个文件夹\",{\"1\":{\"426\":1}}],[\"我们可以直接传入一个nil\",{\"1\":{\"1071\":1}}],[\"我们可以直接用for\",{\"1\":{\"581\":1}}],[\"我们可以直接导入谷歌定义的类型\",{\"1\":{\"194\":1}}],[\"我们可以直接使用status\",{\"1\":{\"168\":1}}],[\"我们可以直接使用metadata\",{\"1\":{\"160\":1}}],[\"我们可以使用fmt包提供的几个函数\",{\"1\":{\"344\":1}}],[\"我们可以使用\",{\"1\":{\"105\":1}}],[\"我们可以打印build过程中执行的命令\",{\"1\":{\"14\":1}}],[\"完事后返回栈空间的低地址和高地址\",{\"1\":{\"1100\":1}}],[\"完事后还会清除对应部分的内存\",{\"1\":{\"1024\":1}}],[\"完事之后就会返回一个指向底层数组的指针\",{\"1\":{\"1020\":1}}],[\"完整代码\",{\"1\":{\"952\":1}}],[\"完整的序列化logger名称\",{\"1\":{\"840\":1}}],[\"完整意思为主体jojo能对对象cake进行行为eat\",{\"1\":{\"760\":1}}],[\"完全限定域名\",{\"1\":{\"932\":1}}],[\"完全相等\",{\"0\":{\"460\":1}}],[\"完全没问题\",{\"1\":{\"217\":1}}],[\"完全一样\",{\"1\":{\"217\":1}}],[\"完全一致\",{\"1\":{\"182\":1}}],[\"完成解锁\",{\"1\":{\"1154\":1}}],[\"完成工作了\",{\"1\":{\"1139\":1}}],[\"完成文件名称\",{\"1\":{\"649\":1}}],[\"完成后返回一个指向底层数组的指针\",{\"1\":{\"1020\":1}}],[\"完成后查看go\",{\"1\":{\"503\":1}}],[\"完成后查看安装版本\",{\"1\":{\"91\":1}}],[\"完成后看下版本\",{\"1\":{\"200\":1}}],[\"完成后就可以看到生成的文件了\",{\"1\":{\"156\":1}}],[\"完成后\",{\"1\":{\"143\":1,\"1101\":1}}],[\"完成\",{\"1\":{\"133\":1}}],[\"完善的工具链\",{\"1\":{\"88\":1}}],[\"完善的测试的是必不可少的\",{\"1\":{\"38\":1}}],[\"~map\",{\"1\":{\"585\":3}}],[\"~uint64\",{\"1\":{\"574\":1,\"575\":2}}],[\"~uint32\",{\"1\":{\"574\":1,\"575\":2}}],[\"~uint\",{\"1\":{\"574\":1,\"575\":2}}],[\"~uint16\",{\"1\":{\"574\":1,\"575\":2}}],[\"~uint8\",{\"1\":{\"574\":1,\"575\":2}}],[\"~r0\",{\"1\":{\"550\":1,\"551\":1}}],[\"~int\",{\"1\":{\"521\":1,\"574\":1,\"575\":2}}],[\"~int64\",{\"1\":{\"521\":1,\"574\":1,\"575\":2}}],[\"~int32\",{\"1\":{\"521\":1,\"574\":1,\"575\":2}}],[\"~int16\",{\"1\":{\"521\":1,\"574\":1,\"575\":2}}],[\"~int8\",{\"1\":{\"521\":1,\"574\":1,\"575\":2}}],[\"~\",{\"1\":{\"91\":1,\"526\":12,\"585\":3,\"587\":1}}],[\"拿time\",{\"1\":{\"1098\":1}}],[\"拿官方的一个例子展示效果\",{\"1\":{\"592\":1}}],[\"拿到每个桶的第一键值对\",{\"1\":{\"1042\":1}}],[\"拿到写锁\",{\"1\":{\"481\":4,\"482\":4}}],[\"拿到读锁\",{\"1\":{\"481\":8,\"482\":8}}],[\"拿到指针所指向元素的反射类型\",{\"1\":{\"433\":1}}],[\"拿到消息\",{\"1\":{\"158\":1}}],[\"拿\",{\"1\":{\"91\":1}}],[\"覆盖原安装目录即可\",{\"1\":{\"90\":1,\"91\":1}}],[\"覆盖源文件\",{\"1\":{\"17\":1}}],[\"两次取模运算得到桶起始位置和桶内起始位置\",{\"1\":{\"1037\":1}}],[\"两者共存才形成了如今的调度器\",{\"1\":{\"1108\":1}}],[\"两者之和就是\",{\"1\":{\"1067\":1}}],[\"两者之间毫无关联\",{\"1\":{\"376\":1}}],[\"两者输出都是一样的\",{\"1\":{\"1052\":1}}],[\"两者并其实没有什么联系\",{\"1\":{\"1019\":1}}],[\"两者版本必须保持一致\",{\"1\":{\"1010\":1}}],[\"两者的区别在于前者内部也是直接调用的shouldbind\",{\"1\":{\"971\":1}}],[\"两者的区别在于前者是更新文档字段\",{\"1\":{\"227\":1}}],[\"两者完全等价\",{\"1\":{\"594\":1}}],[\"两者是都是同一个类型\",{\"1\":{\"594\":1}}],[\"两者是完全等价的\",{\"1\":{\"568\":1}}],[\"两者是完全不同的类型\",{\"1\":{\"315\":1}}],[\"两者都需要用到hiter结构体\",{\"1\":{\"1037\":1}}],[\"两者都需要借助pprof命令行工具\",{\"1\":{\"558\":1}}],[\"两者都会将字符串转换为带引号的\",{\"1\":{\"696\":1}}],[\"两者都是在\",{\"1\":{\"205\":1}}],[\"两者其实都一样\",{\"1\":{\"536\":1}}],[\"两者内容是完全一样的\",{\"1\":{\"529\":1}}],[\"两者功能类似\",{\"1\":{\"478\":1}}],[\"两者有点类似\",{\"1\":{\"393\":1}}],[\"两个抢占入口最后都会进入runtime\",{\"1\":{\"1107\":1}}],[\"两个字段使用同一个名字的索引就会创建复合索引\",{\"1\":{\"859\":1}}],[\"两个都是产品级别的日志\",{\"1\":{\"838\":1}}],[\"两个builder在写入字符串的时候都是在对同一个切片进行操作\",{\"1\":{\"719\":1}}],[\"两个函数签名如下\",{\"1\":{\"1037\":1}}],[\"两个函数的签名如下\",{\"1\":{\"478\":1}}],[\"两个函数如下\",{\"1\":{\"475\":1}}],[\"两个计数\",{\"1\":{\"472\":1}}],[\"两个无缓冲管道用于同步父子协程的执行顺序\",{\"1\":{\"467\":1}}],[\"两个叫法都是一个意思\",{\"1\":{\"300\":1}}],[\"两个功能差不多\",{\"1\":{\"162\":1}}],[\"两个子协程中分别又各有两个孙协程负责收发消息\",{\"1\":{\"159\":1}}],[\"两个数据中心的所有节点都会感知到此变化\",{\"1\":{\"144\":1}}],[\"两种情况的处理\",{\"1\":{\"1033\":1}}],[\"两种桶的内存都是连续的\",{\"1\":{\"1032\":1}}],[\"两种不同的桶分别存放在两个切片中\",{\"1\":{\"1032\":1}}],[\"两种方式的原理都是一样的\",{\"1\":{\"1026\":1}}],[\"两种方法都是等价的\",{\"1\":{\"851\":1}}],[\"两种方法都需要修改go\",{\"1\":{\"513\":1}}],[\"两种输出的结果不一致\",{\"1\":{\"568\":1}}],[\"两种模式\",{\"1\":{\"143\":1}}],[\"两种类型可选\",{\"1\":{\"90\":1}}],[\"两门语言都比较适合写服务端\",{\"1\":{\"0\":1}}],[\"相等则表示所有协程都已经唤醒\",{\"1\":{\"1168\":1}}],[\"相等的话就清除对于所有旧桶和旧溢出桶的引用\",{\"1\":{\"1042\":1}}],[\"相信这段代码大多数人在刚接触\",{\"1\":{\"1051\":1}}],[\"相信很多人应该都或多或少听说过rust\",{\"1\":{\"88\":1}}],[\"相邻元素不为空\",{\"1\":{\"1039\":1}}],[\"相同\",{\"1\":{\"862\":1}}],[\"相当的强大\",{\"1\":{\"616\":1}}],[\"相反的拉取式迭代器\",{\"1\":{\"583\":1}}],[\"相应的\",{\"1\":{\"1139\":1}}],[\"相应的当其为false时\",{\"1\":{\"1074\":1}}],[\"相应的yeild函数就有几个入参\",{\"1\":{\"582\":1}}],[\"相应的占用的内存要多一些\",{\"1\":{\"410\":1}}],[\"相互调用\",{\"1\":{\"529\":1}}],[\"相比于运行时创建的切片更好\",{\"1\":{\"1053\":1}}],[\"相比于那些大而全的框架\",{\"1\":{\"1008\":1}}],[\"相比于\",{\"1\":{\"962\":1}}],[\"相比于以上三种更加的轻便\",{\"1\":{\"629\":1}}],[\"相比于固定的测试数据\",{\"1\":{\"527\":1}}],[\"相比于管道和waitgroup\",{\"1\":{\"473\":1}}],[\"相比之下还增加了\",{\"1\":{\"526\":1}}],[\"相比之下\",{\"1\":{\"88\":1,\"598\":1}}],[\"相关信息由cpu包提供\",{\"1\":{\"908\":1}}],[\"相关配置\",{\"1\":{\"640\":1}}],[\"相关代码\",{\"1\":{\"152\":1}}],[\"相关的信息\",{\"1\":{\"1128\":1}}],[\"相关的知识这里不再赘述\",{\"1\":{\"638\":1}}],[\"相关的\",{\"1\":{\"147\":1}}],[\"相对的就肯定会有typed\",{\"1\":{\"1070\":1}}],[\"相对应的\",{\"1\":{\"1060\":1}}],[\"相对\",{\"1\":{\"142\":1}}],[\"相较于acl模型会多一个\",{\"1\":{\"765\":1}}],[\"相较于前者该函数会创建一切必要的父目录\",{\"1\":{\"425\":1}}],[\"相较于第一种可以从指定偏移量读取\",{\"1\":{\"417\":1}}],[\"相较于关系数据库更为灵活\",{\"1\":{\"218\":1}}],[\"相较于预览版而言\",{\"1\":{\"137\":1}}],[\"相较于\",{\"1\":{\"117\":1}}],[\"贡献代码\",{\"1\":{\"88\":2}}],[\"面对这种情况\",{\"1\":{\"1042\":1}}],[\"面向请求的收集器\",{\"1\":{\"1130\":1}}],[\"面向信仰编程\",{\"1\":{\"102\":1}}],[\"面向治理的微服务框架\",{\"1\":{\"53\":1}}],[\"面世只有十余年不到\",{\"1\":{\"88\":1}}],[\"尽管它的名字叫mcache但它实际上是与处理器\",{\"1\":{\"1116\":1}}],[\"尽管它只有三个字段\",{\"1\":{\"410\":1}}],[\"尽管heaparena之间是相邻的\",{\"1\":{\"1115\":1}}],[\"尽管代码写的是正序遍历\",{\"1\":{\"1039\":1}}],[\"尽管代码很少\",{\"1\":{\"487\":1}}],[\"尽管在现在使用占比正在逐渐减少\",{\"1\":{\"999\":1}}],[\"尽管可以存储任意类型\",{\"1\":{\"491\":1}}],[\"尽管可以顺利运行\",{\"1\":{\"467\":1}}],[\"尽管上下文到期会自动取消\",{\"1\":{\"478\":1}}],[\"尽管父级cancelctx在取消的同时会取消它的子上下文\",{\"1\":{\"477\":1}}],[\"尽管\",{\"1\":{\"88\":1,\"591\":1}}],[\"枚举项的第一个元素必须是零\",{\"1\":{\"190\":1}}],[\"枚举\",{\"0\":{\"190\":1,\"326\":1,\"542\":1},\"1\":{\"88\":1}}],[\"残缺的泛型\",{\"1\":{\"88\":1}}],[\"解绑后的\",{\"1\":{\"1097\":1}}],[\"解绑\",{\"1\":{\"1092\":1,\"1097\":1}}],[\"解密时得到的签名都会不一样\",{\"1\":{\"774\":1}}],[\"解包后会返回当前错误链所包裹的错误\",{\"1\":{\"603\":1}}],[\"解压过后的依赖组织形式如下所示\",{\"1\":{\"507\":1}}],[\"解压到指定目录\",{\"1\":{\"91\":1}}],[\"解释项目哪些地方用到了依赖\",{\"1\":{\"506\":1}}],[\"解释为\",{\"1\":{\"413\":1}}],[\"解释为什么这个包被依赖\",{\"1\":{\"30\":1}}],[\"解释为什么会依赖这些模块\",{\"1\":{\"22\":1}}],[\"解写锁\",{\"1\":{\"481\":1}}],[\"解读锁\",{\"1\":{\"481\":1}}],[\"解锁一条龙了\",{\"1\":{\"1173\":1}}],[\"解锁的流程就结束了\",{\"1\":{\"1154\":1}}],[\"解锁的流程相对而言要简单很多\",{\"1\":{\"1154\":1}}],[\"解锁的工作由runtime\",{\"1\":{\"1067\":1}}],[\"解锁也只需要unlock\",{\"1\":{\"479\":1}}],[\"解锁\",{\"1\":{\"467\":2,\"480\":2,\"484\":1}}],[\"解决问题的最好办法就是忽略这个问题\",{\"1\":{\"1085\":1}}],[\"解决办法就是新增更多的哈希桶\",{\"1\":{\"1042\":1}}],[\"解决办法有两种\",{\"1\":{\"414\":1}}],[\"解决了上面的问题\",{\"1\":{\"1071\":1}}],[\"解决了\",{\"1\":{\"115\":1}}],[\"解引用符则有两个用途\",{\"1\":{\"391\":1}}],[\"解析为对应的配置\",{\"1\":{\"851\":1}}],[\"解析验证\",{\"0\":{\"782\":1}}],[\"解析时间\",{\"0\":{\"740\":1}}],[\"解析模板\",{\"1\":{\"723\":1}}],[\"解析成功后再通过\",{\"1\":{\"723\":1}}],[\"解析成真实地址\",{\"1\":{\"145\":1}}],[\"解析方式经常需要新建结构体\",{\"1\":{\"620\":1}}],[\"解析效率\",{\"1\":{\"617\":1}}],[\"解析器可以忽略它\",{\"1\":{\"174\":1}}],[\"解析域名来获取地址\",{\"1\":{\"174\":1}}],[\"解析\",{\"0\":{\"634\":1,\"784\":1},\"1\":{\"88\":1,\"673\":1,\"1016\":1}}],[\"从0开始递增\",{\"1\":{\"1166\":1}}],[\"从根节点\",{\"1\":{\"1134\":1}}],[\"从根本上就断绝了字面量声明的字符串后续会被修改的可能性\",{\"1\":{\"1054\":1}}],[\"从栈和全局变量中收集根对象\",{\"1\":{\"1130\":1}}],[\"从应用方式来看\",{\"1\":{\"1130\":1}}],[\"从回收算法来看\",{\"1\":{\"1130\":1}}],[\"从代码中可以看到分析内存情况前需要\",{\"1\":{\"1128\":1}}],[\"从代码中可以看到的是大对象使用的spanclass值为\",{\"1\":{\"1126\":1}}],[\"从其它\",{\"1\":{\"1104\":1}}],[\"从copystack的过程可以看到\",{\"1\":{\"1103\":1}}],[\"从全局变量allm中删除该\",{\"1\":{\"1092\":1}}],[\"从低到高表示严重程度\",{\"1\":{\"1087\":1}}],[\"从低到高排列\",{\"1\":{\"279\":1}}],[\"从runtime\",{\"1\":{\"1080\":1}}],[\"从下面的代码也可以看出\",{\"1\":{\"1067\":1}}],[\"从汇编代码中就可以看出来\",{\"1\":{\"1066\":1}}],[\"从函数中可以看到真正负责搬迁工作的是runtime\",{\"1\":{\"1042\":1}}],[\"从起始位置向桶切片的末尾逐个迭代\",{\"1\":{\"1037\":1}}],[\"从这里的代码可以看出\",{\"1\":{\"1152\":1}}],[\"从这里开始\",{\"1\":{\"98\":1}}],[\"从这行代码就能看出来键值的内存地址是连续的\",{\"1\":{\"1036\":1}}],[\"从上面可以很明显的看到lock字段\",{\"1\":{\"1057\":1}}],[\"从上面可以看到它只有一个tophash的字段\",{\"1\":{\"1030\":1}}],[\"从上面这段话可以得到以下几个信息\",{\"1\":{\"1051\":1}}],[\"从上面的代码可以看到\",{\"1\":{\"1042\":1}}],[\"从上面的信息可以得知\",{\"1\":{\"1019\":1}}],[\"从上面大致就能看出来\",{\"1\":{\"1021\":1}}],[\"从上往下看是调用链\",{\"1\":{\"560\":1}}],[\"从某种意义上来说\",{\"1\":{\"992\":1}}],[\"从某种程度上来说\",{\"1\":{\"311\":1}}],[\"从语法上来说\",{\"1\":{\"899\":1}}],[\"从连接中读取数据\",{\"1\":{\"682\":1}}],[\"从左往右读\",{\"1\":{\"592\":1}}],[\"从左往右看是\",{\"1\":{\"560\":1}}],[\"从中做了类型转换\",{\"1\":{\"532\":1}}],[\"从中间指定下标\",{\"1\":{\"367\":1}}],[\"从中间下标\",{\"1\":{\"366\":1}}],[\"从测试结果中就可以很明显的看出有一个阻塞等待的过程\",{\"1\":{\"523\":1}}],[\"从测试日志中可以看出testsum用例尽管失败了还是输出了\",{\"1\":{\"521\":1}}],[\"从结果上来说确实是逆序的\",{\"1\":{\"1039\":1}}],[\"从结果可以看到\",{\"1\":{\"547\":1,\"1070\":1}}],[\"从结果可以看出来\",{\"1\":{\"1054\":1}}],[\"从结果可以看出全部测试都已经通过\",{\"1\":{\"520\":1}}],[\"从结果可以看出所有的测试用例都通过了\",{\"1\":{\"518\":1}}],[\"从结果中可以看出\",{\"1\":{\"526\":1}}],[\"从结果中可以看到\",{\"1\":{\"482\":1}}],[\"从头开始\",{\"1\":{\"1037\":1}}],[\"从头到尾都做了些什么事\",{\"1\":{\"510\":1}}],[\"从头部删除\",{\"1\":{\"367\":1}}],[\"从头部插入元素\",{\"1\":{\"366\":1}}],[\"从输出结果中可以看到\",{\"1\":{\"484\":1}}],[\"从始至终都只有一个锁\",{\"1\":{\"481\":1}}],[\"从原文件中读取数据\",{\"1\":{\"419\":2}}],[\"从原来的只打印前一百个帧\",{\"1\":{\"116\":1}}],[\"从指定位置开始写\",{\"1\":{\"418\":1}}],[\"从理论上来说\",{\"1\":{\"410\":1}}],[\"从尾部删除\",{\"1\":{\"367\":1}}],[\"从尾部插入元素\",{\"1\":{\"366\":1}}],[\"从源代码中的nil可以看出它仅仅只是一个变量\",{\"1\":{\"322\":1}}],[\"从源集合移动指定元素刀目标集合\",{\"1\":{\"274\":1}}],[\"从高到低排列\",{\"1\":{\"279\":1}}],[\"从最上游的服务到最下游\",{\"1\":{\"169\":1}}],[\"从而影响系统的整体性能\",{\"1\":{\"1153\":1}}],[\"从而可以使得三色标记并发的工作\",{\"1\":{\"1136\":1}}],[\"从而将执行权让给了主协程\",{\"1\":{\"1107\":1}}],[\"从而避免了重复工作或资源的浪费\",{\"1\":{\"1174\":1}}],[\"从而避免被误清理\",{\"1\":{\"1136\":1}}],[\"从而避免更严重的后果\",{\"1\":{\"1077\":1}}],[\"从而避免造成更加严重的后果\",{\"1\":{\"604\":1}}],[\"从而组成\",{\"1\":{\"773\":1}}],[\"从而不用创建结构体\",{\"1\":{\"645\":1}}],[\"从而不需要我们去手动更新\",{\"1\":{\"35\":1}}],[\"从而修改了数据\",{\"1\":{\"479\":1}}],[\"从而根据不同的\",{\"1\":{\"168\":1}}],[\"从客户端接收消息\",{\"1\":{\"158\":1}}],[\"从服务端的日志间隔时间就能看出来策略生效了\",{\"1\":{\"145\":1}}],[\"从\",{\"1\":{\"116\":1,\"1120\":1}}],[\"从字符串处理到源码\",{\"1\":{\"88\":1}}],[\"丰富的标准库\",{\"1\":{\"88\":1}}],[\"仅多核系统\",{\"1\":{\"1153\":1}}],[\"仅http\",{\"1\":{\"1002\":1}}],[\"仅通过几行代码就可以搭建一个非常简单的\",{\"1\":{\"637\":1}}],[\"仅使用net\",{\"1\":{\"616\":1}}],[\"仅仅多了一个布尔返回值\",{\"1\":{\"1036\":1}}],[\"仅仅叫法不一样\",{\"1\":{\"594\":1}}],[\"仅仅叫的名字不同\",{\"1\":{\"594\":1}}],[\"仅仅只有接口是无法被初始化的\",{\"1\":{\"566\":1}}],[\"仅仅只有这些是完全不够的\",{\"1\":{\"505\":1}}],[\"仅仅只是为了规范\",{\"1\":{\"988\":1}}],[\"仅仅只是当作一台普通起重机来用\",{\"1\":{\"567\":1}}],[\"仅仅只是比较值是无法做到并发安全的\",{\"1\":{\"490\":1}}],[\"仅仅只是简单的数字相加\",{\"1\":{\"490\":1}}],[\"仅仅只是少了一个初始化长度\",{\"1\":{\"364\":1}}],[\"仅仅只是指定扫描路径是不够的\",{\"1\":{\"201\":1}}],[\"仅仅只是代表着本次send\",{\"1\":{\"165\":1}}],[\"仅仅只会在整个\",{\"1\":{\"162\":1}}],[\"仅goroutine可用\",{\"1\":{\"556\":1}}],[\"仅=>左边的版本被替换\",{\"1\":{\"509\":1}}],[\"仅当在需要进行内存分配时\",{\"1\":{\"1116\":1}}],[\"仅当最后几行为output注释才会被视为示例测试\",{\"1\":{\"520\":1}}],[\"仅当发现数据未被修改时才会去执行对应操作\",{\"1\":{\"490\":1}}],[\"仅当v的kind为\",{\"1\":{\"441\":2}}],[\"仅做调试用\",{\"1\":{\"338\":1}}],[\"仅支持\",{\"1\":{\"804\":1}}],[\"仅支持相同长度的数组间的比较\",{\"1\":{\"332\":1}}],[\"仅支持判断是否相等\",{\"1\":{\"332\":3}}],[\"仅在一些特殊情况会使用空格\",{\"1\":{\"310\":1}}],[\"仅有的两个参数也只是输出格式化过程\",{\"1\":{\"308\":1}}],[\"仅能是以下规则限制的字符\",{\"1\":{\"160\":1}}],[\"仅需要一个go关键字\",{\"1\":{\"462\":1}}],[\"仅需要在编译时简单设置两个参数\",{\"1\":{\"88\":1}}],[\"仅需几秒钟既可以扩张到每秒数百万个\",{\"1\":{\"147\":1}}],[\"仅需一个关键字就可以开启一个协程\",{\"1\":{\"1083\":1}}],[\"仅需一个关键字\",{\"1\":{\"88\":1}}],[\"仅打印版本然后退出\",{\"1\":{\"37\":1}}],[\"部署两份\",{\"1\":{\"145\":2}}],[\"部署友好\",{\"1\":{\"88\":1}}],[\"部分代码如下\",{\"1\":{\"1089\":1}}],[\"部分如下所示\",{\"1\":{\"1053\":1}}],[\"部分是针对\",{\"1\":{\"913\":1}}],[\"部分支持\",{\"1\":{\"904\":1}}],[\"部分\",{\"1\":{\"773\":1,\"962\":1,\"1105\":2}}],[\"部分人的观点是迭代器引入了过多的复杂度\",{\"1\":{\"589\":1}}],[\"部分页面是空白的代表着还未更新\",{\"1\":{\"96\":1}}],[\"部分用于其它功能性行为\",{\"1\":{\"39\":1}}],[\"部分操作系统只能支持特定的\",{\"1\":{\"7\":1}}],[\"团队并没有直接应用删除写屏障\",{\"1\":{\"1143\":1}}],[\"团队不希望\",{\"1\":{\"1138\":1}}],[\"团队还是选择了三色并发标记+写屏障的组合\",{\"1\":{\"1130\":1}}],[\"团队变开始着手改进垃圾回收算法\",{\"1\":{\"1130\":1}}],[\"团队推出了链式错误\",{\"1\":{\"599\":1}}],[\"团队关于错误处理的文章\",{\"1\":{\"598\":1}}],[\"团队既想加入泛型又不想太拖累编译速度\",{\"1\":{\"579\":1}}],[\"团队认为大多数情况下\",{\"1\":{\"389\":1}}],[\"团队每半年发布一个二级版本\",{\"1\":{\"113\":1}}],[\"团队长达\",{\"1\":{\"87\":1}}],[\"团队领头人是russ\",{\"1\":{\"87\":1}}],[\"团队经过了三年的设计与研发\",{\"1\":{\"87\":1}}],[\"三色不变性这一概念来自于\",{\"1\":{\"1136\":1}}],[\"三色标记在并发情况下添加和删除对象引用都会导致问题\",{\"1\":{\"1141\":1}}],[\"三色标记法本身没法进行并发标记\",{\"1\":{\"1136\":1}}],[\"三色标记\",{\"0\":{\"1135\":1}}],[\"三者结合使用实现了一个简单的程序平滑退出的逻辑\",{\"1\":{\"1063\":1}}],[\"三种方法有着不同的适用情况\",{\"1\":{\"462\":1}}],[\"三种必须指定一个\",{\"1\":{\"416\":1}}],[\"三元表达式\",{\"0\":{\"313\":1}}],[\"三个等待的协程\",{\"1\":{\"1165\":1}}],[\"三个协程\",{\"1\":{\"1067\":1}}],[\"三个数的值分别计算好再赋给它们\",{\"1\":{\"331\":1}}],[\"三个变量在计算后的值分别是什么\",{\"1\":{\"331\":1}}],[\"三个变量也是同样如此\",{\"1\":{\"331\":1}}],[\"三个\",{\"1\":{\"143\":1}}],[\"三位创始人其实在很早以前就退隐了\",{\"1\":{\"87\":1}}],[\"三人于\",{\"1\":{\"87\":1}}],[\"三人之中最年轻\",{\"1\":{\"87\":1}}],[\"此举也可能会切断灰色对于白色对象的保护\",{\"1\":{\"1143\":1}}],[\"此举可能会切断灰色对象对于白色对象的保护\",{\"1\":{\"1143\":1}}],[\"此外\",{\"1\":{\"582\":1,\"963\":1}}],[\"此操作会先查询文档再进行修改文档\",{\"1\":{\"227\":1}}],[\"此文件将不会通过编译\",{\"1\":{\"188\":1}}],[\"此种类型的字段可以出现\",{\"1\":{\"187\":1}}],[\"此时垃圾回收的平均延时已经降低到了微秒级别\",{\"1\":{\"1144\":1}}],[\"此时一定满足强三色不变式\",{\"1\":{\"1144\":1}}],[\"此时就由\",{\"1\":{\"1140\":1}}],[\"此时就需要用括号将返回值围起来\",{\"1\":{\"397\":1}}],[\"此时场上就有了黑白灰三种颜色\",{\"1\":{\"1135\":1}}],[\"此时协程\",{\"1\":{\"1106\":1}}],[\"此时分为两种情况来处理\",{\"1\":{\"1097\":1}}],[\"此时分别在\",{\"1\":{\"144\":1}}],[\"此时的\",{\"1\":{\"1089\":1}}],[\"此时返回的success值来自sudog\",{\"1\":{\"1060\":1}}],[\"此时\",{\"1\":{\"1045\":1,\"1095\":2}}],[\"此时已经确定了搬迁的目的地\",{\"1\":{\"1042\":1}}],[\"此时有三种可能\",{\"1\":{\"1038\":1}}],[\"此时可以看到index的作用就是记录中间件的调用位置\",{\"1\":{\"995\":1}}],[\"此时可以发现hello文件夹生成了hello\",{\"1\":{\"152\":1}}],[\"此时再使用该值去创建指针就会引发panic\",{\"1\":{\"751\":1}}],[\"此时再次查看go\",{\"1\":{\"503\":1}}],[\"此时输出\",{\"1\":{\"626\":1}}],[\"此时打开浏览器访问http\",{\"1\":{\"557\":1}}],[\"此时重复加锁解锁都会导致死锁\",{\"1\":{\"479\":1}}],[\"此时访问到的count值为\",{\"1\":{\"479\":1}}],[\"此时管道还未初始化\",{\"1\":{\"463\":1}}],[\"此时文件内容如下\",{\"1\":{\"418\":1}}],[\"此时使用sync\",{\"1\":{\"35\":1}}],[\"此前依赖管理的混乱局面将要结束\",{\"1\":{\"126\":1}}],[\"此页面只是对官方日志的一个简单搬运\",{\"1\":{\"113\":1}}],[\"此后对于其他的新引用将不会允许\",{\"1\":{\"114\":1}}],[\"此后一直管理\",{\"1\":{\"87\":1}}],[\"此后每一年发布两个小版本更新\",{\"1\":{\"87\":1}}],[\"才执行的标记任务\",{\"1\":{\"1138\":1}}],[\"才是正确的方式\",{\"1\":{\"1105\":1}}],[\"才能找到指定的位置\",{\"1\":{\"1032\":1}}],[\"才能真正发挥unsafe包的真正威力\",{\"1\":{\"751\":1}}],[\"才能进行加法运算\",{\"1\":{\"595\":1}}],[\"才终于将这两个内置函数用泛型重写\",{\"1\":{\"332\":1}}],[\"才完成自举\",{\"1\":{\"87\":1}}],[\"才会向mcentral申请一个新的mspan来替换原来的空\",{\"1\":{\"1116\":1}}],[\"才会生成该文件\",{\"1\":{\"510\":1}}],[\"才会考虑去初始化\",{\"1\":{\"484\":2}}],[\"才会阻塞的等待协程来向管道中写入数据\",{\"1\":{\"467\":1}}],[\"才会将其编译\",{\"1\":{\"12\":1}}],[\"才会在编程路上走的更远\",{\"1\":{\"0\":1}}],[\"直译为系统监控\",{\"1\":{\"1082\":1}}],[\"直译为眼镜蛇\",{\"1\":{\"788\":1}}],[\"直线图\",{\"1\":{\"560\":1}}],[\"直接panic\",{\"1\":{\"1177\":1}}],[\"直接加载原子值\",{\"1\":{\"1173\":1}}],[\"直接向mheap申请内存成本最高\",{\"1\":{\"1125\":1}}],[\"直接判断其值是否为nil\",{\"1\":{\"1070\":1}}],[\"直接发送给接收方\",{\"1\":{\"1059\":1}}],[\"直接跳到done代码块\",{\"1\":{\"1038\":1}}],[\"直接访问值\",{\"1\":{\"1035\":1}}],[\"直接访问client的hello\",{\"1\":{\"155\":1}}],[\"直接返回\",{\"1\":{\"1053\":1}}],[\"直接返回一个字符串\",{\"1\":{\"981\":1}}],[\"直接返回错误\",{\"1\":{\"527\":1}}],[\"直接响应400\",{\"1\":{\"971\":1}}],[\"直接使用+运算符进行拼接\",{\"1\":{\"1053\":1}}],[\"直接使用即可\",{\"1\":{\"842\":1}}],[\"直接使用go\",{\"1\":{\"156\":1}}],[\"直接忽略掉不处理程序也不会崩溃\",{\"1\":{\"598\":1}}],[\"直接的并入了自身\",{\"1\":{\"575\":1}}],[\"直接在代码中使用\",{\"1\":{\"556\":1}}],[\"直接提供对应的文件名即可\",{\"1\":{\"416\":1}}],[\"直接修改底层数组\",{\"1\":{\"371\":1}}],[\"直接进入下一次迭代\",{\"1\":{\"357\":1}}],[\"直接执行脚本\",{\"1\":{\"283\":1}}],[\"直接从里面获取\",{\"1\":{\"162\":1}}],[\"直接传入一个\",{\"1\":{\"161\":1}}],[\"直接无法通过编译\",{\"1\":{\"136\":1}}],[\"直接下载依赖\",{\"1\":{\"7\":1}}],[\"直到条件满足\",{\"1\":{\"1165\":1}}],[\"直到场上只剩下黑色和白色对象\",{\"1\":{\"1135\":1}}],[\"直到遍历完所有可以到达的节点\",{\"1\":{\"1134\":1}}],[\"直到搬迁完毕\",{\"1\":{\"1042\":1}}],[\"直到找到最后一个存在的元素\",{\"1\":{\"1039\":1}}],[\"直到溢出桶链表遍历完毕后\",{\"1\":{\"1037\":1}}],[\"直到恢复运行状态\",{\"1\":{\"743\":1}}],[\"直到程序停止运行\",{\"1\":{\"606\":1}}],[\"直到成功\",{\"1\":{\"490\":1}}],[\"直到数据大于\",{\"1\":{\"482\":1}}],[\"直到被唤醒后继续重复上面的步骤\",{\"1\":{\"1104\":1}}],[\"直到被唤醒\",{\"1\":{\"482\":1,\"1167\":1}}],[\"直到释放写锁\",{\"1\":{\"481\":1}}],[\"直到减为\",{\"1\":{\"472\":1}}],[\"直到至少有一个case可用\",{\"1\":{\"471\":1}}],[\"直到有其他协程向管道中写入数据才会继续读取数据\",{\"1\":{\"470\":1}}],[\"直到缓冲区空出位置来\",{\"1\":{\"467\":1}}],[\"直到缓冲区没数据了\",{\"1\":{\"467\":1}}],[\"直到所有数据发送完毕\",{\"1\":{\"467\":1}}],[\"直到用新的const重置\",{\"1\":{\"325\":1}}],[\"直到客户端主动断开请求\",{\"1\":{\"158\":1}}],[\"直到超时过后断开请求\",{\"1\":{\"158\":1}}],[\"直到包的列表为空\",{\"1\":{\"116\":1}}],[\"直到\",{\"1\":{\"87\":2,\"492\":1,\"1036\":1}}],[\"于\",{\"1\":{\"87\":1,\"138\":1,\"1136\":1}}],[\"于是我把它们放进了一个切片中\",{\"1\":{\"1069\":1}}],[\"于是我们可以将服务代码修改成如下\",{\"1\":{\"168\":1}}],[\"于是就完成了元素的赋值\",{\"1\":{\"1038\":1}}],[\"于是就有了现在人们所推崇的面向接口编程\",{\"1\":{\"562\":1}}],[\"于是便分配了一个更大的新数组来盛放元素\",{\"1\":{\"1019\":1}}],[\"于是也将错误作为返回值返回\",{\"1\":{\"602\":1}}],[\"于是公司\",{\"1\":{\"567\":2}}],[\"于是给出了起重机的特殊规范和图纸\",{\"1\":{\"567\":1}}],[\"于是\",{\"1\":{\"503\":1}}],[\"于是在客户端就可以通过status\",{\"1\":{\"168\":1}}],[\"于是在短暂的头脑风暴后\",{\"1\":{\"87\":1}}],[\"于是怀着兴趣学了下去\",{\"1\":{\"0\":1}}],[\"推荐下面这些开源项目\",{\"1\":{\"611\":1}}],[\"推荐使用\",{\"1\":{\"1003\":1}}],[\"推荐使用sql包提供的类型\",{\"1\":{\"891\":1}}],[\"推荐使用兼容性好的通用类型\",{\"1\":{\"862\":1}}],[\"推荐使用make来创建一个空切片\",{\"1\":{\"364\":1}}],[\"推荐使用的一些例子\",{\"1\":{\"168\":1}}],[\"推荐使用后者\",{\"1\":{\"8\":1,\"90\":1}}],[\"推送式迭代器\",{\"0\":{\"582\":1},\"1\":{\"583\":1,\"588\":1}}],[\"推送完毕后\",{\"1\":{\"499\":1}}],[\"推出的一个新功能\",{\"1\":{\"527\":1}}],[\"推出了for\",{\"1\":{\"116\":1}}],[\"推出了最初的版本\",{\"1\":{\"87\":1}}],[\"便于传输\",{\"1\":{\"1004\":1}}],[\"便于管理\",{\"1\":{\"1003\":1}}],[\"便调用了next\",{\"1\":{\"995\":1}}],[\"便是定义的外键约束\",{\"1\":{\"860\":1}}],[\"便是整个调用链所允许的执行花费最大时间\",{\"1\":{\"169\":1}}],[\"便会开启垃圾回收\",{\"1\":{\"1132\":1}}],[\"便会进入runtime\",{\"1\":{\"1075\":1}}],[\"便会发生逃逸现象\",{\"1\":{\"553\":1}}],[\"便会退出循环\",{\"1\":{\"470\":1}}],[\"便可以直接访问其\",{\"1\":{\"450\":1}}],[\"便可以进行读取操作了\",{\"1\":{\"417\":1}}],[\"便需要用到reflect\",{\"1\":{\"430\":1}}],[\"便正式诞生了\",{\"1\":{\"87\":1}}],[\"便携式\",{\"1\":{\"64\":1}}],[\"让它们继续执行\",{\"1\":{\"1165\":1}}],[\"让它们发挥最大的工作效率\",{\"1\":{\"1104\":1}}],[\"让排队的人先持有\",{\"1\":{\"1151\":1}}],[\"让对象\",{\"1\":{\"1144\":1}}],[\"让每一个对象记录自身被引用了多少次\",{\"1\":{\"1130\":1}}],[\"让nil变得更有用\",{\"1\":{\"1071\":1}}],[\"让hmap中的buckets指向新的哈希桶数组\",{\"1\":{\"1042\":1}}],[\"让指针指向vmem\",{\"1\":{\"1038\":1}}],[\"让添加的元素数量刚好大于切片的容量\",{\"1\":{\"1019\":1}}],[\"让viper来负责配置管理\",{\"1\":{\"788\":1}}],[\"让任何\",{\"1\":{\"777\":1}}],[\"让调用者来进行处理\",{\"1\":{\"584\":1}}],[\"让编译器自行推断\",{\"1\":{\"571\":1}}],[\"让其它开发者看一眼就知道怎么使用\",{\"1\":{\"498\":1}}],[\"让其自动\",{\"1\":{\"144\":1}}],[\"让结构体中的字段按照合理的顺序分布\",{\"1\":{\"410\":1}}],[\"让我们从一个最简单的例子开始\",{\"1\":{\"292\":1}}],[\"让您飞快完成搜索\",{\"1\":{\"203\":1}}],[\"让\",{\"1\":{\"141\":1,\"529\":1,\"1106\":1}}],[\"让他们不用每一次编译都要等待如此长的时间\",{\"1\":{\"87\":1}}],[\"让哪些运行时间很长的测试用例缩短运行时间\",{\"1\":{\"38\":1}}],[\"他早在\",{\"1\":{\"87\":1}}],[\"他希望能够设计出一个简洁小巧\",{\"1\":{\"87\":1}}],[\"他们先后尝试过很多设想\",{\"1\":{\"1130\":1}}],[\"他们匹配一切\",{\"1\":{\"957\":1}}],[\"他们认为这种灵活性没有多大必要\",{\"1\":{\"763\":1}}],[\"他们不希望干什么事情都需要嵌套一堆try\",{\"1\":{\"598\":1}}],[\"他们会检查你的源代码中的结构体\",{\"1\":{\"410\":1}}],[\"他们会将参数输出到标准错误中\",{\"1\":{\"338\":1}}],[\"他们在等待\",{\"1\":{\"87\":1}}],[\"他们分别是\",{\"1\":{\"87\":1}}],[\"脑袋里迸发出了一个新奇的想法\",{\"1\":{\"87\":1}}],[\"她设计了\",{\"1\":{\"87\":1}}],[\"图像操作的包\",{\"1\":{\"616\":1}}],[\"图像处理\",{\"0\":{\"76\":1}}],[\"图数据库\",{\"1\":{\"614\":2}}],[\"图画的并不严谨\",{\"1\":{\"543\":1}}],[\"图中的内存块是按照创建时间的先后来进行排列的\",{\"1\":{\"1112\":1}}],[\"图中\",{\"1\":{\"142\":1}}],[\"图中分为了两部分\",{\"1\":{\"142\":1}}],[\"图中便是三位大佬设计\",{\"1\":{\"87\":1}}],[\"图灵奖获得者\",{\"1\":{\"87\":1}}],[\"背景\",{\"0\":{\"87\":1}}],[\"入门\",{\"0\":{\"823\":1}}],[\"入门的最佳选择\",{\"1\":{\"614\":1}}],[\"入门教程\",{\"1\":{\"101\":1}}],[\"入门指南\",{\"0\":{\"86\":1}}],[\"入口函数是main函数\",{\"1\":{\"292\":1}}],[\"入口文件都必须声明为main包\",{\"1\":{\"292\":1}}],[\"入口文件所在的顶级包路径\",{\"1\":{\"9\":1}}],[\"入口位于cmd\",{\"1\":{\"4\":1}}],[\"语义比较模糊\",{\"1\":{\"849\":1}}],[\"语义\",{\"1\":{\"617\":1}}],[\"语义化版本通常指的是某一个\",{\"1\":{\"509\":1}}],[\"语句收集一个scase数组\",{\"1\":{\"1067\":1}}],[\"语句会造成当前协程永久阻塞\",{\"1\":{\"1066\":1}}],[\"语句会变的很长\",{\"1\":{\"866\":1}}],[\"语句可以在if\",{\"1\":{\"349\":1}}],[\"语句格式如下\",{\"1\":{\"348\":1,\"349\":1,\"350\":1,\"354\":1,\"355\":1}}],[\"语句通常可以简写\",{\"1\":{\"312\":1}}],[\"语句定义等等\",{\"1\":{\"289\":1}}],[\"语法如下\",{\"1\":{\"1019\":1,\"1040\":1}}],[\"语法是type+number\",{\"1\":{\"763\":1}}],[\"语法特性\",{\"1\":{\"581\":1}}],[\"语法格式的值\",{\"1\":{\"341\":1}}],[\"语法上像是\",{\"1\":{\"617\":1}}],[\"语法上看起来非常直观\",{\"1\":{\"331\":1}}],[\"语法上多了以下这些东西\",{\"1\":{\"137\":1}}],[\"语法\",{\"0\":{\"181\":1},\"1\":{\"151\":1,\"174\":1,\"1009\":1}}],[\"语法进阶\",{\"1\":{\"96\":1}}],[\"语法基础\",{\"1\":{\"96\":1}}],[\"语法简单\",{\"1\":{\"88\":1}}],[\"语法感知的文本校对工具\",{\"1\":{\"77\":1}}],[\"语言就首次采用了垃圾回收机制\",{\"1\":{\"1130\":1}}],[\"语言堆内存的管理者\",{\"1\":{\"1118\":1}}],[\"语言运行时大部分对象都是位于\",{\"1\":{\"1125\":1}}],[\"语言运行时来完成\",{\"1\":{\"1085\":1}}],[\"语言运行时的设计\",{\"1\":{\"1083\":1}}],[\"语言便应运而生\",{\"1\":{\"1084\":1}}],[\"语言最大的特点之一就是它对于并发的天然支持\",{\"1\":{\"1083\":1}}],[\"语言贯彻\",{\"1\":{\"1056\":1}}],[\"语言文件\",{\"0\":{\"953\":1}}],[\"语言开发的系统信息库\",{\"1\":{\"904\":1}}],[\"语言社区中就绝对绕不开gorm\",{\"1\":{\"848\":1}}],[\"语言内存对齐详解\",{\"1\":{\"750\":1}}],[\"语言本身的并发特性\",{\"1\":{\"673\":1}}],[\"语言本身的内容\",{\"1\":{\"96\":1}}],[\"语言支持\",{\"1\":{\"617\":1}}],[\"语言并没有异常\",{\"1\":{\"598\":1}}],[\"语言并没有像\",{\"1\":{\"544\":1}}],[\"语言吸取了教训\",{\"1\":{\"592\":1}}],[\"语言类型可以由多个关键字组成\",{\"1\":{\"534\":1}}],[\"语言类型值\",{\"1\":{\"341\":1}}],[\"语言不允许有多返回值\",{\"1\":{\"531\":1}}],[\"语言是一个百分之百的静态类型语言\",{\"1\":{\"428\":1}}],[\"语言来进行基本的文件处理\",{\"1\":{\"415\":1}}],[\"语言提供文件处理的标准库大致以下几个\",{\"1\":{\"415\":1}}],[\"语言没有为枚举单独设计一个数据类型\",{\"1\":{\"326\":1}}],[\"语言字符串完全兼容\",{\"1\":{\"319\":1}}],[\"语言之旅\",{\"1\":{\"287\":1}}],[\"语言所需要准备的一切东西\",{\"1\":{\"286\":1}}],[\"语言驱动来操作\",{\"1\":{\"239\":1}}],[\"语言插件\",{\"1\":{\"200\":1}}],[\"语言代码生成是单独的一个可执行文件\",{\"1\":{\"200\":1}}],[\"语言进行开发\",{\"1\":{\"139\":1}}],[\"语言循环变量的问题\",{\"1\":{\"115\":1}}],[\"语言层面\",{\"1\":{\"114\":1,\"115\":1,\"116\":1,\"117\":1,\"119\":1,\"120\":1,\"123\":1,\"124\":1,\"128\":1,\"129\":1,\"132\":1,\"133\":1,\"135\":1,\"136\":1,\"137\":1}}],[\"语言官方更新日志\",{\"1\":{\"113\":1}}],[\"语言中接触到的第一个数据类型\",{\"1\":{\"1051\":1}}],[\"语言中最最常用的数据结构\",{\"1\":{\"1018\":1}}],[\"语言中最基础的定义\",{\"1\":{\"289\":1}}],[\"语言中这样的操作是不被允许的\",{\"1\":{\"701\":1}}],[\"语言中一个很常见的应用场景\",{\"1\":{\"610\":1}}],[\"语言中一种很常见的设计模式\",{\"1\":{\"406\":1}}],[\"语言中错误处理以返回值的形式返回\",{\"1\":{\"531\":1}}],[\"语言中不存在隐式类型转换\",{\"1\":{\"332\":1}}],[\"语言中\",{\"1\":{\"329\":1,\"1103\":1}}],[\"语言中全部的内置类型\",{\"1\":{\"314\":1}}],[\"语言中没有自增与自减运算符\",{\"1\":{\"299\":1}}],[\"语言中没有选择将~作为取反运算符\",{\"1\":{\"299\":1}}],[\"语言中没有这些\",{\"1\":{\"294\":1}}],[\"语言中支持的运算符号的优先级排列\",{\"1\":{\"299\":1}}],[\"语言中见过public\",{\"1\":{\"294\":1}}],[\"语言中的协程是典型的有栈协程\",{\"1\":{\"1099\":1}}],[\"语言中的协程\",{\"1\":{\"1085\":1}}],[\"语言中的一个实现\",{\"1\":{\"1009\":1}}],[\"语言中的\",{\"1\":{\"637\":1}}],[\"语言中的int而非\",{\"1\":{\"532\":1}}],[\"语言中的函数\",{\"1\":{\"532\":1}}],[\"语言中的union一样\",{\"1\":{\"195\":1}}],[\"语言中的宏\",{\"1\":{\"39\":1}}],[\"语言中文网\",{\"1\":{\"101\":2}}],[\"语言教程\",{\"1\":{\"101\":1}}],[\"语言菜鸟教程\",{\"1\":{\"101\":1}}],[\"语言高级编程\",{\"1\":{\"99\":2}}],[\"语言高性能编程\",{\"1\":{\"99\":2}}],[\"语言原本\",{\"1\":{\"99\":2}}],[\"语言标准库中的net\",{\"1\":{\"637\":1}}],[\"语言标准库\",{\"1\":{\"99\":1,\"647\":1}}],[\"语言圣经\",{\"1\":{\"99\":3}}],[\"语言设计哲学\",{\"1\":{\"99\":2}}],[\"语言设计与实现\",{\"1\":{\"99\":3,\"100\":1}}],[\"语言设计领头人\",{\"1\":{\"87\":1}}],[\"语言入门教程\",{\"1\":{\"101\":2}}],[\"语言入门\",{\"1\":{\"96\":1}}],[\"语言整体难度并不高\",{\"1\":{\"95\":1}}],[\"语言源代码\",{\"1\":{\"200\":1}}],[\"语言源代码生成的包\",{\"1\":{\"198\":1}}],[\"语言源代码的静态错误检查工具\",{\"1\":{\"37\":1}}],[\"语言源文件\",{\"1\":{\"92\":1}}],[\"语言及其衍生文件\",{\"1\":{\"92\":1}}],[\"语言依赖存放路径\",{\"1\":{\"90\":1}}],[\"语言下载\",{\"1\":{\"89\":1}}],[\"语言抛弃了继承\",{\"1\":{\"88\":1}}],[\"语言坚实的基础\",{\"1\":{\"88\":1}}],[\"语言对于并发的支持是纯天然的\",{\"1\":{\"88\":1,\"461\":1}}],[\"语言未对外发布时就已经参与到了开发工作当中\",{\"1\":{\"87\":1}}],[\"语言正式开源\",{\"1\":{\"87\":1}}],[\"语言创始人\",{\"1\":{\"87\":2}}],[\"语言诞生于\",{\"1\":{\"87\":1}}],[\"语言诞生了十多年只有九个可用的替换参数\",{\"1\":{\"16\":1}}],[\"语言\",{\"1\":{\"75\":1,\"94\":1,\"200\":1,\"553\":1,\"814\":1,\"1008\":1,\"1109\":1}}],[\"语言工具链中提供测试功能的命令\",{\"1\":{\"38\":1}}],[\"语言容易犯的一个坑\",{\"1\":{\"37\":1}}],[\"语言自身的调度器进行运行时调度\",{\"1\":{\"462\":1}}],[\"语言自身实现的\",{\"1\":{\"6\":1}}],[\"语言自带的格式化工具\",{\"1\":{\"17\":1}}],[\"语言截至到撰写本文时已经有十年了\",{\"1\":{\"16\":1}}],[\"语言交叉编译非常的简单\",{\"1\":{\"11\":1}}],[\"语言编写\",{\"1\":{\"239\":1}}],[\"语言编写的调试器delve\",{\"1\":{\"504\":1}}],[\"语言编写的调试器\",{\"1\":{\"8\":1}}],[\"语言编写的编译器\",{\"1\":{\"8\":1}}],[\"语言编译总共有两大特点\",{\"1\":{\"11\":1}}],[\"语言的并发调度模型并发不是完全原创的\",{\"1\":{\"1084\":1}}],[\"语言的协程使用起来如此的简单\",{\"1\":{\"1083\":1}}],[\"语言的net标准库是一个非常强大的库\",{\"1\":{\"673\":1}}],[\"语言的数据库或引擎同样也不少\",{\"1\":{\"614\":1}}],[\"语言的内存完全是由开发者手动管理\",{\"1\":{\"543\":1}}],[\"语言的任何地方\",{\"1\":{\"294\":1}}],[\"语言的人\",{\"1\":{\"287\":1}}],[\"语言的语法与特性\",{\"1\":{\"287\":1}}],[\"语言的最新变化\",{\"1\":{\"285\":1}}],[\"语言的一些内部设计原理\",{\"1\":{\"96\":1}}],[\"语言的开发者\",{\"1\":{\"95\":1}}],[\"语言的安装路径\",{\"1\":{\"90\":1}}],[\"语言的源代码以及工具链和一些文档\",{\"1\":{\"90\":1}}],[\"语言的目录结构\",{\"1\":{\"90\":1}}],[\"语言的发展\",{\"1\":{\"88\":1}}],[\"语言的缺点同样也有很多\",{\"1\":{\"88\":1}}],[\"语言的情景\",{\"1\":{\"87\":1}}],[\"语言的\",{\"1\":{\"64\":1,\"87\":1}}],[\"语言的编译速度和可移植性\",{\"1\":{\"19\":1}}],[\"语言的特点之一\",{\"1\":{\"8\":1}}],[\"语言的支持更友好\",{\"1\":{\"8\":1}}],[\"语言的版本信息\",{\"1\":{\"7\":1}}],[\"语言的版本\",{\"1\":{\"6\":1,\"7\":1,\"18\":1}}],[\"语言调试器也分两种\",{\"1\":{\"8\":1}}],[\"语言实现的\",{\"1\":{\"62\":1}}],[\"语言实现\",{\"1\":{\"8\":1}}],[\"语言在自由度和灵活度上做了取舍\",{\"1\":{\"88\":1}}],[\"语言在\",{\"1\":{\"8\":1}}],[\"语言安装位置的根目录\",{\"1\":{\"7\":1}}],[\"语言版本已经来到了\",{\"1\":{\"7\":1}}],[\"语言版本\",{\"1\":{\"6\":1}}],[\"绘图库\",{\"1\":{\"76\":1}}],[\"无锁检查\",{\"1\":{\"1169\":1}}],[\"无写屏障的卡片标记\",{\"1\":{\"1130\":1}}],[\"无写入权限\",{\"1\":{\"862\":1}}],[\"无非就是下面几件事\",{\"1\":{\"1039\":1}}],[\"无类域间路由\",{\"1\":{\"932\":3}}],[\"无读权限\",{\"1\":{\"862\":1}}],[\"无需访问认证中心\",{\"1\":{\"785\":1}}],[\"无需付费\",{\"1\":{\"94\":1}}],[\"无状态的特点\",{\"1\":{\"769\":1}}],[\"无论如何都会返回一个可用的mspan\",{\"1\":{\"1117\":1}}],[\"无论是我们主动调用panic函数\",{\"1\":{\"1079\":1}}],[\"无论是遍历还是直接访问\",{\"1\":{\"1037\":1}}],[\"无论是使用本地路径还是模块路径指定替换\",{\"1\":{\"509\":1}}],[\"无论其内部元素是否对外暴露\",{\"1\":{\"751\":1}}],[\"无论怎样读写都会导致当前协程阻塞\",{\"1\":{\"468\":1}}],[\"无缓冲管道中会造成死锁例子在这里可以顺利运行\",{\"1\":{\"467\":1}}],[\"无缓冲管道在发送数据时\",{\"1\":{\"467\":1}}],[\"无缓冲管道不应该同步的使用\",{\"1\":{\"466\":1}}],[\"无缓冲\",{\"0\":{\"466\":1}}],[\"无符号整型\",{\"1\":{\"316\":1}}],[\"无符号\",{\"1\":{\"316\":4}}],[\"无缝交互\",{\"1\":{\"75\":1}}],[\"无法推断到底是要如何进行数据解析\",{\"1\":{\"974\":1}}],[\"无法将配置序列化为yaml\",{\"1\":{\"798\":1}}],[\"无法反序列化为结构体\",{\"1\":{\"797\":1}}],[\"无法做到参数命名\",{\"1\":{\"722\":1}}],[\"无法作为参数传递\",{\"1\":{\"595\":1}}],[\"无法作为该函数的参数\",{\"1\":{\"594\":1}}],[\"无法进行运算\",{\"1\":{\"591\":1}}],[\"无法预测\",{\"1\":{\"1149\":1}}],[\"无法预知这个对象是新创建的还是复用的\",{\"1\":{\"485\":1}}],[\"无法预判的\",{\"1\":{\"462\":1}}],[\"无法获得锁时并不会阻塞而是返回false\",{\"1\":{\"481\":1}}],[\"无法被取消\",{\"1\":{\"476\":1}}],[\"无法被修改\",{\"1\":{\"416\":1}}],[\"无法被go\",{\"1\":{\"7\":1}}],[\"无法通过dog结构体找到dog指针\",{\"1\":{\"414\":1}}],[\"无法通过编译\",{\"1\":{\"329\":1,\"375\":1,\"574\":2,\"575\":4}}],[\"无法使用dog\",{\"1\":{\"414\":1}}],[\"无法正常使用\",{\"1\":{\"391\":1}}],[\"无法修改\",{\"1\":{\"376\":1}}],[\"无法访问\",{\"1\":{\"333\":1}}],[\"无法与\",{\"1\":{\"34\":1}}],[\"受到互斥锁的保护\",{\"1\":{\"1045\":1}}],[\"受众\",{\"1\":{\"773\":1}}],[\"受\",{\"1\":{\"75\":1}}],[\"安全传输\",{\"0\":{\"173\":1}}],[\"安全的json\",{\"1\":{\"981\":1}}],[\"安全的\",{\"1\":{\"75\":1,\"770\":1}}],[\"安装源代码依赖\",{\"1\":{\"822\":1}}],[\"安装代码生成工具\",{\"1\":{\"822\":1}}],[\"安装docker\",{\"1\":{\"801\":1}}],[\"安装依赖即可\",{\"1\":{\"1003\":1}}],[\"安装依赖\",{\"1\":{\"629\":1}}],[\"安装命令行\",{\"0\":{\"504\":1}}],[\"安装后查看其版本\",{\"1\":{\"200\":1}}],[\"安装完毕后查看版本\",{\"1\":{\"156\":1}}],[\"安装成功后\",{\"1\":{\"140\":1}}],[\"安装起来也相当的方便\",{\"1\":{\"140\":1}}],[\"安装包本身也就只有一个二进制可执行文件\",{\"1\":{\"140\":1}}],[\"安装即可\",{\"1\":{\"140\":1}}],[\"安装方法见官方文档\",{\"1\":{\"104\":1}}],[\"安装管理\",{\"0\":{\"92\":1}}],[\"安装\",{\"0\":{\"89\":1,\"140\":1,\"200\":1,\"220\":1,\"240\":1,\"787\":1,\"801\":1,\"804\":1,\"808\":1,\"811\":1,\"816\":1,\"819\":1,\"822\":1,\"832\":1,\"837\":1,\"846\":1,\"850\":1,\"905\":1,\"928\":1,\"964\":1,\"1010\":1},\"1\":{\"776\":1,\"850\":1}}],[\"安装并编译包\",{\"1\":{\"2\":1}}],[\"动态语言则完全相反\",{\"1\":{\"591\":1}}],[\"动态链接库无法单独运行\",{\"1\":{\"545\":1}}],[\"动态链接库\",{\"0\":{\"545\":1}}],[\"动态具体类型\",{\"1\":{\"428\":2}}],[\"动态\",{\"1\":{\"75\":1}}],[\"跨域配置\",{\"0\":{\"1000\":1}}],[\"跨平台\",{\"1\":{\"147\":1}}],[\"跨平台的\",{\"1\":{\"73\":1}}],[\"跨语言\",{\"1\":{\"147\":1}}],[\"跨语言交互\",{\"0\":{\"75\":1}}],[\"写者协程没有需要等待的读者协程\",{\"1\":{\"1162\":1}}],[\"写者协程释放信号量\",{\"1\":{\"1155\":1}}],[\"写者协程获取信号量\",{\"1\":{\"1155\":1}}],[\"写者协程持有该互斥锁时\",{\"1\":{\"1155\":1}}],[\"写信号量\",{\"1\":{\"1155\":1}}],[\"写写互斥\",{\"1\":{\"1149\":2}}],[\"写屏障在进行着色时不再会立即标记对象颜色\",{\"1\":{\"1145\":1}}],[\"写管道做了\",{\"1\":{\"1067\":1}}],[\"写管道\",{\"1\":{\"1067\":2}}],[\"写页面的\",{\"1\":{\"1004\":1}}],[\"写下本文时\",{\"1\":{\"616\":1}}],[\"写过\",{\"1\":{\"581\":1}}],[\"写完后关闭管道\",{\"1\":{\"470\":1}}],[\"写协程执行结束\",{\"1\":{\"467\":1}}],[\"写协程执行完毕\",{\"1\":{\"467\":1}}],[\"写协程就写入一个数据\",{\"1\":{\"467\":1}}],[\"写一个\",{\"1\":{\"467\":1}}],[\"写入对应文件的逻辑\",{\"1\":{\"1007\":1}}],[\"写入响应头\",{\"1\":{\"986\":1}}],[\"写入配置文件\",{\"0\":{\"792\":1}}],[\"写入值的例子\",{\"1\":{\"604\":1}}],[\"写入文本格式的数据\",{\"1\":{\"556\":1}}],[\"写入压缩后的\",{\"1\":{\"556\":1}}],[\"写入如下代码\",{\"1\":{\"520\":2,\"521\":1,\"527\":2}}],[\"写入如下内容\",{\"1\":{\"151\":1,\"156\":1,\"1011\":1}}],[\"写入已关闭的管道\",{\"1\":{\"468\":1}}],[\"写入满缓冲区的管道\",{\"1\":{\"468\":1}}],[\"写入完毕\",{\"1\":{\"467\":2}}],[\"写入数据\",{\"1\":{\"465\":1,\"466\":2,\"467\":1,\"471\":1}}],[\"写入落实到磁盘上\",{\"1\":{\"422\":1}}],[\"写入目标文件\",{\"1\":{\"419\":1}}],[\"写入字符串\",{\"1\":{\"418\":1}}],[\"写入字节切片\",{\"1\":{\"418\":1}}],[\"写入\",{\"0\":{\"418\":1,\"1022\":1},\"1\":{\"467\":12}}],[\"写操作的流程分为两部分\",{\"1\":{\"1047\":1}}],[\"写操作对应的是store方法\",{\"1\":{\"1047\":1}}],[\"写操作\",{\"1\":{\"389\":1}}],[\"写了什么东西\",{\"1\":{\"300\":1}}],[\"写给\",{\"1\":{\"147\":1}}],[\"写\",{\"0\":{\"1047\":1},\"1\":{\"73\":1,\"468\":1}}],[\"由tiny字段记录了这片内存的基地址\",{\"1\":{\"1124\":1}}],[\"由mheap\",{\"1\":{\"1120\":1}}],[\"由mem包提供\",{\"1\":{\"917\":1}}],[\"由fixalloc\",{\"1\":{\"1112\":1}}],[\"由它来完成抢占信号的发送\",{\"1\":{\"1107\":1}}],[\"由它来负责管道的实际创建\",{\"1\":{\"1058\":1}}],[\"由操作系统负责\",{\"1\":{\"1091\":1}}],[\"由操作系统来负责调度\",{\"1\":{\"1085\":1}}],[\"由处理器\",{\"1\":{\"1085\":1}}],[\"由接收方来进行处理\",{\"1\":{\"1059\":1}}],[\"由参数和匿名变量传递\",{\"1\":{\"1053\":1}}],[\"由此可见\",{\"1\":{\"1034\":1}}],[\"由上面的代码可知\",{\"1\":{\"1025\":1}}],[\"由结构部分的内容可以得知\",{\"1\":{\"1025\":1}}],[\"由状态码\",{\"1\":{\"1013\":1}}],[\"由host包提供\",{\"1\":{\"906\":1}}],[\"由我们自己来控制何时回滚\",{\"1\":{\"902\":1}}],[\"由select和omit选择或忽略的字段\",{\"1\":{\"874\":1}}],[\"由以下三个部分组成\",{\"1\":{\"771\":1}}],[\"由go标准库提供\",{\"1\":{\"1175\":1}}],[\"由go\",{\"1\":{\"561\":1}}],[\"由runtime\",{\"1\":{\"543\":1,\"1038\":1,\"1080\":1,\"1089\":4,\"1092\":2,\"1095\":1,\"1097\":3,\"1101\":1,\"1106\":1,\"1138\":1,\"1147\":1,\"1148\":1}}],[\"由文件结构中可知\",{\"1\":{\"296\":1}}],[\"由官方搭建的可在线编译并运行\",{\"1\":{\"290\":1}}],[\"由之前下载的protoc\",{\"1\":{\"201\":1}}],[\"由社区和谷歌共同维护\",{\"1\":{\"88\":1}}],[\"由austin\",{\"1\":{\"87\":1}}],[\"由三位大佬共同创造\",{\"1\":{\"87\":1}}],[\"由\",{\"1\":{\"72\":1,\"75\":1,\"462\":1,\"1097\":2}}],[\"由于后者正处于运行的状态\",{\"1\":{\"1151\":1}}],[\"由于需要对原对象和新对象都行进行标记\",{\"1\":{\"1145\":1}}],[\"由于已经消除了大部分的\",{\"1\":{\"1144\":1}}],[\"由于栈空间的对象已经是全黑的了\",{\"1\":{\"1144\":1}}],[\"由于栈对象全黑\",{\"1\":{\"1143\":1}}],[\"由于不知道白色对象上游是否被灰色保护\",{\"1\":{\"1143\":1}}],[\"由于不知道白色对象下游是否被黑色对象引用\",{\"1\":{\"1143\":1}}],[\"由于这个readercount变化比较多\",{\"1\":{\"1156\":1}}],[\"由于这两个都是写操作\",{\"1\":{\"1141\":1}}],[\"由于这些操作无法再细化为更小的步骤\",{\"1\":{\"487\":1}}],[\"由于这些命令全部都是由\",{\"1\":{\"4\":1}}],[\"由于扫描是并发的\",{\"1\":{\"1139\":1}}],[\"由于数量固定\",{\"1\":{\"1114\":1}}],[\"由于morestack几乎会在所有函数的开头都被插入\",{\"1\":{\"1101\":1}}],[\"由于只持有一个内存的引用\",{\"1\":{\"1052\":1}}],[\"由于链表是一个环\",{\"1\":{\"1039\":1}}],[\"由于在\",{\"1\":{\"1037\":1}}],[\"由于在创建结构体时返回的是结构体指针\",{\"1\":{\"603\":1}}],[\"由于路由器的设计\",{\"1\":{\"954\":1}}],[\"由于令牌是凭证\",{\"1\":{\"775\":1}}],[\"由于字符串字面量是存放在进程中的只读段\",{\"1\":{\"755\":1}}],[\"由于unsafe\",{\"1\":{\"751\":1}}],[\"由于官方已经帮我们实现了float64slicestringsliceintslice三个类型\",{\"1\":{\"683\":1}}],[\"由于该结构体并不对外暴露\",{\"1\":{\"602\":1}}],[\"由于该数组的内存是由\",{\"1\":{\"539\":1}}],[\"由于interface\",{\"1\":{\"596\":1}}],[\"由于对元素没有任何的要求\",{\"1\":{\"578\":1}}],[\"由于采用了泛型\",{\"1\":{\"577\":1}}],[\"由于同样具有起重和吊货的功能\",{\"1\":{\"567\":1}}],[\"由于do函数本身什么都没做\",{\"1\":{\"559\":1}}],[\"由于其长度未知\",{\"1\":{\"553\":1}}],[\"由于其vx\",{\"1\":{\"509\":1}}],[\"由于c\",{\"1\":{\"536\":1}}],[\"由于一些字符占用并不止一个字节\",{\"1\":{\"527\":1}}],[\"由于一些运行时方面的完善\",{\"1\":{\"134\":1}}],[\"由于传入的字符串是不可预知的\",{\"1\":{\"527\":1}}],[\"由于无锁化实现的并发安全效率相对于锁要高一些\",{\"1\":{\"490\":1}}],[\"由于每个协程访问和计算所需的时间不同\",{\"1\":{\"479\":1}}],[\"由于上例中没有对管道写入数据\",{\"1\":{\"471\":1}}],[\"由于管道已经关闭了\",{\"1\":{\"470\":1}}],[\"由于管道的缓冲区大小为\",{\"1\":{\"467\":1}}],[\"由于缓冲区大小为\",{\"1\":{\"467\":1}}],[\"由于是根据年龄比较的\",{\"1\":{\"688\":1}}],[\"由于是crane\",{\"1\":{\"567\":1}}],[\"由于是以os\",{\"1\":{\"418\":1}}],[\"由于是外置的所以需要用go\",{\"1\":{\"37\":1}}],[\"由于项目下并没有文件readme\",{\"1\":{\"416\":1}}],[\"由于例子中的字符都是属于\",{\"1\":{\"380\":1}}],[\"由于容量为6\",{\"1\":{\"371\":1}}],[\"由于默认支持\",{\"1\":{\"174\":1}}],[\"由于内容太多这里不再过多赘述\",{\"1\":{\"137\":1}}],[\"由于泛型的出现\",{\"1\":{\"117\":1}}],[\"由于它是函数内创建的\",{\"1\":{\"550\":1}}],[\"由于它是在编译期进行\",{\"1\":{\"549\":1}}],[\"由于它是一个开源项目\",{\"1\":{\"104\":1}}],[\"由于它太过简单且结果总是可以预测\",{\"1\":{\"45\":1}}],[\"由于\",{\"1\":{\"46\":1,\"105\":1,\"140\":1,\"143\":1,\"231\":1,\"359\":1,\"529\":1,\"541\":1,\"585\":2,\"615\":1,\"673\":1,\"810\":1,\"849\":1,\"1106\":1,\"1134\":1}}],[\"由于完全是\",{\"1\":{\"8\":1}}],[\"游戏服务器\",{\"0\":{\"613\":1}}],[\"游戏服务端框架\",{\"1\":{\"72\":1}}],[\"游戏引擎\",{\"1\":{\"72\":4}}],[\"游戏开发\",{\"0\":{\"72\":1}}],[\"邮件模板生成库\",{\"1\":{\"71\":1}}],[\"邮件发送库\",{\"1\":{\"71\":1}}],[\"全局资源的初始化等场景\",{\"1\":{\"1171\":1}}],[\"全局变量等活跃对象\",{\"1\":{\"1134\":1}}],[\"全局回收\",{\"1\":{\"1130\":1}}],[\"全局队列\",{\"1\":{\"1104\":1}}],[\"全局队列的信息则存放在runtime\",{\"1\":{\"1088\":1}}],[\"全局中间件被执行\",{\"1\":{\"993\":2,\"994\":1}}],[\"全局中间件即作用范围为全局\",{\"1\":{\"993\":1}}],[\"全局中间件\",{\"0\":{\"993\":1}}],[\"全局环境变量配置文件\",{\"1\":{\"92\":1}}],[\"全功能\",{\"1\":{\"849\":1}}],[\"全中文支持\",{\"1\":{\"287\":1}}],[\"全名\",{\"1\":{\"146\":1,\"770\":1}}],[\"全方位支持\",{\"1\":{\"94\":1}}],[\"全面开源\",{\"1\":{\"71\":1}}],[\"全面的邮件发送库\",{\"1\":{\"71\":1}}],[\"全文检索库\",{\"1\":{\"62\":1}}],[\"爬虫框架\",{\"0\":{\"69\":1}}],[\"转用于替换字符串\",{\"1\":{\"720\":1}}],[\"转换后可以使用round方法来修改保留多少位\",{\"1\":{\"820\":1}}],[\"转换后的切片与原数组指向的是同一片内存\",{\"1\":{\"362\":1}}],[\"转换函数\",{\"1\":{\"698\":1}}],[\"转换成对应语言的大写字符串\",{\"1\":{\"717\":1}}],[\"转换成对应语言的小写字符串\",{\"1\":{\"717\":1}}],[\"转换成\",{\"0\":{\"696\":1}}],[\"转换为float64类型\",{\"1\":{\"595\":1}}],[\"转换为成一个\",{\"1\":{\"585\":1}}],[\"转换过程\",{\"1\":{\"583\":1}}],[\"转换\",{\"0\":{\"376\":1,\"1054\":1}}],[\"转义\",{\"1\":{\"728\":3}}],[\"转义字符\",{\"0\":{\"305\":1}}],[\"转义序列实用程序\",{\"1\":{\"64\":1}}],[\"转地理信息\",{\"1\":{\"68\":2}}],[\"归档文件在\",{\"1\":{\"65\":1}}],[\"压力\",{\"1\":{\"485\":1,\"553\":1}}],[\"压缩算法实现的包\",{\"1\":{\"616\":1}}],[\"压缩文件中包含\",{\"1\":{\"90\":1}}],[\"压缩文件的纯\",{\"1\":{\"65\":1}}],[\"压缩解压\",{\"0\":{\"65\":1}}],[\"压测工具\",{\"1\":{\"55\":1}}],[\"进阶\",{\"0\":{\"947\":1}}],[\"进程\",{\"0\":{\"922\":1}}],[\"进入阻塞等待队列\",{\"1\":{\"1178\":1}}],[\"进入阻塞状态\",{\"1\":{\"1060\":1}}],[\"进入正常解锁流程\",{\"1\":{\"1154\":1}}],[\"进入runtime\",{\"1\":{\"1153\":2}}],[\"进入lockslow自旋流程等待锁\",{\"1\":{\"1153\":1}}],[\"进入系统调用\",{\"1\":{\"1106\":1}}],[\"进入调度循环寻找其它可用的\",{\"1\":{\"1097\":1}}],[\"进入了善后工作\",{\"1\":{\"606\":1}}],[\"进入对应的页面后\",{\"1\":{\"503\":1}}],[\"进入引导模式\",{\"1\":{\"141\":1}}],[\"进度条\",{\"1\":{\"64\":1}}],[\"进行绑定\",{\"1\":{\"1097\":1}}],[\"进行绑定从而继续执行任务\",{\"1\":{\"1093\":1}}],[\"进行新一轮调度\",{\"1\":{\"1096\":1}}],[\"进行关联\",{\"1\":{\"1089\":1,\"1097\":1}}],[\"进行预初始化\",{\"1\":{\"1089\":1}}],[\"进行的就是等量扩容\",{\"1\":{\"1043\":1}}],[\"进行扩容的\",{\"1\":{\"1041\":1}}],[\"进行遍历\",{\"1\":{\"1037\":1}}],[\"进行对数据库进行增删改查了\",{\"1\":{\"903\":1}}],[\"进行对比\",{\"1\":{\"526\":1}}],[\"进行组合\",{\"1\":{\"823\":1}}],[\"进行交互\",{\"1\":{\"803\":1}}],[\"进行解析\",{\"1\":{\"785\":1}}],[\"进行值拷贝的同时\",{\"1\":{\"719\":1}}],[\"进行调用\",{\"1\":{\"545\":1}}],[\"进行管理的\",{\"1\":{\"536\":1}}],[\"进行项目管理时\",{\"1\":{\"507\":1}}],[\"进行包裹\",{\"1\":{\"328\":1}}],[\"进行\",{\"1\":{\"230\":1,\"387\":1,\"611\":1,\"615\":1,\"849\":1}}],[\"进行强大的分析\",{\"1\":{\"203\":1}}],[\"进行注册\",{\"1\":{\"145\":1}}],[\"进行了解\",{\"1\":{\"142\":1}}],[\"进行了改进\",{\"1\":{\"117\":1}}],[\"进行并发使用检测\",{\"1\":{\"131\":1}}],[\"进行编译\",{\"1\":{\"8\":1}}],[\"进行下载\",{\"1\":{\"7\":1}}],[\"进行校验\",{\"1\":{\"7\":1}}],[\"美观的\",{\"1\":{\"64\":1}}],[\"美元符号\",{\"1\":{\"40\":1}}],[\"单核系统自旋没有任何意义\",{\"1\":{\"1153\":2}}],[\"单纯的\",{\"1\":{\"1002\":1}}],[\"单纯的使用标签是没有任何意义的\",{\"1\":{\"351\":1}}],[\"单文件上传\",{\"0\":{\"984\":1}}],[\"单例\",{\"0\":{\"940\":1}}],[\"单表继承\",{\"1\":{\"849\":1}}],[\"单体\",{\"1\":{\"610\":1}}],[\"单元回收的工作是在内存分配前进行的\",{\"1\":{\"1148\":1}}],[\"单元回收\",{\"0\":{\"1148\":1}}],[\"单元的大小定义取决于开发者\",{\"1\":{\"521\":1}}],[\"单元测试就是对软件中的最小可测试单元进行测试\",{\"1\":{\"521\":1}}],[\"单元测试是testxxxx\",{\"1\":{\"517\":1}}],[\"单元测试\",{\"0\":{\"521\":1},\"1\":{\"516\":1}}],[\"单向管道通常是用来限制通道的行为\",{\"1\":{\"469\":1}}],[\"单向管道指的是只读或只写的管道\",{\"1\":{\"469\":1}}],[\"单向管道\",{\"0\":{\"469\":1}}],[\"单向流式\",{\"0\":{\"158\":1}}],[\"单引号转义\",{\"1\":{\"305\":1}}],[\"单个访问\",{\"1\":{\"258\":1}}],[\"单个设置\",{\"1\":{\"258\":1}}],[\"单节点搭建起来十分的简单\",{\"1\":{\"141\":1}}],[\"单节点\",{\"1\":{\"141\":1}}],[\"单机亿级全文检索引擎\",{\"1\":{\"62\":1}}],[\"单独分配一个\",{\"1\":{\"1089\":1}}],[\"单独禁用\",{\"1\":{\"37\":1}}],[\"单独启用可用使用如下的格式\",{\"1\":{\"37\":1}}],[\"操作本身不需要锁允许并发\",{\"1\":{\"1067\":1}}],[\"操作是计算得到旧桶的位置\",{\"1\":{\"1042\":1}}],[\"操作符\",{\"0\":{\"938\":1}}],[\"操作函数签名如下\",{\"1\":{\"490\":1}}],[\"操作完毕后就会解锁\",{\"1\":{\"490\":1}}],[\"操作\",{\"1\":{\"217\":1,\"230\":1,\"803\":1}}],[\"操作索引\",{\"1\":{\"206\":1}}],[\"操作访问超出限制范围\",{\"1\":{\"168\":1}}],[\"操作主流的数据库\",{\"1\":{\"96\":1}}],[\"操作库\",{\"1\":{\"62\":1}}],[\"操作系统用户包\",{\"1\":{\"616\":1}}],[\"操作系统命令包\",{\"1\":{\"616\":1}}],[\"操作系统信号包\",{\"1\":{\"616\":1}}],[\"操作系统进行交互的包\",{\"1\":{\"616\":1}}],[\"操作系统提供的系统调用包\",{\"1\":{\"616\":1}}],[\"操作系统作者之一\",{\"1\":{\"87\":1}}],[\"操作系统\",{\"1\":{\"40\":1}}],[\"qp\",{\"1\":{\"1059\":2,\"1060\":6,\"1067\":3}}],[\"qcoun和hchan\",{\"1\":{\"1057\":1}}],[\"qcount++\",{\"1\":{\"1059\":1,\"1067\":1}}],[\"qcount\",{\"1\":{\"1057\":2,\"1059\":1,\"1060\":3,\"1067\":3}}],[\"qxlw9nkfgzw3bluyxiofe4efp1iay61s8b2fe3eo86m\",{\"1\":{\"779\":1,\"782\":1,\"783\":1}}],[\"q\",{\"1\":{\"75\":1,\"341\":2,\"527\":15,\"577\":18,\"708\":4,\"710\":2,\"716\":4,\"1139\":4}}],[\"qiniu\",{\"1\":{\"62\":1}}],[\"qmgo\",{\"1\":{\"62\":2}}],[\"qux\",{\"1\":{\"1014\":1}}],[\"quantity\",{\"1\":{\"847\":2}}],[\"quantum\",{\"1\":{\"10\":2}}],[\"quotetoascii\",{\"1\":{\"696\":1}}],[\"quote\",{\"1\":{\"696\":1}}],[\"queuelifo\",{\"1\":{\"1153\":2}}],[\"queued\",{\"1\":{\"1140\":1}}],[\"queue\",{\"1\":{\"158\":10,\"159\":10,\"577\":7,\"1057\":2,\"1060\":3,\"1088\":2}}],[\"queryescape\",{\"1\":{\"986\":1}}],[\"querybinding\",{\"1\":{\"971\":1}}],[\"queryfields\",{\"1\":{\"852\":1}}],[\"query\",{\"1\":{\"21\":2,\"174\":1,\"181\":1,\"182\":1,\"187\":1,\"188\":1,\"190\":2,\"216\":2,\"234\":4,\"238\":2,\"513\":2,\"728\":2,\"874\":1,\"875\":3,\"878\":1,\"969\":1,\"971\":1,\"975\":1,\"1011\":4,\"1012\":2}}],[\"quicktemplate\",{\"1\":{\"60\":1}}],[\"quictemplate\",{\"1\":{\"60\":1}}],[\"quux\",{\"1\":{\"7\":2,\"296\":1}}],[\"微对象的大小由runtime\",{\"1\":{\"1124\":1}}],[\"微对象\",{\"0\":{\"1124\":1},\"1\":{\"1123\":1}}],[\"微调相关性\",{\"1\":{\"203\":1}}],[\"微秒\",{\"1\":{\"129\":2,\"649\":1,\"1082\":1,\"1130\":1}}],[\"微秒优化到了现在的\",{\"1\":{\"116\":1}}],[\"微服务项目我推荐参考该项目进行学习\",{\"1\":{\"610\":1}}],[\"微服务\",{\"1\":{\"96\":1}}],[\"微服务框架\",{\"0\":{\"53\":1},\"1\":{\"53\":1}}],[\"微软\",{\"1\":{\"62\":1}}],[\"纯\",{\"1\":{\"62\":2}}],[\"驱动对应的方法都也差不多会了\",{\"1\":{\"244\":1}}],[\"驱动几乎将所有的操作封装好了\",{\"1\":{\"244\":1}}],[\"驱动内部维护着一个连接池\",{\"1\":{\"244\":1}}],[\"驱动名称就是注册驱动时使用的名称\",{\"1\":{\"232\":1}}],[\"驱动库会自行将\",{\"1\":{\"851\":1}}],[\"驱动库\",{\"1\":{\"231\":1}}],[\"驱动库已经完全足够使用了\",{\"1\":{\"219\":1}}],[\"驱动可以是你自己写的\",{\"1\":{\"231\":1}}],[\"驱动操作\",{\"1\":{\"218\":1}}],[\"驱动\",{\"0\":{\"62\":1,\"219\":1},\"1\":{\"62\":8,\"222\":1,\"851\":1}}],[\"泛型的加入会导致编译器的工作量增加\",{\"1\":{\"579\":1}}],[\"泛型接口\",{\"1\":{\"575\":1}}],[\"泛型要解决的问题是类型无关的\",{\"1\":{\"573\":1}}],[\"泛型类型无法使用类型断言\",{\"1\":{\"573\":1}}],[\"泛型形参\",{\"1\":{\"573\":1}}],[\"泛型不能作为一个类型的基本类型\",{\"1\":{\"573\":1}}],[\"泛型结构注意点\",{\"0\":{\"573\":1}}],[\"泛型结构\",{\"0\":{\"572\":1}}],[\"泛型是为了解决执行逻辑与类型无关的问题\",{\"1\":{\"571\":1}}],[\"泛型\",{\"0\":{\"570\":1},\"1\":{\"61\":1,\"88\":2}}],[\"顾名思义\",{\"1\":{\"60\":1,\"475\":1,\"484\":1,\"957\":1,\"1016\":1}}],[\"类\",{\"1\":{\"88\":1}}],[\"类似如下的代码\",{\"1\":{\"1020\":1}}],[\"类似下面的代码\",{\"1\":{\"1019\":1}}],[\"类似实现的库有jmattheis\",{\"1\":{\"810\":1}}],[\"类似的\",{\"1\":{\"471\":1}}],[\"类似数组切片的拷贝方式\",{\"1\":{\"378\":1}}],[\"类似于下面这种结构\",{\"1\":{\"1030\":1}}],[\"类似于防火墙规则\",{\"1\":{\"758\":1}}],[\"类似于\",{\"1\":{\"118\":1}}],[\"类似\",{\"1\":{\"69\":1,\"142\":1,\"160\":1,\"1063\":1}}],[\"类比\",{\"1\":{\"59\":1,\"82\":1}}],[\"类型和值\",{\"1\":{\"1070\":1}}],[\"类型和描述\",{\"1\":{\"316\":1,\"317\":1}}],[\"类型验证函数是专门针对某一类型的\",{\"1\":{\"950\":1}}],[\"类型重复\",{\"0\":{\"830\":1}}],[\"类型的值用于验证\",{\"1\":{\"777\":1}}],[\"类型的变量\",{\"1\":{\"567\":1}}],[\"类型是一个适配器\",{\"1\":{\"645\":1}}],[\"类型判断\",{\"0\":{\"597\":1}}],[\"类型断言语句有两个返回值\",{\"1\":{\"596\":1}}],[\"类型断言通常用于判断某一接口类型的变量是否属于某一个类型\",{\"1\":{\"596\":1}}],[\"类型断言\",{\"0\":{\"596\":1},\"1\":{\"603\":1,\"784\":1}}],[\"类型别名对于一些特别复杂的类型有很大的用处\",{\"1\":{\"594\":1}}],[\"类型别名仅仅只是一个别名\",{\"1\":{\"594\":1}}],[\"类型别名与类型声明则不同\",{\"1\":{\"594\":1}}],[\"类型别名\",{\"0\":{\"594\":1}}],[\"类型声明\",{\"0\":{\"593\":1}}],[\"类型在后面的原则\",{\"1\":{\"592\":1}}],[\"类型后置在可读性上要好得多\",{\"1\":{\"592\":1}}],[\"类型后置\",{\"0\":{\"592\":1}}],[\"类型并集中不能有交集\",{\"1\":{\"575\":1}}],[\"类型实参\",{\"1\":{\"571\":1}}],[\"类型约束为t\",{\"1\":{\"572\":1}}],[\"类型约束为int\",{\"1\":{\"572\":1}}],[\"类型约束\",{\"1\":{\"571\":1}}],[\"类型形参\",{\"1\":{\"571\":1}}],[\"类型number的底层类型是int\",{\"1\":{\"567\":1}}],[\"类型集不能直接或间接的并入自身\",{\"1\":{\"575\":1}}],[\"类型集中的交集问题\",{\"1\":{\"575\":1}}],[\"类型集中的一个元素\",{\"1\":{\"563\":1}}],[\"类型集无法当作类型实参使用\",{\"1\":{\"575\":1}}],[\"类型集注意点\",{\"0\":{\"575\":1}}],[\"类型集主要用于类型约束\",{\"1\":{\"574\":1}}],[\"类型集\",{\"0\":{\"574\":1}}],[\"类型集就是一组类型的集合\",{\"1\":{\"563\":1}}],[\"类型集的一个子集\",{\"1\":{\"563\":1}}],[\"类型集接口\",{\"1\":{\"119\":1}}],[\"类型转换等等工具库\",{\"1\":{\"924\":1}}],[\"类型转换的结果也不总是正确的\",{\"1\":{\"595\":1}}],[\"类型转换的另一个前提是\",{\"1\":{\"595\":1}}],[\"类型转换适用的前提是知晓被转换变量的类型和要转换成的目标类型\",{\"1\":{\"595\":1}}],[\"类型转换\",{\"0\":{\"534\":1,\"595\":1}}],[\"类型支持\",{\"0\":{\"528\":1}}],[\"类型变量\",{\"1\":{\"430\":1}}],[\"类型变量转换成反射对象\",{\"1\":{\"430\":1}}],[\"类型系统与反射的桥梁\",{\"1\":{\"429\":1}}],[\"类型哈希\",{\"1\":{\"428\":1}}],[\"类型位的掩码\",{\"1\":{\"416\":1}}],[\"类型不匹配\",{\"1\":{\"341\":1}}],[\"类型不安全\",{\"1\":{\"326\":1}}],[\"类型必须保持一致\",{\"1\":{\"329\":1}}],[\"类型名\",{\"1\":{\"328\":1,\"448\":1}}],[\"类型允许您将消息作为嵌入类型使用\",{\"1\":{\"194\":1}}],[\"类型格式如下\",{\"1\":{\"186\":1}}],[\"类型修饰只能出现在message中\",{\"1\":{\"183\":1}}],[\"类型完成流式传输\",{\"1\":{\"158\":1}}],[\"类型为\",{\"1\":{\"158\":1}}],[\"类型为字符串\",{\"1\":{\"158\":1}}],[\"类型满天飞\",{\"1\":{\"88\":1}}],[\"类型\",{\"0\":{\"183\":1,\"431\":1,\"488\":1,\"590\":1,\"632\":1},\"1\":{\"4\":1,\"106\":1,\"107\":1,\"108\":1,\"112\":1,\"174\":1,\"194\":1,\"314\":1,\"315\":1,\"317\":1,\"318\":1,\"319\":1,\"320\":1,\"321\":1,\"364\":1,\"428\":1,\"568\":2,\"596\":1,\"839\":1,\"1123\":1}}],[\"像图中这种比较极端的情况\",{\"1\":{\"1042\":1}}],[\"像这种迭代器的闭包代码多了以后\",{\"1\":{\"589\":1}}],[\"像这种代码就无法通过编译\",{\"1\":{\"114\":1}}],[\"像其他的几个关键字break\",{\"1\":{\"582\":1}}],[\"像上述的例子肯定是无法正常进行的\",{\"1\":{\"523\":1}}],[\"像下面的代码就无法通过编译\",{\"1\":{\"395\":1}}],[\"像下面这样的代码是无法通过编译的\",{\"1\":{\"332\":1}}],[\"像下面这样\",{\"1\":{\"307\":1,\"309\":1,\"312\":1}}],[\"像一些比较高级的操作比如cluster\",{\"1\":{\"217\":1}}],[\"像是if\",{\"1\":{\"96\":1}}],[\"像\",{\"1\":{\"58\":1,\"862\":1}}],[\"像平时一样使用go\",{\"1\":{\"11\":1}}],[\"谷歌还预定义了其它非常多的类型\",{\"1\":{\"194\":1}}],[\"谷歌官方给出的回答是\",{\"1\":{\"188\":1}}],[\"谷歌开源仓库\",{\"1\":{\"88\":1}}],[\"谷歌开源的依赖注入库\",{\"1\":{\"67\":1}}],[\"谷歌开源的用于比较值的库\",{\"1\":{\"57\":1}}],[\"谷歌公司于\",{\"1\":{\"87\":1}}],[\"谷歌实现的\",{\"1\":{\"58\":1}}],[\"常常会会需要对字段进行一些自增或者自减等与自身进行运算的操作\",{\"1\":{\"887\":1}}],[\"常用参数\",{\"0\":{\"519\":1}}],[\"常用命令\",{\"0\":{\"506\":1}}],[\"常用的并发控制方法有三种\",{\"1\":{\"462\":1}}],[\"常见的两种打开文件的方式是使用os包提供的两个函数\",{\"1\":{\"416\":1}}],[\"常见数据结构的实现\",{\"1\":{\"58\":2}}],[\"常量在声明时就必须初始化一个值\",{\"1\":{\"324\":1}}],[\"常量的声明需要用到const关键字\",{\"1\":{\"324\":1}}],[\"常量的值无法被修改\",{\"1\":{\"323\":1}}],[\"常量的值无法在运行时改变\",{\"1\":{\"323\":1}}],[\"常量只能是基本数据类型\",{\"1\":{\"323\":1}}],[\"常量表达式即表达式的最终结果是一个常量\",{\"1\":{\"360\":1}}],[\"常量表达式\",{\"1\":{\"323\":1,\"324\":1,\"360\":2}}],[\"常量myname就是公开的\",{\"1\":{\"294\":1}}],[\"常量\",{\"0\":{\"323\":1},\"1\":{\"4\":1,\"293\":1,\"294\":3,\"295\":1,\"355\":1,\"360\":1,\"649\":1}}],[\"验证两次输入的密码是否相等\",{\"1\":{\"946\":1}}],[\"验证字符串切片\",{\"1\":{\"944\":1}}],[\"验证字段的时候想要匹配操作符的话\",{\"1\":{\"938\":1}}],[\"验证字段的值不是以参数中指定的文本开始\",{\"1\":{\"933\":1}}],[\"验证字段的值不包含参数中指定的字符\",{\"1\":{\"933\":1}}],[\"验证字段的值不包含参数中指定的任何字符\",{\"1\":{\"933\":1}}],[\"验证字段的值不包含参数中指定的文本\",{\"1\":{\"933\":1}}],[\"验证字段的值不以参数中指定的文本结束\",{\"1\":{\"933\":1}}],[\"验证字段的值以参数中指定的文本结束\",{\"1\":{\"933\":1}}],[\"验证字段的值是否为任何版本的有效\",{\"1\":{\"934\":1}}],[\"验证字段的值是否为有效的以太坊地址\",{\"1\":{\"934\":1}}],[\"验证字段的值是否为有效的\",{\"1\":{\"933\":1,\"934\":12}}],[\"验证字段的值是否是任的有效\",{\"1\":{\"934\":1}}],[\"验证字段的值是否是任何版本的有效\",{\"1\":{\"934\":1}}],[\"验证字段的值是否是有效的\",{\"1\":{\"934\":9}}],[\"验证字段的值是否是有效的纬度坐标\",{\"1\":{\"934\":2}}],[\"验证字段的值是否是有效的可打印\",{\"1\":{\"933\":1}}],[\"验证字段的值是否以参数中指定的文本开始\",{\"1\":{\"933\":1}}],[\"验证字段的值是否具有多字节字符\",{\"1\":{\"933\":1}}],[\"验证字段的值是否包含参数中指定的符文\",{\"1\":{\"933\":1}}],[\"验证字段的值是否包含参数中指定的任何字符\",{\"1\":{\"933\":1}}],[\"验证字段的值是否包含参数中指定的文本\",{\"1\":{\"933\":1}}],[\"验证\",{\"0\":{\"943\":1},\"1\":{\"963\":1}}],[\"验证每个arr\",{\"1\":{\"936\":1}}],[\"验证该字段的值是否是有效的\",{\"1\":{\"934\":1}}],[\"验证当前字段的值不等于由参数的值指定的单独结构中的字段\",{\"1\":{\"931\":1}}],[\"验证当前字段的值是否是默认静态值\",{\"1\":{\"936\":1}}],[\"验证当前字段的值是否是有效的时区字符串\",{\"1\":{\"934\":1}}],[\"验证当前字段的值是否是有效的时间日期字符串\",{\"1\":{\"934\":1}}],[\"验证当前字段的值是否是有效的\",{\"1\":{\"934\":7}}],[\"验证当前字段的值是否是有效的十六进制颜色\",{\"1\":{\"934\":1}}],[\"验证当前字段的值是否是有效的电子邮件地址\",{\"1\":{\"934\":1}}],[\"验证当前字段的值是否是有效的信用卡号\",{\"1\":{\"934\":1}}],[\"验证当前字段的值是否是有效的数值\",{\"1\":{\"933\":1}}],[\"验证当前字段的值是否是有效的字母数字\",{\"1\":{\"933\":2}}],[\"验证当前字段的值是否是有效的字母\",{\"1\":{\"933\":2}}],[\"验证当前字段的值是否为语义版本\",{\"1\":{\"934\":1}}],[\"验证当前字段的值是否为\",{\"1\":{\"934\":2}}],[\"验证当前字段的值是否为大写字符串\",{\"1\":{\"933\":1}}],[\"验证当前字段的值是否为有效的货币代码\",{\"1\":{\"934\":1}}],[\"验证当前字段的值是否为有效的国家地区代码\",{\"1\":{\"934\":1}}],[\"验证当前字段的值是否为有效的十六进制\",{\"1\":{\"934\":1}}],[\"验证当前字段的值是否为有效的\",{\"1\":{\"934\":5}}],[\"验证当前字段的值是否为有效的布尔值或是否可以安全地转换为布尔值\",{\"1\":{\"933\":1}}],[\"验证当前字段的值是否为有效数字\",{\"1\":{\"933\":1}}],[\"验证当前字段的值是否为小写字符串\",{\"1\":{\"933\":1}}],[\"验证当前字段的值是否不等于参数值指定的字段\",{\"1\":{\"931\":1}}],[\"验证当前字段的值是否不包含由参数值指定的字段\",{\"1\":{\"931\":1}}],[\"验证当前字段的值是否小于由参数值指定的字段\",{\"1\":{\"931\":1}}],[\"验证当前字段的值是否小于由参数的值指定的字段\",{\"1\":{\"931\":1}}],[\"验证当前字段的值是否小于或等于由参数值指定的字段\",{\"1\":{\"931\":1}}],[\"验证当前字段的值是否小于等于由参数的值指定的字段\",{\"1\":{\"931\":1}}],[\"验证当前字段的值是否大于由参数值指定的字段\",{\"1\":{\"931\":1}}],[\"验证当前字段的值是否大于由参数的值指定的字段\",{\"1\":{\"931\":1}}],[\"验证当前字段的值是否大于或等于由参数值指定的字段\",{\"1\":{\"931\":1}}],[\"验证当前字段的值是否大于或等于由参数的值指定的字段\",{\"1\":{\"931\":1}}],[\"验证当前字段的值是否包含由参数值指定的字段\",{\"1\":{\"931\":1}}],[\"验证当前字段的值是否等于参数值指定的字段\",{\"1\":{\"931\":1}}],[\"验证当前字段的值是否等于由\",{\"1\":{\"931\":1}}],[\"验证器默认的语言是英文\",{\"1\":{\"952\":1}}],[\"验证器的结构体\",{\"1\":{\"930\":1}}],[\"验证器有着非常多的基础验证标签\",{\"1\":{\"930\":1}}],[\"验证签名算法是否匹配\",{\"1\":{\"782\":1,\"783\":1}}],[\"验证的字段可以不存在或者为空\",{\"1\":{\"936\":6}}],[\"验证的字段必须存在且不为空\",{\"1\":{\"936\":6}}],[\"验证的\",{\"1\":{\"778\":1}}],[\"验证项目的依赖合法性\",{\"1\":{\"506\":1}}],[\"验证对应哈希值的脚本是否存在\",{\"1\":{\"283\":1}}],[\"验证邮箱是否有效\",{\"1\":{\"71\":1}}],[\"验证库\",{\"1\":{\"57\":1}}],[\"验证本地的依赖\",{\"1\":{\"22\":1}}],[\"字母数字国家代码\",{\"1\":{\"934\":1}}],[\"字母t\",{\"1\":{\"377\":1}}],[\"字长为\",{\"1\":{\"750\":1}}],[\"字面意义上\",{\"1\":{\"300\":1}}],[\"字面量函数的类型没有名称\",{\"1\":{\"445\":1}}],[\"字面量\",{\"0\":{\"300\":1,\"374\":1},\"1\":{\"300\":1,\"323\":1,\"324\":3,\"355\":1}}],[\"字面量的键时\",{\"1\":{\"132\":1}}],[\"字段表示锁的状态\",{\"1\":{\"1151\":1}}],[\"字段释义如下\",{\"1\":{\"1151\":1,\"1176\":1}}],[\"字段验证的参数不再是基本类型\",{\"1\":{\"946\":1}}],[\"字段验证\",{\"0\":{\"946\":1}}],[\"字段长度\",{\"1\":{\"936\":1}}],[\"字段必须是对外暴露的\",{\"1\":{\"617\":1}}],[\"字段值是否全部相等\",{\"1\":{\"568\":1}}],[\"字段重命名\",{\"0\":{\"626\":1}}],[\"字段重置后释放对象到池中\",{\"1\":{\"485\":1}}],[\"字段重复\",{\"1\":{\"187\":1}}],[\"字段的使用主要取决于\",{\"1\":{\"778\":1}}],[\"字段的字节偏移\",{\"1\":{\"448\":1}}],[\"字段的原因\",{\"1\":{\"167\":1}}],[\"字段名称\",{\"1\":{\"448\":1}}],[\"字段名不能与方法名重复\",{\"1\":{\"404\":1}}],[\"字段类型都是可比较类型的结构体\",{\"1\":{\"332\":1}}],[\"字段\",{\"0\":{\"187\":1,\"931\":1},\"1\":{\"168\":1,\"169\":1,\"862\":2}}],[\"字段不同\",{\"1\":{\"144\":1}}],[\"字符是尤其如此\",{\"1\":{\"1052\":1}}],[\"字符转通过\",{\"1\":{\"696\":1}}],[\"字符设备\",{\"1\":{\"416\":1}}],[\"字符集的范围位于\",{\"1\":{\"380\":1}}],[\"字符结果就不同了\",{\"1\":{\"380\":1}}],[\"字符类型\",{\"0\":{\"319\":1}}],[\"字符字面量必须使用单引号括起来\",{\"1\":{\"304\":1}}],[\"字符字面量\",{\"0\":{\"304\":1}}],[\"字符串同样也会发生变化\",{\"1\":{\"1054\":1}}],[\"字符串本身是不可以修改的\",{\"1\":{\"1054\":1}}],[\"字符串本质上是一个不可变的只读的字节数组\",{\"1\":{\"373\":1}}],[\"字符串其本质上就是一片连续的内存地址\",{\"1\":{\"1052\":1}}],[\"字符串在运行时由runtime\",{\"1\":{\"1052\":1}}],[\"字符串在转换浮点数时\",{\"1\":{\"698\":1}}],[\"字符串赋值\",{\"1\":{\"727\":1}}],[\"字符串中的\",{\"1\":{\"723\":1}}],[\"字符串追加数据\",{\"0\":{\"701\":1}}],[\"字符串转复数\",{\"0\":{\"699\":1}}],[\"字符串转浮点数\",{\"0\":{\"697\":1}}],[\"字符串转布尔值\",{\"0\":{\"694\":1}}],[\"字符串转整型\",{\"0\":{\"692\":1}}],[\"字符串转换包\",{\"1\":{\"616\":1}}],[\"字符串排序\",{\"0\":{\"686\":1}}],[\"字符串操作包\",{\"1\":{\"616\":1}}],[\"字符串是明确支持\",{\"1\":{\"380\":1}}],[\"字符串拷贝其实是字节切片拷贝\",{\"1\":{\"378\":1}}],[\"字符串的拼接语法如下所示\",{\"1\":{\"1053\":1}}],[\"字符串的拼接使用+操作符\",{\"1\":{\"379\":1}}],[\"字符串的字节数\",{\"1\":{\"1052\":1}}],[\"字符串的长度\",{\"1\":{\"377\":1}}],[\"字符串的内容是只读的不可变的\",{\"1\":{\"376\":1}}],[\"字符串可以转换为字节切片\",{\"1\":{\"376\":1}}],[\"字符串表现形式需要自己实现\",{\"1\":{\"326\":1}}],[\"字符串类型的变量\",{\"1\":{\"329\":1}}],[\"字符串类型\",{\"1\":{\"321\":1,\"568\":1}}],[\"字符串即字节序列\",{\"1\":{\"319\":1}}],[\"字符串字面量都存储在只读数据段\",{\"1\":{\"1054\":1}}],[\"字符串字面量必须使用双引号\",{\"1\":{\"306\":1}}],[\"字符串字面量\",{\"0\":{\"306\":1}}],[\"字符串\",{\"0\":{\"253\":1,\"373\":1,\"536\":1,\"696\":1,\"719\":1,\"720\":1,\"721\":1,\"933\":1},\"1\":{\"332\":1,\"355\":1,\"527\":1,\"536\":1,\"580\":1,\"696\":1,\"719\":1,\"809\":1,\"934\":4}}],[\"字符\",{\"1\":{\"137\":1,\"160\":1,\"319\":2,\"380\":1,\"702\":1,\"933\":2}}],[\"字节切片在语法上也可以很轻易的转换成字符串\",{\"1\":{\"1054\":1}}],[\"字节切片b是为了方便修改字符串\",{\"1\":{\"1053\":1}}],[\"字节切片操作包\",{\"1\":{\"616\":1}}],[\"字节\",{\"1\":{\"410\":2}}],[\"字节缓存池\",{\"1\":{\"82\":1}}],[\"字节开源的高性能\",{\"1\":{\"63\":1}}],[\"字节开源\",{\"1\":{\"51\":1,\"53\":1}}],[\"字包装和字符串宽度计算\",{\"1\":{\"56\":1}}],[\"汉字转拼音\",{\"1\":{\"56\":1}}],[\"数值计算溢出\",{\"1\":{\"1053\":1}}],[\"数值溢出或者超出了最大分配内存\",{\"1\":{\"1034\":1}}],[\"数值溢出了\",{\"1\":{\"1025\":1}}],[\"数目不多\",{\"1\":{\"849\":1}}],[\"数组判断搬迁状态\",{\"1\":{\"1042\":1}}],[\"数组一个个对比\",{\"1\":{\"1036\":1}}],[\"数组是一个长度固定的数据结构\",{\"1\":{\"1025\":1}}],[\"数组是定长的数据结构\",{\"1\":{\"358\":1}}],[\"数组的大小固定为136\",{\"1\":{\"1116\":1}}],[\"数组的一维是1\",{\"1\":{\"1115\":1}}],[\"数组的元素都置为emptyrest\",{\"1\":{\"1040\":1}}],[\"数组的值\",{\"1\":{\"1039\":1}}],[\"数组的全部元素是否相等\",{\"1\":{\"568\":1}}],[\"数组的容量等于数组长度\",{\"1\":{\"361\":1}}],[\"数组类型\",{\"1\":{\"568\":1}}],[\"数组中的每一个元素都完全相等\",{\"1\":{\"460\":1}}],[\"数组在初始化时\",{\"1\":{\"370\":1}}],[\"数组在切割后\",{\"1\":{\"362\":1}}],[\"数组在声明是长度只能是一个常量\",{\"1\":{\"360\":1}}],[\"数组作为值类型\",{\"1\":{\"359\":1}}],[\"数组和切片两者看起来长得几乎一模一样\",{\"1\":{\"358\":1}}],[\"数组等\",{\"1\":{\"323\":1}}],[\"数组\",{\"0\":{\"185\":1,\"359\":1},\"1\":{\"320\":1,\"321\":1,\"433\":1,\"460\":1,\"539\":1,\"580\":1,\"927\":1,\"1013\":1,\"1036\":1,\"1039\":1,\"1042\":1}}],[\"数字类型\",{\"1\":{\"321\":1,\"568\":1}}],[\"数字增减\",{\"0\":{\"256\":1}}],[\"数字\",{\"1\":{\"160\":1,\"298\":1,\"332\":1,\"341\":6}}],[\"数学常量\",{\"0\":{\"653\":1}}],[\"数学操作包\",{\"1\":{\"616\":1}}],[\"数学表达式解析计算引擎库\",{\"1\":{\"59\":1}}],[\"数学计算\",{\"0\":{\"59\":1}}],[\"数据读取操作也早在被唤醒前由发送方通过runtime\",{\"1\":{\"1067\":1}}],[\"数据分布十分不均匀\",{\"1\":{\"1043\":1}}],[\"数据全都被写入新数组中了\",{\"1\":{\"1019\":1}}],[\"数据不仅没有添加到源切片s\",{\"1\":{\"1019\":1}}],[\"数据不会被其他协程修改\",{\"1\":{\"479\":1}}],[\"数据缓存等等功能都交给开发者自行完成\",{\"1\":{\"1008\":1}}],[\"数据持久\",{\"1\":{\"1002\":1}}],[\"数据为\",{\"1\":{\"979\":1}}],[\"数据响应是接口处理中最后一步要做的事情\",{\"1\":{\"978\":1}}],[\"数据响应\",{\"0\":{\"978\":1}}],[\"数据校验\",{\"0\":{\"976\":1}}],[\"数据绑定\",{\"0\":{\"972\":1,\"974\":1}}],[\"数据解析\",{\"0\":{\"971\":1}}],[\"数据统一资源定位符\",{\"1\":{\"932\":1}}],[\"数据存储等等\",{\"1\":{\"618\":1}}],[\"数据存放目录\",{\"1\":{\"141\":1}}],[\"数据交换\",{\"1\":{\"617\":3,\"618\":1}}],[\"数据流处理\",{\"1\":{\"582\":1}}],[\"数据采集\",{\"1\":{\"557\":1}}],[\"数据采集的方式有两种\",{\"1\":{\"555\":1}}],[\"数据需要单独使用\",{\"1\":{\"556\":1}}],[\"数据类型组成\",{\"1\":{\"1013\":1}}],[\"数据类型有\",{\"1\":{\"1012\":1}}],[\"数据类型\",{\"0\":{\"314\":1},\"1\":{\"428\":1}}],[\"数据是静态的就省略掉了服务注册这一环节\",{\"1\":{\"175\":1}}],[\"数据丢失\",{\"1\":{\"168\":1}}],[\"数据\",{\"1\":{\"144\":1,\"556\":1}}],[\"数据中心在\",{\"1\":{\"144\":1}}],[\"数据中心\",{\"1\":{\"142\":1,\"143\":2,\"144\":2}}],[\"数据同步到\",{\"1\":{\"62\":1}}],[\"数据库并通过网络发送\",{\"1\":{\"963\":1}}],[\"数据库开发需要一定的技术功底\",{\"1\":{\"614\":1}}],[\"数据库开发\",{\"0\":{\"614\":1}}],[\"数据库连接这类存入sync\",{\"1\":{\"485\":1}}],[\"数据库\",{\"0\":{\"62\":1},\"1\":{\"62\":2,\"96\":1,\"218\":1,\"223\":1,\"239\":2,\"614\":2,\"845\":1}}],[\"数据结构里面的那个图\",{\"1\":{\"849\":1}}],[\"数据结构除外\",{\"1\":{\"616\":1}}],[\"数据结构是泛型最常见的使用场景\",{\"1\":{\"576\":1}}],[\"数据结构\",{\"0\":{\"58\":1},\"1\":{\"617\":1}}],[\"数据验证器\",{\"1\":{\"57\":1}}],[\"数据验证\",{\"0\":{\"57\":1}}],[\"数据处理\",{\"0\":{\"56\":1}}],[\"数量之和加\",{\"1\":{\"1153\":1}}],[\"数量的最大值也就是1\",{\"1\":{\"1067\":1}}],[\"数量为\",{\"1\":{\"1066\":1,\"1138\":1}}],[\"数量减一\",{\"1\":{\"1039\":1}}],[\"数量加一\",{\"1\":{\"1038\":1}}],[\"数量\",{\"1\":{\"38\":1,\"141\":1}}],[\"基准测试又称为性能测试\",{\"1\":{\"525\":1}}],[\"基准测试是benchmarkxxxx\",{\"1\":{\"517\":1}}],[\"基准测试\",{\"0\":{\"525\":1},\"1\":{\"516\":1,\"926\":1}}],[\"基本工作原理就是信号量\",{\"1\":{\"1176\":1}}],[\"基本都是大同小异\",{\"1\":{\"1010\":1}}],[\"基本校验\",{\"0\":{\"960\":1}}],[\"基本用法\",{\"0\":{\"955\":1}}],[\"基本数据类型如此\",{\"1\":{\"574\":1}}],[\"基本接口\",{\"0\":{\"564\":1},\"1\":{\"563\":1}}],[\"基本与cancelctx一致\",{\"1\":{\"478\":1}}],[\"基本语法\",{\"0\":{\"292\":1}}],[\"基本操作\",{\"0\":{\"245\":1}}],[\"基本上一个大对象就会占用一个mspan\",{\"1\":{\"1114\":1}}],[\"基本上不需要用户参与内存管理\",{\"1\":{\"1109\":1}}],[\"基本上和其他语言使用起来没有什么太大的差别\",{\"1\":{\"1011\":1}}],[\"基本上都是这三步\",{\"1\":{\"723\":1}}],[\"基本上都是选项式函数\",{\"1\":{\"205\":1}}],[\"基本上只要知道\",{\"1\":{\"244\":1}}],[\"基本上没有人会再使用\",{\"1\":{\"7\":1}}],[\"基本类型之类的\",{\"1\":{\"534\":1}}],[\"基本类型的封装\",{\"1\":{\"194\":1}}],[\"基本类型\",{\"0\":{\"184\":1,\"454\":1},\"1\":{\"1013\":1}}],[\"基本流程如图所示\",{\"1\":{\"172\":1}}],[\"基础操作差不多就是这些\",{\"1\":{\"217\":1}}],[\"基础\",{\"1\":{\"147\":1,\"218\":1}}],[\"基金会下一个的开源项目\",{\"1\":{\"146\":1}}],[\"基于信号的抢占式调度目前只有有两个入口\",{\"1\":{\"1107\":1}}],[\"基于角色的优先级\",{\"1\":{\"763\":1}}],[\"基于角色的访问控制\",{\"1\":{\"758\":1,\"765\":1}}],[\"基于属性的访问控制\",{\"1\":{\"758\":1}}],[\"基于它进行命令行开发的项目非常多\",{\"1\":{\"615\":1}}],[\"基于操作系统调用的文件锁\",{\"1\":{\"74\":1}}],[\"基于代码生成\",{\"1\":{\"67\":1}}],[\"基于反射实现\",{\"1\":{\"849\":1}}],[\"基于反射\",{\"1\":{\"67\":1}}],[\"基于\",{\"1\":{\"62\":3,\"70\":1,\"72\":1,\"147\":1,\"614\":2,\"963\":1,\"1003\":1,\"1004\":1}}],[\"基于规则的数据校验库\",{\"1\":{\"57\":1}}],[\"基于内存的哈希值不应该被持久化保存\",{\"1\":{\"1033\":1}}],[\"基于内存的高效率的大\",{\"1\":{\"61\":1}}],[\"基于内存的缓存\",{\"1\":{\"61\":2}}],[\"基于内存的\",{\"1\":{\"55\":1}}],[\"现如今\",{\"1\":{\"1133\":1}}],[\"现如今的泛型就是这两者之间妥协后的产物\",{\"1\":{\"579\":1}}],[\"现有类型\",{\"1\":{\"751\":1}}],[\"现有一个函数参数是map\",{\"1\":{\"594\":1}}],[\"现有如下的结构体\",{\"1\":{\"866\":1}}],[\"现有如下切片\",{\"1\":{\"367\":1}}],[\"现有如下源代码\",{\"1\":{\"37\":1}}],[\"现有切片如下\",{\"1\":{\"366\":1}}],[\"现实中两个数据中心可能是异地的服务器集群\",{\"1\":{\"144\":1}}],[\"现在就来看看这部分干了什么\",{\"1\":{\"1106\":1}}],[\"现在推荐使用unsafe\",{\"1\":{\"1052\":1}}],[\"现在确定了桶的位置\",{\"1\":{\"1038\":1}}],[\"现在这段代码会被cmd\",{\"1\":{\"1027\":1}}],[\"现在解析的都是简单的\",{\"1\":{\"620\":1}}],[\"现在\",{\"1\":{\"533\":1}}],[\"现在进行编译的话\",{\"1\":{\"532\":1}}],[\"现在有待测试文件\",{\"1\":{\"518\":1}}],[\"现在的\",{\"1\":{\"1130\":1}}],[\"现在的话只是负责重置协程的栈空间\",{\"1\":{\"1095\":1}}],[\"现在的输出已经是正常的顺序了\",{\"1\":{\"462\":1}}],[\"现在的接收者就是一个指针接收者\",{\"1\":{\"414\":1}}],[\"现在的官网域名是go\",{\"1\":{\"87\":1}}],[\"现在得到的结果就是正常的\",{\"1\":{\"371\":1}}],[\"现在经过修改后有了更加明确的语义\",{\"1\":{\"168\":1}}],[\"现在全部由\",{\"1\":{\"133\":1}}],[\"现在可以使用min函数比较最小值\",{\"1\":{\"332\":1}}],[\"现在可以并发的格式化源文件\",{\"1\":{\"119\":1}}],[\"现在可以直接这么写\",{\"1\":{\"117\":1}}],[\"现代企业级\",{\"1\":{\"83\":1}}],[\"现代命令行程序构建脚手架\",{\"1\":{\"64\":1}}],[\"现代化的测试框架\",{\"1\":{\"55\":1}}],[\"分两种情况来解读\",{\"1\":{\"1143\":1}}],[\"分两次执行基准测试\",{\"1\":{\"526\":1}}],[\"分代回收在\",{\"1\":{\"1130\":1}}],[\"分代回收\",{\"1\":{\"1130\":2}}],[\"分段栈\",{\"0\":{\"1103\":1}}],[\"分成了四种情况来进行优化\",{\"1\":{\"1065\":1}}],[\"分布的越均匀\",{\"1\":{\"1042\":1}}],[\"分布式键值数据库\",{\"1\":{\"614\":1}}],[\"分布式\",{\"1\":{\"172\":1,\"239\":1,\"614\":1}}],[\"分布式锁\",{\"1\":{\"53\":1}}],[\"分区情况\",{\"0\":{\"915\":1}}],[\"分组使用\",{\"1\":{\"875\":1}}],[\"分割文件的大小\",{\"1\":{\"841\":1}}],[\"分割字符串\",{\"0\":{\"710\":1}}],[\"分\",{\"1\":{\"739\":1}}],[\"分隔符来访问嵌套配置\",{\"1\":{\"795\":1}}],[\"分隔符进行访问\",{\"1\":{\"791\":1}}],[\"分隔的字符串\",{\"1\":{\"774\":1}}],[\"分隔成包含\",{\"1\":{\"716\":2}}],[\"分隔成一个字符串切片\",{\"1\":{\"716\":2}}],[\"分隔字符串\",{\"0\":{\"716\":1}}],[\"分配多少内存就进行多少标记工作\",{\"1\":{\"1139\":1}}],[\"分配mspan\",{\"1\":{\"1118\":1}}],[\"分配器\",{\"0\":{\"1110\":1}}],[\"分配的用于信号处理的栈空间\",{\"1\":{\"1087\":1}}],[\"分配\",{\"0\":{\"1074\":1,\"1100\":1,\"1120\":1},\"1\":{\"1089\":1}}],[\"分配新的栈空间\",{\"1\":{\"1101\":1}}],[\"分配新的defer结构\",{\"1\":{\"1073\":1}}],[\"分配新的空闲溢出桶\",{\"1\":{\"1040\":1}}],[\"分配新的底层数组\",{\"1\":{\"371\":1}}],[\"分配到桶中\",{\"1\":{\"1038\":1}}],[\"分配好的哈希桶\",{\"1\":{\"1034\":1}}],[\"分配内存时不需要持有锁\",{\"1\":{\"1125\":1}}],[\"分配内存的代码如下\",{\"1\":{\"1053\":1}}],[\"分配内存空间\",{\"1\":{\"1020\":1}}],[\"分配内存\",{\"1\":{\"543\":1,\"1025\":1,\"1038\":1}}],[\"分钟后\",{\"1\":{\"478\":1}}],[\"分钟\",{\"1\":{\"242\":2,\"1132\":1}}],[\"分析导致创建新\",{\"1\":{\"557\":1}}],[\"分析结果\",{\"1\":{\"554\":1}}],[\"分析\",{\"0\":{\"209\":1,\"558\":1},\"1\":{\"557\":1}}],[\"分号后面的就是对应生成文件的包名\",{\"1\":{\"198\":1}}],[\"分号前面的是代码生成后其它源文件的导入路径\",{\"1\":{\"198\":1}}],[\"分别获取高32位和低32位\",{\"1\":{\"1177\":1}}],[\"分别对应了\",{\"1\":{\"1149\":1}}],[\"分别引用了dad和mom两个结构体的主键\",{\"1\":{\"860\":1}}],[\"分别用于获取\",{\"1\":{\"908\":1}}],[\"分别用\",{\"1\":{\"547\":1}}],[\"分别如下\",{\"1\":{\"430\":1,\"1045\":1}}],[\"分别如下所示\",{\"1\":{\"168\":1}}],[\"分别有reflect\",{\"1\":{\"429\":1}}],[\"分别是系统监控和\",{\"1\":{\"1107\":1}}],[\"分别是runtime\",{\"1\":{\"1036\":1}}],[\"分别是registertranslationsfunc负责注册对应\",{\"1\":{\"952\":1}}],[\"分别是reflect\",{\"1\":{\"429\":1}}],[\"分别是耗时\",{\"1\":{\"526\":1}}],[\"分别是auth\",{\"1\":{\"513\":1}}],[\"分别是withdeadline和withtimeout\",{\"1\":{\"478\":1}}],[\"分别是os\",{\"1\":{\"418\":1}}],[\"分别是os包下的readfile函数\",{\"1\":{\"417\":1}}],[\"分别是类型与初始容量\",{\"1\":{\"382\":1}}],[\"分别是\",{\"1\":{\"335\":1,\"473\":1,\"751\":1}}],[\"分别在不同的位置\",{\"1\":{\"145\":1}}],[\"分为两种情况\",{\"1\":{\"1100\":1}}],[\"分为以下两种\",{\"1\":{\"1041\":1}}],[\"分为json和console两种模式\",{\"1\":{\"839\":1}}],[\"分为下面几种\",{\"1\":{\"588\":1}}],[\"分为普通字符串和原生字符串\",{\"1\":{\"374\":1}}],[\"分为单个拦截器和链式拦截器\",{\"1\":{\"166\":1}}],[\"分为服务集群和客户端\",{\"1\":{\"142\":1}}],[\"分享代码段到\",{\"1\":{\"106\":1}}],[\"分支\",{\"1\":{\"65\":1,\"1067\":1}}],[\"分级执行日志\",{\"1\":{\"54\":1}}],[\"奎托斯后来杀掉了众神之神宙斯\",{\"1\":{\"53\":1}}],[\"站的\",{\"1\":{\"53\":1}}],[\"站开源\",{\"1\":{\"53\":1}}],[\"斗鱼的\",{\"1\":{\"53\":1}}],[\"斗鱼开源\",{\"1\":{\"53\":1}}],[\"彩蛋\",{\"1\":{\"53\":1}}],[\"阿里开源\",{\"1\":{\"53\":1}}],[\"实则是调用了mheap\",{\"1\":{\"1117\":1}}],[\"实线代表着直接调用\",{\"1\":{\"560\":1}}],[\"实例名称\",{\"1\":{\"1016\":1}}],[\"实例表\",{\"1\":{\"1016\":1}}],[\"实例存放在一个\",{\"1\":{\"1016\":1}}],[\"实例去监视配置变化\",{\"1\":{\"793\":1}}],[\"实例只支持单个配置文件\",{\"1\":{\"791\":1}}],[\"实例化\",{\"0\":{\"405\":1}}],[\"实例\",{\"1\":{\"174\":1,\"795\":1}}],[\"实在不知道怎么翻译这个unary了\",{\"1\":{\"157\":1}}],[\"实验性的支持\",{\"1\":{\"132\":1}}],[\"实体书\",{\"0\":{\"100\":1}}],[\"实现上基于代码生成而非反射\",{\"1\":{\"849\":1}}],[\"实现与基本数据类型的字符串表示形式之间的转换\",{\"1\":{\"690\":1}}],[\"实现一个接口不需要implements关键字显式的去指定要实现哪一个接口\",{\"1\":{\"567\":1}}],[\"实现了对mom类型的引用\",{\"1\":{\"891\":1}}],[\"实现了\",{\"1\":{\"721\":1}}],[\"实现了简单的函数来操作\",{\"1\":{\"702\":1}}],[\"实现了基本的方法\",{\"1\":{\"645\":1}}],[\"实现了一个接口\",{\"1\":{\"563\":1}}],[\"实现了接口\",{\"1\":{\"563\":1}}],[\"实现的方法都是返回零值\",{\"1\":{\"475\":1}}],[\"实现的一种解释型脚本语言\",{\"1\":{\"75\":1}}],[\"实现stringer接口即可\",{\"1\":{\"326\":1}}],[\"实现streamclientinterceptor即可\",{\"1\":{\"166\":1}}],[\"实现unaryclientinterceptor即可\",{\"1\":{\"166\":1}}],[\"实现服务注册与发现的简单案例\",{\"1\":{\"145\":1}}],[\"实现原理\",{\"1\":{\"96\":1}}],[\"实现\",{\"0\":{\"567\":1},\"1\":{\"53\":1,\"58\":1,\"214\":1,\"381\":1}}],[\"实际负责辅助标记的函数是runtime\",{\"1\":{\"1139\":1}}],[\"实际的栈收缩工作由runtime\",{\"1\":{\"1102\":1}}],[\"实际的工作是由后者来完成的\",{\"1\":{\"1097\":1}}],[\"实际生成的代码可能如下\",{\"1\":{\"829\":1}}],[\"实际生成的injector\",{\"1\":{\"823\":1}}],[\"实际声明的构造函数签名如下\",{\"1\":{\"406\":1}}],[\"实际操作\",{\"1\":{\"207\":1}}],[\"实际使用时需要将其转化为某种特定的语言源代码才能使用\",{\"1\":{\"199\":1}}],[\"实际导入的路径就是该文件的绝对地址相对于pb\",{\"1\":{\"193\":1}}],[\"实际上它就是执行了30次pause指令\",{\"1\":{\"1153\":1}}],[\"实际上它们的地址是不连续的\",{\"1\":{\"1112\":1}}],[\"实际上遍历的是\",{\"1\":{\"1037\":1}}],[\"实际上数据确实是已经添加到了切片中\",{\"1\":{\"1019\":1}}],[\"实际上内置的数据结构也没几个\",{\"1\":{\"1018\":1}}],[\"实际上依旧是采用的net\",{\"1\":{\"955\":1}}],[\"实际上该类型并不属于unsafe包\",{\"1\":{\"746\":1,\"747\":1}}],[\"实际上并没有这个语法限制\",{\"1\":{\"725\":1}}],[\"实际上执行的是\",{\"1\":{\"493\":1}}],[\"实际上是一个有锁的同步环形队列\",{\"1\":{\"1057\":1}}],[\"实际上是一个空的message\",{\"1\":{\"197\":1}}],[\"实际上是通过移动指针操作来访问对应下标元素的\",{\"1\":{\"1021\":1}}],[\"实际上是将多个不同的\",{\"1\":{\"1016\":1}}],[\"实际上是同一个引用\",{\"1\":{\"482\":1}}],[\"实际上是输出有关它的依赖图\",{\"1\":{\"30\":1}}],[\"实际上返回给客户端的是一个status\",{\"1\":{\"167\":1}}],[\"实际上这时无论哪个节点都可以查看\",{\"1\":{\"143\":1}}],[\"实际上\",{\"1\":{\"139\":1,\"1020\":1,\"1030\":1,\"1041\":1,\"1064\":1}}],[\"实际上属于build\",{\"1\":{\"18\":1}}],[\"实际上支持的架构不止这些\",{\"1\":{\"7\":1}}],[\"实际支持的操作系统并不止这些\",{\"1\":{\"7\":1}}],[\"很可能是链表中间的某一个溢出桶\",{\"1\":{\"1039\":1}}],[\"很难去判断到底什么时候该主动让权\",{\"1\":{\"1106\":1}}],[\"很难被发现\",{\"1\":{\"1019\":1}}],[\"很难检查到\",{\"1\":{\"946\":1}}],[\"很容易就能找到原始错误\",{\"1\":{\"602\":1}}],[\"很少会出现突然冒出一个错误却不知道是从哪里来的这种情况\",{\"1\":{\"598\":1}}],[\"很少出现一颗老鼠屎坏了一锅粥这种情况\",{\"1\":{\"88\":1}}],[\"很严重的问题\",{\"1\":{\"598\":1}}],[\"很显然的是编译器直接将其视作一个完整的字符串\",{\"1\":{\"1053\":1}}],[\"很显然是通过指针偏移来访问的切片字段\",{\"1\":{\"1021\":1}}],[\"很显然\",{\"1\":{\"525\":1}}],[\"很生动的表示了数据的流动方向\",{\"1\":{\"465\":1}}],[\"很大程度上是从\",{\"1\":{\"592\":1}}],[\"很大程度上\",{\"1\":{\"427\":1}}],[\"很简单\",{\"1\":{\"163\":1}}],[\"很久没更新\",{\"1\":{\"53\":1}}],[\"很多时候我们利用这种机制来进行一些资源的释放操作\",{\"1\":{\"1072\":1}}],[\"很多初学者刚开始可能都会和我一样犯这种错误\",{\"1\":{\"1069\":1}}],[\"很多\",{\"1\":{\"14\":1,\"617\":1}}],[\"高32位用于统计被等待协程的数量\",{\"1\":{\"1176\":1}}],[\"高达几秒甚至更久\",{\"1\":{\"1130\":1}}],[\"高七位存放着表示0\",{\"1\":{\"1114\":1}}],[\"高1000\",{\"1\":{\"833\":1}}],[\"高级用法\",{\"0\":{\"825\":1}}],[\"高速\",{\"1\":{\"614\":1}}],[\"高精度整数在向低精度整数转换时会抛弃高位保留低位\",{\"1\":{\"595\":1}}],[\"高精度浮点数操作库\",{\"1\":{\"59\":1}}],[\"高于\",{\"1\":{\"526\":1}}],[\"高效的将文件写入响应流\",{\"1\":{\"981\":1}}],[\"高效的\",{\"1\":{\"99\":1}}],[\"高维护性\",{\"1\":{\"71\":1}}],[\"高性能权限\",{\"1\":{\"78\":1}}],[\"高性能\",{\"1\":{\"71\":1}}],[\"高性能的路由组件\",{\"1\":{\"954\":1}}],[\"高性能的内存缓存\",{\"1\":{\"61\":1}}],[\"高性能的模板引擎\",{\"1\":{\"60\":1}}],[\"高性能双端队列的实现\",{\"1\":{\"58\":1}}],[\"高性能和高拓展的微服务框架\",{\"1\":{\"53\":1}}],[\"高可用的全栈\",{\"1\":{\"51\":1}}],[\"简短的调用者输出\",{\"1\":{\"840\":1}}],[\"简介\",{\"0\":{\"616\":1,\"770\":1,\"803\":1,\"807\":1,\"815\":1,\"845\":1,\"924\":1}}],[\"简而言之\",{\"1\":{\"582\":1}}],[\"简单讲解下里面的一些概念\",{\"1\":{\"1144\":1}}],[\"简单讲解一下释义\",{\"1\":{\"141\":1}}],[\"简单示例\",{\"0\":{\"977\":1,\"979\":1}}],[\"简单来说就是操作字符串的工具包\",{\"1\":{\"702\":1}}],[\"简单\",{\"1\":{\"617\":3}}],[\"简单介绍一些其中的一些指标\",{\"1\":{\"559\":1}}],[\"简单存取\",{\"0\":{\"254\":1}}],[\"简单的例子如下\",{\"1\":{\"593\":1,\"594\":1}}],[\"简单的用一句话概括\",{\"1\":{\"471\":1}}],[\"简单的服务定义\",{\"1\":{\"147\":1}}],[\"简单的邮件发送库\",{\"1\":{\"71\":1}}],[\"简单强大的爬虫框架\",{\"1\":{\"69\":1}}],[\"简单强大的\",{\"1\":{\"52\":1}}],[\"简洁的\",{\"1\":{\"51\":1}}],[\"库就有一个专属的文档页面\",{\"1\":{\"500\":1}}],[\"库都实现了这一超时传递机制\",{\"1\":{\"169\":1}}],[\"库的\",{\"1\":{\"85\":1}}],[\"库的强大拓展\",{\"1\":{\"52\":1}}],[\"库\",{\"0\":{\"776\":1},\"1\":{\"52\":1,\"58\":1,\"65\":1,\"84\":3,\"85\":1,\"850\":1}}],[\"极简高性能的\",{\"1\":{\"51\":1}}],[\"号称最快的\",{\"1\":{\"51\":1}}],[\"国内基本上都给翻译成了开放编码\",{\"1\":{\"1076\":1}}],[\"国内用户基本上不使用代理的话无法访问默认的官方代理\",{\"1\":{\"7\":1}}],[\"国家代码\",{\"1\":{\"934\":2}}],[\"国际标准书号\",{\"1\":{\"934\":3}}],[\"国人开发的\",{\"1\":{\"51\":1}}],[\"仓库地址\",{\"1\":{\"786\":1,\"818\":1,\"821\":1,\"923\":1,\"954\":1,\"961\":1,\"1003\":1}}],[\"仓库名\",{\"1\":{\"509\":1}}],[\"仓库名虽然没有什么特别限制\",{\"1\":{\"495\":1}}],[\"仓库\",{\"1\":{\"51\":1,\"52\":1,\"53\":1,\"54\":1,\"55\":1,\"56\":1,\"57\":1,\"58\":1,\"59\":1,\"60\":1,\"61\":1,\"62\":1,\"63\":1,\"64\":1,\"65\":1,\"66\":1,\"67\":1,\"68\":1,\"69\":1,\"70\":1,\"71\":1,\"72\":1,\"73\":1,\"74\":1,\"75\":1,\"76\":1,\"77\":1,\"78\":1,\"79\":1,\"80\":1,\"81\":1,\"82\":1,\"83\":1,\"84\":1,\"85\":1,\"88\":1,\"802\":1,\"806\":1,\"814\":1,\"844\":1,\"904\":1,\"1009\":1}}],[\"外键等等\",{\"1\":{\"863\":1}}],[\"外键字段名格式是被引用类型名+id\",{\"1\":{\"860\":1}}],[\"外键\",{\"0\":{\"860\":1}}],[\"外部包将无法访问内部包中的任何内容\",{\"1\":{\"296\":1}}],[\"外部是无法使用的\",{\"1\":{\"49\":1}}],[\"外链\",{\"0\":{\"97\":1},\"1\":{\"291\":1}}],[\"外界无法访问\",{\"1\":{\"44\":1}}],[\"外界对于\",{\"1\":{\"0\":1,\"598\":1}}],[\"那会觉得内存拷贝太消耗性能了\",{\"1\":{\"1103\":1}}],[\"那直接不切换就行了\",{\"1\":{\"1085\":1}}],[\"那如果有特别多的函数调用\",{\"1\":{\"598\":1}}],[\"那如果把延迟调用和闭包结合起来呢\",{\"1\":{\"402\":1}}],[\"那时所有的代码都存放在\",{\"1\":{\"492\":1}}],[\"那时还是处于\",{\"1\":{\"113\":1}}],[\"那就再分配一个溢出桶\",{\"1\":{\"1038\":1}}],[\"那就再来看一个例子\",{\"1\":{\"1019\":1}}],[\"那就不要用这个方法\",{\"1\":{\"975\":1}}],[\"那就不知道会有什么后果了\",{\"1\":{\"47\":1}}],[\"那就拷贝这个切片\",{\"1\":{\"414\":1}}],[\"那就拷贝这个整型\",{\"1\":{\"414\":1}}],[\"那就是runtime\",{\"1\":{\"1078\":1}}],[\"那就是消除空白符的时候\",{\"1\":{\"726\":1}}],[\"那就是panic\",{\"1\":{\"607\":1}}],[\"那就是必须是可以排序的类型\",{\"1\":{\"578\":1}}],[\"那就是实现了该接口\",{\"1\":{\"567\":1}}],[\"那就是使用内置函数make\",{\"1\":{\"464\":1}}],[\"那就是键为math\",{\"1\":{\"384\":1}}],[\"那就是它们之间的类型必须相同\",{\"1\":{\"332\":1}}],[\"那就是所有在函数中的变量都必须要被使用\",{\"1\":{\"329\":1}}],[\"那就是在赋值旧变量的同时声明一个新的变量\",{\"1\":{\"329\":1}}],[\"那就这么定了\",{\"1\":{\"158\":4}}],[\"那行吧\",{\"1\":{\"158\":4}}],[\"那样入参和返回值都可以很明确的体现在函数签名上\",{\"1\":{\"158\":1}}],[\"那样接受完所有数据再处理\",{\"1\":{\"157\":1}}],[\"那样等到所有参数都接收完毕再处理\",{\"1\":{\"157\":1}}],[\"那么刚刚唤醒的协程就会一直无法持有锁\",{\"1\":{\"1151\":1}}],[\"那么什么时候协程会处于饥饿状态呢\",{\"1\":{\"1151\":1}}],[\"那么当前协程可以直接持有锁\",{\"1\":{\"1153\":1}}],[\"那么当前协程无法获得锁\",{\"1\":{\"1152\":2}}],[\"那么当前协程会陷入阻塞状态\",{\"1\":{\"1067\":1}}],[\"那么当协程执行完毕后最终就会走入该函数\",{\"1\":{\"1096\":1}}],[\"那么较早的panic将不会执行\",{\"1\":{\"1079\":1}}],[\"那么对应的开放编码优化后的defer就会在函数要返回时执行\",{\"1\":{\"1076\":1}}],[\"那么对于的属性将不会输出\",{\"1\":{\"839\":1}}],[\"那么运行一下看看\",{\"1\":{\"1069\":1}}],[\"那么造成死锁的可能性就非常大\",{\"1\":{\"1067\":1}}],[\"那么考虑下面代码的情况\",{\"1\":{\"1067\":1}}],[\"那么并不能代表管道就真的没有关闭\",{\"1\":{\"1062\":1}}],[\"那么并发的问题解决了吗\",{\"1\":{\"462\":1}}],[\"那么下面就来看点不一样的\",{\"1\":{\"1051\":1}}],[\"那么现在就来看看\",{\"1\":{\"1041\":1}}],[\"那么添加元素就会触发扩容\",{\"1\":{\"1019\":1}}],[\"那么将会被现有的覆盖掉\",{\"1\":{\"949\":1}}],[\"那么将会导致无法正常读取\",{\"1\":{\"409\":1}}],[\"那么第三个返回值必须是error\",{\"1\":{\"823\":1}}],[\"那么最终结果为\",{\"1\":{\"764\":1}}],[\"那么最终结果就为allow\",{\"1\":{\"763\":3}}],[\"那么最终会生成protos\",{\"1\":{\"201\":1}}],[\"那么最终会生成example\",{\"1\":{\"201\":1}}],[\"那么只能通过取其第一个元素的指针来获取底层数组的地址\",{\"1\":{\"753\":1}}],[\"那么便不会出现例二的无效地址情况\",{\"1\":{\"751\":1}}],[\"那么你就可以使用\",{\"1\":{\"903\":1}}],[\"那么你会认识到\",{\"1\":{\"609\":1}}],[\"那么你才是个合格的\",{\"1\":{\"598\":1}}],[\"那么程序将会直接停止运行\",{\"1\":{\"606\":1}}],[\"那么target就必须是\",{\"1\":{\"603\":1}}],[\"那么该函数每次执行输出的结果都可能不同的\",{\"1\":{\"1149\":1}}],[\"那么该协程必须辅助完成定量的\",{\"1\":{\"1139\":1}}],[\"那么该类型就属于该类型集\",{\"1\":{\"574\":1}}],[\"那么该接口就是这些类型集的交集\",{\"1\":{\"574\":1}}],[\"那么该变量也会逃逸到堆上\",{\"1\":{\"551\":1}}],[\"那么会panic\",{\"1\":{\"568\":1}}],[\"那么根据实现的定义\",{\"1\":{\"567\":1}}],[\"那么称该类型实现了该接口\",{\"1\":{\"563\":2}}],[\"那么这一个单元都会被回收掉\",{\"1\":{\"1147\":1}}],[\"那么这一扫描过程的耗时将不容忽视\",{\"1\":{\"1142\":1}}],[\"那么这样就造成了死锁\",{\"1\":{\"1067\":1}}],[\"那么这样一来\",{\"1\":{\"543\":1}}],[\"那么这种情况就称之为逃逸\",{\"1\":{\"549\":1}}],[\"那么这么做就会有一个明显的问题\",{\"1\":{\"371\":1}}],[\"那么编译就会失败\",{\"1\":{\"535\":1}}],[\"那么上例中下载的依赖包存放的路径就位于\",{\"1\":{\"510\":1}}],[\"那么模块名就需要修改成如下\",{\"1\":{\"509\":1}}],[\"那么\",{\"1\":{\"485\":1,\"533\":1,\"563\":1,\"856\":1}}],[\"那么问题就来了\",{\"1\":{\"484\":1}}],[\"那么问题来了\",{\"1\":{\"167\":1,\"571\":1}}],[\"那么依旧会重现之前的问题\",{\"1\":{\"462\":1}}],[\"那么其值必须是可取址的\",{\"1\":{\"442\":1}}],[\"那么如果通过指针调用会如何呢\",{\"1\":{\"413\":1}}],[\"那么内存分布如下图所示\",{\"1\":{\"410\":1}}],[\"那么性能开销就会很高\",{\"1\":{\"376\":1}}],[\"那么s2的容量就是cap\",{\"1\":{\"371\":1}}],[\"那么变量存储的值就是对应类型的零值\",{\"1\":{\"328\":1}}],[\"那么它就会\",{\"1\":{\"1153\":1}}],[\"那么它就是不是原子操作\",{\"1\":{\"487\":1}}],[\"那么它就是取反运算符\",{\"1\":{\"299\":1}}],[\"那么它应该是黑色对象不应该被清除\",{\"1\":{\"1136\":1}}],[\"那么它应该是白色对象需要被清除\",{\"1\":{\"1136\":1}}],[\"那么它的输出就是\",{\"1\":{\"43\":1}}],[\"那么本站的基础教程理解起来会轻松很多\",{\"1\":{\"287\":1}}],[\"那么本次请求就会结束\",{\"1\":{\"165\":1}}],[\"那么就返回\",{\"1\":{\"1104\":1}}],[\"那么就尝试从全局队列中获取\",{\"1\":{\"1104\":1}}],[\"那么就需要本地做相应的配置才能正常使用\",{\"1\":{\"953\":1}}],[\"那么就会尝试不加锁在本地的\",{\"1\":{\"1120\":1}}],[\"那么就会由mcentral\",{\"1\":{\"1117\":1}}],[\"那么就会非常频繁的触发扩容和缩容\",{\"1\":{\"1103\":1}}],[\"那么就会直接获取对应的entry\",{\"1\":{\"1047\":1}}],[\"那么就会无法正常访问该元素\",{\"1\":{\"1037\":1}}],[\"那么就会创建2^b\",{\"1\":{\"1034\":1}}],[\"那么就会自动回滚\",{\"1\":{\"901\":1}}],[\"那么就会执行else这块的逻辑\",{\"1\":{\"730\":1}}],[\"那么就会编译失败\",{\"1\":{\"193\":1}}],[\"那么就根本不应该使用泛型\",{\"1\":{\"573\":1}}],[\"那么就不需要手动使用指定查哪个表\",{\"1\":{\"869\":1}}],[\"那么就不会再向下执行\",{\"1\":{\"510\":1}}],[\"那么就不应该取一样的名字\",{\"1\":{\"395\":1}}],[\"那么就可以通过相对路径来导入其它目录的文件\",{\"1\":{\"193\":1}}],[\"那么就无法正常使用交叉编译\",{\"1\":{\"11\":1}}],[\"那么health\",{\"1\":{\"193\":1}}],[\"那么在gopanic函数中也就不会走到恢复这部分逻辑里面来\",{\"1\":{\"1080\":1}}],[\"那么在扩容的时候就会占用大量的内存\",{\"1\":{\"1041\":1}}],[\"那么在读写哈希表时\",{\"1\":{\"1032\":1}}],[\"那么在生成中的某个阶段的中间代码大概率长这样\",{\"1\":{\"1021\":1}}],[\"那么在删除时\",{\"1\":{\"889\":1}}],[\"那么在create执行时\",{\"1\":{\"856\":1}}],[\"那么在解析时如果希望\",{\"1\":{\"784\":1}}],[\"那么在解析时是否指定模板名称\",{\"1\":{\"733\":1}}],[\"那么在传入的请求中\",{\"1\":{\"764\":1}}],[\"那么在模板中就会生成\",{\"1\":{\"728\":1}}],[\"那么在yield回调函数中要怎么去处理这个\",{\"1\":{\"582\":1}}],[\"那么在迭代时for\",{\"1\":{\"582\":2}}],[\"那么在短时间内就会创建大量的\",{\"1\":{\"401\":1}}],[\"那么在编译时就会报错\",{\"1\":{\"329\":1}}],[\"那么在编译时它会被编译器优化成如下形式\",{\"1\":{\"45\":1}}],[\"那么在未来其他用户可能会重用这些已被删除的编号\",{\"1\":{\"188\":1}}],[\"那么集群中其他节点就不应该再有其他节点指定\",{\"1\":{\"143\":1}}],[\"那么情况就有些不一样了\",{\"1\":{\"44\":1}}],[\"被多个协程并发访问和修改\",{\"1\":{\"1165\":1}}],[\"被唤醒\",{\"1\":{\"1151\":1}}],[\"被唤醒后释放sudog结构\",{\"1\":{\"1167\":1}}],[\"被唤醒后的第一件事情就是解除sudog与管道的链接\",{\"1\":{\"1067\":1}}],[\"被唤醒后\",{\"1\":{\"1060\":1}}],[\"被锁住\",{\"1\":{\"1151\":1}}],[\"被抢占或将发生\",{\"1\":{\"1137\":1}}],[\"被抢注了\",{\"1\":{\"87\":1}}],[\"被分配到了用于手动管理内存的部分\",{\"1\":{\"1114\":1}}],[\"被分配到了堆上\",{\"1\":{\"1114\":1}}],[\"被分配了一个\",{\"1\":{\"1086\":1}}],[\"被创建时指定\",{\"1\":{\"1030\":1}}],[\"被删除子串位置后面的字符串\",{\"1\":{\"708\":1}}],[\"被删除子串位置前面的字符串\",{\"1\":{\"708\":1}}],[\"被包裹的错误可能依旧是一个错误链\",{\"1\":{\"603\":1}}],[\"被转换类型必须是可以被目标类型代表的\",{\"1\":{\"595\":1}}],[\"被修复了\",{\"1\":{\"505\":1}}],[\"被监测的可以是网络请求\",{\"1\":{\"471\":1}}],[\"被拦截的具体客户端方法\",{\"1\":{\"166\":1}}],[\"被自动发送的事件发生后使用则不会生效\",{\"1\":{\"162\":1}}],[\"被链接的类型\",{\"1\":{\"44\":1}}],[\"被引用方\",{\"1\":{\"27\":1}}],[\"正如下面的例子\",{\"1\":{\"1149\":1}}],[\"正如下所示\",{\"1\":{\"1066\":1}}],[\"正文中不做过多阐述\",{\"1\":{\"1132\":1}}],[\"正好是缓存数组长度的一半\",{\"1\":{\"1120\":1}}],[\"正好就有这么一个开源的管理工具bufbuild\",{\"1\":{\"156\":1}}],[\"正是因为协程栈扩容的存在\",{\"1\":{\"1101\":1}}],[\"正是调用了编译器\",{\"1\":{\"14\":1}}],[\"正处于空闲状态\",{\"1\":{\"1087\":1}}],[\"正则表达式包\",{\"1\":{\"616\":1}}],[\"正则处理\",{\"0\":{\"80\":1}}],[\"正因如此\",{\"1\":{\"598\":1}}],[\"正因为无缓冲管道无法存放数据\",{\"1\":{\"466\":1}}],[\"正确地使用管道并正确的关闭才是我们应该做的\",{\"1\":{\"1062\":1}}],[\"正确结果也确实是10\",{\"1\":{\"479\":1}}],[\"正确来说应该开启一个新的协程来发送数据\",{\"1\":{\"466\":1}}],[\"正确方式\",{\"1\":{\"414\":1}}],[\"正确示例\",{\"1\":{\"309\":1,\"360\":1}}],[\"正确\",{\"1\":{\"299\":2}}],[\"正所谓专业的事情交给专业的人做\",{\"1\":{\"175\":1}}],[\"正常模式就是在等待队列中的协程按照先入先出的顺序持有锁\",{\"1\":{\"1151\":1}}],[\"正常使用的\",{\"1\":{\"1067\":1}}],[\"正常情况\",{\"1\":{\"1045\":1}}],[\"正常情况下一个人只能有一个母亲\",{\"1\":{\"891\":1}}],[\"正常情况下每一个依赖都会有两条记录\",{\"1\":{\"510\":1}}],[\"正常情况下\",{\"1\":{\"43\":1,\"157\":1,\"159\":2}}],[\"正常逻辑\",{\"1\":{\"608\":1}}],[\"正常的流程出错\",{\"1\":{\"598\":1}}],[\"正常来说白色对象\",{\"1\":{\"1136\":1}}],[\"正常来说创建管道有且只有一种方式\",{\"1\":{\"1058\":1}}],[\"正常来说输出结果应该是10\",{\"1\":{\"725\":1}}],[\"正常来说\",{\"1\":{\"175\":1}}],[\"正常请求下\",{\"1\":{\"157\":1}}],[\"正常输出就没有问题\",{\"1\":{\"140\":1}}],[\"正在占用cpu时间片\",{\"1\":{\"1151\":1}}],[\"正在使用中的对象内存被错误的释放\",{\"1\":{\"1136\":1}}],[\"正在使用的内存空间\",{\"1\":{\"560\":1}}],[\"正在使用的对象数量\",{\"1\":{\"560\":1}}],[\"正在调度的\",{\"1\":{\"1107\":1}}],[\"正在被调度\",{\"1\":{\"1106\":1}}],[\"正在进行系统调用\",{\"1\":{\"1088\":1}}],[\"正在工作线程上运行的用户协程\",{\"1\":{\"1087\":1}}],[\"正在扫描协程栈空间\",{\"1\":{\"1086\":1}}],[\"正在扩容中\",{\"1\":{\"1042\":1}}],[\"正在等量扩容\",{\"1\":{\"1030\":1}}],[\"正在处理http请求\",{\"1\":{\"477\":6}}],[\"正在并发使用会抛出fatal\",{\"1\":{\"131\":1}}],[\"正在逐渐流行起来\",{\"1\":{\"88\":1}}],[\"正式发布之前\",{\"1\":{\"138\":1}}],[\"正式发布的时间是\",{\"1\":{\"88\":1}}],[\"正式版发布时间为\",{\"1\":{\"88\":1}}],[\"列\",{\"1\":{\"863\":1}}],[\"列数据类型\",{\"1\":{\"862\":1}}],[\"列名\",{\"1\":{\"862\":1}}],[\"列名同样是以蛇形风格\",{\"1\":{\"853\":1}}],[\"列出regexp匹配的测试用例\",{\"1\":{\"519\":1}}],[\"列出模块\",{\"1\":{\"506\":1}}],[\"列出每一个测试用例\",{\"1\":{\"38\":1}}],[\"列表中\",{\"1\":{\"1093\":1}}],[\"列表\",{\"0\":{\"264\":1},\"1\":{\"1088\":1}}],[\"列号\",{\"1\":{\"43\":1}}],[\"估计以后会以共存的方式存在\",{\"1\":{\"42\":1}}],[\"新来的协程不会尝试持有锁\",{\"1\":{\"1151\":1}}],[\"新的函数调用会触发栈的扩容\",{\"1\":{\"1103\":1}}],[\"新的哈希桶\",{\"1\":{\"1042\":1}}],[\"新旧\",{\"1\":{\"1043\":1}}],[\"新桶容量不够用了建个溢出桶\",{\"1\":{\"1042\":1}}],[\"新哈希桶不应该处于搬迁状态\",{\"1\":{\"1042\":1}}],[\"新分配内存\",{\"1\":{\"1038\":1}}],[\"新创建的桶就是溢出桶\",{\"1\":{\"1030\":1}}],[\"新切片跟原来的切片毫不相干\",{\"1\":{\"1025\":1}}],[\"新数组的长度\",{\"1\":{\"1025\":1}}],[\"新接口定义就是为了泛型而服务的\",{\"1\":{\"563\":1}}],[\"新值\",{\"1\":{\"490\":2}}],[\"新建main\",{\"1\":{\"1011\":1}}],[\"新建一个中间件非常简单\",{\"1\":{\"963\":1}}],[\"新建一个配置\",{\"1\":{\"840\":1}}],[\"新建一个协程去处理该连接\",{\"1\":{\"682\":1}}],[\"新建一个redis连接的时候\",{\"1\":{\"242\":1}}],[\"新建定时器\",{\"1\":{\"476\":1}}],[\"新\",{\"1\":{\"365\":5}}],[\"新出的\",{\"1\":{\"42\":1}}],[\"新增元素\",{\"0\":{\"270\":1}}],[\"新增数据\",{\"1\":{\"235\":1}}],[\"新增\",{\"0\":{\"235\":1}}],[\"新增delete内置函数用于删除\",{\"1\":{\"137\":1}}],[\"新增debug\",{\"1\":{\"119\":1}}],[\"新增error内置接口\",{\"1\":{\"137\":1}}],[\"新增rune类型\",{\"1\":{\"137\":1}}],[\"新增内置close函数\",{\"1\":{\"137\":1}}],[\"新增内置append函数\",{\"1\":{\"137\":1}}],[\"新增内置函数clear\",{\"1\":{\"116\":1}}],[\"新增并发安全的sync\",{\"1\":{\"128\":1}}],[\"新增io\",{\"1\":{\"121\":1}}],[\"新增unsafe\",{\"1\":{\"120\":2}}],[\"新增net\",{\"1\":{\"117\":1}}],[\"新增crypto\",{\"1\":{\"117\":1}}],[\"新增cmp库\",{\"1\":{\"116\":1}}],[\"新增了内置函数clear\",{\"1\":{\"1040\":1}}],[\"新增了内置函数clear函数可以用于清空切片的内容\",{\"1\":{\"1027\":1}}],[\"新增了clear内置函数\",{\"1\":{\"372\":1}}],[\"新增了\",{\"1\":{\"138\":1}}],[\"新增了包time\",{\"1\":{\"122\":1}}],[\"新增了实验性的\",{\"1\":{\"116\":1}}],[\"新增了两个内置函数min\",{\"1\":{\"116\":1}}],[\"新增maps库\",{\"1\":{\"116\":1}}],[\"新增slices库\",{\"1\":{\"116\":1}}],[\"新增structs库\",{\"1\":{\"114\":1}}],[\"新增testing\",{\"1\":{\"116\":1}}],[\"新增log\",{\"1\":{\"116\":1}}],[\"新增gosumdb环境环境\",{\"1\":{\"124\":1}}],[\"新增goprivate环境变量来支持私有的依赖源\",{\"1\":{\"124\":1}}],[\"新增go\",{\"1\":{\"114\":1}}],[\"新增标准库iter\",{\"1\":{\"114\":1}}],[\"新增的\",{\"1\":{\"41\":1}}],[\"新增一个版本回退项\",{\"1\":{\"26\":1}}],[\"新增一个替换依赖项\",{\"1\":{\"26\":1}}],[\"新增一个排除依赖项\",{\"1\":{\"26\":1}}],[\"新增一个依赖项\",{\"1\":{\"26\":1}}],[\"模型与数据库表相对应\",{\"1\":{\"853\":1}}],[\"模型\",{\"0\":{\"853\":1,\"1014\":1}}],[\"模型定义如下\",{\"1\":{\"766\":1}}],[\"模型文件可以有注释\",{\"1\":{\"763\":1}}],[\"模糊测试将会永远的运行下去\",{\"1\":{\"527\":1}}],[\"模糊测试中失败的用例会输出到当前测试文件夹下的testdata目录下的某个语料文件中\",{\"1\":{\"527\":1}}],[\"模糊测试的好处在于\",{\"1\":{\"527\":1}}],[\"模糊测试是\",{\"1\":{\"527\":1}}],[\"模糊测试是fuzzxxxx\",{\"1\":{\"517\":1}}],[\"模糊测试自动结束的时间\",{\"1\":{\"519\":1}}],[\"模糊测试\",{\"0\":{\"527\":1},\"1\":{\"516\":1,\"518\":1}}],[\"模拟工作负载\",{\"1\":{\"1165\":1}}],[\"模拟计算耗时\",{\"1\":{\"479\":1,\"480\":1}}],[\"模拟访问耗时\",{\"1\":{\"479\":1,\"480\":1}}],[\"模拟随机耗时\",{\"1\":{\"462\":1}}],[\"模拟的消息队列\",{\"1\":{\"159\":1}}],[\"模式测试运行的最小时间\",{\"1\":{\"519\":1}}],[\"模式算法题就能上手熟悉了\",{\"1\":{\"346\":1}}],[\"模式\",{\"1\":{\"143\":4,\"405\":1,\"849\":1}}],[\"模式运行\",{\"1\":{\"143\":1}}],[\"模板文件\",{\"0\":{\"736\":1}}],[\"模板\",{\"1\":{\"735\":1}}],[\"模板中引用\",{\"1\":{\"735\":1}}],[\"模板中定义插槽\",{\"1\":{\"735\":1}}],[\"模板中也支持这样的写法\",{\"1\":{\"729\":1}}],[\"模板自身的语法其实并不多\",{\"1\":{\"728\":1}}],[\"模板语法支持注释\",{\"1\":{\"726\":1}}],[\"模板语法\",{\"0\":{\"724\":1}}],[\"模板引擎\",{\"0\":{\"60\":1},\"1\":{\"60\":1}}],[\"模板之类的\",{\"1\":{\"41\":1}}],[\"模块最后仍然要修改go\",{\"1\":{\"513\":1}}],[\"模块测试完毕后\",{\"1\":{\"513\":1}}],[\"模块想要使用\",{\"1\":{\"513\":1}}],[\"模块中的代码只有两种办法\",{\"1\":{\"513\":1}}],[\"模块中的代码\",{\"1\":{\"513\":1}}],[\"模块内容如下\",{\"1\":{\"513\":1}}],[\"模块名\",{\"1\":{\"509\":1}}],[\"模块名就是github\",{\"1\":{\"495\":1}}],[\"模块缓存默认存放在$gopath\",{\"1\":{\"507\":1}}],[\"模块存储\",{\"0\":{\"507\":1}}],[\"模块管理\",{\"0\":{\"505\":1}}],[\"模块而生\",{\"1\":{\"501\":1}}],[\"模块也编写了非常细致的文档\",{\"1\":{\"492\":1}}],[\"模块\",{\"0\":{\"492\":1},\"1\":{\"508\":1,\"512\":1,\"513\":1}}],[\"模块的新修改而无需进行等待\",{\"1\":{\"513\":1}}],[\"模块的修改并推送到远程仓库\",{\"1\":{\"513\":1}}],[\"模块的编写就完成了\",{\"1\":{\"499\":1}}],[\"模块的命令\",{\"1\":{\"22\":1}}],[\"模块的诞生与完善\",{\"1\":{\"18\":1}}],[\"模块信息参数\",{\"1\":{\"20\":1}}],[\"模块下载并解析依赖\",{\"1\":{\"18\":1}}],[\"模块代理\",{\"1\":{\"7\":1}}],[\"模块维护命令\",{\"1\":{\"2\":1}}],[\"模块列表命令\",{\"1\":{\"2\":1}}],[\"文中代码演示的环境是\",{\"1\":{\"529\":1}}],[\"文本\",{\"1\":{\"617\":3}}],[\"文本如下\",{\"1\":{\"209\":1}}],[\"文本分段\",{\"1\":{\"56\":1}}],[\"文章中的示例\",{\"1\":{\"145\":1}}],[\"文字处理\",{\"0\":{\"77\":1}}],[\"文字\",{\"1\":{\"64\":1}}],[\"文档的翻译人员之一\",{\"1\":{\"848\":1}}],[\"文档里有着对于学习\",{\"1\":{\"286\":1}}],[\"文档中提供了相当多的安装方式\",{\"1\":{\"156\":1}}],[\"文档中的理念也是如此\",{\"1\":{\"95\":1}}],[\"文档地址\",{\"1\":{\"156\":1,\"178\":1,\"219\":1,\"786\":1,\"810\":1,\"818\":1,\"821\":1,\"923\":1,\"926\":1}}],[\"文档\",{\"0\":{\"211\":1,\"498\":1,\"966\":1},\"1\":{\"40\":1,\"105\":1,\"218\":1,\"498\":1,\"800\":1,\"802\":1,\"806\":1,\"814\":1,\"844\":1,\"904\":1,\"1009\":1}}],[\"文件可以方便在其他接口管理软件上导入数据\",{\"1\":{\"1017\":1}}],[\"文件是必不可少的\",{\"1\":{\"1017\":1}}],[\"文件是读取的路径goroot\",{\"1\":{\"92\":1}}],[\"文件中\",{\"1\":{\"1016\":1}}],[\"文件用于展示网页\",{\"1\":{\"1016\":1}}],[\"文件下载\",{\"0\":{\"986\":1}}],[\"文件传输是\",{\"1\":{\"983\":1}}],[\"文件传输\",{\"0\":{\"983\":1}}],[\"文件加载的时候\",{\"1\":{\"980\":1}}],[\"文件目录\",{\"1\":{\"936\":1}}],[\"文件路径\",{\"1\":{\"841\":1,\"936\":1}}],[\"文件路径在跨平台方面也会是一个大问题\",{\"1\":{\"512\":1}}],[\"文件操作\",{\"1\":{\"814\":1}}],[\"文件操作工具库\",{\"1\":{\"81\":1}}],[\"文件存在的话会返回错误\",{\"1\":{\"792\":1}}],[\"文件关闭以后就不能再次使用了\",{\"1\":{\"584\":1}}],[\"文件内容\",{\"1\":{\"546\":1}}],[\"文件导入\",{\"1\":{\"533\":1}}],[\"文件的插件\",{\"1\":{\"620\":1}}],[\"文件的内容如下\",{\"1\":{\"527\":1}}],[\"文件的查找路径默认为项目go\",{\"1\":{\"416\":1}}],[\"文件特别大的时候不建议这么做\",{\"1\":{\"419\":1}}],[\"文件复制成功\",{\"1\":{\"419\":1}}],[\"文件读取异常\",{\"1\":{\"417\":1}}],[\"文件读取成功\",{\"1\":{\"416\":1}}],[\"文件打开成功\",{\"1\":{\"416\":2,\"417\":4,\"418\":2}}],[\"文件必须不存在\",{\"1\":{\"416\":1}}],[\"文件访问异常\",{\"1\":{\"416\":2,\"417\":2,\"418\":2}}],[\"文件不存在时会返回错误\",{\"1\":{\"792\":1}}],[\"文件不存在\",{\"1\":{\"416\":3}}],[\"文件系统的抽象层\",{\"1\":{\"415\":1}}],[\"文件系统交互的具体实现\",{\"1\":{\"415\":1}}],[\"文件描述符\",{\"0\":{\"335\":1}}],[\"文件属于哪一个包\",{\"1\":{\"292\":1}}],[\"文件会生成在import所指定的目录下\",{\"1\":{\"201\":1}}],[\"文件生成对应语言的序列化代码\",{\"1\":{\"148\":1}}],[\"文件处理\",{\"0\":{\"81\":1}}],[\"文件序列化库\",{\"1\":{\"63\":1}}],[\"文件压缩\",{\"1\":{\"54\":1}}],[\"文件夹的许多操作都与文件操作类似\",{\"1\":{\"423\":1}}],[\"文件夹\",{\"0\":{\"423\":1},\"1\":{\"37\":1}}],[\"文件名作为参数\",{\"1\":{\"37\":1}}],[\"文件名\",{\"1\":{\"16\":1,\"40\":1}}],[\"文件作为参数\",{\"1\":{\"14\":1}}],[\"文件\",{\"0\":{\"151\":1,\"415\":1,\"532\":1},\"1\":{\"8\":1,\"41\":1,\"90\":1,\"141\":1,\"156\":3,\"174\":1,\"471\":1,\"506\":1,\"509\":1,\"532\":2,\"791\":1,\"805\":1,\"924\":1,\"953\":1}}],[\"什么事也没有\",{\"1\":{\"1104\":1}}],[\"什么是请求对象\",{\"1\":{\"761\":1}}],[\"什么是方法集\",{\"1\":{\"563\":1}}],[\"什么是多路复用\",{\"1\":{\"471\":1}}],[\"什么都不会设置\",{\"1\":{\"416\":1}}],[\"什么代码都没有只有一行注释\",{\"1\":{\"40\":1}}],[\"什么阶段\",{\"1\":{\"0\":1}}],[\"大对象基本上都是一个对象占用一个mpan\",{\"1\":{\"1126\":1}}],[\"大对象分配最为简单\",{\"1\":{\"1126\":1}}],[\"大对象\",{\"0\":{\"1126\":1},\"1\":{\"1123\":1}}],[\"大多情况下都是链式操作\",{\"1\":{\"849\":1}}],[\"大多数时候都不建议开启此项\",{\"1\":{\"1006\":1}}],[\"大多数时候我们也无需太过于专注内存分配的细节\",{\"1\":{\"553\":1}}],[\"大多数只是一些介绍和基本使用和一些例子\",{\"1\":{\"966\":1}}],[\"大多数功能都是通过函数来实现的\",{\"1\":{\"728\":1}}],[\"大多数工具都是针对开源项目而言的\",{\"1\":{\"511\":1}}],[\"大多数情况都会用到create方法\",{\"1\":{\"866\":1}}],[\"大多数情况都是被动触发\",{\"1\":{\"608\":1}}],[\"大多数情况下内存的分配和销毁由\",{\"1\":{\"1109\":1}}],[\"大多数情况下应该使用更加成熟的日志框架\",{\"1\":{\"1005\":1}}],[\"大多数情况下应该对其进行处理\",{\"1\":{\"599\":1}}],[\"大多数情况下都需求修改很多的服务配置才能达到需求\",{\"1\":{\"997\":1}}],[\"大多数情况下使用默认的处理器\",{\"1\":{\"643\":1}}],[\"大多数情况下\",{\"1\":{\"490\":1}}],[\"大多数情况下这些问题隐藏的十分隐蔽\",{\"1\":{\"468\":1}}],[\"大多数情况下采用如下的方式来实例化结构体\",{\"1\":{\"405\":1}}],[\"大多数情况第一种使用的较多\",{\"1\":{\"417\":1}}],[\"大多数都是全英文的\",{\"1\":{\"286\":1}}],[\"大多数指令都只能作用于函数签名上\",{\"1\":{\"39\":1}}],[\"大于空闲\",{\"1\":{\"1153\":1}}],[\"大于等于17岁\",{\"1\":{\"942\":1,\"952\":3}}],[\"大于等于\",{\"1\":{\"728\":1,\"935\":1}}],[\"大于\",{\"1\":{\"728\":1,\"935\":1,\"1123\":1}}],[\"大小为\",{\"1\":{\"1145\":1}}],[\"大小\",{\"1\":{\"1114\":1}}],[\"大小受限\",{\"1\":{\"1002\":1}}],[\"大小写转换\",{\"0\":{\"717\":1}}],[\"大小是有一定规律的\",{\"1\":{\"365\":1}}],[\"大体上确立了垃圾回收的基本框架\",{\"1\":{\"1144\":1}}],[\"大体上的写法也都是类似的\",{\"1\":{\"682\":1}}],[\"大体意思都差不多\",{\"1\":{\"508\":1}}],[\"大\",{\"1\":{\"617\":1}}],[\"大数高精度计算包\",{\"1\":{\"616\":1}}],[\"大致都是一样的\",{\"1\":{\"839\":1}}],[\"大致过程如下\",{\"1\":{\"785\":1}}],[\"大致如下\",{\"1\":{\"510\":1}}],[\"大致意思都比较容易看懂\",{\"1\":{\"286\":1}}],[\"大内存\",{\"1\":{\"485\":1}}],[\"大到一些设计思想\",{\"1\":{\"288\":1}}],[\"大写e的十进制指数\",{\"1\":{\"698\":1}}],[\"大写的字母都会被转换为小写\",{\"1\":{\"160\":1}}],[\"大写字母\",{\"1\":{\"160\":1}}],[\"大大减少了程序暂停的时间\",{\"1\":{\"132\":1}}],[\"大幅缩短\",{\"1\":{\"130\":1}}],[\"大部分可以直接开箱即用\",{\"1\":{\"683\":1}}],[\"大部分情况\",{\"1\":{\"600\":1}}],[\"大部分情况下都很容易读懂代码\",{\"1\":{\"598\":1}}],[\"大部分情况下会以\",{\"1\":{\"540\":1}}],[\"大部分情况下可以通过\",{\"1\":{\"534\":1}}],[\"大部分情况下低于\",{\"1\":{\"129\":1}}],[\"大部分情况下\",{\"1\":{\"88\":1,\"534\":1}}],[\"大部分情况下不需要去了解它\",{\"1\":{\"48\":1}}],[\"大部分开源项目都是在托管在\",{\"1\":{\"509\":1}}],[\"大部分时候可能会用来调试错误之类的\",{\"1\":{\"43\":1}}],[\"大概可以理解为下图\",{\"1\":{\"1111\":1}}],[\"大概长下面这样\",{\"1\":{\"774\":1}}],[\"大概第一眼就可以知道这是一个函数\",{\"1\":{\"592\":1}}],[\"大概率多节点集群也不会由问题\",{\"1\":{\"141\":1}}],[\"大概有\",{\"1\":{\"10\":1}}],[\"大概在\",{\"1\":{\"8\":1}}],[\"胡乱使用可能导致无法预测的结果\",{\"1\":{\"39\":1}}],[\"功能或许没那么全\",{\"1\":{\"962\":1}}],[\"功能并不那么强大但是自己可以时时刻刻把控\",{\"1\":{\"848\":1}}],[\"功能也十分强大\",{\"1\":{\"616\":1}}],[\"功能类似的还有t\",{\"1\":{\"521\":1}}],[\"功能那么丰富但是胜在简洁\",{\"1\":{\"230\":1}}],[\"功能是输出每一次\",{\"1\":{\"165\":1}}],[\"功能强大且丰富的标准库是\",{\"1\":{\"88\":1}}],[\"功能强大\",{\"1\":{\"60\":1,\"94\":1}}],[\"功能性指令\",{\"1\":{\"39\":1}}],[\"功能同go\",{\"1\":{\"36\":1}}],[\"二维就是1\",{\"1\":{\"1115\":1}}],[\"二维是1\",{\"1\":{\"1115\":1}}],[\"二维切片\",{\"1\":{\"370\":1}}],[\"二是阻塞刚刚被唤醒成功获得信号量\",{\"1\":{\"1153\":1}}],[\"二是饥饿模式\",{\"1\":{\"1151\":1}}],[\"二是随机化\",{\"1\":{\"1063\":1}}],[\"二是finished管道有消息可以读取即用户代码任务完成\",{\"1\":{\"1063\":1}}],[\"二是将dog\",{\"1\":{\"414\":1}}],[\"二进制指数\",{\"1\":{\"698\":1}}],[\"二进制同理\",{\"1\":{\"341\":1}}],[\"二进制\",{\"1\":{\"124\":1,\"617\":1}}],[\"二进制程序地址\",{\"1\":{\"90\":1}}],[\"二进制文件存放路径首先在gobin目录下\",{\"1\":{\"19\":1}}],[\"二次运行时不会重新编译\",{\"1\":{\"38\":1}}],[\"打乱测试的执行顺序\",{\"1\":{\"519\":1}}],[\"打乱所有测试用例的执行顺序\",{\"1\":{\"38\":1}}],[\"打开一个名为readme\",{\"1\":{\"598\":1}}],[\"打开一个文件\",{\"1\":{\"598\":1}}],[\"打开一个文件后永远要记得关闭该文件\",{\"1\":{\"416\":1}}],[\"打开后页面大概如下所示\",{\"1\":{\"561\":1}}],[\"打开方式有两种\",{\"1\":{\"424\":1}}],[\"打开文件时\",{\"1\":{\"419\":1}}],[\"打开\",{\"0\":{\"416\":1}}],[\"打开如下设置\",{\"1\":{\"193\":1}}],[\"打桩测试框架\",{\"1\":{\"55\":2}}],[\"打印出代码优化建议\",{\"1\":{\"550\":1}}],[\"打印过程中执行的命令\",{\"1\":{\"40\":1}}],[\"打印将要执行的命令\",{\"1\":{\"40\":1}}],[\"打印将要清除过程要执行的命令但实际并不执行\",{\"1\":{\"15\":1}}],[\"打印清除过程中的要执行的命令并执行\",{\"1\":{\"15\":1}}],[\"似乎并没有任何作用\",{\"1\":{\"37\":1}}],[\"应当填写指定域名\",{\"1\":{\"1000\":1}}],[\"应当使用括号来显式的表示谁应该优先计算\",{\"1\":{\"348\":1}}],[\"应及时的关闭\",{\"1\":{\"741\":1}}],[\"应对这种情况就需要用到rune类型\",{\"1\":{\"380\":1}}],[\"应该被标记为灰色\",{\"1\":{\"1136\":1}}],[\"应该在很多教程中都有出现\",{\"1\":{\"1106\":1}}],[\"应该再次进入调度\",{\"1\":{\"1088\":1}}],[\"应该可以更简洁一点\",{\"1\":{\"1069\":1}}],[\"应该单独让一个协程来完成关闭操作\",{\"1\":{\"1062\":1}}],[\"应该结合select来使用\",{\"1\":{\"1062\":1}}],[\"应该增加buckets桶的数量\",{\"1\":{\"1032\":1}}],[\"应该对为什么要使用泛型\",{\"1\":{\"571\":1}}],[\"应该尽量在向管道发送数据的那一方关闭管道\",{\"1\":{\"470\":1}}],[\"应该没有人会这么做\",{\"1\":{\"175\":1}}],[\"应该是微服务当中必须要学习的一个点了\",{\"1\":{\"146\":1}}],[\"应该使用interface\",{\"1\":{\"573\":1}}],[\"应该使用循环来判断条件是否满足\",{\"1\":{\"482\":1}}],[\"应该使用for而不是if\",{\"1\":{\"482\":1}}],[\"应该使用指针\",{\"1\":{\"481\":1}}],[\"应该使用consul\",{\"1\":{\"143\":1}}],[\"应该使用go\",{\"1\":{\"37\":1}}],[\"应用的一个不可或缺的功能\",{\"1\":{\"983\":1}}],[\"应用\",{\"1\":{\"839\":1}}],[\"应用程序的完整的配置文件解决方案\",{\"1\":{\"788\":1}}],[\"应用服务端开发\",{\"1\":{\"88\":1}}],[\"应用格式化规则\",{\"1\":{\"17\":1}}],[\"中反复读取锁的状态\",{\"1\":{\"1153\":1}}],[\"中负责垃圾回收的就是运行时\",{\"1\":{\"1131\":1}}],[\"中指的是用户代码\",{\"1\":{\"1131\":1}}],[\"中指定\",{\"1\":{\"1039\":1}}],[\"中主要的分配方式\",{\"1\":{\"1111\":1}}],[\"中主要通过context来进行传输和存储\",{\"1\":{\"160\":1}}],[\"中堆内存管理主要有两个大的组件\",{\"1\":{\"1109\":1}}],[\"中判断是小对象还是大对象的标准\",{\"1\":{\"1100\":1}}],[\"中从管道接收数据的语法有两种\",{\"1\":{\"1060\":1}}],[\"中一个非常常见的基础数据类型\",{\"1\":{\"1051\":1}}],[\"中找到可以分配给\",{\"1\":{\"1038\":1}}],[\"中找到了一个位置分配给\",{\"1\":{\"1038\":1}}],[\"中找到了已经存在的\",{\"1\":{\"1038\":1}}],[\"中遍历桶\",{\"1\":{\"1037\":1}}],[\"中用于计算负载因子的函数是runtime\",{\"1\":{\"1032\":1}}],[\"中解决哈希冲突的方式就是拉链法\",{\"1\":{\"1032\":1}}],[\"中对应的结构为runtime\",{\"1\":{\"1030\":1}}],[\"中对应的类型为metadata\",{\"1\":{\"160\":1}}],[\"中溢出桶的大致数量\",{\"1\":{\"1030\":1}}],[\"中存储的是\",{\"1\":{\"1003\":1}}],[\"中提供了如下方法\",{\"1\":{\"990\":1}}],[\"中国家代码的值进行验证\",{\"1\":{\"934\":1}}],[\"中事务的使用有多种方法\",{\"1\":{\"900\":1}}],[\"中钩子方法\",{\"1\":{\"849\":1}}],[\"中依赖注入基于两个元素\",{\"1\":{\"823\":1}}],[\"中也没有\",{\"1\":{\"1047\":1}}],[\"中也有一些依赖注入库\",{\"1\":{\"821\":1}}],[\"中也并没有try\",{\"1\":{\"598\":1}}],[\"中包含\",{\"1\":{\"796\":1}}],[\"中嵌入了标准\",{\"1\":{\"781\":1}}],[\"中格式化模板不是常见的\",{\"1\":{\"739\":1}}],[\"中间会进行经过一系列的过程\",{\"1\":{\"1076\":1}}],[\"中间的使用和自定义非常容易\",{\"1\":{\"995\":1}}],[\"中间的text模板就不会生成\",{\"1\":{\"730\":1}}],[\"中间件会写入日志到\",{\"1\":{\"1007\":1}}],[\"中间件总数\",{\"1\":{\"995\":1}}],[\"中间件原理\",{\"0\":{\"995\":1}}],[\"中间件本质上其实还是一个接口处理器\",{\"1\":{\"992\":1}}],[\"中间件\",{\"0\":{\"992\":1}}],[\"中间件可以将它们写入日志文件\",{\"1\":{\"963\":1}}],[\"中间不能包含任何的空格\",{\"1\":{\"39\":1}}],[\"中通过类型声明\",{\"1\":{\"593\":1}}],[\"中通过关键字chan来代表管道类型\",{\"1\":{\"463\":1}}],[\"中类似的写法如下\",{\"1\":{\"592\":1}}],[\"中它还有另一个叫法\",{\"1\":{\"582\":1}}],[\"中有两种内存分配器\",{\"1\":{\"1110\":1}}],[\"中有\",{\"1\":{\"1047\":1}}],[\"中有一个专门的接口类型用于代表所有可比较类型\",{\"1\":{\"568\":1}}],[\"中有三个经典的反射定律\",{\"1\":{\"430\":1}}],[\"中长期引用\",{\"1\":{\"543\":1}}],[\"中常见的悬挂指针\",{\"1\":{\"543\":1}}],[\"中会以字节数组的形式存在\",{\"1\":{\"541\":1}}],[\"中修改\",{\"1\":{\"536\":1}}],[\"中修改函数的返回值\",{\"1\":{\"400\":1}}],[\"中直接修改\",{\"1\":{\"536\":1}}],[\"中没有\",{\"1\":{\"1047\":2}}],[\"中没有字符串这个类型\",{\"1\":{\"536\":1}}],[\"中没有三元表达式\",{\"1\":{\"313\":1}}],[\"中导入import\",{\"1\":{\"534\":1}}],[\"中导出函数\",{\"1\":{\"533\":1}}],[\"中这段内存被\",{\"1\":{\"533\":1}}],[\"中使用malloc创建一个\",{\"1\":{\"536\":1}}],[\"中使用的sum函数实际上是\",{\"1\":{\"533\":1}}],[\"中使用官方的\",{\"1\":{\"218\":1}}],[\"中大部分的\",{\"1\":{\"516\":1}}],[\"中大部分间隔都是有意义的\",{\"1\":{\"311\":1}}],[\"中atomic包下的原子操作\",{\"1\":{\"490\":1}}],[\"中很大一部分的并发相关的工具都是sync标准库提供的\",{\"1\":{\"483\":1}}],[\"中读写互斥锁的实现是sync\",{\"1\":{\"481\":1}}],[\"中是行不通的\",{\"1\":{\"479\":1}}],[\"中是不支持指针运算的\",{\"1\":{\"392\":1}}],[\"中sync包下的mutex与rwmutex提供了互斥锁与读写锁两种实现\",{\"1\":{\"479\":1}}],[\"中需要显示的指明\",{\"1\":{\"412\":1}}],[\"中你可以仅通过函数名就知道它是干什么的\",{\"1\":{\"395\":1}}],[\"中并没有提供类似的数据结构实现\",{\"1\":{\"388\":1}}],[\"中不会\",{\"1\":{\"886\":1}}],[\"中不存在\",{\"1\":{\"383\":1}}],[\"中不行\",{\"1\":{\"312\":1}}],[\"中文汉字\",{\"1\":{\"377\":1}}],[\"中文社区\",{\"1\":{\"101\":1}}],[\"中输出有很多中方法\",{\"1\":{\"336\":1}}],[\"中如何进行输入输出\",{\"1\":{\"334\":1}}],[\"中内置的有序类型只有数字和字符串\",{\"1\":{\"332\":1}}],[\"中为不同位数的整数分配了不同的类型\",{\"1\":{\"316\":1}}],[\"中所有未删除的键值对复制到\",{\"1\":{\"1047\":1}}],[\"中所有的基础类型\",{\"1\":{\"432\":1}}],[\"中所有的花括号都不应该换行\",{\"1\":{\"309\":1}}],[\"中所有反射相关的操作都是基于这两个类型\",{\"1\":{\"429\":1}}],[\"中所有模块依赖的库做一份复制到vendor目录下\",{\"1\":{\"36\":1}}],[\"中可以携带一些基本信息\",{\"1\":{\"775\":1}}],[\"中可用的转义字符\",{\"1\":{\"305\":1}}],[\"中可能体会不到\",{\"1\":{\"162\":1}}],[\"中约定\",{\"1\":{\"296\":1}}],[\"中无法进行循环导入\",{\"1\":{\"295\":1}}],[\"中给结构体加\",{\"1\":{\"202\":1}}],[\"中定义\",{\"1\":{\"186\":1}}],[\"中定义的有效\",{\"1\":{\"934\":1}}],[\"中定义的有效的\",{\"1\":{\"934\":1}}],[\"中定义的\",{\"1\":{\"174\":1}}],[\"中获取\",{\"1\":{\"168\":1}}],[\"中尤为明显\",{\"1\":{\"162\":1}}],[\"中流对象的stream\",{\"1\":{\"162\":1}}],[\"中扮演的角色也和\",{\"1\":{\"160\":1}}],[\"中\",{\"1\":{\"58\":2,\"142\":1,\"160\":1,\"163\":2,\"164\":1,\"174\":3,\"210\":1,\"293\":1,\"315\":1,\"326\":1,\"331\":1,\"347\":1,\"353\":1,\"358\":1,\"373\":1,\"381\":1,\"382\":1,\"394\":1,\"401\":1,\"407\":1,\"427\":1,\"428\":1,\"462\":1,\"471\":1,\"513\":1,\"533\":1,\"549\":1,\"567\":1,\"580\":1,\"593\":1,\"595\":1,\"597\":1,\"617\":5,\"624\":1,\"701\":1,\"827\":1,\"828\":1,\"853\":1,\"888\":1,\"953\":1,\"977\":1,\"982\":1,\"992\":1,\"1016\":1,\"1032\":1,\"1038\":1,\"1039\":2,\"1042\":2,\"1045\":2,\"1047\":4,\"1052\":1}}],[\"中进行类型复制的库\",{\"1\":{\"810\":1}}],[\"中进行创建\",{\"1\":{\"496\":1}}],[\"中进行导入的最基本单位是一个包\",{\"1\":{\"293\":1}}],[\"中进行迭代\",{\"1\":{\"134\":1}}],[\"中进行\",{\"1\":{\"56\":1}}],[\"中的回收算法分为两种\",{\"1\":{\"1146\":1}}],[\"中的垃圾回收可以分为下面几个阶段\",{\"1\":{\"1130\":1}}],[\"中的效率并不高\",{\"1\":{\"1130\":1}}],[\"中的微分配器被分配到同一片连续内存中\",{\"1\":{\"1124\":1}}],[\"中的mspan缓存中去获取一个可用的mspan\",{\"1\":{\"1120\":1}}],[\"中的map\",{\"1\":{\"1030\":1}}],[\"中的main函数进行调用\",{\"1\":{\"531\":1}}],[\"中的内存分配器主要由msapn\",{\"1\":{\"1113\":1}}],[\"中的内存是不稳定的\",{\"1\":{\"1101\":1}}],[\"中的内存的话\",{\"1\":{\"543\":1}}],[\"中的runq本地队列\",{\"1\":{\"1088\":1}}],[\"中的deferpool尝试去获取\",{\"1\":{\"1074\":1}}],[\"中的deferpool来获取预分配的defer结构\",{\"1\":{\"1074\":1}}],[\"中的defer语句一个都没有执行\",{\"1\":{\"606\":1}}],[\"中的话\",{\"1\":{\"1047\":1}}],[\"中的oldbuckets指向原来的哈希桶数组\",{\"1\":{\"1042\":1}}],[\"中的所有元素\",{\"1\":{\"1040\":2}}],[\"中的所有内置的数据类型\",{\"1\":{\"590\":1}}],[\"中的桶的数量取余\",{\"1\":{\"1036\":1}}],[\"中的buckets也就是桶切片指针\",{\"1\":{\"1030\":1}}],[\"中的bearer\",{\"1\":{\"775\":1}}],[\"中的溢出桶\",{\"1\":{\"1030\":1}}],[\"中的哈希桶的数量为1\",{\"1\":{\"1030\":1}}],[\"中的元素数量以千万甚至亿计\",{\"1\":{\"1042\":1}}],[\"中的元素数量\",{\"1\":{\"1030\":1}}],[\"中的authorization字段中\",{\"1\":{\"1015\":1}}],[\"中的信息是以键值对的形式储存在浏览器中\",{\"1\":{\"1002\":1}}],[\"中的中间件其实用到了责任链模式\",{\"1\":{\"995\":1}}],[\"中的重定向十分简单\",{\"1\":{\"991\":1}}],[\"中的engine结构体提供了一个方法noroute\",{\"1\":{\"989\":1}}],[\"中的errno\",{\"1\":{\"531\":1}}],[\"中的国家代码值\",{\"1\":{\"934\":1}}],[\"中的时间结构体\",{\"1\":{\"740\":1}}],[\"中的基本数学操作库\",{\"1\":{\"650\":1}}],[\"中的基础类型\",{\"1\":{\"432\":1}}],[\"中的异常有三种级别\",{\"1\":{\"598\":1}}],[\"中的短变量声明有点类似动态语言的写法\",{\"1\":{\"591\":1}}],[\"中的箭头函数一样\",{\"1\":{\"587\":1}}],[\"中的表现形式就是由range返回被迭代的元素\",{\"1\":{\"582\":1}}],[\"中的生成器很类似\",{\"1\":{\"581\":1}}],[\"中的void\",{\"1\":{\"543\":1}}],[\"中的指针引用\",{\"1\":{\"543\":1}}],[\"中的枚举类型\",{\"1\":{\"542\":1}}],[\"中的联合体\",{\"1\":{\"541\":1}}],[\"中的uint8也就是byte类型\",{\"1\":{\"535\":1}}],[\"中的char对应\",{\"1\":{\"535\":1}}],[\"中的typedef关键字来给类型取个别名\",{\"1\":{\"534\":1}}],[\"中的int8类型\",{\"1\":{\"535\":1}}],[\"中的int\",{\"1\":{\"532\":1}}],[\"中的一个变量\",{\"1\":{\"532\":1}}],[\"中的支持的类型如下\",{\"1\":{\"528\":1}}],[\"中的模糊测试可以前往go\",{\"1\":{\"527\":1}}],[\"中的sort包下提供了官方实现的排序方法\",{\"1\":{\"683\":1}}],[\"中的sync\",{\"1\":{\"482\":1}}],[\"中的select监测的元素就是管道\",{\"1\":{\"471\":1}}],[\"中的值\",{\"1\":{\"429\":1}}],[\"中的类型别名\",{\"1\":{\"534\":1}}],[\"中的类型转换为上述的两种类型以便进行反射操作\",{\"1\":{\"429\":1}}],[\"中的类型\",{\"1\":{\"429\":1,\"431\":1,\"534\":1}}],[\"中的类型声明是后置的\",{\"1\":{\"328\":1}}],[\"中的反射\",{\"1\":{\"427\":1}}],[\"中的参数名可以不带名称\",{\"1\":{\"396\":1}}],[\"中的数组只是一个头指针\",{\"1\":{\"539\":1}}],[\"中的数组就是一个指向头部元素的指针\",{\"1\":{\"539\":1}}],[\"中的数组也是如此\",{\"1\":{\"392\":1}}],[\"中的数组是值类型\",{\"1\":{\"359\":1}}],[\"中的字符串\",{\"1\":{\"536\":2}}],[\"中的字符串本质上是一个结构体\",{\"1\":{\"536\":1}}],[\"中的字符串就是一个只读的字节切片\",{\"1\":{\"380\":1}}],[\"中的字符完全兼容utf8\",{\"1\":{\"304\":1}}],[\"中的应用范围要比数组广泛的多\",{\"1\":{\"363\":1}}],[\"中的格式化输出功能基本上由fmt\",{\"1\":{\"341\":1}}],[\"中的输入输出都离不开它们\",{\"1\":{\"335\":1}}],[\"中的可比较类型有\",{\"1\":{\"332\":1}}],[\"中的函数指针\",{\"1\":{\"543\":1}}],[\"中的函数参数是传值传递\",{\"1\":{\"396\":1,\"1019\":1}}],[\"中的函数不支持重载\",{\"1\":{\"395\":1}}],[\"中的函数有两个不同的点\",{\"1\":{\"307\":1}}],[\"中的函数声明方式通过func关键字来进行\",{\"1\":{\"307\":1}}],[\"中的空结构体\",{\"1\":{\"197\":1}}],[\"中的切片就只能把切片的指针传过去\",{\"1\":{\"539\":1}}],[\"中的切片\",{\"1\":{\"185\":1}}],[\"中的示例就是一个典型的一元\",{\"1\":{\"157\":1}}],[\"中的键值对\",{\"1\":{\"137\":1}}],[\"中的\",{\"1\":{\"82\":1,\"147\":1,\"162\":1,\"164\":1,\"168\":1,\"1036\":1,\"1049\":1,\"1171\":1}}],[\"中的实现\",{\"1\":{\"53\":1,\"60\":1,\"65\":1}}],[\"中的各个模块中\",{\"1\":{\"35\":1}}],[\"中的命令包含了一整套工具链\",{\"1\":{\"2\":1}}],[\"添加白色对象\",{\"1\":{\"1136\":1}}],[\"添加临时切片\",{\"1\":{\"1024\":1}}],[\"添加切片\",{\"1\":{\"1024\":1}}],[\"添加一个临时创建的切片\",{\"1\":{\"1024\":1}}],[\"添加一个切片\",{\"1\":{\"1024\":1}}],[\"添加若干个元素\",{\"1\":{\"1024\":1}}],[\"添加元素\",{\"1\":{\"1024\":1}}],[\"添加元素的工作实际上在编译期就已经做好了\",{\"1\":{\"1024\":1}}],[\"添加元素后\",{\"1\":{\"1024\":1}}],[\"添加\",{\"0\":{\"1024\":1},\"1\":{\"1165\":1}}],[\"添加的元素数量刚好大于容量\",{\"1\":{\"1019\":2}}],[\"添加的数据直接覆盖掉了\",{\"1\":{\"484\":1}}],[\"添加person与houses的关联\",{\"1\":{\"895\":1}}],[\"添加person与mom的关联\",{\"1\":{\"895\":1}}],[\"添加school与person的关联\",{\"1\":{\"895\":1}}],[\"添加日志输出器\",{\"1\":{\"841\":1}}],[\"添加新元素\",{\"1\":{\"371\":1}}],[\"添加新的项目\",{\"1\":{\"50\":1}}],[\"添加如下映射\",{\"1\":{\"174\":1}}],[\"添加链式拦截器\",{\"1\":{\"165\":1}}],[\"添加和移除模块路径\",{\"1\":{\"34\":1}}],[\"添加依赖\",{\"1\":{\"2\":1}}],[\"路由匹配\",{\"1\":{\"1016\":1}}],[\"路由调试日志格式\",{\"0\":{\"1008\":1}}],[\"路由\",{\"0\":{\"989\":1,\"990\":1},\"1\":{\"1008\":2}}],[\"路由管理是一个系统中非常重要的部分\",{\"1\":{\"987\":1}}],[\"路由管理\",{\"0\":{\"987\":1}}],[\"路由参数其实是封装了httprouter的参数解析功能\",{\"1\":{\"968\":1}}],[\"路由参数\",{\"0\":{\"968\":1},\"1\":{\"967\":1}}],[\"路由参数自动解析\",{\"1\":{\"954\":1}}],[\"路由组\",{\"0\":{\"988\":1},\"1\":{\"963\":1}}],[\"路由本身实现了其接口\",{\"1\":{\"956\":1}}],[\"路由器会将其捕获并记录\",{\"1\":{\"954\":1}}],[\"路由器的设计鼓励合理的分层的\",{\"1\":{\"954\":1}}],[\"路由器就会把动态值传递给你\",{\"1\":{\"954\":1}}],[\"路径参数示例\",{\"1\":{\"968\":1}}],[\"路径参数解析的占用非常低廉\",{\"1\":{\"954\":1}}],[\"路径自动校正\",{\"1\":{\"954\":1}}],[\"路径下递归搜索模块\",{\"1\":{\"33\":1}}],[\"路漫漫其修远兮\",{\"1\":{\"0\":2}}],[\"多标\",{\"1\":{\"1136\":1}}],[\"多行\",{\"1\":{\"1067\":1}}],[\"多行指令以\",{\"1\":{\"12\":1}}],[\"多文件上传\",{\"0\":{\"985\":1}}],[\"多次绑定\",{\"0\":{\"975\":1}}],[\"多次使用也只会有一个能恢复panic\",{\"1\":{\"607\":1}}],[\"多亏了\",{\"1\":{\"962\":1}}],[\"多语言通用\",{\"1\":{\"1004\":1}}],[\"多语言\",{\"0\":{\"952\":1}}],[\"多数据库\",{\"1\":{\"849\":1}}],[\"多数据中心搭建示例\",{\"0\":{\"144\":1}}],[\"多数据中心的沟通方式就是\",{\"1\":{\"142\":1}}],[\"多数据中心\",{\"1\":{\"139\":1}}],[\"多态\",{\"1\":{\"849\":1}}],[\"多对多关联删除\",{\"1\":{\"898\":1}}],[\"多对多关联更新\",{\"1\":{\"897\":1}}],[\"多对多关联查找\",{\"1\":{\"896\":1}}],[\"多对多关联\",{\"1\":{\"895\":1}}],[\"多对多关系一般需要创建连接表\",{\"1\":{\"893\":1}}],[\"多对多\",{\"0\":{\"893\":1},\"1\":{\"849\":1}}],[\"多租户领域模型相较于传统rbac模型多了dom字段\",{\"1\":{\"767\":1}}],[\"多租户领域模型\",{\"0\":{\"767\":1}}],[\"多\",{\"1\":{\"617\":1}}],[\"多了会无法通过编译\",{\"1\":{\"582\":1}}],[\"多个协程需要等待某些条件满足才能继续执行\",{\"1\":{\"1170\":1}}],[\"多个协程读取和访问一个共享数据时\",{\"1\":{\"479\":1}}],[\"多个标记任务和用户程序之间并发的执行\",{\"1\":{\"1138\":1}}],[\"多个线程对应多个协程\",{\"1\":{\"1085\":1}}],[\"多个线程也可以利用好多核\",{\"1\":{\"1085\":1}}],[\"多个字段使用相同的名称则创建复合索引\",{\"1\":{\"862\":1}}],[\"多个字段形成联合主键\",{\"1\":{\"858\":1}}],[\"多个实例\",{\"0\":{\"799\":1}}],[\"多个是select\",{\"1\":{\"234\":1}}],[\"多路复用的解决方案\",{\"1\":{\"471\":1}}],[\"多维切片\",{\"0\":{\"370\":1}}],[\"多长时间检测一下\",{\"1\":{\"242\":1}}],[\"多用于结构体之间的转换\",{\"1\":{\"810\":1}}],[\"多用于数据结构的输出\",{\"1\":{\"341\":1}}],[\"多用于数据可视化\",{\"1\":{\"76\":1}}],[\"多用于\",{\"1\":{\"180\":1,\"629\":1}}],[\"多节点集群示例\",{\"1\":{\"143\":1}}],[\"多版本管理\",{\"0\":{\"93\":1}}],[\"多功能工具库\",{\"1\":{\"82\":1}}],[\"多模块管理的本地开发工具\",{\"1\":{\"31\":1}}],[\"├─bin\",{\"1\":{\"200\":1}}],[\"├─monster\",{\"1\":{\"193\":1,\"201\":2}}],[\"├─pmezard\",{\"1\":{\"28\":1}}],[\"├─pkg\",{\"1\":{\"28\":1}}],[\"├─davecgh\",{\"1\":{\"28\":1}}],[\"├─github\",{\"1\":{\"28\":1}}],[\"│\",{\"1\":{\"28\":16,\"193\":4,\"200\":16,\"201\":8,\"526\":21}}],[\"先原子地减去\",{\"1\":{\"1158\":1}}],[\"先从灰色对象开始\",{\"1\":{\"1135\":1}}],[\"先从最简单的标记清除算法开始讲起\",{\"1\":{\"1134\":1}}],[\"先是mcache\",{\"1\":{\"1125\":1}}],[\"先是添加了大量的元素\",{\"1\":{\"1043\":1}}],[\"先创建一个闭包函数来创建中间件\",{\"1\":{\"993\":1}}],[\"先将源文件编译成目标文件\",{\"1\":{\"546\":1}}],[\"先将内容读到缓冲区中\",{\"1\":{\"419\":1}}],[\"先后顺序\",{\"1\":{\"462\":1}}],[\"先后顺序不代表排名\",{\"1\":{\"50\":1}}],[\"先只需要了解这两个类型的存在即可\",{\"1\":{\"429\":1}}],[\"先看一个例子\",{\"1\":{\"413\":1}}],[\"先声明泛型结构体\",{\"1\":{\"578\":1}}],[\"先声明\",{\"1\":{\"412\":1}}],[\"先声明了一个类型intslice\",{\"1\":{\"412\":1}}],[\"先准备结构体\",{\"1\":{\"621\":1}}],[\"先准备数据\",{\"1\":{\"216\":1}}],[\"先准备四台虚拟机\",{\"1\":{\"143\":1}}],[\"先导入\",{\"1\":{\"202\":1}}],[\"先运行服务端\",{\"1\":{\"155\":1}}],[\"先下载\",{\"1\":{\"148\":1}}],[\"先启动服务端\",{\"1\":{\"145\":1}}],[\"先前的版本不再支持\",{\"1\":{\"116\":2}}],[\"先前接触过一段时间的\",{\"1\":{\"0\":1}}],[\"先来讲讲这个state\",{\"1\":{\"1151\":1}}],[\"先来讲第一种文件夹模式\",{\"1\":{\"38\":1}}],[\"先来认识下channel的基本语法\",{\"1\":{\"463\":1}}],[\"先来介绍第一种使用方法\",{\"1\":{\"416\":1}}],[\"先来看看最简单的trylock\",{\"1\":{\"1157\":1}}],[\"先来看看trylock的代码\",{\"1\":{\"1152\":1}}],[\"先来看看接口长什么样子\",{\"1\":{\"565\":1}}],[\"先来看看的一个例子\",{\"1\":{\"479\":1}}],[\"先来看看context接口的定义\",{\"1\":{\"474\":1}}],[\"先来看一个简单的例子\",{\"1\":{\"571\":1}}],[\"先来看一个简单的示例\",{\"1\":{\"37\":1}}],[\"先来看一个例子\",{\"1\":{\"412\":1,\"567\":1}}],[\"先来看一段\",{\"1\":{\"392\":1}}],[\"先来看下面的一个例子\",{\"1\":{\"370\":1}}],[\"先来初始化一个长度为\",{\"1\":{\"360\":1}}],[\"先用go\",{\"1\":{\"28\":1}}],[\"出安全考虑\",{\"1\":{\"545\":1}}],[\"出现在这里仅仅只是为了文档目的\",{\"1\":{\"746\":1,\"747\":1}}],[\"出现的地方\",{\"1\":{\"427\":1}}],[\"出现错误时不退出仍然继续\",{\"1\":{\"28\":1}}],[\"出品\",{\"1\":{\"94\":1}}],[\"出错\",{\"1\":{\"24\":1}}],[\"秉承的向下兼容的承诺\",{\"1\":{\"28\":1}}],[\"之后换成了连续栈\",{\"1\":{\"1103\":1}}],[\"之后会在后台不断地监控\",{\"1\":{\"1082\":1}}],[\"之后每次请求服务器通过\",{\"1\":{\"1003\":1}}],[\"之后\",{\"1\":{\"534\":1,\"823\":1}}],[\"之所以会阻塞是因为编译器将其翻译成了对runtime\",{\"1\":{\"1066\":1}}],[\"之所以要去判断k是否与自身相等\",{\"1\":{\"1037\":1}}],[\"之所以不可移植的原因是一些操作的结果取决于操作系统实现\",{\"1\":{\"745\":1}}],[\"之所以不使用空结构体\",{\"1\":{\"475\":1}}],[\"之所以能成功调用\",{\"1\":{\"532\":1}}],[\"之所以被称作乐观锁\",{\"1\":{\"490\":1}}],[\"之所以保留\",{\"1\":{\"28\":1}}],[\"之间隔岸观火的情况了\",{\"1\":{\"1104\":1}}],[\"之间切换也会不小的造成性能损失\",{\"1\":{\"547\":1}}],[\"之间传递指针\",{\"1\":{\"543\":1}}],[\"之间传递字符串和字节切片\",{\"1\":{\"536\":1}}],[\"之间相互调用最大的问题就是两门语言的内存模型并不相同\",{\"1\":{\"543\":1}}],[\"之间的联系\",{\"1\":{\"1106\":1}}],[\"之间的关系\",{\"1\":{\"1104\":1}}],[\"之间的关联并进入新的调度循环从而将执行权让给其它的\",{\"1\":{\"1098\":1}}],[\"之间的关联\",{\"1\":{\"1096\":1}}],[\"之间的工作\",{\"1\":{\"1088\":1}}],[\"之间的随机数\",{\"1\":{\"1067\":1}}],[\"之间的整数映射关系如下表所示\",{\"1\":{\"537\":1}}],[\"之间的类型做了一个映射\",{\"1\":{\"534\":1}}],[\"之间的相互转换\",{\"1\":{\"168\":1}}],[\"之间\",{\"1\":{\"380\":1}}],[\"之旅\",{\"0\":{\"287\":1}}],[\"之前的例子就不再会永久阻塞主协程了\",{\"1\":{\"1107\":1}}],[\"之前的章节中已经介绍过它的一些应用\",{\"1\":{\"580\":1}}],[\"之前所以fatal\",{\"1\":{\"1054\":1}}],[\"之前提到的关联查询是对关联关系进行查询\",{\"1\":{\"899\":1}}],[\"之前提到过任何自定义类型都可以拥有方法\",{\"1\":{\"567\":1}}],[\"之前提到过\",{\"1\":{\"163\":1}}],[\"之前\",{\"1\":{\"133\":1,\"387\":1,\"867\":1,\"1062\":1,\"1106\":2}}],[\"之类的传递参数\",{\"1\":{\"8\":1}}],[\"之类的\",{\"1\":{\"7\":1,\"1010\":1}}],[\"臃肿的node\",{\"1\":{\"28\":1}}],[\"引子\",{\"0\":{\"1069\":1}}],[\"引入\",{\"0\":{\"532\":1}}],[\"引入的关于多模块管理的一个新的解决方案\",{\"1\":{\"512\":1}}],[\"引入互斥锁会极大的降低性能\",{\"1\":{\"389\":1}}],[\"引入了终止语句的概念\",{\"1\":{\"136\":1}}],[\"引用了对象\",{\"1\":{\"1144\":1}}],[\"引用了开放编码优化\",{\"1\":{\"123\":1}}],[\"引用计数\",{\"1\":{\"1130\":1}}],[\"引用局部指针\",{\"0\":{\"550\":1}}],[\"引用\",{\"0\":{\"500\":1}}],[\"引用方\",{\"1\":{\"27\":1}}],[\"引擎研发者\",{\"1\":{\"87\":1}}],[\"引擎\",{\"1\":{\"55\":1}}],[\"引言\",{\"0\":{\"0\":1}}],[\"下游是否被黑色对象引用\",{\"1\":{\"1143\":1}}],[\"下游也有很多服务\",{\"1\":{\"169\":1}}],[\"下半部分则在进行栈扩容检测\",{\"1\":{\"1106\":1}}],[\"下文中为了方便\",{\"1\":{\"429\":1}}],[\"下方是自动生成的docs\",{\"1\":{\"1016\":1}}],[\"下方是一些示例\",{\"1\":{\"792\":1}}],[\"下方是一个例子\",{\"1\":{\"790\":1}}],[\"下方是一个向nil的\",{\"1\":{\"604\":1}}],[\"下方是一个简单示例\",{\"1\":{\"509\":1}}],[\"下方是一个使用示例\",{\"1\":{\"409\":1}}],[\"下方例子中不管传什么类型都无法通过编译\",{\"1\":{\"574\":1}}],[\"下方列出所有的内置关键字\",{\"1\":{\"298\":1}}],[\"下列是一些普通字符串\",{\"1\":{\"374\":1}}],[\"下列代码就属于这种情况\",{\"1\":{\"371\":1}}],[\"下划线组成\",{\"1\":{\"298\":1}}],[\"下\",{\"1\":{\"201\":1}}],[\"下图很形象的描述了其过程\",{\"1\":{\"429\":1}}],[\"下图\",{\"1\":{\"164\":1}}],[\"下午有没有时间一起打游戏\",{\"1\":{\"158\":4}}],[\"下载当前项目的依赖包\",{\"1\":{\"506\":1}}],[\"下载\",{\"1\":{\"231\":1}}],[\"下载sqlx库\",{\"1\":{\"231\":1}}],[\"下载依赖\",{\"0\":{\"502\":1}}],[\"下载依赖的话使用下面的地址就行了\",{\"1\":{\"220\":1}}],[\"下载依赖时会进行语义化版本验证\",{\"1\":{\"124\":1}}],[\"下载官方的依赖库\",{\"1\":{\"204\":1}}],[\"下载下来的编译器默认不支持\",{\"1\":{\"200\":1}}],[\"下载好后将\",{\"1\":{\"200\":1}}],[\"下载完成后需要将\",{\"1\":{\"148\":1}}],[\"下载地址\",{\"1\":{\"148\":1}}],[\"下载到本地\",{\"1\":{\"91\":1}}],[\"下载缺失的依赖\",{\"1\":{\"22\":1}}],[\"下面简单的解释说明一下\",{\"1\":{\"1131\":1}}],[\"下面简单介绍下\",{\"1\":{\"900\":1}}],[\"下面一组图展示了从\",{\"1\":{\"1130\":1}}],[\"下面一个例子是解析域名的\",{\"1\":{\"681\":1}}],[\"下面按照顺序来讲讲这四件事\",{\"1\":{\"1118\":1}}],[\"下面几个字段记录了\",{\"1\":{\"1088\":1}}],[\"下面几个比较常见的\",{\"1\":{\"336\":1}}],[\"下面分别进行讲解\",{\"1\":{\"1067\":1}}],[\"下面换个声明字符串的方式看看有什么区别\",{\"1\":{\"1054\":1}}],[\"下面例子中的index\",{\"1\":{\"980\":1}}],[\"下面例子中的integer就是一个类型空集\",{\"1\":{\"574\":1}}],[\"下面加一个学校结构体\",{\"1\":{\"892\":1}}],[\"下面加上\",{\"1\":{\"527\":1}}],[\"下面来看看concatstrings函数里面干了些什么\",{\"1\":{\"1053\":1}}],[\"下面来看看它的内部长什么样\",{\"1\":{\"1018\":1}}],[\"下面来看一个嵌套预加载的例子\",{\"1\":{\"899\":1}}],[\"下面来看一个关于模板引擎的简单使用示例\",{\"1\":{\"723\":1}}],[\"下面来看一个读写互斥锁的使用案例\",{\"1\":{\"481\":1}}],[\"下面来通过一个案例加深一下理解\",{\"1\":{\"824\":1}}],[\"下面给出一些常见签名算法的类型\",{\"1\":{\"777\":1}}],[\"下面给出一些参考的开源项目\",{\"1\":{\"612\":1}}],[\"下面以最简单的方式展示传入的请求\",{\"1\":{\"764\":1}}],[\"下面以一个字符串拼接的例子的性能比较来当作基准测试的例子\",{\"1\":{\"525\":1}}],[\"下面以一个int64类型演示为例\",{\"1\":{\"489\":1}}],[\"下面以一个例子演示\",{\"1\":{\"485\":1}}],[\"下面逐一讲解并结合代码示例\",{\"1\":{\"967\":1}}],[\"下面逐一讲解\",{\"1\":{\"674\":1}}],[\"下面只是一些参考项目\",{\"1\":{\"615\":1}}],[\"下面只会介绍常用的参数\",{\"1\":{\"519\":1}}],[\"下面推荐几个命令行开发框架或库\",{\"1\":{\"615\":1}}],[\"下面稍微修改一下代码\",{\"1\":{\"606\":1}}],[\"下面通过一个例子来演示\",{\"1\":{\"583\":1}}],[\"下面通过一个例子来演示单向流式的操作\",{\"1\":{\"158\":1}}],[\"下面通过一个例子来初步认识迭代器\",{\"1\":{\"581\":1}}],[\"下面用泛型实现一个简单的队列\",{\"1\":{\"577\":1}}],[\"下面用一个简单的示例来演示下sync\",{\"1\":{\"486\":1}}],[\"下面借由两个数据结构来展示下泛型如何使用\",{\"1\":{\"576\":1}}],[\"下面举几个比较特殊的例子\",{\"1\":{\"567\":1}}],[\"下面举个例子\",{\"1\":{\"16\":1,\"524\":1}}],[\"下面创建的切片申请了1<<15的容量\",{\"1\":{\"552\":1}}],[\"下面演示如何删除关联\",{\"1\":{\"898\":1}}],[\"下面演示如何进行更新关联\",{\"1\":{\"897\":1}}],[\"下面演示如何进行查找关联\",{\"1\":{\"896\":1}}],[\"下面演示一个不同类型结构体转换的例子\",{\"1\":{\"812\":1}}],[\"下面演示制作一个简单的动态链接库\",{\"1\":{\"545\":1}}],[\"下面演示都以官方服务器为准\",{\"1\":{\"105\":1}}],[\"下面拿官方教程的例子来讲解\",{\"1\":{\"527\":1}}],[\"下面拿实际的代码举例\",{\"1\":{\"518\":1}}],[\"下面解释一下基准测试的输出结果\",{\"1\":{\"525\":1}}],[\"下面依旧通过例子来演示\",{\"1\":{\"521\":1}}],[\"下面将以示例的形式讲解常用的函数\",{\"1\":{\"703\":1}}],[\"下面将以一个\",{\"1\":{\"150\":1}}],[\"下面将会以例子的形式演示如何使用\",{\"1\":{\"691\":1}}],[\"下面将通过一个示例进行讲解\",{\"1\":{\"512\":1}}],[\"下面将通过示例来演示进行模块开发的几个步骤\",{\"1\":{\"493\":1}}],[\"下面两个例子都无法通过编译\",{\"1\":{\"491\":1}}],[\"下面再改一下\",{\"1\":{\"402\":1}}],[\"下面复习下\",{\"1\":{\"393\":1}}],[\"下面看个例子\",{\"1\":{\"878\":1}}],[\"下面看复制切片\",{\"1\":{\"812\":1}}],[\"下面看几个简单的例子\",{\"1\":{\"731\":1}}],[\"下面看几个例子\",{\"1\":{\"365\":1}}],[\"下面看看一个select语句长什么样\",{\"1\":{\"471\":1}}],[\"下面看一个迭代的例子\",{\"1\":{\"732\":1}}],[\"下面看一个valuectx的简单使用案例\",{\"1\":{\"476\":1}}],[\"下面看一个例子\",{\"1\":{\"296\":1,\"899\":1,\"901\":1,\"902\":1,\"950\":1}}],[\"下面看一个示例\",{\"1\":{\"28\":1}}],[\"下面看一个使用案例\",{\"1\":{\"23\":1}}],[\"下面这个例子的情况就更加明显了\",{\"1\":{\"402\":1}}],[\"下面这个例子展示了通过embed指令嵌入\",{\"1\":{\"41\":1}}],[\"下面这个例子展示了从嵌入的文件中读取内容\",{\"1\":{\"41\":1}}],[\"下面这个代码就可以通过编译\",{\"1\":{\"329\":1}}],[\"下面这种代码无法通过编译\",{\"1\":{\"329\":1}}],[\"下面列出\",{\"1\":{\"314\":1}}],[\"下面就会介绍其原理\",{\"1\":{\"1056\":1}}],[\"下面就来讲讲到底是怎么个回事\",{\"1\":{\"1069\":1}}],[\"下面就来了解selectgo函数内部是如何工作的\",{\"1\":{\"1067\":1}}],[\"下面就来逐一讲解\",{\"1\":{\"548\":1}}],[\"下面就来略微细致地去了解里面的概念\",{\"1\":{\"292\":1}}],[\"下面就是一个例子\",{\"1\":{\"166\":1}}],[\"下面就是一个简单的例子\",{\"1\":{\"166\":1}}],[\"下面会对其结构进行简单的介绍\",{\"1\":{\"1085\":1}}],[\"下面会讲一讲生成的代码长什么样\",{\"1\":{\"1024\":1}}],[\"下面会关注于append是如何工作的\",{\"1\":{\"1024\":1}}],[\"下面会介绍validator的一些基本使用以及一些代码示例\",{\"1\":{\"939\":1}}],[\"下面会演示一些示例\",{\"1\":{\"778\":1}}],[\"下面会简单列举一些规则\",{\"1\":{\"308\":1}}],[\"下面会简单演示用法\",{\"1\":{\"216\":1}}],[\"下面会根据一个非常简单的示例来进行描述\",{\"1\":{\"164\":1}}],[\"下面编写一个自定义解析器\",{\"1\":{\"175\":1}}],[\"下面搭建一个简单的\",{\"1\":{\"143\":1}}],[\"下面对它的一些字段做一些简单的解释\",{\"1\":{\"1037\":1}}],[\"下面对比较重要的字段进行一些简单的解释\",{\"1\":{\"1030\":1}}],[\"下面对一些术语进行讲解\",{\"1\":{\"142\":1}}],[\"下面对本站的内容进行一个简单的介绍\",{\"1\":{\"96\":1}}],[\"下面的内容还是会使用它来进行讲述\",{\"1\":{\"1052\":1}}],[\"下面的几种\",{\"1\":{\"956\":1}}],[\"下面的mysqlclient和system的\",{\"1\":{\"824\":1}}],[\"下面的模板操作都属于管道操作\",{\"1\":{\"729\":1}}],[\"下面的例子以embed\",{\"1\":{\"736\":1}}],[\"下面的例子演示了在\",{\"1\":{\"536\":1}}],[\"下面的例子是一个普通管道的模样\",{\"1\":{\"463\":1}}],[\"下面的每一个测试用例的结果由每一个基准测试的名称分隔\",{\"1\":{\"525\":1}}],[\"下面的\",{\"1\":{\"105\":1}}],[\"下面是各个字段的释义\",{\"1\":{\"1155\":1}}],[\"下面是lock的代码\",{\"1\":{\"1153\":1}}],[\"下面是官方给出的的伪代码\",{\"1\":{\"1144\":1}}],[\"下面是简化的后代码\",{\"1\":{\"1107\":1}}],[\"下面是简化后的代码\",{\"1\":{\"1089\":1,\"1093\":1,\"1116\":1,\"1122\":1}}],[\"下面是使用\",{\"1\":{\"791\":1}}],[\"下面是内置的所有函数\",{\"1\":{\"728\":1}}],[\"下面是详细些的解释\",{\"1\":{\"505\":1}}],[\"下面是该结构体对外暴露的方法\",{\"1\":{\"486\":1}}],[\"下面是可能的情况之一\",{\"1\":{\"462\":1}}],[\"下面是代码示例\",{\"1\":{\"433\":1}}],[\"下面是\",{\"1\":{\"299\":1,\"341\":1,\"862\":1}}],[\"下面是删除单个文件的例子\",{\"1\":{\"421\":1}}],[\"下面是删除目录的例子\",{\"1\":{\"421\":1}}],[\"下面是删除多个文档的例子\",{\"1\":{\"228\":1}}],[\"下面是删除一个文档的例子\",{\"1\":{\"228\":1}}],[\"下面是更新多个文档的示例\",{\"1\":{\"227\":1}}],[\"下面是更新单个文档的示例\",{\"1\":{\"227\":1}}],[\"下面是创建多个文档的例子\",{\"1\":{\"226\":1}}],[\"下面是创建一个文档的例子\",{\"1\":{\"226\":1}}],[\"下面是一些简单的解释\",{\"1\":{\"852\":1}}],[\"下面是一些工作区的命令\",{\"1\":{\"514\":1}}],[\"下面是一些总结\",{\"1\":{\"468\":1}}],[\"下面是一些类型判断方式\",{\"1\":{\"460\":1}}],[\"下面是一些例子\",{\"1\":{\"393\":1,\"460\":1}}],[\"下面是一张\",{\"1\":{\"172\":1}}],[\"下面是一个例图\",{\"1\":{\"1144\":1}}],[\"下面是一个例子\",{\"1\":{\"10\":1,\"13\":1,\"523\":1,\"886\":1,\"1070\":1}}],[\"下面是一个通过\",{\"1\":{\"1052\":1}}],[\"下面是一个具体的policy例子\",{\"1\":{\"760\":1}}],[\"下面是一个字节切片转字符串的例子\",{\"1\":{\"756\":1}}],[\"下面是一个比较复杂的例子\",{\"1\":{\"606\":1}}],[\"下面是一个简单二项堆的实现\",{\"1\":{\"578\":1}}],[\"下面是一个简单的分页示例\",{\"1\":{\"877\":1}}],[\"下面是一个简单的rbac模型\",{\"1\":{\"765\":1}}],[\"下面是一个简单的timerctx的使用示例\",{\"1\":{\"478\":1}}],[\"下面是一个简单的示例\",{\"1\":{\"477\":1,\"875\":1}}],[\"下面是一个简单的结构体的例子\",{\"1\":{\"403\":1}}],[\"下面是一个简单的函数返回值的例子\",{\"1\":{\"397\":1}}],[\"下面是一个简单的\",{\"1\":{\"221\":1,\"540\":1}}],[\"下面是一个简单的流式\",{\"1\":{\"165\":1}}],[\"下面是一个简单的一元\",{\"1\":{\"165\":1}}],[\"下面是一个简单的例子\",{\"1\":{\"6\":1,\"8\":1,\"10\":1,\"326\":1,\"341\":1,\"541\":1,\"542\":1,\"682\":1}}],[\"下面是一个官网给的例子\",{\"1\":{\"508\":1}}],[\"下面是一个修改字段的例子\",{\"1\":{\"449\":1}}],[\"下面是一个以os\",{\"1\":{\"418\":1}}],[\"下面是一个以读写模式打开一个文件的代码例子\",{\"1\":{\"416\":1}}],[\"下面是一个完整的例子\",{\"1\":{\"395\":1,\"600\":1}}],[\"下面是一个名为search\",{\"1\":{\"181\":1}}],[\"下面是一个使用案例\",{\"1\":{\"166\":1,\"198\":1}}],[\"下面是一个示例\",{\"1\":{\"145\":1,\"764\":1}}],[\"下面是一个错误示例\",{\"1\":{\"137\":1}}],[\"下面是比较重要的变化\",{\"1\":{\"131\":1}}],[\"下面是env文件的初始设置\",{\"1\":{\"92\":1}}],[\"下面是它的其它参数\",{\"1\":{\"40\":1}}],[\"下面是几个使用例子\",{\"1\":{\"25\":1}}],[\"下面介绍几个比较实用的功能\",{\"1\":{\"585\":1}}],[\"下面介绍几个常用的参数\",{\"1\":{\"9\":1}}],[\"下面介绍常见的输入方法\",{\"1\":{\"342\":1}}],[\"下面介绍如何快速搭建一个\",{\"1\":{\"141\":1}}],[\"下面介绍一些常用的环境变量\",{\"1\":{\"7\":1}}],[\"项目该如何构建\",{\"1\":{\"1008\":1}}],[\"项目我比较推荐参考该项目进行学习\",{\"1\":{\"610\":1}}],[\"项目的模块名称\",{\"1\":{\"509\":1}}],[\"项目的依赖\",{\"1\":{\"7\":1}}],[\"项目都会生成一个go\",{\"1\":{\"509\":1}}],[\"项目都在采用\",{\"1\":{\"492\":1}}],[\"项目共享该目录下的缓存\",{\"1\":{\"507\":1}}],[\"项目结构\",{\"0\":{\"150\":1}}],[\"项目下都会有一个\",{\"1\":{\"28\":1}}],[\"项目\",{\"1\":{\"22\":1,\"23\":1,\"493\":1,\"1011\":1}}],[\"后半部分分配给lockorder数组\",{\"1\":{\"1067\":2}}],[\"后半部分存放的读管道\",{\"1\":{\"1067\":1}}],[\"后移新桶目的指针\",{\"1\":{\"1042\":1}}],[\"后端将所有数据处理完成后\",{\"1\":{\"978\":1}}],[\"后端程序员需要负责对于api权限的管理\",{\"1\":{\"758\":1}}],[\"后记\",{\"0\":{\"609\":1}}],[\"后面所讲的两个锁也是都实现了该接口\",{\"1\":{\"1150\":1}}],[\"后面的工作跟之前就没什么两样了\",{\"1\":{\"1102\":1}}],[\"后面的已经遍历过了\",{\"1\":{\"1037\":1}}],[\"后面可以忽略它\",{\"1\":{\"1067\":1}}],[\"后面就是每当读协程\",{\"1\":{\"467\":1}}],[\"后面跟着的是被导入的包名\",{\"1\":{\"292\":1}}],[\"后面都停止维护了\",{\"1\":{\"219\":1}}],[\"后续新到达的协程会被添加到链表头部\",{\"1\":{\"1169\":1}}],[\"后续版本有关垃圾回收的优化也都是建立在混合写屏障的基础之上的\",{\"1\":{\"1144\":1}}],[\"后续标记过程中它最终会被标记为灰色对象\",{\"1\":{\"1136\":1}}],[\"后续再直接修改字节切片\",{\"1\":{\"1054\":1}}],[\"后续不会有任何修改\",{\"1\":{\"1054\":1}}],[\"后续会对其操作进行更加细致的分析\",{\"1\":{\"1045\":1}}],[\"后续会进行深入分析\",{\"1\":{\"381\":1}}],[\"后续在迭代时\",{\"1\":{\"1037\":1}}],[\"后续都是空的\",{\"1\":{\"1036\":1}}],[\"后续可以凭借自己的摸索编写一些功能更实用的中间件\",{\"1\":{\"996\":1}}],[\"后续的是支持的语言\",{\"1\":{\"952\":1}}],[\"后续的内容中会进行更细致的展开\",{\"1\":{\"313\":1}}],[\"后续的内容除非必要\",{\"1\":{\"159\":1}}],[\"后续是字段名称\",{\"1\":{\"828\":1}}],[\"后续讨论可能会将其置为可选项\",{\"1\":{\"789\":1}}],[\"后续查阅文档时也可以来这里\",{\"1\":{\"503\":1}}],[\"后续也会讲到\",{\"1\":{\"355\":1}}],[\"后续如果我们自己实现服务接口\",{\"1\":{\"152\":1}}],[\"后续用到的\",{\"1\":{\"147\":1}}],[\"后台标记\",{\"0\":{\"1138\":1}}],[\"后台\",{\"1\":{\"141\":1}}],[\"后则会正常输出\",{\"1\":{\"115\":1}}],[\"后\",{\"1\":{\"20\":1,\"742\":1,\"775\":1,\"1104\":1}}],[\"后者实现了调步算法\",{\"1\":{\"1131\":1}}],[\"后者存放无空闲内存的mspan\",{\"1\":{\"1117\":1}}],[\"后者的代码如下\",{\"1\":{\"1098\":1}}],[\"后者的优先级高于前者\",{\"1\":{\"174\":1}}],[\"后者负责让\",{\"1\":{\"1104\":1}}],[\"后者负责调度器的初始化\",{\"1\":{\"1089\":1}}],[\"后者负责记录\",{\"1\":{\"18\":1}}],[\"后者复制的切片与前者毫不相干\",{\"1\":{\"1019\":1}}],[\"后者则不会\",{\"1\":{\"971\":1}}],[\"后者则会直接停止执行\",{\"1\":{\"521\":1}}],[\"后者接收实体模型\",{\"1\":{\"869\":1}}],[\"后者可以对复制行为进行一些自定义的配置\",{\"1\":{\"812\":1}}],[\"后者可以以文件夹\",{\"1\":{\"14\":1}}],[\"后者兼容了网页\",{\"1\":{\"771\":1}}],[\"后者仅仅是一个整数值\",{\"1\":{\"751\":1}}],[\"后者基于前者并做了很多关于html的安全处理\",{\"1\":{\"722\":1}}],[\"后者还会因为各种各样的处理导致性能上的拖累\",{\"1\":{\"583\":1}}],[\"后者openfile能够提供更加细粒度的控制\",{\"1\":{\"416\":1}}],[\"后者使用起来更类似于继承\",{\"1\":{\"407\":1}}],[\"后者有序\",{\"1\":{\"381\":1}}],[\"后者是复杂\",{\"1\":{\"984\":1}}],[\"后者是寻找后缀\",{\"1\":{\"711\":1}}],[\"后者是函数\",{\"1\":{\"710\":1}}],[\"后者是指定一个超时的时间间隔\",{\"1\":{\"478\":1}}],[\"后者是直接替换文档\",{\"1\":{\"227\":1}}],[\"后者是由\",{\"1\":{\"8\":1}}],[\"后者是\",{\"1\":{\"8\":1}}],[\"后者\",{\"1\":{\"8\":1}}],[\"自旋次数小于runtime\",{\"1\":{\"1153\":1}}],[\"自旋锁的忙等待特性会导致线程在高速缓存\",{\"1\":{\"1153\":1}}],[\"自旋是一种多线程间同步机制\",{\"1\":{\"1153\":1}}],[\"自行将执行权让给其它的\",{\"1\":{\"1106\":1}}],[\"自行编写一遍过程\",{\"1\":{\"986\":1}}],[\"自己抽象的一个概念\",{\"1\":{\"1085\":1}}],[\"自己实现默认的代码生成的服务\",{\"1\":{\"158\":1}}],[\"自从前端革命以来\",{\"1\":{\"1004\":1}}],[\"自身的地址\",{\"1\":{\"719\":1}}],[\"自动步长\",{\"1\":{\"862\":1}}],[\"自动迁移到数据库中\",{\"1\":{\"893\":1}}],[\"自动迁移\",{\"1\":{\"849\":1}}],[\"自动\",{\"0\":{\"557\":1,\"901\":1}}],[\"自动和手动\",{\"1\":{\"555\":1}}],[\"自动感知\",{\"1\":{\"7\":1}}],[\"自减\",{\"1\":{\"256\":1}}],[\"自增\",{\"1\":{\"256\":1}}],[\"自定义结构体验证函数\",{\"0\":{\"951\":1}}],[\"自定义类型验证函数\",{\"0\":{\"950\":1}}],[\"自定义验证函数\",{\"0\":{\"949\":1}}],[\"自定义别名\",{\"0\":{\"948\":1}}],[\"自定义多语言错误信息\",{\"1\":{\"927\":1}}],[\"自定义nowfunc\",{\"1\":{\"852\":1}}],[\"自定义logger\",{\"1\":{\"852\":1}}],[\"自定义的命名策略\",{\"1\":{\"852\":1}}],[\"自定义时间格式\",{\"1\":{\"840\":1}}],[\"自定义\",{\"0\":{\"781\":1,\"784\":1,\"813\":1},\"1\":{\"849\":1}}],[\"自定义函数的返回值一般有两个\",{\"1\":{\"728\":1}}],[\"自定义排序\",{\"0\":{\"688\":1}}],[\"自定义error\",{\"1\":{\"603\":1}}],[\"自定义错误\",{\"0\":{\"601\":1}}],[\"自定义错误是通过var来声明的\",{\"1\":{\"598\":1}}],[\"自定义服务解析\",{\"0\":{\"175\":1}}],[\"自定义解析器就是把\",{\"1\":{\"175\":1}}],[\"自定义解析器\",{\"1\":{\"145\":1}}],[\"自然释放内存的时候也由它来进行释放\",{\"1\":{\"1121\":1}}],[\"自然p\",{\"1\":{\"1080\":1}}],[\"自然不会有这种特殊待遇了\",{\"1\":{\"751\":1}}],[\"自然闭包函数也就无法恢复panic\",{\"1\":{\"607\":1}}],[\"自然也就不再需要\",{\"1\":{\"536\":1}}],[\"自然也就没有入口文件\",{\"1\":{\"19\":1}}],[\"自然所有的case都不可用\",{\"1\":{\"471\":1}}],[\"自然而然实现animal接口的就是dog指针\",{\"1\":{\"414\":1}}],[\"自然errors\",{\"1\":{\"167\":1}}],[\"自托管的邮件服务端\",{\"1\":{\"71\":1}}],[\"自带的日志支持写入多个文件\",{\"1\":{\"1007\":1}}],[\"自带的日志包\",{\"1\":{\"616\":1}}],[\"自带的原生\",{\"1\":{\"610\":1}}],[\"自带的交叉编译也没法用了\",{\"1\":{\"547\":1}}],[\"自带的标准库的一个简单介绍\",{\"1\":{\"96\":1}}],[\"自带的\",{\"1\":{\"52\":1}}],[\"调整包含栈指针的结构\",{\"1\":{\"1101\":1}}],[\"调度策略主要就是两大类\",{\"1\":{\"1108\":1}}],[\"调度策略\",{\"0\":{\"1105\":1}}],[\"调度循环会尝试直接从全局\",{\"1\":{\"1138\":1}}],[\"调度循环会通过runtime\",{\"1\":{\"1138\":1}}],[\"调度循环\",{\"0\":{\"1104\":1}}],[\"调度模型\",{\"0\":{\"1085\":1}}],[\"调度器初始化完毕\",{\"1\":{\"1089\":1}}],[\"调度器的初始化位于\",{\"1\":{\"1089\":1}}],[\"调度器的设计影响着整个\",{\"1\":{\"1083\":1}}],[\"调度器\",{\"1\":{\"1083\":1}}],[\"调试起来怕是都有点困难\",{\"1\":{\"589\":1}}],[\"调试信息\",{\"1\":{\"168\":1}}],[\"调试器\",{\"1\":{\"19\":1}}],[\"调用后直接\",{\"1\":{\"1085\":1}}],[\"调用runtime\",{\"1\":{\"1067\":1,\"1092\":1,\"1140\":2}}],[\"调用rpc请求时传入option\",{\"1\":{\"163\":1}}],[\"调用链的最后一个元素才是真正要执行的接口函数\",{\"1\":{\"995\":1}}],[\"调用链长了以后可读性会很差\",{\"1\":{\"586\":1}}],[\"调用中间件\",{\"1\":{\"995\":1}}],[\"调用gin\",{\"1\":{\"991\":1}}],[\"调用了shouldbindwith\",{\"1\":{\"971\":1}}],[\"调用了fmt包下的println函数进行输出\",{\"1\":{\"292\":1}}],[\"调用顺序也是正确的\",{\"1\":{\"824\":1}}],[\"调用过后必须将其手动关闭\",{\"1\":{\"638\":1}}],[\"调用时将返回一个结构体\",{\"1\":{\"533\":1}}],[\"调用者追踪\",{\"1\":{\"839\":1}}],[\"调用者完全不知道dangerop\",{\"1\":{\"607\":1}}],[\"调用者调用的函数返回了一个错误\",{\"1\":{\"602\":1}}],[\"调用者或许也不知道到底该由谁来关闭管道\",{\"1\":{\"468\":1}}],[\"调用者可以直接访问该类型的字段和方法\",{\"1\":{\"407\":1}}],[\"调用方法与调用函数的过程相似\",{\"1\":{\"452\":1}}],[\"调用方法\",{\"0\":{\"452\":1},\"1\":{\"452\":1}}],[\"调用成功\",{\"1\":{\"168\":1}}],[\"调用流式\",{\"1\":{\"162\":1}}],[\"调用结束\",{\"1\":{\"160\":1}}],[\"调用的整个过程\",{\"1\":{\"160\":1}}],[\"调用的一些信息\",{\"1\":{\"160\":1}}],[\"调用defer的开销减少了接近一半\",{\"1\":{\"129\":1}}],[\"调用\",{\"0\":{\"446\":1,\"533\":1},\"1\":{\"75\":2,\"129\":1,\"529\":2,\"533\":4,\"1097\":1}}],[\"调侃最多的一点无疑是这一句if\",{\"1\":{\"0\":1}}],[\"总数量相同的标记任务\",{\"1\":{\"1138\":1}}],[\"总的的来说\",{\"1\":{\"1104\":1}}],[\"总的来说垃圾回收的触发时机有三种\",{\"1\":{\"1132\":1}}],[\"总的来说recover函数有几个注意点\",{\"1\":{\"607\":1}}],[\"总的来说\",{\"1\":{\"88\":1,\"1060\":1,\"1108\":1,\"1130\":1}}],[\"总之\",{\"1\":{\"1054\":1}}],[\"总结\",{\"0\":{\"903\":1}}],[\"总结就是\",{\"1\":{\"402\":1}}],[\"总而言之\",{\"1\":{\"649\":1}}],[\"总体统计\",{\"1\":{\"1128\":1}}],[\"总体来看就如下图所示\",{\"1\":{\"1115\":1}}],[\"总体来说它的语法非常简单\",{\"1\":{\"181\":1}}],[\"总体而言\",{\"1\":{\"142\":1}}],[\"总体上使用起来与go\",{\"1\":{\"13\":1}}],[\"总共已使用了多少字节的内存\",{\"1\":{\"1112\":1}}],[\"总共搬了两次\",{\"1\":{\"1042\":1}}],[\"总共调用了两次evacuate函数\",{\"1\":{\"1042\":1}}],[\"总共就做了两件事\",{\"1\":{\"1020\":1}}],[\"总共只有四个方法pop\",{\"1\":{\"577\":1}}],[\"总共六个提交并不多\",{\"1\":{\"499\":1}}],[\"总共要指定三个参数\",{\"1\":{\"201\":1}}],[\"总共发送了5条消息\",{\"1\":{\"158\":1}}],[\"总共发送了\",{\"1\":{\"158\":1}}],[\"总共有\",{\"1\":{\"1171\":1}}],[\"总共有三种状态\",{\"1\":{\"1151\":1}}],[\"总共有三种方式\",{\"1\":{\"1035\":1}}],[\"总共有三种dev\",{\"1\":{\"141\":1}}],[\"总共有以下几种情况\",{\"1\":{\"1060\":1}}],[\"总共有以下几个可选项\",{\"1\":{\"201\":1}}],[\"总共有以下特点\",{\"1\":{\"139\":1}}],[\"总共支持下面几个\",{\"1\":{\"18\":1}}],[\"然年后将readerwait的值加r\",{\"1\":{\"1158\":1}}],[\"然而它并不是万能的\",{\"1\":{\"1153\":1}}],[\"然而现实中不太可能会有这么多的协程\",{\"1\":{\"1151\":1}}],[\"然而现实中对程序性能分析的需求远远不止于此\",{\"1\":{\"548\":1}}],[\"然而当协程完成定量的辅助扫描工作后\",{\"1\":{\"1139\":1}}],[\"然而并非所有的协程都会创建子协程\",{\"1\":{\"1104\":1}}],[\"然而\",{\"1\":{\"492\":1}}],[\"然而随着\",{\"1\":{\"18\":1}}],[\"然后尝试获取信号量\",{\"1\":{\"1178\":1}}],[\"然后开始判断\",{\"1\":{\"1177\":1}}],[\"然后快速判断当前协程是否已经被唤醒了\",{\"1\":{\"1167\":1}}],[\"然后得到的值就是正在阻塞等待的读者协程数量\",{\"1\":{\"1159\":1}}],[\"然后是unlock\",{\"1\":{\"1159\":1}}],[\"然后是mcentral\",{\"1\":{\"1125\":1}}],[\"然后进行这么一个操作\",{\"1\":{\"1158\":1}}],[\"然后进入for循环\",{\"1\":{\"1153\":1}}],[\"然后进入休眠直到在标记阶段被唤醒\",{\"1\":{\"1138\":1}}],[\"然后进入新一轮调度循环\",{\"1\":{\"1097\":1,\"1104\":1}}],[\"然后进入runtime\",{\"1\":{\"1080\":1}}],[\"然后用cas操作尝试去将readercount的值从0更新为\",{\"1\":{\"1157\":1}}],[\"然后用户程序修改了引用\",{\"1\":{\"1144\":1}}],[\"然后回收掉\",{\"1\":{\"1147\":1}}],[\"然后重新扫描一遍\",{\"1\":{\"1142\":1}}],[\"然后重定向到错误页面\",{\"1\":{\"954\":1}}],[\"然后做一些收尾的工作\",{\"1\":{\"1140\":1}}],[\"然后调用runtime\",{\"1\":{\"1138\":1}}],[\"然后采用不同的回收算法\",{\"1\":{\"1130\":1}}],[\"然后判断是否有读者协程正在工作\",{\"1\":{\"1158\":1}}],[\"然后判断是否需要扩容\",{\"1\":{\"1024\":1}}],[\"然后判断当前heaparena是否有足够的内存\",{\"1\":{\"1122\":1}}],[\"然后主协程因为系统调用主动让权\",{\"1\":{\"1106\":1}}],[\"然后更新done\",{\"1\":{\"1172\":1}}],[\"然后更新\",{\"1\":{\"1104\":1}}],[\"然后更新迭代器的下标\",{\"1\":{\"1037\":1}}],[\"然后继续执行用户代码\",{\"1\":{\"1097\":1}}],[\"然后保留协程的执行现场\",{\"1\":{\"1097\":1}}],[\"然后释放锁\",{\"1\":{\"1169\":1}}],[\"然后释放\",{\"1\":{\"1095\":1}}],[\"然后设置入口函数的\",{\"1\":{\"1095\":1}}],[\"然后由mpark\",{\"1\":{\"1093\":1}}],[\"然后由runtime\",{\"1\":{\"1059\":2,\"1067\":1,\"1089\":1,\"1091\":1,\"1125\":1}}],[\"然后交给mstart1去完成剩下的初始化工作\",{\"1\":{\"1089\":1}}],[\"然后有一个重点需要注意的是这行代码\",{\"1\":{\"1080\":1}}],[\"然后程序就会停止\",{\"1\":{\"1077\":1}}],[\"然后http库就会使用默认的handler来处理\",{\"1\":{\"1071\":1}}],[\"然后循环判断\",{\"1\":{\"1069\":1}}],[\"然后上面所有情况最后都会走入retc这个分支\",{\"1\":{\"1067\":1}}],[\"然后去尝试获取ch1的锁\",{\"1\":{\"1067\":1}}],[\"然后对pollorder数组根据管道的地址大小使用堆排序就得到了lockorder数组\",{\"1\":{\"1067\":1}}],[\"然后传递给selectgo函数\",{\"1\":{\"1067\":1}}],[\"然后唤醒发送方\",{\"1\":{\"1060\":2}}],[\"然后接收方会从缓冲区将头部元素出队并将其内存复制到目标接收元素的指针\",{\"1\":{\"1060\":1}}],[\"然后加锁访问hchan\",{\"1\":{\"1060\":1}}],[\"然后直接返回\",{\"1\":{\"1059\":1}}],[\"然后直接调用\",{\"1\":{\"531\":1}}],[\"然后分为三种情况来处理\",{\"1\":{\"1058\":1}}],[\"然后根据casesuccess来做出最后的处理\",{\"1\":{\"1067\":1}}],[\"然后根据总长度分配内存\",{\"1\":{\"1053\":1}}],[\"然后根据序号移动指针获取\",{\"1\":{\"1036\":1}}],[\"然后会去\",{\"1\":{\"1095\":1}}],[\"然后会通过runtime\",{\"1\":{\"1089\":1}}],[\"然后会使用m\",{\"1\":{\"1047\":1}}],[\"然后会返回两个函数next\",{\"1\":{\"583\":1}}],[\"然后通过gopark挂起\",{\"1\":{\"1167\":1}}],[\"然后通过调用gcw\",{\"1\":{\"1137\":1}}],[\"然后通过runtime\",{\"1\":{\"1059\":1,\"1067\":1,\"1097\":1}}],[\"然后通过string获取其字符串表达形式\",{\"1\":{\"1054\":1}}],[\"然后通过for\",{\"1\":{\"1049\":1}}],[\"然后通过\",{\"1\":{\"1047\":1}}],[\"然后通过template语句来引用指定的模板\",{\"1\":{\"734\":1}}],[\"然后解锁\",{\"1\":{\"1046\":1,\"1067\":2}}],[\"然后又大量删除元素\",{\"1\":{\"1043\":1}}],[\"然后让evacdst结构体指向下一个目的地\",{\"1\":{\"1042\":1}}],[\"然后指定哈希新旧桶的引用\",{\"1\":{\"1042\":1}}],[\"然后创建更大容量的哈希桶数组\",{\"1\":{\"1042\":1}}],[\"然后创建测试文件\",{\"1\":{\"521\":1,\"525\":1}}],[\"然后创建测试文件example\",{\"1\":{\"520\":1}}],[\"然后新分配一个\",{\"1\":{\"1040\":1}}],[\"然后删除\",{\"1\":{\"1039\":1}}],[\"然后退出\",{\"1\":{\"1037\":1}}],[\"然后计算需要清理的字节数\",{\"1\":{\"1027\":1}}],[\"然后切断\",{\"1\":{\"1098\":1}}],[\"然后切换到系统栈上由runtime\",{\"1\":{\"1098\":1}}],[\"然后切换到临时工作目录\",{\"1\":{\"19\":1}}],[\"然后切片的引用就会指向新数组\",{\"1\":{\"1025\":1}}],[\"然后下载\",{\"1\":{\"1010\":2}}],[\"然后发送一个\",{\"1\":{\"1003\":1}}],[\"然后这还不够\",{\"1\":{\"952\":1}}],[\"然后这次就可以得到一个比较完整的模糊测试输出日志\",{\"1\":{\"527\":1}}],[\"然后使用runtime\",{\"1\":{\"1059\":1}}],[\"然后使用\",{\"1\":{\"851\":1}}],[\"然后使用f\",{\"1\":{\"527\":1}}],[\"然后生成一个调用构造器的函数\",{\"1\":{\"823\":1}}],[\"然后执行如下命令\",{\"1\":{\"824\":1}}],[\"然后执行\",{\"1\":{\"823\":1}}],[\"然后无论何时用户想要访问受保护的路由和资源\",{\"1\":{\"775\":1}}],[\"然后每一个部分用一个点\",{\"1\":{\"771\":1}}],[\"然后你需要与数据库交互\",{\"1\":{\"610\":1}}],[\"然后层层上抛\",{\"1\":{\"606\":1}}],[\"然后我们就可以通过链式调用来处理了\",{\"1\":{\"587\":1}}],[\"然后就开始尝试通过cas去更新锁的状态\",{\"1\":{\"1153\":1}}],[\"然后就是小于缓冲区长度就用缓冲区的内存\",{\"1\":{\"1054\":1}}],[\"然后就会创建一个新的桶来存放这些键\",{\"1\":{\"1032\":1}}],[\"然后就会出现一个交互式的命令行\",{\"1\":{\"559\":1}}],[\"然后就可以进行开发工作了\",{\"1\":{\"496\":1}}],[\"然后各自运行\",{\"1\":{\"547\":1}}],[\"然后制作动态链接库\",{\"1\":{\"545\":1}}],[\"然后返回\",{\"1\":{\"1060\":2}}],[\"然后返回一个\",{\"1\":{\"536\":1}}],[\"然后返回结果\",{\"1\":{\"107\":1}}],[\"然后停止执行\",{\"1\":{\"521\":1}}],[\"然后修改go\",{\"1\":{\"513\":1}}],[\"然后修改goroot系统环境变量为该目录下指定版本的文件夹即可\",{\"1\":{\"92\":1}}],[\"然后当父级结束时取消当前上下文\",{\"1\":{\"477\":1}}],[\"然后才会去使用当前的内存块\",{\"1\":{\"1112\":1}}],[\"然后才会被唤醒\",{\"1\":{\"472\":1}}],[\"然后才是runtime\",{\"1\":{\"1089\":1}}],[\"然后才能使用\",{\"1\":{\"231\":1}}],[\"然后再重新唤醒所有的用户协程\",{\"1\":{\"1140\":1}}],[\"然后再将得到的新值非原子地加上rwmutexmaxreaders\",{\"1\":{\"1158\":1}}],[\"然后再将黑色对象所有直接引用的对象标记为灰色\",{\"1\":{\"1135\":1}}],[\"然后再将所有测试用例全都执行\",{\"1\":{\"518\":1}}],[\"然后再次尝试是否能找到空闲的\",{\"1\":{\"1097\":1}}],[\"然后再初始化每一个\",{\"1\":{\"1089\":1}}],[\"然后再执行defer对应的函数\",{\"1\":{\"1079\":1}}],[\"然后再从\",{\"1\":{\"1074\":1,\"1120\":2}}],[\"然后再从头开始\",{\"1\":{\"1037\":1}}],[\"然后再赋值给i\",{\"1\":{\"1055\":1}}],[\"然后再存储对应的值\",{\"1\":{\"1047\":1}}],[\"然后再去访问\",{\"1\":{\"1046\":1}}],[\"然后再去不同数据中心的\",{\"1\":{\"144\":1}}],[\"然后再清空\",{\"1\":{\"1040\":1}}],[\"然后再通过函数runtime\",{\"1\":{\"1037\":1}}],[\"然后再保存到本地\",{\"1\":{\"983\":1}}],[\"然后再输出end\",{\"1\":{\"743\":1}}],[\"然后再使用工具对采样的数据进行分析并展示结果\",{\"1\":{\"554\":1}}],[\"然后再转换成对应的指针类型\",{\"1\":{\"543\":1}}],[\"然后再创建sum\",{\"1\":{\"532\":1}}],[\"然后再根据spanclass找到对应的mspan链表\",{\"1\":{\"1123\":1}}],[\"然后再根据\",{\"1\":{\"510\":1,\"899\":1}}],[\"然后再读取数据并输出\",{\"1\":{\"465\":1}}],[\"然后写入副本文件\",{\"1\":{\"419\":1}}],[\"然后写入目标文件中\",{\"1\":{\"419\":1}}],[\"然后在非阻塞读取情况下\",{\"1\":{\"1060\":1}}],[\"然后在每一次修改和删除元素时\",{\"1\":{\"1042\":1}}],[\"然后在你需要认证的接口上加上如下注释\",{\"1\":{\"1015\":1}}],[\"然后在模板中直接使用\",{\"1\":{\"728\":1}}],[\"然后在main\",{\"1\":{\"532\":1}}],[\"然后在\",{\"1\":{\"531\":1,\"533\":2,\"545\":1}}],[\"然后在之前创建的项目下使用go\",{\"1\":{\"503\":1}}],[\"然后在其中编写相关代码\",{\"1\":{\"496\":1}}],[\"然后在尾部插入一些元素\",{\"1\":{\"365\":1}}],[\"然后在请求的时候把\",{\"1\":{\"163\":1}}],[\"然后按照年龄排序\",{\"1\":{\"229\":1}}],[\"然后\",{\"1\":{\"192\":1,\"504\":1,\"1042\":1,\"1076\":1,\"1165\":1}}],[\"然后可以使用特殊生成的源代码轻松地将结构化数据写入各种数据流和从各种数据流中读取结构化数据\",{\"1\":{\"180\":1}}],[\"然后客户端从注册中心中获取服务列表然后进行匹配\",{\"1\":{\"175\":1}}],[\"然后将整个单元回收\",{\"1\":{\"1148\":1}}],[\"然后将mspan的状态设置为mspandead\",{\"1\":{\"1121\":1}}],[\"然后将当前的panic加入协程的链表头部\",{\"1\":{\"1079\":1}}],[\"然后将defer结构从链表头部取出\",{\"1\":{\"1075\":1}}],[\"然后将sudog从之前管道的等待队列中移除\",{\"1\":{\"1067\":1}}],[\"然后将这个管道的sendq和recvq中的所有阻塞的协程都出队并将它们全部都通过runtime\",{\"1\":{\"1061\":1}}],[\"然后将字符串复制到新的内存地址中\",{\"1\":{\"1054\":1}}],[\"然后将read\",{\"1\":{\"1047\":1}}],[\"然后将旧数组的数据拷贝到新切片中\",{\"1\":{\"1025\":1}}],[\"然后将目标文件打包成静态链接库\",{\"1\":{\"546\":1}}],[\"然后将其克隆到本地\",{\"1\":{\"495\":1}}],[\"然后将其递增\",{\"1\":{\"354\":1}}],[\"然后将\",{\"1\":{\"174\":1,\"1038\":1,\"1098\":1,\"1106\":1}}],[\"然后将信息记录到go\",{\"1\":{\"18\":1}}],[\"然后引入如下依赖\",{\"1\":{\"148\":1}}],[\"然后还要下载代码生成器\",{\"1\":{\"148\":1}}],[\"然后需要配置两个系统环境变量\",{\"1\":{\"90\":1}}],[\"回收整个单元比较的困难\",{\"1\":{\"1147\":1}}],[\"回收工作就相对没那么复杂\",{\"1\":{\"1146\":1}}],[\"回收\",{\"0\":{\"1146\":1}}],[\"回收完毕以后才能继续运行\",{\"1\":{\"1134\":1}}],[\"回收阶段\",{\"1\":{\"1130\":1}}],[\"回收时将活动对象移动到堆的头部\",{\"1\":{\"1130\":1}}],[\"回收掉\",{\"1\":{\"1042\":1,\"1043\":1}}],[\"回到搬迁这块\",{\"1\":{\"1042\":1}}],[\"回到正题\",{\"1\":{\"18\":1,\"28\":1}}],[\"回调函数的参数数量只能是\",{\"1\":{\"582\":1}}],[\"回车符号\",{\"1\":{\"305\":1}}],[\"回退符号\",{\"1\":{\"305\":1}}],[\"回退到以前的旧行为\",{\"1\":{\"7\":1}}],[\"回滚一个事务\",{\"1\":{\"238\":1}}],[\"至于到底是低几位这取决于\",{\"1\":{\"1036\":1}}],[\"至于为什么在文档描述中还保留这些也是不得而知\",{\"1\":{\"18\":1}}],[\"至\",{\"1\":{\"582\":1,\"1130\":1}}],[\"至此扩容完毕\",{\"1\":{\"1042\":1}}],[\"至此配置成功\",{\"1\":{\"990\":1}}],[\"至此\",{\"1\":{\"428\":1,\"1144\":1,\"1153\":1}}],[\"至多两个判断分支\",{\"1\":{\"348\":1}}],[\"至少\",{\"1\":{\"316\":2}}],[\"至少需要在\",{\"1\":{\"116\":1}}],[\"至少在\",{\"1\":{\"116\":1,\"395\":1}}],[\"至少有一个好处就是在阅读代码的时候不用去适应他人的习惯\",{\"1\":{\"17\":1}}],[\"尝试将readercount加1\",{\"1\":{\"1160\":1}}],[\"尝试将自身添加进父级的children中\",{\"1\":{\"477\":1}}],[\"尝试获取信号量\",{\"1\":{\"1153\":1}}],[\"尝试获取回收器\",{\"1\":{\"1147\":1}}],[\"尝试持有锁失败\",{\"1\":{\"1153\":1}}],[\"尝试直接从版本控制系统中下载\",{\"1\":{\"511\":1}}],[\"尝试加写锁\",{\"1\":{\"481\":1}}],[\"尝试加读锁\",{\"1\":{\"481\":1}}],[\"尝试修改字符串元素\",{\"1\":{\"375\":1}}],[\"尝试使用errors\",{\"1\":{\"167\":1}}],[\"尝试读取数据\",{\"1\":{\"144\":1}}],[\"尝试更新版本\",{\"1\":{\"18\":1}}],[\"尝试更新包的次要版本以及补丁版本\",{\"1\":{\"18\":1}}],[\"尝试简化代码\",{\"1\":{\"17\":1}}],[\">sched\",{\"1\":{\"1097\":1}}],[\">status\",{\"1\":{\"1095\":1,\"1100\":1}}],[\">m\",{\"1\":{\"1089\":1}}],[\">房子\",{\"1\":{\"899\":1}}],[\">学生\",{\"1\":{\"899\":2}}],[\">goexit0\",{\"1\":{\"1096\":1}}],[\">goexit1\",{\"1\":{\"1096\":1}}],[\">go\",{\"1\":{\"533\":1}}],[\">cgo\",{\"1\":{\"533\":1}}],[\">>=\",{\"1\":{\"1042\":1,\"1100\":1,\"1117\":1,\"1125\":1}}],[\">>\",{\"1\":{\"299\":1,\"651\":1,\"995\":1,\"1037\":2,\"1100\":1,\"1114\":1,\"1177\":2,\"1178\":2}}],[\">2\",{\"1\":{\"140\":1}}],[\">=\",{\"1\":{\"18\":1,\"299\":1,\"349\":6,\"350\":3,\"399\":1,\"494\":1,\"526\":3,\"578\":4,\"581\":1,\"1024\":1,\"1034\":1,\"1041\":2,\"1046\":1,\"1067\":1,\"1089\":2,\"1102\":1,\"1107\":1,\"1117\":2,\"1137\":1,\"1139\":1,\"1148\":1,\"1153\":1,\"1159\":2}}],[\">v2\",{\"1\":{\"18\":1}}],[\">\",{\"1\":{\"17\":3,\"19\":1,\"41\":4,\"137\":1,\"223\":2,\"299\":1,\"313\":1,\"341\":1,\"348\":4,\"350\":3,\"357\":2,\"362\":4,\"398\":1,\"445\":1,\"485\":1,\"499\":3,\"561\":1,\"577\":3,\"578\":2,\"582\":2,\"720\":1,\"725\":15,\"751\":8,\"862\":3,\"880\":2,\"965\":1,\"980\":2,\"995\":4,\"1020\":3,\"1025\":2,\"1026\":1,\"1032\":4,\"1034\":1,\"1037\":1,\"1041\":1,\"1042\":1,\"1060\":1,\"1067\":2,\"1074\":1,\"1076\":2,\"1089\":3,\"1100\":1,\"1104\":2,\"1111\":1,\"1112\":1,\"1119\":2,\"1122\":1,\"1138\":1,\"1139\":3,\"1148\":3,\"1153\":1,\"1165\":3,\"1177\":4}}],[\">$work\",{\"1\":{\"14\":1}}],[\"你以为关于切片的问题到这里就结束了吗\",{\"1\":{\"1019\":1}}],[\"你的服务器将始终可用\",{\"1\":{\"963\":1}}],[\"你的逻辑\",{\"1\":{\"959\":1}}],[\"你不能将\",{\"1\":{\"956\":1}}],[\"你必须填写它\",{\"1\":{\"953\":2}}],[\"你或许可能会觉得这样做多此一举\",{\"1\":{\"583\":1}}],[\"你甚至可以在里面看到yield这种字眼\",{\"1\":{\"581\":1}}],[\"你也没法找到它们的定义\",{\"1\":{\"536\":1}}],[\"你也可以自己进行丰富\",{\"1\":{\"498\":1}}],[\"你也可以使用io\",{\"1\":{\"419\":1}}],[\"你也可以把它理解为一个构造函数\",{\"1\":{\"405\":1}}],[\"你也可以把它和fmt包结合起来用\",{\"1\":{\"340\":1}}],[\"你也可以编写一个函数来实例化结构体\",{\"1\":{\"405\":1}}],[\"你也可以在\",{\"1\":{\"400\":1}}],[\"你也可以通过官方工具stringer来自动生成枚举\",{\"1\":{\"326\":1}}],[\"你也可以给它们起别名\",{\"1\":{\"295\":1}}],[\"你也可以选择在自己的服务器上搭建个人\",{\"1\":{\"104\":1}}],[\"你\",{\"1\":{\"304\":1,\"706\":1}}],[\"你可能会想到直接将\",{\"1\":{\"952\":1}}],[\"你可能会直接赋值粘贴\",{\"1\":{\"948\":1}}],[\"你可能会以为它会被展开成下面这段\",{\"1\":{\"331\":1}}],[\"你可能会疑惑为什么不是\",{\"1\":{\"331\":1}}],[\"你可能在其它\",{\"1\":{\"294\":1}}],[\"你可以把http\",{\"1\":{\"956\":1}}],[\"你可以看到的是\",{\"1\":{\"615\":1}}],[\"你可以参照下面这些项目来进行学习\",{\"1\":{\"610\":1}}],[\"你可以尝试以下的几个开源\",{\"1\":{\"610\":1}}],[\"你可以在很多地方看到关于迭代器的激烈讨论\",{\"1\":{\"589\":1}}],[\"你可以前往go\",{\"1\":{\"355\":1}}],[\"你可以同时初始化多个变量\",{\"1\":{\"354\":1}}],[\"你可以像直接读文件一样\",{\"1\":{\"343\":1}}],[\"你可以只写一行\",{\"1\":{\"312\":1}}],[\"你可以这么写\",{\"1\":{\"295\":1}}],[\"你可以完全按照个人喜好来进行自定义\",{\"1\":{\"92\":1}}],[\"你可以发现作为一个格式化工具\",{\"1\":{\"17\":1}}],[\"你找别人吧\",{\"1\":{\"159\":4}}],[\"你好世界\",{\"1\":{\"706\":1}}],[\"你好\",{\"1\":{\"159\":8,\"709\":2,\"731\":2}}],[\"你还会发现它保留了以前的那些\",{\"1\":{\"18\":1}}],[\"你会体验到相当迅速的编译体验\",{\"1\":{\"8\":1}}],[\"73728\",{\"1\":{\"1114\":1}}],[\"73\",{\"1\":{\"1114\":2}}],[\"7347742\",{\"1\":{\"743\":1}}],[\"7334\",{\"1\":{\"677\":1}}],[\"7366827\",{\"1\":{\"527\":1}}],[\"736455\",{\"1\":{\"526\":1}}],[\"736177\",{\"1\":{\"525\":1}}],[\"736\",{\"1\":{\"7\":2,\"526\":1}}],[\"79769313486231570814527423731704356798070e+308\",{\"1\":{\"652\":1}}],[\"790421300\",{\"1\":{\"526\":1}}],[\"7µ\",{\"1\":{\"526\":1}}],[\"7ms\",{\"1\":{\"526\":1}}],[\"7m\",{\"1\":{\"526\":3}}],[\"78125\",{\"1\":{\"912\":1}}],[\"789s\",{\"1\":{\"527\":1}}],[\"780614\",{\"1\":{\"526\":1}}],[\"783599\",{\"1\":{\"526\":1}}],[\"785830400\",{\"1\":{\"526\":1}}],[\"74\",{\"1\":{\"526\":1}}],[\"744885\",{\"1\":{\"526\":1}}],[\"742s\",{\"1\":{\"526\":1}}],[\"743634000\",{\"1\":{\"526\":1}}],[\"71\",{\"1\":{\"1114\":1}}],[\"712991800\",{\"1\":{\"526\":1}}],[\"717285\",{\"1\":{\"526\":1}}],[\"71828182845904523536028747135266249775724709369995957496696763\",{\"1\":{\"653\":1}}],[\"71828i\",{\"1\":{\"303\":1}}],[\"71828\",{\"1\":{\"302\":1}}],[\"75\",{\"1\":{\"1114\":1}}],[\"750\",{\"1\":{\"526\":1}}],[\"750513\",{\"1\":{\"526\":1}}],[\"759537\",{\"1\":{\"526\":1}}],[\"754c\",{\"1\":{\"380\":1}}],[\"754\",{\"1\":{\"317\":2}}],[\"754浮点数\",{\"1\":{\"317\":1}}],[\"777\",{\"1\":{\"949\":1}}],[\"77245385090551602729816748334114518279754945612238712821380779\",{\"1\":{\"653\":1}}],[\"77\",{\"1\":{\"380\":1}}],[\"704\",{\"1\":{\"1114\":1}}],[\"704798\",{\"1\":{\"526\":1}}],[\"706\",{\"1\":{\"526\":1}}],[\"706605350\",{\"1\":{\"526\":1}}],[\"700824\",{\"1\":{\"526\":1}}],[\"70\",{\"1\":{\"349\":3,\"527\":1}}],[\"7229057\",{\"1\":{\"743\":1}}],[\"729821\",{\"1\":{\"526\":1}}],[\"72\",{\"1\":{\"302\":2,\"354\":1,\"380\":1,\"1114\":1}}],[\"768\",{\"1\":{\"1114\":2}}],[\"763gi\",{\"1\":{\"526\":6}}],[\"763+0800\",{\"1\":{\"141\":1}}],[\"76e8c1e\",{\"1\":{\"499\":2}}],[\"767+0800\",{\"1\":{\"141\":1}}],[\"76\",{\"1\":{\"93\":9}}],[\"7\",{\"0\":{\"130\":1,\"785\":1},\"1\":{\"17\":5,\"43\":1,\"116\":1,\"128\":1,\"129\":1,\"130\":4,\"168\":1,\"205\":2,\"209\":1,\"240\":1,\"341\":1,\"344\":2,\"354\":11,\"356\":1,\"357\":6,\"365\":2,\"366\":4,\"367\":4,\"368\":6,\"369\":2,\"371\":5,\"375\":1,\"392\":1,\"402\":3,\"456\":1,\"462\":3,\"467\":2,\"470\":1,\"472\":1,\"480\":1,\"481\":2,\"482\":1,\"486\":2,\"503\":4,\"509\":3,\"526\":1,\"539\":5,\"553\":13,\"595\":1,\"651\":1,\"665\":1,\"700\":1,\"751\":1,\"752\":1,\"778\":1,\"916\":1,\"1019\":6,\"1054\":1,\"1114\":5,\"1136\":3}}],[\"6+56\",{\"1\":{\"1067\":1}}],[\"6s\",{\"1\":{\"527\":1}}],[\"6912\",{\"1\":{\"1114\":1}}],[\"6983438\",{\"1\":{\"737\":1}}],[\"693147180559945309417232121458176568075500134360255254120680009\",{\"1\":{\"653\":1}}],[\"697s\",{\"1\":{\"527\":1}}],[\"694f544f9265\",{\"1\":{\"20\":1,\"27\":1}}],[\"6m\",{\"1\":{\"526\":1}}],[\"6f\",{\"1\":{\"380\":4}}],[\"6c\",{\"1\":{\"380\":7}}],[\"685030600\",{\"1\":{\"526\":1}}],[\"684\",{\"1\":{\"526\":1}}],[\"684023150\",{\"1\":{\"526\":1}}],[\"6849045\",{\"1\":{\"16\":1}}],[\"68\",{\"1\":{\"380\":3,\"1114\":1,\"1123\":1}}],[\"609375\",{\"1\":{\"912\":2}}],[\"607476635514018\",{\"1\":{\"911\":1}}],[\"60kb\",{\"1\":{\"820\":1}}],[\"600078100\",{\"1\":{\"526\":1}}],[\"6000\",{\"1\":{\"398\":1}}],[\"60\",{\"1\":{\"349\":3,\"618\":1,\"738\":2,\"1114\":2,\"1130\":1}}],[\"6784\",{\"1\":{\"1114\":1}}],[\"67的\",{\"1\":{\"1114\":1}}],[\"671535\",{\"1\":{\"526\":1}}],[\"679774450\",{\"1\":{\"525\":1}}],[\"67\",{\"1\":{\"341\":1,\"918\":1,\"1114\":1}}],[\"67428e\",{\"1\":{\"302\":1,\"303\":1}}],[\"666\",{\"1\":{\"949\":3}}],[\"6624882688\",{\"1\":{\"919\":1}}],[\"662993\",{\"1\":{\"525\":1}}],[\"665460800\",{\"1\":{\"525\":1}}],[\"66\",{\"1\":{\"341\":1,\"684\":1,\"685\":2,\"687\":2,\"919\":1,\"1114\":1}}],[\"65536\",{\"1\":{\"1114\":1}}],[\"65533\",{\"1\":{\"527\":1}}],[\"6528\",{\"1\":{\"1114\":1}}],[\"65907\",{\"1\":{\"916\":1}}],[\"659047300\",{\"1\":{\"526\":1}}],[\"65mb\",{\"1\":{\"820\":1}}],[\"65m\",{\"1\":{\"526\":1}}],[\"656195700\",{\"1\":{\"526\":1}}],[\"65\",{\"1\":{\"341\":1,\"380\":3,\"1114\":2}}],[\"6305039478318694p\",{\"1\":{\"700\":1}}],[\"634380250\",{\"1\":{\"526\":1}}],[\"63\",{\"1\":{\"341\":1,\"354\":1,\"651\":2,\"738\":1,\"995\":2,\"1114\":1,\"1148\":1}}],[\"6379\",{\"1\":{\"241\":1,\"243\":1,\"725\":2}}],[\"6248486\",{\"1\":{\"527\":1}}],[\"62\",{\"1\":{\"341\":1,\"1114\":2}}],[\"61158\",{\"1\":{\"1128\":1}}],[\"6144\",{\"1\":{\"1114\":1}}],[\"61803398874989484820458683436563811772030917980576286213544862\",{\"1\":{\"653\":1}}],[\"61\",{\"1\":{\"341\":1,\"1114\":2,\"1128\":1}}],[\"61626364656667\",{\"1\":{\"341\":1}}],[\"64mb\",{\"1\":{\"1115\":1}}],[\"640\",{\"1\":{\"1114\":1}}],[\"640313\",{\"1\":{\"916\":1}}],[\"643962848297214\",{\"1\":{\"911\":1}}],[\"64872127070012814684865078781416357165377610071014801157507931\",{\"1\":{\"653\":1}}],[\"64<<10\",{\"1\":{\"485\":1}}],[\"64c610d5aec2618d6ca0b516\",{\"1\":{\"226\":1}}],[\"64c610d5aec2618d6ca0b515\",{\"1\":{\"226\":1}}],[\"64c60fa01e2548d9e4de6cf4\",{\"1\":{\"226\":1}}],[\"64\",{\"1\":{\"136\":1,\"158\":1,\"202\":1,\"316\":3,\"317\":1,\"318\":1,\"320\":1,\"341\":1,\"354\":1,\"380\":1,\"489\":2,\"591\":3,\"598\":1,\"651\":1,\"697\":2,\"698\":6,\"701\":1,\"750\":1,\"795\":1,\"907\":1,\"1058\":1,\"1114\":10,\"1115\":2,\"1117\":2,\"1120\":2,\"1125\":4}}],[\"6\",{\"0\":{\"131\":1,\"784\":1},\"1\":{\"17\":2,\"20\":1,\"27\":1,\"37\":1,\"38\":2,\"93\":1,\"113\":1,\"115\":1,\"116\":1,\"130\":2,\"131\":4,\"168\":1,\"240\":1,\"302\":1,\"303\":1,\"325\":2,\"326\":1,\"341\":1,\"344\":2,\"354\":12,\"356\":1,\"357\":2,\"365\":1,\"366\":4,\"367\":4,\"368\":6,\"371\":7,\"392\":1,\"410\":1,\"456\":1,\"462\":3,\"467\":2,\"470\":2,\"472\":1,\"480\":1,\"486\":2,\"503\":2,\"504\":1,\"509\":2,\"526\":4,\"539\":6,\"550\":1,\"551\":1,\"560\":1,\"587\":6,\"698\":6,\"700\":1,\"712\":1,\"725\":2,\"751\":1,\"752\":1,\"778\":1,\"1019\":10,\"1032\":3,\"1034\":2,\"1041\":2,\"1067\":1,\"1114\":12,\"1115\":1}}],[\"gofmt\",{\"1\":{\"17\":1}}],[\"给结构体字段加注释会被被\",{\"1\":{\"1014\":1}}],[\"给对应路由注册的接口函数也在handlers内\",{\"1\":{\"995\":1}}],[\"给日志添加一些默认输出的内容\",{\"1\":{\"839\":1}}],[\"给出子串\",{\"1\":{\"707\":1}}],[\"给常用类型\",{\"1\":{\"534\":1}}],[\"给一个代码块打上标签\",{\"1\":{\"351\":1}}],[\"给一个对应的元素增加相应的权值\",{\"1\":{\"281\":1}}],[\"给系统环境变量path添加两条新的项\",{\"1\":{\"90\":1}}],[\"给go\",{\"1\":{\"17\":1}}],[\"给作者的感觉就是语法确实十分简洁\",{\"1\":{\"0\":1}}],[\"看自己使用习惯\",{\"1\":{\"851\":1}}],[\"看个人喜好\",{\"1\":{\"598\":1}}],[\"看个例子\",{\"1\":{\"12\":1,\"40\":1,\"725\":1}}],[\"看到这里后\",{\"1\":{\"571\":1}}],[\"看两个例子\",{\"1\":{\"543\":1}}],[\"看起来似乎是要比try\",{\"1\":{\"598\":1}}],[\"看起来中文字符串比英文字符串短\",{\"1\":{\"377\":1}}],[\"看起来长度是7\",{\"1\":{\"377\":1}}],[\"看起来长度是16\",{\"1\":{\"377\":1}}],[\"看几个例子\",{\"1\":{\"341\":1}}],[\"看几个使用案例\",{\"1\":{\"325\":1,\"587\":1}}],[\"看下面一个简单的例子\",{\"1\":{\"1070\":1}}],[\"看下面一个例子\",{\"1\":{\"399\":1,\"400\":1,\"414\":1,\"530\":1,\"730\":1,\"1071\":1}}],[\"看下面的结构体\",{\"1\":{\"891\":1}}],[\"看下面的一段代码例子\",{\"1\":{\"734\":1}}],[\"看下面的一个例子\",{\"1\":{\"196\":1,\"470\":1,\"490\":1,\"531\":1,\"539\":1,\"595\":1,\"887\":1,\"952\":1,\"1019\":1}}],[\"看下面的例子\",{\"1\":{\"325\":1,\"414\":1,\"467\":1,\"531\":1,\"536\":1,\"725\":1,\"951\":1,\"1054\":1}}],[\"看下面player\",{\"1\":{\"193\":1}}],[\"看一个示例\",{\"1\":{\"879\":1}}],[\"看一个使用示例\",{\"1\":{\"872\":1}}],[\"看一个使用案例就知道怎么用了\",{\"1\":{\"735\":1}}],[\"看一个使用例子\",{\"1\":{\"24\":1}}],[\"看一个简单的例子\",{\"1\":{\"45\":1}}],[\"看一个简单的链接标准库中的私有类型的例子\",{\"1\":{\"44\":1}}],[\"看一个简单的使用例子\",{\"1\":{\"27\":1,\"472\":1}}],[\"看一个例子\",{\"1\":{\"41\":1,\"42\":1,\"186\":1,\"547\":1}}],[\"看看这个回答go\",{\"1\":{\"24\":1}}],[\"看看前后文件变化\",{\"1\":{\"16\":1}}],[\"接下了订单\",{\"1\":{\"567\":1}}],[\"接下来我们来了解下它的基本工作原理\",{\"1\":{\"1175\":1}}],[\"接下来我们要做的就是这件事\",{\"1\":{\"740\":1}}],[\"接下来进入runlockslow的流程\",{\"1\":{\"1162\":1}}],[\"接下来是lock\",{\"1\":{\"1158\":1}}],[\"接下来初始化\",{\"1\":{\"1089\":1}}],[\"接下来初始化pollorder数组\",{\"1\":{\"1067\":1}}],[\"接下来分三种情况\",{\"1\":{\"1047\":1}}],[\"接下来要做就是将数据复制到新桶中\",{\"1\":{\"1042\":1}}],[\"接下来才真正开始迭代\",{\"1\":{\"1037\":1}}],[\"接下来除了一些特别要注意的点\",{\"1\":{\"1011\":1}}],[\"接下来执行命令生成文档\",{\"1\":{\"1011\":1}}],[\"接下来执行测试命令看看结果\",{\"1\":{\"520\":1}}],[\"接下来先看一个例子\",{\"1\":{\"949\":1}}],[\"接下来就由runtime\",{\"1\":{\"1042\":1}}],[\"接下来就是如何使用关联来进行增删改查\",{\"1\":{\"894\":1}}],[\"接下来就一步一步的来解决问题\",{\"1\":{\"840\":1}}],[\"接下来就一个个讲解每个结构的作用\",{\"1\":{\"771\":1}}],[\"接下来就演示如何自定义\",{\"1\":{\"174\":1}}],[\"接下来都会一一介绍\",{\"1\":{\"599\":1}}],[\"接下来将会讲解这三种情况\",{\"1\":{\"574\":1}}],[\"接下来会讲解一些进阶的使用技巧与更多的自定义操作\",{\"1\":{\"947\":1}}],[\"接下来会用\",{\"1\":{\"567\":1}}],[\"接下来会直接省略项目的创建过程\",{\"1\":{\"147\":1}}],[\"接下来使用gcc来制作动态链接库\",{\"1\":{\"545\":1}}],[\"接下来使用cas改造一下\",{\"1\":{\"490\":1}}],[\"接下来直接运行根据上次模糊测试失败的用例\",{\"1\":{\"527\":1}}],[\"接下来运行\",{\"1\":{\"513\":1}}],[\"接下来看看读锁部分\",{\"1\":{\"1160\":1}}],[\"接下来看看下面这几个例子\",{\"1\":{\"1071\":1}}],[\"接下来看看下载一个依赖时\",{\"1\":{\"510\":1}}],[\"接下来看一个并发使用\",{\"1\":{\"486\":1}}],[\"接下来安装一个第三方依赖试试\",{\"1\":{\"502\":1}}],[\"接下来继续编写一个命令行程序用于输出\",{\"1\":{\"496\":1}}],[\"接下来逐个讲解\",{\"1\":{\"414\":1}}],[\"接下来创建选项函数\",{\"1\":{\"406\":1}}],[\"接下来创建server\",{\"1\":{\"158\":1}}],[\"接下来试一试\",{\"1\":{\"167\":1}}],[\"接下来开始编写服务端的具体逻辑\",{\"1\":{\"158\":1}}],[\"接下来尝试在\",{\"1\":{\"144\":1}}],[\"接下来让\",{\"1\":{\"144\":1}}],[\"接下来简单测试一下数据一致性\",{\"1\":{\"143\":1}}],[\"接下来加上noinline指令\",{\"1\":{\"45\":1}}],[\"接口由两个东西组成\",{\"1\":{\"1070\":1}}],[\"接口文档的基本信息的存放文件可以自定义文件名\",{\"1\":{\"1017\":1}}],[\"接口列表展开状态\",{\"1\":{\"1016\":1}}],[\"接口处理函数\",{\"1\":{\"982\":2}}],[\"接口绑定\",{\"0\":{\"826\":1}}],[\"接口的零值\",{\"1\":{\"1070\":1}}],[\"接口的定义文件\",{\"1\":{\"1016\":1}}],[\"接口的定义变为了类型集\",{\"1\":{\"574\":1}}],[\"接口的具体类型完全相等时\",{\"1\":{\"460\":1}}],[\"接口定义为\",{\"1\":{\"563\":1}}],[\"接口实现的定义为\",{\"1\":{\"563\":2}}],[\"接口是一个非常重要的概念\",{\"1\":{\"562\":1}}],[\"接口返回的就是这一种数据\",{\"1\":{\"556\":1}}],[\"接口类型signedint是一个类型集\",{\"1\":{\"574\":1}}],[\"接口类型如下\",{\"1\":{\"477\":1}}],[\"接口类型\",{\"1\":{\"428\":1}}],[\"接口本质上是结构体\",{\"1\":{\"428\":1}}],[\"接口不需要参数或者没有返回值\",{\"1\":{\"197\":1}}],[\"接口又分为一元接口和流式接口\",{\"1\":{\"196\":1}}],[\"接口必须要有且只能有一个参数和返回值\",{\"1\":{\"181\":1}}],[\"接口约束\",{\"1\":{\"152\":1}}],[\"接口\",{\"0\":{\"428\":1,\"562\":1,\"1070\":1},\"1\":{\"142\":1,\"181\":1,\"196\":1,\"320\":2,\"321\":1,\"323\":1,\"460\":1,\"557\":1,\"568\":1}}],[\"接口等方面做的要好得多\",{\"1\":{\"88\":1}}],[\"接收数据要比发送数据稍微复杂一些\",{\"1\":{\"1060\":1}}],[\"接收方会直接通过runtime\",{\"1\":{\"1060\":1}}],[\"接收的逻辑开头部分与发送的逻辑类似\",{\"1\":{\"1060\":1}}],[\"接收的第一个参数是类型\",{\"1\":{\"393\":1}}],[\"接收结构体和\",{\"1\":{\"886\":1}}],[\"接收一个net\",{\"1\":{\"824\":1}}],[\"接收一个字节类型指针\",{\"1\":{\"756\":1}}],[\"接收者也不例外\",{\"1\":{\"414\":1}}],[\"接收者也分两种类型\",{\"1\":{\"413\":1}}],[\"接收者就类似于其他语言中的this或self\",{\"1\":{\"412\":1}}],[\"接收两个参数\",{\"1\":{\"382\":1}}],[\"接收类型\",{\"1\":{\"341\":1}}],[\"接收指定用户的消息\",{\"1\":{\"158\":1}}],[\"接收消息的协程\",{\"1\":{\"159\":2}}],[\"接收消息请求\",{\"1\":{\"158\":1}}],[\"接收消息\",{\"1\":{\"158\":1}}],[\"接收消息流\",{\"1\":{\"158\":1}}],[\"接收参数是类型\",{\"1\":{\"393\":1}}],[\"接收参数\",{\"1\":{\"32\":1}}],[\"接收\",{\"0\":{\"1060\":1},\"1\":{\"16\":1,\"33\":1}}],[\"接近二三十个\",{\"1\":{\"10\":1}}],[\"产生的缓存\",{\"1\":{\"15\":1}}],[\"z并不一定真实存在\",{\"1\":{\"509\":1}}],[\"zinx\",{\"1\":{\"612\":1}}],[\"zincr\",{\"1\":{\"281\":1}}],[\"zip压缩归档的包\",{\"1\":{\"616\":1}}],[\"ziphash\",{\"1\":{\"507\":1,\"510\":3}}],[\"zip\",{\"1\":{\"7\":2,\"65\":3,\"90\":2,\"93\":3,\"507\":1,\"510\":3,\"616\":1}}],[\"zscore\",{\"1\":{\"280\":1}}],[\"zcount\",{\"1\":{\"280\":1}}],[\"zremrangebyscore\",{\"1\":{\"282\":1}}],[\"zremrangebyrank\",{\"1\":{\"282\":1}}],[\"zrem\",{\"1\":{\"282\":1}}],[\"zrevrank\",{\"1\":{\"279\":1}}],[\"zrangeby\",{\"1\":{\"280\":1}}],[\"zrangebyscore\",{\"1\":{\"280\":1}}],[\"zrange\",{\"1\":{\"280\":1}}],[\"zrank\",{\"1\":{\"279\":1}}],[\"z\",{\"1\":{\"160\":2,\"278\":2,\"281\":1,\"296\":1,\"509\":1,\"1024\":2}}],[\"zookeeper\",{\"1\":{\"139\":1,\"175\":2}}],[\"zh\",{\"1\":{\"99\":1,\"287\":1,\"731\":4,\"923\":1,\"952\":18,\"953\":8}}],[\"zadd\",{\"1\":{\"278\":1}}],[\"zanzibar\",{\"1\":{\"78\":1}}],[\"zaplevelenabler\",{\"1\":{\"842\":1,\"843\":1}}],[\"zaplogtest\",{\"1\":{\"840\":1,\"843\":1}}],[\"zapwritesyncer\",{\"1\":{\"841\":1,\"843\":1}}],[\"zapencoder\",{\"1\":{\"840\":1,\"843\":1}}],[\"zapconfig\",{\"1\":{\"840\":5,\"841\":1,\"842\":1,\"843\":3}}],[\"zapcore\",{\"1\":{\"839\":1,\"840\":12,\"841\":5,\"842\":1,\"843\":5}}],[\"zap日志配置结构体\",{\"1\":{\"840\":1}}],[\"zap日志配置\",{\"1\":{\"840\":1}}],[\"zap\",{\"0\":{\"836\":1},\"1\":{\"54\":2,\"836\":4,\"837\":1,\"838\":6,\"839\":4,\"840\":3,\"841\":1,\"842\":6,\"843\":7}}],[\"zeroedbase\",{\"1\":{\"1115\":1}}],[\"zeroedbase就是该heaparena所管理的页内存的起始地址\",{\"1\":{\"1115\":1}}],[\"zeroed\",{\"1\":{\"1114\":1}}],[\"zeroval\",{\"1\":{\"1036\":2}}],[\"zerobase\",{\"1\":{\"1025\":1}}],[\"zerolog\",{\"1\":{\"54\":2}}],[\"zeromicro\",{\"1\":{\"53\":1}}],[\"zero\",{\"1\":{\"53\":2,\"610\":1,\"719\":2,\"823\":2,\"1027\":1,\"1028\":1,\"1065\":1,\"1074\":1,\"1112\":5,\"1119\":1}}],[\"zenazn\",{\"1\":{\"51\":1}}],[\"zgoarch\",{\"1\":{\"14\":1}}],[\"目标协程就会走到runtime\",{\"1\":{\"1107\":1}}],[\"目标文件\",{\"1\":{\"201\":1}}],[\"目录添加到环境变量中\",{\"1\":{\"148\":1,\"200\":1}}],[\"目录中\",{\"1\":{\"28\":1}}],[\"目录\",{\"1\":{\"22\":1,\"28\":1,\"416\":1,\"1002\":1}}],[\"目录作为参数\",{\"1\":{\"16\":1}}],[\"目录下有着相当多的使用示例\",{\"1\":{\"222\":1}}],[\"目录下安装新版本的\",{\"1\":{\"18\":1}}],[\"目录下\",{\"1\":{\"15\":1,\"28\":1,\"156\":1,\"492\":1,\"496\":1,\"1011\":1}}],[\"目录下的工具\",{\"1\":{\"14\":1}}],[\"目前支持以下系统架构\",{\"1\":{\"904\":1}}],[\"目前支持以下几种数据库\",{\"1\":{\"851\":1}}],[\"目前支持以下几种测试\",{\"1\":{\"516\":1}}],[\"目前支持的签名算法有\",{\"1\":{\"776\":1}}],[\"目前为止你必须使用内置的\",{\"1\":{\"763\":1}}],[\"目前为止已分配的所有内存空间\",{\"1\":{\"560\":1}}],[\"目前还不支持简写匿名函数\",{\"1\":{\"587\":1}}],[\"目前已分配的所有对象数量\",{\"1\":{\"560\":1}}],[\"目前国内做的比较好的有以下几家\",{\"1\":{\"501\":1}}],[\"目前所有的格式化动词\",{\"1\":{\"341\":1}}],[\"目前个人只推荐下面两个\",{\"1\":{\"94\":1}}],[\"目前公开且可信任的第三方模块代理如下\",{\"1\":{\"7\":1}}],[\"目前而言只有一个包含世界各国时区信息的库\",{\"1\":{\"7\":1}}],[\"指程序一边运行一边标记\",{\"1\":{\"1136\":1}}],[\"指因垃圾回收暂停整个程序\",{\"1\":{\"1130\":1}}],[\"指的就是负责垃圾回收的程序\",{\"1\":{\"1131\":1}}],[\"指的就是系统线程\",{\"1\":{\"1090\":1}}],[\"指的是黑灰白三色\",{\"1\":{\"1135\":1}}],[\"指的是runtime\",{\"1\":{\"1131\":2}}],[\"指的是用户程序\",{\"1\":{\"1131\":1}}],[\"指的是每次内存分配时使用多少的内存\",{\"1\":{\"1112\":1}}],[\"指的是工作在系统线程上的处理器\",{\"1\":{\"1085\":1}}],[\"指的是展开的意思\",{\"1\":{\"1076\":1}}],[\"指的是注意的是\",{\"1\":{\"1066\":1}}],[\"指的是hmap的指针\",{\"1\":{\"1034\":1}}],[\"指的是make函数的第二个参数\",{\"1\":{\"1034\":1}}],[\"指的是\",{\"1\":{\"1034\":1,\"1085\":1}}],[\"指的是数组能容纳元素的总数\",{\"1\":{\"1019\":1}}],[\"指的是数组中已有的元素数量\",{\"1\":{\"1019\":1}}],[\"指的是请求行为\",{\"1\":{\"761\":1}}],[\"指的是行为\",{\"1\":{\"760\":1}}],[\"指的是替换次数\",{\"1\":{\"715\":1}}],[\"指的是位数\",{\"1\":{\"698\":1}}],[\"指的是精度\",{\"1\":{\"698\":1}}],[\"指的是格式化类型\",{\"1\":{\"698\":1}}],[\"指的是在标记扫描工作完成后\",{\"1\":{\"1131\":1}}],[\"指的是在\",{\"1\":{\"533\":1}}],[\"指的是使用的\",{\"1\":{\"143\":1}}],[\"指的是不再维护的历史版本\",{\"1\":{\"89\":1}}],[\"指的是目前处于维护状态的两个稳定版本\",{\"1\":{\"89\":1}}],[\"指的是程序的运行参数\",{\"1\":{\"13\":1}}],[\"指是系统线程或者叫工作线程\",{\"1\":{\"1085\":1}}],[\"指请求对象\",{\"1\":{\"761\":1}}],[\"指请求主体\",{\"1\":{\"761\":1}}],[\"指\",{\"1\":{\"715\":1}}],[\"指要被替换的部分\",{\"1\":{\"715\":1}}],[\"指要转换的浮点数\",{\"1\":{\"698\":1}}],[\"指向下一个将要被唤醒的协程\",{\"1\":{\"1166\":1}}],[\"指向下一个空闲的溢出桶的指针\",{\"1\":{\"1032\":1}}],[\"指向当前正在使用的内存块中的空闲地址\",{\"1\":{\"1112\":1}}],[\"指向可复用内存片的头节点\",{\"1\":{\"1112\":1}}],[\"指向一个\",{\"1\":{\"1067\":1}}],[\"指向大小为dataqsize的数组的指针\",{\"1\":{\"1057\":1}}],[\"指向新桶的下半区\",{\"1\":{\"1042\":1}}],[\"指向新桶的上半区\",{\"1\":{\"1042\":1}}],[\"指向新值目的地的指针\",{\"1\":{\"1042\":1}}],[\"指向新键目的地的指针\",{\"1\":{\"1042\":1}}],[\"指向哈希桶的头部\",{\"1\":{\"1037\":1}}],[\"指向溢出桶的指针\",{\"1\":{\"1030\":1}}],[\"指向旧数组的指针\",{\"1\":{\"1025\":1}}],[\"指向底层数组的指针\",{\"1\":{\"1019\":1}}],[\"指向同一个元素或指向的元素完全相等\",{\"1\":{\"460\":1}}],[\"指向指针的值\",{\"1\":{\"428\":1}}],[\"指向值的指针\",{\"1\":{\"428\":3}}],[\"指针访问字符串地址的例子\",{\"1\":{\"1052\":1}}],[\"指针移动dataoffset后\",{\"1\":{\"1030\":1}}],[\"指针来进行访问\",{\"1\":{\"1030\":1}}],[\"指针存储的地址是否相等\",{\"1\":{\"568\":1}}],[\"指针存储的是变量num的地址\",{\"1\":{\"391\":1}}],[\"指针引用\",{\"1\":{\"543\":2}}],[\"指针可能就成了\",{\"1\":{\"543\":1}}],[\"指针后传递给\",{\"1\":{\"536\":1}}],[\"指针通过\",{\"1\":{\"533\":1}}],[\"指针也可以理解为是一个容器\",{\"1\":{\"433\":1}}],[\"指针接收者\",{\"0\":{\"414\":1}}],[\"指针\",{\"0\":{\"390\":1,\"408\":1,\"441\":1,\"543\":1},\"1\":{\"320\":1,\"321\":1,\"332\":1,\"341\":1,\"364\":1,\"460\":1,\"536\":1,\"568\":1,\"751\":1,\"1070\":1}}],[\"指纹\",{\"1\":{\"205\":1}}],[\"指示编译器从哪里寻找protobuf文件以及如何解析导入路径\",{\"1\":{\"201\":1}}],[\"指令\",{\"0\":{\"39\":1,\"515\":1},\"1\":{\"40\":3}}],[\"指定搬迁目的地\",{\"1\":{\"1042\":1}}],[\"指定的目录必须要包含接口文档的基本信息\",{\"1\":{\"1017\":1}}],[\"指定表注释\",{\"0\":{\"864\":1}}],[\"指定表名\",{\"0\":{\"855\":1}}],[\"指定连接表的外键列名\",{\"1\":{\"862\":2}}],[\"指定连接表表名\",{\"1\":{\"862\":1}}],[\"指定多态值\",{\"1\":{\"862\":1}}],[\"指定多态类型\",{\"1\":{\"862\":1}}],[\"指定引用表的列名\",{\"1\":{\"862\":1}}],[\"指定当前模型的列作为连接表的外键\",{\"1\":{\"862\":1}}],[\"指定列为自动增长\",{\"1\":{\"862\":1}}],[\"指定列为\",{\"1\":{\"862\":1}}],[\"指定列大小\",{\"1\":{\"862\":1}}],[\"指定列的精度\",{\"1\":{\"862\":1}}],[\"指定列名\",{\"0\":{\"854\":1}}],[\"指定将数据序列化或反序列化到数据库中的序列化器\",{\"1\":{\"862\":1}}],[\"指定将哪些模块纳入管理\",{\"1\":{\"32\":1}}],[\"指定字段名\",{\"1\":{\"812\":2,\"813\":1}}],[\"指定上述的统计文件的输出目录\",{\"1\":{\"519\":1}}],[\"指定替换的模块\",{\"1\":{\"515\":1}}],[\"指定使用的模块\",{\"1\":{\"515\":1}}],[\"指定使用哪个编译器\",{\"1\":{\"8\":1}}],[\"指定哪些模块参与编译\",{\"1\":{\"513\":1}}],[\"指定哪些目标文件要被编译\",{\"1\":{\"201\":1}}],[\"指定子协程的数量\",{\"1\":{\"472\":1}}],[\"指定paths=example\",{\"1\":{\"201\":1}}],[\"指定了t\",{\"1\":{\"1098\":1}}],[\"指定了使用的\",{\"1\":{\"525\":1}}],[\"指定了\",{\"1\":{\"143\":1}}],[\"指定某一个测试用例\",{\"1\":{\"38\":1}}],[\"指定某一个测试文件\",{\"1\":{\"38\":1}}],[\"指定每个测试用例执行多少次\",{\"1\":{\"38\":1}}],[\"指定测试二进制文件的路径名\",{\"1\":{\"38\":1}}],[\"指定输出路径文件夹\",{\"1\":{\"28\":1}}],[\"指定最新版本\",{\"1\":{\"18\":1}}],[\"指定编译后的二进制文件名称\",{\"1\":{\"519\":1}}],[\"指定编译器\",{\"1\":{\"8\":2}}],[\"指定编译模式\",{\"1\":{\"8\":1}}],[\"指定\",{\"1\":{\"8\":2,\"34\":1,\"38\":1,\"515\":1,\"862\":1}}],[\"还要收集本轮扫描工作的各种数据来调整调步算法来为下一轮扫描做准备\",{\"1\":{\"1140\":1}}],[\"还会先进行初始化\",{\"1\":{\"1120\":1}}],[\"还找不到就继续遍历溢出桶\",{\"1\":{\"1036\":1}}],[\"还请自行了解\",{\"1\":{\"642\":1}}],[\"还专门为此去实现一个推送式迭代器来进行转换\",{\"1\":{\"583\":1}}],[\"还希望它是一个稳定高效的应用\",{\"1\":{\"548\":1}}],[\"还得初始化\",{\"1\":{\"391\":1}}],[\"还需要再一次判断done的值\",{\"1\":{\"1173\":1}}],[\"还需要确保本地拥有c\",{\"1\":{\"530\":1}}],[\"还需要注意的是\",{\"1\":{\"329\":1}}],[\"还需要指定生成路径以及目标protobuf文件\",{\"1\":{\"201\":1}}],[\"还支持很多其他的参数\",{\"1\":{\"1017\":1}}],[\"还支持break\",{\"1\":{\"732\":1}}],[\"还支持简单的消息队列\",{\"1\":{\"239\":1}}],[\"还支持以下的一些服务商发现方法\",{\"1\":{\"141\":1}}],[\"还提供了很多函数用于\",{\"1\":{\"681\":1}}],[\"还提供了许多函数来方便操作\",{\"1\":{\"488\":1}}],[\"还提供了findoneandupdate和findoneandreplace来获取文档和更新文档\",{\"1\":{\"227\":1}}],[\"还提供了replace\",{\"1\":{\"227\":1}}],[\"还提供了一个参数\",{\"1\":{\"13\":1}}],[\"还默认支持\",{\"1\":{\"174\":1}}],[\"还可以对其进行访问\",{\"1\":{\"1071\":1}}],[\"还可以自定义转换方法\",{\"1\":{\"813\":1}}],[\"还可以自动补零\",{\"1\":{\"341\":1}}],[\"还可以用web和weblist命令在浏览器中查看图片和源代码\",{\"1\":{\"559\":1}}],[\"还可以使用clause\",{\"1\":{\"899\":1}}],[\"还可以使用omit方法来忽略字段\",{\"1\":{\"874\":1}}],[\"还可以使用两个方便函数来进行文件读取\",{\"1\":{\"417\":1}}],[\"还可以使用uft8包下的工具\",{\"1\":{\"380\":1}}],[\"还可以使用metadata\",{\"1\":{\"161\":1}}],[\"还可以通过内置函数len来访问数组元素的数量\",{\"1\":{\"361\":1}}],[\"还可以通过new函数获得一个指针\",{\"1\":{\"360\":1}}],[\"还可以通过导入标准库cmp来判断\",{\"1\":{\"332\":1}}],[\"还可以在表达式之前编写一些简单语句\",{\"1\":{\"350\":1}}],[\"还可以\",{\"1\":{\"325\":1}}],[\"还可以支持\",{\"1\":{\"214\":1}}],[\"还可以给message和enum添加一些元信息\",{\"1\":{\"198\":1}}],[\"还可以做分布式配置中心\",{\"1\":{\"139\":1}}],[\"还是老样子\",{\"1\":{\"1157\":1}}],[\"还是老老实实用\",{\"1\":{\"547\":1}}],[\"还是没有一个很好的实现\",{\"1\":{\"1062\":1}}],[\"还是跟之前一样\",{\"1\":{\"1024\":1}}],[\"还是拿sum\",{\"1\":{\"546\":1}}],[\"还是拿之前的例子来讲\",{\"1\":{\"201\":1}}],[\"还是相当麻烦的\",{\"1\":{\"175\":1}}],[\"还是实验性质的\",{\"1\":{\"116\":1}}],[\"还是一门完全开源的语言\",{\"1\":{\"88\":1}}],[\"还负责链接文件\",{\"1\":{\"14\":1}}],[\"还有剩余\",{\"1\":{\"1139\":1}}],[\"还有许多其它的各式各样的分配器\",{\"1\":{\"1118\":1}}],[\"还有微对象缓存tiny\",{\"1\":{\"1116\":1}}],[\"还有其它的一些操作就不过多赘述\",{\"1\":{\"1040\":1}}],[\"还有其它许多功能\",{\"1\":{\"903\":1}}],[\"还有房子的所有主人\",{\"1\":{\"899\":1}}],[\"还有not方法\",{\"1\":{\"875\":1}}],[\"还有base64这种\",{\"1\":{\"616\":1}}],[\"还有以下缺点\",{\"1\":{\"547\":1}}],[\"还有个办法就是静态链接库和动态链接库\",{\"1\":{\"544\":1}}],[\"还有第二个返回值\",{\"1\":{\"465\":1}}],[\"还有另一种特殊的使用方法就是匿名导入包\",{\"1\":{\"295\":1}}],[\"还有部分指令限制了只能由runtime包使用\",{\"1\":{\"49\":1}}],[\"还有一种很极端的情况\",{\"1\":{\"607\":1}}],[\"还有一种特殊情况便是函数参数为\",{\"1\":{\"553\":1}}],[\"还有一种情况\",{\"1\":{\"414\":1}}],[\"还有一点就是\",{\"1\":{\"299\":1}}],[\"还有一位是\",{\"1\":{\"87\":1}}],[\"还有一些其它的数据库驱动是由第三方开发者提供的\",{\"1\":{\"851\":1}}],[\"还有一些其它用于展示的参数\",{\"1\":{\"26\":1}}],[\"还有一些基础的io操作函数\",{\"1\":{\"616\":1}}],[\"还有一些外置的分析器\",{\"1\":{\"37\":1}}],[\"还有一个比较特殊的内置函数call\",{\"1\":{\"728\":1}}],[\"还有一个用法是捕获panic\",{\"1\":{\"400\":1}}],[\"还有一个用途就是声明一个指针\",{\"1\":{\"391\":1}}],[\"还有一个非常重要的点\",{\"1\":{\"395\":1}}],[\"还有一个\",{\"1\":{\"33\":1}}],[\"还有一个可用的选项是off\",{\"1\":{\"7\":1}}],[\"还有很多工具可以调用\",{\"1\":{\"14\":1}}],[\"还有很长的路要走\",{\"1\":{\"0\":1}}],[\"时的两倍\",{\"1\":{\"1132\":1}}],[\"时禁止抢占\",{\"1\":{\"1087\":1}}],[\"时即一个空的\",{\"1\":{\"1066\":1}}],[\"时都有敲过\",{\"1\":{\"1051\":1}}],[\"时使用的是自定义\",{\"1\":{\"784\":1}}],[\"时表示不限制替换次数\",{\"1\":{\"715\":1}}],[\"时区\",{\"1\":{\"649\":1}}],[\"时序数据库\",{\"1\":{\"614\":2}}],[\"时至今日\",{\"1\":{\"492\":1}}],[\"时会复制大量的内存\",{\"1\":{\"396\":1}}],[\"时应当尽量分配一个合理的容量\",{\"1\":{\"382\":1}}],[\"时刻保持最新\",{\"1\":{\"289\":1}}],[\"时\",{\"1\":{\"158\":1,\"384\":1,\"509\":1,\"537\":1,\"563\":1,\"732\":1,\"781\":1,\"796\":1,\"1034\":1,\"1039\":1,\"1053\":1,\"1093\":1,\"1102\":1,\"1114\":1,\"1130\":1,\"1137\":1,\"1138\":1}}],[\"时指定的节点为默认\",{\"1\":{\"143\":1}}],[\"时间片\",{\"0\":{\"912\":1},\"1\":{\"908\":1}}],[\"时间追踪\",{\"0\":{\"856\":1}}],[\"时间单位\",{\"0\":{\"738\":1}}],[\"时间\",{\"1\":{\"649\":1,\"924\":1,\"1153\":1}}],[\"时间操作的包\",{\"1\":{\"616\":1}}],[\"时间最早可以追溯到\",{\"1\":{\"288\":1}}],[\"时间类型可以格式化输出\",{\"1\":{\"739\":1}}],[\"时间类型\",{\"1\":{\"194\":1}}],[\"时间相较于\",{\"1\":{\"130\":1}}],[\"时间日期处理库\",{\"1\":{\"66\":1}}],[\"时期时间\",{\"0\":{\"66\":1}}],[\"时输出不同\",{\"1\":{\"12\":1}}],[\"时完成了自举\",{\"1\":{\"8\":1}}],[\"逗号表示\",{\"1\":{\"12\":1}}],[\"可扩展性\",{\"1\":{\"963\":1}}],[\"可扩展的结构化数据序列化机制\",{\"1\":{\"180\":1,\"629\":1}}],[\"可预测的\",{\"1\":{\"963\":1}}],[\"可有些时候对于一些特殊需求必须要自己定义逻辑\",{\"1\":{\"949\":1}}],[\"可使用验证标签和自定义验证器来进行跨字段和跨结构体验证\",{\"1\":{\"927\":1}}],[\"可提供的配置项总共有四个\",{\"1\":{\"640\":1}}],[\"可读性\",{\"1\":{\"598\":1}}],[\"可比较\",{\"1\":{\"568\":1}}],[\"可看\",{\"1\":{\"516\":1}}],[\"可用于网络传输\",{\"1\":{\"618\":1}}],[\"可用的签名算法有好几种\",{\"1\":{\"777\":1}}],[\"可用的版本号自行前往官方查阅\",{\"1\":{\"509\":1}}],[\"可用的值如下\",{\"1\":{\"37\":1}}],[\"可用时\",{\"1\":{\"471\":1}}],[\"可接收的底层参数类型必须是指针\",{\"1\":{\"433\":1}}],[\"可能刚刚退出\",{\"1\":{\"1086\":1}}],[\"可能为空\",{\"1\":{\"1045\":1}}],[\"可能有些桶有很多的元素\",{\"1\":{\"1043\":1}}],[\"可能当前切片的数据在不知情的情况下就被别的切片修改了\",{\"1\":{\"1019\":1}}],[\"可能需要关闭router\",{\"1\":{\"959\":1}}],[\"可能如下所示\",{\"1\":{\"828\":1}}],[\"可能不太适合处理\",{\"1\":{\"529\":1}}],[\"可能是一个结构体\",{\"1\":{\"521\":1}}],[\"可能是项目直接引用的依赖引用了该依赖\",{\"1\":{\"509\":1}}],[\"可能的目录结构如下\",{\"1\":{\"510\":1}}],[\"可能子协程还没开始运行\",{\"1\":{\"462\":1}}],[\"可能很多人认为是下面这种输出\",{\"1\":{\"402\":1}}],[\"可能会出现内存顺序问题\",{\"1\":{\"1153\":1}}],[\"可能会导致其它的\",{\"1\":{\"1105\":1}}],[\"可能会耗时很长\",{\"1\":{\"1105\":1}}],[\"可能会被其它的\",{\"1\":{\"1088\":1}}],[\"可能会被修改或删除\",{\"1\":{\"170\":1}}],[\"可能会用到不止一种语言\",{\"1\":{\"952\":1}}],[\"可能会无法判别错误的类别或者误判\",{\"1\":{\"602\":1}}],[\"可能会返回nil\",{\"1\":{\"474\":1}}],[\"可能会发生关闭一个已经关闭了的管道\",{\"1\":{\"468\":1}}],[\"可能会有以下两种情况\",{\"1\":{\"187\":1}}],[\"可见\",{\"1\":{\"1067\":1}}],[\"可见模板引擎的使用其实相当简单\",{\"1\":{\"723\":1}}],[\"可见性\",{\"0\":{\"294\":1}}],[\"可见兼容性保持的还算可以\",{\"1\":{\"16\":1}}],[\"可选的值如下\",{\"1\":{\"1086\":1}}],[\"可选的有amd64\",{\"1\":{\"11\":1}}],[\"可选的有linux\",{\"1\":{\"11\":1}}],[\"可选持久性的键值对\",{\"1\":{\"239\":1}}],[\"可基于内存\",{\"1\":{\"239\":1}}],[\"可视化的邮件列表管理\",{\"1\":{\"71\":1}}],[\"可拓展的\",{\"1\":{\"70\":1}}],[\"可拓展的现代\",{\"1\":{\"52\":1}}],[\"可以确保共享资源的访问安全\",{\"1\":{\"1170\":1}}],[\"可以确保在标记过程中不会有对象被误清理\",{\"1\":{\"1136\":1}}],[\"可以正常使用\",{\"1\":{\"1148\":1}}],[\"可以正常运行\",{\"1\":{\"414\":1}}],[\"可以节省掉\",{\"1\":{\"1144\":1}}],[\"可以注意到的是标记任务的基本分配单位是处理器\",{\"1\":{\"1138\":1}}],[\"可以注意到多了一个paths=source\",{\"1\":{\"201\":1}}],[\"可以分为下面几个大类\",{\"1\":{\"1130\":1}}],[\"可以大致分为下面几个大类\",{\"1\":{\"1130\":1}}],[\"可以被调度器分配\",{\"1\":{\"1088\":1}}],[\"可以其它状态共存\",{\"1\":{\"1086\":1}}],[\"可以说它就是整个语言最核心的一块\",{\"1\":{\"1083\":1}}],[\"可以说是涉及到了\",{\"1\":{\"2\":1}}],[\"可以减少开销\",{\"1\":{\"1073\":1}}],[\"可以减少其内存占用\",{\"1\":{\"410\":1}}],[\"可以采用分段锁的方式来实现\",{\"1\":{\"1050\":1}}],[\"可以理解为对dirty的缓存\",{\"1\":{\"1045\":1}}],[\"可以理解为下面的伪代码\",{\"1\":{\"1021\":1}}],[\"可以退出了\",{\"1\":{\"1037\":1}}],[\"可以避免频繁的扩容\",{\"1\":{\"1025\":1}}],[\"可以实现日志写入文件中\",{\"1\":{\"1007\":1}}],[\"可以实现类似\",{\"1\":{\"735\":1}}],[\"可以获取对应的\",{\"1\":{\"1003\":1}}],[\"可以获取到本地请求的请求数据和响应数据以及一些其他的请求信息\",{\"1\":{\"166\":1}}],[\"可以用于统计运行时的内存情况\",{\"1\":{\"1128\":1}}],[\"可以用于清空\",{\"1\":{\"1040\":1}}],[\"可以用于传递给一个goroutine\",{\"1\":{\"982\":1}}],[\"可以用一些特定的名称来进行代替\",{\"1\":{\"174\":1}}],[\"可以防止json劫持\",{\"1\":{\"981\":1}}],[\"可以多次调用c\",{\"1\":{\"975\":1}}],[\"可以多次使用来指定多个扫描路径\",{\"1\":{\"201\":1}}],[\"可以接受其他格式\",{\"1\":{\"975\":1}}],[\"可以解析并验证请求的\",{\"1\":{\"963\":1}}],[\"可以设置一个错误处理器来处理请求中的异常\",{\"1\":{\"954\":1}}],[\"可以设为1\",{\"1\":{\"533\":1}}],[\"可以重写指定\",{\"1\":{\"952\":1}}],[\"可以有多个\",{\"1\":{\"952\":1}}],[\"可以有效减少后续扩容的内存消耗\",{\"1\":{\"364\":1}}],[\"可以传入的结构体也不止一种\",{\"1\":{\"951\":1}}],[\"可以传递\",{\"1\":{\"8\":1}}],[\"可以提高性能\",{\"1\":{\"1153\":1}}],[\"可以提高运行时性能\",{\"1\":{\"117\":1}}],[\"可以提取自定义的字段名\",{\"1\":{\"927\":1}}],[\"可以处理自定义字段类型\",{\"1\":{\"927\":1}}],[\"可以处理几乎所有类型的配置需求和格式\",{\"1\":{\"788\":1}}],[\"可以深入验证\",{\"1\":{\"927\":1}}],[\"可以指定回滚点\",{\"1\":{\"902\":1}}],[\"可以按照如下方法来设置\",{\"1\":{\"864\":1}}],[\"可以按照下面这样写\",{\"1\":{\"330\":1}}],[\"可以再观望下\",{\"1\":{\"849\":1}}],[\"可以试一试\",{\"1\":{\"849\":1}}],[\"可以试试官方提供的goplay\",{\"1\":{\"94\":1}}],[\"可以返回一个闭包来进行这样的操作\",{\"1\":{\"829\":1}}],[\"可以加\",{\"1\":{\"828\":1}}],[\"可以加上参数\",{\"1\":{\"518\":1}}],[\"可以加上\",{\"1\":{\"201\":1,\"503\":1}}],[\"可以修改\",{\"1\":{\"828\":1}}],[\"可以省去开发过程中许多不必要的麻烦\",{\"1\":{\"848\":1}}],[\"可以省去很多麻烦的操作\",{\"1\":{\"807\":1}}],[\"可以省略掉重复的类型声明\",{\"1\":{\"397\":1}}],[\"可以省略掉var关键字和后置类型\",{\"1\":{\"329\":1}}],[\"可以省略其类型\",{\"1\":{\"137\":1}}],[\"可以同时搜索多个路径\",{\"1\":{\"791\":1}}],[\"可以适当使用以达到目的需求\",{\"1\":{\"778\":1}}],[\"可以仅通过一个指针\",{\"1\":{\"751\":1}}],[\"可以进行数学运算\",{\"1\":{\"751\":1}}],[\"可以翻译为任意的\",{\"1\":{\"746\":1}}],[\"可以创建一个新的定时器\",{\"1\":{\"742\":1}}],[\"可以创建一个新的计时器\",{\"1\":{\"741\":1}}],[\"可以及时的处理并且保证程序继续运行\",{\"1\":{\"607\":1}}],[\"可以递归进行查找匹配\",{\"1\":{\"603\":1}}],[\"可以得到一个格式化参数的\",{\"1\":{\"600\":1}}],[\"可以一层一层往回找到\",{\"1\":{\"598\":1}}],[\"可以绕过\",{\"1\":{\"597\":1}}],[\"可以声明一个自定义名称的新类型\",{\"1\":{\"593\":1}}],[\"可以声明枚举常量并将其当作字段的类型来使用\",{\"1\":{\"190\":1}}],[\"可以暂时不需要关心这些\",{\"1\":{\"582\":1}}],[\"可以保存所有实现了crane接口的值\",{\"1\":{\"567\":1}}],[\"可以观察到接口的实现是隐式的\",{\"1\":{\"567\":1}}],[\"可以随意替换\",{\"1\":{\"567\":1}}],[\"可以随时切换版本\",{\"1\":{\"93\":1}}],[\"可以称类型\",{\"1\":{\"563\":1}}],[\"可以查看其它命令\",{\"1\":{\"559\":1}}],[\"可以自行创建多个实例以实现更多的操作\",{\"1\":{\"799\":1}}],[\"可以自行阅读源码\",{\"1\":{\"672\":1}}],[\"可以自定义一些行为\",{\"1\":{\"861\":1}}],[\"可以自定义\",{\"1\":{\"556\":1}}],[\"可以自己实现一个\",{\"1\":{\"1062\":1}}],[\"可以自己去了解\",{\"1\":{\"531\":1}}],[\"可以自己选择\",{\"1\":{\"156\":1}}],[\"可以从结果中看到测试全部通过了\",{\"1\":{\"527\":1}}],[\"可以发现又出错了\",{\"1\":{\"527\":1}}],[\"可以发现有一些依赖包的版本并不是语义化的版本号\",{\"1\":{\"509\":1}}],[\"可以发现相较于之前多了很多东西\",{\"1\":{\"503\":1}}],[\"可以存储非敏感信息\",{\"1\":{\"1004\":1}}],[\"可以存储任意类型的值\",{\"1\":{\"491\":1}}],[\"可以存在多个\",{\"1\":{\"324\":1,\"328\":1}}],[\"可以复用对象减少实例化的频率\",{\"1\":{\"485\":1}}],[\"可以做出如下修改\",{\"1\":{\"472\":1}}],[\"可以配合for循环使用\",{\"1\":{\"471\":1}}],[\"可以遍历读取缓冲管道中的数据\",{\"1\":{\"470\":1}}],[\"可以使当前协程暂停一段时间\",{\"1\":{\"462\":1}}],[\"可以使用反射\",{\"1\":{\"1070\":1}}],[\"可以使用swag\",{\"1\":{\"1017\":2}}],[\"可以使用select操作来删除记录\",{\"1\":{\"898\":1}}],[\"可以使用strings\",{\"1\":{\"379\":1}}],[\"可以使用类型别名\",{\"1\":{\"830\":1}}],[\"可以使用wire\",{\"1\":{\"827\":1,\"828\":1}}],[\"可以使用with\",{\"1\":{\"730\":1}}],[\"可以使用当前\",{\"1\":{\"743\":1}}],[\"可以使用any来替代interace\",{\"1\":{\"568\":1}}],[\"可以使用t\",{\"1\":{\"523\":1}}],[\"可以使用模块路径和版本替换又或者是其他平台指定的文件路径\",{\"1\":{\"509\":1}}],[\"可以使用os\",{\"1\":{\"416\":1}}],[\"可以使用赋值运算符直接进行交换\",{\"1\":{\"331\":1}}],[\"可以使用官方提供的语法糖\",{\"1\":{\"329\":1}}],[\"可以使用通配符\",{\"1\":{\"201\":1}}],[\"可以使用枚举别名\",{\"1\":{\"190\":1}}],[\"可以使用下面这个函数\",{\"1\":{\"163\":1}}],[\"可以使用grpc\",{\"1\":{\"162\":1}}],[\"可以使用metadata\",{\"1\":{\"162\":1}}],[\"可以使用命令\",{\"1\":{\"141\":1}}],[\"可以使用第三个参数来限制被分割的切片容量从而更安全的使用切片\",{\"1\":{\"135\":1}}],[\"可以使用ignore\",{\"1\":{\"12\":1}}],[\"可以使用\",{\"1\":{\"9\":1,\"201\":1,\"328\":1,\"725\":1,\"828\":1,\"975\":1,\"1016\":1}}],[\"可以达到同样的效果\",{\"1\":{\"434\":1}}],[\"可以判断类型为any的数据结构所存储的元素类型\",{\"1\":{\"433\":1}}],[\"可以知晓空接口存储的值究竟是什么基础类型\",{\"1\":{\"432\":1}}],[\"可以显式组合\",{\"1\":{\"407\":1}}],[\"可以显著的减小编译后的二进制文件的体积\",{\"1\":{\"10\":1}}],[\"可以更为灵活的实例化结构体\",{\"1\":{\"406\":1}}],[\"可以不需要重复声明类型\",{\"1\":{\"404\":1}}],[\"可以不用\",{\"1\":{\"827\":1}}],[\"可以不用设置\",{\"1\":{\"242\":1}}],[\"可以不用等待请求结束就可以发送\",{\"1\":{\"162\":1}}],[\"可以猜猜输出是什么\",{\"1\":{\"402\":1}}],[\"可以非常简单的实现一个求费波那契数列的函数\",{\"1\":{\"399\":1}}],[\"可以只需要声明一次类型\",{\"1\":{\"396\":1}}],[\"可以只写一次类型\",{\"1\":{\"328\":1}}],[\"可以访问它的长度和容量\",{\"1\":{\"1071\":1}}],[\"可以访问\",{\"1\":{\"382\":1}}],[\"可以\",{\"1\":{\"372\":1,\"533\":1,\"963\":1}}],[\"可以简单理解为是上面两个的具体实现\",{\"1\":{\"616\":1}}],[\"可以简单理解为是指向底层数组的指针\",{\"1\":{\"364\":1}}],[\"可以简单的看成一个形参\",{\"1\":{\"413\":1}}],[\"可以简单的构建全栈项目\",{\"1\":{\"51\":1}}],[\"可以让你马上使用\",{\"1\":{\"513\":1}}],[\"可以让编译器自动推断长度\",{\"1\":{\"360\":1}}],[\"可以让人很快的上手一个项目\",{\"1\":{\"88\":1}}],[\"可以是因为通道阻塞\",{\"1\":{\"1098\":1}}],[\"可以是\",{\"1\":{\"1000\":1}}],[\"可以是自身的字段名\",{\"1\":{\"946\":1}}],[\"可以是goto\",{\"1\":{\"351\":1}}],[\"可以是流式的\",{\"1\":{\"157\":1}}],[\"可以转换为\",{\"1\":{\"319\":1}}],[\"可以表达\",{\"1\":{\"319\":2}}],[\"可以去了解gorm\",{\"1\":{\"230\":1}}],[\"可以将它们都看作是指针\",{\"1\":{\"1070\":1}}],[\"可以将文件名作为参数\",{\"1\":{\"561\":1}}],[\"可以将query参数debug=1去掉\",{\"1\":{\"557\":1}}],[\"可以将其组合\",{\"1\":{\"1013\":1}}],[\"可以将其回收\",{\"1\":{\"553\":1}}],[\"可以将其放在makefile里面\",{\"1\":{\"201\":1}}],[\"可以将两者联系起来\",{\"1\":{\"529\":1}}],[\"可以将当前函数标记为帮助函数\",{\"1\":{\"522\":1}}],[\"可以将map作为set来进行使用\",{\"1\":{\"411\":1}}],[\"可以将某一个变量恢复为默认值\",{\"1\":{\"7\":1}}],[\"可以如下书写\",{\"1\":{\"189\":1}}],[\"可以如下设置\",{\"1\":{\"7\":2,\"533\":1}}],[\"可以允许同一个类型的值多次重复出现\",{\"1\":{\"187\":1}}],[\"可以定义数据的结构化方式\",{\"1\":{\"180\":1}}],[\"可以跨进程跨语言传递超时\",{\"1\":{\"169\":1}}],[\"可以容纳多个信息\",{\"1\":{\"168\":1}}],[\"可以选择自己造轮子\",{\"1\":{\"166\":1}}],[\"可以通过下面两行可以看到对runtime\",{\"1\":{\"1089\":1}}],[\"可以通过net\",{\"1\":{\"998\":1}}],[\"可以通过engine\",{\"1\":{\"986\":1}}],[\"可以通过索引或者byname\",{\"1\":{\"956\":1}}],[\"可以通过httprouter\",{\"1\":{\"956\":1}}],[\"可以通过如下方式来访问对应下标的值\",{\"1\":{\"725\":1}}],[\"可以通过字段名来访问其值\",{\"1\":{\"725\":1}}],[\"可以通过编译但是毫无意义\",{\"1\":{\"575\":1}}],[\"可以通过编译\",{\"1\":{\"574\":1,\"575\":1,\"593\":1}}],[\"可以通过\",{\"1\":{\"511\":1}}],[\"可以通过method\",{\"1\":{\"451\":1}}],[\"可以通过花括号建立一个代码块\",{\"1\":{\"333\":1}}],[\"可以通过强制类型转换将其他数字也转换成该类型\",{\"1\":{\"326\":1}}],[\"可以通过脚本来完成组合操作\",{\"1\":{\"218\":1}}],[\"可以通过发起请求时返回的流对象直接获取\",{\"1\":{\"163\":1}}],[\"可以通过getstring\",{\"1\":{\"791\":1}}],[\"可以通过grpc\",{\"1\":{\"163\":1}}],[\"可以通过got\",{\"1\":{\"16\":1}}],[\"可以直接返回\",{\"1\":{\"1154\":1,\"1177\":1}}],[\"可以直接判断其值是否为nil\",{\"1\":{\"1070\":1}}],[\"可以直接在where方法里面传入切片\",{\"1\":{\"875\":1}}],[\"可以直接转换自定义的\",{\"1\":{\"784\":1}}],[\"可以直接使用\",{\"1\":{\"145\":1,\"1097\":1}}],[\"可以直接将依赖地址作为参数\",{\"1\":{\"18\":1}}],[\"可以了解hashicorp\",{\"1\":{\"144\":1}}],[\"可以为nil\",{\"1\":{\"1034\":1}}],[\"可以为日后的维护省去不少的麻烦\",{\"1\":{\"517\":1}}],[\"可以为\",{\"1\":{\"94\":1}}],[\"可以尝试我写的一个命令行工具autotoolbox\",{\"1\":{\"94\":1}}],[\"可以考虑采用懒加载的方式\",{\"1\":{\"484\":1}}],[\"可以考虑\",{\"1\":{\"94\":1}}],[\"可以很轻易的整合其他框架\",{\"1\":{\"1005\":1}}],[\"可以很轻易的自定义\",{\"1\":{\"601\":1}}],[\"可以很轻易的写出一个主协程等待子协程执行完毕的例子\",{\"1\":{\"467\":1}}],[\"可以很快的理解它的内存占用也是\",{\"1\":{\"410\":1}}],[\"可以很大程度上提高团队的下限\",{\"1\":{\"88\":1}}],[\"可以很方便的数据类型转换\",{\"1\":{\"56\":1}}],[\"可以与绝世起重机无缝衔接\",{\"1\":{\"567\":1}}],[\"可以与\",{\"1\":{\"75\":1}}],[\"可以在不浪费性能也不影响用户程序的情况下完成\",{\"1\":{\"1138\":1}}],[\"可以在不知道格式的情况下解析时间字符串\",{\"1\":{\"66\":1}}],[\"可以在非阻塞的情况下判断管道是否可用\",{\"1\":{\"1063\":1}}],[\"可以在连接配置中关闭\",{\"1\":{\"900\":1}}],[\"可以在association操作后面加上unscoped操作\",{\"1\":{\"898\":1}}],[\"可以在参数前后加上\",{\"1\":{\"725\":1}}],[\"可以在标准库cmd\",{\"1\":{\"529\":1,\"550\":1}}],[\"可以在官方的在线网站直接进行编写\",{\"1\":{\"290\":1}}],[\"可以在任何环境中运行\",{\"1\":{\"146\":1}}],[\"可以在一定范围内兼容不同版本的节点进行工作\",{\"1\":{\"143\":1}}],[\"可以在运行时获取\",{\"1\":{\"119\":1}}],[\"可以在线运行\",{\"1\":{\"94\":1}}],[\"可以在结构体之间同名字段复制值\",{\"1\":{\"56\":1}}],[\"可以在cmd\",{\"1\":{\"39\":1}}],[\"可以在指定命令后面加上\",{\"1\":{\"3\":1}}],[\"可以前往栈内存分配进行了解\",{\"1\":{\"1116\":1}}],[\"可以前往about\",{\"1\":{\"1009\":1}}],[\"可以前往另一篇文档\",{\"1\":{\"1004\":1}}],[\"可以前往type\",{\"1\":{\"579\":1}}],[\"可以前往strings\",{\"1\":{\"380\":1}}],[\"可以前往注册中心对比和选型\",{\"1\":{\"175\":1}}],[\"可以前往\",{\"1\":{\"24\":1,\"750\":1}}],[\"可以govcs中进行配置\",{\"1\":{\"18\":1}}],[\"可以看看这个泛型数据结构库246859\",{\"1\":{\"579\":1}}],[\"可以看看这两个库\",{\"1\":{\"410\":1}}],[\"可以看看我写的这篇文章\",{\"1\":{\"88\":1}}],[\"可以看出\",{\"1\":{\"1098\":1}}],[\"可以看出这是该依赖的一个文档页面\",{\"1\":{\"503\":1}}],[\"可以看出数组的地址与数字第一个元素的地址一致\",{\"1\":{\"392\":1}}],[\"可以看出也是一个\",{\"1\":{\"167\":1}}],[\"可以看出go\",{\"1\":{\"17\":1}}],[\"可以看到能够被抢占需要满足四个条件\",{\"1\":{\"1106\":1}}],[\"可以看到本地队列的最大数量是\",{\"1\":{\"1088\":1}}],[\"可以看到里面存储着sp\",{\"1\":{\"1086\":1}}],[\"可以看到这里依赖的readercount都是在写锁部分维护的\",{\"1\":{\"1160\":1}}],[\"可以看到这里对读\",{\"1\":{\"1067\":1}}],[\"可以看到这一次通过了测试\",{\"1\":{\"527\":1}}],[\"可以看到这一次并没有通过\",{\"1\":{\"527\":1}}],[\"可以看到的就是这三个条件限制\",{\"1\":{\"1041\":1}}],[\"可以看到的是对于管道发送数据而言总共有下面几种情况\",{\"1\":{\"1059\":1}}],[\"可以看到的是\",{\"1\":{\"1019\":1,\"1026\":1,\"1028\":1,\"1033\":1}}],[\"可以看到调用了runtime\",{\"1\":{\"1038\":1}}],[\"可以看到分成三种情况\",{\"1\":{\"1024\":1}}],[\"可以看到代码访问切片长度以检查下标是否合法\",{\"1\":{\"1023\":1}}],[\"可以看到代码量要减少了一些\",{\"1\":{\"581\":1}}],[\"可以看到逻辑非常简单\",{\"1\":{\"1020\":1}}],[\"可以看到逻辑很清晰\",{\"1\":{\"824\":1}}],[\"可以看到中间件调用链的顺序为\",{\"1\":{\"995\":1}}],[\"可以看到基本的错误信息翻译已经做到了\",{\"1\":{\"952\":1}}],[\"可以看到输出了每一个学校的每一个学生的母亲以及它们的房子\",{\"1\":{\"899\":1}}],[\"可以看到将关联的mom一并查询出来了\",{\"1\":{\"899\":1}}],[\"可以看到在调用selectgo函数后是有一个判断+跳转逻辑存在的\",{\"1\":{\"1067\":1}}],[\"可以看到在init函数中有一个\",{\"1\":{\"1016\":1}}],[\"可以看到在with语句内部\",{\"1\":{\"730\":1}}],[\"可以看到在第六次遍历的时候读取的是零值\",{\"1\":{\"470\":1}}],[\"可以看到其输出形式跟直接使用fmt\",{\"1\":{\"725\":1}}],[\"可以看到demo\",{\"1\":{\"606\":1}}],[\"可以看到返回值是一个\",{\"1\":{\"952\":1}}],[\"可以看到返回值是\",{\"1\":{\"577\":1}}],[\"可以看到它把除了主键以外的字段全都添到了set语句中\",{\"1\":{\"884\":1}}],[\"可以看到它们都是被var定义的变量\",{\"1\":{\"600\":1}}],[\"可以看到它的第二个返回值是error类型\",{\"1\":{\"584\":1}}],[\"可以看到它的错误类型是syscall\",{\"1\":{\"531\":1}}],[\"可以看到它并不需要go\",{\"1\":{\"43\":1}}],[\"可以看到old执行耗时为\",{\"1\":{\"526\":1}}],[\"可以看到仓库的\",{\"1\":{\"495\":1}}],[\"可以看到rlocker也只是把读写互斥锁的读锁操作封装了一下\",{\"1\":{\"482\":1}}],[\"可以看到创建一个条件变量前提就是需要创建一个锁\",{\"1\":{\"482\":1}}],[\"可以看到最终结果为\",{\"1\":{\"479\":1}}],[\"可以看到仅仅只是返回了emptyctx指针\",{\"1\":{\"475\":1}}],[\"可以看到上面的代码发生了死锁\",{\"1\":{\"470\":1}}],[\"可以看到负责写的协程刚开始就一口气发送了\",{\"1\":{\"467\":1}}],[\"可以看到所有的数字都完整输出了\",{\"1\":{\"462\":1}}],[\"可以看到第一个参数是main\",{\"1\":{\"451\":1}}],[\"可以看到两者输出不同\",{\"1\":{\"982\":1}}],[\"可以看到两个函数的参数类型都是any\",{\"1\":{\"429\":1}}],[\"可以看到两边的输出都符合预期\",{\"1\":{\"166\":1}}],[\"可以看到结果并不是有序的\",{\"1\":{\"386\":1}}],[\"可以看到明明是向s2添加元素\",{\"1\":{\"371\":1}}],[\"可以看到长度与容量并不一致\",{\"1\":{\"365\":1}}],[\"可以看到切片与数组在外貌上的区别\",{\"1\":{\"364\":1}}],[\"可以看到iota的值本质上就是iota所在行相对于当前const分组的第一行的差值\",{\"1\":{\"325\":1}}],[\"可以看到请求体是需要自己手动序列化的\",{\"1\":{\"210\":1}}],[\"可以看到客户端接收的\",{\"1\":{\"167\":1}}],[\"可以看到以上两个函数返回值是calloption\",{\"1\":{\"163\":1}}],[\"可以看到消息的顺序逻辑是乱的\",{\"1\":{\"159\":1}}],[\"可以看到接收消息和发送消息的参数里面都有一个流包装接口\",{\"1\":{\"158\":1}}],[\"可以看到同一数据中心的数据是同步的\",{\"1\":{\"144\":1}}],[\"可以看到\",{\"1\":{\"144\":1,\"158\":1,\"370\":1,\"1101\":1}}],[\"可以看到几乎每个版本\",{\"1\":{\"129\":1}}],[\"可以看到并没有发现val函数的调用\",{\"1\":{\"45\":1}}],[\"可以看到已经链接成功了\",{\"1\":{\"44\":1}}],[\"可以看到gofmt会将冗余的括号删除掉\",{\"1\":{\"17\":1}}],[\"可以看到传入不同\",{\"1\":{\"12\":1}}],[\"可以向链接器传递一些参数以控制特定的行为\",{\"1\":{\"10\":1}}],[\"第七种情况\",{\"1\":{\"1067\":1}}],[\"第七行\",{\"1\":{\"325\":1}}],[\"第六种情况\",{\"1\":{\"1067\":1}}],[\"第六行\",{\"1\":{\"325\":1}}],[\"第五种情况\",{\"1\":{\"1067\":1}}],[\"第五列10000\",{\"1\":{\"525\":1}}],[\"第五行\",{\"1\":{\"325\":1}}],[\"第四种情况\",{\"1\":{\"1067\":1}}],[\"第四列4040056736\",{\"1\":{\"525\":1}}],[\"第四行\",{\"1\":{\"325\":1}}],[\"第二次是搬h\",{\"1\":{\"1042\":1}}],[\"第二次执行结果\",{\"1\":{\"526\":1}}],[\"第二步再决定遍历的两个起始位置\",{\"1\":{\"1037\":1}}],[\"第二步初始化\",{\"1\":{\"1034\":1}}],[\"第二步set\",{\"1\":{\"11\":1}}],[\"第二列的\",{\"1\":{\"525\":1}}],[\"第二行\",{\"1\":{\"325\":1}}],[\"第二个表示对于读管道操作而言是否成功读取\",{\"1\":{\"1067\":1}}],[\"第二个桶内的起始位置\",{\"1\":{\"1037\":1}}],[\"第二个就是ent\",{\"1\":{\"849\":1}}],[\"第二个就是数据源\",{\"1\":{\"232\":1}}],[\"第二个参数是处理器\",{\"1\":{\"643\":1}}],[\"第二个是性能比较好\",{\"1\":{\"838\":1}}],[\"第二个是具体实现的指针类型\",{\"1\":{\"826\":1}}],[\"第二个是error\",{\"1\":{\"728\":1}}],[\"第二个是\",{\"1\":{\"543\":1}}],[\"第二个是依赖包的go\",{\"1\":{\"510\":1}}],[\"第二个是可选参数为管道的缓冲大小\",{\"1\":{\"464\":1}}],[\"第二个值是是否设置deadline\",{\"1\":{\"474\":1}}],[\"第二个返回值必须是func\",{\"1\":{\"823\":1}}],[\"第二个返回值指的是能否成功读取数据\",{\"1\":{\"470\":1}}],[\"第二个返回值一个布尔值\",{\"1\":{\"383\":1}}],[\"第二个元素值\",{\"1\":{\"470\":1}}],[\"第二个不同的点就是多返回值\",{\"1\":{\"307\":1}}],[\"第二种情况缓冲区已满\",{\"1\":{\"1060\":1}}],[\"第二种情况\",{\"1\":{\"1047\":1,\"1066\":1,\"1067\":1}}],[\"第二种\",{\"1\":{\"1038\":1}}],[\"第二种类型是捕获全部参数\",{\"1\":{\"957\":1}}],[\"第二种用法\",{\"1\":{\"571\":1}}],[\"第二种是判断数据是否读取成功\",{\"1\":{\"1060\":1}}],[\"第二种是使用fmt包下的errorf函数\",{\"1\":{\"600\":1}}],[\"第二种是多行输出\",{\"1\":{\"520\":1}}],[\"第二种是metadata\",{\"1\":{\"161\":1}}],[\"第二种写法利用了if语句是从上到下的判断的前提\",{\"1\":{\"349\":1}}],[\"第二种方式是使用\",{\"1\":{\"424\":1}}],[\"第二种方式每次都要指定类型\",{\"1\":{\"329\":1}}],[\"第二种方法是抢占标记\",{\"1\":{\"1106\":1}}],[\"第二种方法是使用内置函数make\",{\"1\":{\"382\":1}}],[\"第二种方法在实践中更加常用\",{\"1\":{\"295\":1}}],[\"第三种情况\",{\"1\":{\"1047\":1,\"1066\":1,\"1067\":1}}],[\"第三种\",{\"1\":{\"1038\":1}}],[\"第三种是无序输出\",{\"1\":{\"520\":1}}],[\"第三个返回值\",{\"1\":{\"823\":1}}],[\"第三个写协程执行完毕\",{\"1\":{\"482\":1}}],[\"第三列277771375\",{\"1\":{\"525\":1}}],[\"第三行\",{\"1\":{\"325\":1}}],[\"第三方\",{\"1\":{\"104\":1}}],[\"第三方库\",{\"1\":{\"96\":1}}],[\"第三方依赖二进制文件存放地址\",{\"1\":{\"92\":1}}],[\"第三步设置\",{\"1\":{\"11\":1}}],[\"第一次是搬当前正在访问桶的旧桶\",{\"1\":{\"1042\":1}}],[\"第一次执行结果\",{\"1\":{\"526\":1}}],[\"第一次测试失败后\",{\"1\":{\"519\":1}}],[\"第一列benchmarkconcatdirect\",{\"1\":{\"525\":1}}],[\"第一种情况是是否有\",{\"1\":{\"1097\":1}}],[\"第一种情况是\",{\"1\":{\"1066\":1}}],[\"第一种情况\",{\"1\":{\"1047\":1,\"1060\":1,\"1067\":1}}],[\"第一种\",{\"1\":{\"1038\":1}}],[\"第一种用法\",{\"1\":{\"571\":1}}],[\"第一种是只读取数据\",{\"1\":{\"1060\":1}}],[\"第一种是只有一行输出\",{\"1\":{\"520\":1}}],[\"第一种是使用errors包下的new函数\",{\"1\":{\"600\":1}}],[\"第一种是往类型集中并入该类型\",{\"1\":{\"574\":1}}],[\"第一种是字面量\",{\"1\":{\"382\":1}}],[\"第一种方法就是在用户代码中主动让权\",{\"1\":{\"1106\":1}}],[\"第一种方法是将原文件中的数据读取出来\",{\"1\":{\"419\":1}}],[\"第一种方式是使用os\",{\"1\":{\"424\":1}}],[\"第一种写法\",{\"1\":{\"349\":1}}],[\"第一种就是使用metadata\",{\"1\":{\"161\":1}}],[\"第一行\",{\"1\":{\"325\":1}}],[\"第一行syntax\",{\"1\":{\"181\":1}}],[\"第一步set\",{\"1\":{\"11\":1}}],[\"第一个\",{\"1\":{\"1104\":1}}],[\"第一个字段就是属于该协程的栈的内存起始地址和结束地址\",{\"1\":{\"1086\":1}}],[\"第一个可用的溢出桶\",{\"1\":{\"1034\":1}}],[\"第一个指定的目录必须包含接口文档的基本信息\",{\"1\":{\"1017\":1}}],[\"第一个就是first方法\",{\"1\":{\"869\":1}}],[\"第一个就是快\",{\"1\":{\"11\":1}}],[\"第一个返回值是\",{\"1\":{\"823\":1}}],[\"第一个返回值对应类型的值\",{\"1\":{\"383\":1}}],[\"第一个参数应该传入结构体指针类型\",{\"1\":{\"828\":1}}],[\"第一个参数是具体的接口指针类型\",{\"1\":{\"826\":1}}],[\"第一个参数是监听的地址\",{\"1\":{\"643\":1}}],[\"第一个参数是接收者\",{\"1\":{\"451\":1}}],[\"第一个参数就是context类型\",{\"1\":{\"171\":1}}],[\"第一个常量使用iota值的表达式\",{\"1\":{\"325\":1}}],[\"第一个是随机选取的管道下标\",{\"1\":{\"1067\":1}}],[\"第一个是起始桶的位置\",{\"1\":{\"1037\":1}}],[\"第一个是备用的\",{\"1\":{\"952\":1}}],[\"第一个是aorm\",{\"1\":{\"849\":1}}],[\"第一个是一个支持printf风格但是性能相对较低的sugar\",{\"1\":{\"838\":1}}],[\"第一个是需要用到的返回值\",{\"1\":{\"728\":1}}],[\"第一个是\",{\"1\":{\"543\":1}}],[\"第一个是压缩包的哈希值\",{\"1\":{\"510\":1}}],[\"第一个是索引\",{\"1\":{\"470\":1}}],[\"第一个是管道的类型\",{\"1\":{\"464\":1}}],[\"第一个是访问指针所指向的元素\",{\"1\":{\"391\":1}}],[\"第一个是参数类型后置\",{\"1\":{\"307\":1}}],[\"第一个是驱动名称\",{\"1\":{\"232\":1}}],[\"第一个请求肯定是由客户端发起的\",{\"1\":{\"159\":1}}],[\"第一个稳定版本\",{\"1\":{\"138\":1}}],[\"第一个要认识的是help命令\",{\"1\":{\"3\":1}}],[\"一半是写者协程\",{\"1\":{\"1156\":1}}],[\"一次直接回收所有的垃圾\",{\"1\":{\"1130\":1}}],[\"一次性全部搬迁完的话耗时会很久\",{\"1\":{\"1042\":1}}],[\"一部分是\",{\"1\":{\"1129\":1}}],[\"一维则是\",{\"1\":{\"1115\":1}}],[\"一大来源是当前协程派生的子协程\",{\"1\":{\"1104\":1}}],[\"一直插队没完没了了\",{\"1\":{\"1151\":1}}],[\"一直都是沿用的这种调度策略\",{\"1\":{\"1106\":1}}],[\"一直沿用至今的调度模型\",{\"1\":{\"1085\":1}}],[\"一直运营和维护到现在\",{\"1\":{\"87\":1}}],[\"一是直接成功获取信号量\",{\"1\":{\"1153\":1}}],[\"一是正常模式\",{\"1\":{\"1151\":1}}],[\"一是非阻塞\",{\"1\":{\"1063\":1}}],[\"一是操作系统发送退出信号\",{\"1\":{\"1063\":1}}],[\"一是将指针接收者改为值接收者\",{\"1\":{\"414\":1}}],[\"一眼就能看懂\",{\"1\":{\"1041\":1}}],[\"一点也不复杂\",{\"1\":{\"1175\":1}}],[\"一点也没有\",{\"1\":{\"462\":1}}],[\"一点东西也没有\",{\"1\":{\"1019\":1}}],[\"一进来就+1是为了避免陷入递归死循环\",{\"1\":{\"995\":1}}],[\"一对多关联删除\",{\"1\":{\"898\":1}}],[\"一对多关联更新\",{\"1\":{\"897\":1}}],[\"一对多关联查找\",{\"1\":{\"896\":1}}],[\"一对多关联\",{\"1\":{\"895\":1}}],[\"一对多\",{\"0\":{\"892\":1}}],[\"一对一匹配\",{\"1\":{\"954\":1}}],[\"一对一关联删除\",{\"1\":{\"898\":1}}],[\"一对一关联更新\",{\"1\":{\"897\":1}}],[\"一对一关联查找\",{\"1\":{\"896\":1}}],[\"一对一关联\",{\"1\":{\"895\":1}}],[\"一对一关系是最简单的\",{\"1\":{\"891\":1}}],[\"一对一\",{\"0\":{\"891\":1}}],[\"一对键值\",{\"1\":{\"222\":2}}],[\"一派人更喜欢简洁的sqlx这一类的库\",{\"1\":{\"848\":1}}],[\"一类基于反射\",{\"1\":{\"810\":1}}],[\"一类是没有方法集的接口\",{\"1\":{\"428\":1}}],[\"一目了然\",{\"1\":{\"621\":1}}],[\"一组类型的集合\",{\"1\":{\"563\":1}}],[\"一组方法的集合\",{\"1\":{\"563\":1}}],[\"一组被版本标记的包集合\",{\"1\":{\"505\":1}}],[\"一致\",{\"1\":{\"511\":1}}],[\"一下写了5个\",{\"1\":{\"467\":1}}],[\"一定要释放回池中\",{\"1\":{\"485\":1}}],[\"一定要记得关闭文件\",{\"1\":{\"426\":1}}],[\"一定会觉得很熟悉\",{\"1\":{\"341\":1}}],[\"一种术语化的表达方式\",{\"1\":{\"1131\":1}}],[\"一种方案是通过写管道来判断管道是关闭\",{\"1\":{\"1062\":1}}],[\"一种是线性分配器\",{\"1\":{\"1110\":1}}],[\"一种是继续运行的\",{\"1\":{\"1097\":1}}],[\"一种是等待被调度的\",{\"1\":{\"1097\":1}}],[\"一种是使用关键字map直接创建\",{\"1\":{\"1034\":1}}],[\"一种是通过索引来进行访问\",{\"1\":{\"448\":1}}],[\"一种是通过func关键字直接声明\",{\"1\":{\"395\":1}}],[\"一种解决办法就是再定义一个新的函数\",{\"1\":{\"571\":1}}],[\"一种类似\",{\"1\":{\"218\":1}}],[\"一种非对称加密方法\",{\"1\":{\"117\":1}}],[\"一度已经成为了业界标准\",{\"1\":{\"172\":1}}],[\"一旦签发则无法主动控制\",{\"1\":{\"1004\":1}}],[\"一旦样本多了起来人工分析就会十分的费时费力\",{\"1\":{\"526\":1}}],[\"一旦加锁以后就必须保证不变量的不变性\",{\"1\":{\"479\":1}}],[\"一旦管道缓冲区空了或者满了\",{\"1\":{\"467\":1}}],[\"一旦主线程退出\",{\"1\":{\"462\":1}}],[\"一旦赋值过后就无法修改\",{\"1\":{\"323\":1}}],[\"一旦流被关闭\",{\"1\":{\"157\":2}}],[\"一旦你的代码中使用了\",{\"1\":{\"11\":1}}],[\"一问一答的方式\",{\"1\":{\"157\":1}}],[\"一样有着对应的实体\",{\"1\":{\"1104\":1}}],[\"一样使用\",{\"1\":{\"998\":1}}],[\"一样可以自己控制迭代\",{\"1\":{\"583\":1}}],[\"一样用返回值来处理错误\",{\"1\":{\"531\":1}}],[\"一样会造成上下文泄露\",{\"1\":{\"478\":1}}],[\"一样\",{\"1\":{\"157\":1,\"160\":1,\"164\":1,\"536\":1,\"543\":1}}],[\"一样的数据结构库\",{\"1\":{\"58\":1}}],[\"一元rpc\",{\"1\":{\"163\":2}}],[\"一元\",{\"1\":{\"157\":2,\"162\":2,\"165\":1,\"166\":1}}],[\"一份的端口是8081\",{\"1\":{\"145\":1}}],[\"一份的端口是8080\",{\"1\":{\"145\":1}}],[\"一般只有在调试和问题排查的时候才会使用\",{\"1\":{\"1128\":1}}],[\"一般方法都是通过调用\",{\"1\":{\"975\":1}}],[\"一般这种类型复制的库分成两类\",{\"1\":{\"810\":1}}],[\"一般这种是在接口或函数类型声明时才会用到\",{\"1\":{\"396\":1}}],[\"一般是\",{\"1\":{\"1032\":1}}],[\"一般是先查再计算然后更新\",{\"1\":{\"887\":1}}],[\"一般是结构体或者map\",{\"1\":{\"725\":1}}],[\"一般是一个压缩文件\",{\"1\":{\"200\":1}}],[\"一般情况使用前者即可\",{\"1\":{\"722\":1}}],[\"一般情况下请求定义与策略定义字段名都一致\",{\"1\":{\"761\":1}}],[\"一般情况下\",{\"1\":{\"510\":1,\"640\":1,\"984\":1}}],[\"一般情况下可以使用\",{\"1\":{\"379\":1}}],[\"一般都不会临时创建\",{\"1\":{\"600\":1}}],[\"一般都是在括号中使用\",{\"1\":{\"325\":1}}],[\"一般而言\",{\"1\":{\"583\":1,\"765\":1}}],[\"一般就分配到栈上和堆上这两个地方\",{\"1\":{\"549\":1}}],[\"一般不推荐通过\",{\"1\":{\"1003\":1}}],[\"一般不推荐使用\",{\"1\":{\"338\":1,\"343\":1}}],[\"一般不会这么直接用\",{\"1\":{\"585\":1}}],[\"一般不建议这么做\",{\"1\":{\"510\":1}}],[\"一般建议不要在\",{\"1\":{\"401\":1}}],[\"一般来说是上一次\",{\"1\":{\"1132\":1}}],[\"一般来说这里存储的对象都是一些小字符串\",{\"1\":{\"1124\":1}}],[\"一般来说size都最好不要超过math\",{\"1\":{\"1058\":1}}],[\"一般来说日志的配置都是写在配置文件里的\",{\"1\":{\"839\":1}}],[\"一般来说\",{\"1\":{\"381\":1,\"775\":1}}],[\"一般来说注册中心都是\",{\"1\":{\"175\":1}}],[\"一般在\",{\"1\":{\"326\":1}}],[\"一般在版本版本变更时才会出错\",{\"1\":{\"24\":1}}],[\"一般简称\",{\"1\":{\"232\":1}}],[\"一般此值为服务器的外网地址\",{\"1\":{\"141\":1}}],[\"一般此值为服务器的内网地址\",{\"1\":{\"141\":1}}],[\"一般会比较推荐使用官方的另一个增强包\",{\"1\":{\"603\":1}}],[\"一般会在函数的形参和返回值中出现\",{\"1\":{\"469\":1}}],[\"一般会有如下输出\",{\"1\":{\"141\":1}}],[\"一般会结合泛型来用\",{\"1\":{\"114\":1}}],[\"一般单节点是在开发期间测试用的\",{\"1\":{\"141\":1}}],[\"一个原子值\",{\"1\":{\"1172\":1}}],[\"一个更新条件并唤醒其他协程的协程\",{\"1\":{\"1165\":1}}],[\"一个写者协程已经持有了写锁\",{\"1\":{\"1156\":1}}],[\"一个写者协程已经持有了互斥锁\",{\"1\":{\"1156\":2}}],[\"一个互斥锁\",{\"1\":{\"1155\":1}}],[\"一个因为互斥锁而阻塞且刚刚唤醒的协程\",{\"1\":{\"1151\":1}}],[\"一个对象的内存应该被分配到栈上还是堆上由编译器来进行决定\",{\"1\":{\"1109\":1}}],[\"一个线程对应一个协程\",{\"1\":{\"1085\":1}}],[\"一个runtime\",{\"1\":{\"1079\":1}}],[\"一个普通的\",{\"1\":{\"1045\":1}}],[\"一个指向新哈希桶的上半区\",{\"1\":{\"1042\":1}}],[\"一个桶只有一个元素\",{\"1\":{\"1034\":1}}],[\"一个加\",{\"1\":{\"1021\":2}}],[\"一个底层数组可以被很多个切片所引用\",{\"1\":{\"1019\":1}}],[\"一个发生在\",{\"1\":{\"963\":1}}],[\"一个发消息\",{\"1\":{\"159\":1}}],[\"一个函数绑定一个\",{\"1\":{\"955\":1}}],[\"一个请求只能匹配到零个或一个路由\",{\"1\":{\"954\":1}}],[\"一个房子也可以住很多人\",{\"1\":{\"893\":1}}],[\"一个人可以拥有很多房子\",{\"1\":{\"893\":1}}],[\"一个人只能有一个爸爸和妈妈\",{\"1\":{\"860\":1}}],[\"一个学校有多个学校\",{\"1\":{\"892\":1}}],[\"一个实体模型可以自定义钩子\",{\"1\":{\"861\":1}}],[\"一个用\",{\"1\":{\"845\":1}}],[\"一个良好的配置系统应当支持默认值设置\",{\"1\":{\"790\":1}}],[\"一个载荷示例如下\",{\"1\":{\"773\":1}}],[\"一个正常的model配置文件内容如下\",{\"1\":{\"759\":1}}],[\"一个模板中可以定义有多个模板\",{\"1\":{\"733\":1}}],[\"一个模拟的消息队列\",{\"1\":{\"158\":1}}],[\"一个国外老哥关于迭代器的评价\",{\"1\":{\"589\":1}}],[\"一个国外的微服务框架\",{\"1\":{\"53\":1}}],[\"一个建筑公司想一种特殊规格的起重机\",{\"1\":{\"567\":1}}],[\"一个轮次完成后已经流逝的时间\",{\"1\":{\"527\":1}}],[\"一个完整的go\",{\"1\":{\"515\":1}}],[\"一个go\",{\"1\":{\"509\":1}}],[\"一个全球代理\",{\"1\":{\"501\":1}}],[\"一个好的依赖管理工具可以为开发者省去不少时间并且可以提升开发效率\",{\"1\":{\"492\":1}}],[\"一个有缓冲管道用于协程间通信\",{\"1\":{\"467\":1}}],[\"一个布尔类型的值\",{\"1\":{\"465\":1}}],[\"一个关闭管道的例子如下\",{\"1\":{\"464\":1}}],[\"一个只写\",{\"1\":{\"419\":1}}],[\"一个只读\",{\"1\":{\"419\":1}}],[\"一个空的结构体不会占用内存\",{\"1\":{\"388\":1}}],[\"一个中文字符会占用\",{\"1\":{\"380\":1}}],[\"一个英文字符只占一个字节\",{\"1\":{\"377\":1}}],[\"一个汉字在大多数情况下占\",{\"1\":{\"377\":1}}],[\"一个根据成绩打分的例子如下\",{\"1\":{\"349\":1}}],[\"一个变量如果只是声明而不赋值\",{\"1\":{\"328\":1}}],[\"一个没有参数\",{\"1\":{\"320\":1}}],[\"一个整型指针\",{\"1\":{\"320\":1}}],[\"一个包内名为internal\",{\"1\":{\"296\":1}}],[\"一个例子如下\",{\"1\":{\"205\":1,\"1012\":1}}],[\"一个message中的字段应当遵循以下规则\",{\"1\":{\"187\":1}}],[\"一个服务中包含一个或多个\",{\"1\":{\"181\":1}}],[\"一个服务名可能会匹配多个真实地址\",{\"1\":{\"175\":1}}],[\"一个流式拦截器streamclientinterceptor\",{\"1\":{\"166\":1}}],[\"一个一元拦截器unaryclientinterceptor\",{\"1\":{\"166\":1}}],[\"一个收消息\",{\"1\":{\"159\":1}}],[\"一个收集了常用的正则表达式的库\",{\"1\":{\"80\":1}}],[\"一个负责发送消息\",{\"1\":{\"159\":1}}],[\"一个协程可以享受该线程的所有时间片\",{\"1\":{\"1085\":1}}],[\"一个协程正在写入hmap\",{\"1\":{\"1030\":1}}],[\"一个协程负责接收消息\",{\"1\":{\"159\":1}}],[\"一个协程用来发送消息\",{\"1\":{\"158\":1}}],[\"一个\",{\"1\":{\"143\":1,\"196\":1}}],[\"一个局域网内的\",{\"1\":{\"142\":1}}],[\"一个数被\",{\"1\":{\"136\":1}}],[\"一个计算文件哈希签名的库\",{\"1\":{\"81\":1}}],[\"一个绘图库\",{\"1\":{\"76\":1}}],[\"一个游戏服务端框架\",{\"1\":{\"72\":1}}],[\"一个由\",{\"1\":{\"72\":1}}],[\"一个超级简单的\",{\"1\":{\"72\":1}}],[\"一个压缩解压缩库\",{\"1\":{\"65\":1}}],[\"一个强大的\",{\"1\":{\"62\":1}}],[\"一个简单的计时器中间件就已经编写完毕了\",{\"1\":{\"996\":1}}],[\"一个简单的链式调用\",{\"1\":{\"587\":1}}],[\"一个简单的文件夹复制的代码示例如下\",{\"1\":{\"426\":1}}],[\"一个简单的例子如下\",{\"1\":{\"350\":1}}],[\"一个简单的图像处理库\",{\"1\":{\"76\":1}}],[\"一个简单的微型\",{\"1\":{\"51\":1}}],[\"一个简化字节和位操作的库\",{\"1\":{\"59\":1}}],[\"一个微服务开发的工具库\",{\"1\":{\"53\":1}}],[\"一个私有类型\",{\"1\":{\"44\":1}}],[\"一个是指向起始地址的真\",{\"1\":{\"1027\":1}}],[\"一个是copier\",{\"1\":{\"812\":1}}],[\"一个是类型转换过后的值\",{\"1\":{\"596\":1}}],[\"一个是切片\",{\"1\":{\"398\":1}}],[\"一个是取地址符\",{\"1\":{\"391\":1}}],[\"一个是用于定义编译行为的构建标志build\",{\"1\":{\"8\":1}}],[\"一个是\",{\"1\":{\"8\":1}}],[\"一些公司可能会倾向于使用put\",{\"1\":{\"984\":1}}],[\"一些自定义的编码器\",{\"1\":{\"839\":1}}],[\"一些并不强制使用但是仍然推荐使用\",{\"1\":{\"773\":1}}],[\"一些预定义的声明\",{\"1\":{\"773\":1}}],[\"一些详细的配置请自行了解\",{\"1\":{\"644\":1}}],[\"一些详细的配置这里不会做过多的赘述\",{\"1\":{\"642\":1}}],[\"一些内容可能已经过时了\",{\"1\":{\"288\":1}}],[\"一些服务可能会因故障下线而无法访问\",{\"1\":{\"174\":1}}],[\"一些细节信息\",{\"1\":{\"168\":1}}],[\"一些命令也无法正常工作\",{\"1\":{\"143\":1}}],[\"一些参数释义\",{\"1\":{\"143\":1}}],[\"一些比较重要的变化如下\",{\"1\":{\"134\":1}}],[\"一些重要的变化如下\",{\"1\":{\"121\":1,\"122\":1,\"125\":1,\"126\":1,\"127\":1}}],[\"一些使用示例如下\",{\"1\":{\"34\":1}}],[\"一些编辑器\",{\"1\":{\"26\":1}}],[\"一行一个\",{\"1\":{\"20\":1}}],[\"反汇编查看\",{\"1\":{\"560\":1}}],[\"反过来也是如此\",{\"1\":{\"754\":1}}],[\"反过来也是一样\",{\"1\":{\"11\":1}}],[\"反过来编译器轻松了\",{\"1\":{\"579\":1}}],[\"反过来signedint就是它们的超集\",{\"1\":{\"574\":1}}],[\"反过来\",{\"1\":{\"539\":1}}],[\"反过来则不可以\",{\"1\":{\"469\":1}}],[\"反而没有利用好协程的轻量这一优势\",{\"1\":{\"1085\":1}}],[\"反而还可以存在多个\",{\"1\":{\"384\":1}}],[\"反而在源代码中会有比较详细的说明\",{\"1\":{\"4\":1}}],[\"反引号字符串不允许转义\",{\"1\":{\"306\":1}}],[\"反斜杠转义\",{\"1\":{\"305\":1}}],[\"反序列化\",{\"0\":{\"620\":1,\"623\":1,\"628\":1,\"797\":1},\"1\":{\"224\":1,\"618\":1,\"621\":1,\"629\":1,\"845\":2}}],[\"反射编码器\",{\"1\":{\"839\":1}}],[\"反射操作包\",{\"1\":{\"616\":1}}],[\"反射创建函数\",{\"1\":{\"459\":1}}],[\"反射创建管道\",{\"1\":{\"458\":1}}],[\"反射创建\",{\"1\":{\"457\":1}}],[\"反射创建切片\",{\"1\":{\"456\":1}}],[\"反射的核心\",{\"1\":{\"430\":1}}],[\"反射可以将反射对象还原成interface\",{\"1\":{\"430\":1}}],[\"反射可以将interface\",{\"1\":{\"430\":1}}],[\"反射与interface\",{\"1\":{\"427\":1}}],[\"反射是一种在运行时检查语言自身结构的机制\",{\"1\":{\"427\":1}}],[\"反射\",{\"0\":{\"202\":1,\"427\":1}}],[\"没啥区别了\",{\"1\":{\"1042\":1}}],[\"没找到就退出循环\",{\"1\":{\"1039\":1}}],[\"没找到就去溢出桶里面找\",{\"1\":{\"1037\":1}}],[\"没找到\",{\"1\":{\"1036\":1}}],[\"没问题的话就分配内存\",{\"1\":{\"1020\":1}}],[\"没错就是这样\",{\"1\":{\"823\":1}}],[\"没法判断其是否被引用\",{\"1\":{\"533\":1}}],[\"没法进行调试\",{\"1\":{\"10\":1}}],[\"没时间\",{\"1\":{\"159\":4}}],[\"没有什么要讲的\",{\"1\":{\"1177\":1}}],[\"没有执行过\",{\"1\":{\"1173\":1}}],[\"没有正在执行标记任务\",{\"1\":{\"1138\":1}}],[\"没有正在分配内存\",{\"1\":{\"1106\":1}}],[\"没有其它空闲的\",{\"1\":{\"1106\":1}}],[\"没有禁用抢占\",{\"1\":{\"1106\":1}}],[\"没有被锁住\",{\"1\":{\"1106\":1}}],[\"没有手动调用os\",{\"1\":{\"1076\":1}}],[\"没有找到可用的管道\",{\"1\":{\"1067\":2}}],[\"没有找到一个合适的位置分配给key\",{\"1\":{\"1038\":1}}],[\"没有接收方协程等待\",{\"1\":{\"1067\":1}}],[\"没有发送方正在等待\",{\"1\":{\"1067\":1}}],[\"没有的话返回\",{\"1\":{\"1067\":1}}],[\"没有协程等待\",{\"1\":{\"1059\":1}}],[\"没有指定类型\",{\"1\":{\"1053\":1}}],[\"没有指数\",{\"1\":{\"698\":1}}],[\"没有字符串直接返回空串\",{\"1\":{\"1053\":1}}],[\"没有在\",{\"1\":{\"1038\":1}}],[\"没有了\",{\"1\":{\"1036\":1}}],[\"没有之一\",{\"1\":{\"1018\":1}}],[\"没有反射\",{\"1\":{\"963\":1}}],[\"没有堆栈情况\",{\"1\":{\"840\":1}}],[\"没有调用者的情况\",{\"1\":{\"840\":1}}],[\"没有时间\",{\"1\":{\"840\":1}}],[\"没有任何的关联\",{\"1\":{\"812\":1}}],[\"没有任何附加含义\",{\"1\":{\"97\":1}}],[\"没有设置特定的文件后缀名\",{\"1\":{\"791\":1}}],[\"没有资源的\",{\"1\":{\"758\":1}}],[\"没有用户的\",{\"1\":{\"758\":1}}],[\"没有特殊需求一般都用这个\",{\"1\":{\"698\":1}}],[\"没有就采用默认的策略\",{\"1\":{\"640\":1}}],[\"没有实现说明是一个基础的error\",{\"1\":{\"603\":1}}],[\"没有拓展性\",{\"1\":{\"580\":1}}],[\"没有可读性\",{\"1\":{\"556\":1}}],[\"没有提供伪函数来对切片进行拷贝\",{\"1\":{\"539\":1}}],[\"没有增加任何新功能\",{\"1\":{\"505\":1}}],[\"没有具体实现\",{\"1\":{\"488\":1}}],[\"没有第三种情况可言\",{\"1\":{\"487\":1}}],[\"没有deadline\",{\"1\":{\"475\":1}}],[\"没有遗漏\",{\"1\":{\"462\":1}}],[\"没有闭包了\",{\"1\":{\"402\":1}}],[\"没有返回值的函数类型\",{\"1\":{\"320\":1}}],[\"没有太大区别\",{\"1\":{\"210\":1}}],[\"没有通过认证\",{\"1\":{\"168\":1}}],[\"没有加密验证\",{\"1\":{\"145\":1,\"154\":1,\"174\":1,\"175\":1}}],[\"没有选举出来之前\",{\"1\":{\"143\":1}}],[\"没有\",{\"1\":{\"143\":1,\"159\":4,\"230\":1}}],[\"没有函数调用的循环将不会再永久阻塞调度\",{\"1\":{\"123\":1}}],[\"没有枚举类型\",{\"1\":{\"88\":1}}],[\"没有推出之前的一个\",{\"1\":{\"28\":1}}],[\"没用到构建标志\",{\"1\":{\"8\":1}}],[\"另外entry类型结构如下\",{\"1\":{\"1045\":1}}],[\"另外\",{\"1\":{\"617\":1}}],[\"另外要注意的一个点就是\",{\"1\":{\"530\":1}}],[\"另外需要注意的是\",{\"1\":{\"181\":1}}],[\"另外一种情况是\",{\"1\":{\"1145\":1}}],[\"另外一大特点就是交叉编译\",{\"1\":{\"11\":1}}],[\"另外一些比较实用的参数有\",{\"1\":{\"10\":1}}],[\"另一部分是开放给用户使用的堆内存\",{\"1\":{\"1129\":1}}],[\"另一部分\",{\"1\":{\"1104\":1}}],[\"另一部分的数据会在下半区\",{\"1\":{\"1042\":1}}],[\"另一部分空函数体的函数则是由汇编实现\",{\"1\":{\"44\":1}}],[\"另一派人喜欢为了开发效率而生的\",{\"1\":{\"848\":1}}],[\"另一类是基于代码生成\",{\"1\":{\"810\":1}}],[\"另一种就是链式分配\",{\"1\":{\"1110\":1}}],[\"另一种就是通过var关键字来声明\",{\"1\":{\"395\":1}}],[\"另一种是使用make函数\",{\"1\":{\"1034\":1}}],[\"另一种是通过名称\",{\"1\":{\"448\":1}}],[\"另一种方法\",{\"1\":{\"1085\":1}}],[\"另一种方法就是使用io\",{\"1\":{\"419\":1}}],[\"另一种方法是使用os\",{\"1\":{\"419\":1}}],[\"另一种模式是列表模式\",{\"1\":{\"38\":1}}],[\"另一个优点就是天生并发安全\",{\"1\":{\"1052\":1}}],[\"另一个指向新哈希桶的下半区\",{\"1\":{\"1042\":1}}],[\"另一个要注意的点就是\",{\"1\":{\"1039\":1}}],[\"另一个就是偏移量\",{\"1\":{\"1027\":1}}],[\"另一个就是比较函数\",{\"1\":{\"398\":1}}],[\"另一个则是translationfunc\",{\"1\":{\"952\":1}}],[\"另一个需要注意的点是当指针指向的元素地址移动时\",{\"1\":{\"751\":1}}],[\"另一个是代码刚刚运行到这块尝试持有锁的协程\",{\"1\":{\"1151\":1}}],[\"另一个是copier\",{\"1\":{\"812\":1}}],[\"另一个是转换结果的布尔值\",{\"1\":{\"596\":1}}],[\"另一个是解引用符\",{\"1\":{\"391\":1}}],[\"另一个注意点是\",{\"1\":{\"533\":1}}],[\"另一个类则是有方法集的接口\",{\"1\":{\"428\":1}}],[\"另一个协程用来接收消息\",{\"1\":{\"158\":1}}],[\"另一个可以阅读命令文档的方式就是去阅读源代码\",{\"1\":{\"4\":1}}],[\"提出\",{\"1\":{\"1143\":1}}],[\"提出的\",{\"1\":{\"1142\":1}}],[\"提取子结构\",{\"0\":{\"795\":1}}],[\"提醒你不能使用这个保留使用的字段\",{\"1\":{\"188\":1}}],[\"提升到了\",{\"1\":{\"135\":1}}],[\"提升了垃圾回收器指针判断的精度\",{\"1\":{\"134\":1}}],[\"提升了栈扩容的性能\",{\"1\":{\"134\":1}}],[\"提升了整体\",{\"1\":{\"117\":1}}],[\"提高了开发人员的下限\",{\"1\":{\"461\":1}}],[\"提高了稳定性\",{\"1\":{\"117\":1}}],[\"提高和改进了类型推理的能力和精度\",{\"1\":{\"116\":1}}],[\"提供静态的\",{\"1\":{\"1016\":1}}],[\"提供值\",{\"1\":{\"827\":1}}],[\"提供可手动分配和释放内存的功能\",{\"1\":{\"616\":1}}],[\"提供没有类型限制的指针操作\",{\"1\":{\"616\":1}}],[\"提供一系列网络操作的包\",{\"1\":{\"616\":1}}],[\"提供一些本次\",{\"1\":{\"160\":1}}],[\"提供同一个服务\",{\"1\":{\"145\":1}}],[\"提供的值\",{\"1\":{\"823\":1}}],[\"提供的全局实例足够使用\",{\"1\":{\"799\":1}}],[\"提供的是一系列具体的函数\",{\"1\":{\"616\":1}}],[\"提供的\",{\"1\":{\"533\":1}}],[\"提供的互斥锁实现\",{\"1\":{\"480\":1}}],[\"提供的一种并发控制的解决方案\",{\"1\":{\"473\":1}}],[\"提供的内置min\",{\"1\":{\"332\":1}}],[\"提供的服务发现与注册功能\",{\"1\":{\"143\":1}}],[\"提供的功能性指令可以随意使用\",{\"1\":{\"39\":1}}],[\"提供标准的结构化日志库\",{\"1\":{\"116\":1}}],[\"提供了runtime\",{\"1\":{\"1106\":1}}],[\"提供了三个方法来加载静态资源\",{\"1\":{\"999\":1}}],[\"提供了表关联的交互能力\",{\"1\":{\"890\":1}}],[\"提供了相当多的方法可用\",{\"1\":{\"869\":1}}],[\"提供了两个函数可以将配置反序列化到一个结构体或者\",{\"1\":{\"797\":1}}],[\"提供了四个函数来解析网络地址\",{\"1\":{\"674\":1}}],[\"提供了非常完善的\",{\"1\":{\"637\":1}}],[\"提供了非常多的并发控制手段\",{\"1\":{\"462\":1}}],[\"提供了对导入器的访问\",{\"1\":{\"616\":1}}],[\"提供了对于\",{\"1\":{\"117\":1}}],[\"提供了许多可用的方法\",{\"1\":{\"521\":1}}],[\"提供了基础的服务发现功能\",{\"1\":{\"174\":1}}],[\"提供了status\",{\"1\":{\"167\":1}}],[\"提供了metadata\",{\"1\":{\"160\":1}}],[\"提供了一种方便的方法来收集\",{\"1\":{\"963\":1}}],[\"提供了一种更清晰\",{\"1\":{\"117\":1}}],[\"提供了一个预设的model结构体\",{\"1\":{\"857\":1}}],[\"提供了一系列函数来方便开发者将运行时存储的配置写入配置文件中\",{\"1\":{\"792\":1}}],[\"提供了一系列泛型函数用于操作\",{\"1\":{\"116\":1}}],[\"提供了一系列泛型函数用于操作切片\",{\"1\":{\"116\":1}}],[\"提供了一些伪函数用于在\",{\"1\":{\"536\":1}}],[\"提供了可以修改结构体属性的能力\",{\"1\":{\"114\":1}}],[\"提供了\",{\"1\":{\"104\":1,\"145\":1}}],[\"提交完毕后为最新提交创建一个\",{\"1\":{\"499\":1}}],[\"提交一个事务\",{\"1\":{\"238\":1}}],[\"提交\",{\"1\":{\"95\":1,\"513\":1}}],[\"提交的\",{\"1\":{\"10\":1}}],[\"提过\",{\"1\":{\"88\":1}}],[\"提示你这个变量声明了但没有使用\",{\"1\":{\"329\":1}}],[\"提示你无法访问或者出现下面这种信息\",{\"1\":{\"112\":1}}],[\"提示\",{\"1\":{\"7\":1,\"49\":1,\"50\":1,\"87\":2,\"88\":1,\"94\":1,\"97\":1,\"112\":1,\"113\":1,\"141\":1,\"142\":1,\"143\":1,\"144\":1,\"145\":1,\"147\":1,\"159\":1,\"160\":2,\"162\":1,\"165\":1,\"166\":1,\"170\":1,\"193\":2,\"204\":1,\"205\":1,\"222\":1,\"291\":1,\"299\":1,\"315\":1,\"346\":1,\"359\":1,\"364\":1,\"371\":1,\"380\":1,\"381\":1,\"382\":1,\"388\":1,\"392\":1,\"404\":1,\"410\":1,\"414\":1,\"429\":1,\"434\":1,\"441\":1,\"462\":1,\"467\":1,\"469\":1,\"470\":1,\"471\":1,\"472\":1,\"478\":1,\"481\":1,\"482\":1,\"485\":1,\"488\":1,\"490\":1,\"504\":1,\"509\":1,\"510\":1,\"516\":1,\"517\":1,\"518\":2,\"522\":1,\"527\":2,\"529\":1,\"549\":1,\"560\":1,\"563\":1,\"568\":1,\"572\":1,\"579\":1,\"584\":1,\"594\":1,\"595\":1,\"597\":1,\"598\":1,\"604\":1,\"617\":1,\"672\":1,\"683\":1,\"702\":1,\"719\":1,\"745\":1,\"751\":1,\"757\":1,\"763\":1,\"771\":1,\"781\":1,\"786\":1,\"789\":1,\"798\":1,\"823\":1,\"838\":1,\"840\":1,\"864\":1,\"869\":1,\"891\":1,\"905\":1,\"925\":1,\"938\":1,\"945\":1,\"949\":1,\"950\":1,\"953\":1,\"959\":1,\"966\":1,\"975\":1,\"977\":1,\"980\":1,\"984\":1,\"986\":1,\"995\":1,\"999\":1,\"1009\":1,\"1010\":1,\"1016\":1,\"1018\":1,\"1029\":1,\"1032\":1,\"1037\":2,\"1052\":1,\"1061\":1,\"1071\":1,\"1101\":1,\"1130\":1,\"1132\":1,\"1141\":1}}],[\"执行目标函数\",{\"1\":{\"1173\":1}}],[\"执行期间可以被抢占\",{\"1\":{\"1138\":2}}],[\"执行标记工作的是runtime\",{\"1\":{\"1137\":1}}],[\"执行用户代码的时长可能不同\",{\"1\":{\"1105\":1}}],[\"执行现场恢复后\",{\"1\":{\"1092\":1}}],[\"执行回调函数m\",{\"1\":{\"1089\":1}}],[\"执行delete操作\",{\"1\":{\"1048\":1}}],[\"执行到这里说明当前元素后面没有元素了\",{\"1\":{\"1039\":1}}],[\"执行到这里说明修改过程已经完成了\",{\"1\":{\"1038\":1}}],[\"执行到这里说明key没有存在于map中\",{\"1\":{\"1038\":1}}],[\"执行到这里说明没找到key\",{\"1\":{\"1038\":1}}],[\"执行handlerfunc\",{\"1\":{\"995\":1}}],[\"执行顺序依旧一致\",{\"1\":{\"606\":1}}],[\"执行后续调用链\",{\"1\":{\"996\":1}}],[\"执行后会开启一个\",{\"1\":{\"561\":1}}],[\"执行后结果如下\",{\"1\":{\"523\":1}}],[\"执行耗时等等性能指标\",{\"1\":{\"525\":1}}],[\"执行上述测试输出如下\",{\"1\":{\"521\":1}}],[\"执行\",{\"0\":{\"1075\":1},\"1\":{\"520\":1,\"1173\":1}}],[\"执行情况\",{\"1\":{\"518\":1}}],[\"执行这些测试有多种方法\",{\"1\":{\"518\":1}}],[\"执行测试命令\",{\"1\":{\"525\":1}}],[\"执行测试后输出信息如下\",{\"1\":{\"522\":1}}],[\"执行测试后输出如下\",{\"1\":{\"521\":1,\"523\":1}}],[\"执行测试主要会用到go\",{\"1\":{\"518\":1}}],[\"执行测试\",{\"0\":{\"518\":1}}],[\"执行时间超过了\",{\"1\":{\"1107\":1}}],[\"执行时机长的\",{\"1\":{\"1105\":1}}],[\"执行时\",{\"1\":{\"490\":1}}],[\"执行减法\",{\"1\":{\"467\":1}}],[\"执行加法\",{\"1\":{\"467\":1}}],[\"执行过程中发生的错误\",{\"1\":{\"866\":1}}],[\"执行过程的耗时等等\",{\"1\":{\"462\":1}}],[\"执行过后服务端输出如下\",{\"1\":{\"158\":1}}],[\"执行的稍微快一些\",{\"1\":{\"484\":1}}],[\"执行的时机\",{\"1\":{\"462\":1}}],[\"执行的命令分别如下\",{\"1\":{\"143\":1}}],[\"执行完后回收当前的defer结构\",{\"1\":{\"1079\":1}}],[\"执行完后所有资源都被回收\",{\"1\":{\"47\":1}}],[\"执行完毕后解锁\",{\"1\":{\"1172\":1}}],[\"执行完毕后就会解锁\",{\"1\":{\"490\":1}}],[\"执行完毕后修改done\",{\"1\":{\"484\":1}}],[\"执行完毕后文件内容如下\",{\"1\":{\"418\":1}}],[\"执行完毕\",{\"1\":{\"472\":1,\"995\":1}}],[\"执行完对应分支后主协程就直接退出了\",{\"1\":{\"471\":1}}],[\"执行完该分支后\",{\"1\":{\"350\":1}}],[\"执行条件不足\",{\"1\":{\"168\":1}}],[\"执行如下命令进行编译\",{\"1\":{\"530\":1}}],[\"执行如下命令\",{\"1\":{\"527\":1}}],[\"执行如下命令来修改\",{\"1\":{\"501\":1}}],[\"执行如下命令创建一个\",{\"1\":{\"156\":1}}],[\"执行如下命令查看版本\",{\"1\":{\"140\":1}}],[\"执行节点名称\",{\"1\":{\"141\":1}}],[\"执行下面的命令使用\",{\"1\":{\"140\":1}}],[\"执行命令查看广域网\",{\"1\":{\"144\":1}}],[\"执行命令\",{\"1\":{\"10\":1,\"40\":2}}],[\"执行go\",{\"1\":{\"7\":1,\"20\":1}}],[\"而高29位用于表示有多少个协程正在等待锁\",{\"1\":{\"1151\":1}}],[\"而用户堆需要运行\",{\"1\":{\"1129\":1}}],[\"而mcentral\",{\"1\":{\"1125\":1}}],[\"而存在\",{\"1\":{\"1118\":1}}],[\"而每一个内存块由若干个固定大小的内存片组成\",{\"1\":{\"1112\":1}}],[\"而另一边的\",{\"1\":{\"1104\":1}}],[\"而停止\",{\"1\":{\"1088\":1}}],[\"而并非操作系统\",{\"1\":{\"1085\":1}}],[\"而真正负责处理恢复逻辑的代码实际上在gopanic函数里\",{\"1\":{\"1080\":1}}],[\"而决定是否在栈上分配的因素就是循环层数\",{\"1\":{\"1074\":1}}],[\"而编译后实际上的代码是这样的\",{\"1\":{\"1074\":1}}],[\"而它实际的值是nil\",{\"1\":{\"1070\":1}}],[\"而它要做的只有返回选中的管道下标casi以及代表着是否读取成功的recvok\",{\"1\":{\"1067\":1}}],[\"而block函数又调用了runtime\",{\"1\":{\"1066\":1}}],[\"而b是新声明的\",{\"1\":{\"329\":1}}],[\"而实际的搬迁工作并不由hashgrow函数来完成\",{\"1\":{\"1042\":1}}],[\"而增删改操作都需要先进行查找操作\",{\"1\":{\"1042\":1}}],[\"而遍历的时间复杂度是\",{\"1\":{\"1042\":1}}],[\"而判断溢出桶的数量是否过多的函数是runtime\",{\"1\":{\"1041\":1}}],[\"而下面的代码描述的就是如何在桶内进行遍历\",{\"1\":{\"1037\":1}}],[\"而找到了哈希桶后\",{\"1\":{\"1036\":1}}],[\"而容量大于等于\",{\"1\":{\"1025\":1}}],[\"而append操作在添加元素后会返回一个更新了长度的切片结构体\",{\"1\":{\"1019\":1}}],[\"而automigrate方法则不需要\",{\"1\":{\"864\":1}}],[\"而单独使用validator的的校验\",{\"1\":{\"977\":1}}],[\"而我们在进行项目开发时\",{\"1\":{\"952\":1}}],[\"而此函数的参数是结构体\",{\"1\":{\"951\":1}}],[\"而设计的\",{\"1\":{\"913\":1}}],[\"而person则必须要有包含引用school的外键\",{\"1\":{\"892\":1}}],[\"而提到\",{\"1\":{\"848\":1}}],[\"而后者仅仅作为一个值\",{\"1\":{\"751\":1}}],[\"而客户端则较少\",{\"1\":{\"615\":1}}],[\"而对一个错误链使用类型断言是无效的\",{\"1\":{\"603\":1}}],[\"而对于每一个版本而言\",{\"1\":{\"510\":1}}],[\"而对于没有方法集接口来说\",{\"1\":{\"428\":1}}],[\"而对于io\",{\"1\":{\"417\":1}}],[\"而对于其他的方式\",{\"1\":{\"174\":1}}],[\"而链式错误正是为了解决这种情况而出现的\",{\"1\":{\"602\":1}}],[\"而链式拦截器重复调用则会\",{\"1\":{\"165\":1}}],[\"而类型断言就可以判断其底层类型是否为想要的类型\",{\"1\":{\"596\":1}}],[\"而double又并入了floats\",{\"1\":{\"575\":1}}],[\"而阻塞的协程信息\",{\"1\":{\"561\":1}}],[\"而程序是否高效\",{\"1\":{\"548\":1}}],[\"而非堆栈\",{\"1\":{\"1054\":1}}],[\"而非字符串中字符的数量\",{\"1\":{\"1052\":1}}],[\"而非实际的\",{\"1\":{\"1037\":1}}],[\"而非将其封装为标准库\",{\"1\":{\"1029\":1}}],[\"而非外部的db\",{\"1\":{\"901\":1}}],[\"而非原生的\",{\"1\":{\"533\":1}}],[\"而非引用\",{\"1\":{\"359\":1}}],[\"而模糊测试可以通过语料库来生成随机的测试数据\",{\"1\":{\"527\":1}}],[\"而使用strings\",{\"1\":{\"525\":1}}],[\"而测试用例的函数必须为benchmarkxxxx格式\",{\"1\":{\"525\":1}}],[\"而testequal则没有\",{\"1\":{\"521\":1}}],[\"而造成的心智负担\",{\"1\":{\"516\":1}}],[\"而工作区的存在就是为了能够在不修改go\",{\"1\":{\"513\":1}}],[\"而版本则是要遵循语义化版本号\",{\"1\":{\"505\":1}}],[\"而版本号来自于$goroot\",{\"1\":{\"7\":1}}],[\"而前面了解到的互斥量就是悲观锁\",{\"1\":{\"490\":1}}],[\"而写协程在更新数据后都会尝试唤醒所有因条件变量而阻塞的协程\",{\"1\":{\"482\":1}}],[\"而创建条件变量的函数签名如下\",{\"1\":{\"482\":1}}],[\"而主协程还在阻塞等待其他协程来向管道中写入数据\",{\"1\":{\"470\":1}}],[\"而在标记工作完成后\",{\"1\":{\"1146\":1}}],[\"而在以下两种种情况会将g\",{\"1\":{\"1106\":1}}],[\"而在远古时期的\",{\"1\":{\"1103\":1}}],[\"而在需要并发的系统中\",{\"1\":{\"1056\":1}}],[\"而在\",{\"1\":{\"701\":1}}],[\"而在iter库定义的拉取式迭代器采用闭包来记录状态\",{\"1\":{\"583\":1}}],[\"而在此期间\",{\"1\":{\"472\":1}}],[\"而在此之前\",{\"1\":{\"462\":1}}],[\"而在使用make进行初始化时\",{\"1\":{\"364\":1}}],[\"而动态表示是接口底层存储的具体实现的类型是可以变化的\",{\"1\":{\"428\":1}}],[\"而eface对应的是emptyinterface\",{\"1\":{\"428\":1}}],[\"而修改一个形参的值\",{\"1\":{\"413\":1}}],[\"而函数没有\",{\"1\":{\"412\":1}}],[\"而匿名组合可以不用显式的指定字段\",{\"1\":{\"407\":1}}],[\"而字节切片或字节数组也可以转换为字符串\",{\"1\":{\"376\":1}}],[\"而多出来的max则指的是最大容量\",{\"1\":{\"371\":1}}],[\"而切片的长度是不固定的\",{\"1\":{\"370\":1}}],[\"而切片是不定长的\",{\"1\":{\"358\":1}}],[\"而数组不会\",{\"1\":{\"364\":1}}],[\"而桶中水的高度就是代表着长度\",{\"1\":{\"364\":1}}],[\"而+符号附近的间隔则较大\",{\"1\":{\"311\":1}}],[\"而常量mysalary就是私有的\",{\"1\":{\"294\":1}}],[\"而常见的解决方案是使用\",{\"1\":{\"172\":1}}],[\"而不论是对管道发送或接收数据\",{\"1\":{\"1066\":1}}],[\"而不会造成任何性能损失\",{\"1\":{\"975\":1}}],[\"而不建议大转小\",{\"1\":{\"595\":1}}],[\"而不提供具体的实现\",{\"1\":{\"562\":1}}],[\"而不要在接收方关闭管道\",{\"1\":{\"470\":1}}],[\"而不需要源代码\",{\"1\":{\"544\":1}}],[\"而不需要去找它到底是哪一个重载\",{\"1\":{\"395\":1}}],[\"而不需要它们的\",{\"1\":{\"194\":1}}],[\"而不同的线程间的切换是有一定成本的\",{\"1\":{\"1085\":1}}],[\"而不同的const分组则相互不会影响\",{\"1\":{\"325\":1}}],[\"而不同类型不可比较\",{\"1\":{\"332\":1}}],[\"而不是具体的锁类型\",{\"1\":{\"1166\":1}}],[\"而不是直接抛出空指针错误\",{\"1\":{\"1071\":1}}],[\"而不是直接解析参数\",{\"1\":{\"971\":1}}],[\"而不是直接尝试修改元素的值\",{\"1\":{\"442\":1}}],[\"而不是单个资源\",{\"1\":{\"758\":1}}],[\"而不是像动态语言一样去尝试推断可能的结果\",{\"1\":{\"591\":1}}],[\"而不是为了泛型而泛型\",{\"1\":{\"571\":1}}],[\"而不是字符\",{\"1\":{\"527\":1}}],[\"而不是进行依赖管理\",{\"1\":{\"513\":1}}],[\"而不是管道是否已经关闭\",{\"1\":{\"470\":1}}],[\"而不是dog结构体\",{\"1\":{\"414\":1}}],[\"而不是\",{\"1\":{\"293\":1,\"402\":1,\"784\":1}}],[\"而不再像一元接口那样简单的一问一答\",{\"1\":{\"196\":1}}],[\"而该目录下的所有导入行为也是基于它的相对路径\",{\"1\":{\"193\":1}}],[\"而这种情况往往出现在接口身上\",{\"1\":{\"1070\":1}}],[\"而这里的b是查找过后的b\",{\"1\":{\"1039\":1}}],[\"而这个桶就叫溢出桶\",{\"1\":{\"1032\":1}}],[\"而这需要耗费大量的工作\",{\"1\":{\"758\":1}}],[\"而这就是模板引擎所需要解决的问题\",{\"1\":{\"722\":1}}],[\"而这就是sync\",{\"1\":{\"484\":1}}],[\"而这只是众多可能结果中的一种\",{\"1\":{\"479\":1}}],[\"而这两个结构体在reflect包下都有与其对应的结构体类型\",{\"1\":{\"428\":1}}],[\"而这些动态的问题就是服务发现与注册要解决的\",{\"1\":{\"174\":1}}],[\"而这也正是noinline指令发挥的功能\",{\"1\":{\"45\":1}}],[\"而是runtime内部实现的一个锁\",{\"1\":{\"1166\":1}}],[\"而是基于内存\",{\"1\":{\"1033\":1}}],[\"而是选择了将其与插入写屏障混合使用\",{\"1\":{\"1143\":1}}],[\"而是选择了直接把底层数组的内存整块复制过去\",{\"1\":{\"1026\":1}}],[\"而是选择直接复制内存\",{\"1\":{\"1024\":1}}],[\"而是结构体的字段名\",{\"1\":{\"946\":1}}],[\"而是将其作为interface进行==检查是否相等\",{\"1\":{\"762\":1}}],[\"而是以\",{\"1\":{\"739\":1}}],[\"而是通过循环调用less\",{\"1\":{\"689\":1}}],[\"而是应该使用errors\",{\"1\":{\"603\":1}}],[\"而是应该使用它们的指针\",{\"1\":{\"491\":1}}],[\"而是为了表示泛型零值\",{\"1\":{\"577\":1}}],[\"而是一串不知所云的字符串\",{\"1\":{\"509\":1}}],[\"而是一个比较耗时的任务\",{\"1\":{\"547\":1}}],[\"而是一个非常巨大复杂的任务\",{\"1\":{\"462\":1}}],[\"而是一个较为复杂的数据处理流程\",{\"1\":{\"401\":1}}],[\"而是一个类型的空值或者说默认值更为准确\",{\"1\":{\"321\":1}}],[\"而是逃逸到了堆上\",{\"1\":{\"399\":1}}],[\"而是字节数组的长度\",{\"1\":{\"377\":1}}],[\"而是复用了^符号\",{\"1\":{\"299\":1}}],[\"而是会存放在静态资源文件夹中\",{\"1\":{\"980\":1}}],[\"而是会将原对象和新对象存入一个缓存池中\",{\"1\":{\"1145\":1}}],[\"而是会将常用的\",{\"1\":{\"600\":1}}],[\"而是会将其转义为\",{\"1\":{\"509\":1}}],[\"而是会将数据合并\",{\"1\":{\"163\":1}}],[\"而是会使用\",{\"1\":{\"230\":1}}],[\"而是取决于protoc编译器生成代码时所指定的扫描路径\",{\"1\":{\"193\":1}}],[\"而是直接下载源代码然后在本地进行编译\",{\"1\":{\"19\":1}}],[\"而流式接口又分为单向流式和双向流式\",{\"1\":{\"196\":1}}],[\"而流式\",{\"1\":{\"157\":1}}],[\"而言没什么帮助\",{\"1\":{\"1067\":1}}],[\"而言依旧是一个不小的开销\",{\"1\":{\"490\":1}}],[\"而言就是下面这样\",{\"1\":{\"232\":1}}],[\"而言\",{\"1\":{\"143\":2,\"145\":1,\"159\":1,\"162\":2,\"163\":1,\"165\":2,\"382\":1,\"568\":1,\"643\":1,\"962\":1,\"1030\":1,\"1032\":1,\"1045\":1,\"1048\":1}}],[\"而言的话\",{\"1\":{\"140\":1}}],[\"而构建的\",{\"1\":{\"142\":1}}],[\"而导致内存未初始化的问题\",{\"1\":{\"138\":1}}],[\"而\",{\"1\":{\"42\":1,\"53\":1,\"142\":1,\"162\":1,\"169\":1,\"291\":1,\"382\":1,\"529\":1,\"543\":1,\"561\":1,\"742\":1,\"904\":1,\"984\":1,\"1090\":1,\"1097\":1,\"1128\":1}}],[\"而install命令会将源码编译成本机可执行的二进制文件\",{\"1\":{\"19\":1}}],[\"而专为美化\",{\"1\":{\"17\":1}}],[\"而且进入队尾等待\",{\"1\":{\"1151\":1}}],[\"而且整个\",{\"1\":{\"1067\":1}}],[\"而且会进入\",{\"1\":{\"1062\":1}}],[\"而且会自己配置一个客户端来达到更加细致化的需求\",{\"1\":{\"640\":1}}],[\"而且\",{\"1\":{\"1005\":1}}],[\"而且在浏览器中可以直接看到数据\",{\"1\":{\"1002\":1}}],[\"而且在解包封包的时候更加的快速\",{\"1\":{\"629\":1}}],[\"而且验证时也仅会以验证未通过的形式展现\",{\"1\":{\"946\":1}}],[\"而且还要查询出每一个房子的主人集合\",{\"1\":{\"899\":1}}],[\"而且还对变量做了修改\",{\"1\":{\"543\":1}}],[\"而且需要使用格式化动词来指定类型\",{\"1\":{\"722\":1}}],[\"而且它很可能是一个闭包函数\",{\"1\":{\"582\":1}}],[\"而且它只是一个变量\",{\"1\":{\"10\":1}}],[\"而且性能低下\",{\"1\":{\"571\":1}}],[\"而且其命名风格也与\",{\"1\":{\"537\":1}}],[\"而且并不需要手动传入接收者\",{\"1\":{\"452\":1}}],[\"而且可以带名字\",{\"1\":{\"307\":1}}],[\"而且领导只能有一个\",{\"1\":{\"142\":1}}],[\"而且不仅做了编译源代码这一件事\",{\"1\":{\"14\":1}}],[\"而且速度跟平时一样快\",{\"1\":{\"11\":1}}],[\"92\",{\"1\":{\"1114\":1}}],[\"9200\",{\"1\":{\"205\":1}}],[\"9472\",{\"1\":{\"1114\":1}}],[\"94\",{\"1\":{\"1114\":1}}],[\"9406564584124654417656879286822137236505980e\",{\"1\":{\"652\":1}}],[\"9s\",{\"1\":{\"527\":1}}],[\"91076\",{\"1\":{\"843\":1}}],[\"9129452507276277\",{\"1\":{\"670\":1}}],[\"91\",{\"1\":{\"527\":1,\"1114\":1}}],[\"9µs\",{\"1\":{\"993\":1,\"994\":1}}],[\"9µ\",{\"1\":{\"526\":1}}],[\"9527671\",{\"1\":{\"527\":1}}],[\"952\",{\"1\":{\"526\":1,\"932\":2}}],[\"953028750\",{\"1\":{\"526\":1}}],[\"953802700\",{\"1\":{\"526\":1}}],[\"95\",{\"1\":{\"380\":1,\"526\":3,\"1114\":1}}],[\"98\",{\"1\":{\"376\":1,\"526\":1}}],[\"9728\",{\"1\":{\"1114\":1}}],[\"978213\",{\"1\":{\"526\":1}}],[\"974\",{\"1\":{\"526\":1}}],[\"97\",{\"1\":{\"376\":1}}],[\"96875\",{\"1\":{\"912\":2}}],[\"96\",{\"1\":{\"376\":1,\"380\":1,\"1114\":3}}],[\"9668\",{\"1\":{\"141\":3}}],[\"993\",{\"1\":{\"526\":1}}],[\"993764\",{\"1\":{\"526\":1}}],[\"99\",{\"1\":{\"366\":2,\"376\":1,\"535\":1,\"684\":1,\"685\":1,\"687\":1,\"1114\":2}}],[\"999k\",{\"1\":{\"526\":2}}],[\"99999\",{\"1\":{\"685\":1,\"687\":1}}],[\"9999\",{\"1\":{\"525\":1,\"526\":8,\"685\":1,\"687\":1,\"817\":3}}],[\"999\",{\"1\":{\"366\":4,\"994\":1}}],[\"90625\",{\"1\":{\"912\":1}}],[\"905c\",{\"1\":{\"907\":1}}],[\"90\",{\"1\":{\"349\":5}}],[\"9091\",{\"1\":{\"170\":2}}],[\"9090\",{\"1\":{\"158\":1,\"159\":2,\"165\":1,\"166\":1,\"167\":1,\"560\":3}}],[\"93\",{\"1\":{\"1114\":1}}],[\"9362\",{\"1\":{\"934\":1}}],[\"937mi\",{\"1\":{\"526\":6}}],[\"9375\",{\"1\":{\"302\":1}}],[\"935523\",{\"1\":{\"132\":2}}],[\"9\",{\"0\":{\"128\":1},\"1\":{\"9\":11,\"27\":1,\"28\":2,\"87\":2,\"115\":2,\"128\":4,\"160\":1,\"168\":1,\"205\":1,\"209\":1,\"311\":1,\"341\":1,\"344\":2,\"354\":14,\"356\":3,\"357\":6,\"366\":4,\"367\":3,\"368\":7,\"369\":2,\"371\":10,\"392\":1,\"456\":1,\"462\":2,\"467\":2,\"470\":1,\"472\":1,\"480\":1,\"486\":2,\"503\":7,\"509\":8,\"521\":2,\"526\":2,\"539\":1,\"551\":1,\"578\":3,\"603\":1,\"629\":1,\"751\":1,\"752\":1,\"1019\":5,\"1023\":5,\"1114\":9,\"1130\":1,\"1175\":1}}],[\"标记当前协程是否已被唤醒\",{\"1\":{\"1153\":1}}],[\"标记终止\",{\"0\":{\"1140\":1}}],[\"标记终止阶段\",{\"1\":{\"1130\":1}}],[\"标记状态时\",{\"1\":{\"1139\":1}}],[\"标记辅助是在高负载的情况下的一种平衡手段\",{\"1\":{\"1139\":1}}],[\"标记辅助\",{\"0\":{\"1139\":1}}],[\"标记任务实际上指的就是runtime\",{\"1\":{\"1138\":1}}],[\"标记任务因一些原因被抢占时就会中断\",{\"1\":{\"1137\":1}}],[\"标记扫描的过程是增量式的\",{\"1\":{\"1137\":1}}],[\"标记工作开始时\",{\"1\":{\"1144\":1}}],[\"标记工作并不会在\",{\"1\":{\"1138\":1}}],[\"标记工作将要终止\",{\"1\":{\"1137\":1}}],[\"标记工作已开始\",{\"1\":{\"1137\":1}}],[\"标记工作未开始\",{\"1\":{\"1137\":1}}],[\"标记工作\",{\"0\":{\"1137\":1}}],[\"标记\",{\"0\":{\"1133\":1,\"1134\":1}}],[\"标记阶段\",{\"1\":{\"1130\":1,\"1134\":1}}],[\"标记压缩\",{\"1\":{\"1130\":1}}],[\"标记清除的升级版\",{\"1\":{\"1130\":1}}],[\"标记清除\",{\"1\":{\"1130\":1}}],[\"标记为空\",{\"1\":{\"1040\":2}}],[\"标题\",{\"1\":{\"1016\":1}}],[\"标量等数据形态\",{\"1\":{\"621\":1}}],[\"标签名\",{\"1\":{\"862\":1}}],[\"标签为准\",{\"1\":{\"628\":1}}],[\"标签的话\",{\"1\":{\"628\":1}}],[\"标签的使用需要结合反射才能完整发挥出其功能\",{\"1\":{\"409\":1}}],[\"标签是一种键值对的形式\",{\"1\":{\"409\":1}}],[\"标签\",{\"0\":{\"409\":1,\"862\":1,\"930\":1}}],[\"标签语句\",{\"1\":{\"351\":1}}],[\"标准中\",{\"1\":{\"771\":1}}],[\"标准所定义的\",{\"1\":{\"384\":1}}],[\"标准错误\",{\"1\":{\"335\":1}}],[\"标准输出\",{\"1\":{\"335\":1}}],[\"标准输入\",{\"1\":{\"335\":1}}],[\"标准库中的一个同步工具\",{\"1\":{\"1171\":1}}],[\"标准库中的条件变量\",{\"1\":{\"1164\":1}}],[\"标准库提供的sync\",{\"1\":{\"1044\":1}}],[\"标准库sync\",{\"1\":{\"488\":1}}],[\"标准库fmt包下就有一个对象池的使用案例\",{\"1\":{\"485\":1}}],[\"标准库unsafe提供了许多用于低级编程的操作\",{\"1\":{\"392\":1}}],[\"标准库教程\",{\"1\":{\"99\":1}}],[\"标准库虽然很丰富但内置的数据结构却没几个\",{\"1\":{\"88\":1}}],[\"标准库的log包提供的功能并不够完善\",{\"1\":{\"649\":1}}],[\"标准库的内容一直没有更新是因为标准库的内容实在太多了\",{\"1\":{\"616\":1}}],[\"标准库的\",{\"1\":{\"65\":1}}],[\"标准库的优化改造\",{\"1\":{\"65\":1}}],[\"标准库\",{\"0\":{\"585\":1},\"1\":{\"9\":1,\"96\":1,\"114\":1,\"115\":1,\"116\":1,\"117\":1,\"610\":1,\"615\":1,\"1045\":1}}],[\"标识符查看更多细节\",{\"1\":{\"298\":1}}],[\"标识符就是一个名称\",{\"1\":{\"298\":1}}],[\"标识符\",{\"0\":{\"298\":1}}],[\"标识符去访问即可\",{\"1\":{\"295\":1}}],[\"标注当前\",{\"1\":{\"141\":1}}],[\"标志\",{\"1\":{\"9\":1}}],[\"+sched\",{\"1\":{\"1153\":1}}],[\"+size\",{\"1\":{\"1122\":1}}],[\"+pcquantum\",{\"1\":{\"1095\":1}}],[\"+uintptr\",{\"1\":{\"1037\":1}}],[\"+9\",{\"1\":{\"1021\":1,\"1023\":1}}],[\"+file\",{\"1\":{\"984\":1,\"985\":1}}],[\"+0\",{\"1\":{\"1033\":1}}],[\"+0800\",{\"1\":{\"559\":1,\"737\":1,\"740\":1,\"741\":1,\"742\":3,\"743\":2,\"784\":3}}],[\"+0000\",{\"1\":{\"141\":1}}],[\"+25\",{\"1\":{\"526\":2}}],[\"+offset\",{\"1\":{\"417\":1}}],[\"+6\",{\"1\":{\"348\":1}}],[\"+i\",{\"1\":{\"216\":1,\"1030\":1,\"1036\":1,\"1038\":2,\"1039\":1}}],[\"+v\",{\"1\":{\"145\":1,\"153\":1,\"154\":1,\"158\":3,\"159\":4,\"165\":6,\"166\":11,\"174\":1,\"175\":1,\"224\":1,\"225\":2,\"227\":4,\"234\":2,\"341\":2,\"416\":1,\"449\":1,\"540\":1,\"603\":1,\"628\":1,\"779\":1,\"812\":6,\"813\":2,\"820\":5,\"977\":1,\"984\":2}}],[\"+=\",{\"1\":{\"137\":1,\"299\":1,\"350\":7,\"380\":1,\"467\":1,\"490\":1,\"525\":1,\"547\":1,\"1025\":2,\"1034\":1,\"1042\":1,\"1053\":1,\"1095\":1,\"1101\":2,\"1112\":2,\"1122\":1,\"1137\":2,\"1139\":5,\"1153\":1}}],[\"+3\",{\"1\":{\"17\":2,\"348\":1}}],[\"+11\",{\"1\":{\"1021\":2}}],[\"+10\",{\"1\":{\"1021\":1}}],[\"+1的结果是\",{\"1\":{\"701\":1}}],[\"+18\",{\"1\":{\"216\":1}}],[\"+1\",{\"1\":{\"16\":1,\"1153\":1}}],[\"+build指令来控制编译行为\",{\"1\":{\"42\":1}}],[\"+build指令\",{\"1\":{\"12\":1}}],[\"+build\",{\"1\":{\"12\":8,\"16\":1,\"37\":1,\"823\":2,\"824\":3}}],[\"+\",{\"1\":{\"9\":1,\"14\":1,\"16\":1,\"17\":3,\"85\":2,\"150\":3,\"158\":2,\"159\":3,\"164\":3,\"216\":1,\"242\":1,\"299\":1,\"311\":1,\"324\":1,\"325\":3,\"326\":2,\"331\":3,\"344\":1,\"345\":1,\"348\":1,\"360\":3,\"379\":1,\"392\":1,\"395\":3,\"397\":5,\"398\":1,\"399\":2,\"400\":1,\"402\":1,\"479\":1,\"480\":1,\"481\":1,\"482\":1,\"499\":6,\"521\":1,\"531\":1,\"532\":1,\"533\":3,\"535\":2,\"545\":1,\"547\":2,\"571\":3,\"573\":3,\"578\":3,\"581\":2,\"591\":2,\"593\":2,\"594\":1,\"595\":1,\"600\":1,\"652\":2,\"682\":1,\"713\":1,\"728\":1,\"748\":1,\"751\":5,\"752\":2,\"774\":4,\"840\":2,\"887\":4,\"995\":1,\"1021\":3,\"1023\":2,\"1024\":5,\"1025\":4,\"1028\":1,\"1037\":3,\"1042\":3,\"1053\":6,\"1054\":3,\"1067\":2,\"1089\":3,\"1095\":2,\"1097\":1,\"1098\":1,\"1100\":1,\"1101\":1,\"1102\":1,\"1104\":1,\"1106\":1,\"1107\":1,\"1111\":1,\"1112\":1,\"1115\":2,\"1117\":1,\"1122\":3,\"1124\":2,\"1125\":5,\"1132\":1,\"1137\":1,\"1138\":1,\"1139\":2,\"1148\":2,\"1151\":15,\"1158\":3}}],[\"++a\",{\"1\":{\"299\":1}}],[\"+++\",{\"1\":{\"16\":1,\"17\":2}}],[\"++\",{\"1\":{\"7\":2}}],[\"通知限制器标记辅助已经结束了\",{\"1\":{\"1140\":1}}],[\"通讯\",{\"0\":{\"611\":1}}],[\"通用接口就是为了泛型服务的\",{\"1\":{\"569\":1}}],[\"通用接口\",{\"0\":{\"569\":1},\"1\":{\"563\":1}}],[\"通用工具\",{\"0\":{\"82\":1}}],[\"通道用使用起来都是类似的\",{\"1\":{\"433\":1}}],[\"通道分配内存\",{\"1\":{\"393\":1}}],[\"通道\",{\"1\":{\"320\":1,\"321\":1,\"332\":1,\"355\":1,\"433\":1,\"568\":1,\"1070\":2}}],[\"通信地址\",{\"1\":{\"143\":1}}],[\"通信成本越高\",{\"1\":{\"142\":1}}],[\"通常应用于生产者\",{\"1\":{\"1170\":1}}],[\"通常该函数只有在函数返回之前才会执行\",{\"1\":{\"1080\":1}}],[\"通常该目录为$gomodcache\",{\"1\":{\"510\":1}}],[\"通常都是这样来清空切片\",{\"1\":{\"1027\":1}}],[\"通常都是在请求头中的authorization\",{\"1\":{\"775\":1}}],[\"通常情况支持\",{\"1\":{\"798\":1}}],[\"通常情况下使用\",{\"1\":{\"799\":1}}],[\"通常情况下是调用os包下的exit函数退出程序\",{\"1\":{\"608\":1}}],[\"通常情况下需要配置以下几个环境配置来进行模块私有处理\",{\"1\":{\"511\":1}}],[\"通常情况下\",{\"1\":{\"364\":1,\"380\":1,\"469\":1,\"509\":1,\"510\":1}}],[\"通常由两部分组成\",{\"1\":{\"772\":1}}],[\"通常我们会有一个需求就是\",{\"1\":{\"740\":1}}],[\"通常在一些危险操作中会出现\",{\"1\":{\"604\":1}}],[\"通常建议小转大\",{\"1\":{\"595\":1}}],[\"通常称为\",{\"1\":{\"582\":1}}],[\"通常会使用char\",{\"1\":{\"536\":1}}],[\"通常格式为vx\",{\"1\":{\"509\":1}}],[\"通常来说页的大小就是\",{\"1\":{\"1114\":1}}],[\"通常来说\",{\"1\":{\"470\":1}}],[\"通常关闭操作会放在defer语句里\",{\"1\":{\"416\":1}}],[\"通常不建议使用这个方法\",{\"1\":{\"981\":1}}],[\"通常不建议使用这种方式\",{\"1\":{\"405\":1}}],[\"通常不会只有一个服务\",{\"1\":{\"169\":1}}],[\"通常用于一些非基本类型\",{\"1\":{\"950\":1}}],[\"通常用于套接字地址的字段验证<dns>\",{\"1\":{\"932\":1}}],[\"通常用于在服务双方共享一些信息\",{\"1\":{\"773\":1}}],[\"通常用于测试程序的内存占用\",{\"1\":{\"525\":1}}],[\"通常用于表述一些不可再细化分割的操作\",{\"1\":{\"487\":1}}],[\"通常用于表示一个常量声明中的无类型整数序数\",{\"1\":{\"325\":1}}],[\"通常用于控制protobuf的一些行为\",{\"1\":{\"198\":1}}],[\"通常用stream关键字来修饰\",{\"1\":{\"196\":1}}],[\"通常是\",{\"1\":{\"1115\":1}}],[\"通常是官方所编写的标准库代码示例\",{\"1\":{\"520\":1}}],[\"通常是在运行低层次代码不适合进行竞态分析时使用\",{\"1\":{\"49\":1}}],[\"通常是提供给其它程序使用的\",{\"1\":{\"26\":1}}],[\"通常它的作用是用于执行那些会生成代码以及更新源代码的命令\",{\"1\":{\"40\":1}}],[\"通常很少会用到这个参数\",{\"1\":{\"24\":1}}],[\"通常存放在gotmepdir目录下\",{\"1\":{\"13\":1}}],[\"通配符\",{\"1\":{\"9\":1,\"201\":1}}],[\"通过与互斥锁配合使用\",{\"1\":{\"1170\":1}}],[\"通过两个信号量writersem和readersem来使得读写互斥\",{\"1\":{\"1155\":1}}],[\"通过两对花括号\",{\"1\":{\"725\":1}}],[\"通过互斥锁\",{\"1\":{\"1165\":1}}],[\"通过互斥锁来使得写者协程间互斥\",{\"1\":{\"1155\":1}}],[\"通过互动式的代码教学来帮助你快速了解\",{\"1\":{\"287\":1}}],[\"通过哈希散列成本来替代写屏障的成本\",{\"1\":{\"1130\":1}}],[\"通过异步线程发送信号的方式来进行抢占线程\",{\"1\":{\"1107\":1}}],[\"通过代码修改runtime\",{\"1\":{\"1085\":1}}],[\"通过代码可以观察到\",{\"1\":{\"383\":1}}],[\"通过下面if\",{\"1\":{\"1060\":1}}],[\"通过下面一张图可以很清晰的明白\",{\"1\":{\"1057\":1}}],[\"通过下面的方式支持将时区数据库嵌入到程序中\",{\"1\":{\"122\":1}}],[\"通过len函数获取的结果是字节的数量\",{\"1\":{\"1052\":1}}],[\"通过list命令以源代码的形式查看\",{\"1\":{\"559\":1}}],[\"通过此状态就可以得知数据已经被搬迁\",{\"1\":{\"1042\":1}}],[\"通过移动指针获取键值\",{\"1\":{\"1037\":1}}],[\"通过移动指针定位key所在的哈希桶\",{\"1\":{\"1036\":1}}],[\"通过移动指针来访问切片结构体中的len字段\",{\"1\":{\"1021\":1}}],[\"通过不变性\",{\"1\":{\"1136\":1}}],[\"通过不断循环找到第一个满足\",{\"1\":{\"1034\":1}}],[\"通过不同的前缀可以表达不同进制的浮点数\",{\"1\":{\"302\":1}}],[\"通过append函数可以向切片添加元素\",{\"1\":{\"1024\":1}}],[\"通过索引下标修改切片的值时\",{\"1\":{\"1023\":1}}],[\"通过索引访问的例子如下\",{\"1\":{\"448\":1}}],[\"通过生成中间代码的方式来访问\",{\"1\":{\"1021\":1}}],[\"通过生成的\",{\"1\":{\"1016\":1}}],[\"通过生成类型转换的代码\",{\"1\":{\"810\":1}}],[\"通过在书写指定格式的注释就可以生成swagger\",{\"1\":{\"1009\":1}}],[\"通过自定义中间件\",{\"1\":{\"1007\":1}}],[\"通过中间件\",{\"1\":{\"992\":1}}],[\"通过将\",{\"1\":{\"952\":1}}],[\"通过一个\",{\"1\":{\"943\":1}}],[\"通过一行代码就运行起了一个最简单的\",{\"1\":{\"503\":1}}],[\"通过字段验证\",{\"1\":{\"934\":1}}],[\"通过其基本类型来确定如何进行处理\",{\"1\":{\"927\":1}}],[\"通过misslocked方法可以看出\",{\"1\":{\"1046\":1}}],[\"通过migrator方法访问migrator接口\",{\"1\":{\"863\":1}}],[\"通过makebucketarray清除之前的桶的内存\",{\"1\":{\"1040\":1}}],[\"通过many2many来指定连接表\",{\"1\":{\"893\":1}}],[\"通过嵌入结构体和字段的形式来定义结构体与结构体之间的关联\",{\"1\":{\"890\":1}}],[\"通过遍历迭代器\",{\"1\":{\"882\":1}}],[\"通过runtime\",{\"1\":{\"1037\":1,\"1101\":1,\"1132\":1}}],[\"通过reader读取流并写入响应流中\",{\"1\":{\"981\":1}}],[\"通过rows方法可以获取一个迭代器\",{\"1\":{\"882\":1}}],[\"通过rwmutex\",{\"1\":{\"482\":1}}],[\"通过实现table接口\",{\"1\":{\"855\":1}}],[\"通过实现error\",{\"1\":{\"601\":1}}],[\"通过传入gorm\",{\"1\":{\"852\":1}}],[\"通过调用内置函数recover\",{\"1\":{\"1080\":1}}],[\"通过调用wire\",{\"1\":{\"823\":1}}],[\"通过调用flag\",{\"1\":{\"634\":1}}],[\"通过uintptr转换为unsafe\",{\"1\":{\"751\":1}}],[\"通过unsafe包下提供的操作\",{\"1\":{\"597\":1}}],[\"通过unsafe\",{\"1\":{\"539\":1,\"541\":1}}],[\"通过block语句\",{\"1\":{\"735\":1}}],[\"通过with语句还可以在作用域内改写根对象\",{\"1\":{\"730\":1}}],[\"通过with语句可以控制变量和根对象的作用域\",{\"1\":{\"730\":1}}],[\"通过$衔接变量名来访问该变量的值\",{\"1\":{\"727\":1}}],[\"通过$符号来表示这是一个变量\",{\"1\":{\"727\":1}}],[\"通过直接调用\",{\"1\":{\"638\":1}}],[\"通过直观的数据对比性能正是基准测试的目的所在\",{\"1\":{\"525\":1}}],[\"通过格式化输出\",{\"1\":{\"603\":1}}],[\"通过显式的将myfloat64\",{\"1\":{\"595\":1}}],[\"通过类型声明的类型都是新类型\",{\"1\":{\"593\":1}}],[\"通过上面的代码可以看到\",{\"1\":{\"1039\":1}}],[\"通过上面标准库提供的函数\",{\"1\":{\"586\":1}}],[\"通过上面几个例子可以发现\",{\"1\":{\"325\":1}}],[\"通过方法scan\",{\"1\":{\"583\":1}}],[\"通过方法text\",{\"1\":{\"583\":1}}],[\"通过图片我们可以更加清晰的看到整个调用栈的内存情况\",{\"1\":{\"559\":1}}],[\"通过各种各样的测试\",{\"1\":{\"548\":1}}],[\"通过前缀c\",{\"1\":{\"542\":1}}],[\"通过引入\",{\"1\":{\"532\":1}}],[\"通过导入语句import\",{\"1\":{\"530\":1}}],[\"通过输出其汇编代码就能知道结果\",{\"1\":{\"1053\":1}}],[\"通过输出会发现\",{\"1\":{\"568\":1}}],[\"通过输出可以看到\",{\"1\":{\"539\":1}}],[\"通过输出可以很清晰的看到父子的层级结构\",{\"1\":{\"523\":1}}],[\"通过输出字符串第一个元素可以看出结果\",{\"1\":{\"377\":1}}],[\"通过transaction方法\",{\"1\":{\"901\":1}}],[\"通过time\",{\"1\":{\"741\":1,\"742\":1}}],[\"通过type关键字声明了一个基础类型为int64名为myint的类型\",{\"1\":{\"593\":1}}],[\"通过t\",{\"1\":{\"522\":1,\"523\":1}}],[\"通过有缓冲管道还可以实现一个简单的互斥锁\",{\"1\":{\"467\":1}}],[\"通过class\",{\"1\":{\"1114\":1}}],[\"通过c\",{\"1\":{\"540\":1}}],[\"通过cap可以访问管道缓冲区的大小\",{\"1\":{\"467\":1}}],[\"通过comparable方法可以判断一个类型是否可以被比较\",{\"1\":{\"435\":1}}],[\"通过内置函数len可以访问管道缓冲区中数据的个数\",{\"1\":{\"467\":1}}],[\"通过反射可以构造新的值\",{\"1\":{\"453\":1}}],[\"通过反射可以获取函数的一切信息\",{\"1\":{\"444\":1}}],[\"通过反射值来调用函数\",{\"1\":{\"446\":1}}],[\"通过反射类型来获取函数的一切信息\",{\"1\":{\"445\":1}}],[\"通过isnil\",{\"1\":{\"1070\":1}}],[\"通过index结构体标签可以指定列索引\",{\"1\":{\"859\":1}}],[\"通过interface\",{\"1\":{\"443\":1}}],[\"通过implements方法可以判断一个类型是否实现了某一接口\",{\"1\":{\"436\":1}}],[\"通过import\",{\"1\":{\"15\":1}}],[\"通过kind方法\",{\"1\":{\"432\":1}}],[\"通过kind\",{\"1\":{\"432\":1}}],[\"通过openfile函数可以控制更多细节\",{\"1\":{\"416\":1}}],[\"通过options可以对enum和messagee进行拓展\",{\"1\":{\"202\":1}}],[\"通过结构体标签可以指定引用某一个字段\",{\"1\":{\"860\":1}}],[\"通过结构体标签\",{\"1\":{\"854\":1}}],[\"通过结构体和方法也可以模拟出一个类\",{\"1\":{\"403\":1}}],[\"通过结果得知成功导入了模块\",{\"1\":{\"513\":1}}],[\"通过结果可以观察到相同的键值并没有覆盖\",{\"1\":{\"384\":1}}],[\"通过对比上面几个例子可以发现这段代码\",{\"1\":{\"402\":1}}],[\"通过fastrand\",{\"1\":{\"1037\":1}}],[\"通过fallthrough关键字来继续执行相邻的下一个分支\",{\"1\":{\"350\":1}}],[\"通过for\",{\"1\":{\"386\":1,\"470\":1}}],[\"通过var\",{\"1\":{\"364\":1}}],[\"通过version命令可以查看当前\",{\"1\":{\"6\":1}}],[\"通过函数来进行两数相加\",{\"1\":{\"331\":1}}],[\"通过这些我们不难反推出其原来的样子\",{\"1\":{\"1067\":1}}],[\"通过这些可以发现接收方和发送方两者相辅相成才能让管道正常运作\",{\"1\":{\"1060\":1}}],[\"通过这种写法可以根据不同的case做出不同的逻辑处理\",{\"1\":{\"597\":1}}],[\"通过这篇文章你可以对\",{\"1\":{\"313\":1}}],[\"通过这个例子可以发现单向流式\",{\"1\":{\"158\":1}}],[\"通过这个功能\",{\"1\":{\"10\":1}}],[\"通过命令如下命令得到汇编代码\",{\"1\":{\"1038\":1}}],[\"通过命令行就可以使用\",{\"1\":{\"308\":1}}],[\"通过命令go\",{\"1\":{\"17\":1,\"519\":2}}],[\"通过名称访问的例子如下\",{\"1\":{\"448\":1}}],[\"通过名称\",{\"1\":{\"295\":1}}],[\"通过sched\",{\"1\":{\"1089\":1}}],[\"通过size方法可以获取对应类型所占的字节大小\",{\"1\":{\"434\":1}}],[\"通过sqlx\",{\"1\":{\"232\":1}}],[\"通过status\",{\"1\":{\"168\":2}}],[\"通过以上几种类型\",{\"1\":{\"222\":1}}],[\"通过descriptor来进行检查\",{\"1\":{\"202\":1}}],[\"通过protoc\",{\"1\":{\"201\":1}}],[\"通过请求时间可以看到负载均衡策略确实是在起作用的\",{\"1\":{\"175\":1}}],[\"通过客户端的一元\",{\"1\":{\"166\":1}}],[\"通过示例可以看到的是\",{\"1\":{\"159\":1}}],[\"通过流式\",{\"1\":{\"166\":1}}],[\"通过流式传输将消息发送给客户端\",{\"1\":{\"158\":1}}],[\"通过流式请求不断发送消息过来\",{\"1\":{\"158\":1}}],[\"通过设置goenv系统变量将其与goroot分离开\",{\"1\":{\"92\":1}}],[\"通过修改修改函数地址实现\",{\"1\":{\"55\":1}}],[\"通过编译期重写代码来实现\",{\"1\":{\"55\":1}}],[\"通过如下命令开启用\",{\"1\":{\"494\":1}}],[\"通过如下命令来查看是否开启\",{\"1\":{\"494\":1}}],[\"通过如下命令来查看ldflags所有可用的值\",{\"1\":{\"10\":1}}],[\"通过如下命令查看其更详细的参数和解释\",{\"1\":{\"37\":1}}],[\"通过如下命令查看其参数可用的值\",{\"1\":{\"9\":1}}],[\"通过gcflags可以向编译器\",{\"1\":{\"9\":1}}],[\"通过go\",{\"1\":{\"7\":2,\"14\":1,\"495\":1,\"500\":2}}],[\"通过\",{\"1\":{\"7\":1,\"10\":1,\"17\":1,\"96\":1,\"143\":2,\"158\":1,\"168\":1,\"205\":1,\"206\":1,\"215\":1,\"725\":2,\"978\":1,\"1056\":2,\"1165\":1}}],[\"通过env命令可以查看所有\",{\"1\":{\"7\":1}}],[\"通过它来调度每一个系统线程上的协程\",{\"1\":{\"1085\":1}}],[\"通过它可以获取流的context\",{\"1\":{\"162\":1}}],[\"通过它可以阅读命令的用法\",{\"1\":{\"3\":1}}],[\"通过它的名字可以很容易猜到是跟逃逸有关的\",{\"1\":{\"47\":1}}],[\"通过它你可以获取很多有关命令的信息\",{\"1\":{\"3\":1}}],[\"作用\",{\"1\":{\"728\":1}}],[\"作用就是将两个int类型的整数相加并返回结果\",{\"1\":{\"571\":1}}],[\"作用cmd包下的所有源文件\",{\"1\":{\"9\":1}}],[\"作为中间人处理着\",{\"1\":{\"1104\":1}}],[\"作为替代可以使用reflect\",{\"1\":{\"1052\":1}}],[\"作为替代的有两个\",{\"1\":{\"849\":1}}],[\"作为适配器从实例中读取doc\",{\"1\":{\"1016\":1}}],[\"作为资源的角色定义\",{\"1\":{\"766\":1}}],[\"作为传统的系统编程语言性能是非常优秀的\",{\"1\":{\"529\":1}}],[\"作为map的值类型\",{\"1\":{\"411\":1}}],[\"作为脚本语言\",{\"1\":{\"218\":1}}],[\"作为主要语言进行讲解\",{\"1\":{\"147\":1}}],[\"作为一个短小精悍的脚本语言很受游戏开发的欢迎\",{\"1\":{\"803\":1}}],[\"作为一个\",{\"1\":{\"138\":1,\"142\":1}}],[\"作为一个项目参考\",{\"1\":{\"93\":1}}],[\"作为一门工程化的语言\",{\"1\":{\"88\":1}}],[\"作为了首选语言\",{\"1\":{\"88\":1}}],[\"作为前缀\",{\"1\":{\"39\":1,\"43\":1}}],[\"作为参数的函数不能闭包\",{\"1\":{\"1091\":1}}],[\"作为参数的字段或者结构体不存在时\",{\"1\":{\"946\":1}}],[\"作为参数\",{\"1\":{\"33\":1,\"886\":1,\"1091\":1}}],[\"作为\",{\"1\":{\"18\":1,\"143\":2,\"203\":1,\"384\":1}}],[\"作者和\",{\"1\":{\"810\":1}}],[\"作者写的多种数据格式序列化器\",{\"1\":{\"63\":1}}],[\"作者最喜欢的一首诗句是屈原所著的\",{\"1\":{\"0\":1}}],[\"作者花费了大量的时间和精力搜集资料\",{\"1\":{\"0\":1}}],[\"作者本人在\",{\"1\":{\"0\":1}}],[\"作者本人只是一个平平无奇的大学生\",{\"1\":{\"0\":1}}],[\"格式就是\",{\"1\":{\"969\":1}}],[\"格式就是header\",{\"1\":{\"771\":1}}],[\"格式的电话号码\",{\"1\":{\"934\":1}}],[\"格式的版本元数据\",{\"1\":{\"510\":1}}],[\"格式进行复制\",{\"1\":{\"514\":1}}],[\"格式是require\",{\"1\":{\"509\":1}}],[\"格式\",{\"1\":{\"242\":1}}],[\"格式输出观察起来会更为友好\",{\"1\":{\"908\":1}}],[\"格式输出测试日志\",{\"1\":{\"519\":1}}],[\"格式输出\",{\"1\":{\"20\":1,\"26\":1}}],[\"格式如下\",{\"1\":{\"17\":1,\"18\":1,\"382\":1,\"409\":1,\"730\":2}}],[\"格式为var\",{\"1\":{\"328\":1}}],[\"格式为\",{\"1\":{\"8\":1,\"113\":1,\"174\":1}}],[\"格式化类型\",{\"1\":{\"700\":1}}],[\"格式化字符数量\",{\"1\":{\"341\":2}}],[\"格式化字符串\",{\"1\":{\"341\":1}}],[\"格式化输出\",{\"1\":{\"34\":1}}],[\"格式化go\",{\"1\":{\"34\":1}}],[\"格式化参数\",{\"1\":{\"20\":1}}],[\"格式化\",{\"0\":{\"341\":1,\"739\":1,\"934\":1},\"1\":{\"2\":1,\"156\":1,\"341\":1,\"618\":1}}],[\"与传统的\",{\"1\":{\"1109\":1}}],[\"与当前\",{\"1\":{\"1092\":1}}],[\"与先前创建好的\",{\"1\":{\"1089\":1}}],[\"与新的\",{\"1\":{\"1097\":1}}],[\"与新\",{\"1\":{\"1089\":1}}],[\"与切片一样map的内部实现也是结构体\",{\"1\":{\"1030\":1}}],[\"与其他同步原语不同\",{\"1\":{\"1164\":1}}],[\"与其他数据中心交换数据\",{\"1\":{\"142\":1}}],[\"与其它语言不同的是\",{\"1\":{\"1029\":1}}],[\"与源数组就没有关系了\",{\"1\":{\"1019\":1}}],[\"与操作\",{\"1\":{\"938\":1}}],[\"与之类似的还有相对比较年轻的xorm\",{\"1\":{\"848\":1}}],[\"与之前的区别在于\",{\"1\":{\"522\":1}}],[\"与text\",{\"1\":{\"736\":1}}],[\"与运算\",{\"1\":{\"728\":1}}],[\"与数据库进行交互的包\",{\"1\":{\"616\":1}}],[\"与泛型的情况相似\",{\"1\":{\"589\":1}}],[\"与互斥锁一同出现和使用\",{\"1\":{\"482\":1}}],[\"与reflect\",{\"1\":{\"429\":1}}],[\"与o\",{\"1\":{\"416\":1}}],[\"与匿名函数一起使用\",{\"1\":{\"399\":1}}],[\"与switch类似\",{\"1\":{\"471\":1}}],[\"与scan类似\",{\"1\":{\"344\":1}}],[\"与singular类似\",{\"1\":{\"187\":1}}],[\"与格式化动词之间加上一个空格便可以达到分隔符的效果\",{\"1\":{\"341\":1}}],[\"与服务端类似也是四个工具函数通过\",{\"1\":{\"166\":1}}],[\"与结构体互转\",{\"1\":{\"56\":1}}],[\"与命令不同\",{\"1\":{\"39\":1}}],[\"与包声明必须隔一行空行\",{\"1\":{\"12\":1}}],[\"与+build必须隔一个空格\",{\"1\":{\"12\":1}}],[\"与\",{\"1\":{\"8\":1,\"168\":1,\"341\":1,\"534\":1,\"537\":1,\"538\":1,\"547\":1,\"598\":1,\"705\":1,\"742\":1,\"862\":1,\"1003\":1,\"1088\":3,\"1096\":1,\"1097\":1,\"1098\":1,\"1100\":1,\"1104\":2,\"1106\":1}}],[\"与$goroot\",{\"1\":{\"7\":1}}],[\"最早在上世纪\",{\"1\":{\"1130\":1}}],[\"最核心的点只有两个runtime\",{\"1\":{\"1104\":1}}],[\"最为复杂\",{\"1\":{\"1035\":1}}],[\"最初s1和s确实指向的同一个数组\",{\"1\":{\"1019\":1}}],[\"最初的\",{\"1\":{\"570\":1}}],[\"最低版本为1\",{\"1\":{\"964\":1}}],[\"最好直接返回nil\",{\"1\":{\"1070\":1}}],[\"最好限制只读或只写\",{\"1\":{\"1062\":1}}],[\"最好保持一致\",{\"1\":{\"953\":1}}],[\"最好新建一个wire\",{\"1\":{\"824\":1}}],[\"最好确保在传递之前为其分配合适的内存\",{\"1\":{\"781\":1}}],[\"最好要避免和其他声明部分冲突\",{\"1\":{\"773\":1}}],[\"最好手动取消上下文\",{\"1\":{\"478\":1}}],[\"最小对齐\",{\"1\":{\"1114\":1}}],[\"最小长度为1\",{\"1\":{\"945\":1}}],[\"最小日志级别\",{\"1\":{\"839\":2}}],[\"最小的单位是纳秒\",{\"1\":{\"738\":1}}],[\"最小值\",{\"0\":{\"655\":1},\"1\":{\"936\":1}}],[\"最小化的语言了解一下\",{\"1\":{\"617\":1}}],[\"最小堆的实现\",{\"1\":{\"616\":1}}],[\"最小重试时间间隔\",{\"1\":{\"242\":1}}],[\"最诟病的点就在错误处理上\",{\"1\":{\"598\":1}}],[\"最根本的区别在于它的类型一旦推断出来后不会再发生变化\",{\"1\":{\"591\":1}}],[\"最轻松的当然是直接不要泛型\",{\"1\":{\"579\":1}}],[\"最重要的部分在于如何找出垃圾对象\",{\"1\":{\"1146\":1}}],[\"最重要的一点就是降低\",{\"1\":{\"485\":1}}],[\"最重要的因素就是心态了\",{\"1\":{\"0\":1}}],[\"最多只能有一个协程对变量count进行修改\",{\"1\":{\"467\":1}}],[\"最多只有一个数据存放在缓冲区中\",{\"1\":{\"467\":1}}],[\"最简单的对称加密算法hsa\",{\"1\":{\"777\":1}}],[\"最简单的做法就是让主协程等一会儿\",{\"1\":{\"462\":1}}],[\"最简单的用法就是\",{\"1\":{\"38\":1}}],[\"最典型的例子就是fmt\",{\"1\":{\"396\":1}}],[\"最基础的组成部分\",{\"1\":{\"394\":1}}],[\"最大内存浪费率\",{\"1\":{\"1114\":1}}],[\"最大对象大小\",{\"1\":{\"1114\":1}}],[\"最大长度为5\",{\"1\":{\"945\":1}}],[\"最大的是小时\",{\"1\":{\"738\":1}}],[\"最大的变化就是加入了泛型\",{\"1\":{\"563\":1}}],[\"最大值是\",{\"1\":{\"1085\":1}}],[\"最大值\",{\"0\":{\"654\":1},\"1\":{\"936\":1}}],[\"最大也只有三个字节\",{\"1\":{\"380\":1}}],[\"最大重试时间间隔\",{\"1\":{\"242\":1}}],[\"最终还是不为0的话表示需要等待这些读者协程工作完\",{\"1\":{\"1158\":1}}],[\"最终都能得到一个可用的mspan\",{\"1\":{\"1120\":1}}],[\"最终都会走入runtime\",{\"1\":{\"1079\":1}}],[\"最终都会通过fmt\",{\"1\":{\"725\":1}}],[\"最终让程序能够正常结束\",{\"1\":{\"1107\":1}}],[\"最终就会从其它的\",{\"1\":{\"1104\":1}}],[\"最终就会去访问\",{\"1\":{\"1046\":1}}],[\"最终由runtime\",{\"1\":{\"1096\":1}}],[\"最终得到了元素指针后\",{\"1\":{\"1038\":1}}],[\"最终获取到了键值以后\",{\"1\":{\"1037\":1}}],[\"最终会由runtime\",{\"1\":{\"1074\":1}}],[\"最终会走到memhash函数\",{\"1\":{\"1033\":1}}],[\"最终会选择的版本是\",{\"1\":{\"508\":1}}],[\"最终生成的代码可以理解为下面的伪代码\",{\"1\":{\"1021\":1}}],[\"最终\",{\"1\":{\"963\":1}}],[\"最终操作\",{\"1\":{\"963\":1}}],[\"最终的容量\",{\"1\":{\"1025\":1}}],[\"最终的日志编码\",{\"1\":{\"840\":1}}],[\"最终的模板生成结果为\",{\"1\":{\"734\":1}}],[\"最终的输出为\",{\"1\":{\"371\":1}}],[\"最终结果一定是10\",{\"1\":{\"479\":1}}],[\"最终结果\",{\"1\":{\"479\":2,\"480\":2,\"481\":2,\"482\":2}}],[\"最终输出\",{\"1\":{\"740\":1}}],[\"最终输出的结果为\",{\"1\":{\"735\":1}}],[\"最终输出为\",{\"1\":{\"489\":1}}],[\"最终输出如下\",{\"1\":{\"471\":1}}],[\"最终输出结果为\",{\"1\":{\"370\":1}}],[\"最常见的使用场景是需要在多个协程之间同步某些条件\",{\"1\":{\"1170\":1}}],[\"最常见的两种方式就是红黑树和哈希表\",{\"1\":{\"1029\":1}}],[\"最常见的用法是使用fmt包\",{\"1\":{\"339\":1}}],[\"最常用的独立于语言的数据格式有xml\",{\"1\":{\"617\":1}}],[\"最常用的就是slices和maps标准库\",{\"1\":{\"585\":1}}],[\"最常用的就是搜索\",{\"1\":{\"216\":1}}],[\"最常用的\",{\"1\":{\"360\":1}}],[\"最常用的是\",{\"1\":{\"201\":1}}],[\"最常用的令牌类型就是是\",{\"1\":{\"172\":1}}],[\"最常用的两种方法\",{\"1\":{\"161\":1}}],[\"最新特性\",{\"1\":{\"285\":1}}],[\"最流行的测试工具包\",{\"1\":{\"55\":1}}],[\"最经典的\",{\"1\":{\"51\":1}}],[\"最后要提醒下\",{\"1\":{\"1179\":1}}],[\"最后是mheap\",{\"1\":{\"1125\":1}}],[\"最后将mspan初始化完毕后就可以返回了\",{\"1\":{\"1120\":1}}],[\"最后将空闲的\",{\"1\":{\"1089\":1}}],[\"最后就会走到runtime\",{\"1\":{\"1106\":1}}],[\"最后就是为哈希桶分配内存\",{\"1\":{\"1034\":1}}],[\"最后交给runtime\",{\"1\":{\"1104\":1}}],[\"最后设置\",{\"1\":{\"1095\":1}}],[\"最后由mheap\",{\"1\":{\"1121\":1}}],[\"最后由操作系统来退出线程\",{\"1\":{\"1092\":1}}],[\"最后由runtime\",{\"1\":{\"1079\":1,\"1089\":1}}],[\"最后进入调度循环将执行权让给其它的\",{\"1\":{\"1106\":1}}],[\"最后进入调度循环\",{\"1\":{\"1089\":1}}],[\"最后可以看到有这么一段代码\",{\"1\":{\"1074\":1}}],[\"最后实在找不到才会使用手动分配的方式\",{\"1\":{\"1074\":1}}],[\"最后会由runtime\",{\"1\":{\"1060\":1}}],[\"最后会直接新建一个\",{\"1\":{\"1047\":1}}],[\"最后会将自身从父级中删除\",{\"1\":{\"477\":1}}],[\"最后返回元素的指针\",{\"1\":{\"1038\":1}}],[\"最后返回对应类型的零值\",{\"1\":{\"1036\":1}}],[\"最后三行代码干的事就是将\",{\"1\":{\"1036\":1}}],[\"最后都是由runtime\",{\"1\":{\"1034\":1}}],[\"最后通过runtime\",{\"1\":{\"1168\":1}}],[\"最后通过移动指针来存储元素\",{\"1\":{\"1023\":1}}],[\"最后通过生成的\",{\"1\":{\"824\":1}}],[\"最后下载\",{\"1\":{\"1010\":1}}],[\"最后注册一下\",{\"1\":{\"952\":1}}],[\"最后效果\",{\"1\":{\"843\":1}}],[\"最后获得core和options\",{\"1\":{\"843\":1}}],[\"最后构建切片结构体\",{\"1\":{\"1025\":1}}],[\"最后构建\",{\"0\":{\"843\":1}}],[\"最后代码如下\",{\"1\":{\"841\":1}}],[\"最后得到的输出就是一个由三个base64url字符串组成且由\",{\"1\":{\"774\":1}}],[\"最后组成一个字符串\",{\"1\":{\"771\":1}}],[\"最后\",{\"0\":{\"547\":1},\"1\":{\"1130\":1,\"1154\":1}}],[\"最后编译\",{\"1\":{\"545\":1}}],[\"最后依旧需要发布新版本\",{\"1\":{\"513\":1}}],[\"最后再释放互斥锁\",{\"1\":{\"1159\":1}}],[\"最后再用新的微对象内存块替换掉旧的\",{\"1\":{\"1124\":1}}],[\"最后再用memmove函数把内存直接复制过去\",{\"1\":{\"1054\":1}}],[\"最后再从链表中寻找可用的mspan\",{\"1\":{\"1123\":1}}],[\"最后再由页分配器将这片内存标记为就绪状态\",{\"1\":{\"1122\":1}}],[\"最后再调用runtime\",{\"1\":{\"1140\":1}}],[\"最后再调用fn执行\",{\"1\":{\"1075\":1}}],[\"最后再调用这个函数传入参数\",{\"1\":{\"823\":1}}],[\"最后再更新其它的一些记录信息的字段\",{\"1\":{\"1058\":1}}],[\"最后再一个个赋值\",{\"1\":{\"1024\":1}}],[\"最后再注册\",{\"1\":{\"952\":1}}],[\"最后再将\",{\"1\":{\"772\":1}}],[\"最后再推送到远程仓库\",{\"1\":{\"499\":1}}],[\"最后再删除临时文件夹\",{\"1\":{\"19\":1}}],[\"最后的最后\",{\"1\":{\"498\":1,\"952\":1}}],[\"最后需要注意的是\",{\"1\":{\"485\":1}}],[\"最后输出到传入的writer中也就是os\",{\"1\":{\"723\":1}}],[\"最后输出如下\",{\"1\":{\"476\":1,\"824\":1}}],[\"最后输出长度和容量\",{\"1\":{\"365\":1}}],[\"最后主协程退出\",{\"1\":{\"467\":1}}],[\"最后关闭该管道\",{\"1\":{\"465\":1}}],[\"最后看一下版本\",{\"1\":{\"148\":1}}],[\"最后更新\",{\"1\":{\"113\":2,\"114\":1,\"115\":1,\"116\":1,\"117\":1,\"118\":1,\"119\":1,\"120\":1,\"121\":1,\"122\":1,\"123\":1,\"124\":1,\"125\":1,\"126\":1,\"127\":1,\"128\":1,\"129\":1,\"130\":1,\"131\":1,\"132\":1,\"133\":1,\"134\":1,\"135\":1,\"136\":1}}],[\"最后能正常显示版本就说明安装正确\",{\"1\":{\"90\":1}}],[\"最后一位用于表示noscan即是否包含指针\",{\"1\":{\"1114\":1}}],[\"最后一种情况\",{\"1\":{\"1067\":1}}],[\"最后一个溢出桶的overflow指针就是指向头部的哈希桶\",{\"1\":{\"1039\":1}}],[\"最后一个溢出桶指向哈希桶\",{\"1\":{\"1034\":1}}],[\"最后一个就是要编译的包\",{\"1\":{\"8\":1}}],[\"最后一步就是像往常一样进行编译\",{\"1\":{\"11\":1}}],[\"源切片的底层数组空空如也\",{\"1\":{\"1019\":1}}],[\"源码依赖\",{\"1\":{\"1010\":1}}],[\"源文件能够通过编译\",{\"1\":{\"533\":1}}],[\"源文件中\",{\"1\":{\"531\":1}}],[\"源文件编译成可执行的二进制文件\",{\"1\":{\"8\":1}}],[\"源于\",{\"1\":{\"60\":1,\"78\":1}}],[\"源代码嵌在一起的\",{\"1\":{\"1017\":1}}],[\"源代码里if\",{\"1\":{\"598\":1}}],[\"源代码里面可能还在使用\",{\"1\":{\"28\":1}}],[\"源代码仓库可公开访问\",{\"1\":{\"493\":1}}],[\"源代码如下\",{\"1\":{\"484\":1}}],[\"源代码中也有这么一个函数\",{\"1\":{\"112\":1}}],[\"源代码中用到了golang\",{\"1\":{\"16\":1}}],[\"源代码文件\",{\"1\":{\"17\":1}}],[\"源代码\",{\"1\":{\"7\":1}}],[\"源代码格式化\",{\"1\":{\"2\":1}}],[\"对使用者的要求比较高\",{\"1\":{\"1106\":1}}],[\"对管道按照地址大小排序是为了避免死锁\",{\"1\":{\"1067\":1}}],[\"对文件名进行安全转义\",{\"1\":{\"986\":1}}],[\"对文件系统进行了更好的抽象\",{\"1\":{\"121\":1}}],[\"对切片里的每一个用户进行结构体验证\",{\"1\":{\"944\":1}}],[\"对切片进行修改将会直接影响该地址上的数据\",{\"1\":{\"754\":1}}],[\"对不同的操作系统都有适配\",{\"1\":{\"906\":1}}],[\"对需要自定义的用户来说可以更加精细化的操作\",{\"1\":{\"863\":1}}],[\"对address字段建立了唯一索引\",{\"1\":{\"859\":1}}],[\"对表的所有字段进行查询\",{\"1\":{\"852\":1}}],[\"对称加密\",{\"1\":{\"777\":1}}],[\"对称加密算法的效率是最高的\",{\"1\":{\"777\":1}}],[\"对象回收的工作会在标记终止阶段\",{\"1\":{\"1147\":1}}],[\"对象回收\",{\"0\":{\"1147\":1}}],[\"对象图的结构不能被改变\",{\"1\":{\"1134\":1}}],[\"对象与对象之间的引用关系会构成一个图\",{\"1\":{\"1134\":1}}],[\"对象内存分配的入口函数\",{\"1\":{\"1123\":1}}],[\"对象分配\",{\"0\":{\"1123\":1}}],[\"对象数量\",{\"1\":{\"1114\":1}}],[\"对象存放就像是数组一样分布在mspan中\",{\"1\":{\"1114\":1}}],[\"对象存储\",{\"1\":{\"615\":1}}],[\"对象将会通过base64url被编码成字符串\",{\"1\":{\"773\":1}}],[\"对象通过base64url编码成字符串\",{\"1\":{\"772\":1}}],[\"对象为载体在服务双方之间传输信息的方式\",{\"1\":{\"770\":1}}],[\"对象\",{\"1\":{\"764\":1,\"1136\":1}}],[\"对uintptr进行数学运算后再转换为pointer就可以完成指针运算\",{\"1\":{\"751\":1}}],[\"对齐大小通常是以字节为单位的计算机字长与sizeof的最小值\",{\"1\":{\"750\":1}}],[\"对外暴露一个\",{\"1\":{\"741\":1}}],[\"对迭代器做了许多的处理\",{\"1\":{\"588\":1}}],[\"对待其它通用接口也是如此\",{\"1\":{\"574\":1}}],[\"对泛型类型使用类型断言将会无法通过编译\",{\"1\":{\"573\":1}}],[\"对此做了兼容\",{\"1\":{\"531\":1}}],[\"对只写的管道读取数据也是同理\",{\"1\":{\"469\":1}}],[\"对一个已关闭的管道写入数据会导致panic\",{\"1\":{\"468\":1}}],[\"对一个变量进行取地址\",{\"1\":{\"391\":1}}],[\"对其进行了转义\",{\"1\":{\"771\":1}}],[\"对其进行编译\",{\"1\":{\"19\":1}}],[\"对其写入数据会导致该协程阻塞\",{\"1\":{\"468\":1}}],[\"对其写入数据114514\",{\"1\":{\"465\":1}}],[\"对指针类型解引用就能访问到指针所指向的元素\",{\"1\":{\"391\":1}}],[\"对字节切片进行修改不会对原字符串产生任何影响\",{\"1\":{\"376\":1}}],[\"对键名有所限制\",{\"1\":{\"160\":1}}],[\"对值为nil的变量进行操作会引发panic\",{\"1\":{\"135\":1}}],[\"对作者的学习与成长有着非常大的帮助\",{\"1\":{\"97\":1}}],[\"对应变量v和w\",{\"1\":{\"1177\":1}}],[\"对应伪代码\",{\"1\":{\"1144\":1}}],[\"对应``runtime\",{\"1\":{\"1137\":1}}],[\"对应着入口函数也就是用户代码\",{\"1\":{\"1104\":1}}],[\"对应着系统线程\",{\"1\":{\"1104\":1}}],[\"对应着下面的代码\",{\"1\":{\"1042\":1}}],[\"对应着两个函数\",{\"1\":{\"1036\":1}}],[\"对应如下的代码\",{\"1\":{\"1037\":1}}],[\"对应如下代码\",{\"1\":{\"1025\":1,\"1034\":2,\"1037\":1}}],[\"对应代码如下\",{\"1\":{\"1036\":1,\"1042\":1,\"1043\":2}}],[\"对应runtime\",{\"1\":{\"1034\":1}}],[\"对应下面的代码\",{\"1\":{\"1025\":1}}],[\"对应cmd\",{\"1\":{\"1021\":1}}],[\"对应的部分代码如下\",{\"1\":{\"1039\":1}}],[\"对应的代码如下\",{\"1\":{\"1034\":1,\"1040\":2,\"1042\":1}}],[\"对应的接口分别如下\",{\"1\":{\"861\":1}}],[\"对应的\",{\"1\":{\"495\":1,\"1056\":1,\"1097\":1}}],[\"对应的安装包\",{\"1\":{\"140\":1}}],[\"对应\",{\"1\":{\"185\":1,\"197\":1,\"1048\":1}}],[\"对应服务端实现的server\",{\"1\":{\"165\":1}}],[\"对应goenv\",{\"1\":{\"92\":1}}],[\"对应gotmpdir\",{\"1\":{\"92\":1}}],[\"对应gocache\",{\"1\":{\"92\":1}}],[\"对应类型结构如下所示\",{\"1\":{\"34\":1}}],[\"对\",{\"1\":{\"8\":1,\"52\":1,\"65\":1,\"96\":1,\"109\":1,\"117\":1,\"122\":1,\"131\":1,\"383\":1,\"534\":1,\"823\":1}}],[\"对于内存单元而言\",{\"1\":{\"1148\":1}}],[\"对于内存而言四个维度可以分析\",{\"1\":{\"560\":1}}],[\"对于对象回收算法而言\",{\"1\":{\"1147\":1}}],[\"对于屏障技术的应用细节\",{\"1\":{\"1141\":1}}],[\"对于栈和寄存器则不起作用范围内\",{\"1\":{\"1141\":1}}],[\"对于弱三色不变性而言\",{\"1\":{\"1136\":1}}],[\"对于强三色不变性而言\",{\"1\":{\"1136\":1}}],[\"对于第一种情况其实可以接受\",{\"1\":{\"1136\":1}}],[\"对于如今的\",{\"1\":{\"1130\":1}}],[\"对于mheap而言\",{\"1\":{\"1118\":1}}],[\"对于message也是同理\",{\"1\":{\"202\":1}}],[\"对于向mheap申请mspan的过程\",{\"1\":{\"1117\":1}}],[\"对于先前已使用后被释放的内存空间则无法感知\",{\"1\":{\"1111\":1}}],[\"对于findrunnable函数而言\",{\"1\":{\"1104\":1}}],[\"对于开发者来说几乎不需要做什么额外的工作\",{\"1\":{\"1083\":1}}],[\"对于开发者而言也会减少很多心智负担\",{\"1\":{\"562\":1}}],[\"对于开发者而言\",{\"1\":{\"516\":1}}],[\"对于切片\",{\"1\":{\"1070\":1}}],[\"对于切片和map\",{\"1\":{\"725\":1}}],[\"对于理解\",{\"1\":{\"1067\":1}}],[\"对于写操作而言\",{\"1\":{\"1067\":1}}],[\"对于写管道时\",{\"1\":{\"1066\":1}}],[\"对于写入文件的操作标准库同样提供了方便函数\",{\"1\":{\"418\":1}}],[\"对于关闭管道而言\",{\"1\":{\"1061\":1}}],[\"对于读操作而言\",{\"1\":{\"1067\":1}}],[\"对于读取管道时\",{\"1\":{\"1066\":1}}],[\"对于读取操作而言\",{\"1\":{\"465\":1}}],[\"对于读少写多的情况\",{\"1\":{\"1050\":1}}],[\"对于修改\",{\"1\":{\"1038\":1}}],[\"对于修改结构体私有字段而言\",{\"1\":{\"449\":1}}],[\"对于迭代器初始化而言\",{\"1\":{\"1037\":1}}],[\"对于前两种方式而言\",{\"1\":{\"1036\":1}}],[\"对于拉链法而言\",{\"1\":{\"1032\":1}}],[\"对于容量小于\",{\"1\":{\"1025\":1}}],[\"对于临时添加的切片\",{\"1\":{\"1024\":1}}],[\"对于初学者而言更能锻炼能力\",{\"1\":{\"1008\":1}}],[\"对于初学者而言更适合也更应该去学习\",{\"1\":{\"1008\":1}}],[\"对于中间件的支持也非常友好\",{\"1\":{\"992\":1}}],[\"对于原有标准库的\",{\"1\":{\"986\":1}}],[\"对于此的支持也是封装的十分简单\",{\"1\":{\"983\":1}}],[\"对于大多数应用而言\",{\"1\":{\"981\":1}}],[\"对于大指数采用\",{\"1\":{\"698\":2}}],[\"对于其他格式\",{\"1\":{\"975\":1}}],[\"对于其它不怎么常用的可以自行了解\",{\"1\":{\"8\":1}}],[\"对于具有关联关系的实体而言\",{\"1\":{\"899\":1}}],[\"对于多对多关系而言\",{\"1\":{\"896\":1}}],[\"对于多节点的情况下\",{\"1\":{\"143\":1}}],[\"对于外键字段\",{\"1\":{\"891\":1}}],[\"对于in条件\",{\"1\":{\"875\":1}}],[\"对于查询而言\",{\"1\":{\"869\":1}}],[\"对于命名策略\",{\"1\":{\"855\":1}}],[\"对于命令行程序而言\",{\"1\":{\"496\":1}}],[\"对于数据响应提供了丰富的内置支持\",{\"1\":{\"978\":1}}],[\"对于数据库交互这一块\",{\"1\":{\"848\":1}}],[\"对于数组\",{\"1\":{\"433\":1}}],[\"对于没有身份验证或用户登录的系统尤其有用\",{\"1\":{\"758\":1}}],[\"对于嵌套的结构体或\",{\"1\":{\"725\":1}}],[\"对于结构体和\",{\"1\":{\"725\":1}}],[\"对于结构体指针而言\",{\"1\":{\"408\":1}}],[\"对于传入的data\",{\"1\":{\"725\":1}}],[\"对于服务端而言就是\",{\"1\":{\"682\":1}}],[\"对于客户端而言就是\",{\"1\":{\"682\":1}}],[\"对于自定义类型几乎不支持\",{\"1\":{\"580\":1}}],[\"对于非接口类型\",{\"1\":{\"575\":1}}],[\"对于项目而言会使得代码更加优雅可读\",{\"1\":{\"562\":1}}],[\"对于火焰图而言\",{\"1\":{\"560\":1}}],[\"对于图片和源代码而言\",{\"1\":{\"559\":1}}],[\"对于存活对象的内存分配抽样\",{\"1\":{\"557\":1}}],[\"对于基准测试而言\",{\"1\":{\"525\":1}}],[\"对于单元测试而言\",{\"1\":{\"521\":2}}],[\"对于测试函数而言\",{\"1\":{\"520\":1}}],[\"对于不同的测试类型\",{\"1\":{\"517\":1}}],[\"对于不存的键其返回值是对应类型的零值\",{\"1\":{\"383\":1}}],[\"对于私有项目而言\",{\"1\":{\"511\":1}}],[\"对于工程项目而言十分的不友好\",{\"1\":{\"492\":1}}],[\"对于cas而言\",{\"1\":{\"490\":1}}],[\"对于条件变量\",{\"1\":{\"482\":1}}],[\"对于锁而言\",{\"1\":{\"481\":1}}],[\"对于上面的例子\",{\"1\":{\"479\":1}}],[\"对于有缓冲管道而言\",{\"1\":{\"470\":1}}],[\"对于有缓冲管道写入数据时\",{\"1\":{\"467\":1}}],[\"对于有缓冲管道则不必如此\",{\"1\":{\"467\":1}}],[\"对于无缓冲管道而言\",{\"1\":{\"466\":1}}],[\"对于管道而言\",{\"1\":{\"464\":1}}],[\"对于管道的作用如下解释\",{\"1\":{\"463\":1}}],[\"对于较为传统的锁控制\",{\"1\":{\"462\":1}}],[\"对于并发的程序而言\",{\"1\":{\"462\":1}}],[\"对于指针使用elem\",{\"1\":{\"433\":1}}],[\"对于type而言\",{\"1\":{\"432\":1}}],[\"对于接口的简单原理只需要了解到这里就足够满足后续反射的学习\",{\"1\":{\"428\":1}}],[\"对于含有方法集的接口来说\",{\"1\":{\"428\":1}}],[\"对于文件夹而言\",{\"1\":{\"424\":1}}],[\"对于复制文件而言\",{\"1\":{\"419\":1}}],[\"对于os\",{\"1\":{\"417\":1}}],[\"对于常规文件而言\",{\"1\":{\"416\":1}}],[\"对于这种拼写错误\",{\"1\":{\"946\":1}}],[\"对于这种情况\",{\"1\":{\"402\":1}}],[\"对于这两个独立的模块\",{\"1\":{\"513\":1}}],[\"对于这两种类型\",{\"1\":{\"428\":1}}],[\"对于这些预览版本官方会每周发布一个快照版本\",{\"1\":{\"138\":1}}],[\"对于defer直接作用的函数而言\",{\"1\":{\"402\":1}}],[\"对于延迟调用有一些反直觉的细节\",{\"1\":{\"402\":1}}],[\"对于类型相同的参数而言\",{\"1\":{\"396\":1}}],[\"对于每一个种数据结构\",{\"1\":{\"355\":1}}],[\"对于函数外的包级变量则没有这个限制\",{\"1\":{\"329\":1}}],[\"对于生成代码来说\",{\"1\":{\"201\":1}}],[\"对于你自己创建的protobuf目录\",{\"1\":{\"193\":1}}],[\"对于流式\",{\"1\":{\"159\":1,\"162\":2,\"163\":1,\"165\":1}}],[\"对于本地服务\",{\"1\":{\"145\":1}}],[\"对于国内用户\",{\"1\":{\"104\":1}}],[\"对于\",{\"1\":{\"90\":1,\"140\":1,\"143\":2,\"232\":1,\"382\":1,\"490\":1,\"534\":1,\"568\":1,\"643\":1,\"862\":2,\"1032\":1,\"1041\":1}}],[\"对于全部指令\",{\"1\":{\"39\":1}}],[\"对于编译器指令可以执行命令go\",{\"1\":{\"39\":1}}],[\"对于一对多和多对多而言\",{\"1\":{\"898\":1}}],[\"对于一个普通的字符串变量而言\",{\"1\":{\"1054\":1}}],[\"对于一个正常的键值来说tophash的最小值\",{\"1\":{\"1030\":1}}],[\"对于一个\",{\"1\":{\"1030\":1,\"1045\":1}}],[\"对于一个切片而言\",{\"1\":{\"1019\":1}}],[\"对于一个字段有非常多的验证\",{\"1\":{\"948\":1}}],[\"对于一个泛型变量\",{\"1\":{\"577\":1}}],[\"对于一个协程而言\",{\"1\":{\"481\":1}}],[\"对于一个管道而言\",{\"1\":{\"465\":1}}],[\"对于一个软件而言\",{\"1\":{\"38\":1}}],[\"对于一元\",{\"1\":{\"162\":1,\"165\":1}}],[\"对于一些类型需要避免歧义\",{\"1\":{\"595\":1}}],[\"对于一些类型相同的相邻字段\",{\"1\":{\"404\":1}}],[\"对于一些引用类型\",{\"1\":{\"553\":1}}],[\"对于一些十分复杂的任务\",{\"1\":{\"547\":1}}],[\"对于一些十分简单的任务\",{\"1\":{\"547\":1}}],[\"对于一些性能要求更高的场景\",{\"1\":{\"529\":1}}],[\"对于一些读多写少的数据\",{\"1\":{\"481\":1}}],[\"对于一些不支持取消的上下文\",{\"1\":{\"474\":1}}],[\"对于一些不那么常用的不做过多的介绍\",{\"1\":{\"7\":1}}],[\"对于一些代码量不是特别大的\",{\"1\":{\"290\":1}}],[\"对于一些经常被引用的\",{\"1\":{\"114\":1}}],[\"对于一些简单的单文件演示代码\",{\"1\":{\"104\":1}}],[\"对于一些\",{\"1\":{\"8\":1}}],[\"对于一些属于\",{\"1\":{\"4\":1}}],[\"对于平台和架构这些\",{\"1\":{\"12\":1}}],[\"对于学习而言\",{\"1\":{\"0\":1}}],[\"前半部分分配给pollorder数组\",{\"1\":{\"1067\":2}}],[\"前半部分存放的是写管道\",{\"1\":{\"1067\":1}}],[\"前后端分离的趋势愈演愈烈\",{\"1\":{\"1004\":1}}],[\"前端程序员不再只是一个\",{\"1\":{\"1004\":1}}],[\"前提与之同名的成员变量存在\",{\"1\":{\"725\":1}}],[\"前提是能够被\",{\"1\":{\"1012\":1}}],[\"前提是设置engine\",{\"1\":{\"990\":1}}],[\"前提是设置了\",{\"1\":{\"416\":1}}],[\"前提是你将这些路径添加到了环境变量中\",{\"1\":{\"504\":1}}],[\"前提是你得保证它不会发生逃逸\",{\"1\":{\"47\":1}}],[\"前提是装了\",{\"1\":{\"201\":1}}],[\"前提是数组的长度要小于等于切片的长度\",{\"1\":{\"120\":1}}],[\"前缀\",{\"0\":{\"648\":1},\"1\":{\"649\":1,\"1015\":1}}],[\"前缀加上结构体名称\",{\"1\":{\"540\":1}}],[\"前面为了避免干扰就将这部分省掉了\",{\"1\":{\"1106\":1}}],[\"前面已经提到过\",{\"1\":{\"1041\":1}}],[\"前面有很多重复的内容\",{\"1\":{\"1039\":1}}],[\"前面的都是中间件\",{\"1\":{\"995\":1}}],[\"前面经常用到context\",{\"1\":{\"981\":1}}],[\"前面讲到了基本接口就是方法集\",{\"1\":{\"564\":1}}],[\"前面提到了mspan是由若干个页组成\",{\"1\":{\"1115\":1}}],[\"前面提到了通过\",{\"1\":{\"795\":1}}],[\"前面提到了go\",{\"1\":{\"512\":1}}],[\"前面提到过在加锁的时候会将readercount更新为负值\",{\"1\":{\"1159\":1}}],[\"前面提到过写屏障不会应用在栈上\",{\"1\":{\"1142\":1}}],[\"前面提到过它原本是用于进行栈扩容检测的函数\",{\"1\":{\"1106\":1}}],[\"前面提到过\",{\"1\":{\"1043\":1,\"1054\":1,\"1141\":1}}],[\"前面提到过内存的分配是由编译器主导的\",{\"1\":{\"550\":1}}],[\"前面提到过主板变化时要体现在模块名上\",{\"1\":{\"509\":1}}],[\"前面提到过读取管道是有两个返回值的\",{\"1\":{\"470\":1}}],[\"前面提到过字符串有两种字面量表达方式\",{\"1\":{\"374\":1}}],[\"前面提到过包内共享所有变量\",{\"1\":{\"294\":1}}],[\"前面提到过了\",{\"1\":{\"162\":1}}],[\"前\",{\"1\":{\"115\":1}}],[\"前往eliminate\",{\"1\":{\"1141\":1}}],[\"前往the\",{\"1\":{\"1130\":1}}],[\"前往casbin\",{\"1\":{\"764\":1}}],[\"前往cgo\",{\"1\":{\"533\":1,\"545\":1}}],[\"前往pprof\",{\"1\":{\"560\":1}}],[\"前往protobuf\",{\"1\":{\"194\":1}}],[\"前往pre\",{\"1\":{\"138\":1}}],[\"前往内存分配文章了解\",{\"1\":{\"549\":1}}],[\"前往go\",{\"1\":{\"506\":1,\"514\":1}}],[\"前往godebug了解更多细节\",{\"1\":{\"7\":1}}],[\"前往removing\",{\"1\":{\"500\":1}}],[\"前往add\",{\"1\":{\"500\":1}}],[\"前往agents\",{\"1\":{\"141\":1}}],[\"前往标准库\",{\"1\":{\"392\":1}}],[\"前往参考手册\",{\"1\":{\"327\":1}}],[\"前往update\",{\"1\":{\"214\":1}}],[\"前往libraries\",{\"1\":{\"145\":1}}],[\"前往weekly\",{\"1\":{\"138\":1}}],[\"前往准备开始进行入门学习\",{\"1\":{\"96\":1}}],[\"前往命令\",{\"1\":{\"92\":1}}],[\"前往更新日志了解更多关于维护规则以及历史版本的信息\",{\"1\":{\"89\":1}}],[\"前往\",{\"1\":{\"38\":1}}],[\"前者存放有空闲内存的mspan\",{\"1\":{\"1117\":1}}],[\"前者负责找到一个\",{\"1\":{\"1104\":1}}],[\"前者负责初始化操作系统相关的工作\",{\"1\":{\"1089\":1}}],[\"前者负责记录版本\",{\"1\":{\"18\":1}}],[\"前者接收字符串表名\",{\"1\":{\"869\":1}}],[\"前者在语法上是一个指针\",{\"1\":{\"751\":1}}],[\"前者就是安装包\",{\"1\":{\"90\":1}}],[\"前者是简单\",{\"1\":{\"984\":1}}],[\"前者是寻找前缀\",{\"1\":{\"711\":1}}],[\"前者是根据空格来分割字符串\",{\"1\":{\"710\":1}}],[\"前者是指定一个具体的超时时间\",{\"1\":{\"478\":1}}],[\"前者是后者的一部分\",{\"1\":{\"14\":1}}],[\"前者是老牌的\",{\"1\":{\"8\":1}}],[\"前者只是负责编译\",{\"1\":{\"14\":1}}],[\"所谓三色\",{\"1\":{\"1135\":1}}],[\"所谓流式就是就是在一个连接中长期的相互发送数据\",{\"1\":{\"196\":1}}],[\"所需的资源也会更少\",{\"1\":{\"1085\":1}}],[\"所做的事与之前rawstring函数类似\",{\"1\":{\"1054\":1}}],[\"所做的事情仅仅只是将所有的请求转发给\",{\"1\":{\"142\":1}}],[\"所在的哈希桶指针\",{\"1\":{\"1036\":1}}],[\"所代表的根对象就是其自身\",{\"1\":{\"725\":1}}],[\"所不能满足的\",{\"1\":{\"548\":1}}],[\"所指定的服务器\",{\"1\":{\"510\":1}}],[\"所提供的锁都是非递归锁\",{\"1\":{\"479\":1}}],[\"所以理论上来说一个互斥锁最多可以被2^29+1个协程同时使用\",{\"1\":{\"1151\":1}}],[\"所以理解起来不需要花费太多力气\",{\"1\":{\"550\":1}}],[\"所以大部分人可能都从来没见过它\",{\"1\":{\"1150\":1}}],[\"所以大多数情况下\",{\"1\":{\"885\":1}}],[\"所以大多数情况会将其作为函数的返回值来返回\",{\"1\":{\"598\":1}}],[\"所以工作量会翻倍\",{\"1\":{\"1145\":1}}],[\"所以此时不需要插入写屏障\",{\"1\":{\"1144\":1}}],[\"所以此处应该抛出panic\",{\"1\":{\"605\":1}}],[\"所以协程栈只有两种状态\",{\"1\":{\"1144\":1}}],[\"所以伪代码中的current\",{\"1\":{\"1144\":1}}],[\"所以为了方便后续的理解\",{\"1\":{\"1143\":1}}],[\"所以为了确保栈对象的正确性\",{\"1\":{\"1142\":1}}],[\"所以为什么需要泛型\",{\"1\":{\"571\":1}}],[\"所以拦截它们的屏障被统称为写屏障\",{\"1\":{\"1141\":1}}],[\"所以标记工作是并发进行的\",{\"1\":{\"1138\":1}}],[\"所以要将整个程序停止\",{\"1\":{\"1134\":1}}],[\"所以要详细讲一下细节的配置\",{\"1\":{\"839\":1}}],[\"所以新生代对象大多数会被栈直接回收\",{\"1\":{\"1130\":1}}],[\"所以新创建的哈希桶容量也不会有变化\",{\"1\":{\"1043\":1}}],[\"所以能容纳的元素数量也是固定的\",{\"1\":{\"1114\":1}}],[\"所以能够访问到的方法只有jackup\",{\"1\":{\"567\":1}}],[\"所以线性分配并不是\",{\"1\":{\"1111\":1}}],[\"所以交替执行\",{\"1\":{\"1105\":1}}],[\"所以交集就是个空集\",{\"1\":{\"574\":1}}],[\"所以栈扩容检查的时机也是一个协程抢占点\",{\"1\":{\"1101\":1}}],[\"所以创建一个协程的成本非常低\",{\"1\":{\"1101\":1}}],[\"所以恢复现场的时候是回到了mstar0函数\",{\"1\":{\"1092\":1}}],[\"所以真正能够用于执行任务的线程数量就是gomaxprocs个\",{\"1\":{\"1085\":1}}],[\"所以后来\",{\"1\":{\"1076\":1}}],[\"所以后续在发生错误时\",{\"1\":{\"952\":1}}],[\"所以还是会造成性能损耗\",{\"1\":{\"1076\":1}}],[\"所以defer实际上是与协程直接关联的\",{\"1\":{\"1073\":1}}],[\"所以编译器会在调用完selectgo函数后同时使用if语句来判断轮到哪一个管道被执行\",{\"1\":{\"1067\":1}}],[\"所以编译器就将其分配到了堆上\",{\"1\":{\"550\":1}}],[\"所以编译器就会认为dog\",{\"1\":{\"414\":1}}],[\"所以先建议阅读chan这篇文章\",{\"1\":{\"1063\":1}}],[\"所以写方案可以直接放弃\",{\"1\":{\"1062\":1}}],[\"所以写好测试非常有必要\",{\"1\":{\"516\":1}}],[\"所以数据就直接发送给了接收方\",{\"1\":{\"1059\":1}}],[\"所以sync\",{\"1\":{\"1050\":1}}],[\"所以多个协程访问时也不会有安全问题\",{\"1\":{\"1045\":1}}],[\"所以其实并不是扩容操作\",{\"1\":{\"1043\":1}}],[\"所以其flat指标是100\",{\"1\":{\"559\":1}}],[\"所以其flat的指标是\",{\"1\":{\"559\":1}}],[\"所以屏蔽了很多跟扩容有关内容\",{\"1\":{\"1041\":1}}],[\"所以预计的最大内存占用就是元素数量乘以对应类型的内存占用大小\",{\"1\":{\"1034\":1}}],[\"所以该函数的作用就是计算元素数量除以桶的数量值是否大于负载因子\",{\"1\":{\"1032\":1}}],[\"所以该示例输出如下\",{\"1\":{\"467\":1}}],[\"所以化简一下就能得到\",{\"1\":{\"1032\":1}}],[\"所以性能就越差\",{\"1\":{\"1032\":1}}],[\"所以性能上会有一定的损失\",{\"1\":{\"810\":1}}],[\"所以阅读本文需要unsafe标准库的知识\",{\"1\":{\"1029\":1}}],[\"所以修改切片中的数据也会影响到数组的数据\",{\"1\":{\"1020\":1}}],[\"所以参数s实际上源切片结构体的一个拷贝\",{\"1\":{\"1019\":1}}],[\"所以复制切片的时候应该使用copy函数\",{\"1\":{\"1019\":1}}],[\"所以当使用\",{\"1\":{\"974\":1}}],[\"所以必要的时候可以选择分批次创建\",{\"1\":{\"866\":1}}],[\"所以必须要为其分配内存\",{\"1\":{\"382\":1}}],[\"所以必须要单独初始化\",{\"1\":{\"370\":1}}],[\"所以必须使用强制类型转换\",{\"1\":{\"332\":1}}],[\"所以推荐使用createtable方法来创建\",{\"1\":{\"864\":1}}],[\"所以计算速度稍微快一点\",{\"1\":{\"777\":1}}],[\"所以一些游戏服务器应用较多\",{\"1\":{\"803\":1}}],[\"所以一旦\",{\"1\":{\"774\":1}}],[\"所以一般情况下都是尽量采用结构体切片的形式\",{\"1\":{\"524\":1}}],[\"所以市面上开源的权限框架成为了他们的首选\",{\"1\":{\"758\":1}}],[\"所以如果你在这里尝试修改字符串底层的数据\",{\"1\":{\"755\":1}}],[\"所以如果你想要分享你编写的库\",{\"1\":{\"493\":1}}],[\"所以单独拎出来说\",{\"1\":{\"1156\":1}}],[\"所以单独拿出来\",{\"1\":{\"755\":1}}],[\"所以单向通道的语法如下\",{\"1\":{\"469\":1}}],[\"所以x必须是一个结构体字段\",{\"1\":{\"749\":1}}],[\"所以实际的键值可能已经不在原来的位置了\",{\"1\":{\"1037\":1}}],[\"所以实际上defer传入的函数是没有参数也没有返回值的\",{\"1\":{\"1074\":1}}],[\"所以实际上\",{\"1\":{\"1030\":1}}],[\"所以实际上是占用\",{\"1\":{\"410\":1}}],[\"所以实际输出为\",{\"1\":{\"725\":1}}],[\"所以程序就直接退出运行\",{\"1\":{\"606\":1}}],[\"所以error实际上\",{\"1\":{\"603\":1}}],[\"所以只能使用fmt\",{\"1\":{\"602\":1}}],[\"所以很多开源库包括官方库都会选择自定义\",{\"1\":{\"601\":1}}],[\"所以无法使用类型转换\",{\"1\":{\"596\":1}}],[\"所以下例自然也就可以通过编译\",{\"1\":{\"594\":1}}],[\"所以下面会简单的概括一些常用的标准库的作用\",{\"1\":{\"616\":1}}],[\"所以下面的代码无法通过编译\",{\"1\":{\"591\":1}}],[\"所以下面的代码完全无法通过编译\",{\"1\":{\"591\":1}}],[\"所以下面这种写法是完全错误的\",{\"1\":{\"193\":1}}],[\"所以输出也不固定\",{\"1\":{\"585\":2}}],[\"所以输出如下\",{\"1\":{\"470\":1,\"480\":1,\"607\":2}}],[\"所以类型约束为any\",{\"1\":{\"577\":1,\"578\":1}}],[\"所以基本上都是单独使用\",{\"1\":{\"575\":1}}],[\"所以又间接的并入了自身\",{\"1\":{\"575\":1}}],[\"所以并不是所有的协程都能够进入自旋状态\",{\"1\":{\"1153\":1}}],[\"所以并不建议保存pointer转换为uintptr后的值\",{\"1\":{\"751\":1}}],[\"所以并不建议将网络链接\",{\"1\":{\"485\":1}}],[\"所以并不推荐\",{\"1\":{\"573\":1}}],[\"所以泛型的写法如下\",{\"1\":{\"571\":1}}],[\"所以any接口可以保存任何类型的值\",{\"1\":{\"568\":1}}],[\"所以man也实现了接口person\",{\"1\":{\"567\":1}}],[\"所以逃逸分析也是由编译器来完成\",{\"1\":{\"550\":1}}],[\"所以是静态分析的一种\",{\"1\":{\"549\":1}}],[\"所以再次修改待测源代码\",{\"1\":{\"527\":1}}],[\"所以再安装\",{\"1\":{\"200\":1}}],[\"所以通过模糊测试就发现了这个问题所在\",{\"1\":{\"527\":1}}],[\"所以将待测试的源代码修改为如下\",{\"1\":{\"527\":1}}],[\"所以将其修改为表格风格\",{\"1\":{\"524\":1}}],[\"所以将读锁作为互斥锁传入\",{\"1\":{\"482\":1}}],[\"所以称为table\",{\"1\":{\"524\":1}}],[\"所以称为伪版本\",{\"1\":{\"509\":1}}],[\"所以对于一个\",{\"1\":{\"1030\":1}}],[\"所以对于当前项目而言就是间接引用\",{\"1\":{\"509\":1}}],[\"所以对于了解和学习其内部机制也十分的方便\",{\"1\":{\"8\":1}}],[\"所以使用comparable接口\",{\"1\":{\"572\":1}}],[\"所以使用者并不能区分主版本变化所带来的不兼容变动\",{\"1\":{\"509\":1}}],[\"所以使用int32来存储是理所当然\",{\"1\":{\"380\":1}}],[\"所以go\",{\"1\":{\"509\":1}}],[\"所以我们大多数会用一个第三方开源库etree来解析\",{\"1\":{\"620\":1}}],[\"所以我们需要修改默认的模块代理地址\",{\"1\":{\"501\":1}}],[\"所以我们只能在它的函数体后紧跟括号来进行调用\",{\"1\":{\"398\":1}}],[\"所以完全可以考虑无锁化实现\",{\"1\":{\"490\":1}}],[\"所以完全不支持自定义\",{\"1\":{\"308\":1}}],[\"所以执行结果要么成功要么失败\",{\"1\":{\"487\":1}}],[\"所以new函数的并发安全性要由使用者自己来维护\",{\"1\":{\"485\":1}}],[\"所以有些人可能会误称为条件锁\",{\"1\":{\"482\":1}}],[\"所以重复加锁或重复解锁都会导致fatal\",{\"1\":{\"479\":1}}],[\"所以最后看来\",{\"1\":{\"1125\":1}}],[\"所以最后它们两个指向的就是不同的数组了\",{\"1\":{\"1019\":1}}],[\"所以最后的输出如下\",{\"1\":{\"482\":1}}],[\"所以最好避免此种情况的发生\",{\"1\":{\"478\":1}}],[\"所以最终输出为default分支的执行结果\",{\"1\":{\"471\":1}}],[\"所以会倾向于更相信go\",{\"1\":{\"510\":1}}],[\"所以会一直阻塞等待直到有case可用\",{\"1\":{\"471\":1}}],[\"所以会将整个数组拷贝\",{\"1\":{\"359\":1}}],[\"所以应该在正确的地方使用泛型\",{\"1\":{\"571\":1}}],[\"所以应该对数组头部元素取址\",{\"1\":{\"539\":1}}],[\"所以应该使用指针来进行传递\",{\"1\":{\"472\":1}}],[\"所以应该管道在写入完毕后将其关闭\",{\"1\":{\"470\":1}}],[\"所以应当尽量避免使用\",{\"1\":{\"384\":1}}],[\"所以可以随意的修改\",{\"1\":{\"1054\":1}}],[\"所以可以将其单独放到新协程中\",{\"1\":{\"471\":1}}],[\"所以可以直接使用\",{\"1\":{\"426\":1}}],[\"所以可以是\",{\"1\":{\"23\":1}}],[\"所以需要内存屏障\",{\"1\":{\"1129\":1}}],[\"所以需要在编译时根据类型来推导占用的内存空间\",{\"1\":{\"1030\":1}}],[\"所以需要用到strconv下的\",{\"1\":{\"701\":1}}],[\"所以需要使用\",{\"1\":{\"518\":1}}],[\"所以需要手动的去判断文件是否存在\",{\"1\":{\"416\":1}}],[\"所以需要一个统一的认证与授权服务\",{\"1\":{\"172\":1}}],[\"所以自然会返回一个错误\",{\"1\":{\"416\":1}}],[\"所以第二种解决办法就是赋值dog指针给变量an\",{\"1\":{\"414\":1}}],[\"所以方法的接收者为指针时\",{\"1\":{\"414\":1}}],[\"所以仅做了解即可\",{\"1\":{\"410\":1}}],[\"所以你可能会看到如下的目录结构\",{\"1\":{\"510\":1}}],[\"所以你可以直接将字符串写入到标准输出中\",{\"1\":{\"337\":1}}],[\"所以你可以看到go\",{\"1\":{\"18\":1}}],[\"所以你只需要正常使用\",{\"1\":{\"493\":1}}],[\"所以你无法为同一个函数或方法定义不同的参数\",{\"1\":{\"405\":1}}],[\"所以就需要释放信号量\",{\"1\":{\"1177\":1}}],[\"所以就需要控制可见性\",{\"1\":{\"294\":1}}],[\"所以就有了第二个回收算法\",{\"1\":{\"1147\":1}}],[\"所以就有了第二种解决办法\",{\"1\":{\"574\":1}}],[\"所以就不会有第二条哈希记录\",{\"1\":{\"510\":1}}],[\"所以就可能会看到以下结果\",{\"1\":{\"380\":1}}],[\"所以结果恰巧每一个字节对应一个字符\",{\"1\":{\"380\":1}}],[\"所以恰好与字面量长度相等\",{\"1\":{\"377\":1}}],[\"所以字符串的访问形式跟数组切片完全一致\",{\"1\":{\"375\":1}}],[\"所以没有扩容\",{\"1\":{\"371\":1}}],[\"所以代码要更简洁些\",{\"1\":{\"349\":1}}],[\"所以代码应该这样分开写\",{\"1\":{\"331\":1}}],[\"所以它始终都是白色对象\",{\"1\":{\"1136\":1}}],[\"所以它的管理成本要比线程低很多\",{\"1\":{\"1085\":1}}],[\"所以它实际上是一个单向环形链表\",{\"1\":{\"1039\":1}}],[\"所以它前后的空白符都会被消除\",{\"1\":{\"725\":1}}],[\"所以它们之间可以进行显式的类型转换\",{\"1\":{\"595\":1}}],[\"所以它们无法被回收\",{\"1\":{\"399\":1}}],[\"所以它对元素有一个要求\",{\"1\":{\"578\":1}}],[\"所以它输出的内容可读性比较高\",{\"1\":{\"339\":1}}],[\"所以它就是默认的\",{\"1\":{\"143\":1}}],[\"所以这个返回值是不可信的\",{\"1\":{\"1062\":1}}],[\"所以这里不再赘述如何使用\",{\"1\":{\"925\":1}}],[\"所以这也是为什么必须得传入指针\",{\"1\":{\"866\":1}}],[\"所以这三个类型可以不用我们自己实现直接使用即可\",{\"1\":{\"683\":1}}],[\"所以这些枚举值也只能用字符串和数字来进行表示\",{\"1\":{\"326\":1}}],[\"所以这就是为什么服务名对应的是一个切片\",{\"1\":{\"175\":1}}],[\"所以像下面的代码是无法通过编译的\",{\"1\":{\"313\":1}}],[\"所以在混合写屏障下依然会有局部的\",{\"1\":{\"1144\":1}}],[\"所以在此之前需要进行准备工作\",{\"1\":{\"1097\":1}}],[\"所以在平时使用的过程中\",{\"1\":{\"1070\":1}}],[\"所以在遍历过程中添加的元素和桶都不会被遍历到\",{\"1\":{\"1037\":1}}],[\"所以在使用的同时lancet对于刚学习go的人来说是一个很好的学习对象\",{\"1\":{\"924\":1}}],[\"所以在判断错误时\",{\"1\":{\"603\":1}}],[\"所以在堆的初始化时\",{\"1\":{\"578\":1}}],[\"所以在\",{\"1\":{\"567\":1,\"1103\":1}}],[\"所以在本文也只会介绍\",{\"1\":{\"492\":1}}],[\"所以在一些结构中可以看到这样的嵌入字段\",{\"1\":{\"1129\":1}}],[\"所以在一些实现中失败达到了一定次数可能会放弃操作\",{\"1\":{\"490\":1}}],[\"所以在一个项目中\",{\"1\":{\"193\":1}}],[\"所以在操作时会加锁\",{\"1\":{\"490\":1}}],[\"所以在编写代码时应该避免上述情况\",{\"1\":{\"479\":1}}],[\"所以在写入文件时会将数据添加到文件尾部\",{\"1\":{\"418\":1}}],[\"所以在这一块追求个性显然是一个不太明智的选择\",{\"1\":{\"308\":1}}],[\"所以不需要二次扫描栈空间\",{\"1\":{\"1143\":1}}],[\"所以不需要额外下载\",{\"1\":{\"558\":1}}],[\"所以不要把敏感信息存放在\",{\"1\":{\"773\":1}}],[\"所以不会临时存放任何数据\",{\"1\":{\"466\":1}}],[\"所以不会为其分配内存\",{\"1\":{\"364\":1}}],[\"所以不用再去纠结i++和++i这样的问题\",{\"1\":{\"299\":1}}],[\"所以不建议分享敏感代码\",{\"1\":{\"104\":1}}],[\"所以本文采用\",{\"1\":{\"231\":1}}],[\"所以本文也会使用\",{\"1\":{\"147\":1}}],[\"所以省略掉了前缀的\",{\"1\":{\"174\":1}}],[\"所以都是在同一个网段中\",{\"1\":{\"144\":1}}],[\"所以\",{\"1\":{\"142\":1,\"309\":1,\"364\":1,\"496\":1,\"543\":1,\"554\":1,\"1036\":1,\"1042\":1,\"1062\":1,\"1070\":1,\"1101\":1,\"1114\":1,\"1123\":1}}],[\"所以十分建议使用vet命令来检查你的代码\",{\"1\":{\"37\":1}}],[\"所以也被称为\",{\"1\":{\"1083\":1}}],[\"所以也不存在什么序列化格式化的问题了\",{\"1\":{\"622\":1}}],[\"所以也算实现\",{\"1\":{\"567\":1}}],[\"所以也可以使用\",{\"1\":{\"388\":1}}],[\"所以也可以作为fs对象来进行传递\",{\"1\":{\"41\":1}}],[\"所以也是无序的\",{\"1\":{\"381\":1}}],[\"所以也就可以进行运算\",{\"1\":{\"594\":1}}],[\"所以也就会安装失败\",{\"1\":{\"19\":1}}],[\"所以也就不支持调试\",{\"1\":{\"13\":1}}],[\"所以也方便在运行时获取\",{\"1\":{\"10\":1}}],[\"所有根对象都是灰色\",{\"1\":{\"1135\":1}}],[\"所有小于\",{\"1\":{\"1124\":1}}],[\"所有值都以打表的形式存放于runtime\",{\"1\":{\"1114\":1}}],[\"所有值的迭代器\",{\"1\":{\"585\":1}}],[\"所有字符串都复制完毕后\",{\"1\":{\"1053\":1}}],[\"所有字段都完全相等\",{\"1\":{\"460\":1}}],[\"所有桶都找完了\",{\"1\":{\"1038\":1}}],[\"所有标签对应的验证函数都可以在baked\",{\"1\":{\"930\":1}}],[\"所有school结构体都是零值\",{\"1\":{\"899\":1}}],[\"所有数据库都支持\",{\"1\":{\"862\":1}}],[\"所有结果是根据年龄的大小来排序\",{\"1\":{\"688\":1}}],[\"所有变量的类型早在编译期间就已经确定了\",{\"1\":{\"591\":1}}],[\"所有变量的类型都会在编译期确定好\",{\"1\":{\"590\":1}}],[\"所有键的迭代器\",{\"1\":{\"585\":1}}],[\"所有类型都是any接口的的实现\",{\"1\":{\"568\":1}}],[\"所有管道都不可用\",{\"1\":{\"471\":1}}],[\"所有关于索引操作的\",{\"1\":{\"206\":1}}],[\"所有节点在\",{\"1\":{\"143\":1}}],[\"所有的一级子对象标灰\",{\"1\":{\"1143\":1}}],[\"所有的mcentral\",{\"1\":{\"1118\":1}}],[\"所有的协程在进行函数调用时都可能会进入该函数进行抢占检测\",{\"1\":{\"1106\":1}}],[\"所有的模型在使用时都要确保能被\",{\"1\":{\"1014\":1}}],[\"所有的接口请求都要经过中间件\",{\"1\":{\"992\":1}}],[\"所有的字符串操作都是建立在\",{\"1\":{\"702\":1}}],[\"所有的原子类型都不应该复制值\",{\"1\":{\"491\":1}}],[\"所有的数据等正常添加进切片\",{\"1\":{\"484\":1}}],[\"所有的数据都读完了\",{\"1\":{\"467\":1}}],[\"所有的数据都发送完毕\",{\"1\":{\"467\":1}}],[\"所有的节点都会感知到此变化\",{\"1\":{\"143\":1}}],[\"所有的\",{\"1\":{\"143\":1}}],[\"所有的版本都被称为预览版本\",{\"1\":{\"138\":1}}],[\"所有指令类型总共分为两种\",{\"1\":{\"39\":1}}],[\"所有模块的go\",{\"1\":{\"35\":1}}],[\"所有人代码风格最好都是一致的\",{\"1\":{\"17\":1}}],[\"所有后缀为corp\",{\"1\":{\"7\":1}}],[\"所有环境变量的值\",{\"1\":{\"7\":1}}],[\"所有内容参考自官方文档\",{\"1\":{\"2\":1}}],[\"并等待它们运行完毕\",{\"1\":{\"1175\":1}}],[\"并传入互斥锁\",{\"1\":{\"1165\":1}}],[\"并为其分配\",{\"1\":{\"1095\":1}}],[\"并为你的特定版本打上符合标准的\",{\"1\":{\"493\":1}}],[\"并由runtime\",{\"1\":{\"1092\":1,\"1101\":1}}],[\"并最终被错误的清理掉\",{\"1\":{\"1136\":1}}],[\"并最终返回链表的头结点\",{\"1\":{\"1089\":1}}],[\"并最终唤醒接收方协程\",{\"1\":{\"1067\":1}}],[\"并判断是否需要进行垃圾回收\",{\"1\":{\"1082\":1}}],[\"并作出相应的处理\",{\"1\":{\"1082\":1}}],[\"并作为参数传递了fmt\",{\"1\":{\"402\":1}}],[\"并配合defer使用\",{\"1\":{\"1077\":1}}],[\"并进入永久阻塞\",{\"1\":{\"1066\":1}}],[\"并进行数据渲染\",{\"1\":{\"981\":1}}],[\"并检测管道是否关闭\",{\"1\":{\"1059\":1}}],[\"并对每一个键值对调用回调函数\",{\"1\":{\"1049\":1}}],[\"并对其修改的例子\",{\"1\":{\"543\":1}}],[\"并记录一次\",{\"1\":{\"1046\":1}}],[\"并更新hmap的一些状态\",{\"1\":{\"1042\":1}}],[\"并重新分配新的桶\",{\"1\":{\"1040\":1}}],[\"并防止\",{\"1\":{\"1036\":1}}],[\"并计算出一个随机的哈希种子\",{\"1\":{\"1034\":1}}],[\"并再次计算新容量\",{\"1\":{\"1025\":1}}],[\"并执行\",{\"1\":{\"995\":1}}],[\"并\",{\"1\":{\"963\":1}}],[\"并动手敲了代码\",{\"1\":{\"903\":1}}],[\"并根据映射函数修改字符串\",{\"1\":{\"713\":1}}],[\"并集\",{\"1\":{\"574\":2}}],[\"并指明了起重机应该有起重和吊货的功能\",{\"1\":{\"567\":1}}],[\"并注册到了默认路由中\",{\"1\":{\"557\":1}}],[\"并使用gp\",{\"1\":{\"1075\":1}}],[\"并使用define定义嵌入的内容\",{\"1\":{\"735\":1}}],[\"并使用\",{\"1\":{\"545\":1}}],[\"并使用于各种语言\",{\"1\":{\"180\":1}}],[\"并向go\",{\"1\":{\"510\":1}}],[\"并赋值给count\",{\"1\":{\"479\":1}}],[\"并发支持几乎已经成为了一个现代语言的标配\",{\"1\":{\"1084\":1}}],[\"并发读写\",{\"1\":{\"1036\":1}}],[\"并发操作包\",{\"1\":{\"616\":1}}],[\"并发安全\",{\"1\":{\"485\":1}}],[\"并发安全的分片\",{\"1\":{\"58\":1}}],[\"并发\",{\"0\":{\"461\":1}}],[\"并获取返回值\",{\"1\":{\"452\":1}}],[\"并没有存放在环形队列中\",{\"1\":{\"1059\":1}}],[\"并没有类似runtime\",{\"1\":{\"1024\":1}}],[\"并没有强制使用某一种规范\",{\"1\":{\"1008\":1}}],[\"并没有具体的实现\",{\"1\":{\"566\":1}}],[\"并没有一个公共的依赖仓库\",{\"1\":{\"509\":1}}],[\"并没有被修改成\",{\"1\":{\"413\":1}}],[\"并没有必要的理由去这样做\",{\"1\":{\"410\":1}}],[\"并非单独分配的栈空间\",{\"1\":{\"1089\":1}}],[\"并非指\",{\"1\":{\"1085\":1}}],[\"并非具体的策略定义\",{\"1\":{\"760\":1}}],[\"并非是一个传统\",{\"1\":{\"403\":1}}],[\"并非从左到右计算\",{\"1\":{\"331\":1}}],[\"并非覆盖到原文件\",{\"1\":{\"17\":1}}],[\"并提示如下错误\",{\"1\":{\"535\":1}}],[\"并提供多种语言的\",{\"1\":{\"239\":1}}],[\"并提高了代码的健壮性\",{\"1\":{\"122\":1}}],[\"并将\",{\"1\":{\"1038\":1}}],[\"并将结果存入上下文\",{\"1\":{\"975\":1}}],[\"并将结果映射到结构体中\",{\"1\":{\"234\":1}}],[\"并将值赋值给传入的err\",{\"1\":{\"603\":1}}],[\"并将其标记为活跃对象\",{\"1\":{\"1134\":1}}],[\"并将其转换为了\",{\"1\":{\"536\":1}}],[\"并将其替换为新的\",{\"1\":{\"16\":1}}],[\"并返回元素指针\",{\"1\":{\"1038\":2}}],[\"并返回删除后的结果\",{\"1\":{\"708\":1}}],[\"并返回其原有的值\",{\"1\":{\"486\":1}}],[\"并返回一个对应类型的指针\",{\"1\":{\"391\":1}}],[\"并返回结果\",{\"1\":{\"209\":1}}],[\"并返回给客户端消息发送条数\",{\"1\":{\"158\":1}}],[\"并轻松缩放规模\",{\"1\":{\"203\":1}}],[\"并在条件满足时被唤醒\",{\"1\":{\"1164\":1}}],[\"并在后续的更新中不断完善\",{\"1\":{\"492\":1}}],[\"并在编译时指定其作为扫描路径\",{\"1\":{\"193\":1}}],[\"并在以下几种情况发送给客户端\",{\"1\":{\"162\":1}}],[\"并通知其他节点自己将要退出\",{\"1\":{\"143\":1}}],[\"并通过\",{\"1\":{\"41\":1,\"727\":1}}],[\"并输出结果\",{\"1\":{\"38\":1}}],[\"并以非正常状态结束命令\",{\"1\":{\"29\":1}}],[\"并不负责管理这些页\",{\"1\":{\"1115\":1}}],[\"并不影响理解\",{\"1\":{\"1052\":1}}],[\"并不影响建筑进度\",{\"1\":{\"567\":1}}],[\"并不用复制所有数据\",{\"1\":{\"1019\":1}}],[\"并不足以投入使用\",{\"1\":{\"839\":1}}],[\"并不支持联合体\",{\"1\":{\"541\":1}}],[\"并不支持函数与方法重载\",{\"1\":{\"405\":1}}],[\"并不知道该在什么时候关闭管道\",{\"1\":{\"470\":1}}],[\"并不想读取该文件\",{\"1\":{\"416\":1}}],[\"并不会直接返回\",{\"1\":{\"1060\":1}}],[\"并不会直接把大写字母当作存放路径\",{\"1\":{\"509\":1}}],[\"并不会由runtime\",{\"1\":{\"1053\":1}}],[\"并不会使用这个函数来计算哈希\",{\"1\":{\"1033\":1}}],[\"并不会一个个去添加源切片的元素\",{\"1\":{\"1024\":1}}],[\"并不会删除实体记录\",{\"1\":{\"898\":1}}],[\"并不会调用这个\",{\"1\":{\"829\":1}}],[\"并不会\",{\"1\":{\"553\":1}}],[\"并不会再次执行已经成功通过的测试用例\",{\"1\":{\"518\":1}}],[\"并不会导致阻塞\",{\"1\":{\"471\":1}}],[\"并不会导致本次\",{\"1\":{\"165\":1}}],[\"并不会像例子中那样直观\",{\"1\":{\"468\":1}}],[\"并不会对方法外的值造成任何影响\",{\"1\":{\"413\":1}}],[\"并不代表假值\",{\"1\":{\"315\":1}}],[\"并不了解\",{\"1\":{\"203\":1}}],[\"并不能拦截到客户端流对象每一次收发消息的时候\",{\"1\":{\"166\":1}}],[\"并不能直接获取\",{\"1\":{\"163\":1}}],[\"并不像\",{\"1\":{\"1104\":1}}],[\"并不像一元\",{\"1\":{\"158\":1}}],[\"并不像go\",{\"1\":{\"15\":1}}],[\"并不是我们传入的锁\",{\"1\":{\"1166\":1}}],[\"并不是说互斥锁是饥饿状态\",{\"1\":{\"1151\":1}}],[\"并不是说分读锁和写锁就有两个锁\",{\"1\":{\"481\":1}}],[\"并不是创建了一个新的类型\",{\"1\":{\"594\":1}}],[\"并不是animal的实现\",{\"1\":{\"414\":1}}],[\"并不是一个并发安全的数据结构\",{\"1\":{\"389\":1}}],[\"并不是一个命令行工具\",{\"1\":{\"19\":1}}],[\"并不是指向头部元素的指针\",{\"1\":{\"359\":1}}],[\"并不是指的是垃圾回收的意思\",{\"1\":{\"8\":1}}],[\"并不是\",{\"1\":{\"218\":1,\"553\":1}}],[\"并不是传统的键值类型\",{\"1\":{\"187\":1}}],[\"并不是所有的\",{\"1\":{\"169\":1}}],[\"并不需要下载二进制文件\",{\"1\":{\"19\":1}}],[\"并且锁的状态没有被及时更新到全局内存中\",{\"1\":{\"1153\":1}}],[\"并且每一次都会+2\",{\"1\":{\"1148\":1}}],[\"并且由spans记录着每一个页由哪个mspan使用\",{\"1\":{\"1115\":1}}],[\"并且由mspan\",{\"1\":{\"1114\":1}}],[\"并且由于内存地址是连续的\",{\"1\":{\"1103\":1}}],[\"并且由于它实现了io\",{\"1\":{\"41\":1}}],[\"并且一定会返回一个可用的\",{\"1\":{\"1104\":1}}],[\"并且正在执行用户代码\",{\"1\":{\"1088\":1}}],[\"并且随时可用\",{\"1\":{\"1087\":1}}],[\"并且类型也为nil\",{\"1\":{\"1070\":1}}],[\"并且提示如下信息\",{\"1\":{\"1070\":1}}],[\"并且环形队列的内存与管道的内存是连续的\",{\"1\":{\"1058\":1}}],[\"并且同时并发遍历写入元素\",{\"1\":{\"1037\":1}}],[\"并且已知\",{\"1\":{\"1032\":1}}],[\"并且其对应的\",{\"1\":{\"949\":1}}],[\"并且其参数和返回值都得是\",{\"1\":{\"533\":1}}],[\"并且配有完整的代码示例\",{\"1\":{\"925\":1}}],[\"并且该元素后面也没有可用的键值了\",{\"1\":{\"1030\":1}}],[\"并且该工具还支持获取\",{\"1\":{\"904\":1}}],[\"并且该修改可能会被误提交到远程仓库中\",{\"1\":{\"512\":1}}],[\"并且也会将所有的关联关系顺带都加载了\",{\"1\":{\"899\":1}}],[\"并且也要在作用域内才能使用\",{\"1\":{\"727\":1}}],[\"并且当结构体字段为零值时\",{\"1\":{\"886\":1}}],[\"并且当任意一个节点加入当前数据中心时\",{\"1\":{\"143\":1}}],[\"并且大多数情况下不需要自己去手写\",{\"1\":{\"849\":1}}],[\"并且大多数时候也不是给人类阅读的\",{\"1\":{\"27\":1}}],[\"并且很多情况还是需要自己手写\",{\"1\":{\"849\":1}}],[\"并且笔者也是\",{\"1\":{\"848\":1}}],[\"并且docker本身也支持http进行交互\",{\"1\":{\"800\":1}}],[\"并且具有以下特色\",{\"1\":{\"788\":1}}],[\"并且可以在特定条件满足时控制协程的执行顺序\",{\"1\":{\"1170\":1}}],[\"并且可以在运行时动态调整\",{\"1\":{\"1085\":1}}],[\"并且可以和其他标签一起使用\",{\"1\":{\"862\":1}}],[\"并且可以简单表达清单\",{\"1\":{\"621\":1}}],[\"并且可能上游有很多服务\",{\"1\":{\"169\":1}}],[\"并且动手敲了代码\",{\"1\":{\"609\":1}}],[\"并且执行当前函数的善后工作\",{\"1\":{\"606\":1}}],[\"并且上游函数的defer语句同样会执行\",{\"1\":{\"606\":1}}],[\"并且比较器也必须使用泛型\",{\"1\":{\"578\":1}}],[\"并且是接口\",{\"1\":{\"563\":1}}],[\"并且son被作为了函数返回值返回出去\",{\"1\":{\"550\":1}}],[\"并且sync\",{\"1\":{\"485\":1}}],[\"并且还是阻塞式的\",{\"1\":{\"1066\":1}}],[\"并且还给出了如下的额外定义\",{\"1\":{\"563\":1}}],[\"并且还得通过宏告诉\",{\"1\":{\"545\":1}}],[\"并且还要关闭优化和内联\",{\"1\":{\"9\":1}}],[\"并且分别输出到old\",{\"1\":{\"526\":1}}],[\"并且模块\",{\"1\":{\"508\":1}}],[\"并且启用了\",{\"1\":{\"494\":1}}],[\"并且需要注意的是\",{\"1\":{\"491\":1}}],[\"并且前后存储的值类型应当一致\",{\"1\":{\"491\":1}}],[\"并且返回旧值\",{\"1\":{\"489\":1}}],[\"并且这\",{\"1\":{\"485\":1}}],[\"并且这个函数必须只有签名没有函数体\",{\"1\":{\"47\":1}}],[\"并且将数据成功添加\",{\"1\":{\"484\":1}}],[\"并且第二次扫描时必须要\",{\"1\":{\"1142\":1}}],[\"并且第二个返回值仍然为true\",{\"1\":{\"470\":1}}],[\"并且第四个case是一个超时管道\",{\"1\":{\"471\":1}}],[\"并且加上一些其他的逻辑\",{\"1\":{\"471\":1}}],[\"并且ok为false\",{\"1\":{\"470\":1}}],[\"并且协程的执行顺序也是不确定的\",{\"1\":{\"462\":1}}],[\"并且不会报空指针错误\",{\"1\":{\"1071\":1}}],[\"并且不会将请求日志写入文件中\",{\"1\":{\"1007\":1}}],[\"并且不需要改变构造函数的函数签名\",{\"1\":{\"406\":1}}],[\"并且不属于任何类型\",{\"1\":{\"322\":1}}],[\"并且对指针加一运算后\",{\"1\":{\"392\":1}}],[\"并且指针指向对应类型的零值\",{\"1\":{\"391\":1}}],[\"并且常量的类型可以省略\",{\"1\":{\"324\":1}}],[\"并且nil\",{\"1\":{\"322\":1}}],[\"并且规定了只能位于操作数的后方\",{\"1\":{\"299\":1}}],[\"并且要尽量简短\",{\"1\":{\"293\":1}}],[\"并且要存储数据\",{\"1\":{\"142\":1}}],[\"并且按照出现的顺序保留\",{\"1\":{\"187\":1}}],[\"并且应该留出一些空间以留给后续可能会频繁出现的字段\",{\"1\":{\"187\":1}}],[\"并且支持拓展和自定义\",{\"1\":{\"174\":1}}],[\"并且支持自定义格式化输出\",{\"1\":{\"20\":1}}],[\"并且使用了time\",{\"1\":{\"479\":1}}],[\"并且使用了这一特性\",{\"1\":{\"169\":1}}],[\"并且使用\",{\"1\":{\"218\":1}}],[\"并且使用它必须导入embed包\",{\"1\":{\"41\":1}}],[\"并且它所直接引用的对象也都已经访问过\",{\"1\":{\"1135\":1}}],[\"并且它是按照对象数量来将内存一个个划分而非按照空间大小来划分\",{\"1\":{\"1125\":1}}],[\"并且它会将所有根对象标黑\",{\"1\":{\"1143\":1}}],[\"并且它会随着使用量的变化而增长或缩小\",{\"1\":{\"1099\":1}}],[\"并且它会更新所有字段\",{\"1\":{\"884\":1}}],[\"并且它们彼此加锁顺序都是随机的互不相同\",{\"1\":{\"1067\":1}}],[\"并且它还是一个切片\",{\"1\":{\"168\":1}}],[\"并且它还成为了云原生领域的一个基础协议\",{\"1\":{\"146\":1}}],[\"并且它在\",{\"1\":{\"160\":1}}],[\"并且最好大于等于三个\",{\"1\":{\"143\":1}}],[\"并且在极端情况下像这样的协程可能会有很多\",{\"1\":{\"1151\":1}}],[\"并且在后续的版本中不断的改进和优化\",{\"1\":{\"1130\":1}}],[\"并且在后续执行go\",{\"1\":{\"823\":1}}],[\"并且在调用之前\",{\"1\":{\"1067\":1}}],[\"并且在会通过runtime\",{\"1\":{\"1059\":1}}],[\"并且在搬迁元素的时候\",{\"1\":{\"1043\":1}}],[\"并且在使用len和cap获取切片的长度和容量时\",{\"1\":{\"1019\":1}}],[\"并且在使用之前\",{\"1\":{\"44\":1}}],[\"并且在客户端会以指定的文件名进行下载\",{\"1\":{\"981\":1}}],[\"并且在整个程序的生命周期都不会再改变\",{\"1\":{\"590\":1}}],[\"并且在访问\",{\"1\":{\"383\":1}}],[\"并且在扫描路径时仅指定了player目录\",{\"1\":{\"193\":1}}],[\"并且在\",{\"1\":{\"112\":1}}],[\"并且在本站编写的文档中也借鉴了许多\",{\"1\":{\"97\":1}}],[\"并且因为历史遗留原因\",{\"1\":{\"43\":1}}],[\"并且\",{\"1\":{\"40\":1,\"285\":1,\"513\":1,\"543\":1,\"563\":1,\"578\":1,\"1106\":1,\"1123\":1}}],[\"并且以\",{\"1\":{\"39\":1}}],[\"并且以var=value形式作为参数\",{\"1\":{\"7\":1}}],[\"并且如果想要进行日志文件切割的话还需要使用另一个第三方的依赖\",{\"1\":{\"841\":1}}],[\"并且如果该版本的go命令从不同模块版本中加载任何已导入的包\",{\"1\":{\"24\":1}}],[\"并且如果你尝试在模块外像使用go\",{\"1\":{\"18\":1}}],[\"并且只有最新的两个二级版本是长期维护\",{\"1\":{\"113\":1}}],[\"并且只能以文件作为参数\",{\"1\":{\"14\":1}}],[\"并且只是生成一个临时的二进制文件\",{\"1\":{\"13\":1}}],[\"并且根据操作系统和\",{\"1\":{\"14\":1}}],[\"并且会在调度完成后恢复先前被修改的协程上下文\",{\"1\":{\"1107\":1}}],[\"并且会在运行前自动运行go\",{\"1\":{\"127\":1}}],[\"并且会被gonoproxy和gonosumdb覆盖\",{\"1\":{\"7\":1}}],[\"并且会覆盖goprivate\",{\"1\":{\"7\":2}}],[\"并且会忽略一切go\",{\"1\":{\"7\":1}}],[\"并且goenv环境变量的值只能被操作系统的环境变量所覆盖\",{\"1\":{\"7\":1}}],[\"支持中间件\",{\"1\":{\"963\":1}}],[\"支持别名标签\",{\"1\":{\"927\":1}}],[\"支持注释操作\",{\"1\":{\"815\":1}}],[\"支持结构体映射\",{\"1\":{\"815\":1}}],[\"支持序列化和反序列\",{\"1\":{\"815\":1}}],[\"支持显示设置值\",{\"1\":{\"788\":1}}],[\"支持缓冲区读取\",{\"1\":{\"788\":1}}],[\"支持读取命令行标记\",{\"1\":{\"788\":1}}],[\"支持远程配置系统读取配置并监测变化\",{\"1\":{\"788\":1}}],[\"支持环境变量中读取\",{\"1\":{\"788\":1}}],[\"支持实时监测和重载配置文件\",{\"1\":{\"788\":1}}],[\"支持格式\",{\"1\":{\"788\":1}}],[\"支持type+number方式创建多个\",{\"1\":{\"765\":1}}],[\"支持允许和拒绝授权\",{\"1\":{\"758\":1}}],[\"支持路径\",{\"1\":{\"758\":1}}],[\"支持利用resource\",{\"1\":{\"758\":1}}],[\"支持域\",{\"1\":{\"758\":1}}],[\"支持资源角色的rbac\",{\"1\":{\"758\":1}}],[\"支持以下访问控制模型\",{\"1\":{\"758\":1}}],[\"支持的绑定类型有如下几种实现\",{\"1\":{\"971\":1}}],[\"支持的\",{\"1\":{\"964\":1}}],[\"支持的一些标签\",{\"1\":{\"862\":1}}],[\"支持的命令行参数格式有如下几种\",{\"1\":{\"634\":1}}],[\"支持的类型\",{\"1\":{\"533\":1}}],[\"支持的编译器有两种\",{\"1\":{\"8\":1}}],[\"支持导出\",{\"1\":{\"533\":1}}],[\"支持直接把\",{\"1\":{\"531\":1}}],[\"支持转义\",{\"1\":{\"374\":1}}],[\"支持单行注释和多行注释\",{\"1\":{\"297\":1}}],[\"支持网络\",{\"1\":{\"239\":1}}],[\"支持这种语法\",{\"1\":{\"201\":1}}],[\"支持多行书写\",{\"1\":{\"374\":1}}],[\"支持多数据中心\",{\"1\":{\"142\":1}}],[\"支持多种数据格式序列化\",{\"1\":{\"63\":1}}],[\"支持多种语言\",{\"1\":{\"8\":1}}],[\"支持多种语言包括\",{\"1\":{\"8\":1}}],[\"支持短变量多重赋值语法\",{\"1\":{\"138\":1}}],[\"支持同时给多个变量赋值\",{\"1\":{\"137\":1}}],[\"支持将包名修改为internal来表示该包的所有内容都是私有的不可导出\",{\"1\":{\"133\":1}}],[\"支持并发垃圾收集\",{\"1\":{\"132\":1}}],[\"支持并行编译\",{\"1\":{\"128\":1}}],[\"支持类型别名\",{\"1\":{\"128\":1}}],[\"支持下划线分割数字以带来更好的可读性\",{\"1\":{\"124\":1}}],[\"支持更现代的数字字面量\",{\"1\":{\"124\":1}}],[\"支持协程间的异步抢占\",{\"1\":{\"123\":1}}],[\"支持方法集接口类型嵌套\",{\"1\":{\"123\":1}}],[\"支持通过\",{\"1\":{\"121\":1}}],[\"支持获取切片的底层数组的指针\",{\"1\":{\"120\":1}}],[\"支持指针运算\",{\"1\":{\"120\":1}}],[\"支持使用runtime\",{\"1\":{\"118\":1}}],[\"支持收集程序代码覆盖率文件\",{\"1\":{\"117\":1}}],[\"支持迭代器函数\",{\"1\":{\"114\":1}}],[\"支持所有平台的现代下载管理器\",{\"1\":{\"70\":1}}],[\"支持很多格式的压缩解压缩工具库\",{\"1\":{\"65\":1}}],[\"支持很多的参数\",{\"1\":{\"20\":1}}],[\"支持密码\",{\"1\":{\"65\":1}}],[\"支持\",{\"1\":{\"61\":2,\"75\":1,\"76\":1,\"131\":1,\"201\":1,\"791\":1,\"849\":1,\"875\":1,\"954\":1,\"1003\":1}}],[\"支持泛型\",{\"1\":{\"58\":2,\"119\":1}}],[\"支持大小分割\",{\"1\":{\"54\":1}}],[\"支持布尔表达式\",{\"1\":{\"42\":1}}],[\"支持设置代码分析器\",{\"1\":{\"37\":1}}],[\"支持包\",{\"1\":{\"37\":1}}],[\"支持就会使用这些命令\",{\"1\":{\"26\":1}}],[\"和add\",{\"1\":{\"1178\":1}}],[\"和等待协程的数量\",{\"1\":{\"1178\":1}}],[\"和wait\",{\"1\":{\"1176\":1}}],[\"和正在自旋的\",{\"1\":{\"1153\":1}}],[\"和预先分配的空闲溢出桶\",{\"1\":{\"1034\":1}}],[\"和shouldbindwith\",{\"1\":{\"971\":1}}],[\"和shouldbind\",{\"1\":{\"971\":1}}],[\"和stop\",{\"1\":{\"583\":1}}],[\"和签名所使用的加密算法\",{\"1\":{\"772\":1}}],[\"和一个index\",{\"1\":{\"995\":1}}],[\"和一个软删除记录字段\",{\"1\":{\"857\":1}}],[\"和一个表示当前值是否有效的布尔值\",{\"1\":{\"583\":1}}],[\"和一个内嵌的context类型的字段\",{\"1\":{\"476\":1}}],[\"和hoist\",{\"1\":{\"567\":1}}],[\"和测试文件\",{\"1\":{\"518\":1}}],[\"和其他不安全协议检索的模块路径前缀的通用模式列表\",{\"1\":{\"511\":1}}],[\"和上面例子中的withdeadline用法一样\",{\"1\":{\"478\":1}}],[\"和参数一样\",{\"1\":{\"397\":1}}],[\"和安全考虑\",{\"1\":{\"390\":1}}],[\"和搜索树\",{\"1\":{\"381\":1}}],[\"和流式\",{\"1\":{\"157\":1,\"164\":1}}],[\"和proposal\",{\"1\":{\"116\":1}}],[\"和内存偏移量\",{\"1\":{\"44\":1}}],[\"和工具链版本时\",{\"1\":{\"18\":1}}],[\"和\",{\"0\":{\"393\":1},\"1\":{\"8\":2,\"18\":2,\"60\":1,\"70\":1,\"90\":1,\"116\":1,\"117\":2,\"142\":2,\"143\":1,\"144\":1,\"145\":1,\"162\":1,\"167\":1,\"172\":1,\"174\":1,\"175\":1,\"312\":1,\"331\":1,\"376\":1,\"484\":1,\"508\":2,\"511\":1,\"536\":1,\"540\":1,\"543\":1,\"547\":1,\"709\":1,\"721\":1,\"726\":1,\"734\":1,\"758\":1,\"776\":1,\"777\":2,\"791\":1,\"792\":1,\"845\":1,\"927\":1,\"962\":1,\"963\":1,\"1017\":2,\"1033\":1,\"1054\":1,\"1097\":2,\"1098\":2,\"1104\":2,\"1128\":1}}],[\"则继续循环\",{\"1\":{\"1178\":1}}],[\"则尝试持有锁\",{\"1\":{\"1173\":1}}],[\"则构造成sudog加入队列\",{\"1\":{\"1167\":1}}],[\"则释放writersem\",{\"1\":{\"1162\":1}}],[\"则将readerwait减一\",{\"1\":{\"1162\":1}}],[\"则将其替换为allp\",{\"1\":{\"1089\":1}}],[\"则进入readersem信号量阻塞流程\",{\"1\":{\"1161\":1}}],[\"则进入runtime\",{\"1\":{\"1158\":1}}],[\"则进入饥饿模式\",{\"1\":{\"1153\":1}}],[\"则重置iter\",{\"1\":{\"1153\":1}}],[\"则加上mutexwoken标志\",{\"1\":{\"1153\":1}}],[\"则等待的协程数+1\",{\"1\":{\"1153\":1}}],[\"则表示当前没有活跃的读者协程\",{\"1\":{\"1162\":1}}],[\"则表示在此期间有其它协程成功获得了锁\",{\"1\":{\"1152\":1}}],[\"则表示关闭这个配置项\",{\"1\":{\"242\":1}}],[\"则直接判定为不相等\",{\"1\":{\"1070\":1}}],[\"则直接复制发送方的数据\",{\"1\":{\"1060\":1}}],[\"则解锁管道然后直接返回\",{\"1\":{\"1067\":1}}],[\"则分配对应内存大小的空间\",{\"1\":{\"1058\":1}}],[\"则至少会是原容量的\",{\"1\":{\"1025\":1}}],[\"则忽略它\",{\"1\":{\"936\":1}}],[\"则从字符串中删除该字符\",{\"1\":{\"713\":1}}],[\"则字段名优先以\",{\"1\":{\"628\":1}}],[\"则说明它已经被删除了\",{\"1\":{\"1047\":1}}],[\"则说明key可能已经存在了\",{\"1\":{\"1038\":1}}],[\"则说明依赖版本不同\",{\"1\":{\"510\":1}}],[\"则说明该字段不存在\",{\"1\":{\"449\":1}}],[\"则其module指令必须与所替换的模块路径匹配\",{\"1\":{\"509\":1}}],[\"则会直接panic\",{\"1\":{\"1061\":1}}],[\"则会进入下面的代码流程\",{\"1\":{\"1059\":1}}],[\"则会回退使用提供的默认值\",{\"1\":{\"817\":1}}],[\"则会抛出panic\",{\"1\":{\"647\":1}}],[\"则会panic\",{\"1\":{\"568\":1}}],[\"则会同时阻塞读协程和写协程\",{\"1\":{\"481\":1}}],[\"则会触发另一个panic\",{\"1\":{\"116\":1}}],[\"则必须传入一个结构体指针\",{\"1\":{\"449\":1}}],[\"则必须以o\",{\"1\":{\"418\":1}}],[\"则读取文件夹下所有的内容\",{\"1\":{\"424\":1}}],[\"则需要提供一个io\",{\"1\":{\"417\":1}}],[\"则需要额外留意这一点\",{\"1\":{\"169\":1}}],[\"则只需要传入一个\",{\"1\":{\"170\":1}}],[\"则可以使用grpc\",{\"1\":{\"170\":1}}],[\"则return语句必须携带返回值\",{\"1\":{\"137\":1}}],[\"则以下面结构体的形式传入\",{\"1\":{\"21\":1}}],[\"则关闭\",{\"1\":{\"7\":1}}],[\"则不会分配内存且返回空字符串\",{\"1\":{\"704\":1}}],[\"则不启用\",{\"1\":{\"7\":1}}],[\"则不允许使用\",{\"1\":{\"7\":1}}],[\"即当前没有协程运行\",{\"1\":{\"1177\":1}}],[\"即读锁已经全部释放\",{\"1\":{\"1162\":1}}],[\"即读写互斥锁\",{\"1\":{\"481\":1}}],[\"即加了n个读锁\",{\"1\":{\"1156\":1}}],[\"即解锁成功\",{\"1\":{\"1154\":1}}],[\"即说明当前没有足够的可用处理器来进行自旋\",{\"1\":{\"1153\":1}}],[\"即很多协程正在等待锁\",{\"1\":{\"1152\":1}}],[\"即信号量semaphore\",{\"1\":{\"1151\":1}}],[\"即插入写屏障与删除写屏障的混合\",{\"1\":{\"1144\":1}}],[\"即off+size\",{\"1\":{\"1124\":1}}],[\"即满足npages\",{\"1\":{\"1120\":1}}],[\"即表示没有可用的管道\",{\"1\":{\"1067\":1}}],[\"即无缓冲管道\",{\"1\":{\"1060\":1}}],[\"即无法向下兼容的更新\",{\"1\":{\"113\":1}}],[\"即元素数量较大于哈希桶的数量\",{\"1\":{\"1042\":1}}],[\"即深层验证的意思\",{\"1\":{\"944\":1}}],[\"即首字母大写\",{\"1\":{\"617\":1}}],[\"即包含所有类型\",{\"1\":{\"574\":1}}],[\"即包内唯一的存在\",{\"1\":{\"298\":1}}],[\"即comparable\",{\"1\":{\"568\":1}}],[\"即直接执行的测试用例\",{\"1\":{\"522\":1}}],[\"即按顺序检测输出是否匹配\",{\"1\":{\"520\":1}}],[\"即不执行用户代码\",{\"1\":{\"1098\":1}}],[\"即不需要重新启动应用程序也可以使更新的配置生效\",{\"1\":{\"793\":1}}],[\"即不按照顺序多行输出匹配\",{\"1\":{\"520\":1}}],[\"即不同的人在不同的环境中使用同一个的项目构建时所引用的依赖包必须是完全相同的\",{\"1\":{\"510\":1}}],[\"即不能重复存在同一个字段\",{\"1\":{\"187\":1}}],[\"即真正要用到它的时候才会初始化该数据结构\",{\"1\":{\"484\":1}}],[\"即上下文应该取消的时间\",{\"1\":{\"474\":1}}],[\"即只能在管道的一边进行操作\",{\"1\":{\"469\":1}}],[\"即先进先出\",{\"1\":{\"465\":1}}],[\"即通过消息来进行内存共享\",{\"1\":{\"463\":1}}],[\"即在传递参数时会拷贝实参的值\",{\"1\":{\"396\":1}}],[\"即\",{\"1\":{\"395\":1,\"1079\":1,\"1097\":1,\"1165\":1}}],[\"即使有多个协程并发执行\",{\"1\":{\"1171\":1}}],[\"即使用系统时路由注册数量不要超过\",{\"1\":{\"995\":1}}],[\"即使exp函数的生命周期已经结束了\",{\"1\":{\"399\":1}}],[\"即使\",{\"1\":{\"383\":1}}],[\"即使已经是最新的了\",{\"1\":{\"8\":1}}],[\"即结果要么为真要么为假\",{\"1\":{\"348\":1}}],[\"即数字无法代替布尔值进行逻辑判断\",{\"1\":{\"315\":1}}],[\"即为私有类型\",{\"1\":{\"294\":1}}],[\"即为公有类型\",{\"1\":{\"294\":1}}],[\"即拦截的是\",{\"1\":{\"165\":1}}],[\"即可看到正确的内容\",{\"1\":{\"955\":1}}],[\"即可开启\",{\"1\":{\"530\":1}}],[\"即可以在管道两边进行操作\",{\"1\":{\"469\":1}}],[\"即可以当作一个\",{\"1\":{\"239\":1}}],[\"即可以构造查询\",{\"1\":{\"222\":1}}],[\"即可\",{\"1\":{\"162\":1,\"171\":1,\"643\":1}}],[\"即请求和响应都是流式的\",{\"1\":{\"159\":1}}],[\"即节点名称\",{\"1\":{\"143\":1}}],[\"即集群中期望的\",{\"1\":{\"141\":1}}],[\"即便每个只占2kb\",{\"1\":{\"1151\":1}}],[\"即便有些结构体的字段是零值\",{\"1\":{\"884\":1}}],[\"即便是高级配置官方给出的例子也是十分简洁\",{\"1\":{\"839\":1}}],[\"即便是处于同一目录下的health\",{\"1\":{\"193\":1}}],[\"即便如此\",{\"1\":{\"745\":1}}],[\"即便两个类型可以相互代表\",{\"1\":{\"595\":1}}],[\"即便基础类型是相同的\",{\"1\":{\"593\":1}}],[\"即便其底层类型属于int类型集的范围内\",{\"1\":{\"574\":1}}],[\"即便其底层类型包含在类型集内\",{\"1\":{\"574\":1}}],[\"即便开启了\",{\"1\":{\"485\":1}}],[\"即便缓冲区为空\",{\"1\":{\"470\":1}}],[\"即便管道已经关闭了\",{\"1\":{\"1060\":1}}],[\"即便管道已经关闭\",{\"1\":{\"470\":1}}],[\"即便\",{\"1\":{\"469\":1,\"539\":1,\"543\":1}}],[\"即便换成errors\",{\"1\":{\"167\":1}}],[\"即便它非常简单\",{\"1\":{\"45\":1}}],[\"即便它是私有类型\",{\"1\":{\"44\":1}}],[\"即便前面提到过\",{\"1\":{\"0\":1}}],[\"即开启\",{\"1\":{\"7\":1}}],[\"为nil的时候\",{\"1\":{\"1071\":1}}],[\"为新字符串开辟内存\",{\"1\":{\"1053\":1}}],[\"为下一个键值做准备\",{\"1\":{\"1042\":1}}],[\"为避免无限陷入在环中\",{\"1\":{\"1039\":1}}],[\"为避免出现问题\",{\"1\":{\"1010\":1}}],[\"为emptyrest退出循环\",{\"1\":{\"1036\":1}}],[\"为哈希桶分配对应大小的内存\",{\"1\":{\"1034\":1}}],[\"为策略对象\",{\"1\":{\"760\":1}}],[\"为策略主体\",{\"1\":{\"760\":1}}],[\"为源字符串\",{\"1\":{\"715\":1}}],[\"为主导\",{\"1\":{\"540\":1}}],[\"为其分配内存空间\",{\"1\":{\"536\":1}}],[\"为纳秒\",{\"1\":{\"525\":1}}],[\"为测试执行gomaxprocs\",{\"1\":{\"519\":1}}],[\"为例子\",{\"1\":{\"503\":1,\"1009\":1}}],[\"为完全相等\",{\"1\":{\"460\":1}}],[\"为hello\",{\"1\":{\"175\":1}}],[\"为\",{\"1\":{\"168\":1,\"229\":1,\"501\":1,\"963\":1}}],[\"为什么recover函数一定要在defer里面使用\",{\"1\":{\"1077\":1}}],[\"为什么要把类型声明放在后面而不是前面\",{\"1\":{\"592\":1}}],[\"为什么\",{\"1\":{\"331\":1}}],[\"为什么不在语言层面支持枚举是笔者非常不能理解的一件事\",{\"1\":{\"326\":1}}],[\"为什么选择它\",{\"1\":{\"146\":1}}],[\"为什么叫go111module\",{\"1\":{\"7\":1}}],[\"为了进行优化\",{\"1\":{\"1145\":1}}],[\"为了改进效率\",{\"1\":{\"1135\":1}}],[\"为了改善这种情况\",{\"1\":{\"1032\":1}}],[\"为了处理多字节字符的情况\",{\"1\":{\"1055\":1}}],[\"为了更关注其本身的逻辑\",{\"1\":{\"1041\":1}}],[\"为了更好的维护性\",{\"1\":{\"600\":1}}],[\"为了减少追踪溢出桶的成本\",{\"1\":{\"1039\":1}}],[\"为了减少跟踪溢出桶的开销\",{\"1\":{\"1034\":1}}],[\"为了减少不必要的资源浪费\",{\"1\":{\"169\":1}}],[\"为了定制化一些配置\",{\"1\":{\"1016\":1}}],[\"为了后续的学习\",{\"1\":{\"995\":1}}],[\"为了安全考虑\",{\"1\":{\"982\":1}}],[\"为了做适配需要花费大量的工作和时间\",{\"1\":{\"904\":1}}],[\"为了做负载均衡\",{\"1\":{\"175\":1}}],[\"为了让代码生成时\",{\"1\":{\"826\":1}}],[\"为了让对象池中的缓冲区大小大致相同以便更好的弹性控制缓冲区大小\",{\"1\":{\"485\":1}}],[\"为了解决这类问题\",{\"1\":{\"512\":1,\"1043\":1}}],[\"为了解决这个问题\",{\"1\":{\"492\":1}}],[\"为了并发安全肯定需要做出一定的牺牲\",{\"1\":{\"486\":1}}],[\"为了便于阅读\",{\"1\":{\"301\":1}}],[\"为了保险都会加一句defer\",{\"1\":{\"238\":1}}],[\"为了能够压榨所有的\",{\"1\":{\"1104\":1}}],[\"为了能够更好的理解\",{\"1\":{\"1056\":1}}],[\"为了能够匹配上接收者的类型\",{\"1\":{\"413\":1}}],[\"为了能更好的理解拦截器\",{\"1\":{\"164\":1}}],[\"为了能其他节点感知到当前节点的退出\",{\"1\":{\"141\":1}}],[\"为了避免遍历结束后指针指向越界的内存\",{\"1\":{\"1028\":1}}],[\"为了避免在遍历时切片被更新\",{\"1\":{\"1028\":1}}],[\"为了避免冲突\",{\"1\":{\"830\":1}}],[\"为了避免每次都要写重复的命令\",{\"1\":{\"201\":1}}],[\"为了避免这种情况\",{\"1\":{\"163\":1,\"1019\":1,\"1151\":1}}],[\"为了避免重复运行测试\",{\"1\":{\"38\":1}}],[\"为了方便理解\",{\"1\":{\"1086\":1}}],[\"为了方便内存对齐\",{\"1\":{\"1025\":1}}],[\"为了方便\",{\"1\":{\"1016\":1}}],[\"为了方便起见\",{\"1\":{\"147\":1,\"568\":1}}],[\"为了方便进行测试\",{\"1\":{\"145\":1}}],[\"为了兼容性\",{\"1\":{\"116\":1}}],[\"为了获取最准确的信息可以自行去仓库里面查阅\",{\"1\":{\"105\":1}}],[\"为提供\",{\"1\":{\"26\":1}}],[\"为此就需要使用工具来进行逃逸分析\",{\"1\":{\"550\":1}}],[\"为此就需要用到锁\",{\"1\":{\"479\":1}}],[\"为此可以使用\",{\"1\":{\"531\":1}}],[\"为此需要实现一个自定义的解析器resolver\",{\"1\":{\"174\":1}}],[\"为此应该关注下\",{\"1\":{\"143\":1}}],[\"为此\",{\"1\":{\"7\":1,\"167\":1,\"627\":1,\"1030\":1,\"1042\":1}}],[\"表名花括号内注册的处理器是属于同一个路由分组\",{\"1\":{\"988\":1}}],[\"表单数据绑定\",{\"0\":{\"973\":1}}],[\"表单的内容类型一般有application\",{\"1\":{\"970\":1}}],[\"表单参数\",{\"0\":{\"970\":1},\"1\":{\"967\":1}}],[\"表\",{\"1\":{\"863\":1}}],[\"表格风格\",{\"0\":{\"524\":1}}],[\"表面上看该测试函数就是一个普通的函数\",{\"1\":{\"520\":1}}],[\"表达能力不足\",{\"1\":{\"601\":1}}],[\"表达能力弱\",{\"1\":{\"326\":1}}],[\"表达式等这些特性\",{\"1\":{\"88\":1}}],[\"表达式\",{\"0\":{\"887\":1},\"1\":{\"41\":1,\"399\":1,\"849\":1,\"887\":1}}],[\"表示现在没有等待wg完成的协程\",{\"1\":{\"1177\":1}}],[\"表示wait\",{\"1\":{\"1177\":1}}],[\"表示waitgroup的状态\",{\"1\":{\"1176\":1}}],[\"表示活跃读者协程数量减一\",{\"1\":{\"1162\":1}}],[\"表示活跃的对象\",{\"1\":{\"1135\":2}}],[\"表示写者协程被阻塞时\",{\"1\":{\"1155\":1}}],[\"表示队列后进先出\",{\"1\":{\"1153\":1}}],[\"表示将一个对象标记为灰色\",{\"1\":{\"1144\":1}}],[\"表示对其它对象的引用\",{\"1\":{\"1144\":1}}],[\"表示对一个管道读取数据\",{\"1\":{\"465\":1}}],[\"表示对一个管道写入数据\",{\"1\":{\"465\":1}}],[\"表示标记工作已经结束了\",{\"1\":{\"1140\":1}}],[\"表示其为活跃对象\",{\"1\":{\"1135\":1}}],[\"表示可能为垃圾对象\",{\"1\":{\"1135\":1}}],[\"表示该类型的内存不会分配在用户堆上\",{\"1\":{\"1129\":1}}],[\"表示该键值对已被删除\",{\"1\":{\"1045\":1}}],[\"表示有对象使用\",{\"1\":{\"1125\":1}}],[\"表示有几个入参\",{\"1\":{\"765\":1}}],[\"表示与\",{\"1\":{\"1088\":1}}],[\"表示当\",{\"1\":{\"1087\":1}}],[\"表示当前处理器是因为空闲才执行标记任务\",{\"1\":{\"1138\":1}}],[\"表示当前处理器是因为\",{\"1\":{\"1138\":1}}],[\"表示当前处理器\",{\"1\":{\"1138\":2}}],[\"表示当前\",{\"1\":{\"1087\":1}}],[\"表示当前协程是否已经超过1ms未获得锁\",{\"1\":{\"1153\":1}}],[\"表示当前协程正在等待的协程\",{\"1\":{\"1086\":1}}],[\"表示当前协程正在执行用户代码\",{\"1\":{\"1086\":1}}],[\"表示当前协程未被使用\",{\"1\":{\"1086\":1}}],[\"表示当前协程可以运行\",{\"1\":{\"1086\":1}}],[\"表示当前元素已被搬迁\",{\"1\":{\"1042\":1}}],[\"表示当前元素被搬迁到了新哈希桶数组的下半区\",{\"1\":{\"1030\":1}}],[\"表示当前元素被搬迁到了新哈希桶数组的上半区\",{\"1\":{\"1030\":1}}],[\"表示当前目录\",{\"1\":{\"518\":1}}],[\"表示当前服务没有实现\",{\"1\":{\"168\":1}}],[\"表示协程栈正在移动\",{\"1\":{\"1086\":1}}],[\"表示哪一个管道被处理了\",{\"1\":{\"1067\":1}}],[\"表示哪些依赖直接使用\",{\"1\":{\"7\":1}}],[\"表示发送和接收的协程链表\",{\"1\":{\"1057\":1}}],[\"表示发送和接收的索引\",{\"1\":{\"1057\":1}}],[\"表示总数据数\",{\"1\":{\"1057\":1}}],[\"表示这是旧数据\",{\"1\":{\"1042\":1}}],[\"表示这是匿名的\",{\"1\":{\"577\":1}}],[\"表示是一个数组\",{\"1\":{\"1013\":1}}],[\"表示是否从父上下文中删除自身\",{\"1\":{\"477\":1}}],[\"表示是否开启\",{\"1\":{\"7\":1}}],[\"表示大于等于18岁\",{\"1\":{\"930\":1}}],[\"表示着可以拥有多个学生\",{\"1\":{\"892\":1}}],[\"表示无迁移权限\",{\"1\":{\"862\":1}}],[\"表示无读写迁移权限\",{\"1\":{\"862\":1}}],[\"表示无读写\",{\"1\":{\"862\":1}}],[\"表示角色data1\",{\"1\":{\"765\":1}}],[\"表示mike具有角色data1\",{\"1\":{\"765\":1}}],[\"表示alice具有角色data2\",{\"1\":{\"765\":1}}],[\"表示alice想要对data1进行read操作\",{\"1\":{\"764\":1}}],[\"表示bob想要对data1进行read操作\",{\"1\":{\"764\":1}}],[\"表示十分严重的程序问题\",{\"1\":{\"604\":1}}],[\"表示打印panic风格的堆栈信息\",{\"1\":{\"556\":1}}],[\"表示多少个输入每秒\",{\"1\":{\"527\":1}}],[\"表示次数\",{\"1\":{\"519\":1}}],[\"表示取消的原因\",{\"1\":{\"477\":1}}],[\"表示为所有人都可以对该文件进行读写\",{\"1\":{\"416\":1}}],[\"表示仅做通知类型的通道\",{\"1\":{\"411\":1}}],[\"表示关闭空闲连接检测\",{\"1\":{\"242\":1}}],[\"表示关闭\",{\"1\":{\"242\":2}}],[\"表示的就是当前路径\",{\"1\":{\"201\":1}}],[\"表示使用proto3的语法\",{\"1\":{\"181\":1}}],[\"表示就直接生成在输出路径下\",{\"1\":{\"151\":1}}],[\"表示错误类型\",{\"1\":{\"137\":1}}],[\"表示一个\",{\"1\":{\"137\":1}}],[\"表示任何地方\",{\"1\":{\"20\":1}}],[\"表示在wait\",{\"1\":{\"1178\":1}}],[\"表示在函数调用期间发生了错误\",{\"1\":{\"531\":1}}],[\"表示在\",{\"1\":{\"12\":1}}],[\"表示\",{\"1\":{\"12\":1,\"1030\":1,\"1087\":2,\"1088\":2}}],[\"表示它们在什么情况下才会被编译\",{\"1\":{\"12\":1}}],[\"表示禁止下载任何模块\",{\"1\":{\"7\":1}}],[\"表明哪些依赖不需要走校验数据库\",{\"1\":{\"7\":1}}],[\"表明哪些依赖不需要走代理\",{\"1\":{\"7\":1}}],[\"如所示\",{\"1\":{\"1073\":1}}],[\"如何使用线程的时间片\",{\"1\":{\"1085\":1}}],[\"如何让协程利用好线程的时间片就是设计的关键所在\",{\"1\":{\"1085\":1}}],[\"如何将数据搬迁到两个新桶中\",{\"1\":{\"1042\":1}}],[\"如何对桶进行遍历\",{\"1\":{\"1037\":1}}],[\"如何自定义外键以及引用和约束还有默认的外键规则这些已经在外键定义中已经讲到过\",{\"1\":{\"891\":1}}],[\"如何理解其含义和使用取决于开发者\",{\"1\":{\"765\":1}}],[\"如何抽象出主体\",{\"1\":{\"764\":1}}],[\"如何向\",{\"1\":{\"88\":1}}],[\"如\",{\"1\":{\"758\":2,\"862\":1,\"975\":2}}],[\"如需深究\",{\"1\":{\"672\":1}}],[\"如上所示\",{\"1\":{\"581\":1,\"583\":1}}],[\"如chan<\",{\"1\":{\"469\":1}}],[\"如<\",{\"1\":{\"469\":1}}],[\"如数组\",{\"1\":{\"355\":1}}],[\"如结构体\",{\"1\":{\"323\":1}}],[\"如此高频出现的关键字\",{\"1\":{\"1072\":1}}],[\"如此便运行起了一个基本的接口文档\",{\"1\":{\"1011\":1}}],[\"如此一来输出的顺序将会无法确定\",{\"1\":{\"523\":1}}],[\"如此一来实现了读协程与写协程互斥\",{\"1\":{\"481\":1}}],[\"如此一来就占用的内存就变为了\",{\"1\":{\"410\":1}}],[\"如此一来\",{\"1\":{\"170\":1,\"188\":1,\"467\":1,\"468\":1,\"480\":1,\"499\":1,\"557\":1}}],[\"如此长的一个调用链\",{\"1\":{\"169\":1}}],[\"如下是关于编码配置的细节\",{\"1\":{\"839\":1}}],[\"如下是正确示例\",{\"1\":{\"360\":1}}],[\"如下示例\",{\"1\":{\"795\":1}}],[\"如下方式可以通过uintptr获得一个指针\",{\"1\":{\"751\":1}}],[\"如下方的例子\",{\"1\":{\"521\":1}}],[\"如下的代码将会无法通过编译\",{\"1\":{\"573\":1}}],[\"如下的代码将无法通过编译\",{\"1\":{\"573\":1}}],[\"如下所图\",{\"1\":{\"557\":1}}],[\"如下所示\",{\"1\":{\"7\":1,\"11\":1,\"137\":1,\"160\":1,\"165\":1,\"207\":1,\"395\":1,\"398\":1,\"401\":1,\"432\":2,\"512\":1,\"533\":1,\"556\":1,\"557\":2,\"574\":1,\"581\":1,\"587\":1,\"608\":1,\"723\":1,\"725\":2,\"728\":1,\"813\":1,\"828\":1,\"1019\":1,\"1026\":1,\"1030\":1,\"1033\":1,\"1035\":1,\"1074\":1,\"1111\":1,\"1115\":1}}],[\"如下面的例子\",{\"1\":{\"484\":1}}],[\"如下例\",{\"1\":{\"466\":1,\"470\":1,\"507\":1,\"575\":1}}],[\"如下声明便会报错\",{\"1\":{\"187\":1}}],[\"如下图所示\",{\"1\":{\"500\":1,\"1067\":3,\"1111\":1,\"1125\":1,\"1135\":1}}],[\"如下图\",{\"1\":{\"157\":1,\"169\":1,\"1135\":1}}],[\"如下\",{\"1\":{\"9\":1,\"14\":1,\"115\":1,\"202\":2,\"227\":1,\"299\":1,\"343\":1,\"380\":2,\"404\":1,\"428\":1,\"449\":1,\"471\":1,\"478\":1,\"479\":1,\"481\":1,\"484\":1,\"485\":1,\"521\":1,\"522\":1,\"523\":1,\"527\":1,\"532\":1,\"534\":1,\"568\":1,\"571\":4,\"577\":1,\"578\":1,\"582\":2,\"583\":1,\"586\":1,\"594\":1,\"730\":1,\"753\":1,\"764\":1,\"823\":1,\"826\":1,\"827\":1,\"829\":1,\"1013\":1,\"1016\":1,\"1037\":1,\"1039\":1,\"1057\":1,\"1066\":1,\"1078\":1,\"1088\":1,\"1151\":1}}],[\"如果cas没有更新成功\",{\"1\":{\"1178\":1}}],[\"如果cas操作返回false\",{\"1\":{\"1152\":1}}],[\"如果v大于0\",{\"1\":{\"1177\":1}}],[\"如果v小于0\",{\"1\":{\"1177\":1}}],[\"如果原来的readercount值为0\",{\"1\":{\"1162\":1}}],[\"如果原有项目引用了老版本\",{\"1\":{\"509\":1}}],[\"如果原有的\",{\"1\":{\"163\":1}}],[\"如果得到的值大于0表示可以直接释放\",{\"1\":{\"1162\":1}}],[\"如果得到的新值还是小于0\",{\"1\":{\"1161\":1}}],[\"如果更新成功了则加锁成功\",{\"1\":{\"1160\":1}}],[\"如果它本身就是0或大于0\",{\"1\":{\"1159\":1}}],[\"如果能拿到信号量就表示读者协程已经工作完毕\",{\"1\":{\"1158\":1}}],[\"如果能获取信号量就直接返回不会阻塞\",{\"1\":{\"1153\":1}}],[\"如果失败了就直接返回\",{\"1\":{\"1157\":1}}],[\"如果失败就根据hintlist来进行扩容\",{\"1\":{\"1122\":1}}],[\"如果new为0的话表示现在没有等待协程\",{\"1\":{\"1154\":1}}],[\"如果现在是饥饿模式\",{\"1\":{\"1153\":1}}],[\"如果锁已经被占用或现在是饥饿模式\",{\"1\":{\"1153\":1}}],[\"如果锁已经被持有了\",{\"1\":{\"1152\":1}}],[\"如果判断可以自旋的话\",{\"1\":{\"1153\":1}}],[\"如果自旋的线程在不同的核心上运行\",{\"1\":{\"1153\":1}}],[\"如果自己是最后一个等待协程或等待时间小于1ms\",{\"1\":{\"1151\":1}}],[\"如果gcw队列中没有可用的灰色对象\",{\"1\":{\"1145\":1}}],[\"如果队列为空则直接添加到全局积分中\",{\"1\":{\"1139\":1}}],[\"如果还有剩余的话\",{\"1\":{\"1139\":1}}],[\"如果还不够的话就直接在堆上分配内存\",{\"1\":{\"1100\":1}}],[\"如果此时积分为负数\",{\"1\":{\"1139\":1}}],[\"如果此时用户程序并发的给黑色对象\",{\"1\":{\"1136\":1}}],[\"如果处理器\",{\"1\":{\"1138\":1}}],[\"如果长时间没有进行垃圾回收\",{\"1\":{\"1132\":1}}],[\"如果监测到堆内存达到了阈值\",{\"1\":{\"1132\":1}}],[\"如果结果是\",{\"1\":{\"1125\":1}}],[\"如果结构体有\",{\"1\":{\"628\":1}}],[\"如果某一位为\",{\"1\":{\"1125\":1}}],[\"如果也不行的话就会向mcentral申请一个mspan\",{\"1\":{\"1124\":1}}],[\"如果堆内存不够的会就由mheap\",{\"1\":{\"1120\":1}}],[\"如果申请的内存比较大的话\",{\"1\":{\"1120\":1}}],[\"如果申请分配的内存足够小\",{\"1\":{\"1120\":1}}],[\"如果最终还是没有找到\",{\"1\":{\"1117\":1}}],[\"如果最终无法找到\",{\"1\":{\"1104\":1}}],[\"如果仍然没有找到\",{\"1\":{\"1117\":1}}],[\"如果足够的话就更新next字段并返回剩余空间的起始地址\",{\"1\":{\"1111\":1}}],[\"如果检测到发送的是抢占信号\",{\"1\":{\"1107\":1}}],[\"如果检测到了\",{\"1\":{\"131\":1}}],[\"如果四次后也偷不到\",{\"1\":{\"1104\":1}}],[\"如果栈空间内存不够用了\",{\"1\":{\"1103\":1}}],[\"如果成功找到了可用的\",{\"1\":{\"1097\":1}}],[\"如果放不下就放到全局队列中\",{\"1\":{\"1095\":1}}],[\"如果找不到就由runtime\",{\"1\":{\"1095\":1}}],[\"如果对象的大小超过了\",{\"1\":{\"1126\":1}}],[\"如果对它能够有一定的了解\",{\"1\":{\"1083\":1}}],[\"如果对应位为\",{\"1\":{\"1076\":1}}],[\"如果对其添加元素的话\",{\"1\":{\"414\":1}}],[\"如果实在需要\",{\"1\":{\"1062\":1}}],[\"如果实例化过程比较复杂\",{\"1\":{\"405\":1}}],[\"如果以这个返回值为依据来判断是否向管道发送数据就更是危险了\",{\"1\":{\"1062\":1}}],[\"如果发送方成功发送数据那么该字段应该由发送方设置为true\",{\"1\":{\"1060\":1}}],[\"如果发生了扩容的话\",{\"1\":{\"1025\":1}}],[\"如果发生了\",{\"1\":{\"47\":1,\"584\":1}}],[\"如果发生错误就恢复备份\",{\"1\":{\"17\":1}}],[\"如果管道未关闭且已经满了也会直接返回\",{\"1\":{\"1066\":1}}],[\"如果管道未关闭就直接返回\",{\"1\":{\"1060\":1}}],[\"如果管道是空的就会直接返回\",{\"1\":{\"1066\":1}}],[\"如果管道是空的就直接返回\",{\"1\":{\"1060\":1}}],[\"如果管道没有关闭\",{\"1\":{\"1060\":1}}],[\"如果管道操作返回的值为空\",{\"1\":{\"730\":1}}],[\"如果已经执行过了就直接返回\",{\"1\":{\"1173\":1}}],[\"如果已经唤醒了就直接返回\",{\"1\":{\"1167\":1}}],[\"如果已经关闭了就会panic\",{\"1\":{\"1059\":1}}],[\"如果已经存在\",{\"1\":{\"949\":1}}],[\"如果满了就直接返回\",{\"1\":{\"1059\":1}}],[\"如果阻塞发送且管道是nil则直接崩溃\",{\"1\":{\"1059\":1}}],[\"如果环形队列中存放的是指针元素的话\",{\"1\":{\"1058\":1}}],[\"如果待复制的内存非常大\",{\"1\":{\"1054\":1}}],[\"如果字符串长度小于缓冲区长度的话就直接返回缓冲区的字节切片\",{\"1\":{\"1054\":1}}],[\"如果字段未设置\",{\"1\":{\"936\":1}}],[\"如果尝试修改字节切片\",{\"1\":{\"1054\":1}}],[\"如果尝试修改连编译都没法通过\",{\"1\":{\"1054\":1}}],[\"如果尝试对不可比较的类型进行比较\",{\"1\":{\"568\":1}}],[\"如果可以被随意修改的话\",{\"1\":{\"1052\":1}}],[\"如果read\",{\"1\":{\"1049\":1}}],[\"如果访问到的entry是expunged\",{\"1\":{\"1047\":1}}],[\"如果访问的\",{\"1\":{\"1047\":1}}],[\"如果p\",{\"1\":{\"1047\":1}}],[\"如果protobuf文件中没有定义service\",{\"1\":{\"201\":1}}],[\"如果负载因子没有超过阈值\",{\"1\":{\"1043\":1}}],[\"如果旧桶已经被搬迁了就不去旧桶里面找\",{\"1\":{\"1042\":1}}],[\"如果旧桶已经被搬迁了就不找了\",{\"1\":{\"1042\":1}}],[\"如果阈值高了\",{\"1\":{\"1041\":1}}],[\"如果阈值低了\",{\"1\":{\"1041\":1}}],[\"如果元素确实是最后一个元素的话\",{\"1\":{\"1039\":1}}],[\"如果存放的是元素指针\",{\"1\":{\"1038\":1}}],[\"如果存放的是key指针的话\",{\"1\":{\"1038\":1}}],[\"如果存在的话就直接返回\",{\"1\":{\"1046\":1}}],[\"如果存在就更新\",{\"1\":{\"1038\":1}}],[\"如果存在语法错误的话\",{\"1\":{\"17\":1}}],[\"如果tophash相等的话\",{\"1\":{\"1038\":1}}],[\"如果当前有其它协程需要等待运行完成\",{\"1\":{\"1178\":1}}],[\"如果当前读者协程是最后一个活跃的读者\",{\"1\":{\"1162\":1}}],[\"如果当前协程自旋被唤醒\",{\"1\":{\"1153\":1}}],[\"如果当前协程已经处于饥饿状态\",{\"1\":{\"1153\":1}}],[\"如果当前协程栈还未被扫描过时\",{\"1\":{\"1144\":1}}],[\"如果当前协程正在使用的\",{\"1\":{\"1089\":1}}],[\"如果当前的微内存块还有足够的空间来容纳\",{\"1\":{\"1124\":1}}],[\"如果当前的内存块的剩余空间不足以容纳就会创建一个新的内存块\",{\"1\":{\"1112\":1}}],[\"如果当前的defer已经被其它的panic触发了\",{\"1\":{\"1079\":1}}],[\"如果当前defer语句不在循环中\",{\"1\":{\"1074\":1}}],[\"如果当前正处于扩容状态\",{\"1\":{\"1042\":1}}],[\"如果当前元素不是最后一个可用的\",{\"1\":{\"1039\":1}}],[\"如果当前元素是空的就跳过\",{\"1\":{\"1037\":1}}],[\"如果当前桶内下标是空的\",{\"1\":{\"1038\":1}}],[\"如果当前桶的位置与起始位置相等\",{\"1\":{\"1037\":1}}],[\"如果当前切片的容量不足以足以容纳\",{\"1\":{\"1024\":1}}],[\"如果键也相等的话就说明找到了元素\",{\"1\":{\"1036\":1}}],[\"如果高八位相等的话\",{\"1\":{\"1036\":1}}],[\"如果相等的话\",{\"1\":{\"1036\":1}}],[\"如果大于\",{\"1\":{\"1034\":1}}],[\"如果预先分配了空闲溢出桶\",{\"1\":{\"1034\":1}}],[\"如果源代码中尝试使用遍历来清空数组\",{\"1\":{\"1027\":1}}],[\"如果说新容量太大导致计算时数值溢出\",{\"1\":{\"1025\":1}}],[\"如果计算得到内存大于32kb\",{\"1\":{\"1020\":1}}],[\"如果条件检查失败了\",{\"1\":{\"1020\":1}}],[\"如果太大会导致数值溢出\",{\"1\":{\"1020\":1}}],[\"如果需要的话就调用runtime\",{\"1\":{\"1101\":1}}],[\"如果需要更新key值的话\",{\"1\":{\"1038\":1}}],[\"如果需要多个实例\",{\"1\":{\"1016\":1}}],[\"如果需要可以通过下面的代码来引入\",{\"1\":{\"168\":1}}],[\"如果调用一次就能完成绑定的话\",{\"1\":{\"975\":1}}],[\"如果您需要性能和良好的生产力\",{\"1\":{\"962\":1}}],[\"如果觉得错误信息太冰冷\",{\"1\":{\"952\":1}}],[\"如果觉得文档还不错可以在\",{\"1\":{\"95\":1}}],[\"如果验证失败的错误则返回validationerrors\",{\"1\":{\"942\":1}}],[\"如果验证通过就可以顺利的访问资源\",{\"1\":{\"775\":1}}],[\"如果函数返回值不为\",{\"1\":{\"901\":1}}],[\"如果被引用数据和引用数据都不存在\",{\"1\":{\"897\":1}}],[\"如果key为空\",{\"1\":{\"839\":1}}],[\"如果key不存在\",{\"1\":{\"474\":1}}],[\"如果第二个返回值是func\",{\"1\":{\"823\":1}}],[\"如果读取的值不在候选列表内\",{\"1\":{\"817\":1}}],[\"如果指定的文件存在的话\",{\"1\":{\"792\":1}}],[\"如果指定前缀example\",{\"1\":{\"201\":1}}],[\"如果省略默认eft为allow\",{\"1\":{\"760\":1}}],[\"如果为负数会导致panic\",{\"1\":{\"714\":1}}],[\"如果为空的话则使用默认的处理器\",{\"1\":{\"643\":1}}],[\"如果映射返回负值\",{\"1\":{\"713\":1}}],[\"如果直到子协程退出都没有恢复panic\",{\"1\":{\"606\":1}}],[\"如果直接传入读写互斥锁会导致写协程重复解锁的问题\",{\"1\":{\"482\":1}}],[\"如果错误为nil的话那么就是打开成功\",{\"1\":{\"598\":1}}],[\"如果打开失败函数将会返回一个错误\",{\"1\":{\"598\":1}}],[\"如果出现类型不匹配的情况时\",{\"1\":{\"591\":1}}],[\"如果出现了其他情况\",{\"1\":{\"487\":1}}],[\"如果感兴趣可以自行浏览rangefunc\",{\"1\":{\"582\":1}}],[\"如果开发一个数学工具包\",{\"1\":{\"571\":1}}],[\"如果开启了日志文件存储\",{\"1\":{\"841\":1}}],[\"如果开启了日志控制台输出\",{\"1\":{\"841\":1}}],[\"如果开启了\",{\"1\":{\"540\":1}}],[\"如果底层的类型是不可比较的\",{\"1\":{\"568\":1}}],[\"如果类型不相等\",{\"1\":{\"1070\":1}}],[\"如果类型不匹配的话则为false\",{\"1\":{\"568\":1}}],[\"如果类型实现了string接口也会调用string方法来获取其字符串表现形式\",{\"1\":{\"339\":1}}],[\"如果数据是由\",{\"1\":{\"559\":1,\"560\":1}}],[\"如果别人用了你的库\",{\"1\":{\"547\":1}}],[\"如果这样做的话\",{\"1\":{\"539\":1}}],[\"如果这些数据结构太过庞大\",{\"1\":{\"484\":1}}],[\"如果返回的内存被引用了\",{\"1\":{\"533\":1}}],[\"如果返回reflect\",{\"1\":{\"449\":1}}],[\"如果传递的管道为nil或者已关闭\",{\"1\":{\"1061\":1}}],[\"如果传递的是一个整型\",{\"1\":{\"414\":1}}],[\"如果传入的指针元素包含实体模型比如说结构体指针\",{\"1\":{\"869\":1}}],[\"如果传入的是一个切片\",{\"1\":{\"866\":1}}],[\"如果传入的是非\",{\"1\":{\"527\":1}}],[\"如果传入一个空字符串\",{\"1\":{\"704\":1}}],[\"如果将set的参数换成c\",{\"1\":{\"535\":1}}],[\"如果将其以字节为单位反转后肯定是乱码\",{\"1\":{\"527\":1}}],[\"如果将该教程浏览过一遍后\",{\"1\":{\"287\":1}}],[\"如果加上了\",{\"1\":{\"518\":1}}],[\"如果\",{\"1\":{\"513\":1,\"531\":1,\"540\":1,\"563\":1,\"645\":1,\"705\":1,\"829\":1,\"1047\":1,\"1097\":1,\"1107\":2,\"1121\":1}}],[\"如果符合在下载模块校验时不会走\",{\"1\":{\"511\":1}}],[\"如果符合规则在下载模块时不会走\",{\"1\":{\"511\":1}}],[\"如果模块名符合规则表示该模块为私有模块\",{\"1\":{\"511\":1}}],[\"如果哈希值不一致\",{\"1\":{\"510\":1}}],[\"如果一致的话\",{\"1\":{\"510\":1}}],[\"如果一个元素的键是nan\",{\"1\":{\"1037\":1}}],[\"如果一个类型的底层类型属于该类型集\",{\"1\":{\"574\":1}}],[\"如果一个接口包含多个非空类型集\",{\"1\":{\"574\":1}}],[\"如果一个问题需要根据不同类型做出不同的逻辑\",{\"1\":{\"573\":1}}],[\"如果一个本该分配到栈上的变量被分配到了堆上\",{\"1\":{\"549\":1}}],[\"如果一个字段被弃用\",{\"1\":{\"189\":1}}],[\"如果一个proto文件在新版本中删除了一些编号\",{\"1\":{\"188\":1}}],[\"如果本地和全局队列中都没有找到\",{\"1\":{\"1104\":1}}],[\"如果本地队列没有\",{\"1\":{\"1104\":1}}],[\"如果本地计算出的哈希值与查询得到的结果不一致\",{\"1\":{\"510\":1}}],[\"如果本地安装了\",{\"1\":{\"156\":1}}],[\"如果替换模块具有\",{\"1\":{\"509\":1}}],[\"如果同时有require引用了相同版本的依赖\",{\"1\":{\"509\":1}}],[\"如果版本升级到了\",{\"1\":{\"509\":1}}],[\"如果未开启\",{\"1\":{\"494\":1}}],[\"如果内存值与期望值相同\",{\"1\":{\"490\":1}}],[\"如果该key已存在\",{\"1\":{\"486\":1}}],[\"如果用了不释放那么对象池的使用将毫无意义\",{\"1\":{\"485\":1}}],[\"如果用户查询不到\",{\"1\":{\"167\":1}}],[\"如果小于\",{\"1\":{\"482\":1}}],[\"如果获得了写锁\",{\"1\":{\"481\":1}}],[\"如果获得了读锁\",{\"1\":{\"481\":1}}],[\"如果创建了但从来不取消\",{\"1\":{\"478\":1}}],[\"如果创建了一个cancelctx\",{\"1\":{\"477\":1}}],[\"如果所有协程都按照同样的顺序加锁\",{\"1\":{\"1067\":1}}],[\"如果所有的父级都没有实现canceler\",{\"1\":{\"477\":1}}],[\"如果所有case都不可用\",{\"1\":{\"471\":1}}],[\"如果父级实现了canceler\",{\"1\":{\"477\":1}}],[\"如果关闭过后\",{\"1\":{\"474\":1}}],[\"如果是饥饿模式\",{\"1\":{\"1154\":1}}],[\"如果是\",{\"1\":{\"1125\":1}}],[\"如果是一比一的关系\",{\"1\":{\"1085\":1}}],[\"如果是一个切片\",{\"1\":{\"414\":1}}],[\"如果是的话就会直接执行runtime\",{\"1\":{\"1080\":1}}],[\"如果是nil的话就会\",{\"1\":{\"1079\":1}}],[\"如果是被close函数唤醒的\",{\"1\":{\"1067\":1}}],[\"如果是被发送方唤醒的\",{\"1\":{\"1067\":1}}],[\"如果是接收管道数据就会翻译成对runtime\",{\"1\":{\"1066\":1}}],[\"如果是阻塞发送\",{\"1\":{\"1059\":1}}],[\"如果是在栈上分配的话\",{\"1\":{\"1074\":1}}],[\"如果是在非阻塞发送的情况下就会直接返回\",{\"1\":{\"1059\":1}}],[\"如果是在运行时调用\",{\"1\":{\"1026\":1}}],[\"如果是多字节字符的话会调用运行时函数runtime\",{\"1\":{\"1055\":1}}],[\"如果是多维切片\",{\"1\":{\"725\":1}}],[\"如果是下面这种字面量拼接\",{\"1\":{\"1053\":1}}],[\"如果是等量扩容的话就只会创建一个结构体指向新桶\",{\"1\":{\"1043\":1}}],[\"如果是空的就跳过\",{\"1\":{\"1042\":1}}],[\"如果是添加一个临时创建的切片\",{\"1\":{\"1024\":1}}],[\"如果是直接添加一个切片\",{\"1\":{\"1024\":1}}],[\"如果是使用数组来创建切片的话\",{\"1\":{\"1020\":1}}],[\"如果是cardinal或者其他的type且rule配置了one之类的\",{\"1\":{\"953\":1}}],[\"如果是想要覆盖原有的tag的话\",{\"1\":{\"953\":1}}],[\"如果是其他语言的话可以使用第三方社区开源的sdk\",{\"1\":{\"800\":1}}],[\"如果是指针类型\",{\"1\":{\"781\":1}}],[\"如果是用于展示在前端的html文件\",{\"1\":{\"736\":1}}],[\"如果是自动采集\",{\"1\":{\"561\":1}}],[\"如果是手动采集的数据\",{\"1\":{\"561\":1}}],[\"如果是子测试中使用将会panic\",{\"1\":{\"522\":1}}],[\"如果是reflect\",{\"1\":{\"441\":1}}],[\"如果其为零值\",{\"1\":{\"856\":1}}],[\"如果其父目录不存在\",{\"1\":{\"418\":1}}],[\"如果其中一个服务的逻辑处理需要花费很长时间\",{\"1\":{\"169\":1}}],[\"如果文件不存在则创建文件\",{\"1\":{\"416\":1}}],[\"如果单次测试执行时间超过了时间间隔d\",{\"1\":{\"519\":1}}],[\"如果单纯的在结构体中混用值接收者和指针接收者的话无伤大雅\",{\"1\":{\"414\":1}}],[\"如果单节点使用起来没有问题\",{\"1\":{\"141\":1}}],[\"如果参数只有简单几个\",{\"1\":{\"406\":1}}],[\"如果签名不一样那就是两个完全不同的函数\",{\"1\":{\"395\":1}}],[\"如果冲突会触发fatal\",{\"1\":{\"389\":1}}],[\"如果值为空的话\",{\"1\":{\"730\":1}}],[\"如果值为\",{\"1\":{\"385\":1}}],[\"如果事先就知道了要存放数据的长度\",{\"1\":{\"359\":1}}],[\"如果仅仅只是声明而不指定值\",{\"1\":{\"324\":1}}],[\"如果设置为true\",{\"1\":{\"242\":1}}],[\"如果设置为off\",{\"1\":{\"7\":1}}],[\"如果如果过程出错了\",{\"1\":{\"238\":1}}],[\"如果我们只需要生成player目录部分的代码\",{\"1\":{\"193\":1}}],[\"如果和单体应用一样\",{\"1\":{\"172\":1}}],[\"如果连接建立超时\",{\"1\":{\"170\":1}}],[\"如果连接建立失败只会返回一个空的\",{\"1\":{\"170\":1}}],[\"如果想根据测试类型再划分的更细一些也可以将测试类型为作为文件前缀\",{\"1\":{\"517\":1}}],[\"如果想做一些统一的错误处理\",{\"1\":{\"168\":1}}],[\"如果想要绕开类型\",{\"1\":{\"1070\":1}}],[\"如果想要一个接口等于nil\",{\"1\":{\"1070\":1}}],[\"如果想要一个节点退出\",{\"1\":{\"143\":1}}],[\"如果想要获取第\",{\"1\":{\"1030\":1}}],[\"如果想要获取方法的参数和返回值细节\",{\"1\":{\"451\":1}}],[\"如果想要使用\",{\"1\":{\"1017\":1}}],[\"如果想要使连接同步进行\",{\"1\":{\"170\":1}}],[\"如果想要修改实例名称不建议在该文件进行编辑\",{\"1\":{\"1016\":1}}],[\"如果想要多次绑定的话\",{\"1\":{\"975\":1}}],[\"如果想要多数据中心数据同步的话\",{\"1\":{\"144\":1}}],[\"如果想要自行选择可以使用bindwith\",{\"1\":{\"971\":1}}],[\"如果想要自定义结构体排序的话\",{\"1\":{\"688\":1}}],[\"如果想要删除对应的实体记录\",{\"1\":{\"898\":1}}],[\"如果想要添加表注释\",{\"1\":{\"864\":1}}],[\"如果想要忽略掉字段\",{\"1\":{\"828\":1}}],[\"如果想要构造指针类型\",{\"1\":{\"828\":1}}],[\"如果想要填充所有字段\",{\"1\":{\"828\":1}}],[\"如果想要绑定一个接口类型的值\",{\"1\":{\"827\":1}}],[\"如果想要更加灵活的进行错误处理\",{\"1\":{\"971\":1}}],[\"如果想要更细致的了解请前往官网进行学习\",{\"1\":{\"757\":1}}],[\"如果想要更详细的介绍\",{\"1\":{\"529\":1}}],[\"如果想要处理空的情况\",{\"1\":{\"730\":1}}],[\"如果想要对结构体进行序列化与反序列化\",{\"1\":{\"617\":1}}],[\"如果想要对一个文件写入数据\",{\"1\":{\"418\":1}}],[\"如果想要在错误链中找到对应的值或类型\",{\"1\":{\"603\":1}}],[\"如果想要了解更多关于泛型的一些设计理念和细节\",{\"1\":{\"579\":1}}],[\"如果想要了解更多关于泛型的实际案例\",{\"1\":{\"579\":1}}],[\"如果想要关闭这个检查\",{\"1\":{\"533\":1}}],[\"如果想要禁用缓存\",{\"1\":{\"518\":1}}],[\"如果想要进行反射操作\",{\"1\":{\"429\":1}}],[\"如果想要清空切片\",{\"1\":{\"372\":1}}],[\"如果想要交换两个变量的值\",{\"1\":{\"331\":1}}],[\"如果想要包含所有的文件\",{\"1\":{\"201\":1}}],[\"如果想要将该目录下的所有的protobuf文件都编译\",{\"1\":{\"201\":1}}],[\"如果想要控制一个超时时间\",{\"1\":{\"170\":1}}],[\"如果想要从客户端的角度与\",{\"1\":{\"105\":1}}],[\"如果拦截器返回\",{\"1\":{\"165\":2}}],[\"如果后期插件多了命令会显得相当繁琐\",{\"1\":{\"156\":1}}],[\"如果使用后者的话\",{\"1\":{\"984\":1}}],[\"如果使用普通类型\",{\"1\":{\"891\":1}}],[\"如果使用if\",{\"1\":{\"603\":1}}],[\"如果使用互斥锁\",{\"1\":{\"481\":1}}],[\"如果使用闭包而不是延迟调用\",{\"1\":{\"402\":1}}],[\"如果使用其他语言的库\",{\"1\":{\"169\":1}}],[\"如果使用这类\",{\"1\":{\"160\":1}}],[\"如果使用了会自动禁用\",{\"1\":{\"143\":1}}],[\"如果使用第三方服务器的话替换域名即可\",{\"1\":{\"105\":1}}],[\"如果集群中有节点制定了\",{\"1\":{\"143\":1}}],[\"如果只是添加有限个元素\",{\"1\":{\"1024\":1}}],[\"如果只是写一些简短的练习代码\",{\"1\":{\"94\":1}}],[\"如果只有一个字符串的话\",{\"1\":{\"1053\":1}}],[\"如果只有一个协程使用肯定是没有任何问题的\",{\"1\":{\"484\":1}}],[\"如果只有\",{\"1\":{\"143\":1}}],[\"如果在锁竞争不大和持有锁时间很短的的场景下\",{\"1\":{\"1153\":1}}],[\"如果在并发标记的过程中栈对象的引用关系发生了变化\",{\"1\":{\"1142\":1}}],[\"如果在标记时对象图结构发生了改变\",{\"1\":{\"1136\":1}}],[\"如果在defer之外使用recover函数的话gp\",{\"1\":{\"1080\":1}}],[\"如果在扩容的过程中尝试查找数据\",{\"1\":{\"1042\":1}}],[\"如果在tophash末尾\",{\"1\":{\"1039\":1}}],[\"如果在桶内没有找到\",{\"1\":{\"1037\":1}}],[\"如果在后续过程中使用append添加元素\",{\"1\":{\"1019\":1}}],[\"如果在创建\",{\"1\":{\"784\":1}}],[\"如果在规定时间内没有成功建立连接\",{\"1\":{\"170\":1}}],[\"如果在调用panic时参数为nil\",{\"1\":{\"116\":1}}],[\"如果在使用官方服务器的过程中\",{\"1\":{\"112\":1}}],[\"如果有活跃的读者协程的话\",{\"1\":{\"1162\":1}}],[\"如果有协程超过1ms仍未持有锁\",{\"1\":{\"1151\":1}}],[\"如果有的话则会调用runtime\",{\"1\":{\"1137\":1}}],[\"如果有的话则优先使用复用内存块\",{\"1\":{\"1112\":1}}],[\"如果有的话再计算得到空闲内存的偏移量加上mspan的基地址然后返回\",{\"1\":{\"1125\":1}}],[\"如果有的话也建议通过网络通信来代替\",{\"1\":{\"533\":1}}],[\"如果有defaultcase\",{\"1\":{\"1067\":1}}],[\"如果有多个管道可用的话它会随机选一个来执行\",{\"1\":{\"1063\":1}}],[\"如果有多个发送方\",{\"1\":{\"1062\":1}}],[\"如果有多组数据狠起来就不是很直观\",{\"1\":{\"524\":1}}],[\"如果有元素的话还会平白无故的消费掉这个元素\",{\"1\":{\"1062\":1}}],[\"如果有大小写错误的话\",{\"1\":{\"954\":1}}],[\"如果有时间追踪的需要\",{\"1\":{\"856\":1}}],[\"如果有问题的话\",{\"1\":{\"821\":1}}],[\"如果有几十万个协程或者说创建该对象的成本十分的高昂\",{\"1\":{\"485\":1}}],[\"如果有包名重复了\",{\"1\":{\"295\":1}}],[\"如果有\",{\"1\":{\"142\":1}}],[\"如果有任何返回值被隐藏了\",{\"1\":{\"137\":1}}],[\"如果有发现任何错误可以在\",{\"1\":{\"95\":1}}],[\"如果有其他语言的基础\",{\"1\":{\"285\":1}}],[\"如果有其他语言基础就更简单了\",{\"1\":{\"0\":1}}],[\"如果有其它的编辑器更符合自身的使用习惯也都可以用\",{\"1\":{\"94\":1}}],[\"如果有心你也可以参与到语言的设计当中\",{\"1\":{\"88\":1}}],[\"如果有复杂的需求可以使用脚本或者\",{\"1\":{\"40\":1}}],[\"如果要这样做的话那为什么不直接用最初的闭包版本就好了\",{\"1\":{\"583\":1}}],[\"如果要在\",{\"1\":{\"543\":1}}],[\"如果要导出\",{\"1\":{\"533\":1}}],[\"如果要转换的字符串或字节切片很大\",{\"1\":{\"376\":1}}],[\"如果要对转换后的切片进行修改\",{\"1\":{\"362\":1}}],[\"如果要生成grpc代码\",{\"1\":{\"201\":1}}],[\"如果要了解更多测试相关\",{\"1\":{\"38\":1}}],[\"如果要获取简短的使用信息\",{\"1\":{\"3\":1}}],[\"如果没找到\",{\"1\":{\"1117\":1}}],[\"如果没关闭的话就会向里面写入冗余的数据\",{\"1\":{\"1062\":1}}],[\"如果没能按照正确的格式书写结构体\",{\"1\":{\"409\":1}}],[\"如果没有协程需要等待\",{\"1\":{\"1178\":1}}],[\"如果没有协程正在等待\",{\"1\":{\"1154\":1}}],[\"如果没有被唤醒\",{\"1\":{\"1167\":1}}],[\"如果没有锁的保护\",{\"1\":{\"1149\":1}}],[\"如果没有函数调用\",{\"1\":{\"1106\":1}}],[\"如果没有可重复利用的协程\",{\"1\":{\"1100\":1}}],[\"如果没有找到就直接将\",{\"1\":{\"1097\":1}}],[\"如果没有扩容的话相较于源切片只是更新了长度\",{\"1\":{\"1024\":1}}],[\"如果没有默认jsonencoder\",{\"1\":{\"839\":1}}],[\"如果没有waitgroup来阻塞父协程的话\",{\"1\":{\"606\":1}}],[\"如果没有\",{\"1\":{\"527\":1}}],[\"如果没有设置则一直为false\",{\"1\":{\"474\":1}}],[\"如果没有缓冲区则会导致死锁\",{\"1\":{\"465\":1}}],[\"如果没有生成对应语言的定义\",{\"1\":{\"201\":1}}],[\"如果没有指定\",{\"1\":{\"143\":1}}],[\"如果没有需要下载的它会输出\",{\"1\":{\"25\":1}}],[\"如果没问题就输出all\",{\"1\":{\"29\":1}}],[\"如果你传入的是\",{\"1\":{\"1015\":1}}],[\"如果你阅读完了上面的所有内容\",{\"1\":{\"903\":1}}],[\"如果你打算修改数据\",{\"1\":{\"756\":1}}],[\"如果你能接受\",{\"1\":{\"598\":1}}],[\"如果你仅仅只是想要一个拉取式迭代器\",{\"1\":{\"583\":1}}],[\"如果你真的将语法篇和进阶篇都仔细阅读完了\",{\"1\":{\"609\":1}}],[\"如果你真的想通过此种方法来节省内存\",{\"1\":{\"410\":1}}],[\"如果你真的这么做了\",{\"1\":{\"309\":1}}],[\"如果你觉得在传递切片或\",{\"1\":{\"396\":1}}],[\"如果你学过\",{\"1\":{\"341\":1}}],[\"如果你使用的\",{\"1\":{\"240\":2}}],[\"如果你使用的是\",{\"1\":{\"193\":1}}],[\"如果你不会请先自行学习\",{\"1\":{\"230\":1}}],[\"如果你不满足于\",{\"1\":{\"88\":1}}],[\"如果你没有\",{\"1\":{\"218\":1}}],[\"如果你是\",{\"1\":{\"204\":1,\"683\":1}}],[\"如果你是强\",{\"1\":{\"95\":1}}],[\"如果你对逃逸分析的细节感兴趣\",{\"1\":{\"550\":1}}],[\"如果你对\",{\"1\":{\"203\":1}}],[\"如果你有其他语言基础学起来会非常简单\",{\"1\":{\"95\":1}}],[\"如果你正在使用\",{\"1\":{\"94\":1}}],[\"如果你想返回一个零值\",{\"1\":{\"1070\":1}}],[\"如果你想要进行微服务开发\",{\"1\":{\"610\":1}}],[\"如果你想要在网页中下载数据文件\",{\"1\":{\"557\":1}}],[\"如果你想要下载某一个依赖\",{\"1\":{\"25\":1}}],[\"如果你想以多种方式实例化结构体\",{\"1\":{\"405\":1}}],[\"如果你想使用\",{\"1\":{\"230\":1}}],[\"如果你想了解如何用\",{\"1\":{\"93\":1}}],[\"如果你想了解如何给\",{\"1\":{\"88\":1}}],[\"如果你只是单纯的不想让某个文件不参加编译\",{\"1\":{\"12\":1}}],[\"如果过程中发生错误则忽略它继续执行\",{\"1\":{\"24\":1}}],[\"如果迭代的是模块\",{\"1\":{\"21\":1}}],[\"如果涉及到主版本的改变\",{\"1\":{\"18\":1}}],[\"如果不是饥饿模式\",{\"1\":{\"1153\":1}}],[\"如果不是标准库的\",{\"1\":{\"44\":1}}],[\"如果不为0\",{\"1\":{\"1178\":1}}],[\"如果不为饥饿模式\",{\"1\":{\"1153\":1}}],[\"如果不为空则跳到第\",{\"1\":{\"1060\":1}}],[\"如果不能进行自旋\",{\"1\":{\"1153\":1}}],[\"如果不够的话\",{\"1\":{\"1124\":1}}],[\"如果不够的话就会由mheap\",{\"1\":{\"1122\":1}}],[\"如果不熟悉\",{\"1\":{\"1009\":1}}],[\"如果不想使用默认的中间件也可以使用gin\",{\"1\":{\"992\":1}}],[\"如果不想直接发送\",{\"1\":{\"162\":1}}],[\"如果不使用slicedata\",{\"1\":{\"753\":1}}],[\"如果不懂什么是内存对齐\",{\"1\":{\"750\":1}}],[\"如果不将其捕获的话\",{\"1\":{\"604\":1}}],[\"如果不去手动释放\",{\"1\":{\"543\":1}}],[\"如果不导入的话就无法使用\",{\"1\":{\"533\":1}}],[\"如果不遵循此规则的模块被称为不规范模块\",{\"1\":{\"509\":1}}],[\"如果不成功的话就不断循环\",{\"1\":{\"490\":1}}],[\"如果不采用对象池的话\",{\"1\":{\"485\":1}}],[\"如果不采用对象池\",{\"1\":{\"485\":1}}],[\"如果不存在返回nil\",{\"1\":{\"795\":1}}],[\"如果不存在\",{\"1\":{\"450\":2}}],[\"如果不指定策略的话默认只选取第一个服务\",{\"1\":{\"175\":1}}],[\"如果不需要的话就继续执行用户代码\",{\"1\":{\"1106\":1}}],[\"如果不需要\",{\"1\":{\"174\":1}}],[\"如果不会\",{\"1\":{\"151\":1}}],[\"如果不带任何参数\",{\"1\":{\"25\":1}}],[\"如果不允许任何\",{\"1\":{\"7\":1}}],[\"如果不做任何限制\",{\"1\":{\"7\":1}}],[\"如果项目文件包含go\",{\"1\":{\"7\":1}}],[\"将该白色对象标记为灰色\",{\"1\":{\"1142\":1}}],[\"将该字段传给runtime\",{\"1\":{\"1092\":1}}],[\"将它们染黑\",{\"1\":{\"1137\":1}}],[\"将灰色对象标记为黑色\",{\"1\":{\"1135\":1}}],[\"将未标记的对象回收\",{\"1\":{\"1134\":1}}],[\"将未标记的对象进行回收\",{\"1\":{\"1130\":1}}],[\"将对象着色\",{\"1\":{\"1130\":1}}],[\"将对象从\",{\"1\":{\"1123\":1}}],[\"将旧内存中的所有对象全部回收\",{\"1\":{\"1130\":1}}],[\"将旧栈内存通过runtime\",{\"1\":{\"1101\":1}}],[\"将活动对象复制到新的内存中\",{\"1\":{\"1130\":1}}],[\"将活动的对象做标记\",{\"1\":{\"1130\":1}}],[\"将执行权让给其它的\",{\"1\":{\"1104\":1}}],[\"将执行追踪情况写入文件\",{\"1\":{\"519\":1}}],[\"将runtime\",{\"1\":{\"1095\":1}}],[\"将调度器的freem指向当前\",{\"1\":{\"1092\":1}}],[\"将调用链赋值给context\",{\"1\":{\"995\":1}}],[\"将不再会被使用\",{\"1\":{\"1088\":1}}],[\"将不会覆盖原配置文件\",{\"1\":{\"792\":1}}],[\"将不会生成随机的测试数据\",{\"1\":{\"527\":1}}],[\"将不会更新\",{\"1\":{\"18\":1}}],[\"将要发送的数据放入缓冲区\",{\"1\":{\"1067\":1}}],[\"将缓冲区头部元素出队\",{\"1\":{\"1060\":2}}],[\"将头部元素出队并复制其内存到接收方目标元素\",{\"1\":{\"1060\":1}}],[\"将部分元素搬迁从旧桶搬到新桶\",{\"1\":{\"1042\":1}}],[\"将桶中的\",{\"1\":{\"1040\":1}}],[\"将所有因写屏障拦截的标记操作全部批量的执行\",{\"1\":{\"1140\":1}}],[\"将所有的协程都分配到一个内核线程上\",{\"1\":{\"1085\":1}}],[\"将所有的tophash元素置为emptyrest\",{\"1\":{\"1040\":1}}],[\"将所有合并\",{\"1\":{\"843\":1}}],[\"将状态为emptyone的更新为emptyrest\",{\"1\":{\"1039\":1}}],[\"将状态为emptyone的元素更新为emptyrest\",{\"1\":{\"1039\":1}}],[\"将key的内存直接复制到insertk的位置\",{\"1\":{\"1038\":1}}],[\"将计算得出的top与tophash中的元素进行对比\",{\"1\":{\"1036\":1}}],[\"将内存空间向上取整\",{\"1\":{\"1034\":1}}],[\"将预计容量与桶类型的内存大小相乘\",{\"1\":{\"1034\":1}}],[\"将预期结果修改为错误的结果\",{\"1\":{\"521\":1}}],[\"将这些注释写在go\",{\"1\":{\"1016\":1}}],[\"将中间件注册为全局中间件即可\",{\"1\":{\"1000\":1}}],[\"将服务端推送流写入响应流中\",{\"1\":{\"981\":1}}],[\"将data写入响应流中\",{\"1\":{\"981\":1}}],[\"将请求委派给给予的处理器\",{\"1\":{\"960\":1}}],[\"将平时频繁使用的功能进行了封装\",{\"1\":{\"924\":1}}],[\"将查询到的数据映射到结构体中\",{\"1\":{\"869\":1}}],[\"将列定义为唯一键\",{\"1\":{\"862\":1}}],[\"将列定义为主键\",{\"1\":{\"862\":1}}],[\"将当前锁的状态设置为mutexwoken\",{\"1\":{\"1154\":1}}],[\"将当前\",{\"1\":{\"1096\":1}}],[\"将当前线程阻塞在notesleep\",{\"1\":{\"1093\":1}}],[\"将当前tophash标记为空\",{\"1\":{\"1039\":1}}],[\"将当前配置按照特定的格式序列化成字符串以便存入配置文件\",{\"1\":{\"798\":1}}],[\"将当前的配置写入指定文件\",{\"1\":{\"792\":1}}],[\"将分隔符设置为\",{\"1\":{\"796\":1}}],[\"将配置写入原配置文件\",{\"1\":{\"792\":1}}],[\"将配置写入原配置文件中\",{\"1\":{\"792\":1}}],[\"将配置安全的写入原配置文件中\",{\"1\":{\"792\":1}}],[\"将默认决策留给应用程序\",{\"1\":{\"791\":1}}],[\"将返回一个\",{\"1\":{\"775\":1}}],[\"将资源赋予不同的角色\",{\"1\":{\"766\":1}}],[\"将unsafe\",{\"1\":{\"751\":2}}],[\"将被阻塞\",{\"1\":{\"743\":1}}],[\"将一个字符串时间按照一定格式转换为\",{\"1\":{\"740\":1}}],[\"将一直为保持向下兼容而努力\",{\"1\":{\"113\":1}}],[\"将两个模板关联以后\",{\"1\":{\"735\":1}}],[\"将英文字符串转换成大写字符串\",{\"1\":{\"717\":1}}],[\"将英文字符串英文小写字符串\",{\"1\":{\"717\":1}}],[\"将字符串\",{\"1\":{\"716\":4}}],[\"将字符串转换为\",{\"1\":{\"527\":1}}],[\"将字符串转换成字节切片以后\",{\"1\":{\"376\":1}}],[\"将json字符串反序列化为go对象\",{\"1\":{\"624\":1}}],[\"将x转换为类型\",{\"1\":{\"595\":2}}],[\"将c转换为类型\",{\"1\":{\"595\":1}}],[\"将p转换为类型\",{\"1\":{\"595\":1}}],[\"将泛型引入项目后\",{\"1\":{\"571\":1}}],[\"将此前收集到的数据文件作为参数\",{\"1\":{\"559\":1}}],[\"将无法区分这些参数该如何注入\",{\"1\":{\"830\":1}}],[\"将无法支持交叉编译\",{\"1\":{\"530\":1}}],[\"将无法再被用作其他字段的编号和名称\",{\"1\":{\"188\":1}}],[\"将性能敏感的任务交给\",{\"1\":{\"529\":1}}],[\"将测试用例标记为可并行运行\",{\"1\":{\"523\":1}}],[\"将依赖按照\",{\"1\":{\"514\":1}}],[\"将暂时用不到的对象放入池中\",{\"1\":{\"485\":1}}],[\"将上面的读写互斥锁的例子稍微修改下即可\",{\"1\":{\"482\":1}}],[\"将上面的代码稍微修改下\",{\"1\":{\"451\":1}}],[\"将双向管道传给某个协程或函数并且不希望它读取\",{\"1\":{\"469\":1}}],[\"将创建失败并会返回错误\",{\"1\":{\"418\":1}}],[\"将已写入的数据归入切片\",{\"1\":{\"417\":1}}],[\"将文件读进传入的字节切片\",{\"1\":{\"417\":1}}],[\"将长度修改为\",{\"1\":{\"368\":1}}],[\"将数据应用到模板中\",{\"1\":{\"723\":1}}],[\"将数据添加到文件末尾\",{\"1\":{\"416\":1}}],[\"将数据转换成人类可以阅读的格式\",{\"1\":{\"56\":1}}],[\"将数组作为参数传递给函数时\",{\"1\":{\"359\":1}}],[\"将给定集合的并集保存在结果集里\",{\"1\":{\"272\":1}}],[\"将给定集合的交集保存在结果集里\",{\"1\":{\"272\":1}}],[\"将给定集合的差集保存在结果集里\",{\"1\":{\"272\":1}}],[\"将年龄为\",{\"1\":{\"227\":1}}],[\"将名为\",{\"1\":{\"227\":1}}],[\"将会覆盖掉a的配置\",{\"1\":{\"794\":1}}],[\"将会返回错误\",{\"1\":{\"792\":1}}],[\"将会浪费大量的时间\",{\"1\":{\"758\":1}}],[\"将会分配一个新的内存给复制的副本\",{\"1\":{\"704\":1}}],[\"将会是false\",{\"1\":{\"603\":1}}],[\"将会到处都充斥着if\",{\"1\":{\"598\":1}}],[\"将会引发panic\",{\"1\":{\"472\":1}}],[\"将会阻塞等待\",{\"1\":{\"471\":1}}],[\"将会永远阻塞下去\",{\"1\":{\"467\":1}}],[\"将会留到并发那一节再做介绍\",{\"1\":{\"347\":1}}],[\"将会无法通过编译\",{\"1\":{\"324\":1,\"469\":1}}],[\"将会按照顺序保留重复值\",{\"1\":{\"187\":1}}],[\"将会被序列化\",{\"1\":{\"187\":1}}],[\"将消息放入消息队列中\",{\"1\":{\"158\":1}}],[\"将以\",{\"1\":{\"143\":1}}],[\"将自身注册到\",{\"1\":{\"142\":1}}],[\"将\",{\"1\":{\"138\":1,\"163\":1,\"539\":1,\"560\":1,\"705\":1,\"718\":5,\"751\":1,\"1038\":1,\"1040\":1,\"1096\":1,\"1098\":1}}],[\"将最后一个可用溢出桶的溢出指针指向哈希桶的头部\",{\"1\":{\"1034\":1}}],[\"将最后的修改打印出来\",{\"1\":{\"34\":1}}],[\"将最大线程数限制在了\",{\"1\":{\"135\":1}}],[\"将其标记为灰色就等于不再视其为垃圾对象\",{\"1\":{\"1143\":1}}],[\"将其加入全局的\",{\"1\":{\"1138\":1}}],[\"将其内存空间释放或是复用\",{\"1\":{\"1134\":1}}],[\"将其初始化好后就可以分配给mcache使用\",{\"1\":{\"1117\":1}}],[\"将其本地队列中所有的\",{\"1\":{\"1089\":1}}],[\"将其作为全局\",{\"1\":{\"1089\":1}}],[\"将其作为默认的\",{\"1\":{\"144\":1}}],[\"将其中的数据搬到新桶中\",{\"1\":{\"1042\":1}}],[\"将其赋值给迭代器的key\",{\"1\":{\"1037\":1}}],[\"将其赋值给\",{\"1\":{\"1034\":1}}],[\"将其分为了三组\",{\"1\":{\"526\":1}}],[\"将其取名为\",{\"1\":{\"495\":1}}],[\"将其解压指定的路径\",{\"1\":{\"90\":1}}],[\"将其替换为标准库中的context包\",{\"1\":{\"16\":1}}],[\"将导致指针越界\",{\"1\":{\"533\":1}}],[\"将导致\",{\"1\":{\"24\":1}}],[\"将go对象序列化为json字符串\",{\"1\":{\"624\":1}}],[\"将go源代码解析成抽象语法树的包\",{\"1\":{\"616\":1}}],[\"将golang\",{\"1\":{\"130\":1}}],[\"将go\",{\"1\":{\"22\":1}}],[\"将通过\",{\"1\":{\"7\":1}}],[\"将某一个环境变量名作为参数可以只输出该变量的值\",{\"1\":{\"7\":1}}],[\"就表示现在没有写者协程正在工作\",{\"1\":{\"1159\":1}}],[\"就释放信号量唤醒下一个等待的协程\",{\"1\":{\"1154\":1}}],[\"就尝试获取锁\",{\"1\":{\"1153\":1}}],[\"就直接返回\",{\"1\":{\"1178\":1}}],[\"就直接释放信号量\",{\"1\":{\"1154\":1}}],[\"就直接抢夺锁\",{\"1\":{\"1152\":1}}],[\"就直接使用当前内存块\",{\"1\":{\"1124\":1}}],[\"就避免了一些协程长时间无法持有锁而\",{\"1\":{\"1151\":1}}],[\"就代表着标记结束\",{\"1\":{\"1135\":1}}],[\"就代表非阻塞\",{\"1\":{\"1067\":1}}],[\"就到非空闲列表的未清扫集合去寻找\",{\"1\":{\"1117\":1}}],[\"就在空闲列表的未清扫集合中寻找可用的mspan\",{\"1\":{\"1117\":1}}],[\"就没法检测了\",{\"1\":{\"1106\":1}}],[\"就没有必要使用类型声明了\",{\"1\":{\"594\":1}}],[\"就很少会出现\",{\"1\":{\"1104\":1}}],[\"就如下图所示\",{\"1\":{\"1103\":1}}],[\"就如context\",{\"1\":{\"477\":1}}],[\"就再申请一片新的栈空间\",{\"1\":{\"1103\":1}}],[\"就再去溢出桶里面找\",{\"1\":{\"1037\":1}}],[\"就已经将runtime\",{\"1\":{\"1096\":1}}],[\"就成功退出了\",{\"1\":{\"1092\":1}}],[\"就这样\",{\"1\":{\"1151\":1}}],[\"就这样一直循环到执行完属于当前函数的所有defer结束为止\",{\"1\":{\"1075\":1}}],[\"就这么简单的一句描述但它实现起来却非常不简单\",{\"1\":{\"1130\":1}}],[\"就这个周末应该可以吧\",{\"1\":{\"158\":4}}],[\"就开始了真正的处理阶段\",{\"1\":{\"1067\":1}}],[\"就知道要去新桶里面找对应的数据\",{\"1\":{\"1042\":1}}],[\"就知道在哪里查找配置文件\",{\"1\":{\"791\":1}}],[\"就进行一次部分搬迁工作\",{\"1\":{\"1042\":1}}],[\"就重置哈希种子\",{\"1\":{\"1039\":1}}],[\"就选取该位置插入\",{\"1\":{\"1038\":1}}],[\"就移动指针返回k对应下标的元素\",{\"1\":{\"1036\":1}}],[\"就指向该溢出桶\",{\"1\":{\"1034\":1}}],[\"就将新对象也标记为灰色\",{\"1\":{\"1144\":1}}],[\"就将状态置为emptyone\",{\"1\":{\"1039\":1}}],[\"就将key的内存直接复制到k处\",{\"1\":{\"1038\":1}}],[\"就将\",{\"1\":{\"1034\":1}}],[\"就将其回收\",{\"1\":{\"1130\":1}}],[\"就将其交给runtime\",{\"1\":{\"1104\":1}}],[\"就将其命名为function\",{\"1\":{\"517\":1}}],[\"就将其作为协议传输的序列化机制\",{\"1\":{\"180\":1}}],[\"就说明整个\",{\"1\":{\"1042\":1}}],[\"就说明分配了额外的溢出桶\",{\"1\":{\"1034\":1}}],[\"就说明对应下标存在正常的键值\",{\"1\":{\"1030\":1}}],[\"就说明它是\",{\"1\":{\"141\":1}}],[\"就分配指定大小的内存\",{\"1\":{\"1025\":1}}],[\"就有可能会把绿色切片和蓝色切片的数据覆盖\",{\"1\":{\"1019\":1}}],[\"就有点类似于\",{\"1\":{\"39\":1}}],[\"就等于是在获取其字段值\",{\"1\":{\"1019\":1}}],[\"就等同于下面这段代码\",{\"1\":{\"331\":1}}],[\"就算删除引用后会导致该对象不可达也就是成为垃圾对象时\",{\"1\":{\"1143\":1}}],[\"就算它实现了该接口\",{\"1\":{\"1070\":1}}],[\"就算不写在函数上也一样能解析\",{\"1\":{\"1017\":1}}],[\"就算多了或者少了一个斜杠\",{\"1\":{\"954\":1}}],[\"就算开发人员水平再差也能兜底\",{\"1\":{\"88\":1}}],[\"就应该使用tx来操作\",{\"1\":{\"902\":1}}],[\"就根据文件路径切片加入书写器\",{\"1\":{\"841\":1}}],[\"就加入控制台书写器\",{\"1\":{\"841\":1}}],[\"就最好别用这个\",{\"1\":{\"756\":1}}],[\"就允许将一种t2类型的数据转换为t1\",{\"1\":{\"751\":1}}],[\"就允许有交集\",{\"1\":{\"575\":1}}],[\"就必须要手动指定一个其他的分隔符\",{\"1\":{\"796\":1}}],[\"就必须实现三个方法\",{\"1\":{\"688\":1}}],[\"就必须使用stop函数来结束迭代\",{\"1\":{\"583\":1}}],[\"就必须初始化所有字段\",{\"1\":{\"405\":1}}],[\"就掌握了通用接口\",{\"1\":{\"569\":1}}],[\"就跳过测试\",{\"1\":{\"527\":1}}],[\"就足矣\",{\"1\":{\"499\":1}}],[\"就返回原有的值\",{\"1\":{\"486\":1}}],[\"就能确保不会出太大的问题\",{\"1\":{\"1062\":1}}],[\"就能访问到一些类型的内部元素\",{\"1\":{\"751\":1}}],[\"就能够实现链式调用\",{\"1\":{\"586\":1}}],[\"就能够快速开启一个协程\",{\"1\":{\"462\":1}}],[\"就能正常修改myint的值\",{\"1\":{\"414\":1}}],[\"就只会有两种下场\",{\"1\":{\"1153\":1}}],[\"就只需要拷贝这个指针\",{\"1\":{\"414\":1}}],[\"就只能对每一个\",{\"1\":{\"387\":1}}],[\"就可能会发生如下情况\",{\"1\":{\"479\":1}}],[\"就可能会导致内存占用突然暴涨\",{\"1\":{\"401\":1}}],[\"就可以让线程跳到执行现场继续执行\",{\"1\":{\"1092\":1}}],[\"就可以退出循环了\",{\"1\":{\"1039\":1}}],[\"就可以赋值了\",{\"1\":{\"1038\":1}}],[\"就可以开始查找元素了\",{\"1\":{\"1038\":1}}],[\"就可以开启一个异步协程\",{\"1\":{\"88\":1}}],[\"就可以展开查找了\",{\"1\":{\"1036\":1}}],[\"就可以进行自定义的操作了\",{\"1\":{\"1016\":1}}],[\"就可以编写一个简单的请求时间统计中间件\",{\"1\":{\"996\":1}}],[\"就可以编译出能在其它平台上运行的程序\",{\"1\":{\"88\":1}}],[\"就可以指定表明\",{\"1\":{\"855\":1}}],[\"就可以通过头部所指明的签名算法根据前两个部分的内容再加上密钥进行加密签名\",{\"1\":{\"774\":1}}],[\"就可以通过c\",{\"1\":{\"534\":1}}],[\"就可以看到堆栈信息了\",{\"1\":{\"603\":1}}],[\"就可以看到正常的执行结果了\",{\"1\":{\"523\":1}}],[\"就可以做到原本无法通过编译的类型转换操作\",{\"1\":{\"597\":1}}],[\"就可以初始化接口了\",{\"1\":{\"567\":1}}],[\"就可以访问\",{\"1\":{\"540\":1}}],[\"就可以访问数组中对应的元素\",{\"1\":{\"361\":1}}],[\"就可以很好的解决上述的问题\",{\"1\":{\"532\":1}}],[\"就可以直接获得锁\",{\"1\":{\"1153\":1}}],[\"就可以直接在test目录下执行如下命令\",{\"1\":{\"518\":1}}],[\"就可以直接传递一个匿名函数\",{\"1\":{\"398\":1}}],[\"就可以将修改提交并推送到远程仓库\",{\"1\":{\"499\":1}}],[\"就可以用到单向管道来限制另一方的行为\",{\"1\":{\"469\":1}}],[\"就可以清空\",{\"1\":{\"387\":1}}],[\"就可以考虑使用数组\",{\"1\":{\"359\":1}}],[\"就可以使用自定义的中文名来替代英文单词\",{\"1\":{\"952\":1}}],[\"就可以使用下划线\",{\"1\":{\"330\":1}}],[\"就可以使用该指令来表示\",{\"1\":{\"46\":1}}],[\"就可以打开一个数据库连接\",{\"1\":{\"232\":1}}],[\"就可以如下声明\",{\"1\":{\"198\":1}}],[\"就可以浏览\",{\"1\":{\"141\":1}}],[\"就可以知晓有没有走代理\",{\"1\":{\"7\":1}}],[\"就需要持有一个全局锁\",{\"1\":{\"1050\":1}}],[\"就需要创建一个同等容量的新\",{\"1\":{\"1043\":1}}],[\"就需要修正一下桶链表中部分桶的\",{\"1\":{\"1039\":1}}],[\"就需要遍历更多的溢出桶链表\",{\"1\":{\"1032\":1}}],[\"就需要安装什么驱动\",{\"1\":{\"851\":1}}],[\"就需要传入自定义\",{\"1\":{\"784\":1}}],[\"就需要让一个闭包函数在执行defer\",{\"1\":{\"582\":1}}],[\"就需要我们对其进行性能分析\",{\"1\":{\"548\":1}}],[\"就需要先将其类型转换至字节切片\",{\"1\":{\"1054\":1}}],[\"就需要先将其类型转换为interface\",{\"1\":{\"429\":1}}],[\"就需要先将其转为unsafe\",{\"1\":{\"543\":1}}],[\"就需要使用额外加入version来解决问题\",{\"1\":{\"490\":1}}],[\"就需要用到reflect\",{\"1\":{\"430\":1}}],[\"就需要在当前协程申请一片内存空间\",{\"1\":{\"401\":1}}],[\"就需要实现数据库驱动\",{\"1\":{\"231\":1}}],[\"就变成了while\",{\"1\":{\"354\":1}}],[\"就建议使用bufio\",{\"1\":{\"345\":1}}],[\"就请自行探索\",{\"1\":{\"217\":1}}],[\"就跟写普通的代码一样\",{\"1\":{\"731\":1}}],[\"就跟\",{\"1\":{\"543\":1,\"727\":1}}],[\"就跟import\",{\"1\":{\"536\":1}}],[\"就跟内存分配后不回收会造成内存泄漏一样\",{\"1\":{\"478\":1}}],[\"就跟平时\",{\"1\":{\"216\":1}}],[\"就跟发\",{\"1\":{\"207\":1}}],[\"就跟嵌套结构体一样\",{\"1\":{\"191\":1}}],[\"就换个版本\",{\"1\":{\"204\":1}}],[\"就得到了\",{\"1\":{\"175\":1}}],[\"就此在整个链路中进行传递\",{\"1\":{\"171\":1}}],[\"就形成了一个服务调用链\",{\"1\":{\"169\":1}}],[\"就类似\",{\"1\":{\"160\":1}}],[\"就类似于现在的go\",{\"1\":{\"28\":1}}],[\"就关闭连接\",{\"1\":{\"159\":1}}],[\"就相当于把上例中的两个服务结合成一个\",{\"1\":{\"159\":1}}],[\"就是加锁和解锁\",{\"1\":{\"1150\":1}}],[\"就是专用于分配大于\",{\"1\":{\"1114\":1}}],[\"就是无法重新利用已释放的内存\",{\"1\":{\"1111\":1}}],[\"就是会十分频繁的触发栈扩容和缩容\",{\"1\":{\"1103\":1}}],[\"就是采用\",{\"1\":{\"1084\":1}}],[\"就是最为典型的一个面向消息的编程语言\",{\"1\":{\"1084\":1}}],[\"就是将新对象标记为灰色\",{\"1\":{\"1144\":1}}],[\"就是将原对象标记为灰色\",{\"1\":{\"1144\":1}}],[\"就是将defer函数的代码展开到当前函数代码中\",{\"1\":{\"1076\":1}}],[\"就是将上述几个语句结合起来\",{\"1\":{\"875\":1}}],[\"就是判断oldbuckets是否为不为空\",{\"1\":{\"1042\":1}}],[\"就是哈希桶\",{\"1\":{\"1039\":1}}],[\"就是走到哈希桶数组的末尾了\",{\"1\":{\"1037\":1}}],[\"就是\",{\"1\":{\"1037\":1}}],[\"就是指向的第一个哈希桶的地址\",{\"1\":{\"1030\":1}}],[\"就是指定模块的源代码\",{\"1\":{\"507\":1}}],[\"就是第\",{\"1\":{\"1030\":1}}],[\"就是返回表名\",{\"1\":{\"855\":1}}],[\"就是不加where的update\",{\"1\":{\"852\":1}}],[\"就是做的这样一件简单的事情\",{\"1\":{\"823\":1}}],[\"就是由用户来控制迭代逻辑\",{\"1\":{\"583\":1}}],[\"就是迭代器的回调函数yiled\",{\"1\":{\"582\":1}}],[\"就是sum\",{\"1\":{\"545\":1}}],[\"就是只写通道\",{\"1\":{\"469\":1}}],[\"就是只读通道\",{\"1\":{\"469\":1}}],[\"就是当值接收者是可寻址的时候\",{\"1\":{\"414\":1}}],[\"就是append最原始的用法\",{\"1\":{\"366\":1}}],[\"就是数据库的连接地址\",{\"1\":{\"232\":1}}],[\"就是索引\",{\"1\":{\"187\":1}}],[\"就是服务名\",{\"1\":{\"175\":1}}],[\"就是一组方法的集合\",{\"1\":{\"564\":1}}],[\"就是一个类型形参\",{\"1\":{\"571\":1}}],[\"就是一个很不错的选择\",{\"1\":{\"175\":1}}],[\"就是一个模拟的注册中心\",{\"1\":{\"175\":1}}],[\"就是一只蓝色的土拨鼠\",{\"1\":{\"87\":1}}],[\"就是如下形式\",{\"1\":{\"174\":1}}],[\"就是格式化代码的替换规则\",{\"1\":{\"17\":1}}],[\"就不会发送死锁问题\",{\"1\":{\"1067\":1}}],[\"就不会创建溢出桶\",{\"1\":{\"1034\":1}}],[\"就不会在运行时偏移指针来获取值\",{\"1\":{\"1021\":1}}],[\"就不会有影响\",{\"1\":{\"1019\":1}}],[\"就不会生成对应文件\",{\"1\":{\"201\":1}}],[\"就不做过多的解释\",{\"1\":{\"945\":1}}],[\"就不太适合这么做\",{\"1\":{\"531\":1}}],[\"就不太可信\",{\"1\":{\"526\":1}}],[\"就不太可能再去声明变量来创建测试数据\",{\"1\":{\"524\":1}}],[\"就不存在上述问题了\",{\"1\":{\"480\":1}}],[\"就不用再进行之前的操作了\",{\"1\":{\"387\":1}}],[\"就不用实现mustembedunimplementedsayhelloserver方法\",{\"1\":{\"152\":1}}],[\"就不再需要去二次扫描栈空间了\",{\"1\":{\"1144\":1}}],[\"就不再需要操作符了\",{\"1\":{\"227\":1}}],[\"就不再赘述了\",{\"1\":{\"1039\":1}}],[\"就不再赘述\",{\"1\":{\"418\":1,\"891\":1}}],[\"就不再做过多的赘述\",{\"1\":{\"13\":1}}],[\"就不一样了\",{\"1\":{\"43\":1,\"543\":1}}],[\"就像函数内联一样\",{\"1\":{\"1076\":1}}],[\"就像下面例子所演示的一样\",{\"1\":{\"1083\":1}}],[\"就像下面的代码一样\",{\"1\":{\"1069\":1}}],[\"就像下面这张图一样\",{\"1\":{\"1019\":1}}],[\"就像下面这个行迭代器的例子一样\",{\"1\":{\"584\":1}}],[\"就像下面这样\",{\"1\":{\"166\":1,\"405\":1}}],[\"就像上图一样\",{\"1\":{\"1019\":1}}],[\"就像是springboot一样\",{\"1\":{\"955\":1}}],[\"就像是访问一个类型的成员变量一样\",{\"1\":{\"725\":1}}],[\"就像是一个阻塞队列一样\",{\"1\":{\"467\":1}}],[\"就像\",{\"1\":{\"587\":1}}],[\"就像平常一样使用recovery即可\",{\"1\":{\"584\":1}}],[\"就像这个斐波那契数列的例子一样\",{\"1\":{\"583\":1}}],[\"就像图中那样\",{\"1\":{\"169\":1}}],[\"就像其它语言的\",{\"1\":{\"37\":1}}],[\"就像隔壁\",{\"1\":{\"28\":1}}],[\"就会添加到全局积分gccontroller\",{\"1\":{\"1139\":1}}],[\"就会偿还定量的积分给当前协程\",{\"1\":{\"1139\":1}}],[\"就会再去mcentral中去申请\",{\"1\":{\"1125\":1}}],[\"就会先尝试从mcache的\",{\"1\":{\"1124\":1}}],[\"就会由链式分配mheap\",{\"1\":{\"1120\":1}}],[\"就会由runtime\",{\"1\":{\"1060\":1}}],[\"就会在堆上分配内存\",{\"1\":{\"1120\":1}}],[\"就会在栈上分配\",{\"1\":{\"1074\":1}}],[\"就会开始抢占\",{\"1\":{\"1107\":1}}],[\"就会开辟一片与字符串长度相当的内存\",{\"1\":{\"1054\":1}}],[\"就会强制触发抢占\",{\"1\":{\"1107\":1}}],[\"就会通过runtime\",{\"1\":{\"1102\":1}}],[\"就会通过代理来访问校验数据库\",{\"1\":{\"7\":1}}],[\"就会去其它\",{\"1\":{\"1104\":1}}],[\"就会去stacklarge缓存中获取\",{\"1\":{\"1100\":1}}],[\"就会去本地的线程缓存中获取\",{\"1\":{\"1100\":1}}],[\"就会去查看缓冲区是否有等待消费的元素\",{\"1\":{\"1060\":1}}],[\"就会选择为其分配一个新的栈空间\",{\"1\":{\"1100\":1}}],[\"就会调用runtime\",{\"1\":{\"1093\":1,\"1153\":1}}],[\"就会进入runtime\",{\"1\":{\"1079\":1}}],[\"就会按照顺序将函数中的defer从链表的头部加入\",{\"1\":{\"1073\":1}}],[\"就会查看sendq队列是否有协程正在等待发送\",{\"1\":{\"1060\":1}}],[\"就会尝试从网络轮询器中获取\",{\"1\":{\"1104\":1}}],[\"就会尝试获取锁来进行接下来的操作\",{\"1\":{\"1047\":1}}],[\"就会尝试扩容\",{\"1\":{\"1024\":1}}],[\"就会直接向mheap申请分配一个新的mspan来容纳\",{\"1\":{\"1126\":1}}],[\"就会直接在栈上创建defer结构体\",{\"1\":{\"1074\":1}}],[\"就会直接fatal\",{\"1\":{\"1054\":1}}],[\"就会直接返回\",{\"1\":{\"1047\":1}}],[\"就会直接panic\",{\"1\":{\"1020\":1}}],[\"就会加一\",{\"1\":{\"1042\":1}}],[\"就会加上\",{\"1\":{\"509\":1}}],[\"就会导致查找时间增大\",{\"1\":{\"1042\":1}}],[\"就会导致上游一直处于等待状态\",{\"1\":{\"169\":1}}],[\"就会做多余的工作\",{\"1\":{\"1041\":1}}],[\"就会发生\",{\"1\":{\"1036\":1}}],[\"就会发生panic\",{\"1\":{\"468\":1}}],[\"就会展开成如下形式的代码\",{\"1\":{\"1026\":1}}],[\"就会展现数据类型的原有形式\",{\"1\":{\"1013\":1}}],[\"就会用到函数runtime\",{\"1\":{\"1026\":1}}],[\"就会将互斥锁切换回正常模式\",{\"1\":{\"1151\":1}}],[\"就会将缓存中的对象放入本地队列中\",{\"1\":{\"1145\":1}}],[\"就会将其分配到栈上\",{\"1\":{\"1074\":1}}],[\"就会将其分配到堆上\",{\"1\":{\"1020\":1}}],[\"就会将其放入环形队列缓冲区中\",{\"1\":{\"1059\":1}}],[\"就会将当前旧桶键值数据全部内存清除\",{\"1\":{\"1042\":1}}],[\"就会将配置加到对应的\",{\"1\":{\"953\":1}}],[\"就会将自身添加进父级的children中\",{\"1\":{\"477\":1}}],[\"就会批量创建\",{\"1\":{\"866\":1}}],[\"就会使用指定的列名\",{\"1\":{\"854\":1}}],[\"就会使用本地的\",{\"1\":{\"512\":1}}],[\"就会生成wire\",{\"1\":{\"823\":1}}],[\"就会生成一个名为main\",{\"1\":{\"15\":1}}],[\"就会收到消息并关闭\",{\"1\":{\"741\":1}}],[\"就会让人十分头疼\",{\"1\":{\"620\":1}}],[\"就会有空集\",{\"1\":{\"574\":1}}],[\"就会有反射\",{\"1\":{\"427\":1}}],[\"就会出现这样的页面\",{\"1\":{\"557\":1}}],[\"就会出现错误\",{\"1\":{\"414\":1}}],[\"就会忽略这类结构体成员\",{\"1\":{\"540\":1}}],[\"就会panic\",{\"1\":{\"519\":1,\"1025\":1}}],[\"就会缓存测试结果\",{\"1\":{\"518\":1}}],[\"就会拒绝构建\",{\"1\":{\"510\":1}}],[\"就会更新go\",{\"1\":{\"510\":1}}],[\"就会执行else块的内容\",{\"1\":{\"732\":1}}],[\"就会执行后续的操作\",{\"1\":{\"490\":1}}],[\"就会执行default分支\",{\"1\":{\"350\":1,\"471\":1}}],[\"就会停止遍历\",{\"1\":{\"486\":1}}],[\"就会一直阻塞等待\",{\"1\":{\"482\":1}}],[\"就会启动一个协程等待父级取消\",{\"1\":{\"477\":1}}],[\"就会永久阻塞\",{\"1\":{\"471\":1}}],[\"就会阻塞等待\",{\"1\":{\"470\":1}}],[\"就会像栈一样先进后出的顺序执行\",{\"1\":{\"400\":1}}],[\"就会变为切片类型\",{\"1\":{\"362\":1}}],[\"就会回滚\",{\"1\":{\"238\":1}}],[\"就会返回nil\",{\"1\":{\"474\":1}}],[\"就会返回\",{\"1\":{\"170\":1,\"1060\":1}}],[\"就会以列表模式进行测试\",{\"1\":{\"38\":1}}],[\"就会产生对象文件\",{\"1\":{\"15\":1}}],[\"就拿最开始的拿两个文件举例\",{\"1\":{\"12\":1}}],[\"当等待协程被唤醒后\",{\"1\":{\"1178\":1}}],[\"当胜者成功持有锁后\",{\"1\":{\"1173\":1}}],[\"当条件满足时\",{\"1\":{\"1165\":1}}],[\"当标记终止时\",{\"1\":{\"1145\":1}}],[\"当标记工作开始时\",{\"1\":{\"1137\":1}}],[\"当混合写屏障拦截到写操作时\",{\"1\":{\"1144\":1}}],[\"当从灰色或白色对象删除对白色对象的引用时\",{\"1\":{\"1143\":1}}],[\"当给黑色对象添加了一个新的白色对象引用时\",{\"1\":{\"1142\":1}}],[\"当没有任何全局任务和本地任务要执行后\",{\"1\":{\"1140\":1}}],[\"当没有设置特定的文件后缀名时\",{\"1\":{\"791\":1}}],[\"当所有可达的灰色对象都被染黑了过后\",{\"1\":{\"1140\":1}}],[\"当所有case都不匹配后\",{\"1\":{\"350\":1}}],[\"当积分为正数时\",{\"1\":{\"1139\":1}}],[\"当黑色对象直接引用白色对象时\",{\"1\":{\"1136\":1}}],[\"当灰色对象集合为空时\",{\"1\":{\"1135\":1}}],[\"当全部访问完后会转变为黑色\",{\"1\":{\"1135\":1}}],[\"当mcache中没有足够的空间时\",{\"1\":{\"1125\":1}}],[\"当minor版本变化时\",{\"1\":{\"505\":1}}],[\"当内存分配成功后\",{\"1\":{\"1123\":1}}],[\"当内存不足时向mheap申请分配一个新的mspan\",{\"1\":{\"1117\":1}}],[\"当内存足够时向mcache分配可用的mspan\",{\"1\":{\"1117\":1}}],[\"当class值为\",{\"1\":{\"1114\":1}}],[\"当class为\",{\"1\":{\"1114\":1}}],[\"当clear函数作用于切片时\",{\"1\":{\"1027\":1}}],[\"当空转协程运行一定时间后就会被强制执行调度循环\",{\"1\":{\"1107\":1}}],[\"当信号成功发送后\",{\"1\":{\"1107\":1}}],[\"当g\",{\"1\":{\"1106\":1}}],[\"当找到并返回了一个\",{\"1\":{\"1104\":1}}],[\"当这些函数返回时\",{\"1\":{\"1103\":1}}],[\"当这个项目在另一个人的环境中构建时\",{\"1\":{\"510\":1}}],[\"当栈空间的空闲内存所剩无几时\",{\"1\":{\"1103\":1}}],[\"当栈空间不够用的时候就需要扩容\",{\"1\":{\"1101\":1}}],[\"当栈空间不足时会进行增长\",{\"1\":{\"543\":1}}],[\"当系统调用返回后\",{\"1\":{\"1097\":1}}],[\"当协程持有锁后\",{\"1\":{\"1151\":1}}],[\"当协程栈全黑时\",{\"1\":{\"1144\":1}}],[\"当协程\",{\"1\":{\"1097\":1}}],[\"当协程执行函数时\",{\"1\":{\"1073\":1}}],[\"当被唤醒过后该函数就会返回\",{\"1\":{\"1093\":1}}],[\"当被唤醒后就会进入接下来的收尾流程\",{\"1\":{\"1059\":1}}],[\"当因为调度器调度\",{\"1\":{\"1093\":1}}],[\"当它为空串时表示当前正在运行的协程可以被抢占\",{\"1\":{\"1087\":1}}],[\"当它的值与旧桶的数量相等时\",{\"1\":{\"1042\":1}}],[\"当它的参数是一个函数类型时\",{\"1\":{\"398\":1}}],[\"当今时代的计算机几乎都是多核\",{\"1\":{\"1085\":1}}],[\"当执行完全部的defer结构后且期间没有被恢复\",{\"1\":{\"1079\":1}}],[\"当执行的参数有多个包时\",{\"1\":{\"518\":1}}],[\"当遇到不可恢复的错误时\",{\"1\":{\"1077\":1}}],[\"当结构体的接收者为指针接收者时\",{\"1\":{\"1071\":1}}],[\"当试图对一个变量赋值nil时\",{\"1\":{\"1070\":1}}],[\"当存放的是非指针元素时分配在连续的内存上就避免了不必要的扫描\",{\"1\":{\"1058\":1}}],[\"当拼接的字符串变量小于\",{\"1\":{\"1053\":1}}],[\"当字符串中的字符是非\",{\"1\":{\"1052\":1}}],[\"当次数累计到一定的值后\",{\"1\":{\"1045\":1}}],[\"当遍历的时间远小于计算哈希的时间时\",{\"1\":{\"1042\":1}}],[\"当哈希冲突比较严重的时候\",{\"1\":{\"1042\":1}}],[\"当负载因子过大时\",{\"1\":{\"1042\":1}}],[\"当负载因子越小时\",{\"1\":{\"1032\":1}}],[\"当负载因子越大时\",{\"1\":{\"1032\":1}}],[\"当回到了最开始的桶时\",{\"1\":{\"1039\":1}}],[\"当数量减为\",{\"1\":{\"1039\":1}}],[\"当数据量过大时\",{\"1\":{\"866\":1}}],[\"当数据量小的时候无伤大雅\",{\"1\":{\"524\":1}}],[\"当键值被疏散到了其它位置后\",{\"1\":{\"1037\":1}}],[\"当再次回到起始位置时\",{\"1\":{\"1037\":1}}],[\"当两者不相等时\",{\"1\":{\"1034\":1}}],[\"当两个键通过哈希后被分配到了同一个\",{\"1\":{\"1032\":1}}],[\"当两个数字使用^时\",{\"1\":{\"299\":1}}],[\"当两个结构体进行类型转换时\",{\"1\":{\"129\":1}}],[\"当计数为\",{\"1\":{\"1130\":1}}],[\"当计数变为负数\",{\"1\":{\"472\":1}}],[\"当计算结果数值溢出了\",{\"1\":{\"1034\":1}}],[\"当切片为nil的时候\",{\"1\":{\"1071\":1}}],[\"当切片很大时拷贝内存带来性能的影响并不小\",{\"1\":{\"1026\":1}}],[\"当切片较大时\",{\"1\":{\"1025\":1}}],[\"当切片的长度是一个变量的时候\",{\"1\":{\"553\":1}}],[\"当方法绑定的路由是\",{\"1\":{\"956\":1}}],[\"当元素为结构体时\",{\"1\":{\"944\":1}}],[\"当传入非法的值或者传入值为nil时\",{\"1\":{\"942\":1}}],[\"当传入时也依旧会无法通过编译\",{\"1\":{\"574\":1}}],[\"当指定的字段全部不存在时\",{\"1\":{\"936\":2}}],[\"当指定的字段有一个不存在时\",{\"1\":{\"936\":2}}],[\"当指定的字段有一个存在时\",{\"1\":{\"936\":2}}],[\"当指定的所有字段存在时\",{\"1\":{\"936\":2}}],[\"当指定时间到了以后\",{\"1\":{\"741\":1}}],[\"当包含createdat或updatedat字段时\",{\"1\":{\"856\":1}}],[\"当包名为testdata时\",{\"1\":{\"517\":1}}],[\"当作为目标结构体时\",{\"1\":{\"812\":2,\"813\":1}}],[\"当作全局变量使用\",{\"1\":{\"600\":1}}],[\"当想要指定的\",{\"1\":{\"796\":1}}],[\"当访问嵌套配置的时候通过\",{\"1\":{\"791\":1}}],[\"当在自定义\",{\"1\":{\"781\":1}}],[\"当在使用一些数据结构时\",{\"1\":{\"484\":1}}],[\"当开始解析时填充此字段\",{\"1\":{\"778\":2}}],[\"当开启一个事务后\",{\"1\":{\"238\":1}}],[\"当用户使用凭据成功登录时\",{\"1\":{\"775\":1}}],[\"当长度为\",{\"1\":{\"732\":1}}],[\"当对一个接口类型的值进行相等运算的时候\",{\"1\":{\"1070\":1}}],[\"当对一个无缓冲管道直接进行同步读写操作都会导致该协程阻塞\",{\"1\":{\"468\":1}}],[\"当对\",{\"1\":{\"1057\":1}}],[\"当对builder\",{\"1\":{\"719\":1}}],[\"当子协程发生panic时\",{\"1\":{\"606\":2}}],[\"当发生冲突的键的数量大于桶的容量后\",{\"1\":{\"1032\":1}}],[\"当发生fatal时\",{\"1\":{\"608\":1}}],[\"当发生panic时\",{\"1\":{\"606\":1,\"607\":1}}],[\"当发生索引下标越界时\",{\"1\":{\"124\":1}}],[\"当初始化数据库连接失败时\",{\"1\":{\"605\":1}}],[\"当输出错误堆栈信息时\",{\"1\":{\"605\":1}}],[\"当程序中存在多个协程时\",{\"1\":{\"604\":1}}],[\"当上层调用者想要判断错误的类型来做出不同的处理时\",{\"1\":{\"602\":1}}],[\"当上下文所做的工作应该取消时\",{\"1\":{\"474\":1}}],[\"当类型变得越来越复杂时\",{\"1\":{\"592\":1}}],[\"当调用者不再使用迭代器后\",{\"1\":{\"583\":1}}],[\"当调用cancelfunc时\",{\"1\":{\"477\":1}}],[\"当迭代结束时next函数会返回元素的零值和false\",{\"1\":{\"583\":1}}],[\"当队列为空时\",{\"1\":{\"577\":1}}],[\"当如下情况时\",{\"1\":{\"563\":1}}],[\"当确认以后不会再用到它时\",{\"1\":{\"553\":1}}],[\"当反转函数返回error时\",{\"1\":{\"527\":1}}],[\"当参数不带\",{\"1\":{\"527\":1}}],[\"当单位为x时\",{\"1\":{\"519\":1}}],[\"当测试的标志参数位于以下集合中时\",{\"1\":{\"518\":1}}],[\"当主版本大于\",{\"1\":{\"509\":1}}],[\"当patch版本发生变化时\",{\"1\":{\"505\":1}}],[\"当package参数不为空时\",{\"1\":{\"38\":1}}],[\"当\",{\"1\":{\"505\":1,\"513\":1,\"946\":1,\"1034\":1,\"1036\":1,\"1039\":1,\"1071\":1,\"1100\":1,\"1102\":1,\"1104\":1,\"1137\":1}}],[\"当不再需要某一个依赖时\",{\"1\":{\"503\":1}}],[\"当不带package参数执行test命令时\",{\"1\":{\"38\":1}}],[\"当一些情况下\",{\"1\":{\"751\":1}}],[\"当一个协程尝试申请若干大小的内存\",{\"1\":{\"1139\":1}}],[\"当一个类型位于一个接口的类型集内\",{\"1\":{\"563\":1}}],[\"当一个类型的方法集是一个接口的方法集的超集时\",{\"1\":{\"563\":1}}],[\"当一个程序编写完毕后\",{\"1\":{\"548\":1}}],[\"当一个库被引用过后\",{\"1\":{\"500\":1}}],[\"当一切代码都编写并测试完毕过后\",{\"1\":{\"499\":1}}],[\"当f\",{\"1\":{\"486\":1}}],[\"当真正用到切片的时候\",{\"1\":{\"484\":2}}],[\"当第三个写协程更新完数据后\",{\"1\":{\"482\":1}}],[\"当done管道没有关闭时\",{\"1\":{\"474\":1}}],[\"当select语句中什么都没有时\",{\"1\":{\"471\":1}}],[\"当无法成功读取数据时\",{\"1\":{\"470\":1}}],[\"当尝试对只读的管道写入数据时\",{\"1\":{\"469\":1}}],[\"当管道容量是\",{\"1\":{\"1058\":1}}],[\"当管道\",{\"1\":{\"471\":1}}],[\"当管道缓冲区为空或无缓冲时\",{\"1\":{\"470\":1}}],[\"当管道为nil时\",{\"1\":{\"468\":2}}],[\"当管道的缓冲区已满\",{\"1\":{\"468\":1}}],[\"当管道有了缓冲区\",{\"1\":{\"467\":1}}],[\"当读取一个缓冲区为空的管道时\",{\"1\":{\"468\":1}}],[\"当需要偿还的积分过多时\",{\"1\":{\"1139\":1}}],[\"当需要进行垃圾回收时\",{\"1\":{\"1107\":1}}],[\"当需要升级最新版本时\",{\"1\":{\"503\":1}}],[\"当需要修改反射值时\",{\"1\":{\"430\":1}}],[\"当需要访问类型相关信息时\",{\"1\":{\"430\":1}}],[\"当目录不为空时会返回错误\",{\"1\":{\"421\":1}}],[\"当以os\",{\"1\":{\"418\":1}}],[\"当容量不足时\",{\"1\":{\"417\":1}}],[\"当打开的时候截断可写的文件\",{\"1\":{\"416\":1}}],[\"当打印非常深的运行时调用栈时\",{\"1\":{\"116\":1}}],[\"当写入文件时\",{\"1\":{\"416\":1}}],[\"当省略字段名称时\",{\"1\":{\"405\":1}}],[\"当外部请求数突然激增时\",{\"1\":{\"401\":1}}],[\"当有多个case可用时\",{\"1\":{\"471\":1}}],[\"当有多个\",{\"1\":{\"400\":1}}],[\"当有多个同类型的具名返回值时\",{\"1\":{\"397\":1}}],[\"当函数将要返回或者发生panic时\",{\"1\":{\"1075\":1}}],[\"当函数返回true迭代器会继续迭代\",{\"1\":{\"582\":1}}],[\"当函数没有返回值时\",{\"1\":{\"397\":1}}],[\"当函数的有具名返回值时\",{\"1\":{\"137\":1}}],[\"当原\",{\"1\":{\"365\":2}}],[\"当成功读取到值时\",{\"1\":{\"486\":1}}],[\"当成功的打开文件后\",{\"1\":{\"417\":1}}],[\"当成功运行后\",{\"1\":{\"141\":1}}],[\"当成while来使用\",{\"1\":{\"354\":1}}],[\"当只保留循环条件时\",{\"1\":{\"354\":1}}],[\"当涉及到函数调用时\",{\"1\":{\"331\":1}}],[\"当要声明多个不同类型的变量时\",{\"1\":{\"328\":1}}],[\"当要声明多个相同类型的变量时\",{\"1\":{\"328\":1}}],[\"当导入多个包时\",{\"1\":{\"295\":1}}],[\"当枚举项内部存在相同值的枚举项时\",{\"1\":{\"190\":1}}],[\"当状态为\",{\"1\":{\"168\":1}}],[\"当客户端请求sendmessage\",{\"1\":{\"158\":1}}],[\"当客户端发送receivemessage\",{\"1\":{\"158\":1}}],[\"当然它还支持字段限制\",{\"1\":{\"1014\":1}}],[\"当然它也可以是通配符或者表达力更强的正则表达式\",{\"1\":{\"762\":1}}],[\"当然返回err时\",{\"1\":{\"971\":1}}],[\"当然一般情况都是使用f直接转换小数的格式最多\",{\"1\":{\"698\":1}}],[\"当然如果想加上参数名和返回值名也是允许的\",{\"1\":{\"565\":1}}],[\"当然不是这样\",{\"1\":{\"410\":1}}],[\"当然也有一些缺点\",{\"1\":{\"849\":1}}],[\"当然也有开源的自建模块代理方案\",{\"1\":{\"7\":1}}],[\"当然也可以通过reflect\",{\"1\":{\"753\":1}}],[\"当然也可以使用log\",{\"1\":{\"649\":1}}],[\"当然也可以自定义配置一个服务端\",{\"1\":{\"644\":1}}],[\"当然也可以忽略不管\",{\"1\":{\"599\":1}}],[\"当然也可以单独指定某一个测试文件来执行\",{\"1\":{\"518\":1}}],[\"当然也可以一边发送一边接收\",{\"1\":{\"158\":1}}],[\"当然\",{\"1\":{\"156\":1,\"1019\":1}}],[\"当然并非所有指令都是用来影响编译的\",{\"1\":{\"39\":1}}],[\"当前有n个活跃读者协程\",{\"1\":{\"1156\":1}}],[\"当前没有活跃的读者协程\",{\"1\":{\"1156\":1}}],[\"当前读写锁既没有读写协程活跃也没有写者协程活跃\",{\"1\":{\"1156\":1}}],[\"当前解锁的协程将直接将锁的所有权交给下一个等待的协程\",{\"1\":{\"1154\":1}}],[\"当前p的本地队列必须空的\",{\"1\":{\"1153\":1}}],[\"当前锁已经被持有且不能处于饥饿状态\",{\"1\":{\"1153\":1}}],[\"当前为空闲状态\",{\"1\":{\"1138\":1}}],[\"当前时间\",{\"1\":{\"1132\":1}}],[\"当前内存块的剩余可用字节数\",{\"1\":{\"1112\":1}}],[\"当前协程会进入阻塞队列等待\",{\"1\":{\"1161\":1}}],[\"当前协程因为一些原因挂起的时候\",{\"1\":{\"1098\":1}}],[\"当前协程就必须阻塞等待\",{\"1\":{\"467\":1}}],[\"当前的读者协程需要阻塞等待释放写锁\",{\"1\":{\"1156\":1}}],[\"当前的\",{\"1\":{\"1153\":1}}],[\"当前的dirty就会转变为read\",{\"1\":{\"1045\":1}}],[\"当前的一个快照\",{\"1\":{\"1037\":1}}],[\"当前不能正在扩容\",{\"1\":{\"1041\":1}}],[\"当前正在遍历的\",{\"1\":{\"1037\":1}}],[\"当前元素是空的\",{\"1\":{\"1030\":2}}],[\"当前切片较小时\",{\"1\":{\"1025\":1}}],[\"当前函数及其后续调用链所消耗的资源总和\",{\"1\":{\"559\":1}}],[\"当前程序执行情况的跟踪\",{\"1\":{\"557\":1}}],[\"当前程序的命令行调用\",{\"1\":{\"557\":1}}],[\"当前上下文找不到就去父上下文找\",{\"1\":{\"476\":1}}],[\"当前计数为\",{\"1\":{\"467\":2}}],[\"当前目录\",{\"1\":{\"424\":2}}],[\"当前请求都会结束\",{\"1\":{\"159\":1}}],[\"当前\",{\"1\":{\"157\":2,\"1104\":1}}],[\"当前版本的\",{\"1\":{\"134\":1}}],[\"当前文件只有一个main\",{\"1\":{\"20\":1}}],[\"当前模块以及当前模式的所有依赖\",{\"1\":{\"9\":1}}],[\"当使用的栈空间不足原有的\",{\"1\":{\"1102\":1}}],[\"当使用for\",{\"1\":{\"1055\":1}}],[\"当使用copy函数拷贝切片时\",{\"1\":{\"1026\":1}}],[\"当使用type关键字声明了一个新的类型时\",{\"1\":{\"574\":1}}],[\"当使用完对象后\",{\"1\":{\"485\":1}}],[\"当使用\",{\"1\":{\"20\":1,\"507\":1}}],[\"当使用go\",{\"1\":{\"15\":1}}],[\"当你想要复用到另一个字段上时\",{\"1\":{\"948\":1}}],[\"当你在下载依赖时\",{\"1\":{\"493\":1}}],[\"当你不需要某一个变量时\",{\"1\":{\"330\":1}}],[\"当你导入后\",{\"1\":{\"295\":1}}],[\"当你从redis连接池获取一个连接之后\",{\"1\":{\"242\":1}}],[\"当你使用go\",{\"1\":{\"18\":1}}],[\"当你设置了代理后\",{\"1\":{\"7\":1}}],[\"开放编码\",{\"0\":{\"1076\":1},\"1\":{\"1076\":1}}],[\"开\",{\"0\":{\"669\":1}}],[\"开了\",{\"1\":{\"486\":1}}],[\"开箱即用\",{\"1\":{\"486\":1}}],[\"开始时\",{\"1\":{\"1157\":1}}],[\"开始时立即执行\",{\"1\":{\"1138\":1}}],[\"开始之前建议可以阅读一下httprouter\",{\"1\":{\"966\":1}}],[\"开始一个事务\",{\"1\":{\"238\":1}}],[\"开始\",{\"1\":{\"187\":1,\"1134\":1}}],[\"开头的\",{\"1\":{\"160\":1}}],[\"开头的文件夹存在\",{\"1\":{\"41\":1}}],[\"开源仓库\",{\"1\":{\"219\":1,\"810\":1,\"848\":1}}],[\"开源地址\",{\"1\":{\"104\":1,\"139\":1,\"156\":1,\"178\":1,\"558\":1}}],[\"开源的语言中立\",{\"1\":{\"629\":1}}],[\"开源的依赖注入库\",{\"1\":{\"67\":1}}],[\"开源的高性能日志库\",{\"1\":{\"54\":1}}],[\"开源的\",{\"1\":{\"52\":1,\"84\":3,\"821\":1}}],[\"开源同时提供企业版服务\",{\"1\":{\"7\":1}}],[\"开发模式\",{\"1\":{\"839\":1}}],[\"开发难度\",{\"1\":{\"617\":1}}],[\"开发是\",{\"1\":{\"610\":1}}],[\"开发上确实会比较方便\",{\"1\":{\"571\":1}}],[\"开发过程中\",{\"1\":{\"513\":1}}],[\"开发过程中最常用的了\",{\"1\":{\"18\":1}}],[\"开发\",{\"0\":{\"610\":1},\"1\":{\"493\":1,\"611\":1,\"615\":1}}],[\"开发人员不太需要关注底层实现就能做出一个相当不错的并发应用\",{\"1\":{\"461\":1}}],[\"开发的\",{\"1\":{\"140\":1}}],[\"开发的方方面面\",{\"1\":{\"2\":1}}],[\"开发者十年的循环变量问题\",{\"1\":{\"1028\":1}}],[\"开发者可以自定义实现很多功能和逻辑\",{\"1\":{\"992\":1}}],[\"开发者可以将逻辑写入此方法中\",{\"1\":{\"989\":1}}],[\"开发者友好\",{\"1\":{\"849\":1}}],[\"开发者友好的\",{\"1\":{\"52\":1}}],[\"开发者通过调用实际生成的\",{\"1\":{\"823\":1}}],[\"开发者只需要专注于构建应用程序\",{\"1\":{\"788\":1}}],[\"开发者就难受了\",{\"1\":{\"579\":1}}],[\"开发者用的顺手\",{\"1\":{\"579\":1}}],[\"开发者的\",{\"1\":{\"147\":1}}],[\"开发者接近十年的问题\",{\"1\":{\"116\":1}}],[\"开发团队非常固执己见\",{\"1\":{\"88\":1}}],[\"开发框架\",{\"0\":{\"83\":1},\"1\":{\"83\":1}}],[\"开发工具箱\",{\"1\":{\"73\":1}}],[\"开启服务器\",{\"1\":{\"965\":1}}],[\"开启事务后\",{\"1\":{\"902\":1}}],[\"开启\",{\"1\":{\"530\":1}}],[\"开启测试覆盖率分析\",{\"1\":{\"519\":1}}],[\"开启了\",{\"1\":{\"530\":1}}],[\"开启了十个协程来对count进行+1操作\",{\"1\":{\"479\":1}}],[\"开启了两个子协程来模拟两个人的聊天过程\",{\"1\":{\"159\":1}}],[\"开启一个新的协程去异步处理该连接\",{\"1\":{\"682\":1}}],[\"开启一个新的协程\",{\"1\":{\"471\":1}}],[\"开启两个协程\",{\"1\":{\"159\":1}}],[\"开启后性能可能会提升\",{\"1\":{\"116\":1}}],[\"开启的情况下\",{\"1\":{\"19\":1}}],[\"开启此项后\",{\"1\":{\"8\":1}}],[\"开启代码覆盖检测\",{\"1\":{\"8\":1}}],[\"开启地址分析\",{\"1\":{\"8\":1}}],[\"开启内存分析\",{\"1\":{\"8\":1}}],[\"开启竞态检测\",{\"1\":{\"8\":1}}],[\"86\",{\"1\":{\"1114\":1}}],[\"8600\",{\"1\":{\"141\":1}}],[\"88\",{\"1\":{\"1114\":2}}],[\"88999\",{\"1\":{\"700\":1}}],[\"8+48\",{\"1\":{\"1067\":1}}],[\"8+4+2+1+4=19\",{\"1\":{\"410\":1}}],[\"8编码\",{\"1\":{\"1051\":1}}],[\"82\",{\"1\":{\"1114\":2}}],[\"828125\",{\"1\":{\"912\":1}}],[\"824961375\",{\"1\":{\"847\":1}}],[\"825794\",{\"1\":{\"526\":1}}],[\"8a2e\",{\"1\":{\"677\":1}}],[\"8439803\",{\"1\":{\"527\":1}}],[\"84m\",{\"1\":{\"526\":1}}],[\"841\",{\"1\":{\"526\":1}}],[\"8µ\",{\"1\":{\"526\":1}}],[\"896\",{\"1\":{\"1114\":2}}],[\"890625\",{\"1\":{\"912\":1}}],[\"89\",{\"1\":{\"700\":1}}],[\"895571\",{\"1\":{\"527\":1}}],[\"894\",{\"1\":{\"526\":3}}],[\"894723200\",{\"1\":{\"526\":1}}],[\"891566\",{\"1\":{\"132\":2}}],[\"875\",{\"1\":{\"912\":2}}],[\"87\",{\"1\":{\"388\":1,\"1114\":2}}],[\"8709\",{\"1\":{\"141\":3}}],[\"8c92s0hl\",{\"1\":{\"907\":1}}],[\"8c\",{\"1\":{\"380\":1}}],[\"81920\",{\"1\":{\"1114\":1}}],[\"8192\",{\"1\":{\"1114\":45}}],[\"817909650\",{\"1\":{\"526\":1}}],[\"81\",{\"1\":{\"354\":1,\"388\":1}}],[\"8000\",{\"1\":{\"1003\":1}}],[\"803738317757009\",{\"1\":{\"911\":1}}],[\"80ghz\",{\"1\":{\"909\":1}}],[\"80\",{\"1\":{\"349\":3,\"795\":1,\"1011\":2,\"1114\":3}}],[\"8081\",{\"1\":{\"175\":1}}],[\"8080\",{\"1\":{\"41\":4,\"145\":2,\"153\":1,\"154\":1,\"174\":2,\"175\":2,\"503\":2,\"557\":3,\"559\":1,\"560\":4,\"561\":1,\"643\":1,\"644\":1,\"645\":2,\"646\":1,\"678\":1,\"679\":1,\"824\":2,\"955\":2,\"956\":1,\"960\":1,\"965\":2,\"968\":3,\"969\":3,\"970\":3,\"971\":1,\"972\":1,\"973\":1,\"974\":1,\"977\":2,\"980\":2,\"982\":2,\"984\":2,\"985\":2,\"986\":2,\"989\":2,\"990\":2,\"991\":2,\"993\":3,\"994\":2,\"996\":2,\"998\":1,\"999\":1,\"1007\":2,\"1008\":1,\"1071\":1}}],[\"83\",{\"1\":{\"1114\":1}}],[\"83i\",{\"1\":{\"303\":1}}],[\"8300\",{\"1\":{\"141\":1}}],[\"8302\",{\"1\":{\"141\":2,\"144\":5}}],[\"8301\",{\"1\":{\"141\":2,\"143\":4,\"144\":5}}],[\"8p\",{\"1\":{\"302\":1}}],[\"8ms\",{\"1\":{\"242\":1}}],[\"85\",{\"1\":{\"1114\":1}}],[\"8565u\",{\"1\":{\"909\":1}}],[\"85a3\",{\"1\":{\"677\":1}}],[\"8512000\",{\"1\":{\"208\":2}}],[\"8503\",{\"1\":{\"141\":1}}],[\"8502\",{\"1\":{\"141\":1}}],[\"8500\",{\"1\":{\"141\":2,\"143\":3,\"145\":3}}],[\"8kb\",{\"1\":{\"135\":1,\"1114\":1}}],[\"8\",{\"0\":{\"129\":1},\"1\":{\"7\":6,\"16\":2,\"28\":2,\"41\":2,\"87\":2,\"117\":1,\"127\":1,\"129\":4,\"137\":1,\"168\":1,\"205\":1,\"208\":1,\"209\":1,\"316\":2,\"319\":1,\"325\":1,\"341\":1,\"344\":2,\"354\":12,\"356\":1,\"357\":6,\"365\":1,\"366\":4,\"367\":3,\"368\":6,\"369\":2,\"371\":5,\"382\":1,\"392\":1,\"399\":1,\"410\":3,\"434\":2,\"456\":1,\"462\":2,\"467\":2,\"470\":1,\"472\":1,\"480\":1,\"486\":2,\"503\":2,\"509\":2,\"510\":13,\"525\":5,\"526\":28,\"527\":4,\"536\":1,\"539\":1,\"581\":2,\"583\":1,\"639\":1,\"666\":1,\"668\":1,\"669\":1,\"685\":1,\"687\":1,\"700\":1,\"702\":1,\"748\":1,\"749\":1,\"750\":3,\"751\":2,\"752\":2,\"809\":12,\"862\":1,\"909\":1,\"910\":1,\"914\":1,\"965\":1,\"980\":1,\"986\":1,\"1016\":3,\"1019\":5,\"1021\":2,\"1023\":2,\"1030\":1,\"1032\":1,\"1037\":2,\"1051\":3,\"1076\":4,\"1089\":1,\"1114\":12,\"1115\":4,\"1117\":1,\"1125\":1,\"1130\":1,\"1144\":2}}],[\"4+64\",{\"1\":{\"1067\":1}}],[\"4几个临时变量\",{\"1\":{\"1067\":1}}],[\"4个溢出桶\",{\"1\":{\"1034\":1}}],[\"4d\",{\"1\":{\"675\":1}}],[\"4dbwde0ngyqobhblqypwsupocmwr5bezik\",{\"1\":{\"6\":1}}],[\"41\",{\"1\":{\"1114\":2}}],[\"416\",{\"1\":{\"1114\":1}}],[\"4133b2p+20\",{\"1\":{\"698\":1}}],[\"41421356237309504880168872420969807856967187537694807317667974\",{\"1\":{\"653\":1}}],[\"4128202\",{\"1\":{\"526\":2}}],[\"4128204\",{\"1\":{\"526\":3}}],[\"4128201\",{\"1\":{\"526\":2}}],[\"4128203\",{\"1\":{\"526\":2}}],[\"4128187\",{\"1\":{\"526\":2}}],[\"4128189\",{\"1\":{\"526\":3}}],[\"4128185\",{\"1\":{\"525\":2}}],[\"4128198\",{\"1\":{\"526\":1}}],[\"4128190\",{\"1\":{\"526\":1}}],[\"4128191\",{\"1\":{\"526\":2}}],[\"4128194\",{\"1\":{\"526\":1}}],[\"4128192\",{\"1\":{\"526\":1}}],[\"4128196\",{\"1\":{\"525\":1}}],[\"4128199\",{\"1\":{\"525\":1}}],[\"4128176\",{\"1\":{\"525\":2,\"526\":10}}],[\"419651\",{\"1\":{\"526\":1}}],[\"435914\",{\"1\":{\"916\":1}}],[\"4375\",{\"1\":{\"912\":1,\"1114\":1}}],[\"4329\",{\"1\":{\"907\":1}}],[\"43\",{\"1\":{\"499\":1,\"856\":2,\"1114\":2}}],[\"4726ab1d7f62\",{\"1\":{\"504\":1}}],[\"47\",{\"1\":{\"388\":1,\"527\":2,\"739\":1,\"965\":1,\"982\":3,\"1114\":2}}],[\"4e16\",{\"1\":{\"380\":1}}],[\"425\",{\"1\":{\"1061\":1}}],[\"4217\",{\"1\":{\"934\":1}}],[\"421875\",{\"1\":{\"912\":2}}],[\"423\",{\"1\":{\"526\":1}}],[\"423899\",{\"1\":{\"526\":1}}],[\"4285\",{\"1\":{\"526\":1}}],[\"422\",{\"1\":{\"847\":1}}],[\"422275\",{\"1\":{\"526\":1}}],[\"422s\",{\"1\":{\"518\":1}}],[\"422455\",{\"1\":{\"132\":2}}],[\"42\",{\"1\":{\"354\":1,\"823\":1,\"827\":2,\"1114\":2}}],[\"453125\",{\"1\":{\"912\":1}}],[\"459\",{\"1\":{\"847\":1}}],[\"4501592\",{\"1\":{\"742\":1}}],[\"450s\",{\"1\":{\"523\":1}}],[\"4512075\",{\"1\":{\"742\":1}}],[\"456789\",{\"1\":{\"692\":2}}],[\"454452\",{\"1\":{\"526\":1}}],[\"452255\",{\"1\":{\"526\":1}}],[\"457s\",{\"1\":{\"518\":1}}],[\"45\",{\"1\":{\"354\":1,\"527\":1,\"652\":1,\"840\":1,\"1114\":4}}],[\"49152\",{\"1\":{\"1114\":2}}],[\"490854\",{\"1\":{\"907\":1}}],[\"492658\",{\"1\":{\"588\":1}}],[\"49mb\",{\"1\":{\"559\":11}}],[\"49\",{\"1\":{\"159\":4,\"331\":1,\"354\":1,\"523\":1,\"547\":1,\"843\":1,\"1114\":2}}],[\"448\",{\"1\":{\"1114\":2}}],[\"448s\",{\"1\":{\"520\":1}}],[\"4429256\",{\"1\":{\"742\":1}}],[\"440\",{\"1\":{\"588\":1}}],[\"440找到有关它们的信息\",{\"1\":{\"39\":1}}],[\"444s\",{\"1\":{\"523\":1}}],[\"449s\",{\"1\":{\"523\":1}}],[\"44\",{\"1\":{\"159\":1,\"527\":1,\"739\":1,\"843\":1,\"986\":1,\"1054\":1,\"1114\":2}}],[\"46875\",{\"1\":{\"912\":1}}],[\"468s\",{\"1\":{\"521\":1}}],[\"4623113902481840538\",{\"1\":{\"751\":1}}],[\"462s\",{\"1\":{\"521\":1}}],[\"464s\",{\"1\":{\"522\":1}}],[\"46\",{\"1\":{\"145\":1,\"167\":9,\"523\":2,\"527\":1,\"1114\":3}}],[\"4864\",{\"1\":{\"1114\":1}}],[\"480\",{\"1\":{\"1114\":1}}],[\"482861375\",{\"1\":{\"847\":1}}],[\"48\",{\"1\":{\"141\":3,\"143\":15,\"144\":14,\"145\":4,\"221\":1,\"241\":1,\"243\":1,\"354\":1,\"527\":2,\"739\":2,\"824\":1,\"851\":1,\"1114\":4}}],[\"4kb\",{\"1\":{\"135\":1}}],[\"4byte\",{\"1\":{\"117\":1}}],[\"4\",{\"0\":{\"133\":1,\"782\":1},\"1\":{\"28\":2,\"38\":1,\"93\":10,\"110\":1,\"113\":1,\"114\":1,\"117\":1,\"131\":1,\"132\":1,\"133\":5,\"135\":2,\"137\":1,\"148\":1,\"168\":1,\"188\":2,\"190\":2,\"208\":1,\"209\":1,\"252\":1,\"299\":1,\"301\":2,\"325\":4,\"341\":1,\"344\":2,\"354\":12,\"357\":2,\"360\":2,\"362\":10,\"365\":2,\"366\":4,\"367\":3,\"368\":6,\"369\":2,\"371\":12,\"372\":2,\"375\":1,\"380\":1,\"382\":1,\"392\":2,\"400\":2,\"401\":1,\"402\":4,\"410\":1,\"412\":1,\"428\":1,\"448\":2,\"456\":1,\"462\":4,\"467\":2,\"470\":2,\"472\":1,\"479\":3,\"480\":1,\"484\":3,\"486\":2,\"495\":2,\"508\":3,\"509\":4,\"524\":2,\"525\":8,\"526\":39,\"539\":6,\"541\":2,\"551\":11,\"552\":5,\"582\":1,\"585\":9,\"587\":4,\"588\":1,\"652\":1,\"667\":1,\"748\":1,\"750\":2,\"751\":1,\"752\":1,\"753\":2,\"754\":2,\"778\":8,\"874\":2,\"875\":2,\"897\":4,\"898\":1,\"908\":1,\"911\":2,\"912\":1,\"1014\":1,\"1019\":16,\"1020\":1,\"1025\":1,\"1027\":1,\"1030\":2,\"1033\":1,\"1034\":5,\"1067\":5,\"1095\":1,\"1102\":2,\"1103\":1,\"1114\":9,\"1120\":2,\"1130\":1,\"1153\":1,\"1165\":2,\"1168\":1,\"1169\":1}}],[\"405\",{\"0\":{\"990\":1},\"1\":{\"990\":1}}],[\"40625\",{\"1\":{\"912\":1}}],[\"408\",{\"1\":{\"847\":1}}],[\"40808206181339196\",{\"1\":{\"671\":1}}],[\"40960\",{\"1\":{\"1114\":4}}],[\"4096\",{\"1\":{\"682\":1,\"1114\":5}}],[\"4090817\",{\"1\":{\"527\":1}}],[\"401298464324817070923729583289916131280e\",{\"1\":{\"652\":1}}],[\"40282346638528859811704183484516925440e+38\",{\"1\":{\"652\":1}}],[\"400\",{\"1\":{\"479\":2,\"833\":1,\"971\":1,\"1013\":1,\"1067\":1}}],[\"40\",{\"1\":{\"8\":1,\"10\":1,\"136\":1,\"302\":3,\"354\":1,\"388\":1,\"448\":1,\"527\":1,\"561\":3,\"784\":3,\"962\":1,\"1114\":2}}],[\"4040067344\",{\"1\":{\"526\":1}}],[\"4040068784\",{\"1\":{\"525\":1}}],[\"4040095664\",{\"1\":{\"526\":1}}],[\"4040090768\",{\"1\":{\"526\":1}}],[\"4040090528\",{\"1\":{\"526\":1}}],[\"4040085248\",{\"1\":{\"526\":1}}],[\"4040089808\",{\"1\":{\"526\":1}}],[\"4040086784\",{\"1\":{\"526\":1}}],[\"4040080064\",{\"1\":{\"525\":1}}],[\"4040078000\",{\"1\":{\"526\":1}}],[\"4040078288\",{\"1\":{\"526\":1}}],[\"4040079488\",{\"1\":{\"526\":1}}],[\"4040076656\",{\"1\":{\"526\":1}}],[\"4040070032\",{\"1\":{\"526\":1}}],[\"4040070224\",{\"1\":{\"526\":1}}],[\"4040070800\",{\"1\":{\"526\":1}}],[\"4040071856\",{\"1\":{\"526\":1}}],[\"4040075408\",{\"1\":{\"526\":1}}],[\"4040077184\",{\"1\":{\"526\":1}}],[\"4040077520\",{\"1\":{\"526\":1}}],[\"4040077568\",{\"1\":{\"526\":1}}],[\"4040077424\",{\"1\":{\"526\":1}}],[\"4040077760\",{\"1\":{\"525\":1}}],[\"4040073104\",{\"1\":{\"525\":1}}],[\"4040056952\",{\"1\":{\"526\":1}}],[\"4040056784\",{\"1\":{\"526\":1}}],[\"4040056736\",{\"1\":{\"525\":1}}],[\"4040056592\",{\"1\":{\"525\":1,\"526\":8}}],[\"404\",{\"0\":{\"989\":1},\"1\":{\"7\":2,\"19\":6,\"989\":1,\"1013\":1,\"1180\":1}}],[\"是已经访问过的对象\",{\"1\":{\"1136\":1}}],[\"是状态是\",{\"1\":{\"1107\":1}}],[\"是调度器在运行时的表示形式\",{\"1\":{\"1088\":1}}],[\"是调度模型中最基本的调度单元\",{\"1\":{\"1086\":1}}],[\"是调用\",{\"1\":{\"645\":1}}],[\"是的话就由runitme\",{\"1\":{\"1060\":1}}],[\"是空闲的\",{\"1\":{\"1104\":1}}],[\"是空的\",{\"1\":{\"1047\":1}}],[\"是空接口类型\",{\"1\":{\"596\":1}}],[\"是如何对\",{\"1\":{\"1041\":1}}],[\"是如何被创建\",{\"1\":{\"778\":1}}],[\"是为了过滤键为nan的情况\",{\"1\":{\"1037\":1}}],[\"是为了利用\",{\"1\":{\"533\":1}}],[\"是指向访问\",{\"1\":{\"1036\":1}}],[\"是根据注释来生成\",{\"1\":{\"1017\":1}}],[\"是根据类型匹配来实现的\",{\"1\":{\"826\":1}}],[\"是文件在项目中的实际路径\",{\"1\":{\"999\":1}}],[\"是映射到网页\",{\"1\":{\"999\":1}}],[\"是validator\",{\"1\":{\"977\":1}}],[\"是valiadte\",{\"1\":{\"930\":1}}],[\"是binding\",{\"1\":{\"977\":1}}],[\"是最适合前后端分离和分布式系统来做会话控制的\",{\"1\":{\"1004\":1}}],[\"是最容易上手和学习的\",{\"1\":{\"962\":1}}],[\"是最后一个支持\",{\"1\":{\"117\":2}}],[\"是is666\",{\"1\":{\"949\":1}}],[\"是int类型的变量\",{\"1\":{\"591\":1}}],[\"是对工作线程的抽象\",{\"1\":{\"1087\":1}}],[\"是对切片中的值进行验证\",{\"1\":{\"944\":1}}],[\"是对切片进行验证\",{\"1\":{\"944\":1}}],[\"是对标准sql库的增强\",{\"1\":{\"230\":1}}],[\"是facebook开源的\",{\"1\":{\"849\":1}}],[\"是同一个\",{\"1\":{\"810\":1}}],[\"是用\",{\"1\":{\"803\":1}}],[\"是用于存储数据的一种格式\",{\"1\":{\"618\":1}}],[\"是非指针类型\",{\"1\":{\"781\":1}}],[\"是占位符\",{\"1\":{\"765\":1,\"952\":1}}],[\"是定时触发\",{\"1\":{\"742\":1}}],[\"是模板引擎的模板参数\",{\"1\":{\"723\":1}}],[\"是具有适当签名的函数\",{\"1\":{\"645\":1}}],[\"是谷歌开源的一个依赖注入工具\",{\"1\":{\"821\":1}}],[\"是谷歌\",{\"1\":{\"629\":1}}],[\"是以上几种数据格式中最为古老的一种\",{\"1\":{\"618\":1}}],[\"是运行时异常的表达形式\",{\"1\":{\"604\":1}}],[\"是后续自定义类型的基础\",{\"1\":{\"590\":1}}],[\"是无序的\",{\"1\":{\"585\":2}}],[\"是无序存储\",{\"1\":{\"386\":1}}],[\"是没有泛型这一说法的\",{\"1\":{\"570\":1}}],[\"是比较安全的\",{\"1\":{\"543\":1}}],[\"是不分家的\",{\"1\":{\"1003\":1}}],[\"是不分大小写的\",{\"1\":{\"509\":1}}],[\"是不支持option请求的\",{\"1\":{\"990\":1}}],[\"是不是觉得已经没问题了\",{\"1\":{\"1019\":1}}],[\"是不是觉得简单过头了\",{\"1\":{\"986\":1}}],[\"是不是整个过程的代码相当简单\",{\"1\":{\"823\":1}}],[\"是不是包含一个子串\",{\"1\":{\"706\":1}}],[\"是不是真的安装成功了\",{\"1\":{\"148\":1}}],[\"是不能作为基础类型的\",{\"1\":{\"573\":1}}],[\"是https\",{\"1\":{\"495\":1}}],[\"是第一个能够将协程和并发支持的相当简洁和优雅的语言\",{\"1\":{\"462\":1}}],[\"是否都已经被唤醒了\",{\"1\":{\"1169\":1}}],[\"是否将内存清零\",{\"1\":{\"1112\":1}}],[\"是否可用\",{\"1\":{\"1097\":1}}],[\"是否关闭\",{\"1\":{\"1057\":1}}],[\"是否存在\",{\"1\":{\"1047\":1}}],[\"是否从哈希桶数组末尾回到了头部\",{\"1\":{\"1037\":1}}],[\"是否允许他人通过js访问cookie\",{\"1\":{\"1002\":1}}],[\"是否需要扩容\",{\"1\":{\"1024\":1}}],[\"是否需要携带认证信息\",{\"1\":{\"1000\":1}}],[\"是否需要授权\",{\"1\":{\"963\":1}}],[\"是否是列举的值的其中的一个\",{\"1\":{\"936\":1}}],[\"是否压缩\",{\"1\":{\"841\":1}}],[\"是否不相等\",{\"1\":{\"728\":1}}],[\"是否相等\",{\"1\":{\"728\":1,\"1036\":1}}],[\"是否找到子串\",{\"1\":{\"708\":1}}],[\"是否包含\",{\"1\":{\"706\":1}}],[\"是否有序\",{\"0\":{\"689\":1}}],[\"是否实现该方法\",{\"1\":{\"603\":1}}],[\"是否遵守只取决于开发者\",{\"1\":{\"520\":1}}],[\"是否为嵌套字段\",{\"1\":{\"448\":1}}],[\"是否下载\",{\"1\":{\"112\":1}}],[\"是值拷贝的\",{\"1\":{\"414\":1}}],[\"是引用类型\",{\"1\":{\"364\":1,\"382\":1}}],[\"是相对于当前分组的起始行号\",{\"1\":{\"325\":1}}],[\"是强制所有人统一同一种风格\",{\"1\":{\"308\":1}}],[\"是当下最流行的开源关系型数据库\",{\"1\":{\"230\":1}}],[\"是proto中的基本结构\",{\"1\":{\"181\":1}}],[\"是自定义的\",{\"1\":{\"175\":1}}],[\"是这样的\",{\"1\":{\"167\":1}}],[\"是时候来运行一下看看结果是什么样的\",{\"1\":{\"166\":1}}],[\"是直接使用命令生成的代码\",{\"1\":{\"156\":1}}],[\"是直接调用编译器命令\",{\"1\":{\"15\":1}}],[\"是语言无关的\",{\"1\":{\"147\":1}}],[\"是上一个示例的集群\",{\"1\":{\"144\":1}}],[\"是基于\",{\"1\":{\"142\":1}}],[\"是通过取余来定位的\",{\"1\":{\"1036\":1}}],[\"是通过嵌入结构体的方式来进行的\",{\"1\":{\"860\":1}}],[\"是通过\",{\"1\":{\"142\":1}}],[\"是所有\",{\"1\":{\"142\":1}}],[\"是由一个二维的heaparena数组来管理所有的页内存\",{\"1\":{\"1115\":1}}],[\"是由迭代器来控制迭代的逻辑\",{\"1\":{\"583\":1}}],[\"是由标准库reflect包提供的\",{\"1\":{\"427\":1}}],[\"是由\",{\"1\":{\"140\":1}}],[\"是\",{\"1\":{\"139\":1,\"141\":2,\"143\":1,\"160\":1,\"384\":1,\"473\":1,\"512\":1,\"568\":7,\"1003\":1,\"1009\":1,\"1056\":1,\"1085\":1,\"1164\":1,\"1171\":1}}],[\"是我从\",{\"1\":{\"105\":1}}],[\"是战神奎托斯的名字\",{\"1\":{\"53\":1}}],[\"是众神之神\",{\"1\":{\"53\":1}}],[\"是宙斯的名字\",{\"1\":{\"53\":1}}],[\"是因为它总是乐观的假设共享数据不会被修改\",{\"1\":{\"490\":1}}],[\"是因为emptyctx的实例必须要有不同的内存地址\",{\"1\":{\"475\":1}}],[\"是因为\",{\"1\":{\"28\":1,\"532\":1}}],[\"是早期\",{\"1\":{\"28\":1}}],[\"是完全由\",{\"1\":{\"8\":1}}],[\"是一次性的\",{\"1\":{\"742\":1}}],[\"是一种可以同时监听多个管道状态的结构\",{\"1\":{\"1063\":1}}],[\"是一种并发条件下无锁化并发控制方式\",{\"1\":{\"490\":1}}],[\"是一种通讯机制\",{\"1\":{\"482\":1}}],[\"是一种\",{\"1\":{\"471\":1}}],[\"是一种轻量级的线程\",{\"1\":{\"462\":1}}],[\"是一种复合类型\",{\"1\":{\"403\":1}}],[\"是一种无序的\",{\"1\":{\"388\":1}}],[\"是一种类似\",{\"1\":{\"168\":1}}],[\"是一种小型\",{\"1\":{\"75\":1}}],[\"是一个非常简洁而高效的同步工具\",{\"1\":{\"1174\":1}}],[\"是一个并不简单的并发调度器在支撑着这一切\",{\"1\":{\"1083\":1}}],[\"是一个特殊的数据结构\",{\"1\":{\"1056\":1}}],[\"是一个指向字符串内存起始地址的指针\",{\"1\":{\"1052\":1}}],[\"是一个必须填写的字段\",{\"1\":{\"952\":1}}],[\"是一个通用的工具库\",{\"1\":{\"924\":1}}],[\"是一个使用\",{\"1\":{\"904\":1}}],[\"是一个用\",{\"1\":{\"836\":1,\"962\":1}}],[\"是一个用于在\",{\"1\":{\"810\":1}}],[\"是一个用于\",{\"1\":{\"31\":1}}],[\"是一个很方便的将字符串与文件大小相互转换的库\",{\"1\":{\"818\":1}}],[\"是一个针对\",{\"1\":{\"788\":1}}],[\"是一个引用\",{\"1\":{\"751\":1}}],[\"是一个定时器\",{\"1\":{\"742\":1}}],[\"是一个计时器\",{\"1\":{\"741\":1}}],[\"是一个静态强类型语言\",{\"1\":{\"591\":1}}],[\"是一个典型的静态类型语言\",{\"1\":{\"590\":1}}],[\"是一个接口\",{\"1\":{\"563\":1}}],[\"是一个程序性能分析的利器\",{\"1\":{\"554\":1}}],[\"是一个开源的性能测试分析工具\",{\"1\":{\"526\":1}}],[\"是一个开源的使用\",{\"1\":{\"239\":1}}],[\"是一个文件路径而非网络\",{\"1\":{\"512\":1}}],[\"是一个文档数据库\",{\"1\":{\"218\":1}}],[\"是一个符合规范的\",{\"1\":{\"493\":1}}],[\"是一个临时的并发安全对象池\",{\"1\":{\"485\":1}}],[\"是一个语句\",{\"1\":{\"292\":1}}],[\"是一个分布式\",{\"1\":{\"203\":1}}],[\"是一个字符串切片\",{\"1\":{\"160\":1}}],[\"是一个现代化的开源高性能远程过程调用\",{\"1\":{\"146\":1}}],[\"是一个能够让团队在服务与跨预置和多云环境中安全管理网络连接的解决方案\",{\"1\":{\"139\":1}}],[\"是一个\",{\"1\":{\"19\":1,\"1109\":1}}],[\"是一个老牌\",{\"1\":{\"8\":1}}],[\"是一门较为容易学习的编程语言\",{\"1\":{\"0\":1}}],[\"是在意料之外的\",{\"1\":{\"402\":1}}],[\"是在函数返回前执行的\",{\"1\":{\"400\":1}}],[\"是在\",{\"1\":{\"7\":1}}],[\"来确保在并发条件下\",{\"1\":{\"1165\":1}}],[\"来保护共享资源的访问\",{\"1\":{\"1164\":1}}],[\"来二次扫描栈空间\",{\"1\":{\"1144\":1}}],[\"来对栈空间的根对象进行快照\",{\"1\":{\"1143\":1}}],[\"来对根对象进行快照记录\",{\"1\":{\"1143\":1}}],[\"来弥补\",{\"1\":{\"1138\":1}}],[\"来讲\",{\"1\":{\"1130\":1}}],[\"来讲解\",{\"1\":{\"231\":1}}],[\"来源就是\",{\"1\":{\"1104\":1}}],[\"来重复利用\",{\"1\":{\"1095\":1}}],[\"来负责调度协程\",{\"1\":{\"1085\":1}}],[\"来行代码\",{\"1\":{\"1082\":1}}],[\"来存放对应的值\",{\"1\":{\"1047\":1}}],[\"来更新entry的值\",{\"1\":{\"1047\":1}}],[\"来更好的满足相应的业务需求\",{\"1\":{\"168\":1}}],[\"来计算桶数组的容量\",{\"1\":{\"1034\":1}}],[\"来完成\",{\"1\":{\"1020\":1}}],[\"来演示\",{\"1\":{\"1009\":1}}],[\"来配置\",{\"1\":{\"998\":1}}],[\"来验证是否果真如此\",{\"1\":{\"995\":1}}],[\"来注册全局中间件\",{\"1\":{\"993\":1}}],[\"来注册一个处理器\",{\"1\":{\"990\":1}}],[\"来避免一些问题\",{\"1\":{\"959\":1}}],[\"来避免和切片操作同一个底层数组\",{\"1\":{\"117\":1}}],[\"来实现m个协程等待一组n个协程运行完毕\",{\"1\":{\"1176\":1}}],[\"来实现\",{\"1\":{\"958\":1}}],[\"来实现枚举\",{\"1\":{\"326\":1}}],[\"来自定义验证函数\",{\"1\":{\"949\":1}}],[\"来追踪纳秒\",{\"1\":{\"862\":2}}],[\"来设置当访问的\",{\"1\":{\"989\":1}}],[\"来设置时间\",{\"1\":{\"856\":1}}],[\"来设置日志的输出路径\",{\"1\":{\"649\":1}}],[\"来启动\",{\"1\":{\"824\":1}}],[\"来与\",{\"1\":{\"803\":1}}],[\"来为\",{\"1\":{\"803\":1}}],[\"来分隔\",{\"1\":{\"771\":1}}],[\"来在模板中表示这是一个模板参数\",{\"1\":{\"725\":1}}],[\"来在线运行\",{\"1\":{\"104\":1}}],[\"来判断\",{\"1\":{\"689\":1}}],[\"来解析参数\",{\"1\":{\"634\":1}}],[\"来定义\",{\"1\":{\"633\":2}}],[\"来获取参数\",{\"1\":{\"956\":1}}],[\"来获取文件中的下一行文本\",{\"1\":{\"583\":1}}],[\"来获取其字符串表现形式\",{\"1\":{\"725\":1}}],[\"来获取其原始值\",{\"1\":{\"441\":1}}],[\"来获取其类型\",{\"1\":{\"432\":1}}],[\"来控制迭代的开始或结束\",{\"1\":{\"583\":1}}],[\"来表示根对象\",{\"1\":{\"725\":1}}],[\"来表示迭代是否结束\",{\"1\":{\"583\":1}}],[\"来表示底层类型\",{\"1\":{\"574\":1}}],[\"来表示字符串\",{\"1\":{\"536\":1}}],[\"来告诉\",{\"1\":{\"553\":1}}],[\"来测试某一个功能单元的平均执行耗时\",{\"1\":{\"548\":1}}],[\"来添加\",{\"1\":{\"527\":1}}],[\"来添加拦截器\",{\"1\":{\"166\":1}}],[\"来使输出结果更加详细一点\",{\"1\":{\"518\":1}}],[\"来使连接未建立成功时阻塞等待\",{\"1\":{\"170\":1}}],[\"来释放内存\",{\"1\":{\"485\":1}}],[\"来指定其存储的数据是什么类型\",{\"1\":{\"463\":1}}],[\"来替代默认的\",{\"1\":{\"1016\":1}}],[\"来替代\",{\"1\":{\"388\":1}}],[\"来了解这几个中间件的一些区别\",{\"1\":{\"175\":1}}],[\"来做会话控制\",{\"1\":{\"1002\":1}}],[\"来做注册中心的话\",{\"1\":{\"175\":1}}],[\"来做注册中心也不是不可以\",{\"1\":{\"175\":1}}],[\"来做出响应的处理\",{\"1\":{\"168\":1}}],[\"来传入一些自定义的信息\",{\"1\":{\"168\":1}}],[\"来模拟消息队列\",{\"1\":{\"158\":1}}],[\"来管理\",{\"1\":{\"156\":1}}],[\"来管理依赖了\",{\"1\":{\"7\":1}}],[\"来到helloworld\",{\"1\":{\"156\":1}}],[\"来向注册中心查询对应的服务\",{\"1\":{\"145\":1}}],[\"来进行快照\",{\"1\":{\"1144\":1}}],[\"来进行自动管理\",{\"1\":{\"1109\":1}}],[\"来进行偷取\",{\"1\":{\"1104\":1}}],[\"来进行\",{\"1\":{\"803\":1}}],[\"来进行嵌套访问\",{\"1\":{\"791\":1}}],[\"来进行赋值\",{\"1\":{\"727\":1}}],[\"来进行类型转换和断言要优雅和方便很多\",{\"1\":{\"578\":1}}],[\"来进行测试\",{\"1\":{\"527\":1}}],[\"来进行数字划分\",{\"1\":{\"301\":1}}],[\"来进行演示\",{\"1\":{\"204\":1,\"851\":1}}],[\"来进行对\",{\"1\":{\"203\":1}}],[\"来进行的\",{\"1\":{\"174\":1}}],[\"来进行注册\",{\"1\":{\"145\":1}}],[\"来进行管理\",{\"1\":{\"7\":1}}],[\"来说是无状态的\",{\"1\":{\"142\":1}}],[\"来构建\",{\"1\":{\"116\":1}}],[\"来看个使用的例子\",{\"1\":{\"876\":1}}],[\"来看看growwork函数都干了些什么\",{\"1\":{\"1042\":1}}],[\"来看看下面的一个例子\",{\"1\":{\"467\":1}}],[\"来看看它汇编的样子\",{\"1\":{\"45\":1}}],[\"来看一个对int类型的管道读写的例子\",{\"1\":{\"465\":1}}],[\"来看下它的用法\",{\"1\":{\"44\":1}}],[\"来代替\",{\"1\":{\"40\":1,\"992\":1}}],[\"关键就在于屏障技术\",{\"1\":{\"1136\":1}}],[\"关键字会被翻译成对runtime\",{\"1\":{\"1067\":1}}],[\"关键字指的是runtime\",{\"1\":{\"1064\":1}}],[\"关键的地方就在这部分\",{\"1\":{\"1038\":1}}],[\"关键点在于sum\",{\"1\":{\"533\":1}}],[\"关掉控制台颜色\",{\"1\":{\"1007\":1}}],[\"关系约束\",{\"1\":{\"862\":1}}],[\"关联的\",{\"1\":{\"1088\":2}}],[\"关联的协程\",{\"1\":{\"1073\":1}}],[\"关联后才能执行任务\",{\"1\":{\"1085\":1}}],[\"关联查询需要先查询指定的\",{\"1\":{\"899\":1}}],[\"关联查找会根据已有的数据\",{\"1\":{\"896\":1}}],[\"关联删除时只会删除它们之间的引用关系\",{\"1\":{\"898\":1}}],[\"关联操作\",{\"0\":{\"894\":1}}],[\"关联定义\",{\"0\":{\"890\":1}}],[\"关联了\",{\"1\":{\"734\":1}}],[\"关联是将外部的多个命名的\",{\"1\":{\"734\":1}}],[\"关联\",{\"0\":{\"734\":1},\"1\":{\"849\":1,\"1088\":1,\"1090\":1}}],[\"关闭内存屏障\",{\"1\":{\"1140\":1}}],[\"关闭屏障\",{\"1\":{\"1130\":1}}],[\"关闭只读管道不能通过编译这点已经很明确地告诉你不要这么做了\",{\"1\":{\"1062\":1}}],[\"关闭控制台日志颜色\",{\"1\":{\"1006\":1}}],[\"关闭管道\",{\"1\":{\"470\":2}}],[\"关闭已关闭的管道\",{\"1\":{\"468\":1}}],[\"关闭一个nil管道\",{\"1\":{\"468\":1}}],[\"关闭网络连接等操作\",{\"1\":{\"400\":1}}],[\"关闭连接\",{\"0\":{\"244\":1},\"1\":{\"158\":4,\"221\":1}}],[\"关闭函数内联\",{\"1\":{\"9\":1}}],[\"关闭编译优化\",{\"1\":{\"9\":1}}],[\"关闭\",{\"0\":{\"1061\":1},\"1\":{\"7\":1}}],[\"关于何为饥饿模式\",{\"1\":{\"1151\":1}}],[\"关于栈缓存stackcached\",{\"1\":{\"1116\":1}}],[\"关于它启动这部分的代码可以在runtime\",{\"1\":{\"1082\":1}}],[\"关于它的基本用法在语言入门中已经阐述过了\",{\"1\":{\"1018\":1}}],[\"关于声明的类型总共有三种\",{\"1\":{\"773\":1}}],[\"关于代表\",{\"1\":{\"595\":1}}],[\"关于迭代器的定义\",{\"1\":{\"582\":1}}],[\"关于接口的定义发生了变化\",{\"1\":{\"563\":1}}],[\"关于接口的发展历史有一个分水岭\",{\"1\":{\"563\":1}}],[\"关于折线图\",{\"1\":{\"560\":1}}],[\"关于如何分析数据\",{\"1\":{\"560\":1}}],[\"关于如何删除模块的信息\",{\"1\":{\"500\":1}}],[\"关于整数的类型映射还在可以在标准库cmd\",{\"1\":{\"537\":1}}],[\"关于output有以下几种写法\",{\"1\":{\"520\":1}}],[\"关于上传模块的更多详细信息\",{\"1\":{\"500\":1}}],[\"关于管道关闭的时机\",{\"1\":{\"470\":1}}],[\"关于管道阻塞的条件需要好好掌握和熟悉\",{\"1\":{\"468\":1}}],[\"关于读取文件的操作\",{\"1\":{\"417\":1}}],[\"关于文件下载的部分\",{\"1\":{\"986\":1}}],[\"关于文件权限的则提供了以下常量\",{\"1\":{\"416\":1}}],[\"关于文件描述符\",{\"1\":{\"416\":1}}],[\"关于指针有两个常用的操作符\",{\"1\":{\"391\":1}}],[\"关于这些值的计算逻辑可以在runtime\",{\"1\":{\"1114\":1}}],[\"关于这一点社区也曾激烈讨论过\",{\"1\":{\"384\":1}}],[\"关于这个新指令\",{\"1\":{\"42\":1}}],[\"关于字符串的更多细节\",{\"1\":{\"380\":1}}],[\"关于函数后的花括号到底该不该换行\",{\"1\":{\"309\":1}}],[\"关于编码风格这一块\",{\"1\":{\"308\":1}}],[\"关于protocol\",{\"1\":{\"180\":1}}],[\"关于更多的\",{\"1\":{\"141\":1}}],[\"关于模块\",{\"1\":{\"96\":1}}],[\"关于\",{\"1\":{\"0\":1,\"240\":1,\"509\":1,\"527\":1,\"529\":1,\"638\":1,\"770\":1}}],[\"有结构体中有一个字段gcmarkworkermode来表示标记任务的执行模式\",{\"1\":{\"1138\":1}}],[\"有的话则加锁失败\",{\"1\":{\"1160\":1}}],[\"有的\",{\"1\":{\"1104\":1}}],[\"有接收方正在阻塞等待\",{\"1\":{\"1067\":1}}],[\"有缺失\",{\"1\":{\"1049\":1}}],[\"有相当多的溢出桶都是空的\",{\"1\":{\"1043\":1}}],[\"有可能造成这样一种情况\",{\"1\":{\"1067\":1}}],[\"有可能晋升为\",{\"1\":{\"1046\":1}}],[\"有可能触发fatal\",{\"1\":{\"1037\":1}}],[\"有可能会影响的s1的数据\",{\"1\":{\"371\":1}}],[\"有下面几种特殊的值\",{\"1\":{\"1030\":1}}],[\"有如下可选值\",{\"1\":{\"1137\":1}}],[\"有如下一个断言\",{\"1\":{\"995\":1}}],[\"有如下输出即生成成功\",{\"1\":{\"824\":1}}],[\"有几维就用几个dive\",{\"1\":{\"944\":1}}],[\"有几个点要注意\",{\"1\":{\"560\":1}}],[\"有几个点需要注意\",{\"1\":{\"160\":1}}],[\"有几个必须遵守的规则\",{\"1\":{\"12\":1}}],[\"有许多著名项目都是基于\",{\"1\":{\"615\":1}}],[\"有越来越多的企业转到\",{\"1\":{\"613\":1}}],[\"有这么一句玩笑话\",{\"1\":{\"598\":1}}],[\"有错误就处理\",{\"1\":{\"598\":1}}],[\"有很多实现\",{\"1\":{\"839\":1}}],[\"有很多人发表了自己的观点\",{\"1\":{\"589\":1}}],[\"有很多标准库也支持了迭代器\",{\"1\":{\"585\":1}}],[\"有泛型的加持\",{\"1\":{\"578\":1}}],[\"有时候可以传切片\",{\"1\":{\"849\":1}}],[\"有时候可以传\",{\"1\":{\"849\":1}}],[\"有时候可以传字符串\",{\"1\":{\"849\":1}}],[\"有时候可以传结构体\",{\"1\":{\"849\":1}}],[\"有时候\",{\"1\":{\"826\":1}}],[\"有时候我们需要分析程序整体的\",{\"1\":{\"548\":1}}],[\"有时候你并不想让别人访问某一个类型\",{\"1\":{\"294\":1}}],[\"有了实现之后\",{\"1\":{\"567\":1}}],[\"有了自己的地址\",{\"1\":{\"539\":1}}],[\"有了这个工具可以相当方便的管理\",{\"1\":{\"156\":1}}],[\"有趣的输入指的是该输入能够将代码覆盖率扩大到现有语料库所能覆盖的范围之外\",{\"1\":{\"527\":1}}],[\"有趣\",{\"1\":{\"527\":1}}],[\"有助于后续生成随机的测试数据\",{\"1\":{\"527\":1}}],[\"有些人可能会希望修改对于\",{\"1\":{\"958\":1}}],[\"有些时候\",{\"1\":{\"887\":1}}],[\"有些时候使用defer来关闭管道可能会更好\",{\"1\":{\"464\":1}}],[\"有些情况下需要将error类型的错误转换为具体的错误实现类型\",{\"1\":{\"603\":1}}],[\"有些比较古老的依赖包可能没有go\",{\"1\":{\"510\":1}}],[\"有多个引用时可以使用括号括起来\",{\"1\":{\"509\":1}}],[\"有三个参数\",{\"1\":{\"490\":1}}],[\"有且仅有一个返回值\",{\"1\":{\"470\":1}}],[\"有且只有一种方法\",{\"1\":{\"464\":1}}],[\"有且只能由\",{\"1\":{\"187\":1}}],[\"有缓冲io读写包\",{\"1\":{\"616\":1}}],[\"有缓冲\",{\"0\":{\"467\":1}}],[\"有仅有一种循环语句\",{\"1\":{\"353\":1}}],[\"有两派人\",{\"1\":{\"848\":1}}],[\"有两个\",{\"1\":{\"1066\":1}}],[\"有两个非常重要的特性\",{\"1\":{\"1063\":1}}],[\"有两个对外暴露的方法walk和say\",{\"1\":{\"565\":1}}],[\"有两个int类型的参数a\",{\"1\":{\"395\":1}}],[\"有两个内置的函数print\",{\"1\":{\"338\":1}}],[\"有两种情况可以唤醒\",{\"1\":{\"1138\":1}}],[\"有两种情况会触发扩容\",{\"1\":{\"1032\":1}}],[\"有两种解决办法\",{\"1\":{\"574\":1}}],[\"有两种方式进行分析\",{\"1\":{\"558\":1}}],[\"有两种方法\",{\"1\":{\"382\":1}}],[\"有两种用法\",{\"1\":{\"3\":1}}],[\"有符号整数类型的并集就是signedint\",{\"1\":{\"574\":1}}],[\"有符号\",{\"1\":{\"316\":4}}],[\"有一段代码表明了调用过程\",{\"1\":{\"995\":1}}],[\"有一定的上手门槛\",{\"1\":{\"849\":1}}],[\"有一条为allow\",{\"1\":{\"763\":1}}],[\"有一个sweepgen字段用于表明其回收状态\",{\"1\":{\"1148\":1}}],[\"有一个全局变量runtime\",{\"1\":{\"1137\":1}}],[\"有一个deferpool字段\",{\"1\":{\"1073\":1}}],[\"有一个内置函数closed用于判断管道是否关闭\",{\"1\":{\"1062\":1}}],[\"有一个表达式可能会让人感到困惑\",{\"1\":{\"1037\":1}}],[\"有一个字段extra专门用来存放溢出桶的信息\",{\"1\":{\"1032\":1}}],[\"有一个gin\",{\"1\":{\"966\":1}}],[\"有一个需要注意的点是\",{\"1\":{\"509\":1}}],[\"有一个\",{\"1\":{\"499\":1}}],[\"有一个规则\",{\"1\":{\"329\":1}}],[\"有一点需要稍微注意下\",{\"1\":{\"299\":1}}],[\"有一些函数没有函数体就是通过这种方式来实现的\",{\"1\":{\"44\":1}}],[\"有一些老项目包括\",{\"1\":{\"28\":1}}],[\"有序集合\",{\"0\":{\"277\":1}}],[\"有关切片的实现\",{\"1\":{\"1019\":1}}],[\"有关于页与mspan记录的逻辑可以在mheap\",{\"1\":{\"1115\":1}}],[\"有关于append的使用问题在结构这部分已经讲的很详细了\",{\"1\":{\"1024\":1}}],[\"有关于\",{\"1\":{\"778\":1}}],[\"有关protobuf的讲解可以前往protobuf\",{\"1\":{\"629\":1}}],[\"有关\",{\"1\":{\"205\":1}}],[\"有关它们的protobuf定义应该在protoc编译器的inlucde目录下\",{\"1\":{\"194\":1}}],[\"有关的微服务工具\",{\"1\":{\"96\":1}}],[\"有添加单个拦截器的函数\",{\"1\":{\"165\":1}}],[\"有没有时间一起打游戏\",{\"1\":{\"159\":4}}],[\"有效地连接数据中心内和数据中心之间的服务\",{\"1\":{\"146\":1}}],[\"有自己的任期\",{\"1\":{\"142\":1}}],[\"有插件加持什么语言都能写\",{\"1\":{\"94\":1}}],[\"有\",{\"1\":{\"90\":1,\"1087\":1}}],[\"有着下面几个规则\",{\"1\":{\"1061\":1}}],[\"有着非常多关于它的详细信息\",{\"1\":{\"503\":1}}],[\"有着完善的开发工具链\",{\"1\":{\"88\":1}}],[\"有着优秀的\",{\"1\":{\"88\":1}}],[\"有以下几个可选值\",{\"1\":{\"1088\":1}}],[\"有以下几个可用的值\",{\"1\":{\"9\":1,\"198\":1}}],[\"有以下几种可能\",{\"1\":{\"1030\":1}}],[\"有以下几种方法\",{\"1\":{\"600\":1}}],[\"有以下三个可用的值\",{\"1\":{\"7\":1}}],[\"有archive\",{\"1\":{\"8\":1}}],[\"上完锁之后\",{\"1\":{\"1067\":1}}],[\"上手十分容易\",{\"1\":{\"978\":1}}],[\"上手难度也不高\",{\"1\":{\"0\":1}}],[\"上自行了解\",{\"1\":{\"615\":1}}],[\"上游函数同样的也进行善后工作\",{\"1\":{\"606\":1}}],[\"上图就可以比较好的展示\",{\"1\":{\"1032\":1}}],[\"上图最下方的白色叶子节点代表着不同大小的对象占用\",{\"1\":{\"560\":1}}],[\"上图简单描述了一下\",{\"1\":{\"174\":1}}],[\"上数的例子中在最后一行输出了\",{\"1\":{\"521\":1}}],[\"上的内存缓存\",{\"1\":{\"1116\":1}}],[\"上的相对路径\",{\"1\":{\"999\":1}}],[\"上的\",{\"1\":{\"509\":1}}],[\"上传文件的method都会指定用post\",{\"1\":{\"984\":1}}],[\"上传\",{\"0\":{\"499\":1}}],[\"上方的代码是一个简单的判断分支\",{\"1\":{\"487\":1}}],[\"上一个例子用到了time\",{\"1\":{\"471\":1}}],[\"上一次提出草案是在\",{\"1\":{\"113\":1}}],[\"上下文包\",{\"1\":{\"616\":1}}],[\"上下文也是一种资源\",{\"1\":{\"478\":1}}],[\"上下文取消\",{\"1\":{\"478\":2}}],[\"上下文\",{\"1\":{\"462\":1}}],[\"上例中使用的普通\",{\"1\":{\"486\":1}}],[\"上例中通过for循环配合select来一直监测三个管道是否可以用\",{\"1\":{\"471\":1}}],[\"上例中的\",{\"1\":{\"174\":1}}],[\"上例开启了一个新的协程来向管道\",{\"1\":{\"471\":1}}],[\"上例的接收者就是一个值接收者\",{\"1\":{\"413\":1}}],[\"上述四个定义都可以定义多个\",{\"1\":{\"763\":1}}],[\"上述就是一个简单的布尔表达式\",{\"1\":{\"762\":1}}],[\"上述这几种字符串传递方法涉及到了一次内存拷贝\",{\"1\":{\"536\":1}}],[\"上述这些是比较常用的\",{\"1\":{\"8\":1}}],[\"上述性能测试的样本数只有两组\",{\"1\":{\"526\":1}}],[\"上述操作都只能在主测试中进行\",{\"1\":{\"522\":1}}],[\"上述定义中\",{\"1\":{\"505\":1}}],[\"上述所有的内容都只是在讲述\",{\"1\":{\"505\":1}}],[\"上述已经介绍过了sync\",{\"1\":{\"483\":1}}],[\"上述代码的输出为\",{\"1\":{\"723\":1}}],[\"上述代码会将所有请求转发到https\",{\"1\":{\"646\":1}}],[\"上述代码便不再会发生死锁\",{\"1\":{\"470\":1}}],[\"上述代码运行过后\",{\"1\":{\"413\":1}}],[\"上述提到了动态具体类型这一词\",{\"1\":{\"428\":1}}],[\"上述例子中将字符串转换成\",{\"1\":{\"380\":1}}],[\"上海市\",{\"1\":{\"233\":1}}],[\"上点一个\",{\"1\":{\"95\":1}}],[\"上面那段代码就对应这幅图\",{\"1\":{\"1073\":1}}],[\"上面那段查询代码等价于\",{\"1\":{\"224\":1}}],[\"上面分了好几种情况\",{\"1\":{\"1067\":1}}],[\"上面三种只是对特殊情况的优化\",{\"1\":{\"1067\":1}}],[\"上面三种情况虽然都完成了测试\",{\"1\":{\"518\":1}}],[\"上面两种语法会被编译器翻译成对runtime\",{\"1\":{\"1060\":1}}],[\"上面两种转换方法\",{\"1\":{\"1054\":1}}],[\"上面两段代码就等价于db\",{\"1\":{\"226\":1}}],[\"上面代码做的事情就是遍历每一个桶\",{\"1\":{\"1040\":1}}],[\"上面这个例子是笔者曾经遇到过的一个\",{\"1\":{\"1069\":1}}],[\"上面这两个类型不需要太在意\",{\"1\":{\"747\":1}}],[\"上面这段程序就会在输出完start后阻塞两秒\",{\"1\":{\"743\":1}}],[\"上面这些是用来管理普通的依赖\",{\"1\":{\"18\":1}}],[\"上面这些环境变量都是比较常用的\",{\"1\":{\"7\":1}}],[\"上面只是列出了比较常见的领域\",{\"1\":{\"615\":1}}],[\"上面只是定义了protobuf文件\",{\"1\":{\"199\":1}}],[\"上面迭代器backward的例子使用就等同于下面这段代码\",{\"1\":{\"582\":1}}],[\"上面队列的例子\",{\"1\":{\"578\":1}}],[\"上面例子中的这些有关于nil的特性可能会让人比较困惑\",{\"1\":{\"1071\":1}}],[\"上面例子中\",{\"1\":{\"567\":1}}],[\"上面的代码经过简化\",{\"1\":{\"1104\":1}}],[\"上面的代码做的事情就是创建大一倍容量的新哈希桶\",{\"1\":{\"1042\":1}}],[\"上面的代码可以简化成如下表达式\",{\"1\":{\"1041\":1}}],[\"上面的代码主要做了以下几件事\",{\"1\":{\"1038\":1}}],[\"上面的代码是关于如何在\",{\"1\":{\"1037\":1}}],[\"上面的代码省略了很多细节\",{\"1\":{\"429\":1}}],[\"上面的测试例子就不能使用\",{\"1\":{\"547\":1}}],[\"上面的写法默认是不允许通过编译的\",{\"1\":{\"533\":1}}],[\"上面的例子输出都是一样的\",{\"1\":{\"536\":1}}],[\"上面的例子执行结果如下\",{\"1\":{\"479\":1}}],[\"上面的例子中创建了一个缓冲区大小为\",{\"1\":{\"465\":1}}],[\"上面的例子中结果输出很完美\",{\"1\":{\"462\":1}}],[\"上面的安装方式对于基本使用已经够用了\",{\"1\":{\"92\":1}}],[\"上面提到的都是浏览器的方式交互\",{\"1\":{\"105\":1}}],[\"上有一份同样的镜像仓库\",{\"1\":{\"88\":1}}],[\"上\",{\"1\":{\"23\":1,\"113\":1,\"1073\":1}}],[\"上为\",{\"1\":{\"7\":2}}],[\"或许你对已经对锁的使用得心应手\",{\"1\":{\"1149\":1}}],[\"或许可能比图中的还要长\",{\"1\":{\"169\":1}}],[\"或fastrand64\",{\"1\":{\"1037\":1}}],[\"或操作\",{\"1\":{\"938\":1}}],[\"或组\",{\"1\":{\"758\":1}}],[\"或运算\",{\"1\":{\"728\":1}}],[\"或recv出现了错误\",{\"1\":{\"165\":1}}],[\"或浮点数数字\",{\"1\":{\"124\":1}}],[\"或者w等于0\",{\"1\":{\"1177\":1}}],[\"或者需要在条件改变时通知多个协程\",{\"1\":{\"1170\":1}}],[\"或者为\",{\"1\":{\"1162\":1}}],[\"或者有其它被唤醒的协程已经获得了锁\",{\"1\":{\"1154\":1}}],[\"或者处于饥饿状态\",{\"1\":{\"1152\":1}}],[\"或者其可能依旧存在于\",{\"1\":{\"1045\":1}}],[\"或者超出了最大能分配的内存\",{\"1\":{\"1034\":1}}],[\"或者任何适合消息传输的格式\",{\"1\":{\"952\":1}}],[\"或者任何多维域都可以被验证\",{\"1\":{\"927\":1}}],[\"或者指定条件\",{\"1\":{\"888\":1}}],[\"或者多列in条件\",{\"1\":{\"875\":1}}],[\"或者直接更新所有字段\",{\"1\":{\"867\":1}}],[\"或者直接字符串的形式\",{\"1\":{\"805\":1}}],[\"或者手动传入配置\",{\"1\":{\"851\":1}}],[\"或者说是将所有元素都置为零值\",{\"1\":{\"1027\":1}}],[\"或者说是用户态的线程\",{\"1\":{\"462\":1}}],[\"或者说新内存超过了可以分配的最大内存\",{\"1\":{\"1025\":1}}],[\"或者说返回值就是结构体地址起始处到字段地址起始处两者之间的字节数\",{\"1\":{\"749\":1}}],[\"或者不用框架\",{\"1\":{\"610\":1}}],[\"或者不支持该方法\",{\"1\":{\"474\":1}}],[\"或者any\",{\"1\":{\"573\":1}}],[\"或者可以提供一个函数给\",{\"1\":{\"793\":1}}],[\"或者可以单独指定某一个测试文件的某一个测试用例\",{\"1\":{\"518\":1}}],[\"或者可以自行查询可用的\",{\"1\":{\"503\":1}}],[\"或者example\",{\"1\":{\"517\":1}}],[\"或者也可以在切割的时候手动指定容量\",{\"1\":{\"1020\":1}}],[\"或者也可以在官网下载install\",{\"1\":{\"140\":1}}],[\"或者也可以我们手动来操作\",{\"1\":{\"863\":1}}],[\"或者也可以手动指定模板\",{\"1\":{\"733\":1}}],[\"或者也可以使用any类型加反射来判断\",{\"1\":{\"571\":1}}],[\"或者也可以直接传入当前模板的根对象\",{\"1\":{\"734\":1}}],[\"或者也可以直接看文档cgo\",{\"1\":{\"529\":1}}],[\"或者也可以直接使用函数\",{\"1\":{\"489\":1}}],[\"或者计数数量大于子协程数量时\",{\"1\":{\"472\":1}}],[\"或者都不为空时\",{\"1\":{\"460\":1}}],[\"或者这样也可以\",{\"1\":{\"329\":1}}],[\"或者包名比较复杂\",{\"1\":{\"295\":1}}],[\"或者newf\",{\"1\":{\"168\":1}}],[\"或者请求和响应都是流式的\",{\"1\":{\"157\":1}}],[\"或者叫普通\",{\"1\":{\"157\":1}}],[\"或者称为节点更合适\",{\"1\":{\"142\":1}}],[\"或者更新的版本才能运行\",{\"1\":{\"116\":1}}],[\"或者输出当前项目下所有的模块依赖\",{\"1\":{\"20\":1}}],[\"或者文件夹\",{\"1\":{\"20\":1}}],[\"或者使用or方法来构建or语句\",{\"1\":{\"875\":1}}],[\"或者使用table和model方法可以指定查询表\",{\"1\":{\"869\":1}}],[\"或者使用go\",{\"1\":{\"500\":1}}],[\"或者使用下面的函数从\",{\"1\":{\"168\":1}}],[\"或者使用\",{\"1\":{\"15\":1}}],[\"或者是删除都无法正常进行\",{\"1\":{\"1037\":1}}],[\"或者是使用\",{\"1\":{\"887\":1}}],[\"或者是结构体切片的指针\",{\"1\":{\"869\":1}}],[\"或者是一个类型\",{\"1\":{\"521\":1}}],[\"或者是一个包\",{\"1\":{\"521\":1}}],[\"或者是\",{\"1\":{\"12\":1}}],[\"或者\",{\"1\":{\"12\":1,\"40\":1,\"116\":1,\"141\":1,\"242\":1,\"348\":1,\"888\":1}}],[\"或者某一个函数\",{\"1\":{\"4\":1}}],[\"或者某一个类型\",{\"1\":{\"4\":1}}],[\"或是一个文件夹\",{\"1\":{\"8\":1}}],[\"或\",{\"1\":{\"7\":1,\"37\":1,\"117\":1,\"201\":1,\"934\":1,\"1000\":1}}],[\"用来更新条件并唤醒其他协程\",{\"1\":{\"1165\":1}}],[\"用来处理线程信号\",{\"1\":{\"1089\":1}}],[\"用全局积分抵押\",{\"1\":{\"1139\":1}}],[\"用的最多的还是context\",{\"1\":{\"981\":1}}],[\"用法简洁明了\",{\"1\":{\"978\":1}}],[\"用法多\",{\"1\":{\"0\":1}}],[\"用malloc\",{\"1\":{\"543\":1}}],[\"用户程序分配内存的速度远高于标记的速度\",{\"1\":{\"1139\":1}}],[\"用户程序中有其它对象引用了该对象\",{\"1\":{\"1136\":1}}],[\"用户程序删除了对于该对象的所有引用\",{\"1\":{\"1136\":1}}],[\"用户可以手动触发垃圾回收\",{\"1\":{\"1132\":1}}],[\"用户可以为不同的域\",{\"1\":{\"758\":1}}],[\"用户要做的仅仅就是使用内存\",{\"1\":{\"1109\":1}}],[\"用户数据报协议地址\",{\"1\":{\"932\":3}}],[\"用户和资源可以同时具有角色\",{\"1\":{\"758\":1}}],[\"用户被动获取元素\",{\"1\":{\"583\":1}}],[\"用户定义代码区域的相关协程信息\",{\"1\":{\"561\":1}}],[\"用户定义任务的相关协程信息\",{\"1\":{\"561\":1}}],[\"用户建议提前安装好\",{\"1\":{\"529\":1}}],[\"用户\",{\"1\":{\"509\":1}}],[\"用完之后再释放对象\",{\"1\":{\"485\":1}}],[\"用指定的权限创建指定名称的目录\",{\"1\":{\"425\":1}}],[\"用下划线可以表示不需要某一个变量\",{\"1\":{\"330\":1}}],[\"用起来跟\",{\"1\":{\"217\":1,\"344\":1}}],[\"用起来完全一样\",{\"1\":{\"216\":1}}],[\"用起来就跟普通的\",{\"1\":{\"157\":1}}],[\"用了一个sync\",{\"1\":{\"158\":1}}],[\"用什么编辑器倒无所谓\",{\"1\":{\"94\":1}}],[\"用\",{\"1\":{\"73\":1,\"559\":1,\"610\":1}}],[\"用于确保某个函数在并发环境下只执行一次\",{\"1\":{\"1171\":1}}],[\"用于阻塞其它想要执行的协程\",{\"1\":{\"1172\":1}}],[\"用于阻塞读者协程来等待写者协程\",{\"1\":{\"1155\":1}}],[\"用于阻塞写者协程来等待读者协程\",{\"1\":{\"1155\":1}}],[\"用于在并发情况下保护某一片共享内存能够顺序地访问和修改\",{\"1\":{\"1149\":1}}],[\"用于在命令行进行美观的输出\",{\"1\":{\"615\":1}}],[\"用于在命令行内与\",{\"1\":{\"104\":1}}],[\"用于存储微对象的内存块同样也是这个大小\",{\"1\":{\"1124\":1}}],[\"用于存放死的指针地址\",{\"1\":{\"316\":1}}],[\"用于存放依赖校验和数据库的相关信息\",{\"1\":{\"7\":1}}],[\"用于执行系统调用\",{\"1\":{\"1086\":1}}],[\"用于执行操作系统命令\",{\"1\":{\"616\":1}}],[\"用于标记defer\",{\"1\":{\"1076\":1}}],[\"用于给与\",{\"1\":{\"1073\":1}}],[\"用于给切片添加元素\",{\"1\":{\"137\":1}}],[\"用于竞态分析\",{\"1\":{\"1067\":1}}],[\"用于数据绑定的方法主要是bind\",{\"1\":{\"971\":1}}],[\"用于注入createdat和updatedat字段\",{\"1\":{\"852\":1}}],[\"用于记录等待开始的时间\",{\"1\":{\"1153\":1}}],[\"用于记录函数的映射\",{\"1\":{\"728\":1}}],[\"用于记录该依赖已知的版本号\",{\"1\":{\"510\":1}}],[\"用于比较是否相等的函数eq函数\",{\"1\":{\"728\":1}}],[\"用于比较有序类型\",{\"1\":{\"116\":1}}],[\"用于获取操作系统的用户信息\",{\"1\":{\"616\":1}}],[\"用于监听操作系统的信号\",{\"1\":{\"616\":1}}],[\"用于处理格式化输入输出的包\",{\"1\":{\"616\":1}}],[\"用于返回其内部对于原\",{\"1\":{\"602\":1}}],[\"用于输出错误信息\",{\"1\":{\"599\":1}}],[\"用于控制迭代的继续和停止\",{\"1\":{\"583\":1}}],[\"用于迭代特定数据结构的关键字为for\",{\"1\":{\"580\":1}}],[\"用于删除项目模块依赖缓存\",{\"1\":{\"506\":1}}],[\"用于计算哈希值\",{\"1\":{\"1030\":1}}],[\"用于计算最大值最小值\",{\"1\":{\"116\":1}}],[\"用于计数过程中总共创建了多少个对象\",{\"1\":{\"485\":1}}],[\"用于对象池在申请不到对象时初始化一个对象\",{\"1\":{\"485\":1}}],[\"用于通知取消的原因\",{\"1\":{\"477\":1}}],[\"用于表示是否被执行过\",{\"1\":{\"1172\":1}}],[\"用于表示元素是否存在\",{\"1\":{\"1036\":1}}],[\"用于表示\",{\"1\":{\"1030\":1}}],[\"用于表示主体所属于的领域\",{\"1\":{\"767\":1}}],[\"用于表示测试完毕\",{\"1\":{\"521\":1}}],[\"用于表示上下关闭的原因\",{\"1\":{\"474\":1}}],[\"用于表示数据是否读取成功\",{\"1\":{\"465\":1}}],[\"用于表示当前是否正在分配新的内存空间\",{\"1\":{\"1087\":1}}],[\"用于表示当前\",{\"1\":{\"168\":1}}],[\"用于将一个类型到另一个类型的快速转换\",{\"1\":{\"807\":1}}],[\"用于将操作系统中缓存的\",{\"1\":{\"422\":1}}],[\"用于将protocbuf定义翻译成\",{\"1\":{\"200\":1}}],[\"用于包命名\",{\"1\":{\"298\":1}}],[\"用于声明一个函数\",{\"1\":{\"292\":1}}],[\"用于创建流对象的对象\",{\"1\":{\"166\":2}}],[\"用于关闭管道\",{\"1\":{\"137\":1}}],[\"用于下载\",{\"1\":{\"125\":1}}],[\"用于取代之前的\",{\"1\":{\"117\":1}}],[\"用于构建和结构切片与字符串值\",{\"1\":{\"117\":1}}],[\"用于验证slog\",{\"1\":{\"116\":1}}],[\"用于清空\",{\"1\":{\"116\":1}}],[\"用于读写\",{\"1\":{\"65\":1}}],[\"用于判断defer属于哪一个函数\",{\"1\":{\"1073\":1}}],[\"用于判断操作是否已经执行\",{\"1\":{\"484\":1}}],[\"用于判断\",{\"1\":{\"64\":1}}],[\"用于\",{\"1\":{\"64\":1}}],[\"用于测试的\",{\"1\":{\"55\":1}}],[\"用于添加和移除要替换的模块\",{\"1\":{\"34\":1}}],[\"用于修改go\",{\"1\":{\"26\":1}}],[\"用于格式化输出测试失败的日志信息\",{\"1\":{\"521\":1}}],[\"用于格式化\",{\"1\":{\"17\":1}}],[\"用于编译时产生的临时文件\",{\"1\":{\"7\":1}}],[\"除非能保证永远不会对数据进行修改\",{\"1\":{\"1054\":1}}],[\"除非说旧数据的使用者在使用过后永远不再需要这个字符串\",{\"1\":{\"1052\":1}}],[\"除非所有其他指定字段与指定字段后面的值相等\",{\"1\":{\"936\":2}}],[\"除非在加载时指定了名称或者通过template语句手动指定\",{\"1\":{\"733\":1}}],[\"除非手动调用c\",{\"1\":{\"543\":1}}],[\"除非你知道你自己干什么\",{\"1\":{\"44\":1}}],[\"除基本类型以外的其它类型\",{\"1\":{\"323\":1}}],[\"除此这些之外\",{\"1\":{\"37\":1}}],[\"除此之外还有一些细节\",{\"1\":{\"1040\":1}}],[\"除此之外还有许多其他的第三方网站提供了非常多的关于\",{\"1\":{\"291\":1}}],[\"除此之外还有许多其它插件\",{\"1\":{\"200\":1}}],[\"除此之外还可以进行类型重写等一系列操作\",{\"1\":{\"1016\":1}}],[\"除此之外\",{\"1\":{\"7\":1,\"8\":1,\"12\":1,\"40\":1,\"88\":1,\"168\":1,\"174\":1,\"198\":1,\"332\":1,\"417\":1,\"483\":1,\"488\":1,\"491\":1,\"530\":1,\"547\":1,\"607\":1,\"732\":1,\"762\":1,\"851\":1,\"866\":1,\"1099\":1}}],[\"除此之外没有任何其它作用\",{\"1\":{\"5\":1}}],[\"除了协程之外\",{\"1\":{\"1073\":1}}],[\"除了通信之外\",{\"1\":{\"1056\":1}}],[\"除了在开发的时候\",{\"1\":{\"1006\":1}}],[\"除了嵌套的关系\",{\"1\":{\"899\":1}}],[\"除了这些\",{\"1\":{\"1043\":1}}],[\"除了这些操作以外\",{\"1\":{\"903\":1}}],[\"除了这些之外\",{\"1\":{\"728\":1}}],[\"除了这种情况外还有其它情况可能会发生逃逸现象\",{\"1\":{\"550\":1}}],[\"除了g\",{\"1\":{\"698\":1}}],[\"除了profile和trace两个选项之外\",{\"1\":{\"557\":1}}],[\"除了极端的性能要求情况下\",{\"1\":{\"553\":1}}],[\"除了第一个元素\",{\"1\":{\"539\":1}}],[\"除了use指令外\",{\"1\":{\"515\":1}}],[\"除了使用update\",{\"1\":{\"227\":1}}],[\"除了语言层面之外\",{\"1\":{\"137\":1}}],[\"除了功能性指令外\",{\"1\":{\"39\":1}}],[\"除了compile之外\",{\"1\":{\"14\":1}}],[\"除了非常古老的项目\",{\"1\":{\"7\":1}}],[\"yet\",{\"1\":{\"1132\":1,\"1144\":1}}],[\"ype\",{\"1\":{\"826\":1}}],[\"yyyy\",{\"1\":{\"739\":1}}],[\"yyyymmddhhmmss\",{\"1\":{\"509\":1}}],[\"yml方式进行渲染\",{\"1\":{\"981\":1}}],[\"yml\",{\"0\":{\"621\":1},\"1\":{\"621\":2,\"623\":1,\"791\":1,\"840\":1}}],[\"yielddelay\",{\"1\":{\"1107\":1}}],[\"yield\",{\"1\":{\"114\":2,\"581\":3,\"582\":5,\"584\":2,\"587\":6}}],[\"your\",{\"1\":{\"112\":1,\"774\":1,\"970\":4}}],[\"you\",{\"1\":{\"108\":1,\"111\":1,\"112\":1,\"205\":1,\"503\":2,\"527\":4,\"717\":4,\"904\":2,\"956\":1,\"1037\":1}}],[\"yosssi\",{\"1\":{\"60\":1}}],[\"yuasa\",{\"1\":{\"1143\":1}}],[\"yuque\",{\"1\":{\"102\":1}}],[\"yuin\",{\"1\":{\"75\":1,\"802\":2,\"804\":1,\"805\":2}}],[\"yaml类型的接口文档\",{\"1\":{\"1009\":1}}],[\"yamlbinding\",{\"1\":{\"971\":1}}],[\"yamlstringsettings\",{\"1\":{\"798\":1}}],[\"yaml文件内容默认如下\",{\"1\":{\"156\":1}}],[\"yaml\",{\"1\":{\"28\":3,\"63\":4,\"156\":2,\"158\":2,\"159\":2,\"164\":2,\"503\":2,\"509\":1,\"617\":2,\"621\":3,\"622\":1,\"623\":1,\"788\":1,\"791\":2,\"798\":4,\"839\":26,\"971\":1,\"981\":1,\"1016\":1,\"1017\":3}}],[\"y\",{\"1\":{\"7\":1,\"296\":1,\"307\":1,\"460\":1,\"509\":2,\"587\":2,\"725\":2,\"799\":2,\"1024\":5,\"1042\":6,\"1043\":6,\"1074\":2}}],[\"默认实例名称\",{\"1\":{\"1016\":1}}],[\"默认支持的\",{\"1\":{\"1009\":1}}],[\"默认就是要用到\",{\"1\":{\"1003\":1}}],[\"默认就是这个\",{\"1\":{\"201\":1}}],[\"默认根路径是项目路径\",{\"1\":{\"980\":1}}],[\"默认监听localhost\",{\"1\":{\"965\":1}}],[\"默认会返回\",{\"1\":{\"989\":1}}],[\"默认会自动进行嵌套结构体验证\",{\"1\":{\"942\":1}}],[\"默认会将结果缓存\",{\"1\":{\"38\":1}}],[\"默认开启事务\",{\"1\":{\"900\":1}}],[\"默认进行更新操作\",{\"1\":{\"889\":1}}],[\"默认表名\",{\"1\":{\"862\":1}}],[\"默认引用也就是主键\",{\"1\":{\"860\":1}}],[\"默认debug级别\",{\"1\":{\"842\":1}}],[\"默认console\",{\"1\":{\"840\":1}}],[\"默认分区可以使用空字符串表示\",{\"1\":{\"817\":1}}],[\"默认情况下是引用的主键\",{\"1\":{\"860\":1}}],[\"默认情况下是不会输出堆栈的\",{\"1\":{\"603\":1}}],[\"默认情况下只有go和gofmt这两个可执行文件\",{\"1\":{\"7\":1}}],[\"默认集成该工具\",{\"1\":{\"558\":1}}],[\"默认种子为系统时间\",{\"1\":{\"519\":1}}],[\"默认缓冲区大小是4kb\",{\"1\":{\"340\":1}}],[\"默认使用的日志中间件采用的是os\",{\"1\":{\"1005\":1}}],[\"默认使用tab也就是制表符进行缩进\",{\"1\":{\"310\":1}}],[\"默认使用proto3的语法\",{\"1\":{\"181\":1}}],[\"默认不会关闭过时的连接\",{\"1\":{\"242\":1}}],[\"默认连接池大小等于\",{\"1\":{\"242\":1}}],[\"默认0\",{\"1\":{\"242\":1}}],[\"默认的协程栈大小为\",{\"1\":{\"1101\":1}}],[\"默认的配置是不支持跨域的跨域配置\",{\"1\":{\"984\":1}}],[\"默认的\",{\"1\":{\"949\":1,\"990\":1}}],[\"默认的服务发现就是通过\",{\"1\":{\"174\":1}}],[\"默认的工具链也存放在该位置\",{\"1\":{\"7\":1}}],[\"默认返回nil\",{\"1\":{\"152\":1}}],[\"默认重试时间\",{\"1\":{\"143\":1}}],[\"默认只会解析从main的导入\",{\"1\":{\"30\":1}}],[\"默认只支持\",{\"1\":{\"18\":1}}],[\"默认为32\",{\"1\":{\"986\":1}}],[\"默认为go\",{\"1\":{\"519\":1}}],[\"默认为\",{\"1\":{\"7\":1,\"144\":1}}],[\"默认为空即启用\",{\"1\":{\"7\":1}}],[\"默认是4次\",{\"1\":{\"1153\":1}}],[\"默认是main\",{\"1\":{\"1017\":1}}],[\"默认是在main\",{\"1\":{\"1011\":1,\"1017\":1}}],[\"默认是不支持\",{\"1\":{\"1003\":1}}],[\"默认是构造结构体类型\",{\"1\":{\"828\":1}}],[\"默认是等待\",{\"1\":{\"242\":1}}],[\"默认是0\",{\"1\":{\"242\":1}}],[\"默认是这个\",{\"1\":{\"198\":1}}],[\"默认是没法解析的\",{\"1\":{\"193\":1}}],[\"默认是该种类型的字段\",{\"1\":{\"187\":1}}],[\"默认是\",{\"1\":{\"170\":1,\"242\":6,\"510\":1,\"1017\":2}}],[\"默认是异步建立的\",{\"1\":{\"170\":1}}],[\"默认是$goroot\",{\"1\":{\"7\":1}}],[\"默认是sum\",{\"1\":{\"7\":1}}],[\"默认public\",{\"1\":{\"7\":1}}],[\"默认\",{\"1\":{\"7\":1,\"242\":1,\"519\":1,\"1007\":1}}],[\"默认值应当表现出默认的行为\",{\"1\":{\"1071\":1}}],[\"默认值是\",{\"1\":{\"995\":1}}],[\"默认值是gohostarch\",{\"1\":{\"7\":1}}],[\"默认值是gohostos\",{\"1\":{\"7\":1}}],[\"默认值\",{\"0\":{\"790\":1},\"1\":{\"789\":1}}],[\"默认值设置\",{\"1\":{\"788\":1}}],[\"默认值处理\",{\"1\":{\"406\":1}}],[\"默认值为nil\",{\"1\":{\"364\":1}}],[\"默认值为https\",{\"1\":{\"7\":1}}],[\"默认值为$gopath\",{\"1\":{\"7\":1}}],[\"|=\",{\"1\":{\"1042\":1,\"1043\":1,\"1153\":2}}],[\"|████████████████████████████████████████|\",{\"1\":{\"93\":1}}],[\"||\",{\"1\":{\"42\":1,\"236\":1,\"237\":1,\"299\":1,\"531\":1,\"578\":4,\"600\":1,\"605\":1,\"763\":1,\"783\":1,\"841\":2,\"951\":1,\"1020\":5,\"1025\":1,\"1026\":1,\"1034\":1,\"1036\":1,\"1037\":3,\"1041\":1,\"1042\":1,\"1048\":1,\"1053\":1,\"1100\":2,\"1107\":2,\"1120\":1,\"1122\":1,\"1124\":1,\"1137\":2,\"1145\":2,\"1153\":4,\"1154\":1,\"1162\":2,\"1177\":2}}],[\"|\",{\"1\":{\"7\":4,\"28\":3,\"40\":1,\"92\":26,\"140\":2,\"141\":2,\"142\":2,\"143\":2,\"145\":4,\"146\":4,\"147\":3,\"150\":7,\"158\":7,\"159\":10,\"164\":10,\"179\":1,\"180\":2,\"193\":3,\"201\":2,\"203\":1,\"299\":1,\"499\":1,\"503\":1,\"521\":4,\"526\":2,\"530\":1,\"571\":2,\"572\":17,\"573\":11,\"574\":61,\"575\":33,\"649\":5,\"729\":2,\"757\":1,\"800\":1,\"823\":1,\"840\":2,\"862\":101,\"936\":76,\"938\":26,\"982\":4,\"993\":4,\"994\":4,\"999\":14,\"1009\":2,\"1016\":1,\"1042\":1,\"1151\":10,\"1154\":1}}],[\"架构对工具进行分组\",{\"1\":{\"14\":1}}],[\"架构且启用了\",{\"1\":{\"12\":1}}],[\"架构且未启用\",{\"1\":{\"12\":1}}],[\"架构的指令\",{\"1\":{\"7\":1}}],[\"架构\",{\"1\":{\"7\":3,\"11\":2,\"40\":1,\"525\":1}}],[\"代指当前路径的绝对路径\",{\"1\":{\"545\":1}}],[\"代替\",{\"1\":{\"330\":1}}],[\"代理修改成功后\",{\"1\":{\"501\":1}}],[\"代理\",{\"1\":{\"141\":1,\"142\":1,\"501\":1}}],[\"代表\",{\"1\":{\"1049\":1}}],[\"代表了代码中b\",{\"1\":{\"525\":1}}],[\"代表了使用的\",{\"1\":{\"525\":1}}],[\"代表了会将当前文件夹下的所有文件都打包进二进制文件中\",{\"1\":{\"41\":1}}],[\"代表键是否存在\",{\"1\":{\"383\":1}}],[\"代表着写锁已经被释放了\",{\"1\":{\"1159\":1}}],[\"代表着调度器正式开始工作\",{\"1\":{\"1089\":1}}],[\"代表着当前请求的方法类型是不允许的\",{\"1\":{\"990\":1}}],[\"代表着当前函数所消耗的资源\",{\"1\":{\"559\":1}}],[\"代表着当前模块名为golearn\",{\"1\":{\"509\":1}}],[\"代表着总共能装多少高度的水\",{\"1\":{\"364\":1}}],[\"代表着较后进行运算\",{\"1\":{\"311\":1}}],[\"代表着\",{\"1\":{\"143\":1,\"1047\":1}}],[\"代表着本机的操作系统\",{\"1\":{\"7\":1}}],[\"代表着本机的\",{\"1\":{\"7\":1}}],[\"代码整体上非常简单\",{\"1\":{\"1173\":1}}],[\"代码通常在编译期间由编译器插入到代码中\",{\"1\":{\"1141\":1}}],[\"代码是这样写的\",{\"1\":{\"1074\":1}}],[\"代码对应如下\",{\"1\":{\"1038\":1}}],[\"代码执行就回到了for\",{\"1\":{\"1037\":1}}],[\"代码跟上一个例子没有区别\",{\"1\":{\"1019\":1}}],[\"代码来自动完成实例注册\",{\"1\":{\"1016\":1}}],[\"代码十分的简洁\",{\"1\":{\"954\":1}}],[\"代码一样\",{\"1\":{\"727\":1}}],[\"代码无法通过编译\",{\"1\":{\"575\":1}}],[\"代码风格逐渐形成了规范\",{\"1\":{\"562\":1}}],[\"代码行数有好几万\",{\"1\":{\"550\":1}}],[\"代码中创建了一个空转的协程\",{\"1\":{\"1106\":1}}],[\"代码中\",{\"1\":{\"1010\":1,\"1063\":1}}],[\"代码中引入sum\",{\"1\":{\"545\":1}}],[\"代码中res是\",{\"1\":{\"532\":1}}],[\"代码糅杂在一起十分降低可读性\",{\"1\":{\"531\":1}}],[\"代码非常多\",{\"1\":{\"531\":1}}],[\"代码写在\",{\"1\":{\"531\":1}}],[\"代码调用\",{\"0\":{\"530\":1}}],[\"代码引用\",{\"0\":{\"503\":1}}],[\"代码相比复制文件有点多但算不上复杂\",{\"1\":{\"426\":1}}],[\"代码块彼此之间的变量作用域是相互独立的\",{\"1\":{\"333\":1}}],[\"代码块\",{\"0\":{\"333\":1}}],[\"代码间隔\",{\"0\":{\"311\":1}}],[\"代码缩进\",{\"0\":{\"310\":1}}],[\"代码示例如下\",{\"1\":{\"416\":1,\"419\":1,\"431\":1,\"433\":1,\"438\":1,\"538\":1}}],[\"代码示例\",{\"1\":{\"286\":1}}],[\"代码体积最小\",{\"1\":{\"198\":1}}],[\"代码如下所示\",{\"1\":{\"1112\":1}}],[\"代码如下\",{\"1\":{\"158\":1,\"399\":1,\"416\":1,\"417\":1,\"525\":1,\"577\":1,\"736\":1,\"1019\":1,\"1032\":1,\"1041\":1,\"1046\":1,\"1054\":2,\"1062\":1,\"1106\":1,\"1111\":1}}],[\"代码段\",{\"1\":{\"107\":1,\"108\":1}}],[\"代码里面了解到的\",{\"1\":{\"105\":1}}],[\"代码也会同步到官方那边的服务器里面\",{\"1\":{\"104\":1}}],[\"代码随想录\",{\"1\":{\"102\":2}}],[\"代码\",{\"0\":{\"531\":1},\"1\":{\"40\":1,\"94\":1,\"104\":1,\"132\":1,\"209\":1,\"212\":1,\"214\":1,\"733\":1,\"934\":1}}],[\"代码的格式化器prettify它就提供了相当多的配置用于格式化代码\",{\"1\":{\"17\":1}}],[\"代码生成的过程如果感兴趣可以自己去了解下\",{\"1\":{\"1024\":1}}],[\"代码生成以及创建\",{\"1\":{\"159\":1}}],[\"代码生成库\",{\"1\":{\"79\":1}}],[\"代码生成\",{\"0\":{\"79\":1},\"1\":{\"2\":1,\"156\":1}}],[\"代码检查\",{\"1\":{\"2\":1}}],[\"kmem\",{\"1\":{\"1038\":3}}],[\"k6\",{\"1\":{\"1030\":1}}],[\"k5\",{\"1\":{\"1030\":1}}],[\"k4\",{\"1\":{\"1030\":1}}],[\"k3\",{\"1\":{\"1030\":1}}],[\"k3这种方式访问\",{\"1\":{\"725\":1}}],[\"kb\",{\"1\":{\"820\":3}}],[\"kazár\",{\"1\":{\"798\":1}}],[\"kak\",{\"1\":{\"229\":1}}],[\"kataras\",{\"1\":{\"51\":1}}],[\"konghq\",{\"1\":{\"178\":1}}],[\"kong\",{\"0\":{\"178\":1},\"1\":{\"178\":2}}],[\"koding\",{\"1\":{\"53\":1}}],[\"k2的特殊情况\",{\"1\":{\"1042\":1,\"1043\":1}}],[\"k2\",{\"1\":{\"161\":2,\"163\":1,\"725\":1,\"1030\":1,\"1039\":4,\"1042\":7,\"1043\":3}}],[\"k1\",{\"1\":{\"161\":2,\"163\":2,\"725\":1,\"1030\":1}}],[\"know\",{\"1\":{\"205\":1,\"1107\":1}}],[\"known\",{\"1\":{\"158\":3,\"164\":1,\"166\":1,\"1073\":1,\"1078\":2,\"1086\":5}}],[\"knadh\",{\"1\":{\"71\":1}}],[\"k8s\",{\"1\":{\"141\":1,\"615\":1}}],[\"kill\",{\"1\":{\"1063\":1}}],[\"kingpin\",{\"1\":{\"615\":1}}],[\"kindnames\",{\"1\":{\"432\":1}}],[\"kind类型仅仅实现了stringer接口的string\",{\"1\":{\"432\":1}}],[\"kind来表示\",{\"1\":{\"432\":1}}],[\"kind\",{\"0\":{\"432\":1},\"1\":{\"107\":1,\"429\":2,\"432\":5,\"433\":2,\"445\":2,\"571\":3,\"942\":1,\"1033\":1,\"1132\":5}}],[\"kib\",{\"1\":{\"499\":1}}],[\"kite\",{\"1\":{\"53\":2}}],[\"kitex\",{\"1\":{\"53\":2,\"610\":1}}],[\"kit\",{\"1\":{\"53\":3}}],[\"kernelarch\",{\"1\":{\"907\":1}}],[\"kernelversion\",{\"1\":{\"907\":1}}],[\"keeplalive对要发送的数据进行保活来确保接收方成功复制\",{\"1\":{\"1059\":1}}],[\"keepalive\",{\"1\":{\"1059\":1}}],[\"keeps\",{\"1\":{\"1037\":2}}],[\"keep\",{\"1\":{\"520\":1,\"1087\":1}}],[\"ket\",{\"1\":{\"241\":1}}],[\"ken\",{\"1\":{\"87\":1}}],[\"key=val\",{\"1\":{\"969\":1}}],[\"key=value\",{\"1\":{\"174\":1}}],[\"key=value命令修改的环境变量值将会被写入配置文件中\",{\"1\":{\"7\":1}}],[\"keydelimiter\",{\"1\":{\"796\":1}}],[\"key不存在\",{\"1\":{\"383\":1}}],[\"keytype\",{\"1\":{\"382\":1,\"1030\":2}}],[\"key2=val2\",{\"1\":{\"969\":1}}],[\"key2=value2\",{\"1\":{\"174\":1}}],[\"key2\",{\"1\":{\"161\":2,\"409\":1}}],[\"key1=val1\",{\"1\":{\"969\":1}}],[\"key1\",{\"1\":{\"161\":2}}],[\"keyring\",{\"1\":{\"140\":2}}],[\"keyrings\",{\"1\":{\"140\":2}}],[\"keysize\",{\"1\":{\"1030\":2,\"1036\":2,\"1037\":2,\"1038\":5,\"1039\":2,\"1042\":6,\"1043\":1}}],[\"keys会返回一个迭代\",{\"1\":{\"585\":1}}],[\"keys\",{\"1\":{\"16\":1,\"160\":1,\"585\":7,\"1030\":2}}],[\"key\",{\"1\":{\"16\":1,\"61\":1,\"143\":3,\"144\":1,\"160\":4,\"161\":2,\"186\":1,\"222\":1,\"233\":3,\"239\":1,\"385\":1,\"386\":4,\"387\":1,\"433\":2,\"450\":2,\"474\":2,\"475\":1,\"476\":5,\"486\":10,\"727\":1,\"791\":12,\"796\":1,\"797\":1,\"817\":7,\"863\":2,\"895\":4,\"897\":4,\"927\":1,\"942\":1,\"943\":2,\"944\":4,\"945\":2,\"946\":2,\"948\":2,\"949\":1,\"950\":1,\"951\":2,\"952\":1,\"953\":1,\"977\":1,\"1002\":1,\"1015\":1,\"1030\":2,\"1035\":3,\"1036\":14,\"1037\":10,\"1038\":19,\"1039\":7,\"1042\":4,\"1043\":1,\"1045\":3,\"1046\":4,\"1047\":11,\"1048\":5,\"1049\":2}}],[\"klauspost\",{\"1\":{\"65\":2,\"503\":2,\"509\":1}}],[\"k0kubun\",{\"1\":{\"64\":1}}],[\"kv\",{\"1\":{\"62\":2,\"143\":4,\"144\":5,\"161\":1,\"163\":1,\"175\":1,\"614\":1}}],[\"kylebanks\",{\"1\":{\"20\":1,\"24\":1,\"27\":1}}],[\"k\",{\"1\":{\"9\":1,\"137\":3,\"161\":2,\"387\":2,\"572\":2,\"582\":3,\"583\":3,\"585\":13,\"587\":4,\"725\":2,\"1030\":1,\"1036\":4,\"1037\":9,\"1038\":5,\"1039\":4,\"1042\":19,\"1043\":2,\"1047\":2,\"1049\":2,\"1067\":3,\"1074\":2}}],[\"kratos\",{\"1\":{\"6\":1,\"53\":4,\"610\":1}}],[\"且w大于0\",{\"1\":{\"1177\":1}}],[\"且delta与v相等\",{\"1\":{\"1177\":1}}],[\"且很重要\",{\"1\":{\"1156\":1}}],[\"且没有协程占用锁\",{\"1\":{\"1153\":1}}],[\"且没有任何中间件支持\",{\"1\":{\"1004\":1}}],[\"且锁仍然被占用\",{\"1\":{\"1153\":1}}],[\"且需要回收\",{\"1\":{\"1148\":1}}],[\"且期间不会被抢占\",{\"1\":{\"1138\":1}}],[\"且时间不短\",{\"1\":{\"1134\":1}}],[\"且未被初始化\",{\"1\":{\"1086\":1}}],[\"且代码中不包含default分支\",{\"1\":{\"1067\":1}}],[\"且代码中包含default\",{\"1\":{\"1067\":1}}],[\"且缓冲区中没有剩余元素\",{\"1\":{\"1067\":1}}],[\"且有发送方等待发送就已经代表了缓冲区已经满了\",{\"1\":{\"1060\":1}}],[\"且有利于\",{\"1\":{\"954\":1}}],[\"且支持泛型\",{\"1\":{\"1050\":1}}],[\"且溢出桶内有元素\",{\"1\":{\"1039\":1}}],[\"且还没有插入元素\",{\"1\":{\"1038\":1}}],[\"且引用的位置和范围可以不同\",{\"1\":{\"1019\":1}}],[\"且对应一个处理器\",{\"1\":{\"955\":1}}],[\"且最小长度为5\",{\"1\":{\"944\":1}}],[\"且结构体之间具引用关系\",{\"1\":{\"864\":1}}],[\"且官方声称该包不受go\",{\"1\":{\"745\":1}}],[\"且参数只能是一个有效的\",{\"1\":{\"602\":1}}],[\"且提供了更加完善的错误检查机制\",{\"1\":{\"599\":1}}],[\"且提供了非常简单易用的\",{\"1\":{\"479\":1}}],[\"且类型名称不建议与已有的内置标识符重复\",{\"1\":{\"593\":1}}],[\"且返回值为func\",{\"1\":{\"592\":1}}],[\"且该类型的值可以由该接口类型的变量存储\",{\"1\":{\"563\":2}}],[\"且该环境变量无法被修改\",{\"1\":{\"7\":1}}],[\"且其子对象也全都访问过并标记为灰色对象\",{\"1\":{\"1136\":1}}],[\"且其中一个是\",{\"1\":{\"1066\":1}}],[\"且其原始数据不可读\",{\"1\":{\"556\":1}}],[\"且其功能也仅限于本地开发\",{\"1\":{\"513\":1}}],[\"且导入名称无法被重写\",{\"1\":{\"530\":1}}],[\"且每个测试用例执行两轮\",{\"1\":{\"525\":1}}],[\"且函数的入参必须是t\",{\"1\":{\"521\":1}}],[\"且新版本不加以区分的话\",{\"1\":{\"509\":1}}],[\"且\",{\"1\":{\"493\":1,\"1085\":1}}],[\"且会返回是否成功替换的布尔值\",{\"1\":{\"490\":1}}],[\"且权限为0666向指定写入数据的例子\",{\"1\":{\"418\":1}}],[\"且不是饥饿模式\",{\"1\":{\"1154\":1}}],[\"且不是\",{\"1\":{\"1066\":1}}],[\"且不会放过每一个变化的细节\",{\"1\":{\"793\":1}}],[\"且不存在于\",{\"1\":{\"1047\":1}}],[\"且不存在deny的结果\",{\"1\":{\"763\":1}}],[\"且不存在时会自动创建\",{\"1\":{\"416\":1}}],[\"且不等同于any\",{\"1\":{\"746\":1}}],[\"且不需要发送邮件\",{\"1\":{\"71\":1}}],[\"且后续使用过程中可能会频繁的插入和删除元素\",{\"1\":{\"363\":1}}],[\"且后续使用中不会有扩容的需求\",{\"1\":{\"359\":1}}],[\"且必须保持其存活\",{\"1\":{\"48\":1}}],[\"且只能进行一种操作\",{\"1\":{\"471\":1}}],[\"且只能是管道\",{\"1\":{\"471\":1}}],[\"且只能被操作系统的环境变量所覆盖\",{\"1\":{\"7\":1}}],[\"且只有自定义类型能够拥有方法\",{\"1\":{\"412\":1}}],[\"且只有一行输出\",{\"1\":{\"20\":1}}],[\"且本身的技术与能力都十分的有限\",{\"1\":{\"0\":1}}],[\"该信号量是由读者协程释放的\",{\"1\":{\"1158\":1}}],[\"该内存单元已经被回收了\",{\"1\":{\"1148\":1}}],[\"该内存单元正在被回收\",{\"1\":{\"1148\":1}}],[\"该内存单元需要回收\",{\"1\":{\"1148\":1}}],[\"该队列负责存放待扫描的灰色对象\",{\"1\":{\"1137\":1}}],[\"该值也会被调步算法进行调整\",{\"1\":{\"1132\":1}}],[\"该分配器会向操作系统预先申请一片连续的内存空间\",{\"1\":{\"1111\":1}}],[\"该协程不停的空转\",{\"1\":{\"1106\":1}}],[\"该协程使用线程的系统栈\",{\"1\":{\"1089\":1}}],[\"该协议专用于节点间的随机通信\",{\"1\":{\"142\":1}}],[\"该论文的基本思想是进程与进程之间通过通信来进行数据的交换\",{\"1\":{\"1084\":1}}],[\"该变量决定了当前键值对被搬迁到上半区还是下半区\",{\"1\":{\"1042\":1}}],[\"该字段是用于存放每个键的高八位\",{\"1\":{\"1030\":1}}],[\"该字段跳过验证\",{\"1\":{\"938\":1}}],[\"该字段表示\",{\"1\":{\"934\":1}}],[\"该字符串就是\",{\"1\":{\"772\":1}}],[\"该字符串的内存是由\",{\"1\":{\"536\":1}}],[\"该级别以下的日志不会再通过syncer输出\",{\"1\":{\"839\":1}}],[\"该库使用起来相当简单\",{\"1\":{\"820\":1}}],[\"该\",{\"1\":{\"773\":1}}],[\"该类型与uintptr结合使用\",{\"1\":{\"751\":1}}],[\"该类型也仅有这一个方法\",{\"1\":{\"432\":1}}],[\"该包下的其他\",{\"1\":{\"907\":1}}],[\"该包可能不具有移植性\",{\"1\":{\"745\":1}}],[\"该包提供的操作可以直接跳过\",{\"1\":{\"745\":1}}],[\"该包通常是为了存储用于测试的辅助数据\",{\"1\":{\"517\":1}}],[\"该接口下只有一个方法error\",{\"1\":{\"599\":1}}],[\"该迭代器会以\",{\"1\":{\"585\":1}}],[\"该工具便是为了解决性能分析问题而生\",{\"1\":{\"526\":1}}],[\"该工具使用起来十分方便\",{\"1\":{\"516\":1}}],[\"该版本的go\",{\"1\":{\"510\":1}}],[\"该版本没有语法上的变更\",{\"1\":{\"131\":1,\"134\":1}}],[\"该版本没什么重要的语法上的变更\",{\"1\":{\"121\":1,\"122\":1,\"125\":1,\"126\":1,\"127\":1}}],[\"该关键字仅在主模块中才生效\",{\"1\":{\"509\":1}}],[\"该例开启了\",{\"1\":{\"481\":1}}],[\"该例输出的结果为\",{\"1\":{\"341\":1}}],[\"该上下文的任何子级也会随之取消\",{\"1\":{\"477\":1}}],[\"该通道就会被关闭\",{\"1\":{\"474\":1}}],[\"该管道仅仅起到通知作用\",{\"1\":{\"474\":1}}],[\"该结构体只对外暴露三个方法\",{\"1\":{\"472\":1}}],[\"该结构体中最大的是int64占用\",{\"1\":{\"410\":1}}],[\"该结构体中的所有字段都可以作为模板参数\",{\"1\":{\"21\":1}}],[\"该case则会被忽略\",{\"1\":{\"471\":1}}],[\"该指令会考虑到\",{\"1\":{\"384\":1}}],[\"该特性于\",{\"1\":{\"371\":1}}],[\"该格式化工具没有任何的格式化参数可以传递\",{\"1\":{\"308\":1}}],[\"该转义仅在字符串内有效\",{\"1\":{\"305\":1}}],[\"该转义仅在字符内有效\",{\"1\":{\"305\":1}}],[\"该方式在开始时需要\",{\"1\":{\"1143\":1}}],[\"该方式更新时不需要覆盖原安装目录\",{\"1\":{\"92\":1}}],[\"该方法会返回一个新的mspan\",{\"1\":{\"1117\":1}}],[\"该方法的返回值是字符串\",{\"1\":{\"599\":1}}],[\"该方法签名如下\",{\"1\":{\"523\":1}}],[\"该方法返回对应的键值\",{\"1\":{\"474\":1}}],[\"该方法返回一个error\",{\"1\":{\"474\":1}}],[\"该方法具有两个返回值\",{\"1\":{\"474\":1}}],[\"该方法可能被并发的调用\",{\"1\":{\"174\":1}}],[\"该函数总共做了以下几个工作\",{\"1\":{\"1101\":1}}],[\"该函数主要做了下面几个事情\",{\"1\":{\"1096\":1}}],[\"该函数部分代码如下\",{\"1\":{\"1089\":1}}],[\"该函数对\",{\"1\":{\"1089\":1}}],[\"该函数对于每一种基础类型都做了处理\",{\"1\":{\"460\":1}}],[\"该函数对于文件夹也是同样的效果\",{\"1\":{\"420\":1}}],[\"该函数是unrecoverable即不可恢复的\",{\"1\":{\"1079\":1}}],[\"该函数是由汇编实现\",{\"1\":{\"1027\":1}}],[\"该函数负责创建defer结构并将其加入协程\",{\"1\":{\"1074\":1}}],[\"该函数负责拷贝切片\",{\"1\":{\"1026\":1}}],[\"该函数的逻辑并不复杂\",{\"1\":{\"1040\":1}}],[\"该函数在初始化过程中有几个主要的工作\",{\"1\":{\"1034\":1}}],[\"该函数由汇编实现\",{\"1\":{\"1033\":1}}],[\"该函数接收一个切片\",{\"1\":{\"753\":1}}],[\"该函数用于表示结构体内字段偏移量\",{\"1\":{\"749\":1}}],[\"该函数会根据不同类型来计算哈希值\",{\"1\":{\"1033\":1}}],[\"该函数会将采集到的数据写入到指定文件中\",{\"1\":{\"556\":1}}],[\"该函数会在测试用例结束时执行\",{\"1\":{\"521\":1}}],[\"该函数中展现了deadlinecontext的基本使用方法\",{\"1\":{\"520\":1}}],[\"该函数配合select使用可以非常简单的实现超时机制\",{\"1\":{\"471\":1}}],[\"该函数签名如下\",{\"1\":{\"464\":1,\"1020\":1,\"1034\":1,\"1037\":1,\"1038\":1,\"1039\":1}}],[\"该函数默认会将参数输出到标准输出中\",{\"1\":{\"339\":1}}],[\"该函数多次调用的话\",{\"1\":{\"162\":1}}],[\"该函数最多调用一次\",{\"1\":{\"162\":1}}],[\"该节点使用的\",{\"1\":{\"143\":1}}],[\"该公司其下的另一个产品\",{\"1\":{\"142\":1}}],[\"该命令的意思是在\",{\"1\":{\"1017\":1}}],[\"该命令的主要功能是用来下载第三方公开的一些命令行工具\",{\"1\":{\"19\":1}}],[\"该命令会创建一个名为go\",{\"1\":{\"32\":1}}],[\"该命令会检查项目的依赖自下载到本地以后是否被修改过\",{\"1\":{\"29\":1}}],[\"该命令没有任何参数和任何标志\",{\"1\":{\"5\":1}}],[\"该pattern规则适用于所有支持该格式的标志\",{\"1\":{\"9\":1}}],[\"该参数必须放在最后\",{\"1\":{\"8\":1}}],[\"该支持通配符设置\",{\"1\":{\"7\":1}}],[\"该环境变量表示使用何种方式来管理\",{\"1\":{\"7\":1}}],[\"该环境变量的值指定了在解析import语句时\",{\"1\":{\"7\":1}}],[\"该环境变量的值并不是从配置文件中读取\",{\"1\":{\"7\":2}}],[\"该环境变量的值取决于\",{\"1\":{\"7\":1}}],[\"该目录下一定有一个list文件\",{\"1\":{\"510\":1}}],[\"该目录下会生成一个readme文件\",{\"1\":{\"7\":1}}],[\"该目录根据域名来划分不同网站的依赖包\",{\"1\":{\"510\":1}}],[\"该目录应该被添加到操作系统的环境变量中\",{\"1\":{\"7\":1}}],[\"该文件是默认的env配置文件\",{\"1\":{\"7\":1}}],[\"该文件存放着\",{\"1\":{\"7\":1}}],[\"该文件记录了当前\",{\"1\":{\"7\":1}}],[\"会造成严重的程序错误\",{\"1\":{\"1136\":1}}],[\"会造成大量的不必要的协程竞争锁\",{\"1\":{\"481\":1}}],[\"会产生内存碎片\",{\"1\":{\"1134\":1}}],[\"会被runtime\",{\"1\":{\"1104\":1}}],[\"会被放到全局队列中去\",{\"1\":{\"1088\":1}}],[\"会扫描协程栈的内存空间\",{\"1\":{\"1102\":1}}],[\"会与\",{\"1\":{\"1097\":2}}],[\"会因执行系统调用而阻塞\",{\"1\":{\"1097\":1}}],[\"会解绑\",{\"1\":{\"1097\":1}}],[\"会创建与当前处理器\",{\"1\":{\"1138\":1}}],[\"会创建gomaxprocs个处理器\",{\"1\":{\"1085\":1}}],[\"会创建名为person的表\",{\"1\":{\"855\":1}}],[\"会无法通过编译\",{\"1\":{\"1070\":1}}],[\"会畅通很多\",{\"1\":{\"1063\":1}}],[\"会使用runtime\",{\"1\":{\"1058\":1,\"1095\":1}}],[\"会使用下面的函数代替\",{\"1\":{\"1053\":1}}],[\"会判断当前字节是否是单字节字符\",{\"1\":{\"1055\":1}}],[\"会如下报错\",{\"1\":{\"1054\":1}}],[\"会遍历每一个\",{\"1\":{\"1107\":1}}],[\"会遍历旧桶链表中的每一个桶中的每一个元素\",{\"1\":{\"1042\":1}}],[\"会遍历路由的handlers中的handlerfunc\",{\"1\":{\"995\":1}}],[\"会分配两个evacdst结构体\",{\"1\":{\"1042\":1}}],[\"会分析一段时间并下载一个文件\",{\"1\":{\"557\":1}}],[\"会形成很多溢出桶链表\",{\"1\":{\"1042\":1}}],[\"会要求将其返回值覆盖原切片\",{\"1\":{\"1025\":1}}],[\"会申请一片更大的内存空间来存放数据\",{\"1\":{\"1025\":1}}],[\"会获取临时切片的长度\",{\"1\":{\"1024\":1}}],[\"会获得其指向元素的反射类型\",{\"1\":{\"433\":1}}],[\"会由runtime\",{\"1\":{\"1095\":1}}],[\"会由cmd\",{\"1\":{\"1026\":1,\"1028\":1}}],[\"会由extendslice函数展开成以下代码\",{\"1\":{\"1024\":1}}],[\"会由appendslice函数展开成以下代码\",{\"1\":{\"1024\":1}}],[\"会由walkappend函数展开成以下代码\",{\"1\":{\"1024\":1}}],[\"会展现数据类型的数组形式\",{\"1\":{\"1013\":1}}],[\"会话控制总共有三种\",{\"1\":{\"1001\":1}}],[\"会话控制\",{\"0\":{\"1001\":1}}],[\"会直接将该数组作为切片的底层数组\",{\"1\":{\"1020\":1}}],[\"会直接将本地计算得到的哈希值写入go\",{\"1\":{\"510\":1}}],[\"会直接进行\",{\"1\":{\"971\":1}}],[\"会直接判断为验证失败\",{\"1\":{\"946\":1}}],[\"会尝试创建它们\",{\"1\":{\"897\":1}}],[\"会进行递归先创建引用表\",{\"1\":{\"864\":1}}],[\"会对其进行有效性验证\",{\"1\":{\"775\":1}}],[\"会对其底层类型进行比较\",{\"1\":{\"568\":1}}],[\"会导致\",{\"1\":{\"1134\":1}}],[\"会导致nums的数据也会发生变化\",{\"1\":{\"754\":1}}],[\"会导致该协程阻塞\",{\"1\":{\"468\":1}}],[\"会去寻找一个\",{\"1\":{\"1093\":1}}],[\"会去更新指针引用的旧地址\",{\"1\":{\"751\":1}}],[\"会去掉多余的\",{\"1\":{\"341\":1}}],[\"会覆盖默认的内容\",{\"1\":{\"735\":1}}],[\"会立即退出所在函数\",{\"1\":{\"606\":1}}],[\"会立即告诉程序员不应该这么做\",{\"1\":{\"591\":1}}],[\"会尽量保证内存安全\",{\"1\":{\"533\":1}}],[\"会需要用到在一个测试用例中测试另外测试用例\",{\"1\":{\"523\":1}}],[\"会根据go\",{\"1\":{\"510\":1}}],[\"会计算压缩包和go\",{\"1\":{\"510\":1}}],[\"会有其它的写入操作触发了\",{\"1\":{\"1037\":1}}],[\"会有专门的policy文件或者数据库来进行策略存储\",{\"1\":{\"760\":1}}],[\"会有好几个版本命名的文件\",{\"1\":{\"510\":1}}],[\"会有两个返回值\",{\"1\":{\"470\":1}}],[\"会表现出不同的行为\",{\"1\":{\"509\":1}}],[\"会一直阻塞直到全部计数减为\",{\"1\":{\"472\":1}}],[\"会先持有ch2的锁\",{\"1\":{\"1067\":1}}],[\"会先去尝试去旧桶里面查找\",{\"1\":{\"1042\":1}}],[\"会先从缓冲区中读取数据\",{\"1\":{\"467\":1}}],[\"会先将数据放入缓冲区里\",{\"1\":{\"467\":1}}],[\"会用到os包下的rename函数\",{\"1\":{\"420\":1}}],[\"会返回invalidvalidationerror\",{\"1\":{\"942\":1}}],[\"会返回一个指针与错误\",{\"1\":{\"638\":1}}],[\"会返回一个unsafe\",{\"1\":{\"536\":1}}],[\"会返回一个err来解释为什么会关闭\",{\"1\":{\"474\":1}}],[\"会返回map的键反射类型\",{\"1\":{\"433\":1}}],[\"会返回错误\",{\"1\":{\"418\":1}}],[\"会返回对应类型的指针\",{\"1\":{\"391\":1}}],[\"会在当前函数创建一个\",{\"1\":{\"1076\":1}}],[\"会在不加锁的情况下直接判断管道是否满了\",{\"1\":{\"1059\":1}}],[\"会在绑定之前将\",{\"1\":{\"975\":1}}],[\"会在写入日志信息后调用os\",{\"1\":{\"647\":1}}],[\"会在适当情况下对指针进行解引用\",{\"1\":{\"414\":1}}],[\"会在特定的情况下被发送\",{\"1\":{\"162\":1}}],[\"会新分配一片内存空间给字节切片\",{\"1\":{\"376\":1}}],[\"会继续执行下一个分支\",{\"1\":{\"350\":1}}],[\"会回调这个函数\",{\"1\":{\"242\":1}}],[\"会集中存储您的数据\",{\"1\":{\"203\":1}}],[\"会删除路径前缀\",{\"1\":{\"201\":1}}],[\"会减少代码生成的体积\",{\"1\":{\"198\":1}}],[\"会占用两个字节\",{\"1\":{\"187\":1}}],[\"会发现这行日志有几个问题\",{\"1\":{\"840\":1}}],[\"会发现myint的值依旧是\",{\"1\":{\"413\":1}}],[\"会发现服务端返回的\",{\"1\":{\"167\":1}}],[\"会发现不同数据中心的数据是不同步的\",{\"1\":{\"144\":1}}],[\"会向客户端返回错误person\",{\"1\":{\"167\":1}}],[\"会将原对象标记为灰色\",{\"1\":{\"1144\":1}}],[\"会将当前元素的\",{\"1\":{\"1042\":1}}],[\"会将当前用例标记为skip\",{\"1\":{\"521\":1}}],[\"会将\",{\"1\":{\"1042\":1}}],[\"会将unicode码转换为ascii码\",{\"1\":{\"981\":1}}],[\"会将主键写入\",{\"1\":{\"866\":1}}],[\"会将前者所指向的地址作为后者的值\",{\"1\":{\"751\":1}}],[\"会将test目录下的所有测试文件重新编译后\",{\"1\":{\"518\":1}}],[\"会将其放入\",{\"1\":{\"1121\":1}}],[\"会将其存放在$gopath\",{\"1\":{\"504\":1}}],[\"会将其解释为\",{\"1\":{\"414\":1}}],[\"会将其解引用\",{\"1\":{\"413\":1}}],[\"会将接收者的值传入方法中\",{\"1\":{\"413\":1}}],[\"会将切片内所有的值置为零值\",{\"1\":{\"372\":1}}],[\"会将值写到传入的\",{\"1\":{\"163\":1}}],[\"会将每次传入的\",{\"1\":{\"162\":1}}],[\"会将指定包下的每一个包的测试文件编译成二进制文件并执行\",{\"1\":{\"38\":1}}],[\"会自动进行结构体验证\",{\"1\":{\"944\":1}}],[\"会自动完成表连接这一过程\",{\"1\":{\"896\":1}}],[\"会自动完成类型转换\",{\"1\":{\"701\":1}}],[\"会自动使用time\",{\"1\":{\"856\":1}}],[\"会自动调用value\",{\"1\":{\"441\":1}}],[\"会自动的插入指针运算符来进行调用\",{\"1\":{\"414\":1}}],[\"会自动的解析成键值对\",{\"1\":{\"161\":1}}],[\"会自动传入\",{\"1\":{\"12\":1}}],[\"会自行寻找其他可用的\",{\"1\":{\"142\":1}}],[\"会不断尝试加入指定的节点\",{\"1\":{\"141\":1}}],[\"会读取目录下所有的\",{\"1\":{\"141\":1}}],[\"会忽略该字段\",{\"1\":{\"886\":1}}],[\"会忽略名为testdata的包\",{\"1\":{\"517\":1}}],[\"会忽略结构体\",{\"1\":{\"129\":1}}],[\"会忽略一切go\",{\"1\":{\"7\":1}}],[\"会让你更熟悉\",{\"1\":{\"90\":1}}],[\"会改变编译器输出的信息\",{\"1\":{\"43\":1}}],[\"会缓存这些文件以便于下一次编译时复用\",{\"1\":{\"7\":1}}],[\"会永久修改某一个变量的值\",{\"1\":{\"7\":1}}],[\"会输出\",{\"1\":{\"7\":1,\"115\":1}}],[\"会简洁的展示该命令的用法\",{\"1\":{\"3\":1}}],[\"工作分为两个阶段\",{\"1\":{\"1134\":1}}],[\"工作方式\",{\"1\":{\"1056\":1}}],[\"工作原理\",{\"0\":{\"759\":1,\"775\":1}}],[\"工作更加复杂\",{\"1\":{\"579\":1}}],[\"工作区便应运而生\",{\"1\":{\"512\":1}}],[\"工作区\",{\"0\":{\"512\":1},\"1\":{\"512\":1}}],[\"工作区维护命令\",{\"1\":{\"2\":1}}],[\"工具开发\",{\"1\":{\"615\":1}}],[\"工具本身使用\",{\"1\":{\"139\":1}}],[\"工具链集成了许多性能分析工具以供开发者使用\",{\"1\":{\"548\":1}}],[\"工具链\",{\"1\":{\"114\":1}}],[\"工具链的版本\",{\"1\":{\"18\":1}}],[\"工具链的位置\",{\"1\":{\"7\":1}}],[\"工具链的二进制文件\",{\"1\":{\"7\":1}}],[\"工具链的行为\",{\"1\":{\"7\":1}}],[\"工具集合\",{\"1\":{\"62\":1}}],[\"工具\",{\"1\":{\"37\":1}}],[\"工具的一些\",{\"1\":{\"8\":1}}],[\"修剪字符串右端后缀\",{\"1\":{\"718\":1}}],[\"修剪字符串右端\",{\"1\":{\"718\":1}}],[\"修剪字符串左端前缀\",{\"1\":{\"718\":1}}],[\"修剪字符串左端\",{\"1\":{\"718\":1}}],[\"修剪字符串两端\",{\"1\":{\"718\":1}}],[\"修剪字符串\",{\"0\":{\"718\":1}}],[\"修复了滥用\",{\"1\":{\"138\":1}}],[\"修复因go版本变化而导致的api兼容问题\",{\"1\":{\"2\":1}}],[\"修改hmap状态\",{\"1\":{\"1038\":1}}],[\"修改的也只是形参s的值\",{\"1\":{\"1019\":1}}],[\"修改s1中的数据也会导致s发生变化\",{\"1\":{\"1019\":1}}],[\"修改一下hello\",{\"1\":{\"995\":1}}],[\"修改一下模拟的函数\",{\"1\":{\"560\":1}}],[\"修改\",{\"0\":{\"883\":1,\"1023\":1,\"1038\":1},\"1\":{\"1038\":1}}],[\"修改某个值然后进行保存\",{\"1\":{\"817\":1}}],[\"修改numsref1切片的数据\",{\"1\":{\"754\":1}}],[\"修改过后就可以通过编译了\",{\"1\":{\"574\":1}}],[\"修改测试次数为\",{\"1\":{\"521\":1}}],[\"修改go\",{\"1\":{\"513\":1}}],[\"修改main\",{\"1\":{\"503\":1,\"1011\":1}}],[\"修改完代理后\",{\"1\":{\"502\":1}}],[\"修改数据\",{\"1\":{\"479\":1,\"480\":1}}],[\"修改为如下代码\",{\"1\":{\"470\":1}}],[\"修改值\",{\"1\":{\"449\":1}}],[\"修改字段值\",{\"1\":{\"449\":2}}],[\"修改字段\",{\"0\":{\"449\":1}}],[\"修改字节切片\",{\"1\":{\"376\":1}}],[\"修改后的代码如下\",{\"1\":{\"416\":1,\"524\":1}}],[\"修改了\",{\"1\":{\"413\":1}}],[\"修改切片会导致原数组内容的变化\",{\"1\":{\"362\":1}}],[\"修改权值\",{\"0\":{\"281\":1}}],[\"修改元素\",{\"0\":{\"265\":1}}],[\"修改本地的\",{\"1\":{\"174\":1}}],[\"修改期望的\",{\"1\":{\"26\":1}}],[\"修改模块路径\",{\"1\":{\"26\":1}}],[\"修改这些环境变量将会影响\",{\"1\":{\"7\":1}}],[\"其基本原理就是一个加了锁的阻塞队列\",{\"1\":{\"1166\":1}}],[\"其基本格式为\",{\"1\":{\"12\":1}}],[\"其主要的\",{\"1\":{\"1130\":1}}],[\"其主要有以下特点\",{\"1\":{\"954\":1}}],[\"其调用顺序为\",{\"1\":{\"1119\":1}}],[\"其简化后的结构如下所示\",{\"1\":{\"1118\":1}}],[\"其最大内存浪费率为\",{\"1\":{\"1114\":1}}],[\"其大小由fixalloc\",{\"1\":{\"1112\":1}}],[\"其状态变化首先是由\",{\"1\":{\"1095\":1}}],[\"其数量默认是\",{\"1\":{\"1089\":1}}],[\"其数据类型为int8\",{\"1\":{\"995\":1}}],[\"其函数实现如下\",{\"1\":{\"1089\":1}}],[\"其函数签名如下\",{\"1\":{\"1025\":1,\"1040\":1,\"1041\":1,\"1042\":1,\"1053\":1,\"1123\":1}}],[\"其原英文名叫\",{\"1\":{\"1076\":1}}],[\"其原理就是锁+原子操作\",{\"1\":{\"484\":1}}],[\"其原理跟上面讲的完全一样\",{\"1\":{\"193\":1}}],[\"其具体的创建逻辑与deferproc并无太大区别\",{\"1\":{\"1074\":1}}],[\"其具体类型如下\",{\"1\":{\"167\":1}}],[\"其逻辑跟runtime\",{\"1\":{\"1067\":1}}],[\"其逻辑与增量扩容完全一致\",{\"1\":{\"1043\":1}}],[\"其逻辑与mapassign完全相似\",{\"1\":{\"1038\":1}}],[\"其来源也是接收方在runtime\",{\"1\":{\"1060\":1}}],[\"其组成元素是runtime\",{\"1\":{\"1057\":1}}],[\"其工作原理也很简单\",{\"1\":{\"1041\":1}}],[\"其访问过程的逻辑与mapaccess1相同\",{\"1\":{\"1038\":1}}],[\"其计算公式如下\",{\"1\":{\"1032\":1}}],[\"其作用已经讲过了\",{\"1\":{\"1067\":1}}],[\"其作用就是如果当前\",{\"1\":{\"1042\":1}}],[\"其作用是为了在内存清除以后停止循环\",{\"1\":{\"1027\":1}}],[\"其作用域仅限于with语句内\",{\"1\":{\"730\":1}}],[\"其签名如下\",{\"1\":{\"1027\":1}}],[\"其源代码位于runtime\",{\"1\":{\"1019\":1}}],[\"其余生成的\",{\"1\":{\"1017\":1}}],[\"其代码复杂度不高\",{\"1\":{\"924\":1}}],[\"其将被映射到引用表\",{\"1\":{\"862\":1}}],[\"其将被映射到当前表\",{\"1\":{\"862\":1}}],[\"其将被映射为连接表外键\",{\"1\":{\"862\":1}}],[\"其为蛇形复数风格\",{\"1\":{\"853\":1}}],[\"其意为传入的请求的所有字段都与策略规则的字段全部相同就匹配\",{\"1\":{\"762\":1}}],[\"其类型为runtime\",{\"1\":{\"1019\":1}}],[\"其类型为\",{\"1\":{\"751\":1}}],[\"其类型都是\",{\"1\":{\"335\":1}}],[\"其含有非常多的时间操作的方法\",{\"1\":{\"737\":1}}],[\"其返回的数据类型是time结构体\",{\"1\":{\"737\":1}}],[\"其返回值是一个\",{\"1\":{\"795\":1}}],[\"其返回值是一个空结构体类型的只读管道\",{\"1\":{\"474\":1}}],[\"其返回值是一个只读的管道\",{\"1\":{\"471\":1}}],[\"其目的是为了复用某一个模板而用的\",{\"1\":{\"735\":1}}],[\"其语法如下\",{\"1\":{\"726\":1}}],[\"其分隔次数由\",{\"1\":{\"716\":2}}],[\"其支持的类型有\",{\"1\":{\"632\":1}}],[\"其相较于xml更轻便的大小\",{\"1\":{\"624\":1}}],[\"其下有很多子包\",{\"1\":{\"616\":2}}],[\"其次是环境变量的值\",{\"1\":{\"1089\":1}}],[\"其次是gopath\",{\"1\":{\"19\":1}}],[\"其次再去判断值是否相等\",{\"1\":{\"1070\":1}}],[\"其次才是值的比较\",{\"1\":{\"568\":1}}],[\"其优点是可控\",{\"1\":{\"556\":1}}],[\"其功能等同于\",{\"1\":{\"534\":1}}],[\"其后就是相应的匹配规则\",{\"1\":{\"762\":1}}],[\"其后跟想要生成的参数\",{\"1\":{\"527\":1}}],[\"其后的参数也可以跟多个目录\",{\"1\":{\"518\":1}}],[\"其提供了以下几种类型以供进行原子操作\",{\"1\":{\"488\":1}}],[\"其本身只实现了value方法\",{\"1\":{\"476\":1}}],[\"其本质上是无符号整型uint\",{\"1\":{\"432\":1}}],[\"其上手难度相对较小\",{\"1\":{\"461\":1}}],[\"其底层类型为\",{\"1\":{\"412\":1}}],[\"其指向的元素为数组第二个元素\",{\"1\":{\"392\":1}}],[\"其默认的值就是该类型的零值\",{\"1\":{\"577\":1}}],[\"其默认的遍历单位类型就是一个rune\",{\"1\":{\"380\":1}}],[\"其默认值为操作系统所指定的临时目录\",{\"1\":{\"7\":1}}],[\"其默认值为$home\",{\"1\":{\"7\":1}}],[\"其默认值为$gopath\",{\"1\":{\"7\":1}}],[\"其实并没有\",{\"1\":{\"1019\":1}}],[\"其实并不是字面量的长度\",{\"1\":{\"377\":1}}],[\"其实难度也不大\",{\"1\":{\"1000\":1}}],[\"其实net\",{\"1\":{\"986\":1}}],[\"其实gin官方文档里面并没有多少教程\",{\"1\":{\"966\":1}}],[\"其实就等同于\",{\"1\":{\"871\":1}}],[\"其实是一个代码生成器\",{\"1\":{\"821\":1}}],[\"其实还可以通过viper\",{\"1\":{\"795\":1}}],[\"其实还是需要解引用\",{\"1\":{\"408\":1}}],[\"其实\",{\"1\":{\"615\":1}}],[\"其实接口内部可以看成是一个由\",{\"1\":{\"568\":1}}],[\"其实可以使用t\",{\"1\":{\"521\":1}}],[\"其实sync\",{\"1\":{\"484\":1}}],[\"其实现不算特别复杂\",{\"1\":{\"1044\":1}}],[\"其实现了sync\",{\"1\":{\"480\":1}}],[\"其实现是由底层的汇编指令ucomisd完成\",{\"1\":{\"384\":1}}],[\"其实等价于\",{\"1\":{\"402\":1}}],[\"其实在不带任何参数的情况下\",{\"1\":{\"6\":1}}],[\"其一维和二维的长度早已固定\",{\"1\":{\"370\":1}}],[\"其内存管理效率要比在堆上更高\",{\"1\":{\"1074\":1}}],[\"其内容非常容易理解\",{\"1\":{\"513\":1}}],[\"其内容有\",{\"1\":{\"289\":1}}],[\"其内部会调用runtime\",{\"1\":{\"1089\":1}}],[\"其内部依旧是一个\",{\"1\":{\"1045\":1}}],[\"其内部调用了函数runtime\",{\"1\":{\"1054\":1}}],[\"其内部调用了runtime\",{\"1\":{\"1040\":1}}],[\"其内部调用的是runtime\",{\"1\":{\"1039\":1,\"1054\":1}}],[\"其内部的原理也比较简单\",{\"1\":{\"995\":1}}],[\"其内部的字段基本上就代表了我们配置的步骤\",{\"1\":{\"839\":1}}],[\"其内部的实现是计数器+信号量\",{\"1\":{\"472\":1}}],[\"其内部有如下一段代码\",{\"1\":{\"719\":1}}],[\"其内部并不会进行排序操作\",{\"1\":{\"689\":1}}],[\"其内部是使用了适配器类型handlerfunc\",{\"1\":{\"645\":1}}],[\"其内部实现也很简单\",{\"1\":{\"603\":1}}],[\"其内部只包含一对键值对\",{\"1\":{\"476\":1}}],[\"其内部结构是不一样的\",{\"1\":{\"370\":1}}],[\"其值为\",{\"1\":{\"1132\":1}}],[\"其值为true\",{\"1\":{\"1067\":2}}],[\"其值为nil\",{\"1\":{\"463\":1}}],[\"其值在编译期就已经确定了\",{\"1\":{\"1053\":1}}],[\"其值至少是\",{\"1\":{\"1032\":1}}],[\"其值取决于internal\",{\"1\":{\"1032\":1}}],[\"其值必须是可设置的\",{\"1\":{\"430\":1}}],[\"其值默认就是前一个的值\",{\"1\":{\"324\":1}}],[\"其值只能来源于\",{\"1\":{\"323\":1}}],[\"其值不能小于go\",{\"1\":{\"27\":1}}],[\"其他例子还请自行去官方仓库了解\",{\"1\":{\"1003\":1}}],[\"其他函数的参数是字段\",{\"1\":{\"951\":1}}],[\"其他类型的错误\",{\"1\":{\"791\":1}}],[\"其他情况都表示的是保留小数到后几位\",{\"1\":{\"698\":1}}],[\"其他常用的还有t\",{\"1\":{\"521\":1}}],[\"其他常量标识符\",{\"1\":{\"323\":1}}],[\"其他版本的同一个依赖照样可以正常访问\",{\"1\":{\"509\":1}}],[\"其他协程进行读操作时会阻塞\",{\"1\":{\"481\":1}}],[\"其他协程进行读操作时不会阻塞\",{\"1\":{\"481\":1}}],[\"其他协程进行写操作时会阻塞\",{\"1\":{\"481\":2}}],[\"其他协程想要访问就必须要先获得锁\",{\"1\":{\"480\":1}}],[\"其他子协程也就自然退出了\",{\"1\":{\"462\":1}}],[\"其他关系数据库操作起来都是大差不大差的\",{\"1\":{\"231\":1}}],[\"其他信息\",{\"1\":{\"168\":1}}],[\"其他语言的\",{\"1\":{\"145\":1}}],[\"其他的认证逻辑\",{\"1\":{\"1008\":1}}],[\"其他的相对而言要少一些\",{\"1\":{\"981\":1}}],[\"其他的逻辑\",{\"1\":{\"605\":1}}],[\"其他的类型的使用也是十分类似的\",{\"1\":{\"489\":1}}],[\"其他的使用起来都大差不差\",{\"1\":{\"210\":1}}],[\"其他的功能可以自己去文档学习\",{\"1\":{\"156\":1}}],[\"其他的\",{\"1\":{\"142\":1}}],[\"其他\",{\"0\":{\"635\":1,\"936\":1},\"1\":{\"116\":1,\"117\":1,\"1010\":1}}],[\"其诞生时间比\",{\"1\":{\"88\":1}}],[\"其它写者协程和读者协程将被阻塞\",{\"1\":{\"1155\":1}}],[\"其它对象都是白色\",{\"1\":{\"1135\":1}}],[\"其它的调用可以复用执行现场从mstart1函数返回达到退出线程的目的\",{\"1\":{\"1089\":1}}],[\"其它的几个字段释义如下\",{\"1\":{\"1088\":1}}],[\"其它的字段介绍如下\",{\"1\":{\"1057\":1}}],[\"其它的逻辑与增量扩容完全一致\",{\"1\":{\"1043\":1}}],[\"其它两个复用其内容并嵌入自定义的新内容\",{\"1\":{\"736\":1}}],[\"其它两个基本上等同于go\",{\"1\":{\"515\":1}}],[\"其它开发者便可以通过模块名来引入代码或安装命令行工具\",{\"1\":{\"499\":1}}],[\"其它人就可以通过模块名来下载你所编写的库\",{\"1\":{\"493\":1}}],[\"其它语言全揉一块了\",{\"1\":{\"200\":1}}],[\"其它\",{\"0\":{\"1127\":1},\"1\":{\"119\":1,\"123\":1,\"124\":1,\"128\":1,\"129\":1,\"132\":1,\"133\":1,\"135\":1,\"136\":1}}],[\"其它协程在调用此函数时不适合被抢占\",{\"1\":{\"46\":1}}],[\"其它三个需要在goprivate中配置\",{\"1\":{\"18\":1}}],[\"其格式如下\",{\"1\":{\"27\":1}}],[\"其结构并不复杂\",{\"1\":{\"1078\":1,\"1166\":1}}],[\"其结构如下所示\",{\"1\":{\"1086\":1,\"1088\":1}}],[\"其结构如下\",{\"1\":{\"7\":1,\"1032\":1,\"1114\":1}}],[\"其结果为\",{\"1\":{\"728\":1,\"729\":1}}],[\"其结果通常会被处理再以可视化的形式展示\",{\"1\":{\"27\":1}}],[\"其可读性很差\",{\"1\":{\"27\":1}}],[\"其唯一的参数是模块路径\",{\"1\":{\"23\":1}}],[\"其存放格式如下\",{\"1\":{\"7\":1}}],[\"其中lifo如果为true\",{\"1\":{\"1153\":1}}],[\"其中loadfactornum和loadfactorden都是一个常数\",{\"1\":{\"1032\":1}}],[\"其中slot是一个指针\",{\"1\":{\"1144\":1}}],[\"其中rwmutexmaxreaders是一个常量值\",{\"1\":{\"1156\":1}}],[\"其中runtime\",{\"1\":{\"1137\":1}}],[\"其中retry\",{\"1\":{\"143\":1}}],[\"其中包含了\",{\"1\":{\"1132\":1}}],[\"其中包含了mspan链表数组alloc\",{\"1\":{\"1116\":1}}],[\"其中mcache\",{\"1\":{\"1126\":1}}],[\"其中max默认为数组长度\",{\"1\":{\"1020\":1}}],[\"其中就包括了负责分配mspan的分配器mheap\",{\"1\":{\"1119\":1}}],[\"其中就包括指针运算\",{\"1\":{\"392\":1}}],[\"其中tiny指向微对象内存的起始地址\",{\"1\":{\"1116\":1}}],[\"其中tryrlock与trylock两个尝试加锁的操作是非阻塞式的\",{\"1\":{\"481\":1}}],[\"其中函数rawbyteslice\",{\"1\":{\"1054\":1}}],[\"其中用到了evadst结构体用来表示搬迁目的地\",{\"1\":{\"1042\":1}}],[\"其中bucket\",{\"1\":{\"1042\":1}}],[\"其中for\",{\"1\":{\"1035\":1}}],[\"其中多了一行i\",{\"1\":{\"1027\":1}}],[\"其中example标签的值会被作为示例值在页面中展示\",{\"1\":{\"1014\":1}}],[\"其中支持的参数类型有\",{\"1\":{\"1012\":1}}],[\"其中abortindex\",{\"1\":{\"995\":1}}],[\"其中person\",{\"1\":{\"891\":1}}],[\"其中pointer原子类型支持泛型\",{\"1\":{\"488\":1}}],[\"其中constraint\",{\"1\":{\"860\":1}}],[\"其中gcbgmarkworkercount和gomaxprocs两个运行时全局变量分别表示当前\",{\"1\":{\"1138\":1}}],[\"其中gctriggerkind有以下几种可选值\",{\"1\":{\"1132\":1}}],[\"其中g2定义了资源角色组\",{\"1\":{\"766\":1}}],[\"其中geomoean为平均值\",{\"1\":{\"526\":1}}],[\"其中角色的定义如下\",{\"1\":{\"765\":1}}],[\"其中也包括官方提供的标准库\",{\"1\":{\"745\":1}}],[\"其中一些概念的解释如下\",{\"1\":{\"527\":1}}],[\"其中淡蓝色的表示go\",{\"1\":{\"508\":1}}],[\"其中newpointer函数和free方法的实现如下\",{\"1\":{\"485\":1}}],[\"其中有\",{\"1\":{\"410\":1}}],[\"其中的mcache\",{\"1\":{\"1125\":1}}],[\"其中的modules\",{\"1\":{\"28\":1}}],[\"其中的最大内存浪费率的计算公式为\",{\"1\":{\"1114\":1}}],[\"其中的runtime\",{\"1\":{\"1074\":1}}],[\"其中的fn字段是defer关键字对应的函数\",{\"1\":{\"1073\":1}}],[\"其中的c指的是管道\",{\"1\":{\"1064\":1}}],[\"其中的字段释义如下\",{\"1\":{\"1052\":1}}],[\"其中的amended字段表示dirty是否包含read所没有的\",{\"1\":{\"1045\":1}}],[\"其中的参数\",{\"1\":{\"1034\":1}}],[\"其中的一些解释如下\",{\"1\":{\"1030\":1}}],[\"其中的花括号\",{\"1\":{\"988\":1}}],[\"其中的user和student结构体是两个完全不同的类型\",{\"1\":{\"812\":1}}],[\"其中的direct表示代理下载失败后绕过代理缓存直接访问源代码仓库\",{\"1\":{\"501\":1}}],[\"其中的\",{\"1\":{\"143\":1,\"1036\":2}}],[\"其中比较重要的版本有\",{\"1\":{\"138\":1}}],[\"其中\",{\"1\":{\"6\":1,\"18\":1,\"151\":1,\"995\":1,\"1032\":1,\"1144\":1}}],[\"xadd\",{\"1\":{\"1140\":1}}],[\"xorl\",{\"1\":{\"1066\":2}}],[\"xorm\",{\"1\":{\"52\":3,\"230\":1,\"610\":1}}],[\"xy\",{\"1\":{\"1042\":5,\"1043\":1}}],[\"xyctruth\",{\"1\":{\"56\":1}}],[\"xusion\",{\"1\":{\"981\":1}}],[\"x86\",{\"1\":{\"907\":1}}],[\"x84\",{\"1\":{\"527\":2}}],[\"xsjyqq\",{\"1\":{\"774\":1}}],[\"xml方式进行渲染\",{\"1\":{\"981\":1}}],[\"xml`\",{\"1\":{\"975\":1}}],[\"xmlbinding\",{\"1\":{\"971\":1}}],[\"xmlstr\",{\"1\":{\"620\":2}}],[\"xml序列化\",{\"1\":{\"618\":1}}],[\"xml又名\",{\"1\":{\"618\":1}}],[\"xml\",{\"0\":{\"618\":1},\"1\":{\"617\":1,\"619\":1,\"620\":5,\"845\":1,\"963\":1,\"970\":1,\"971\":3,\"975\":2,\"981\":1}}],[\"xml之类的\",{\"1\":{\"616\":1}}],[\"xe4\",{\"1\":{\"527\":9}}],[\"xf0\",{\"1\":{\"527\":2}}],[\"xff\",{\"1\":{\"304\":1,\"306\":1}}],[\"x90\",{\"1\":{\"527\":2}}],[\"x91\",{\"1\":{\"527\":2}}],[\"xxim\",{\"1\":{\"611\":1}}],[\"xxx\",{\"1\":{\"168\":1,\"634\":2}}],[\"xxhash\",{\"1\":{\"24\":1}}],[\"xiaomi\",{\"1\":{\"147\":1}}],[\"xtaci\",{\"1\":{\"72\":1}}],[\"xtestimports\",{\"1\":{\"21\":1}}],[\"xtestembedfiles\",{\"1\":{\"21\":1}}],[\"xtestembedpatterns\",{\"1\":{\"21\":2}}],[\"xtestgofiles\",{\"1\":{\"21\":4}}],[\"xhit\",{\"1\":{\"71\":1}}],[\"xhd2015\",{\"1\":{\"55\":1}}],[\"xzf\",{\"1\":{\"91\":1}}],[\"xz\",{\"1\":{\"65\":3}}],[\"xgo\",{\"1\":{\"55\":2}}],[\"xprog\",{\"1\":{\"13\":1,\"519\":1}}],[\"x参数是一个非常实用的功能\",{\"1\":{\"10\":1}}],[\"x15\",{\"1\":{\"9\":1}}],[\"x+yqyq==\",{\"1\":{\"9\":1}}],[\"x类似\",{\"1\":{\"8\":1}}],[\"x07\",{\"1\":{\"304\":1}}],[\"x079\",{\"1\":{\"7\":2}}],[\"x068\",{\"1\":{\"7\":2}}],[\"x可以查看依赖下载过程所执行的命令\",{\"1\":{\"7\":1}}],[\"x\",{\"1\":{\"6\":1,\"7\":2,\"8\":1,\"10\":2,\"13\":1,\"15\":1,\"16\":5,\"17\":1,\"18\":6,\"19\":2,\"24\":2,\"25\":2,\"26\":1,\"27\":2,\"37\":3,\"40\":2,\"74\":1,\"112\":1,\"117\":2,\"129\":2,\"130\":1,\"133\":3,\"296\":1,\"307\":1,\"341\":10,\"348\":3,\"380\":3,\"442\":1,\"460\":1,\"485\":1,\"503\":10,\"504\":2,\"509\":14,\"526\":1,\"527\":1,\"587\":2,\"595\":2,\"698\":3,\"725\":2,\"748\":1,\"749\":1,\"750\":1,\"751\":1,\"799\":2,\"823\":9,\"827\":3,\"970\":2,\"1000\":1,\"1021\":4,\"1024\":4,\"1042\":6,\"1053\":8,\"1059\":1,\"1066\":1,\"1074\":2,\"1100\":7,\"1124\":6,\"1125\":2,\"1126\":2}}],[\"5的\",{\"1\":{\"1034\":1}}],[\"5e\",{\"1\":{\"675\":1}}],[\"5e3fd7a\",{\"1\":{\"10\":1,\"13\":1}}],[\"5µ\",{\"1\":{\"526\":2}}],[\"5376\",{\"1\":{\"1114\":1}}],[\"538\",{\"1\":{\"993\":1}}],[\"53125\",{\"1\":{\"912\":1}}],[\"539s\",{\"1\":{\"527\":1}}],[\"53\",{\"1\":{\"526\":3,\"1114\":1}}],[\"55\",{\"1\":{\"1114\":2}}],[\"552113\",{\"1\":{\"525\":1}}],[\"550333\",{\"1\":{\"525\":1}}],[\"5500\",{\"1\":{\"398\":1}}],[\"556fd59b42f6\",{\"1\":{\"504\":1}}],[\"5c51ce4\",{\"1\":{\"499\":2}}],[\"59\",{\"1\":{\"388\":1,\"1114\":3}}],[\"57344\",{\"1\":{\"1114\":4}}],[\"576\",{\"1\":{\"1114\":1}}],[\"574509\",{\"1\":{\"588\":1}}],[\"5701\",{\"1\":{\"212\":2,\"213\":1,\"214\":2}}],[\"57\",{\"1\":{\"166\":18,\"856\":2,\"993\":1,\"1114\":3}}],[\"5秒钟内没有收到jack的消息\",{\"1\":{\"158\":1}}],[\"5秒钟内没有收到\",{\"1\":{\"158\":1}}],[\"517600\",{\"1\":{\"996\":1}}],[\"518916608\",{\"1\":{\"916\":1}}],[\"51805\",{\"1\":{\"561\":1}}],[\"51i\",{\"1\":{\"700\":1}}],[\"5132580\",{\"1\":{\"527\":1}}],[\"512+0\",{\"1\":{\"1114\":1}}],[\"512\",{\"1\":{\"417\":1,\"595\":1,\"1114\":11,\"1145\":1}}],[\"512ms\",{\"1\":{\"242\":1}}],[\"51234\",{\"1\":{\"202\":1}}],[\"51\",{\"1\":{\"155\":2,\"159\":4,\"523\":1,\"1114\":3}}],[\"58\",{\"1\":{\"145\":1,\"1114\":1}}],[\"5477023744\",{\"1\":{\"918\":2}}],[\"546875\",{\"1\":{\"912\":1}}],[\"541\",{\"1\":{\"526\":1}}],[\"543\",{\"1\":{\"526\":1}}],[\"548\",{\"1\":{\"526\":1}}],[\"54\",{\"1\":{\"145\":2,\"354\":1,\"1114\":1}}],[\"5696803\",{\"1\":{\"741\":1}}],[\"5650644266346967p\",{\"1\":{\"698\":1}}],[\"56413\",{\"1\":{\"589\":1}}],[\"56\",{\"1\":{\"140\":1,\"141\":1,\"145\":1,\"159\":6,\"354\":1,\"388\":1,\"526\":1,\"784\":3,\"1114\":3}}],[\"528z\",{\"1\":{\"208\":1}}],[\"52\",{\"1\":{\"132\":2,\"145\":1,\"174\":2,\"652\":2,\"993\":1,\"1114\":3}}],[\"522s\",{\"1\":{\"38\":1}}],[\"50+6305039478318694p\",{\"1\":{\"700\":1}}],[\"5087fa2\",{\"1\":{\"499\":2}}],[\"5000\",{\"1\":{\"398\":1,\"479\":2}}],[\"500\",{\"1\":{\"143\":1,\"479\":1,\"481\":1,\"482\":1,\"833\":4,\"1013\":1}}],[\"50\",{\"1\":{\"10\":1,\"116\":2,\"145\":1,\"159\":4,\"446\":2,\"526\":1,\"834\":2,\"866\":1,\"986\":1,\"1114\":3}}],[\"5\",{\"0\":{\"132\":1,\"783\":1},\"1\":{\"6\":1,\"7\":10,\"8\":1,\"17\":4,\"20\":1,\"26\":2,\"27\":1,\"28\":1,\"29\":2,\"87\":1,\"93\":1,\"132\":4,\"137\":2,\"158\":2,\"159\":1,\"168\":1,\"190\":2,\"209\":1,\"242\":2,\"299\":1,\"302\":2,\"320\":2,\"325\":1,\"341\":1,\"344\":2,\"354\":11,\"357\":2,\"360\":12,\"362\":18,\"365\":1,\"366\":4,\"367\":3,\"368\":6,\"369\":2,\"370\":5,\"371\":4,\"391\":1,\"392\":3,\"399\":1,\"400\":3,\"401\":1,\"410\":1,\"412\":1,\"418\":2,\"456\":1,\"462\":3,\"467\":8,\"470\":2,\"472\":1,\"478\":1,\"480\":1,\"485\":2,\"486\":2,\"495\":6,\"499\":3,\"503\":4,\"509\":6,\"510\":1,\"524\":2,\"526\":1,\"539\":6,\"551\":2,\"553\":5,\"559\":1,\"581\":1,\"582\":1,\"583\":1,\"585\":8,\"587\":3,\"661\":1,\"662\":1,\"663\":2,\"684\":2,\"685\":4,\"687\":4,\"700\":1,\"751\":1,\"752\":1,\"778\":1,\"834\":1,\"835\":1,\"840\":1,\"897\":4,\"911\":3,\"1019\":11,\"1020\":3,\"1027\":1,\"1030\":1,\"1032\":3,\"1034\":1,\"1041\":2,\"1053\":1,\"1060\":1,\"1114\":8,\"1138\":3}}],[\"1值为\",{\"1\":{\"995\":1}}],[\"1tpp9fszfoonibpwha0c\",{\"1\":{\"780\":1}}],[\"1a\",{\"1\":{\"675\":1}}],[\"1a77947f34deddb41af25e6f0ddb8e830159c179\",{\"1\":{\"205\":1}}],[\"1<<mutexwaitershift\",{\"1\":{\"1153\":1,\"1154\":1}}],[\"1<<64\",{\"1\":{\"651\":1}}],[\"1<<63\",{\"1\":{\"651\":1,\"738\":1}}],[\"1<<16\",{\"1\":{\"651\":1}}],[\"1<<15\",{\"1\":{\"552\":1,\"651\":1}}],[\"1<<8\",{\"1\":{\"651\":1}}],[\"1<<intsize\",{\"1\":{\"651\":1}}],[\"1<<7\",{\"1\":{\"651\":1}}],[\"1<<\",{\"1\":{\"651\":1}}],[\"1<<32\",{\"1\":{\"651\":1}}],[\"1<<31\",{\"1\":{\"651\":1}}],[\"1<<3\",{\"1\":{\"341\":1}}],[\"1ns\",{\"1\":{\"519\":1}}],[\"1ms\",{\"1\":{\"519\":1}}],[\"1s\",{\"1\":{\"519\":1}}],[\"1f422d1\",{\"1\":{\"499\":2}}],[\"1fffp\",{\"1\":{\"302\":1}}],[\"1e2\",{\"1\":{\"341\":4}}],[\"1e6i\",{\"1\":{\"303\":1}}],[\"1e6\",{\"1\":{\"302\":1,\"1151\":1}}],[\"1i\",{\"1\":{\"303\":3}}],[\"144\",{\"1\":{\"1114\":1}}],[\"14473757196637\",{\"1\":{\"919\":1}}],[\"14336\",{\"1\":{\"1114\":1}}],[\"143\",{\"1\":{\"912\":1}}],[\"145114\",{\"1\":{\"697\":2}}],[\"14k\",{\"1\":{\"526\":1}}],[\"149\",{\"1\":{\"380\":1}}],[\"1424\",{\"1\":{\"984\":1}}],[\"1422773729\",{\"1\":{\"539\":1}}],[\"142\",{\"1\":{\"144\":3}}],[\"1408\",{\"1\":{\"1114\":1}}],[\"140\",{\"1\":{\"143\":4,\"144\":2,\"380\":1}}],[\"141593\",{\"1\":{\"698\":1}}],[\"14159261234567891011\",{\"1\":{\"698\":1}}],[\"14159265358979323846264338327950288419716939937510582097494459\",{\"1\":{\"653\":1}}],[\"1415926\",{\"1\":{\"571\":1,\"707\":1,\"725\":2}}],[\"141\",{\"1\":{\"141\":3,\"143\":1,\"144\":5}}],[\"14\",{\"0\":{\"123\":1},\"1\":{\"117\":2,\"123\":4,\"137\":2,\"168\":1,\"208\":1,\"209\":1,\"223\":1,\"225\":1,\"341\":1,\"354\":1,\"410\":1,\"503\":2,\"509\":1,\"521\":3,\"538\":1,\"550\":3,\"553\":9,\"588\":1,\"725\":1,\"732\":2,\"856\":2,\"1106\":2,\"1107\":1,\"1114\":5}}],[\"15s\",{\"1\":{\"527\":2}}],[\"1516239022\",{\"1\":{\"780\":1}}],[\"151\",{\"1\":{\"526\":1}}],[\"1526\",{\"1\":{\"526\":1}}],[\"1592\",{\"1\":{\"526\":1}}],[\"1556\",{\"1\":{\"526\":1}}],[\"1507\",{\"1\":{\"526\":1}}],[\"150\",{\"1\":{\"380\":1}}],[\"15e+0\",{\"1\":{\"302\":1}}],[\"1536\",{\"1\":{\"1114\":1}}],[\"1538\",{\"1\":{\"526\":1}}],[\"153\",{\"1\":{\"205\":1}}],[\"15395306441938000233\",{\"1\":{\"44\":1}}],[\"15\",{\"0\":{\"122\":1},\"1\":{\"116\":1,\"119\":1,\"121\":1,\"122\":5,\"123\":1,\"124\":1,\"130\":1,\"168\":1,\"174\":1,\"187\":2,\"205\":1,\"209\":1,\"302\":2,\"341\":1,\"354\":1,\"503\":2,\"509\":1,\"522\":1,\"523\":1,\"527\":1,\"550\":2,\"559\":2,\"561\":6,\"633\":2,\"636\":5,\"651\":1,\"688\":1,\"689\":1,\"739\":3,\"840\":1,\"1014\":1,\"1041\":4,\"1076\":2,\"1114\":10}}],[\"13568\",{\"1\":{\"1114\":1}}],[\"1353\",{\"1\":{\"526\":1}}],[\"136\",{\"1\":{\"847\":1,\"1117\":1}}],[\"13s\",{\"1\":{\"527\":1}}],[\"1332\",{\"1\":{\"526\":1}}],[\"134\",{\"1\":{\"241\":1,\"243\":1,\"912\":1}}],[\"132\",{\"1\":{\"205\":1}}],[\"1398\",{\"1\":{\"526\":1}}],[\"139\",{\"1\":{\"143\":3,\"144\":2}}],[\"1388\",{\"1\":{\"526\":1}}],[\"138\",{\"1\":{\"143\":7,\"144\":2,\"145\":3,\"221\":1,\"851\":1}}],[\"1315643\",{\"1\":{\"698\":2}}],[\"131\",{\"1\":{\"132\":2}}],[\"13\",{\"0\":{\"124\":1},\"1\":{\"113\":2,\"114\":1,\"116\":1,\"117\":1,\"118\":1,\"120\":1,\"124\":4,\"126\":2,\"136\":2,\"168\":1,\"325\":2,\"341\":1,\"399\":1,\"504\":1,\"550\":8,\"553\":4,\"581\":1,\"583\":1,\"599\":1,\"603\":1,\"862\":1,\"982\":3,\"1008\":1,\"1032\":4,\"1114\":4}}],[\"13absrp7\",{\"1\":{\"106\":1}}],[\"12943368192\",{\"1\":{\"919\":1}}],[\"125\",{\"1\":{\"912\":2}}],[\"126\",{\"1\":{\"652\":1}}],[\"12s\",{\"1\":{\"527\":1}}],[\"12141\",{\"1\":{\"916\":1}}],[\"121\",{\"1\":{\"629\":1}}],[\"1211017600\",{\"1\":{\"525\":1}}],[\"12132\",{\"1\":{\"233\":1,\"234\":1}}],[\"1280\",{\"1\":{\"526\":1,\"1114\":1}}],[\"128\",{\"1\":{\"489\":2,\"535\":1,\"699\":2,\"700\":3,\"1114\":30}}],[\"1249847412109375\",{\"1\":{\"302\":1}}],[\"1234\",{\"1\":{\"682\":2}}],[\"12345e+5i\",{\"1\":{\"303\":1}}],[\"12345e+5\",{\"1\":{\"302\":1}}],[\"12345\",{\"1\":{\"255\":1}}],[\"123456\",{\"1\":{\"221\":1,\"232\":1,\"241\":1,\"243\":1,\"621\":1,\"622\":2,\"623\":1,\"642\":1,\"779\":2,\"782\":1,\"790\":1,\"851\":1,\"970\":4}}],[\"1234567890\",{\"1\":{\"773\":1}}],[\"123456789\",{\"1\":{\"202\":1}}],[\"123i\",{\"1\":{\"303\":1}}],[\"123\",{\"1\":{\"174\":1,\"406\":1,\"466\":2,\"467\":1,\"526\":2,\"812\":14,\"813\":5,\"985\":1}}],[\"1202\",{\"1\":{\"626\":1,\"627\":2}}],[\"120230\",{\"1\":{\"235\":1,\"236\":1,\"237\":1}}],[\"1203622300\",{\"1\":{\"526\":1}}],[\"120\",{\"1\":{\"170\":1,\"619\":1,\"620\":1,\"625\":2,\"628\":2,\"639\":1}}],[\"12288\",{\"1\":{\"1114\":1}}],[\"122\",{\"1\":{\"132\":2,\"912\":2}}],[\"12\",{\"0\":{\"125\":1},\"1\":{\"87\":1,\"113\":1,\"114\":1,\"125\":5,\"131\":1,\"132\":1,\"133\":1,\"135\":1,\"138\":1,\"168\":1,\"212\":2,\"213\":1,\"223\":1,\"225\":2,\"235\":1,\"332\":1,\"341\":1,\"354\":2,\"481\":1,\"482\":1,\"503\":2,\"509\":2,\"560\":1,\"629\":3,\"657\":1,\"700\":1,\"739\":1,\"740\":2,\"751\":3,\"982\":3,\"993\":1,\"994\":2,\"1008\":1,\"1114\":13}}],[\"127\",{\"1\":{\"41\":2,\"141\":1,\"174\":1,\"175\":3,\"232\":1,\"234\":1,\"557\":1,\"559\":1,\"560\":3,\"561\":2,\"621\":1,\"623\":1,\"824\":2,\"916\":1,\"968\":2,\"969\":2,\"970\":2,\"972\":1,\"973\":1,\"974\":1}}],[\"1+1=\",{\"1\":{\"729\":1}}],[\"1+2j\",{\"1\":{\"699\":2}}],[\"1+2i\",{\"1\":{\"568\":1,\"699\":2}}],[\"1+2=3\",{\"1\":{\"531\":1}}],[\"1+2+3\",{\"1\":{\"324\":1}}],[\"1+\",{\"1\":{\"75\":1}}],[\"1792\",{\"1\":{\"1114\":1}}],[\"170\",{\"1\":{\"1114\":1}}],[\"17018114048\",{\"1\":{\"918\":1}}],[\"171875\",{\"1\":{\"912\":2}}],[\"176\",{\"1\":{\"912\":1,\"1114\":1}}],[\"1744\",{\"1\":{\"526\":1}}],[\"1727066104528\",{\"1\":{\"208\":1}}],[\"17\",{\"0\":{\"120\":1},\"1\":{\"18\":1,\"42\":1,\"45\":1,\"117\":1,\"120\":4,\"125\":1,\"131\":1,\"145\":1,\"159\":31,\"166\":18,\"168\":1,\"175\":10,\"205\":1,\"341\":1,\"494\":1,\"499\":3,\"503\":2,\"509\":1,\"561\":3,\"563\":1,\"688\":1,\"689\":1,\"737\":1,\"739\":2,\"784\":2,\"942\":2,\"943\":1,\"944\":1,\"986\":1,\"1008\":1,\"1067\":1,\"1114\":2}}],[\"180\",{\"1\":{\"912\":1}}],[\"1806853582554515\",{\"1\":{\"911\":1}}],[\"18s\",{\"1\":{\"527\":1}}],[\"1818\",{\"1\":{\"526\":1}}],[\"18432\",{\"1\":{\"1114\":1}}],[\"184s\",{\"1\":{\"527\":1}}],[\"184\",{\"1\":{\"380\":1}}],[\"18\",{\"0\":{\"119\":1},\"1\":{\"16\":1,\"117\":1,\"119\":4,\"134\":1,\"158\":18,\"159\":19,\"166\":5,\"167\":2,\"209\":1,\"216\":1,\"223\":1,\"224\":1,\"225\":1,\"291\":1,\"341\":1,\"354\":2,\"365\":2,\"388\":1,\"407\":2,\"408\":1,\"446\":1,\"460\":2,\"503\":2,\"509\":1,\"512\":1,\"527\":7,\"540\":2,\"563\":2,\"570\":1,\"574\":1,\"578\":1,\"579\":1,\"619\":1,\"620\":1,\"625\":2,\"628\":2,\"639\":1,\"688\":1,\"689\":1,\"700\":1,\"734\":2,\"735\":2,\"736\":3,\"737\":1,\"751\":2,\"784\":1,\"895\":3,\"899\":1,\"942\":1,\"945\":1,\"965\":1,\"1095\":1,\"1114\":2}}],[\"16b\",{\"1\":{\"1123\":1,\"1124\":2,\"1125\":1}}],[\"160\",{\"1\":{\"1114\":1}}],[\"16kb\",{\"1\":{\"1112\":2}}],[\"16384\",{\"1\":{\"1089\":1,\"1114\":7}}],[\"1635\",{\"1\":{\"526\":1}}],[\"16x16\",{\"1\":{\"1016\":1}}],[\"16957500928\",{\"1\":{\"916\":1}}],[\"1698216540\",{\"1\":{\"856\":1}}],[\"1698216540519000000\",{\"1\":{\"856\":1}}],[\"162\",{\"1\":{\"912\":1}}],[\"1650\",{\"1\":{\"603\":1}}],[\"16s\",{\"1\":{\"527\":1}}],[\"1663\",{\"1\":{\"526\":1}}],[\"164\",{\"1\":{\"449\":1,\"934\":1}}],[\"1683909241\",{\"1\":{\"907\":1}}],[\"1688\",{\"1\":{\"525\":1}}],[\"168\",{\"1\":{\"141\":3,\"143\":15,\"144\":14,\"145\":5,\"205\":1,\"221\":1,\"241\":1,\"243\":1,\"677\":1,\"851\":1}}],[\"16162\",{\"1\":{\"233\":1}}],[\"161\",{\"1\":{\"9\":1}}],[\"16\",{\"0\":{\"121\":1},\"1\":{\"9\":1,\"24\":1,\"26\":1,\"41\":1,\"45\":1,\"120\":1,\"121\":5,\"127\":1,\"129\":1,\"140\":1,\"141\":1,\"143\":4,\"144\":10,\"155\":4,\"158\":18,\"167\":9,\"168\":2,\"187\":1,\"302\":1,\"316\":2,\"324\":1,\"341\":1,\"354\":2,\"377\":1,\"410\":1,\"434\":2,\"448\":1,\"478\":1,\"484\":1,\"499\":1,\"521\":1,\"523\":2,\"527\":1,\"588\":3,\"629\":1,\"707\":1,\"748\":2,\"749\":2,\"750\":1,\"751\":2,\"752\":1,\"840\":2,\"856\":2,\"964\":1,\"1014\":1,\"1021\":2,\"1032\":4,\"1041\":1,\"1067\":2,\"1112\":1,\"1114\":15,\"1115\":1}}],[\"117\",{\"1\":{\"559\":11}}],[\"1152\",{\"1\":{\"1114\":1}}],[\"115264797507788\",{\"1\":{\"911\":2}}],[\"11541090304\",{\"1\":{\"918\":1}}],[\"115\",{\"1\":{\"912\":1}}],[\"1158000\",{\"1\":{\"526\":1}}],[\"1153796000\",{\"1\":{\"525\":1}}],[\"1188983000\",{\"1\":{\"526\":1}}],[\"11800h\",{\"1\":{\"525\":1,\"526\":3,\"588\":1}}],[\"118s\",{\"1\":{\"7\":1}}],[\"11th\",{\"1\":{\"525\":1,\"526\":3,\"588\":1}}],[\"110\",{\"1\":{\"521\":5}}],[\"1123\",{\"1\":{\"526\":3}}],[\"1123163300\",{\"1\":{\"526\":1}}],[\"112\",{\"1\":{\"489\":2,\"1114\":1}}],[\"114154\",{\"1\":{\"491\":1}}],[\"114514\",{\"1\":{\"439\":1,\"440\":2,\"442\":2,\"465\":1,\"571\":1,\"781\":1,\"784\":1,\"785\":1}}],[\"114\",{\"1\":{\"380\":1,\"693\":2,\"1054\":1}}],[\"119\",{\"1\":{\"380\":1,\"629\":1,\"1054\":1}}],[\"111\",{\"1\":{\"380\":4,\"521\":5,\"522\":1,\"523\":1,\"684\":1,\"698\":2,\"1054\":2}}],[\"1162108\",{\"1\":{\"526\":1}}],[\"116\",{\"1\":{\"375\":1}}],[\"11i\",{\"1\":{\"303\":1}}],[\"11\",{\"0\":{\"126\":1},\"1\":{\"7\":1,\"27\":1,\"87\":1,\"113\":1,\"122\":1,\"126\":4,\"137\":2,\"168\":1,\"205\":1,\"302\":1,\"341\":1,\"442\":2,\"492\":1,\"499\":2,\"503\":2,\"504\":2,\"509\":1,\"538\":1,\"543\":1,\"551\":8,\"685\":1,\"687\":1,\"701\":1,\"719\":1,\"721\":1,\"737\":1,\"739\":2,\"749\":1,\"750\":1,\"912\":1,\"964\":1,\"965\":2,\"982\":1,\"993\":1,\"1019\":3,\"1021\":2,\"1114\":10}}],[\"10ms\",{\"1\":{\"1107\":1}}],[\"107663360\",{\"1\":{\"920\":1}}],[\"10>2\",{\"1\":{\"725\":1}}],[\"10+12\",{\"1\":{\"700\":1}}],[\"109375\",{\"1\":{\"912\":1}}],[\"1097800\",{\"1\":{\"526\":1}}],[\"1098\",{\"1\":{\"526\":1}}],[\"10345\",{\"1\":{\"526\":1}}],[\"10356509696\",{\"1\":{\"916\":1}}],[\"10355\",{\"1\":{\"526\":1}}],[\"10352\",{\"1\":{\"526\":1}}],[\"10313\",{\"1\":{\"526\":1}}],[\"102\",{\"1\":{\"1114\":1}}],[\"10297\",{\"1\":{\"526\":1}}],[\"1022\",{\"1\":{\"652\":1}}],[\"10222\",{\"1\":{\"526\":1}}],[\"10225\",{\"1\":{\"526\":1}}],[\"10237\",{\"1\":{\"526\":1}}],[\"10208\",{\"1\":{\"526\":1}}],[\"10213\",{\"1\":{\"526\":1}}],[\"10217\",{\"1\":{\"526\":2}}],[\"10216\",{\"1\":{\"526\":1}}],[\"10219\",{\"1\":{\"525\":1}}],[\"10240\",{\"1\":{\"1114\":1}}],[\"10243\",{\"1\":{\"525\":1}}],[\"1024\",{\"1\":{\"343\":1,\"365\":2,\"435\":1,\"441\":1,\"459\":2,\"541\":2,\"572\":2,\"728\":4,\"820\":5,\"1042\":1,\"1089\":1,\"1114\":4}}],[\"10个斐波那契数\",{\"1\":{\"399\":1}}],[\"10880\",{\"1\":{\"1114\":1}}],[\"1080713900\",{\"1\":{\"526\":1}}],[\"108\",{\"1\":{\"380\":7,\"1054\":3}}],[\"10139\",{\"1\":{\"526\":1}}],[\"10141\",{\"1\":{\"526\":1}}],[\"10147\",{\"1\":{\"526\":1}}],[\"10111\",{\"1\":{\"526\":1}}],[\"10158\",{\"1\":{\"526\":1}}],[\"10195\",{\"1\":{\"526\":1}}],[\"10171\",{\"1\":{\"525\":1}}],[\"10126\",{\"1\":{\"525\":1}}],[\"101\",{\"1\":{\"380\":3,\"521\":14,\"522\":2,\"523\":32,\"524\":3,\"701\":1,\"1054\":1}}],[\"10k\",{\"1\":{\"301\":1}}],[\"10569473\",{\"1\":{\"527\":2}}],[\"1056570\",{\"1\":{\"526\":1}}],[\"105\",{\"1\":{\"209\":1}}],[\"1053b441b1f2\",{\"1\":{\"20\":1,\"27\":1}}],[\"1045291300\",{\"1\":{\"526\":1}}],[\"1042\",{\"1\":{\"526\":1}}],[\"10406\",{\"1\":{\"526\":1}}],[\"104\",{\"1\":{\"209\":1,\"380\":3,\"629\":1,\"912\":1,\"1054\":1}}],[\"1068\",{\"1\":{\"526\":1}}],[\"1068682\",{\"1\":{\"526\":1}}],[\"106\",{\"1\":{\"43\":1,\"209\":1}}],[\"100w\",{\"1\":{\"547\":1}}],[\"1006019\",{\"1\":{\"526\":1}}],[\"100644\",{\"1\":{\"499\":5}}],[\"10002\",{\"1\":{\"526\":1}}],[\"10001\",{\"1\":{\"526\":1}}],[\"1000\",{\"1\":{\"354\":1,\"462\":1,\"480\":2,\"481\":3,\"482\":3,\"485\":8,\"547\":1,\"588\":1,\"738\":3,\"833\":2,\"834\":2,\"835\":6}}],[\"10000可以看到\",{\"1\":{\"1089\":1}}],[\"100000\",{\"1\":{\"428\":1}}],[\"10000\",{\"1\":{\"135\":1,\"406\":1,\"525\":1,\"588\":10,\"1085\":1,\"1089\":2}}],[\"100+3\",{\"1\":{\"348\":1}}],[\"100k\",{\"1\":{\"301\":1}}],[\"100\",{\"1\":{\"43\":1,\"93\":1,\"116\":1,\"129\":1,\"137\":1,\"158\":1,\"159\":1,\"301\":1,\"324\":1,\"332\":1,\"348\":3,\"349\":4,\"354\":2,\"366\":2,\"380\":1,\"388\":1,\"389\":1,\"393\":1,\"432\":1,\"460\":2,\"476\":1,\"486\":3,\"495\":3,\"499\":4,\"524\":1,\"525\":2,\"553\":2,\"559\":11,\"574\":1,\"664\":1,\"669\":1,\"748\":1,\"795\":1,\"863\":2,\"1023\":2,\"1038\":1,\"1054\":1,\"1130\":1,\"1142\":1,\"1165\":4}}],[\"10\",{\"0\":{\"127\":1},\"1\":{\"7\":1,\"9\":3,\"43\":2,\"87\":1,\"92\":1,\"93\":1,\"115\":3,\"116\":1,\"117\":3,\"119\":2,\"124\":1,\"127\":4,\"129\":1,\"133\":1,\"135\":1,\"145\":2,\"167\":9,\"168\":1,\"209\":1,\"216\":2,\"226\":1,\"227\":3,\"228\":1,\"242\":1,\"301\":1,\"312\":2,\"341\":1,\"344\":3,\"354\":1,\"355\":3,\"356\":4,\"357\":4,\"366\":4,\"367\":3,\"368\":1,\"382\":1,\"384\":3,\"385\":1,\"386\":1,\"388\":2,\"389\":4,\"392\":1,\"393\":3,\"399\":2,\"400\":1,\"456\":3,\"457\":1,\"462\":6,\"467\":2,\"470\":5,\"472\":2,\"479\":4,\"480\":4,\"484\":2,\"486\":7,\"503\":2,\"509\":1,\"521\":14,\"522\":2,\"523\":32,\"524\":2,\"526\":4,\"533\":4,\"539\":1,\"543\":2,\"551\":1,\"552\":5,\"553\":5,\"555\":1,\"556\":2,\"559\":1,\"560\":2,\"578\":3,\"582\":2,\"583\":2,\"629\":1,\"657\":2,\"664\":1,\"669\":1,\"682\":1,\"701\":2,\"714\":2,\"725\":1,\"737\":1,\"739\":2,\"740\":2,\"834\":1,\"856\":2,\"877\":3,\"907\":3,\"998\":2,\"1014\":1,\"1019\":14,\"1021\":1,\"1023\":1,\"1026\":1,\"1027\":1,\"1082\":1,\"1112\":1,\"1114\":5,\"1142\":1,\"1145\":1,\"1149\":1,\"1165\":1,\"1171\":2,\"1175\":1}}],[\"1\",{\"0\":{\"114\":1,\"115\":1,\"116\":1,\"117\":1,\"118\":1,\"119\":1,\"120\":1,\"121\":1,\"122\":1,\"123\":1,\"124\":1,\"125\":1,\"126\":1,\"127\":1,\"128\":1,\"129\":1,\"130\":1,\"131\":1,\"132\":1,\"133\":1,\"134\":1,\"135\":1,\"136\":2,\"137\":1,\"779\":1},\"1\":{\"6\":2,\"7\":14,\"9\":1,\"10\":2,\"13\":1,\"14\":1,\"16\":2,\"17\":1,\"18\":5,\"20\":8,\"21\":1,\"24\":1,\"26\":2,\"27\":10,\"28\":9,\"34\":2,\"37\":1,\"38\":1,\"41\":3,\"42\":2,\"45\":1,\"88\":1,\"91\":3,\"93\":4,\"110\":1,\"113\":1,\"114\":2,\"115\":3,\"116\":5,\"117\":4,\"118\":1,\"119\":1,\"120\":1,\"121\":1,\"122\":1,\"123\":1,\"124\":1,\"125\":1,\"126\":1,\"127\":1,\"128\":1,\"129\":1,\"130\":2,\"131\":1,\"132\":1,\"133\":2,\"134\":1,\"135\":1,\"136\":8,\"137\":2,\"138\":1,\"140\":1,\"141\":5,\"143\":8,\"144\":21,\"148\":2,\"151\":2,\"152\":2,\"156\":1,\"158\":3,\"159\":3,\"164\":1,\"167\":2,\"168\":4,\"174\":1,\"175\":3,\"181\":2,\"182\":1,\"185\":1,\"186\":1,\"187\":6,\"188\":2,\"189\":1,\"190\":4,\"191\":4,\"192\":1,\"194\":1,\"195\":1,\"196\":2,\"200\":3,\"205\":1,\"209\":1,\"212\":7,\"213\":5,\"214\":7,\"215\":4,\"216\":2,\"225\":4,\"227\":2,\"229\":1,\"232\":1,\"233\":1,\"234\":1,\"242\":6,\"256\":1,\"263\":1,\"267\":2,\"268\":2,\"271\":1,\"278\":1,\"279\":2,\"280\":4,\"282\":2,\"291\":2,\"299\":2,\"302\":3,\"303\":1,\"307\":1,\"311\":1,\"324\":7,\"325\":6,\"329\":9,\"331\":16,\"332\":8,\"333\":5,\"341\":13,\"344\":2,\"348\":4,\"350\":7,\"351\":1,\"352\":2,\"354\":15,\"356\":3,\"357\":2,\"360\":6,\"361\":1,\"362\":11,\"364\":1,\"365\":3,\"366\":6,\"367\":3,\"368\":6,\"369\":2,\"371\":11,\"372\":2,\"382\":2,\"383\":4,\"384\":2,\"385\":3,\"386\":2,\"387\":2,\"389\":1,\"392\":4,\"398\":3,\"399\":5,\"400\":4,\"401\":1,\"402\":7,\"412\":1,\"413\":3,\"414\":10,\"419\":3,\"424\":1,\"434\":1,\"445\":1,\"448\":1,\"451\":2,\"452\":1,\"456\":1,\"457\":2,\"462\":3,\"464\":1,\"465\":2,\"467\":13,\"468\":10,\"469\":2,\"470\":2,\"471\":6,\"472\":9,\"476\":3,\"477\":1,\"478\":1,\"479\":3,\"480\":2,\"481\":5,\"482\":2,\"484\":2,\"485\":1,\"486\":3,\"487\":1,\"492\":1,\"494\":1,\"499\":8,\"503\":17,\"504\":3,\"505\":4,\"507\":2,\"508\":9,\"509\":13,\"512\":2,\"513\":2,\"515\":1,\"519\":1,\"520\":1,\"525\":2,\"526\":6,\"527\":10,\"531\":2,\"532\":1,\"534\":1,\"535\":2,\"537\":8,\"538\":1,\"539\":10,\"540\":1,\"542\":1,\"543\":2,\"545\":1,\"546\":1,\"547\":2,\"555\":1,\"556\":1,\"557\":1,\"559\":1,\"560\":4,\"561\":2,\"563\":1,\"568\":9,\"570\":1,\"571\":2,\"572\":4,\"573\":1,\"574\":4,\"575\":1,\"577\":2,\"578\":10,\"581\":6,\"582\":1,\"583\":2,\"584\":1,\"585\":14,\"587\":5,\"589\":1,\"591\":4,\"593\":1,\"594\":1,\"595\":3,\"596\":2,\"599\":1,\"600\":2,\"606\":9,\"608\":1,\"621\":1,\"623\":1,\"629\":3,\"647\":1,\"649\":1,\"651\":17,\"652\":6,\"653\":7,\"654\":1,\"655\":2,\"656\":2,\"657\":2,\"659\":4,\"660\":2,\"663\":2,\"664\":1,\"669\":2,\"671\":1,\"676\":1,\"677\":1,\"678\":1,\"679\":1,\"682\":1,\"683\":1,\"684\":1,\"685\":2,\"687\":2,\"688\":1,\"689\":1,\"694\":2,\"697\":2,\"698\":4,\"700\":3,\"701\":2,\"705\":5,\"707\":1,\"712\":2,\"713\":1,\"715\":4,\"725\":5,\"727\":3,\"728\":11,\"729\":3,\"730\":2,\"732\":2,\"733\":3,\"738\":3,\"739\":1,\"745\":1,\"748\":4,\"751\":3,\"752\":1,\"753\":3,\"754\":1,\"763\":1,\"778\":8,\"781\":1,\"794\":1,\"809\":1,\"817\":5,\"820\":5,\"824\":2,\"834\":1,\"847\":2,\"874\":3,\"875\":14,\"877\":1,\"888\":4,\"889\":1,\"895\":8,\"896\":5,\"897\":10,\"898\":7,\"899\":6,\"901\":1,\"902\":2,\"909\":1,\"912\":3,\"934\":6,\"937\":3,\"944\":2,\"945\":1,\"955\":1,\"965\":2,\"968\":2,\"969\":2,\"970\":2,\"972\":1,\"973\":1,\"974\":1,\"982\":1,\"993\":1,\"994\":1,\"995\":1,\"998\":1,\"1011\":3,\"1014\":1,\"1016\":1,\"1019\":9,\"1021\":1,\"1024\":3,\"1025\":1,\"1026\":1,\"1027\":3,\"1028\":1,\"1030\":2,\"1032\":2,\"1034\":3,\"1036\":7,\"1037\":7,\"1038\":2,\"1039\":2,\"1041\":2,\"1042\":18,\"1043\":6,\"1052\":1,\"1053\":1,\"1054\":4,\"1061\":1,\"1065\":1,\"1066\":3,\"1067\":18,\"1071\":1,\"1074\":4,\"1076\":1,\"1077\":2,\"1079\":2,\"1080\":5,\"1082\":1,\"1085\":1,\"1089\":3,\"1098\":1,\"1100\":1,\"1102\":2,\"1106\":4,\"1107\":2,\"1114\":9,\"1115\":3,\"1117\":1,\"1118\":2,\"1120\":2,\"1122\":1,\"1124\":1,\"1125\":3,\"1126\":2,\"1132\":1,\"1138\":1,\"1139\":2,\"1140\":1,\"1144\":3,\"1148\":3,\"1149\":1,\"1151\":4,\"1153\":5,\"1154\":2,\"1156\":1,\"1161\":1,\"1162\":5,\"1167\":3,\"1171\":1,\"1173\":1,\"1175\":1,\"1177\":1}}],[\"19072\",{\"1\":{\"1114\":1}}],[\"19044\",{\"1\":{\"907\":4}}],[\"1978\",{\"1\":{\"1084\":1}}],[\"197s\",{\"1\":{\"7\":1}}],[\"1998\",{\"1\":{\"1136\":1}}],[\"1996\",{\"1\":{\"1084\":1}}],[\"1995\",{\"1\":{\"1084\":1}}],[\"1993\",{\"1\":{\"1084\":1}}],[\"1992\",{\"1\":{\"909\":1}}],[\"19990\",{\"1\":{\"380\":1}}],[\"1988\",{\"1\":{\"1084\":1}}],[\"1986\",{\"1\":{\"1084\":1}}],[\"1983\",{\"1\":{\"1084\":1}}],[\"198\",{\"1\":{\"909\":1}}],[\"1985543\",{\"1\":{\"527\":1}}],[\"19568250880\",{\"1\":{\"919\":1}}],[\"195\",{\"1\":{\"907\":1}}],[\"1958\",{\"1\":{\"525\":1}}],[\"19+90i\",{\"1\":{\"700\":1}}],[\"1927ms\",{\"1\":{\"982\":1}}],[\"192\",{\"1\":{\"141\":2,\"143\":8,\"144\":11,\"145\":5,\"205\":1,\"221\":1,\"241\":1,\"243\":1,\"676\":1,\"677\":1,\"851\":1,\"1025\":1,\"1114\":2}}],[\"19\",{\"0\":{\"118\":1},\"1\":{\"6\":2,\"26\":1,\"113\":1,\"117\":1,\"118\":4,\"132\":1,\"159\":31,\"209\":1,\"291\":1,\"341\":1,\"405\":2,\"526\":2,\"626\":1,\"627\":2,\"804\":1,\"824\":1,\"843\":1,\"1008\":1,\"1114\":3}}],[\"3c\",{\"1\":{\"675\":1}}],[\"3s\",{\"1\":{\"527\":1}}],[\"384\",{\"1\":{\"1114\":3}}],[\"38905609893065\",{\"1\":{\"665\":1}}],[\"38\",{\"1\":{\"527\":1,\"559\":1,\"840\":1,\"1114\":1}}],[\"387s\",{\"1\":{\"526\":1}}],[\"3870\",{\"1\":{\"526\":1}}],[\"381s\",{\"1\":{\"525\":1}}],[\"386412\",{\"1\":{\"526\":1}}],[\"386\",{\"1\":{\"7\":3,\"11\":1,\"42\":1}}],[\"361408\",{\"1\":{\"527\":1}}],[\"367225\",{\"1\":{\"527\":1}}],[\"363120\",{\"1\":{\"527\":1}}],[\"3600\",{\"1\":{\"1002\":1}}],[\"3603459389\",{\"1\":{\"416\":3}}],[\"360entsecgroup\",{\"1\":{\"81\":1}}],[\"36\",{\"1\":{\"331\":2,\"354\":2,\"743\":2,\"1114\":3}}],[\"3456\",{\"1\":{\"1114\":1}}],[\"341\",{\"1\":{\"1114\":1}}],[\"3421\",{\"1\":{\"847\":1}}],[\"3428\",{\"1\":{\"525\":1}}],[\"3432624\",{\"1\":{\"539\":1}}],[\"3432608\",{\"1\":{\"539\":1}}],[\"3432592\",{\"1\":{\"539\":1}}],[\"3432576\",{\"1\":{\"539\":1}}],[\"3432544\",{\"1\":{\"539\":1}}],[\"3432824\",{\"1\":{\"539\":1}}],[\"3439\",{\"1\":{\"526\":1}}],[\"348056\",{\"1\":{\"527\":1}}],[\"346408\",{\"1\":{\"527\":1}}],[\"344530\",{\"1\":{\"525\":1}}],[\"34\",{\"1\":{\"205\":1,\"399\":1,\"583\":1,\"1114\":2}}],[\"3166\",{\"1\":{\"934\":3}}],[\"3125\",{\"1\":{\"912\":2}}],[\"31564e+06\",{\"1\":{\"698\":1}}],[\"315643e+06\",{\"1\":{\"698\":1}}],[\"315889\",{\"1\":{\"588\":1}}],[\"3107788\",{\"1\":{\"981\":1}}],[\"310\",{\"1\":{\"526\":1}}],[\"31016791\",{\"1\":{\"416\":3}}],[\"31\",{\"1\":{\"200\":1,\"595\":1,\"651\":1,\"809\":3,\"1037\":1,\"1114\":2}}],[\"390625\",{\"1\":{\"912\":1}}],[\"39f4de51ef7d\",{\"1\":{\"504\":1}}],[\"3986\",{\"1\":{\"174\":1}}],[\"39\",{\"1\":{\"145\":1,\"460\":1,\"1114\":2}}],[\"3333333333333335\",{\"1\":{\"697\":1}}],[\"3333333333333333333\",{\"1\":{\"697\":1}}],[\"3333\",{\"1\":{\"660\":1}}],[\"3326\",{\"1\":{\"622\":2}}],[\"335167\",{\"1\":{\"527\":1}}],[\"335358\",{\"1\":{\"526\":1}}],[\"339\",{\"1\":{\"526\":1}}],[\"339596\",{\"1\":{\"526\":1}}],[\"338957\",{\"1\":{\"526\":1}}],[\"3376\",{\"1\":{\"526\":1}}],[\"3306\",{\"1\":{\"232\":1,\"234\":1,\"621\":1,\"623\":1,\"824\":1,\"851\":1}}],[\"33\",{\"1\":{\"141\":2,\"158\":2,\"380\":3,\"382\":1,\"526\":1,\"982\":3,\"1054\":1,\"1114\":2}}],[\"334\",{\"1\":{\"7\":2}}],[\"379\",{\"1\":{\"1067\":4}}],[\"3707\",{\"1\":{\"588\":1}}],[\"373305\",{\"1\":{\"527\":1}}],[\"372185\",{\"1\":{\"527\":1}}],[\"377\",{\"1\":{\"304\":1}}],[\"37\",{\"1\":{\"132\":2,\"325\":1,\"527\":1,\"743\":1,\"840\":1,\"847\":1,\"1114\":3}}],[\"352\",{\"1\":{\"1067\":1,\"1114\":1}}],[\"352594\",{\"1\":{\"132\":2}}],[\"358059\",{\"1\":{\"527\":1}}],[\"35k\",{\"1\":{\"526\":1}}],[\"356465275\",{\"1\":{\"526\":1}}],[\"351858\",{\"1\":{\"525\":1}}],[\"3579\",{\"1\":{\"525\":1}}],[\"35\",{\"1\":{\"208\":1,\"214\":2,\"233\":1,\"354\":1,\"550\":1,\"743\":1,\"1114\":2}}],[\"35z\",{\"1\":{\"7\":1}}],[\"3072\",{\"1\":{\"1114\":1}}],[\"3079766528\",{\"1\":{\"916\":1}}],[\"30258509299404568401799145468436420760110148862877297603332790\",{\"1\":{\"653\":1}}],[\"30000000000000004\",{\"1\":{\"595\":1}}],[\"30028\",{\"1\":{\"380\":1}}],[\"3087837\",{\"1\":{\"527\":1}}],[\"30ghz\",{\"1\":{\"525\":1,\"526\":3,\"588\":1}}],[\"30s\",{\"1\":{\"143\":1,\"527\":5}}],[\"30\",{\"1\":{\"124\":1,\"134\":1,\"136\":1,\"209\":1,\"226\":1,\"229\":1,\"354\":1,\"398\":1,\"406\":1,\"522\":1,\"523\":1,\"524\":1,\"527\":2,\"900\":1,\"1114\":1,\"1153\":1,\"1156\":1}}],[\"3200\",{\"1\":{\"1114\":1}}],[\"320\",{\"1\":{\"1067\":1,\"1114\":1}}],[\"32x32\",{\"1\":{\"1016\":1}}],[\"328125\",{\"1\":{\"912\":1}}],[\"324\",{\"1\":{\"652\":1}}],[\"3266862\",{\"1\":{\"559\":1}}],[\"326301\",{\"1\":{\"526\":1}}],[\"32768\",{\"1\":{\"552\":4,\"1114\":4}}],[\"32kb\",{\"1\":{\"419\":1,\"1100\":3,\"1114\":1,\"1123\":3,\"1125\":1,\"1126\":1}}],[\"32\",{\"1\":{\"93\":1,\"159\":6,\"168\":1,\"175\":10,\"316\":4,\"317\":1,\"318\":1,\"354\":1,\"380\":3,\"416\":1,\"478\":1,\"523\":2,\"524\":1,\"527\":1,\"578\":1,\"651\":2,\"698\":1,\"713\":2,\"986\":1,\"1073\":1,\"1089\":1,\"1111\":1,\"1114\":17,\"1176\":2,\"1177\":4,\"1178\":2}}],[\"3d\",{\"1\":{\"72\":1}}],[\"3gunekuexgdhopa2rfsh\",{\"1\":{\"14\":2}}],[\"3\",{\"0\":{\"134\":1,\"780\":1,\"781\":1},\"1\":{\"6\":1,\"7\":2,\"17\":2,\"18\":5,\"20\":2,\"21\":1,\"26\":1,\"27\":3,\"40\":1,\"43\":1,\"87\":2,\"90\":1,\"92\":1,\"93\":1,\"116\":1,\"133\":1,\"134\":5,\"137\":1,\"138\":1,\"140\":1,\"148\":1,\"158\":1,\"159\":1,\"164\":1,\"167\":2,\"168\":2,\"170\":1,\"171\":1,\"187\":2,\"188\":2,\"190\":4,\"195\":1,\"200\":1,\"207\":2,\"208\":1,\"209\":1,\"212\":1,\"214\":1,\"215\":2,\"242\":1,\"247\":1,\"299\":1,\"311\":1,\"325\":5,\"333\":2,\"341\":1,\"344\":2,\"354\":11,\"356\":3,\"357\":2,\"360\":4,\"362\":16,\"364\":1,\"365\":1,\"366\":4,\"367\":2,\"368\":6,\"369\":2,\"371\":11,\"372\":2,\"377\":2,\"380\":1,\"382\":1,\"383\":4,\"384\":1,\"385\":3,\"386\":2,\"392\":2,\"399\":1,\"400\":3,\"401\":1,\"402\":10,\"412\":1,\"448\":1,\"456\":1,\"462\":4,\"467\":5,\"470\":2,\"471\":2,\"472\":1,\"477\":2,\"478\":1,\"479\":5,\"480\":1,\"481\":4,\"482\":13,\"486\":2,\"499\":1,\"504\":1,\"508\":2,\"509\":4,\"510\":5,\"524\":1,\"526\":12,\"532\":1,\"538\":1,\"539\":6,\"543\":3,\"545\":1,\"546\":1,\"551\":1,\"559\":1,\"571\":1,\"572\":1,\"581\":1,\"582\":1,\"583\":1,\"585\":14,\"587\":5,\"594\":1,\"603\":2,\"606\":4,\"629\":2,\"652\":1,\"653\":1,\"662\":1,\"666\":3,\"668\":1,\"669\":1,\"684\":1,\"685\":1,\"687\":1,\"688\":1,\"689\":1,\"707\":1,\"725\":5,\"728\":2,\"732\":2,\"742\":1,\"751\":5,\"752\":2,\"753\":2,\"754\":2,\"778\":1,\"820\":1,\"838\":2,\"847\":1,\"874\":2,\"875\":2,\"888\":4,\"889\":1,\"897\":2,\"898\":1,\"911\":2,\"934\":1,\"985\":1,\"1008\":1,\"1016\":1,\"1019\":11,\"1020\":1,\"1024\":1,\"1025\":1,\"1027\":1,\"1030\":1,\"1059\":1,\"1060\":1,\"1061\":1,\"1067\":7,\"1087\":1,\"1114\":11,\"1136\":3,\"1144\":1,\"1148\":1,\"1165\":2,\"1167\":1}}],[\"版本往后\",{\"1\":{\"1144\":1}}],[\"版本引用了新的屏障机制\",{\"1\":{\"1144\":1}}],[\"版本引用了模块\",{\"1\":{\"508\":2}}],[\"版本之间\",{\"1\":{\"1130\":1}}],[\"版本以后它就已经被废弃了\",{\"1\":{\"753\":1}}],[\"版本以上的开发者\",{\"1\":{\"683\":1}}],[\"版本以上才能运行\",{\"1\":{\"116\":1}}],[\"版本时\",{\"1\":{\"599\":1}}],[\"版本更新以后\",{\"1\":{\"580\":1}}],[\"版本更新之后\",{\"1\":{\"365\":1}}],[\"版本更新之前网上大多数的文章都是这样描述\",{\"1\":{\"365\":1}}],[\"版本加入了对泛型的支持\",{\"1\":{\"570\":1}}],[\"版本加载依赖图\",{\"1\":{\"27\":1}}],[\"版本的不同\",{\"1\":{\"509\":1}}],[\"版本的详细更新日志可以前往go\",{\"1\":{\"114\":1,\"115\":1,\"116\":1,\"117\":1,\"118\":1,\"119\":1,\"120\":1,\"121\":1,\"122\":1,\"123\":1,\"124\":1,\"125\":1,\"126\":1,\"127\":1,\"128\":1,\"129\":1,\"130\":1,\"131\":1,\"132\":1,\"133\":1,\"134\":1,\"135\":1,\"136\":1,\"137\":1}}],[\"版本都同时引用了模块\",{\"1\":{\"508\":1}}],[\"版本和模块\",{\"1\":{\"508\":1}}],[\"版本选择\",{\"0\":{\"508\":1}}],[\"版本变化时\",{\"1\":{\"505\":1}}],[\"版本号必须遵循语义化规则\",{\"1\":{\"509\":1}}],[\"版本号\",{\"1\":{\"503\":1,\"509\":1,\"510\":1}}],[\"版本号为\",{\"1\":{\"240\":2}}],[\"版本控制系统\",{\"1\":{\"493\":1}}],[\"版本混乱\",{\"1\":{\"492\":1}}],[\"版本添加\",{\"1\":{\"371\":1}}],[\"版本中的最大变动就是增加了泛型\",{\"1\":{\"291\":1}}],[\"版本中\",{\"1\":{\"117\":1,\"1145\":1}}],[\"版本中所需的任何附加校验和\",{\"1\":{\"24\":1}}],[\"版本正式启用\",{\"1\":{\"116\":1}}],[\"版本已经迭代到了\",{\"1\":{\"113\":1}}],[\"版本并将其安装到本地\",{\"1\":{\"93\":1}}],[\"版本第一次推出的\",{\"1\":{\"7\":1}}],[\"版本\",{\"1\":{\"6\":2,\"24\":1,\"26\":1,\"34\":1,\"93\":1,\"110\":1,\"113\":1,\"116\":1,\"143\":1,\"332\":1,\"508\":4,\"509\":1,\"515\":1,\"934\":1,\"963\":1}}],[\"2kb\",{\"1\":{\"1095\":1,\"1100\":1,\"1101\":1}}],[\"2b\",{\"1\":{\"675\":1}}],[\"2mb\",{\"1\":{\"820\":1}}],[\"2ms\",{\"1\":{\"526\":1}}],[\"2mi\",{\"1\":{\"526\":2}}],[\"2m\",{\"1\":{\"526\":2}}],[\"2中的\",{\"1\":{\"525\":1}}],[\"2+72\",{\"1\":{\"1067\":1}}],[\"2+40\",{\"1\":{\"1038\":1}}],[\"2+incompatible\",{\"1\":{\"509\":1}}],[\"2+32\",{\"1\":{\"9\":1}}],[\"2^b\",{\"1\":{\"1030\":2}}],[\"2^9=512\",{\"1\":{\"399\":1}}],[\"2^8=256\",{\"1\":{\"399\":1}}],[\"2^7=128\",{\"1\":{\"399\":1}}],[\"2^6=64\",{\"1\":{\"399\":1}}],[\"2^5=32\",{\"1\":{\"399\":1}}],[\"2^4=16\",{\"1\":{\"399\":1}}],[\"2^3=8\",{\"1\":{\"399\":1}}],[\"2^2=4\",{\"1\":{\"399\":1}}],[\"2^1=2\",{\"1\":{\"399\":1}}],[\"2^0=1\",{\"1\":{\"399\":1}}],[\"2^\",{\"1\":{\"399\":1}}],[\"2<<7\",{\"1\":{\"341\":9}}],[\"2i\",{\"1\":{\"303\":1,\"748\":1}}],[\"296875\",{\"1\":{\"912\":1}}],[\"2961\",{\"1\":{\"526\":1}}],[\"298\",{\"1\":{\"912\":1}}],[\"298974625\",{\"1\":{\"526\":1}}],[\"29595015576324\",{\"1\":{\"911\":1}}],[\"297796\",{\"1\":{\"527\":2}}],[\"299\",{\"1\":{\"526\":1}}],[\"299637800\",{\"1\":{\"526\":1}}],[\"292320625\",{\"1\":{\"526\":1}}],[\"2925\",{\"1\":{\"526\":1}}],[\"291517150\",{\"1\":{\"526\":1}}],[\"290535650\",{\"1\":{\"526\":1}}],[\"29z\",{\"1\":{\"140\":1}}],[\"29\",{\"1\":{\"132\":2,\"138\":1,\"141\":1,\"145\":9,\"175\":11,\"525\":6,\"526\":36,\"742\":3,\"1114\":2,\"1151\":1}}],[\"24576\",{\"1\":{\"1114\":7}}],[\"2442473472\",{\"1\":{\"920\":1}}],[\"2448\",{\"1\":{\"525\":1}}],[\"249\",{\"1\":{\"912\":1}}],[\"24s\",{\"1\":{\"527\":1}}],[\"240\",{\"1\":{\"489\":1,\"1114\":1}}],[\"24\",{\"1\":{\"126\":1,\"128\":1,\"156\":1,\"158\":3,\"159\":2,\"175\":1,\"301\":5,\"341\":1,\"354\":2,\"410\":2,\"434\":1,\"448\":1,\"555\":1,\"559\":1,\"629\":1,\"676\":1,\"739\":1,\"748\":2,\"749\":1,\"750\":1,\"916\":1,\"1089\":1,\"1114\":4}}],[\"246859\",{\"1\":{\"20\":2,\"24\":2,\"27\":2,\"493\":1,\"495\":5,\"496\":2,\"497\":1,\"498\":3,\"499\":1,\"500\":5,\"507\":2,\"512\":2,\"513\":3,\"515\":1}}],[\"2304\",{\"1\":{\"1114\":1}}],[\"23734\",{\"1\":{\"1036\":1}}],[\"2371609442247427\",{\"1\":{\"672\":1}}],[\"239\",{\"1\":{\"912\":1}}],[\"2398\",{\"1\":{\"588\":1}}],[\"234\",{\"1\":{\"727\":1,\"912\":1}}],[\"2389\",{\"1\":{\"663\":2}}],[\"231\",{\"1\":{\"380\":1}}],[\"23t04\",{\"1\":{\"208\":1}}],[\"233336849z\",{\"1\":{\"205\":1}}],[\"23\",{\"0\":{\"114\":1},\"1\":{\"113\":2,\"114\":4,\"127\":1,\"130\":1,\"141\":2,\"148\":1,\"175\":1,\"341\":1,\"499\":3,\"527\":1,\"559\":1,\"580\":1,\"589\":1,\"652\":2,\"684\":1,\"685\":1,\"687\":1,\"1114\":4,\"1130\":1}}],[\"2s\",{\"1\":{\"93\":1}}],[\"2d\",{\"1\":{\"72\":2,\"76\":1,\"354\":1,\"831\":1}}],[\"2q\",{\"1\":{\"61\":1}}],[\"224\",{\"1\":{\"1114\":1}}],[\"22t164711\",{\"1\":{\"965\":1}}],[\"22210715635224\",{\"1\":{\"914\":1}}],[\"2222\",{\"1\":{\"701\":1}}],[\"22541094912\",{\"1\":{\"914\":1}}],[\"2251\",{\"1\":{\"907\":4}}],[\"22false\",{\"1\":{\"701\":1}}],[\"22k\",{\"1\":{\"526\":2}}],[\"2263\",{\"1\":{\"526\":1}}],[\"2235\",{\"1\":{\"526\":1}}],[\"228\",{\"1\":{\"380\":1}}],[\"22\",{\"0\":{\"115\":1},\"1\":{\"34\":2,\"67\":1,\"93\":17,\"113\":2,\"115\":6,\"133\":1,\"175\":1,\"216\":1,\"233\":1,\"332\":1,\"341\":4,\"382\":1,\"499\":2,\"504\":1,\"513\":1,\"515\":1,\"559\":1,\"742\":1,\"964\":1,\"965\":1,\"1114\":2,\"1115\":1}}],[\"258\",{\"1\":{\"1067\":1}}],[\"2539\",{\"1\":{\"912\":1}}],[\"2537\",{\"1\":{\"912\":1}}],[\"2523\",{\"1\":{\"912\":1}}],[\"250\",{\"1\":{\"912\":1}}],[\"2592\",{\"1\":{\"912\":1}}],[\"2595\",{\"1\":{\"912\":1}}],[\"259\",{\"1\":{\"527\":1}}],[\"2571\",{\"1\":{\"912\":1}}],[\"257\",{\"1\":{\"527\":1}}],[\"257s\",{\"1\":{\"7\":1}}],[\"251611193344\",{\"1\":{\"914\":1}}],[\"251\",{\"1\":{\"527\":1}}],[\"2518\",{\"1\":{\"143\":6}}],[\"256\",{\"1\":{\"365\":3,\"527\":1,\"862\":1,\"1025\":3,\"1088\":3,\"1114\":20,\"1128\":2}}],[\"25i\",{\"1\":{\"303\":2}}],[\"255\",{\"1\":{\"233\":2,\"539\":1}}],[\"25t17\",{\"1\":{\"141\":2}}],[\"25\",{\"1\":{\"26\":1,\"29\":2,\"123\":1,\"125\":1,\"132\":2,\"137\":2,\"158\":3,\"159\":2,\"175\":1,\"200\":2,\"209\":1,\"302\":2,\"324\":1,\"325\":2,\"331\":2,\"354\":1,\"365\":1,\"388\":1,\"398\":1,\"406\":1,\"521\":3,\"526\":1,\"559\":1,\"741\":2,\"742\":3,\"743\":2,\"856\":2,\"912\":1,\"1025\":2,\"1114\":4,\"1138\":1}}],[\"2688\",{\"1\":{\"1114\":1}}],[\"2621\",{\"1\":{\"912\":1}}],[\"262\",{\"1\":{\"912\":1}}],[\"267\",{\"1\":{\"527\":2,\"603\":1}}],[\"265\",{\"1\":{\"527\":1}}],[\"264\",{\"1\":{\"527\":1}}],[\"263\",{\"1\":{\"527\":1}}],[\"2612\",{\"1\":{\"526\":1}}],[\"26\",{\"1\":{\"20\":1,\"155\":2,\"158\":3,\"159\":14,\"174\":1,\"175\":1,\"209\":1,\"216\":1,\"526\":1,\"559\":1,\"660\":1,\"1114\":1}}],[\"2669\",{\"1\":{\"912\":1}}],[\"266\",{\"1\":{\"7\":2,\"527\":2}}],[\"288\",{\"1\":{\"1067\":1,\"1114\":2}}],[\"28125\",{\"1\":{\"912\":1}}],[\"281901975\",{\"1\":{\"526\":1}}],[\"28672\",{\"1\":{\"1114\":1}}],[\"286723000\",{\"1\":{\"526\":1}}],[\"286\",{\"1\":{\"526\":1}}],[\"285074900\",{\"1\":{\"526\":1}}],[\"2848\",{\"1\":{\"526\":1}}],[\"28\",{\"1\":{\"17\":1,\"37\":1,\"137\":1,\"138\":1,\"148\":1,\"158\":22,\"175\":1,\"354\":1,\"398\":1,\"503\":2,\"509\":1,\"559\":1,\"1114\":3}}],[\"274152288256\",{\"1\":{\"914\":1}}],[\"2748i\",{\"1\":{\"303\":1}}],[\"271\",{\"1\":{\"912\":1}}],[\"2713\",{\"1\":{\"820\":1}}],[\"2714\",{\"1\":{\"526\":1}}],[\"27201964951406896425242246173749149171560804184009624861664038\",{\"1\":{\"653\":1}}],[\"27264\",{\"1\":{\"1114\":1}}],[\"2726\",{\"1\":{\"526\":1}}],[\"27pm\",{\"1\":{\"559\":1}}],[\"27s\",{\"1\":{\"527\":1}}],[\"276487000\",{\"1\":{\"526\":1}}],[\"278500125\",{\"1\":{\"525\":1}}],[\"277771375\",{\"1\":{\"525\":1}}],[\"27017\",{\"1\":{\"221\":1}}],[\"27\",{\"1\":{\"17\":1,\"158\":3,\"166\":18,\"175\":1,\"354\":1,\"499\":1,\"559\":2,\"666\":1,\"668\":1,\"1114\":1}}],[\"2\",{\"0\":{\"135\":1},\"1\":{\"6\":10,\"9\":1,\"17\":5,\"20\":1,\"26\":2,\"27\":1,\"38\":1,\"45\":1,\"93\":1,\"114\":1,\"116\":1,\"117\":1,\"131\":1,\"135\":6,\"136\":1,\"137\":1,\"140\":2,\"141\":3,\"143\":4,\"144\":10,\"145\":2,\"147\":1,\"158\":1,\"159\":1,\"164\":1,\"166\":2,\"167\":4,\"168\":3,\"181\":1,\"182\":1,\"187\":1,\"188\":2,\"190\":4,\"191\":4,\"194\":1,\"195\":1,\"207\":2,\"208\":1,\"209\":1,\"214\":1,\"215\":1,\"247\":1,\"248\":2,\"273\":1,\"276\":1,\"278\":1,\"280\":3,\"281\":1,\"282\":2,\"299\":3,\"301\":2,\"302\":5,\"303\":2,\"311\":2,\"324\":1,\"325\":4,\"329\":3,\"331\":1,\"332\":4,\"333\":4,\"341\":1,\"344\":2,\"348\":3,\"350\":2,\"351\":1,\"354\":13,\"356\":3,\"357\":2,\"360\":4,\"362\":14,\"364\":1,\"365\":3,\"366\":4,\"367\":3,\"368\":6,\"369\":2,\"371\":6,\"372\":2,\"375\":1,\"382\":1,\"383\":3,\"384\":2,\"385\":3,\"386\":2,\"387\":2,\"391\":2,\"392\":3,\"398\":1,\"399\":4,\"400\":4,\"401\":1,\"402\":7,\"410\":1,\"412\":2,\"413\":4,\"414\":7,\"445\":1,\"448\":1,\"456\":1,\"462\":2,\"467\":5,\"470\":2,\"471\":4,\"472\":4,\"476\":11,\"479\":3,\"480\":1,\"481\":1,\"482\":1,\"486\":2,\"499\":1,\"503\":8,\"504\":4,\"508\":8,\"509\":8,\"521\":1,\"524\":1,\"525\":8,\"526\":44,\"527\":6,\"531\":1,\"532\":1,\"533\":1,\"539\":7,\"545\":1,\"546\":1,\"547\":3,\"550\":9,\"551\":1,\"556\":1,\"568\":3,\"571\":1,\"572\":1,\"574\":2,\"581\":3,\"582\":3,\"583\":1,\"585\":15,\"587\":6,\"588\":1,\"593\":1,\"594\":1,\"595\":1,\"597\":1,\"606\":8,\"629\":1,\"653\":2,\"654\":2,\"655\":1,\"657\":1,\"658\":1,\"660\":2,\"661\":2,\"662\":1,\"664\":2,\"665\":1,\"666\":1,\"667\":1,\"668\":1,\"669\":2,\"672\":1,\"676\":1,\"677\":1,\"684\":1,\"685\":1,\"687\":1,\"688\":1,\"689\":1,\"697\":2,\"700\":4,\"701\":1,\"707\":2,\"716\":2,\"725\":6,\"728\":9,\"729\":1,\"732\":3,\"733\":2,\"739\":1,\"743\":1,\"751\":3,\"752\":2,\"753\":2,\"754\":4,\"763\":1,\"778\":1,\"781\":1,\"794\":1,\"820\":3,\"841\":1,\"874\":2,\"875\":4,\"877\":1,\"884\":1,\"885\":1,\"886\":2,\"887\":4,\"888\":11,\"889\":1,\"895\":1,\"896\":1,\"897\":1,\"898\":2,\"899\":1,\"911\":2,\"912\":3,\"934\":6,\"944\":2,\"945\":1,\"1009\":3,\"1016\":1,\"1019\":14,\"1020\":1,\"1021\":1,\"1024\":2,\"1025\":1,\"1027\":1,\"1030\":3,\"1042\":1,\"1059\":2,\"1060\":2,\"1063\":1,\"1065\":1,\"1067\":9,\"1074\":1,\"1079\":1,\"1083\":1,\"1101\":1,\"1102\":2,\"1104\":2,\"1107\":1,\"1114\":6,\"1117\":2,\"1120\":1,\"1124\":2,\"1132\":1,\"1144\":2,\"1148\":1}}],[\"208\",{\"1\":{\"1114\":1}}],[\"20时\",{\"1\":{\"1054\":1}}],[\"209\",{\"1\":{\"916\":1}}],[\"20mb\",{\"1\":{\"820\":1}}],[\"20+6\",{\"1\":{\"348\":1}}],[\"20480\",{\"1\":{\"1114\":1}}],[\"2048\",{\"1\":{\"302\":1,\"728\":2,\"785\":1,\"1114\":6}}],[\"2047\",{\"1\":{\"187\":1}}],[\"20d25e280405\",{\"1\":{\"28\":1}}],[\"201\",{\"1\":{\"212\":1}}],[\"2011\",{\"1\":{\"138\":5}}],[\"2013\",{\"1\":{\"135\":1,\"136\":2}}],[\"2014\",{\"1\":{\"133\":1,\"134\":2,\"135\":1}}],[\"2017\",{\"1\":{\"128\":1,\"129\":1,\"130\":1}}],[\"20170810143723\",{\"1\":{\"20\":1,\"27\":1}}],[\"2019\",{\"1\":{\"124\":1,\"125\":1,\"126\":1,\"127\":1}}],[\"20190422233926\",{\"1\":{\"6\":1}}],[\"2016\",{\"1\":{\"116\":1,\"130\":1,\"131\":2,\"132\":1,\"588\":1,\"1071\":1}}],[\"20161208181325\",{\"1\":{\"28\":1}}],[\"20180228061459\",{\"1\":{\"503\":2,\"509\":1}}],[\"2018\",{\"1\":{\"113\":1,\"126\":1,\"127\":1,\"128\":1,\"129\":1}}],[\"2015\",{\"1\":{\"88\":1,\"132\":1,\"133\":1}}],[\"2012\",{\"1\":{\"87\":1,\"88\":1,\"137\":1,\"138\":1,\"571\":1,\"740\":2}}],[\"2006\",{\"1\":{\"739\":3,\"740\":1,\"840\":1}}],[\"20065\",{\"1\":{\"112\":1}}],[\"2001\",{\"1\":{\"677\":1}}],[\"20051\",{\"1\":{\"341\":1}}],[\"20050\",{\"1\":{\"341\":1}}],[\"2008\",{\"1\":{\"180\":1,\"629\":1}}],[\"2009\",{\"1\":{\"87\":2,\"138\":1,\"288\":1}}],[\"2007\",{\"1\":{\"87\":1}}],[\"200\",{\"1\":{\"7\":9,\"19\":2,\"25\":1,\"116\":1,\"205\":2,\"207\":1,\"208\":1,\"209\":1,\"210\":1,\"213\":1,\"214\":1,\"215\":1,\"477\":4,\"478\":1,\"795\":1,\"965\":2,\"982\":1,\"993\":1,\"994\":1,\"1003\":1,\"1007\":1,\"1011\":2,\"1013\":3,\"1082\":1}}],[\"20210923205945\",{\"1\":{\"503\":2,\"509\":1}}],[\"20210227002040\",{\"1\":{\"20\":1,\"27\":1}}],[\"2021\",{\"1\":{\"120\":1,\"121\":1,\"122\":1,\"123\":1}}],[\"2024\",{\"1\":{\"87\":1,\"113\":4,\"114\":2,\"115\":2,\"116\":1,\"117\":1,\"205\":1,\"208\":1,\"559\":1,\"561\":3}}],[\"2020\",{\"1\":{\"67\":1,\"122\":1,\"123\":1,\"124\":1,\"125\":1,\"678\":1,\"679\":1}}],[\"20231101134539\",{\"1\":{\"504\":1}}],[\"20231231155935\",{\"1\":{\"504\":1}}],[\"20230224173230\",{\"1\":{\"504\":1}}],[\"20230829180723\",{\"1\":{\"504\":1}}],[\"20230301143203\",{\"1\":{\"27\":1}}],[\"20230725082712\",{\"1\":{\"20\":1,\"27\":1}}],[\"2023\",{\"1\":{\"7\":1,\"116\":1,\"117\":1,\"118\":1,\"119\":1,\"140\":1,\"141\":3,\"145\":9,\"155\":2,\"158\":18,\"159\":31,\"166\":18,\"167\":9,\"174\":1,\"175\":10,\"741\":1,\"742\":3,\"743\":2,\"784\":3,\"824\":1,\"840\":2,\"843\":1,\"856\":2}}],[\"20221115062448\",{\"1\":{\"503\":2,\"509\":2}}],[\"2022\",{\"1\":{\"0\":2,\"118\":1,\"119\":1,\"120\":1,\"121\":1,\"571\":1,\"737\":1,\"739\":2,\"965\":2,\"982\":3,\"986\":2,\"993\":1,\"994\":1,\"1008\":1}}],[\"20\",{\"0\":{\"117\":1},\"1\":{\"6\":10,\"8\":1,\"28\":1,\"87\":2,\"92\":1,\"116\":1,\"117\":9,\"166\":20,\"167\":2,\"175\":1,\"226\":1,\"229\":1,\"233\":1,\"294\":1,\"301\":1,\"341\":1,\"348\":1,\"354\":3,\"380\":3,\"478\":1,\"492\":1,\"503\":1,\"505\":3,\"509\":2,\"526\":1,\"527\":1,\"533\":1,\"606\":1,\"618\":1,\"670\":1,\"671\":1,\"672\":1,\"721\":2,\"742\":1,\"753\":1,\"824\":1,\"840\":1,\"895\":2,\"899\":1,\"986\":1,\"998\":1,\"1014\":1,\"1021\":1,\"1026\":1,\"1082\":1,\"1114\":1,\"1138\":1}}],[\"21已经被废弃了\",{\"1\":{\"1052\":1}}],[\"21版本中\",{\"1\":{\"1040\":1}}],[\"21官方才终于决定要打算解决\",{\"1\":{\"1028\":1}}],[\"21中\",{\"1\":{\"1027\":1}}],[\"21中不再允许panic\",{\"1\":{\"7\":1}}],[\"2141\",{\"1\":{\"932\":1}}],[\"21s\",{\"1\":{\"527\":1}}],[\"219\",{\"1\":{\"527\":5}}],[\"21760\",{\"1\":{\"1114\":1}}],[\"217\",{\"1\":{\"527\":2}}],[\"2174\",{\"1\":{\"525\":1}}],[\"2164\",{\"1\":{\"526\":1}}],[\"21\",{\"0\":{\"116\":1},\"1\":{\"6\":5,\"7\":2,\"14\":1,\"18\":6,\"21\":1,\"26\":1,\"27\":1,\"40\":1,\"42\":1,\"90\":1,\"91\":3,\"92\":1,\"110\":3,\"113\":1,\"116\":8,\"141\":1,\"145\":8,\"167\":9,\"175\":1,\"332\":1,\"341\":1,\"354\":1,\"372\":1,\"377\":1,\"380\":3,\"387\":2,\"399\":1,\"499\":3,\"525\":1,\"559\":1,\"583\":1,\"603\":2,\"616\":1,\"683\":1,\"741\":1,\"742\":4,\"743\":2,\"982\":3,\"986\":2,\"993\":1,\"994\":1,\"1008\":1,\"1114\":3}}],[\"方\",{\"0\":{\"669\":1}}],[\"方案\",{\"1\":{\"138\":1}}],[\"方式返回结果\",{\"1\":{\"112\":1}}],[\"方式进行处理\",{\"1\":{\"12\":1}}],[\"方法其实就是add\",{\"1\":{\"1177\":1}}],[\"方法被并发地调用\",{\"1\":{\"1177\":1}}],[\"方法被调用的时机\",{\"1\":{\"165\":1}}],[\"方法释放信号量\",{\"1\":{\"1176\":1}}],[\"方法尝试获取信号量\",{\"1\":{\"1176\":1}}],[\"方法来关闭多个对象\",{\"1\":{\"1069\":1}}],[\"方法来进行数据响应\",{\"1\":{\"981\":1}}],[\"方法来进行迁移\",{\"1\":{\"864\":1}}],[\"方法中\",{\"1\":{\"995\":1}}],[\"方法即可\",{\"1\":{\"991\":1}}],[\"方法与add\",{\"1\":{\"1177\":1}}],[\"方法与上例一致\",{\"1\":{\"988\":1}}],[\"方法与函数的区别在于\",{\"1\":{\"412\":1}}],[\"方法绑定数据\",{\"1\":{\"975\":1}}],[\"方法列表中涉及到了数据库\",{\"1\":{\"863\":1}}],[\"方法是不能拥有泛型形参的\",{\"1\":{\"573\":1}}],[\"方法返回值\",{\"1\":{\"451\":2}}],[\"方法返回它负责解析的\",{\"1\":{\"174\":1}}],[\"方法参数\",{\"1\":{\"451\":2}}],[\"方法对应的函数\",{\"1\":{\"451\":1}}],[\"方法类型\",{\"1\":{\"451\":1}}],[\"方法集是接口方法集的超集\",{\"1\":{\"567\":1}}],[\"方法集就是一组方法的集合\",{\"1\":{\"563\":1}}],[\"方法集\",{\"1\":{\"428\":1}}],[\"方法集等\",{\"1\":{\"428\":1}}],[\"方法在被调用时\",{\"1\":{\"413\":1}}],[\"方法的返回值来自于一个其内部的map\",{\"1\":{\"432\":1}}],[\"方法的接收者是\",{\"1\":{\"414\":1}}],[\"方法的使用就类似于调用一个类的成员方法\",{\"1\":{\"412\":1}}],[\"方法的长相与函数并无太大的区别\",{\"1\":{\"412\":1}}],[\"方法拥有接收者\",{\"1\":{\"412\":1}}],[\"方法\",{\"0\":{\"412\":1},\"1\":{\"432\":1,\"433\":1,\"523\":1,\"601\":1,\"645\":1,\"649\":1,\"758\":1,\"995\":1}}],[\"方法可以获取反射值原有的值\",{\"1\":{\"443\":1}}],[\"方法可以获取到其中的\",{\"1\":{\"168\":1}}],[\"方法可以作为一个值存在\",{\"1\":{\"136\":1}}],[\"方法名\",{\"1\":{\"166\":3,\"451\":1}}],[\"方法并获取结果\",{\"1\":{\"155\":1}}],[\"方法携带\",{\"1\":{\"112\":1}}],[\"方法甚至结构体字段的文档注释\",{\"1\":{\"4\":1}}],[\"方便管理\",{\"1\":{\"1130\":1}}],[\"方便管理项目的配置文件\",{\"1\":{\"788\":1}}],[\"方便系统调用返回后恢复\",{\"1\":{\"1097\":1}}],[\"方便在后面进行理解\",{\"1\":{\"1085\":1}}],[\"方便后面进行key的内存复制\",{\"1\":{\"1038\":1}}],[\"方便后续浏览\",{\"1\":{\"50\":1}}],[\"方便自动生成代码\",{\"1\":{\"1016\":1}}],[\"方便导出和导入\",{\"1\":{\"1009\":1}}],[\"方便它们在运行时调用\",{\"1\":{\"534\":1}}],[\"方便\",{\"1\":{\"7\":1}}],[\"方便你反馈\",{\"1\":{\"5\":1}}],[\"以至于在标准库中它的代码非常简短\",{\"1\":{\"1166\":1}}],[\"以阻塞的方式获取锁\",{\"1\":{\"1152\":1}}],[\"以单向链表的形式存在\",{\"1\":{\"1112\":1}}],[\"以执行用户代码\",{\"1\":{\"1104\":1}}],[\"以nsends来区分\",{\"1\":{\"1067\":1}}],[\"以如下的形式被调用\",{\"1\":{\"1042\":1}}],[\"以二进制流传输文件\",{\"1\":{\"986\":1}}],[\"以此来判断客户端是否在流中间断开\",{\"1\":{\"981\":1}}],[\"以此换来了更好的维护性和平滑的学习曲线\",{\"1\":{\"88\":1}}],[\"以一种高效的方式将fs中的文件流写入响应流\",{\"1\":{\"981\":2}}],[\"以一个过来人的角度想\",{\"1\":{\"0\":1}}],[\"以美化了的缩进json字符串进行数据渲染\",{\"1\":{\"981\":1}}],[\"以字母l结尾\",{\"1\":{\"945\":1}}],[\"以字节为单位返回变量x的大小\",{\"1\":{\"748\":1}}],[\"以市结尾\",{\"1\":{\"942\":1,\"952\":3}}],[\"以指定的精度除法\",{\"1\":{\"845\":1}}],[\"以指针为例子\",{\"1\":{\"440\":1}}],[\"以编程的方式与docker进行交互\",{\"1\":{\"800\":1}}],[\"以防出现误解析\",{\"1\":{\"796\":1}}],[\"以防止协议消息类型之间的名称冲突\",{\"1\":{\"192\":1}}],[\"以空格为分隔符\",{\"1\":{\"728\":1}}],[\"以获得更详细的错误细节\",{\"1\":{\"603\":1}}],[\"以满足不同的错误需求\",{\"1\":{\"601\":1}}],[\"以下划线分隔\",{\"1\":{\"853\":1}}],[\"以下是访问配置的全部函数\",{\"1\":{\"791\":1}}],[\"以下为对比表格\",{\"1\":{\"617\":1}}],[\"以下示例中\",{\"1\":{\"575\":1}}],[\"以下两种写法都是错误的\",{\"1\":{\"575\":1}}],[\"以下两种写法都将无法通过编译\",{\"1\":{\"573\":1}}],[\"以下写法是错误的\",{\"1\":{\"573\":1}}],[\"以下几种情况还会导致panic\",{\"1\":{\"468\":1}}],[\"以下几种情况使用不当会导致管道阻塞\",{\"1\":{\"468\":1}}],[\"以后\",{\"1\":{\"530\":1,\"574\":1,\"741\":1}}],[\"以后编译时间是要比纯\",{\"1\":{\"530\":1}}],[\"以后有时间一起约\",{\"1\":{\"158\":4}}],[\"以表示输出结果是上一次的缓存\",{\"1\":{\"518\":1}}],[\"以string为例\",{\"1\":{\"454\":1}}],[\"以同步io的方式打开文件\",{\"1\":{\"416\":1}}],[\"以读写的模式打开文件\",{\"1\":{\"416\":1}}],[\"以只写的方式打开副本文件\",{\"1\":{\"419\":2}}],[\"以只写的模式打开文件\",{\"1\":{\"416\":1}}],[\"以只读的方式打开原文件\",{\"1\":{\"419\":2}}],[\"以只读的模式打开文件\",{\"1\":{\"416\":1}}],[\"以减少扩容次数\",{\"1\":{\"382\":1}}],[\"以上的大对象所使用的spanclass\",{\"1\":{\"1114\":1}}],[\"以上的版本\",{\"1\":{\"804\":1}}],[\"以上的信息大致就是\",{\"1\":{\"772\":1}}],[\"以上就是模块开发的一个基本流程\",{\"1\":{\"499\":1}}],[\"以上就是一个简单的语法介绍\",{\"1\":{\"292\":1}}],[\"以上就是一个简单的使用\",{\"1\":{\"145\":1}}],[\"以上三种开启协程的方式都是可以的\",{\"1\":{\"462\":1}}],[\"以上两种拼接方式性能都很差\",{\"1\":{\"379\":1}}],[\"以上几种方式都会给nums分配一片固定大小的内存\",{\"1\":{\"360\":1}}],[\"以供参考\",{\"1\":{\"314\":1}}],[\"以grpc\",{\"1\":{\"160\":1}}],[\"以便让该协程在日后能够正常恢复\",{\"1\":{\"1107\":1}}],[\"以便重新加入调度\",{\"1\":{\"1060\":1}}],[\"以便重新参与调度\",{\"1\":{\"1059\":1}}],[\"以便观测结果\",{\"1\":{\"996\":1}}],[\"以便在发生时自动调用\",{\"1\":{\"990\":1}}],[\"以便在全局可以执行该二进制文件\",{\"1\":{\"504\":1}}],[\"以便路由未找到时自动调用\",{\"1\":{\"989\":1}}],[\"以便更好的与客户或者前端进行对接\",{\"1\":{\"952\":1}}],[\"以便更容易的定义对于结构体的验证\",{\"1\":{\"927\":1}}],[\"以便每次发生变化时运行该函数\",{\"1\":{\"793\":1}}],[\"以便输出不同的样式\",{\"1\":{\"698\":1}}],[\"以便可以使用protoc命令\",{\"1\":{\"200\":1}}],[\"以便各位可以按需阅读\",{\"1\":{\"96\":1}}],[\"以便成功加载模块图\",{\"1\":{\"24\":1}}],[\"以pkg\",{\"1\":{\"38\":1}}],[\"以json格式输出\",{\"1\":{\"34\":1}}],[\"以\",{\"1\":{\"26\":1,\"37\":1,\"519\":1,\"763\":1,\"770\":1,\"908\":1}}],[\"以键值对的形式控制\",{\"1\":{\"7\":1}}],[\"以及这是第几轮\",{\"1\":{\"1132\":1}}],[\"以及一个布尔值用于表示是否需要清空内存\",{\"1\":{\"1123\":1}}],[\"以及一些编译参数\",{\"1\":{\"6\":1}}],[\"以及所有mcentral的初始化\",{\"1\":{\"1119\":1}}],[\"以及所有的heaparena\",{\"1\":{\"1118\":1}}],[\"以及所有定义的类型\",{\"1\":{\"293\":1,\"294\":1}}],[\"以及溢出新旧桶的引用\",{\"1\":{\"1042\":1}}],[\"以及退出的策略\",{\"1\":{\"1037\":1}}],[\"以及预先分配空闲的溢出桶\",{\"1\":{\"1034\":1}}],[\"以及要拷贝的长度width\",{\"1\":{\"1026\":1}}],[\"以及容量和长度的记录\",{\"1\":{\"1019\":1}}],[\"以及它内部是如何运作的\",{\"1\":{\"1018\":1}}],[\"以及它们的帮助文档信息\",{\"1\":{\"4\":1}}],[\"以及两个时间追踪字段\",{\"1\":{\"857\":1}}],[\"以及单位大小\",{\"1\":{\"820\":1}}],[\"以及其长度偏移量\",{\"1\":{\"756\":1}}],[\"以及长度偏移量\",{\"1\":{\"754\":1}}],[\"以及channel\",{\"1\":{\"732\":1}}],[\"以及泛型解决了哪种问题有了一个大概的了解\",{\"1\":{\"571\":1}}],[\"以及总体的耗时\",{\"1\":{\"518\":1}}],[\"以及io包下的readall函数\",{\"1\":{\"417\":1}}],[\"以及许多在线教程\",{\"1\":{\"286\":1}}],[\"以及未来的发展趋势等等\",{\"1\":{\"285\":1}}],[\"以及向领导者和其他数据中心转发查询\",{\"1\":{\"142\":1}}],[\"以及网络编程\",{\"1\":{\"88\":1}}],[\"以及\",{\"1\":{\"61\":1,\"1038\":1,\"1091\":1}}],[\"以及指定要使用的工具链\",{\"1\":{\"34\":1}}],[\"以及会下载哪些了被引用但是不存在的依赖项\",{\"1\":{\"24\":1}}],[\"以及设置package\",{\"1\":{\"20\":1}}],[\"以及用于存放go\",{\"1\":{\"7\":1}}],[\"的利用率就需要开启一个fractionalmode的处理器\",{\"1\":{\"1138\":1}}],[\"的新引用\",{\"1\":{\"1136\":1}}],[\"的新分支并维护\",{\"1\":{\"62\":1}}],[\"的设计理念和改进\",{\"1\":{\"1132\":1}}],[\"的设计者所希望看到的\",{\"1\":{\"1071\":1}}],[\"的垃圾回收机制十分简陋\",{\"1\":{\"1130\":1}}],[\"的目的就是计算尾随零的数量\",{\"1\":{\"1125\":1}}],[\"的目标文件最终链接成一个可执行文件\",{\"1\":{\"546\":1}}],[\"的非指针微对象会由\",{\"1\":{\"1124\":1}}],[\"的范围分成了\",{\"1\":{\"1123\":1}}],[\"的缓存是空的话\",{\"1\":{\"1120\":1}}],[\"的堆内存实际上是由若干个不同固定大小的mspan组成\",{\"1\":{\"1114\":1}}],[\"的堆内存\",{\"1\":{\"1113\":1}}],[\"的调步算法\",{\"1\":{\"1132\":1}}],[\"的调度器力求对使用者屏蔽大部分细节\",{\"1\":{\"1106\":1}}],[\"的调用才是关键\",{\"1\":{\"995\":1}}],[\"的调用者就是那个尝试插队的人\",{\"1\":{\"1152\":1}}],[\"的调用者\",{\"1\":{\"829\":1}}],[\"的调用方式有两大类\",{\"1\":{\"157\":1}}],[\"的调用性能\",{\"1\":{\"116\":1}}],[\"的来源根据优先级来分有四个\",{\"1\":{\"1104\":1}}],[\"的curg\",{\"1\":{\"1104\":1}}],[\"的阻塞原因\",{\"1\":{\"1098\":1}}],[\"的锁\",{\"1\":{\"1097\":1,\"1098\":1}}],[\"的执行\",{\"1\":{\"1097\":1}}],[\"的执行权将被其它的\",{\"1\":{\"1097\":1}}],[\"的执行权让给其它的\",{\"1\":{\"1096\":1}}],[\"的执行速度可能会快于子协程的执行速度\",{\"1\":{\"606\":1}}],[\"的本地队列偷\",{\"1\":{\"1104\":1}}],[\"的本地队列\",{\"1\":{\"1104\":2}}],[\"的本地队列中的\",{\"1\":{\"1104\":1}}],[\"的本地队列中等待日后被调度\",{\"1\":{\"1098\":1}}],[\"的本地队列中\",{\"1\":{\"1095\":1,\"1104\":1}}],[\"的本地空闲列表中\",{\"1\":{\"1096\":1}}],[\"的本地gfree列表中寻找空闲的\",{\"1\":{\"1095\":1}}],[\"的资源\",{\"1\":{\"1092\":1}}],[\"的创建是由函数runtime\",{\"1\":{\"1091\":1}}],[\"的创建与签名\",{\"0\":{\"779\":1},\"1\":{\"778\":1}}],[\"的栈空间字段\",{\"1\":{\"1101\":1}}],[\"的栈空间\",{\"1\":{\"1095\":1}}],[\"的栈空间是会动态调整的\",{\"1\":{\"543\":1}}],[\"的栈边界\",{\"1\":{\"1089\":1,\"1091\":1}}],[\"的关联\",{\"1\":{\"1089\":1}}],[\"的全局切片\",{\"1\":{\"1089\":1}}],[\"的状态切换为\",{\"1\":{\"1098\":2}}],[\"的状态最终有两种结果\",{\"1\":{\"1097\":1}}],[\"的状态是否为\",{\"1\":{\"1097\":1}}],[\"的状态变为\",{\"1\":{\"1097\":1}}],[\"的状态由\",{\"1\":{\"1097\":1,\"1101\":2}}],[\"的状态为\",{\"1\":{\"1095\":2,\"1102\":1,\"1104\":1}}],[\"的状态\",{\"1\":{\"1088\":1,\"1137\":1}}],[\"的状态值\",{\"1\":{\"1086\":1}}],[\"的唯一标识符\",{\"1\":{\"1087\":1,\"1088\":1,\"1095\":1}}],[\"的协程\",{\"1\":{\"1086\":1}}],[\"的性能\",{\"1\":{\"1085\":2}}],[\"的性能严重下降\",{\"1\":{\"1042\":1}}],[\"的论文\",{\"1\":{\"1084\":1}}],[\"的日常开发中是一个出现频率非常高的关键字\",{\"1\":{\"1072\":1}}],[\"的初学者而言\",{\"1\":{\"1071\":1}}],[\"的初始化有两种方式\",{\"1\":{\"1034\":1}}],[\"的简化版\",{\"1\":{\"1069\":1}}],[\"的简洁哲学\",{\"1\":{\"589\":1}}],[\"的总数\",{\"1\":{\"1067\":2}}],[\"的身影几乎随处可见\",{\"1\":{\"1056\":1}}],[\"的特殊情况\",{\"1\":{\"1054\":1}}],[\"的阈值条件是m\",{\"1\":{\"1046\":1}}],[\"的查找性能就会越好\",{\"1\":{\"1042\":1}}],[\"的定义是\",{\"1\":{\"1041\":1}}],[\"的定义可以前往参考手册\",{\"1\":{\"595\":1}}],[\"的元素\",{\"1\":{\"1039\":2}}],[\"的元素而言\",{\"1\":{\"1030\":1}}],[\"的位置\",{\"1\":{\"1038\":1}}],[\"的操作是安全的\",{\"1\":{\"1165\":1}}],[\"的操作\",{\"1\":{\"1038\":1}}],[\"的扩容已经完成了\",{\"1\":{\"1042\":1}}],[\"的扩容\",{\"1\":{\"1037\":1}}],[\"的扩容策略变为了\",{\"1\":{\"365\":1}}],[\"的扩容策略的\",{\"1\":{\"365\":1}}],[\"的tophash\",{\"1\":{\"1036\":1}}],[\"的大部分资源都被剥夺\",{\"1\":{\"1088\":1}}],[\"的大小\",{\"1\":{\"1036\":1}}],[\"的大致结构\",{\"1\":{\"1032\":1}}],[\"的哈希值\",{\"1\":{\"1036\":1,\"1038\":1,\"1039\":1}}],[\"的标志位\",{\"1\":{\"1030\":1}}],[\"的整数次方\",{\"1\":{\"1025\":1}}],[\"的整型数组\",{\"1\":{\"320\":1,\"360\":1}}],[\"的切片\",{\"1\":{\"1025\":2}}],[\"的接口描述文件的\",{\"1\":{\"1017\":1}}],[\"的通用信息注释写在main\",{\"1\":{\"1016\":1}}],[\"的话则表明没有空闲的内存可以使用\",{\"1\":{\"1125\":1}}],[\"的话表示这片内存是空闲的\",{\"1\":{\"1125\":1}}],[\"的话\",{\"1\":{\"1015\":1}}],[\"的话可能会导致一些错误\",{\"1\":{\"160\":1}}],[\"的静态文件库\",{\"1\":{\"1010\":1}}],[\"的拓展性很高\",{\"1\":{\"1005\":1}}],[\"的拓展来进行自定义实现\",{\"1\":{\"174\":1}}],[\"的逻辑核数\",{\"1\":{\"1089\":1}}],[\"的逻辑都大致理清楚了\",{\"1\":{\"1067\":1}}],[\"的逻辑\",{\"1\":{\"995\":1}}],[\"的源代码\",{\"1\":{\"992\":1}}],[\"的源码包\",{\"1\":{\"132\":1}}],[\"的校验\",{\"1\":{\"977\":1}}],[\"的自动响应并设置一些响应头来适配\",{\"1\":{\"958\":1}}],[\"的匹配情况\",{\"1\":{\"956\":1}}],[\"的路由组件采用的是httprouter\",{\"1\":{\"954\":1}}],[\"的翻译模板\",{\"1\":{\"952\":1}}],[\"的错误提示信息\",{\"1\":{\"952\":1}}],[\"的错误处理\",{\"1\":{\"598\":1}}],[\"的错误处理的优点有几个\",{\"1\":{\"598\":1}}],[\"的分支\",{\"1\":{\"1064\":1}}],[\"的分解\",{\"1\":{\"907\":1}}],[\"的分布式数据库\",{\"1\":{\"614\":1}}],[\"的驱动cengsin\",{\"1\":{\"851\":1}}],[\"的驱动有很多\",{\"1\":{\"240\":1}}],[\"的预检请求\",{\"1\":{\"958\":1}}],[\"的预加载\",{\"1\":{\"849\":1}}],[\"的预览版本\",{\"1\":{\"117\":1}}],[\"的配置也支持通过配置文件反序列化\",{\"1\":{\"839\":1}}],[\"的入参最好不要类型重复\",{\"1\":{\"830\":1}}],[\"的入门难度不算高\",{\"1\":{\"285\":1}}],[\"的理念\",{\"1\":{\"823\":1}}],[\"的理念便是\",{\"1\":{\"395\":1}}],[\"的返回值构建一个指定类型的结构体\",{\"1\":{\"828\":1}}],[\"的返回值有如下规定\",{\"1\":{\"823\":1}}],[\"的返回值来决定是否分割字符串\",{\"1\":{\"710\":1}}],[\"的复制依赖于反射\",{\"1\":{\"810\":1}}],[\"的签名由开发者来定义\",{\"1\":{\"823\":1}}],[\"的签名与解析\",{\"0\":{\"785\":1}}],[\"的签发者进行验证\",{\"1\":{\"774\":1}}],[\"的安全性就毫无意义\",{\"1\":{\"777\":1}}],[\"的内置函数\",{\"1\":{\"1077\":1}}],[\"的内容\",{\"1\":{\"848\":1,\"1004\":1}}],[\"的内容有任何变化\",{\"1\":{\"774\":1}}],[\"的内存利用率低\",{\"1\":{\"1032\":1}}],[\"的内存\",{\"1\":{\"543\":1}}],[\"的内存管理是非常稳定的\",{\"1\":{\"543\":1}}],[\"的第二部分\",{\"1\":{\"773\":1}}],[\"的第二部分是载荷部分\",{\"1\":{\"773\":1}}],[\"的头部\",{\"1\":{\"772\":1}}],[\"的详细介绍可以在\",{\"1\":{\"770\":1}}],[\"的区别在于\",{\"1\":{\"742\":1}}],[\"的诞生的时间是\",{\"1\":{\"739\":1}}],[\"的应该都知道管道运算符|\",{\"1\":{\"729\":1}}],[\"的字符串元素组成的字符串切片\",{\"1\":{\"716\":2}}],[\"的替换部分\",{\"1\":{\"715\":1}}],[\"的替代方案\",{\"1\":{\"28\":1}}],[\"的所有资源\",{\"1\":{\"1089\":1}}],[\"的所有操作\",{\"1\":{\"1050\":1}}],[\"的所有字符\",{\"1\":{\"713\":1}}],[\"的所有子命令\",{\"1\":{\"4\":1}}],[\"的副本\",{\"1\":{\"713\":1}}],[\"的指针\",{\"1\":{\"1045\":1}}],[\"的指数\",{\"0\":{\"665\":1}}],[\"的指令是以硬编码的形式存在于源文件中的\",{\"1\":{\"39\":1}}],[\"的序列化与反序列化\",{\"1\":{\"624\":1}}],[\"的参数是nil\",{\"1\":{\"607\":1}}],[\"的参数里面会有一个流对象\",{\"1\":{\"162\":1}}],[\"的参数里面会带一个context参数\",{\"1\":{\"162\":1}}],[\"的引用\",{\"1\":{\"602\":1,\"1097\":1,\"1098\":1}}],[\"的严重级别不足以停止整个程序的运行\",{\"1\":{\"599\":1}}],[\"的声明方式始终遵循名字在前面\",{\"1\":{\"592\":1}}],[\"的类型\",{\"1\":{\"1034\":1}}],[\"的类型是否comparable\",{\"1\":{\"1030\":1}}],[\"的类型系统从而读写内存\",{\"1\":{\"745\":1}}],[\"的类型系统\",{\"1\":{\"597\":1}}],[\"的类型系统和基本使用\",{\"1\":{\"590\":1}}],[\"的类型别名\",{\"1\":{\"594\":1}}],[\"的类型集是接口\",{\"1\":{\"563\":1}}],[\"的迭代器同样饱受争议\",{\"1\":{\"589\":1}}],[\"的迭代器采用的是闭包\",{\"1\":{\"586\":1}}],[\"的迭代器并没有新增任何关键字\",{\"1\":{\"581\":1}}],[\"的迭代器是range\",{\"1\":{\"581\":1}}],[\"的人来说应该早就了熟于心了\",{\"1\":{\"1051\":1}}],[\"的人随意定义的\",{\"1\":{\"773\":1}}],[\"的人应该都很熟悉\",{\"1\":{\"581\":1}}],[\"的人地址更新为\",{\"1\":{\"227\":1}}],[\"的一个快照\",{\"1\":{\"1037\":1}}],[\"的一大特点就是编译速度非常快\",{\"1\":{\"579\":1}}],[\"的一些行为\",{\"1\":{\"852\":1}}],[\"的一些基本操作\",{\"1\":{\"203\":1}}],[\"的一些\",{\"1\":{\"8\":2}}],[\"的泛型约束不允许存在带方法的接口\",{\"1\":{\"578\":1}}],[\"的时间\",{\"1\":{\"1144\":1}}],[\"的时间内判断最大或最小值\",{\"1\":{\"578\":1}}],[\"的时长可能是几毫秒到几百毫秒不等\",{\"1\":{\"1128\":1}}],[\"的时候非常的简洁高效\",{\"1\":{\"673\":1}}],[\"的时候其实有两个返回值\",{\"1\":{\"383\":1}}],[\"的时候建议使用这个包\",{\"1\":{\"340\":1}}],[\"的时候也可以看到两个数据中心的节点\",{\"1\":{\"144\":1}}],[\"的时候\",{\"1\":{\"7\":1,\"168\":1,\"365\":2,\"1104\":1}}],[\"的超集\",{\"1\":{\"567\":1}}],[\"的最新版本已经快要来到了\",{\"1\":{\"1130\":1}}],[\"的最大数量为\",{\"1\":{\"1089\":1}}],[\"的最大耗时\",{\"1\":{\"561\":1}}],[\"的最后的\",{\"1\":{\"116\":1}}],[\"的占用百分比\",{\"1\":{\"560\":1}}],[\"的消耗\",{\"1\":{\"555\":1}}],[\"的优势会更大一些\",{\"1\":{\"547\":1}}],[\"的二十几倍\",{\"1\":{\"547\":1}}],[\"的平均耗时是纯\",{\"1\":{\"547\":1}}],[\"的效率并不如纯\",{\"1\":{\"547\":1}}],[\"的出发点是为了性能\",{\"1\":{\"547\":1}}],[\"的浮点数类型映射如下\",{\"1\":{\"538\":1}}],[\"的生成和签名\",{\"1\":{\"776\":1}}],[\"的生态和性能\",{\"1\":{\"533\":1}}],[\"的生命周期跟随着一次\",{\"1\":{\"160\":1}}],[\"的耗时\",{\"1\":{\"526\":1}}],[\"的信息\",{\"1\":{\"525\":1}}],[\"的行号变成了调用者的行号\",{\"1\":{\"522\":1}}],[\"的公共数据库\",{\"1\":{\"511\":1}}],[\"的格式\",{\"1\":{\"505\":1,\"698\":4}}],[\"的编译器会倾向于将新对象分配到栈上\",{\"1\":{\"1130\":1}}],[\"的编译选项\",{\"1\":{\"545\":1}}],[\"的编译速度\",{\"1\":{\"504\":1}}],[\"的编号以节省空间\",{\"1\":{\"187\":1}}],[\"的编号会占用\",{\"1\":{\"187\":1}}],[\"的例子\",{\"1\":{\"486\":1,\"824\":1}}],[\"的基础之上\",{\"1\":{\"702\":1}}],[\"的基础之上增加了超时机制\",{\"1\":{\"478\":1}}],[\"的基本使用\",{\"1\":{\"505\":1}}],[\"的基本语法十分简单易懂\",{\"1\":{\"292\":1}}],[\"的函数参数是值传递\",{\"1\":{\"469\":1}}],[\"的int型管道\",{\"1\":{\"465\":1}}],[\"的别名\",{\"1\":{\"429\":1}}],[\"的抽象层\",{\"1\":{\"415\":1}}],[\"的实例化方式也是采用了该设计模式\",{\"1\":{\"406\":1}}],[\"的实现中涉及到了大量的指针移动操作\",{\"1\":{\"1029\":1}}],[\"的实现\",{\"1\":{\"58\":2,\"486\":1}}],[\"的影子\",{\"1\":{\"403\":1}}],[\"的语法如下\",{\"1\":{\"1037\":1,\"1038\":1}}],[\"的语法和其他高级语言类似\",{\"1\":{\"621\":1}}],[\"的语法其实并不难\",{\"1\":{\"609\":1}}],[\"的语法糖不能说很多\",{\"1\":{\"598\":1}}],[\"的语法有一个初步的认知\",{\"1\":{\"313\":1}}],[\"的语言\",{\"1\":{\"403\":1}}],[\"的情况下对管道进行发送数据也是同样的道理\",{\"1\":{\"1066\":1}}],[\"的情况\",{\"1\":{\"384\":1,\"1151\":1}}],[\"的原理可以前往map\",{\"1\":{\"381\":1}}],[\"的地址也是同理\",{\"1\":{\"1030\":1}}],[\"的地址\",{\"1\":{\"1030\":1,\"1087\":1}}],[\"的地址是一样的\",{\"1\":{\"376\":1}}],[\"的地址改为对应的域名\",{\"1\":{\"174\":1}}],[\"的空切片\",{\"1\":{\"365\":1}}],[\"的结果还是\",{\"1\":{\"331\":1}}],[\"的结构体中\",{\"1\":{\"1073\":1}}],[\"的结构体字段的内存对齐规则并不相同\",{\"1\":{\"540\":1}}],[\"的结构\",{\"1\":{\"218\":1,\"1057\":1}}],[\"的值更新之前一直处于阻塞状态\",{\"1\":{\"1165\":1}}],[\"的值修改为nil\",{\"1\":{\"1048\":1}}],[\"的值计算出哈希桶的容量\",{\"1\":{\"1034\":1}}],[\"的值大于mintophash的值\",{\"1\":{\"1030\":1}}],[\"的值指定的字段\",{\"1\":{\"931\":1}}],[\"的值也实现了该接口\",{\"1\":{\"563\":1}}],[\"的值了\",{\"1\":{\"331\":1}}],[\"的值\",{\"1\":{\"300\":1,\"1034\":1}}],[\"的更新就相对而言要温和很多\",{\"1\":{\"291\":1}}],[\"的用户\",{\"1\":{\"229\":1}}],[\"的文档\",{\"1\":{\"213\":1}}],[\"的任何问题\",{\"1\":{\"205\":1}}],[\"的任意一个节点\",{\"1\":{\"144\":3}}],[\"的核心\",{\"1\":{\"203\":1,\"394\":1}}],[\"的核心命令\",{\"1\":{\"141\":1}}],[\"的真实地址\",{\"1\":{\"175\":1}}],[\"的工作\",{\"1\":{\"1091\":1}}],[\"的工作流程\",{\"1\":{\"174\":1}}],[\"的工具编译的\",{\"1\":{\"136\":1}}],[\"的工具链和运行时都还是\",{\"1\":{\"87\":1}}],[\"的工具\",{\"1\":{\"62\":1}}],[\"的形式存在\",{\"1\":{\"171\":1}}],[\"的处理器\",{\"1\":{\"645\":1}}],[\"的处理\",{\"1\":{\"171\":1}}],[\"的headers\",{\"1\":{\"169\":1}}],[\"的拦截器可以做很多事情比如授权\",{\"1\":{\"166\":1}}],[\"的拦截器就类似于\",{\"1\":{\"164\":1}}],[\"的请求阶段和响应阶段\",{\"1\":{\"165\":1}}],[\"的请求和响应\",{\"1\":{\"165\":2}}],[\"的请求和响应都\",{\"1\":{\"157\":1}}],[\"的表现形式就是\",{\"1\":{\"163\":1}}],[\"的方式就像通过索引访问一个数组一样\",{\"1\":{\"383\":1}}],[\"的方式有很多\",{\"1\":{\"161\":1}}],[\"的方式来与其进行交互\",{\"1\":{\"105\":1}}],[\"的双向流和可插拔的认证授权\",{\"1\":{\"147\":1}}],[\"的依赖注入理念并不是基于语言的反射机制\",{\"1\":{\"821\":1}}],[\"的依赖\",{\"1\":{\"145\":1}}],[\"的随便一个节点\",{\"1\":{\"144\":1}}],[\"的成员信息\",{\"1\":{\"143\":1}}],[\"的数据也是同样如此\",{\"1\":{\"556\":1}}],[\"的数据是最及时最新的\",{\"1\":{\"142\":1}}],[\"的数组作为\",{\"1\":{\"539\":1}}],[\"的数量和处理器\",{\"1\":{\"1138\":1}}],[\"的数量会大于\",{\"1\":{\"1085\":1}}],[\"的数量\",{\"1\":{\"1067\":1,\"1085\":1,\"1087\":1,\"1138\":1}}],[\"的数量最好是奇数\",{\"1\":{\"143\":1}}],[\"的数量多一点没什么问题\",{\"1\":{\"142\":1}}],[\"的数量应该严格控制\",{\"1\":{\"142\":1}}],[\"的领导\",{\"1\":{\"142\":1}}],[\"的图标是一个星星\",{\"1\":{\"141\":1}}],[\"的可比较性\",{\"1\":{\"137\":1}}],[\"的键的指针\",{\"1\":{\"1036\":1}}],[\"的键正是无序且不能重复的\",{\"1\":{\"388\":1}}],[\"的键类型必须是可比较的\",{\"1\":{\"382\":1}}],[\"的键\",{\"1\":{\"137\":1,\"382\":1,\"384\":1}}],[\"的顺序变得不可预测\",{\"1\":{\"137\":1}}],[\"的运行\",{\"1\":{\"1104\":1}}],[\"的运行模式\",{\"1\":{\"141\":1}}],[\"的运行时都是由\",{\"1\":{\"133\":1}}],[\"的运行效率和表达能力\",{\"1\":{\"88\":1}}],[\"的并发安全是通过读写分离来实现的\",{\"1\":{\"1045\":1}}],[\"的并发性能很不错的原因之一\",{\"1\":{\"462\":1}}],[\"的并发使用检测\",{\"1\":{\"129\":1}}],[\"的并发调度模型是抢占式调度\",{\"1\":{\"46\":1}}],[\"的开销减少了接近一半\",{\"1\":{\"129\":1}}],[\"的不同\",{\"1\":{\"129\":1}}],[\"的\",{\"1\":{\"117\":1,\"145\":1,\"146\":1,\"160\":1,\"162\":1,\"168\":2,\"174\":1,\"380\":1,\"387\":1,\"492\":3,\"508\":8,\"617\":1,\"645\":1,\"821\":1,\"851\":1,\"927\":1,\"952\":1,\"962\":1,\"1003\":1,\"1010\":1,\"1037\":1,\"1038\":1,\"1089\":1,\"1130\":1,\"1133\":1}}],[\"的系统上\",{\"1\":{\"117\":1}}],[\"的支持\",{\"1\":{\"117\":1,\"621\":1}}],[\"的各种想法已经通过增量更新的方式体现在了\",{\"1\":{\"113\":1}}],[\"的插件\",{\"1\":{\"105\":1}}],[\"的很多设计感到匪夷所思\",{\"1\":{\"95\":1}}],[\"的思想先入为主\",{\"1\":{\"95\":1}}],[\"的叫法仅仅是因为那会域名\",{\"1\":{\"87\":1}}],[\"的妻子\",{\"1\":{\"87\":1}}],[\"的云游戏服务\",{\"1\":{\"72\":1}}],[\"的库\",{\"1\":{\"64\":1}}],[\"的风格的\",{\"1\":{\"64\":1}}],[\"的轻量级分布式关系数据库\",{\"1\":{\"62\":1}}],[\"的模块名就是下载依赖时使用的地址\",{\"1\":{\"509\":1}}],[\"的模块系统为所欲为\",{\"1\":{\"44\":1}}],[\"的模板引擎\",{\"1\":{\"60\":1}}],[\"的单元测试\",{\"1\":{\"55\":1}}],[\"的代码段\",{\"1\":{\"111\":1}}],[\"的代码\",{\"1\":{\"20\":1}}],[\"的项目内\",{\"1\":{\"20\":1}}],[\"的变化而导致的不兼容\",{\"1\":{\"16\":1}}],[\"的使用方式被\",{\"1\":{\"1065\":1}}],[\"的使用非常简单\",{\"1\":{\"838\":1}}],[\"的使用有许多隐含的陷阱\",{\"1\":{\"607\":1}}],[\"的使用步骤就只有两步\",{\"1\":{\"554\":1}}],[\"的使用并不涉及高并发的场景\",{\"1\":{\"389\":1}}],[\"的使用\",{\"1\":{\"7\":1}}],[\"的版本号v1\",{\"1\":{\"505\":1}}],[\"的版本号和构建时间\",{\"1\":{\"7\":1}}],[\"的版本\",{\"1\":{\"117\":2}}],[\"的版本信息\",{\"1\":{\"6\":1}}],[\"的评价\",{\"1\":{\"0\":1}}],[\"编号从\",{\"1\":{\"187\":1}}],[\"编码配置\",{\"1\":{\"839\":1}}],[\"编码的字符串\",{\"1\":{\"702\":1}}],[\"编码最大字节数只有\",{\"1\":{\"380\":1}}],[\"编码\",{\"1\":{\"143\":1,\"839\":2,\"934\":1}}],[\"编程的逻辑十分简单\",{\"1\":{\"682\":1}}],[\"编程\",{\"1\":{\"99\":1,\"100\":1}}],[\"编辑\",{\"1\":{\"506\":1}}],[\"编辑器\",{\"0\":{\"94\":1},\"1\":{\"193\":1}}],[\"编辑go\",{\"1\":{\"22\":1,\"514\":1}}],[\"编写一个简单的函数来模拟内存和\",{\"1\":{\"555\":1}}],[\"编写了一个两数求和的函数\",{\"1\":{\"547\":1}}],[\"编写头文件lib\",{\"1\":{\"545\":1}}],[\"编写具体的函数\",{\"1\":{\"532\":1}}],[\"编写规范\",{\"0\":{\"517\":1}}],[\"编写完后对源代码格式化并测试\",{\"1\":{\"497\":1}}],[\"编写完成后\",{\"1\":{\"152\":1}}],[\"编写模块\",{\"0\":{\"493\":1}}],[\"编写客户端\",{\"0\":{\"154\":1}}],[\"编写服务端\",{\"0\":{\"153\":1}}],[\"编写命令行工具\",{\"1\":{\"93\":1}}],[\"编写\",{\"0\":{\"496\":1},\"1\":{\"62\":2}}],[\"编写的十进制浮点数工具库\",{\"1\":{\"845\":1}}],[\"编写的第三方库\",{\"1\":{\"96\":1}}],[\"编写的开源\",{\"1\":{\"72\":1}}],[\"编写的编译器\",{\"1\":{\"8\":1}}],[\"编写的\",{\"1\":{\"4\":1,\"71\":2,\"72\":1,\"75\":2,\"87\":1,\"93\":1,\"133\":1,\"803\":1,\"962\":1,\"1084\":1}}],[\"编译期间会变为对runtime\",{\"1\":{\"1080\":1}}],[\"编译后会变成runtime\",{\"1\":{\"1095\":1}}],[\"编译后在命令行启动程序\",{\"1\":{\"636\":1}}],[\"编译后的二进制文件不会包含这些时区信息\",{\"1\":{\"7\":1}}],[\"编译快是因为编译期做的优化少\",{\"1\":{\"579\":1}}],[\"编译快速的编程语言\",{\"1\":{\"87\":1}}],[\"编译好后的文件放在哪里\",{\"1\":{\"201\":1}}],[\"编译也就是代码生成\",{\"1\":{\"199\":1}}],[\"编译速度变慢\",{\"1\":{\"547\":1}}],[\"编译速度将会提升\",{\"1\":{\"117\":1}}],[\"编译速度出现了倒退\",{\"1\":{\"117\":1}}],[\"编译速度提升了接近\",{\"1\":{\"116\":1}}],[\"编译速度也非常快\",{\"1\":{\"88\":1}}],[\"编译器还会生成一个\",{\"1\":{\"1067\":1}}],[\"编译器生成的中间代码会检查该值是否为\",{\"1\":{\"1080\":1}}],[\"编译器生成的实际代码可能和这个有出入\",{\"1\":{\"1067\":1}}],[\"编译器生成数据序列化相关的代码\",{\"1\":{\"152\":1}}],[\"编译器就难受\",{\"1\":{\"579\":1}}],[\"编译器就会告诉你无法访问\",{\"1\":{\"295\":1}}],[\"编译器很明确的告诉了我们变量mom发生了逃逸\",{\"1\":{\"550\":1}}],[\"编译器将会输出如下错误\",{\"1\":{\"414\":1}}],[\"编译器会在函数的开头插入runtime\",{\"1\":{\"1101\":1}}],[\"编译器会在编译期间展开成如下形式的代码\",{\"1\":{\"1055\":1}}],[\"编译器会在编译期间由cmd\",{\"1\":{\"1027\":1}}],[\"编译器会将其转为为对runtime\",{\"1\":{\"1074\":1}}],[\"编译器会将其翻译成runtime\",{\"1\":{\"1059\":1}}],[\"编译器会将其翻译成对runtime\",{\"1\":{\"1058\":1,\"1061\":1}}],[\"编译器会将所有的\",{\"1\":{\"1067\":1}}],[\"编译器会对前三种情况进行优化\",{\"1\":{\"1066\":1}}],[\"编译器会直接推断出结果\",{\"1\":{\"1053\":1}}],[\"编译器会提示头文件不存在\",{\"1\":{\"533\":1}}],[\"编译器会告诉你两者之间类型并不相同\",{\"1\":{\"332\":1}}],[\"编译器会输出\",{\"1\":{\"43\":1}}],[\"编译器无法推断其类型\",{\"1\":{\"329\":1}}],[\"编译器报错\",{\"1\":{\"324\":1}}],[\"编译器下载的话到protocolbuffers\",{\"1\":{\"200\":1}}],[\"编译器是将\",{\"1\":{\"148\":1}}],[\"编译器\",{\"1\":{\"148\":1}}],[\"编译器和生成器如果是其他语言的使用者可以自行到\",{\"1\":{\"147\":1}}],[\"编译器和链接器会因为它们改变自身的行为从而达到控制编译的效果\",{\"1\":{\"39\":1}}],[\"编译器不会对其进行逃逸分析\",{\"1\":{\"47\":1}}],[\"编译器指令\",{\"1\":{\"39\":1}}],[\"编译器采用\",{\"1\":{\"8\":1}}],[\"编译指示\",{\"1\":{\"39\":1}}],[\"编译当前包的测试二进制文件到当前目录但并不执行\",{\"1\":{\"38\":1}}],[\"编译完成后将二进制文件移动到gopath\",{\"1\":{\"19\":1}}],[\"编译控制部分\",{\"1\":{\"42\":1}}],[\"编译控制的目的也就达到了\",{\"1\":{\"12\":1}}],[\"编译控制\",{\"0\":{\"12\":1}}],[\"编译的并发数\",{\"1\":{\"9\":1}}],[\"编译耗时会明显上升\",{\"1\":{\"8\":1}}],[\"编译过程中的并发数\",{\"1\":{\"8\":1}}],[\"编译时也会发生错误\",{\"1\":{\"188\":1}}],[\"编译时\",{\"1\":{\"7\":2}}],[\"编译并运行指定代码段\",{\"1\":{\"107\":1}}],[\"编译并运行\",{\"1\":{\"2\":1}}],[\"编译包和依赖\",{\"1\":{\"2\":1}}],[\"编译\",{\"0\":{\"199\":1},\"1\":{\"2\":1,\"546\":1}}],[\"也仍然会将其标记为灰色\",{\"1\":{\"1143\":1}}],[\"也需要再次被调度来执行用户代码\",{\"1\":{\"1097\":1}}],[\"也禁止栈扩张\",{\"1\":{\"1097\":1}}],[\"也跟defer有一定的关联\",{\"1\":{\"1073\":1}}],[\"也还可以实现协程同步之类的操作\",{\"1\":{\"1056\":1}}],[\"也还没有取代\",{\"1\":{\"42\":1}}],[\"也很容易理解\",{\"1\":{\"1054\":1}}],[\"也没有上下半区的选择\",{\"1\":{\"1043\":1}}],[\"也更易于管理\",{\"1\":{\"988\":1}}],[\"也称局域网地址\",{\"1\":{\"932\":1}}],[\"也正是这四个操作才能写出能够忽略类型系统从而直接读写内存的代码\",{\"1\":{\"751\":1}}],[\"也要及时关闭\",{\"1\":{\"742\":1}}],[\"也拷贝了内部切片的指针\",{\"1\":{\"719\":1}}],[\"也在许多项目里以配置文件的形式存在\",{\"1\":{\"621\":1}}],[\"也逐渐开始流行\",{\"1\":{\"617\":1}}],[\"也提供了一些三角函数的工具函数\",{\"1\":{\"616\":1}}],[\"也多了一个方法unwrap\",{\"1\":{\"602\":1}}],[\"也跑路了\",{\"1\":{\"567\":1}}],[\"也能其集成到其它的\",{\"1\":{\"557\":1}}],[\"也能侧面说明\",{\"1\":{\"88\":1}}],[\"也会检查每一个\",{\"1\":{\"1145\":1}}],[\"也会自动重定向\",{\"1\":{\"954\":1}}],[\"也会先创建记录再创建关联\",{\"1\":{\"895\":1}}],[\"也会将主键写入切片中\",{\"1\":{\"866\":1}}],[\"也会发生逃逸现象\",{\"1\":{\"552\":1}}],[\"也会被忽略掉\",{\"1\":{\"509\":1}}],[\"也可能刚刚初始化\",{\"1\":{\"1086\":1}}],[\"也可能没有\",{\"1\":{\"1038\":1}}],[\"也可能是一个函数\",{\"1\":{\"521\":1}}],[\"也可以完成转换\",{\"1\":{\"1054\":1}}],[\"也可以相互交错\",{\"1\":{\"1019\":1}}],[\"也可以数组的中间\",{\"1\":{\"1019\":1}}],[\"也可以\",{\"1\":{\"956\":1}}],[\"也可以把每一个错误单独翻译\",{\"1\":{\"952\":1}}],[\"也可以把表达式写的更复杂些\",{\"1\":{\"348\":1}}],[\"也可以通过settagname方法来修改默认\",{\"1\":{\"930\":1}}],[\"也可以通过new方法创建自己的实例\",{\"1\":{\"649\":1}}],[\"也可以简写成\",{\"1\":{\"888\":1}}],[\"也可以传条件\",{\"1\":{\"888\":1}}],[\"也可以传递字节切片\",{\"1\":{\"536\":1}}],[\"也可以多次调用\",{\"1\":{\"876\":1}}],[\"也可以自行编写\",{\"1\":{\"840\":1}}],[\"也可以参考官方在反序列化配置时的步骤\",{\"1\":{\"839\":1}}],[\"也可以正常工作\",{\"1\":{\"823\":1}}],[\"也可以带有参数和返回值\",{\"1\":{\"823\":1}}],[\"也可以单独处理配置文件未找到的情况\",{\"1\":{\"791\":1}}],[\"也可以对其添加元素\",{\"1\":{\"1071\":1}}],[\"也可以对\",{\"1\":{\"774\":1,\"823\":1}}],[\"也可以有第四个字段eft\",{\"1\":{\"760\":1}}],[\"也可以被float64类型代表\",{\"1\":{\"595\":1}}],[\"也可以声明泛型变量的方式来解决零值问题\",{\"1\":{\"577\":1}}],[\"也可以声明的时候直接赋值\",{\"1\":{\"329\":1}}],[\"也可以如下\",{\"1\":{\"572\":1}}],[\"也可以将这些接口集成到自己的路由中而不是使用默认路由\",{\"1\":{\"557\":1}}],[\"也可以在冲突的时候什么都不做\",{\"1\":{\"867\":1}}],[\"也可以在创建连接时传入自己的策略实现来达到自定义的效果\",{\"1\":{\"855\":1}}],[\"也可以在\",{\"1\":{\"536\":1}}],[\"也可以根据上述的方法自己定义\",{\"1\":{\"534\":1}}],[\"也可以修改$gomodcache来指定存放在另外一个位置\",{\"1\":{\"507\":1}}],[\"也可以修改为用户所指定的位置\",{\"1\":{\"7\":1}}],[\"也可以读\",{\"1\":{\"469\":1}}],[\"也可以反射调用函数\",{\"1\":{\"444\":1}}],[\"也可以减少后续维护的负担\",{\"1\":{\"414\":1}}],[\"也可以匿名组合\",{\"1\":{\"407\":1}}],[\"也可以转换为字节切片再进行添加元素\",{\"1\":{\"379\":1}}],[\"也可以这么写\",{\"1\":{\"325\":1}}],[\"也可以前往参考手册\",{\"1\":{\"298\":1,\"299\":1}}],[\"也可以用traces命令不过它的输出很冗长\",{\"1\":{\"559\":1}}],[\"也可以用元素初始化\",{\"1\":{\"360\":1}}],[\"也可以用于复数\",{\"1\":{\"341\":1}}],[\"也可以用括号括起来\",{\"1\":{\"295\":1}}],[\"也可以用来映射数据\",{\"1\":{\"222\":1}}],[\"也可以使用全局积分来抵消部分自己的借债\",{\"1\":{\"1139\":1}}],[\"也可以使用engine\",{\"1\":{\"980\":1}}],[\"也可以使用createinbatches方法分批次创建\",{\"1\":{\"866\":1}}],[\"也可以使用wire\",{\"1\":{\"827\":1}}],[\"也可以使用string方法来获取其字符串形式\",{\"1\":{\"820\":1}}],[\"也可以使用strings\",{\"1\":{\"378\":1}}],[\"也可以使用下面两个函数\",{\"1\":{\"736\":1}}],[\"也可以使用flag\",{\"1\":{\"633\":1}}],[\"也可以使用go\",{\"1\":{\"503\":1}}],[\"也可以使用\",{\"1\":{\"225\":1}}],[\"也可以让\",{\"1\":{\"201\":1}}],[\"也可以放到拦截器里面操作\",{\"1\":{\"168\":1}}],[\"也可以选择使用开源社区现成的轮子\",{\"1\":{\"166\":1}}],[\"也可以ctrl+c\",{\"1\":{\"141\":1}}],[\"也可以当作\",{\"1\":{\"104\":1}}],[\"也可以直接http\",{\"1\":{\"645\":1}}],[\"也可以直接创建\",{\"1\":{\"168\":1}}],[\"也可以直接在依赖导航里面查看\",{\"1\":{\"96\":1}}],[\"也可以直接设置某一用户或组织\",{\"1\":{\"7\":1}}],[\"也可以搜索并下载其他\",{\"1\":{\"93\":1}}],[\"也可以是嵌套结构体的字段名\",{\"1\":{\"946\":1}}],[\"也可以是\",{\"1\":{\"762\":1}}],[\"也可以是基本类型的字面量\",{\"1\":{\"725\":1}}],[\"也可以是基本类型\",{\"1\":{\"725\":1}}],[\"也可以是char数组类型\",{\"1\":{\"536\":1}}],[\"也可以是第三方库\",{\"1\":{\"231\":1}}],[\"也可以是只有响应是流式的\",{\"1\":{\"157\":1}}],[\"也可以是文件夹或者某一个具体文件\",{\"1\":{\"41\":1}}],[\"也可以是all\",{\"1\":{\"20\":1}}],[\"也可以是一个入口文件\",{\"1\":{\"8\":1}}],[\"也可以指定版本\",{\"1\":{\"18\":1}}],[\"也可以指定查看某一个包\",{\"1\":{\"4\":1}}],[\"也可以不替换\",{\"1\":{\"16\":1}}],[\"也可以存在多行指令\",{\"1\":{\"12\":1}}],[\"也可以限制指定域名的\",{\"1\":{\"7\":1}}],[\"也对应了官方对于基本接口实现的定义\",{\"1\":{\"567\":1}}],[\"也对私有模块进行了支持\",{\"1\":{\"511\":1}}],[\"也对此提供了支持\",{\"1\":{\"462\":1}}],[\"也支持嵌套分组\",{\"1\":{\"988\":1}}],[\"也支持时间戳追踪\",{\"1\":{\"856\":1}}],[\"也支持这些\",{\"1\":{\"544\":1}}],[\"也支持具名返回值\",{\"1\":{\"397\":1}}],[\"也支持增强赋值运算符\",{\"1\":{\"299\":1}}],[\"也是性能最好的时候\",{\"1\":{\"1151\":1}}],[\"也是以链表的形式存在于协程中\",{\"1\":{\"1078\":1}}],[\"也是我在\",{\"1\":{\"1051\":1}}],[\"也是直接存储对应的值\",{\"1\":{\"1047\":1}}],[\"也是对应cmd\",{\"1\":{\"1021\":1}}],[\"也是cookie的名称\",{\"1\":{\"1003\":1}}],[\"也是就\",{\"1\":{\"810\":1}}],[\"也是必须要熟练掌握和使用的库\",{\"1\":{\"650\":1}}],[\"也是同样的道理\",{\"1\":{\"561\":1,\"1021\":1}}],[\"也是\",{\"1\":{\"394\":1,\"1085\":1}}],[\"也是一种哈希表\",{\"1\":{\"381\":1}}],[\"也是一片连续的内存空间\",{\"1\":{\"373\":1}}],[\"也印证了\",{\"1\":{\"386\":1}}],[\"也无法并入类型约束中\",{\"1\":{\"575\":1}}],[\"也无法知晓池中有几个对象\",{\"1\":{\"485\":1}}],[\"也无法判断其是否存在\",{\"1\":{\"384\":1}}],[\"也无法被修改\",{\"1\":{\"7\":2}}],[\"也不会永远执行下去\",{\"1\":{\"1104\":1}}],[\"也不会走代理\",{\"1\":{\"7\":1}}],[\"也不在本地队列中\",{\"1\":{\"1098\":1}}],[\"也不在乎什么绝世起重机\",{\"1\":{\"567\":1}}],[\"也不位于等待队列中\",{\"1\":{\"1086\":1}}],[\"也不能直接在回调函数中使用defer\",{\"1\":{\"582\":1}}],[\"也不能取值\",{\"1\":{\"475\":1}}],[\"也不好固定内存\",{\"1\":{\"533\":1}}],[\"也不太建议这么做\",{\"1\":{\"529\":1}}],[\"也不是一个硬性的规范\",{\"1\":{\"520\":1}}],[\"也不是第一个支持协程的语言\",{\"1\":{\"462\":1}}],[\"也不建议手动修改该文件\",{\"1\":{\"510\":1}}],[\"也不等于自身\",{\"1\":{\"384\":1}}],[\"也不支持直接将其转换为字符串\",{\"1\":{\"326\":1}}],[\"也叫字面值\",{\"1\":{\"300\":1}}],[\"也导入了包\",{\"1\":{\"295\":1}}],[\"也最为简单\",{\"1\":{\"231\":1}}],[\"也有可能只是在其它状态间转换\",{\"1\":{\"1088\":1}}],[\"也有可能会因为业务发展进行机器迁移而导致地址变化\",{\"1\":{\"174\":1}}],[\"也有防篡改\",{\"1\":{\"773\":1}}],[\"也有部分的是自行搭建仓库\",{\"1\":{\"509\":1}}],[\"也有添加链式拦截器的函数\",{\"1\":{\"165\":1}}],[\"也欢迎提交\",{\"1\":{\"50\":1}}],[\"也就能保证并发条件下的标记工作的正确性\",{\"1\":{\"1136\":1}}],[\"也就没法进行抢占检测\",{\"1\":{\"1106\":1}}],[\"也就没法生成grpc代码\",{\"1\":{\"201\":1}}],[\"也就永远无法找到这个键\",{\"1\":{\"1037\":1}}],[\"也就等于旧数组的长度\",{\"1\":{\"1025\":1}}],[\"也就说必须是\",{\"1\":{\"725\":1}}],[\"也就无法正常取值\",{\"1\":{\"384\":1}}],[\"也就无法作为\",{\"1\":{\"382\":1}}],[\"也就会出现爆红的情况\",{\"1\":{\"193\":1}}],[\"也就不会再进行栈增长\",{\"1\":{\"46\":1}}],[\"也就是扫描标记工作\",{\"1\":{\"1146\":1}}],[\"也就是没有可用内存的mspan\",{\"1\":{\"1116\":1}}],[\"也就是没有被引用的依赖项\",{\"1\":{\"24\":1}}],[\"也就是还在运行\",{\"1\":{\"1107\":1}}],[\"也就是runtime\",{\"1\":{\"1089\":2}}],[\"也就是resolver\",{\"1\":{\"174\":1}}],[\"也就是默认值\",{\"1\":{\"1071\":1}}],[\"也就是环形队列\",{\"1\":{\"1057\":1}}],[\"也就是哈希桶的规模每次扩大一倍\",{\"1\":{\"1042\":1}}],[\"也就是borig\",{\"1\":{\"1039\":1}}],[\"也就是扩容\",{\"1\":{\"1032\":1}}],[\"也就是溢出桶的数量越多\",{\"1\":{\"1032\":1}}],[\"也就是要清理的字节数\",{\"1\":{\"1027\":1}}],[\"也就是要修改的字段\",{\"1\":{\"449\":1}}],[\"也就是一个新的数组\",{\"1\":{\"1025\":1}}],[\"也就是一个字符数组的指针\",{\"1\":{\"536\":1}}],[\"也就是person\",{\"1\":{\"892\":1,\"894\":1}}],[\"也就是不会对配置文件做任何的安全处理\",{\"1\":{\"788\":1}}],[\"也就是不可重入锁\",{\"1\":{\"479\":1}}],[\"也就是\",{\"1\":{\"750\":1,\"1134\":1,\"1144\":2}}],[\"也就是为了将推送式迭代器转换成拉取式迭代器的而存在的\",{\"1\":{\"583\":1}}],[\"也就是执行循环体中的代码\",{\"1\":{\"582\":1}}],[\"也就是go\",{\"1\":{\"980\":1}}],[\"也就是gocache对应的目录\",{\"1\":{\"18\":1}}],[\"也就是gcc\",{\"1\":{\"530\":1}}],[\"也就是基准测试中的循环次数\",{\"1\":{\"525\":1}}],[\"也就是cas\",{\"1\":{\"490\":1}}],[\"也就是接收者类型\",{\"1\":{\"451\":1}}],[\"也就是interface\",{\"1\":{\"429\":1}}],[\"也就是解引用\",{\"1\":{\"391\":1}}],[\"也就是说pa存储的类型是\",{\"1\":{\"1070\":1}}],[\"也就是说可以\",{\"1\":{\"949\":1}}],[\"也就是说指针无法偏移\",{\"1\":{\"392\":1}}],[\"也就是说字符串的组成单位是字节而不是字符\",{\"1\":{\"380\":1}}],[\"也就是说所有通过此工具的格式化后的代码都是同一种代码风格\",{\"1\":{\"308\":1}}],[\"也就是说是在发起\",{\"1\":{\"163\":1}}],[\"也就是说会占用同一个\",{\"1\":{\"160\":1}}],[\"也就是说必须要包含main\",{\"1\":{\"19\":1}}],[\"也就是下载的第三方依赖存放地址\",{\"1\":{\"92\":1}}],[\"也就是本地的版本控制系统\",{\"1\":{\"18\":1}}],[\"也就是本机的\",{\"1\":{\"7\":1}}],[\"也就是本机的操作系统\",{\"1\":{\"7\":1}}],[\"也就是前面提到过的gcflags支持的参数\",{\"1\":{\"14\":1}}],[\"也输出它们包内的代码文档\",{\"1\":{\"4\":1}}],[\"只干了p\",{\"1\":{\"1080\":1}}],[\"只分配hchansize\",{\"1\":{\"1058\":1}}],[\"只留下一个哈希桶\",{\"1\":{\"1042\":1}}],[\"只持有对数组的引用\",{\"1\":{\"1019\":1}}],[\"只专注于\",{\"1\":{\"1005\":1}}],[\"只存在一个验证器实例\",{\"1\":{\"940\":1}}],[\"只存在显式的类型转换\",{\"1\":{\"595\":1}}],[\"只更新\",{\"1\":{\"862\":1}}],[\"只创建\",{\"1\":{\"862\":1}}],[\"只生成sql不执行\",{\"1\":{\"852\":1}}],[\"只负责\",{\"1\":{\"962\":1}}],[\"只负责访问控制\",{\"1\":{\"758\":1}}],[\"只负责控制面\",{\"1\":{\"142\":1}}],[\"只输入\",{\"1\":{\"739\":1}}],[\"只输出日期\",{\"1\":{\"739\":1}}],[\"只根据crane类型来存放起重机\",{\"1\":{\"567\":1}}],[\"只根据接口的规范来使用功能\",{\"1\":{\"567\":1}}],[\"只包含方法集的接口就是基本接口\",{\"1\":{\"563\":1}}],[\"只运行regexp匹配的测试用例\",{\"1\":{\"519\":1}}],[\"只编译测试文件\",{\"1\":{\"519\":1}}],[\"只不过它更\",{\"1\":{\"1153\":1}}],[\"只不过赋值的是参数s而非源切片s\",{\"1\":{\"1019\":1}}],[\"只不过是写入到了底层数组\",{\"1\":{\"1019\":1}}],[\"只不过是作用范围非常小的局部中间件\",{\"1\":{\"992\":1}}],[\"只不过封装的相对而言要更深一点\",{\"1\":{\"955\":1}}],[\"只不过因为字符串转字节切片需求比较频繁\",{\"1\":{\"755\":1}}],[\"只不过go\",{\"1\":{\"515\":1}}],[\"只不过在\",{\"1\":{\"412\":1}}],[\"只对比哈希值高八位就够了\",{\"1\":{\"1036\":1}}],[\"只对外暴露了一个do方法\",{\"1\":{\"484\":1}}],[\"只对一个数字使用时\",{\"1\":{\"299\":1}}],[\"只会将它所存储的\",{\"1\":{\"1048\":1}}],[\"只会给测试函数传入语料库中的数据\",{\"1\":{\"527\":1}}],[\"只会用到os包下的两个函数\",{\"1\":{\"421\":1}}],[\"只会打印正在运行协程的调用栈\",{\"1\":{\"131\":1}}],[\"只写管道不能读取数据\",{\"1\":{\"1061\":1}}],[\"只写\",{\"1\":{\"416\":1}}],[\"只读管道不能关闭\",{\"1\":{\"1061\":1}}],[\"只读管道不能发送数据\",{\"1\":{\"1061\":1}}],[\"只读管道也是一样的道理\",{\"1\":{\"469\":1}}],[\"只读的\",{\"1\":{\"1045\":1}}],[\"只读\",{\"1\":{\"416\":1}}],[\"只读设置\",{\"1\":{\"242\":1}}],[\"只剩下服务发现\",{\"1\":{\"175\":1}}],[\"只能在标记结束后再次将栈中的所有对象全部标记为灰色对象\",{\"1\":{\"1142\":1}}],[\"只能使用内置函数delete\",{\"1\":{\"1039\":1}}],[\"只能出现在oldbuckets中\",{\"1\":{\"1030\":1}}],[\"只能说是几乎没有\",{\"1\":{\"598\":1}}],[\"只能像这样嵌套函数调用\",{\"1\":{\"586\":1}}],[\"只能自己手写\",{\"1\":{\"547\":1}}],[\"只能对管道发送数据\",{\"1\":{\"468\":1,\"469\":1}}],[\"只能阻塞等待\",{\"1\":{\"467\":1}}],[\"只能添加\",{\"1\":{\"416\":1}}],[\"只能以字母和下划线开头\",{\"1\":{\"298\":1}}],[\"只能由字母\",{\"1\":{\"298\":1}}],[\"只能拦截到客户端与服务端建立连接的时候也就是创建流的时机\",{\"1\":{\"166\":1}}],[\"只能用\",{\"1\":{\"7\":1}}],[\"只发送一次参数\",{\"1\":{\"157\":1}}],[\"只返回一次响应\",{\"1\":{\"157\":1}}],[\"只需按照对象大小计算出对应的spanclass\",{\"1\":{\"1123\":1}}],[\"只需开启一个新的协程就可以去处理\",{\"1\":{\"682\":1}}],[\"只需执行如下命令\",{\"1\":{\"560\":1}}],[\"只需一行代码即可安装运行时和开发环境\",{\"1\":{\"147\":1}}],[\"只需要保存b值\",{\"1\":{\"1037\":1}}],[\"只需要复制其数据的引用\",{\"1\":{\"1019\":1}}],[\"只需要在生成代码时使用\",{\"1\":{\"1016\":1}}],[\"只需要在options中书写规则\",{\"1\":{\"202\":1}}],[\"只需要简单地告诉\",{\"1\":{\"793\":1}}],[\"只需要简单地修改配置文件即可\",{\"1\":{\"759\":1}}],[\"只需要很少的配置\",{\"1\":{\"791\":1}}],[\"只需要换一个函数\",{\"1\":{\"627\":1}}],[\"只需要完成对应的操作就足够\",{\"1\":{\"571\":1}}],[\"只需要执行如下命令\",{\"1\":{\"550\":1}}],[\"只需要做到以下三点\",{\"1\":{\"493\":1}}],[\"只需要将初始化操作传入do方法即可\",{\"1\":{\"484\":1}}],[\"只需要将其存放到go\",{\"1\":{\"92\":1}}],[\"只需要提供文件路径即可\",{\"1\":{\"417\":1}}],[\"只需要传入copier\",{\"1\":{\"813\":1}}],[\"只需要传入不同的\",{\"1\":{\"406\":1}}],[\"只需要传入一个\",{\"1\":{\"171\":1}}],[\"只需要稍微修改一下就能解决该问题\",{\"1\":{\"371\":1}}],[\"只需要实现streamserverinterceptor类型即可\",{\"1\":{\"165\":1}}],[\"只需要实现unaryserverinterceptor类型即可\",{\"1\":{\"165\":1}}],[\"只需要一个\",{\"1\":{\"387\":1}}],[\"只需要一个字节就能表示\",{\"1\":{\"380\":1}}],[\"只需要一个浏览器即可\",{\"1\":{\"104\":1}}],[\"只需要一行命令即可\",{\"1\":{\"141\":1}}],[\"只需要点点点\",{\"1\":{\"90\":1}}],[\"只需要以下两步\",{\"1\":{\"11\":1}}],[\"只是保持着对\",{\"1\":{\"1098\":1}}],[\"只是多做了一个类型检查\",{\"1\":{\"1058\":1}}],[\"只是多了一个delete函数的调用\",{\"1\":{\"1048\":1}}],[\"只是多了一小段\",{\"1\":{\"412\":1}}],[\"只是将所有元素二次分配使数据分布更加均匀\",{\"1\":{\"1043\":1}}],[\"只是修改了一下入参\",{\"1\":{\"1019\":1}}],[\"只是写在函数上可读性好一些\",{\"1\":{\"1017\":1}}],[\"只是单纯的负责\",{\"1\":{\"1008\":1}}],[\"只是由手写变成了自动生成\",{\"1\":{\"823\":1}}],[\"只是给出了一个规范\",{\"1\":{\"567\":1}}],[\"只是调用了其它函数\",{\"1\":{\"559\":1}}],[\"只是为了方便开发者使用\",{\"1\":{\"536\":1}}],[\"只是先前版本的基础只是增加了新的功能\",{\"1\":{\"505\":1}}],[\"只是符合\",{\"1\":{\"499\":1}}],[\"只是函数签名略有区别\",{\"1\":{\"451\":1}}],[\"只是大多数时候都是anscii字符\",{\"1\":{\"377\":1}}],[\"只是对于切片而言\",{\"1\":{\"364\":1}}],[\"只是可以显示的检查字段值是否被设置\",{\"1\":{\"187\":1}}],[\"只是一个简单的双方发送与接收的例子\",{\"1\":{\"159\":1}}],[\"只是地址不一样\",{\"1\":{\"145\":1}}],[\"只是用来展示\",{\"1\":{\"7\":2}}],[\"只要给路径段一个名称\",{\"1\":{\"954\":1}}],[\"只要指针是有效的\",{\"1\":{\"751\":1}}],[\"只要任一协程发生panic\",{\"1\":{\"604\":1}}],[\"只要掌握了泛型\",{\"1\":{\"569\":1}}],[\"只要是tophash\",{\"1\":{\"1030\":1}}],[\"只要是带有类型集的接口\",{\"1\":{\"575\":1}}],[\"只要是带有方法集的接口\",{\"1\":{\"575\":1}}],[\"只要是实现了一个接口的全部方法\",{\"1\":{\"567\":1}}],[\"只要是能够进行数据存储的中间件都可以满足条件\",{\"1\":{\"175\":1}}],[\"只要能够起重和吊货就行\",{\"1\":{\"567\":1}}],[\"只要包含类型集的接口就是通用接口\",{\"1\":{\"563\":1}}],[\"只要没有报错就说明下载成功\",{\"1\":{\"503\":1}}],[\"只要实现了该接口都可以称之为上下文例如著名\",{\"1\":{\"473\":1}}],[\"只要有interface\",{\"1\":{\"427\":1}}],[\"只要有数组名和下标\",{\"1\":{\"361\":1}}],[\"只要\",{\"1\":{\"144\":1}}],[\"只搭建\",{\"1\":{\"144\":1}}],[\"只起到一个载体的作用\",{\"1\":{\"44\":1}}],[\"只有简单的标记清除算法\",{\"1\":{\"1130\":1}}],[\"只有需要用到内存的时候才会去分配\",{\"1\":{\"1122\":1}}],[\"只有拥有一个协程g0\",{\"1\":{\"1089\":1}}],[\"只有与处理器\",{\"1\":{\"1085\":1}}],[\"只有拼接字符串变量才会在运行时完成\",{\"1\":{\"1053\":1}}],[\"只有最基本的功能\",{\"1\":{\"1005\":1}}],[\"只有某些格式需要此功能\",{\"1\":{\"975\":1}}],[\"只有当所有其他指定字段与指定字段后面的值相等时\",{\"1\":{\"936\":2}}],[\"只有当缓冲区容量满了才会阻塞的等待协程来读取管道中的数据\",{\"1\":{\"467\":1}}],[\"只有两个对外暴露的函数\",{\"1\":{\"820\":1}}],[\"只有两者都为nil时才是完全相等\",{\"1\":{\"460\":1}}],[\"只有一种情况例外\",{\"1\":{\"726\":1}}],[\"只有一个协程会执行\",{\"1\":{\"1171\":1}}],[\"只有一个协程能够对其写入数据\",{\"1\":{\"465\":1}}],[\"只有一个\",{\"1\":{\"1066\":1,\"1106\":1}}],[\"只有一个函数\",{\"1\":{\"496\":1}}],[\"只有一个名字\",{\"1\":{\"87\":1}}],[\"只有三个指令\",{\"1\":{\"515\":1}}],[\"只有在真正引用了外部依赖后\",{\"1\":{\"510\":1}}],[\"只有在前者无法访问时才会执行后者\",{\"1\":{\"7\":1}}],[\"只有切片才能使用拓展表达式\",{\"1\":{\"371\":1}}],[\"只有服务端可以主动关闭流式响应\",{\"1\":{\"157\":1}}],[\"只有客户端可以主动关闭流式请求\",{\"1\":{\"157\":1}}],[\"只有时刻保持谦虚\",{\"1\":{\"0\":1}}],[\"只一行简短描述\",{\"1\":{\"4\":1}}],[\"l+n\",{\"1\":{\"1053\":1}}],[\"l1\",{\"1\":{\"1024\":1,\"1115\":2,\"1122\":1}}],[\"l2\",{\"1\":{\"1024\":6,\"1115\":2,\"1122\":3}}],[\"l和s的值会被直接替换成10和20\",{\"1\":{\"1021\":1}}],[\"ln10\",{\"1\":{\"653\":2}}],[\"ln2\",{\"1\":{\"653\":2}}],[\"lmsgprefix\",{\"1\":{\"649\":2}}],[\"lmicroseconds\",{\"1\":{\"649\":2}}],[\"ltfield\",{\"1\":{\"931\":1}}],[\"lte\",{\"1\":{\"935\":1}}],[\"ltefield\",{\"1\":{\"931\":1}}],[\"ltecsfield\",{\"1\":{\"931\":1}}],[\"ltcsfield\",{\"1\":{\"931\":1}}],[\"lt\",{\"1\":{\"720\":3,\"728\":2,\"935\":1}}],[\"ltime\",{\"1\":{\"649\":3}}],[\"ltrim\",{\"1\":{\"268\":2}}],[\"l指的是库文件的名称\",{\"1\":{\"545\":1}}],[\"l指的是库搜索路径\",{\"1\":{\"545\":1}}],[\"ll\",{\"1\":{\"1139\":1}}],[\"llongfile\",{\"1\":{\"649\":1}}],[\"llibsum\",{\"1\":{\"545\":1,\"546\":1}}],[\"llen\",{\"1\":{\"266\":1}}],[\"l$\",{\"1\":{\"545\":1,\"546\":1}}],[\"lf\",{\"1\":{\"538\":1}}],[\"ldate\",{\"1\":{\"649\":3}}],[\"ld\",{\"1\":{\"537\":2}}],[\"ldflags的\",{\"1\":{\"10\":1}}],[\"ldflags\",{\"0\":{\"10\":1},\"1\":{\"8\":3,\"10\":3,\"545\":1,\"546\":1}}],[\"ldflags=\",{\"1\":{\"6\":1,\"10\":1,\"13\":1}}],[\"lr\",{\"1\":{\"1080\":1,\"1086\":1,\"1095\":1}}],[\"lrem\",{\"1\":{\"268\":1}}],[\"lrange\",{\"1\":{\"267\":1}}],[\"lru\",{\"1\":{\"61\":4,\"504\":1}}],[\"lpop\",{\"1\":{\"267\":1}}],[\"lpush\",{\"1\":{\"265\":1}}],[\"lutc\",{\"1\":{\"649\":1}}],[\"lukechampine\",{\"1\":{\"510\":1}}],[\"lucene\",{\"1\":{\"205\":1}}],[\"lua\",{\"0\":{\"802\":1},\"1\":{\"75\":6,\"802\":4,\"803\":6,\"804\":1,\"805\":6}}],[\"lumberjack\",{\"1\":{\"54\":2,\"841\":2}}],[\"l参数将会输出将要修改的文件名\",{\"1\":{\"17\":1}}],[\"layout\",{\"1\":{\"1037\":1}}],[\"latitude\",{\"1\":{\"934\":1}}],[\"lateexpansionresulttype\",{\"1\":{\"1074\":1}}],[\"latency\",{\"1\":{\"1007\":1}}],[\"latest后缀\",{\"1\":{\"503\":1}}],[\"latest\",{\"1\":{\"18\":4,\"19\":2,\"37\":1,\"148\":2,\"156\":1,\"200\":2,\"498\":2,\"500\":2,\"503\":1,\"504\":1,\"822\":1,\"1010\":3}}],[\"later\",{\"1\":{\"16\":1,\"1074\":1}}],[\"laundry\",{\"1\":{\"918\":1}}],[\"laptop\",{\"1\":{\"907\":1}}],[\"lastgc\",{\"1\":{\"1128\":1}}],[\"lastpoll\",{\"1\":{\"1104\":1}}],[\"last\",{\"1\":{\"986\":1,\"1034\":2,\"1053\":2,\"1057\":1,\"1088\":1,\"1097\":1,\"1120\":2,\"1169\":1}}],[\"lastname\",{\"1\":{\"948\":4,\"951\":7}}],[\"lastindexany\",{\"1\":{\"712\":2}}],[\"lastindex\",{\"1\":{\"712\":2}}],[\"lastinsertid\",{\"1\":{\"235\":1}}],[\"lastwritetime\",{\"1\":{\"416\":1}}],[\"lastaccesstime\",{\"1\":{\"416\":1}}],[\"labels\",{\"1\":{\"1096\":1}}],[\"label\",{\"0\":{\"351\":1},\"1\":{\"916\":2,\"952\":16}}],[\"labstack\",{\"1\":{\"51\":1}}],[\"lamda\",{\"1\":{\"88\":1,\"399\":1}}],[\"lan\",{\"1\":{\"141\":1,\"142\":2}}],[\"lancet译为柳叶刀\",{\"1\":{\"924\":1}}],[\"lancet\",{\"0\":{\"923\":1},\"1\":{\"82\":2,\"923\":3}}],[\"lang\",{\"1\":{\"75\":1,\"731\":3}}],[\"lang=\",{\"1\":{\"41\":2,\"980\":1}}],[\"language中获取对应的语言\",{\"1\":{\"952\":2}}],[\"languages\",{\"1\":{\"193\":1}}],[\"language\",{\"1\":{\"16\":1,\"88\":2,\"89\":1,\"104\":1,\"113\":1,\"116\":1,\"117\":1,\"286\":1,\"288\":1,\"289\":1,\"290\":1,\"291\":1,\"403\":1,\"405\":1,\"409\":2,\"529\":1,\"618\":1,\"716\":8,\"934\":1,\"953\":2,\"1000\":1}}],[\"largesizediv\",{\"1\":{\"1125\":1}}],[\"large\",{\"1\":{\"7\":1,\"552\":1,\"1100\":1,\"1112\":1,\"1123\":1}}],[\"l\",{\"1\":{\"9\":3,\"10\":1,\"14\":1,\"15\":1,\"17\":7,\"360\":2,\"380\":7,\"416\":2,\"471\":3,\"482\":1,\"499\":1,\"539\":5,\"550\":3,\"551\":1,\"552\":1,\"553\":2,\"648\":2,\"649\":2,\"805\":6,\"1021\":5,\"1023\":2,\"1038\":1,\"1052\":3,\"1053\":4,\"1054\":2,\"1111\":4,\"1166\":3,\"1167\":13,\"1168\":14,\"1169\":9}}],[\"leftdelim\",{\"1\":{\"1016\":1}}],[\"left表示下线\",{\"1\":{\"143\":1}}],[\"le\",{\"1\":{\"728\":2}}],[\"let\",{\"1\":{\"582\":1,\"1097\":1}}],[\"leodido\",{\"1\":{\"503\":2,\"509\":1}}],[\"less\",{\"1\":{\"116\":1,\"332\":1,\"578\":1,\"683\":2,\"688\":1,\"1030\":1,\"1167\":1}}],[\"legal\",{\"1\":{\"112\":1,\"129\":1}}],[\"len++\",{\"1\":{\"1121\":1}}],[\"lenmem\",{\"1\":{\"1025\":3}}],[\"lenandcap\",{\"1\":{\"1021\":1}}],[\"length是一个变量\",{\"1\":{\"360\":1}}],[\"length\",{\"1\":{\"360\":5,\"536\":2,\"965\":1,\"1000\":1}}],[\"len\",{\"1\":{\"44\":1,\"158\":1,\"159\":1,\"324\":1,\"361\":1,\"365\":1,\"367\":1,\"369\":1,\"370\":1,\"376\":1,\"377\":2,\"378\":1,\"380\":4,\"383\":1,\"412\":3,\"417\":4,\"456\":1,\"467\":1,\"484\":3,\"527\":6,\"536\":2,\"539\":3,\"577\":1,\"578\":1,\"605\":1,\"608\":1,\"629\":3,\"683\":1,\"688\":2,\"719\":1,\"728\":2,\"752\":3,\"753\":2,\"754\":2,\"755\":1,\"756\":2,\"936\":1,\"952\":2,\"985\":1,\"995\":3,\"1016\":1,\"1019\":2,\"1020\":13,\"1021\":3,\"1024\":14,\"1025\":2,\"1026\":3,\"1027\":7,\"1028\":1,\"1030\":1,\"1032\":2,\"1042\":1,\"1046\":2,\"1047\":1,\"1052\":5,\"1053\":3,\"1054\":11,\"1055\":1,\"1065\":1,\"1071\":2,\"1074\":3,\"1076\":1,\"1089\":2,\"1104\":3,\"1107\":1,\"1120\":8,\"1121\":3,\"1148\":1}}],[\"leaving\",{\"1\":{\"1097\":1}}],[\"leave让节点优雅退出\",{\"1\":{\"143\":1}}],[\"leave\",{\"1\":{\"141\":2,\"1097\":1}}],[\"leader\",{\"1\":{\"141\":1,\"142\":6,\"143\":4,\"144\":1}}],[\"leaf\",{\"1\":{\"72\":2,\"613\":1}}],[\"leaq\",{\"1\":{\"9\":1,\"45\":1,\"1038\":3,\"1053\":1,\"1066\":1,\"1067\":1}}],[\"learn的相对地址\",{\"1\":{\"193\":1}}],[\"learn为扫描路径\",{\"1\":{\"193\":1}}],[\"learnku\",{\"1\":{\"99\":1}}],[\"learn\",{\"1\":{\"7\":1,\"145\":3,\"148\":1,\"150\":1,\"153\":1,\"154\":1,\"158\":4,\"159\":2,\"164\":2,\"165\":1,\"166\":2,\"175\":2,\"193\":1,\"198\":2,\"201\":3,\"202\":1}}],[\"levelenabler\",{\"1\":{\"839\":2,\"842\":1,\"843\":9}}],[\"levelencoder\",{\"1\":{\"839\":3,\"840\":1}}],[\"leveled\",{\"1\":{\"836\":1}}],[\"levelkey\",{\"1\":{\"839\":3,\"840\":2}}],[\"leveldb\",{\"1\":{\"62\":1}}],[\"level\",{\"1\":{\"4\":1,\"49\":1,\"191\":5,\"526\":3,\"839\":3,\"840\":8,\"842\":1}}],[\"lstdflags\",{\"1\":{\"649\":1}}],[\"lshortfile\",{\"1\":{\"649\":2}}],[\"lsonindex\",{\"1\":{\"578\":10}}],[\"lset\",{\"1\":{\"265\":1}}],[\"lsb\",{\"1\":{\"140\":1}}],[\"lsm\",{\"1\":{\"62\":1}}],[\"ls\",{\"1\":{\"7\":1,\"14\":1,\"17\":1,\"18\":1,\"20\":1,\"38\":1,\"156\":1,\"201\":2,\"503\":1,\"507\":2,\"510\":2,\"513\":1,\"545\":1}}],[\"lose\",{\"1\":{\"1089\":1,\"1091\":1}}],[\"lostcancel\",{\"1\":{\"37\":1}}],[\"longitude\",{\"1\":{\"934\":1}}],[\"longtext\",{\"1\":{\"863\":2}}],[\"longlong\",{\"1\":{\"537\":2}}],[\"longstringlongstringlongstringlongstringlongstringlongstringlongstringlongstring\",{\"1\":{\"525\":1}}],[\"longstring\",{\"1\":{\"525\":7}}],[\"long\",{\"1\":{\"207\":2,\"208\":1,\"537\":11,\"1053\":1,\"1107\":1}}],[\"longer\",{\"1\":{\"18\":1,\"21\":1,\"520\":1}}],[\"loaduintptr\",{\"1\":{\"1106\":1}}],[\"loaduint32\",{\"1\":{\"484\":1}}],[\"loadacq\",{\"1\":{\"1104\":2}}],[\"loadanddelete\",{\"1\":{\"486\":2,\"1048\":1}}],[\"loadreadonly\",{\"1\":{\"1046\":2,\"1047\":3,\"1048\":2,\"1049\":2}}],[\"load方法\",{\"1\":{\"1046\":1}}],[\"loadfactorden\",{\"1\":{\"1032\":2}}],[\"loadfactornum\",{\"1\":{\"1032\":2}}],[\"loadfactor\",{\"1\":{\"1030\":1,\"1032\":1}}],[\"loadhtmlfiles\",{\"1\":{\"980\":1}}],[\"loadhtmlglob\",{\"1\":{\"980\":1}}],[\"loadlocation\",{\"1\":{\"740\":1}}],[\"loadint64\",{\"1\":{\"489\":1,\"490\":1}}],[\"loading\",{\"1\":{\"21\":3}}],[\"loaded表示\",{\"1\":{\"1047\":1}}],[\"loaded的值取决于key是否存在\",{\"1\":{\"486\":1}}],[\"loaded\",{\"1\":{\"486\":2,\"1047\":3,\"1048\":1}}],[\"loaded为true\",{\"1\":{\"486\":1}}],[\"loadorstore\",{\"1\":{\"486\":2}}],[\"loadbalancingconfig\",{\"1\":{\"175\":1}}],[\"loadbalancingpolicy指的是负载均衡策略\",{\"1\":{\"175\":1}}],[\"loadbalancingpolicy\",{\"1\":{\"145\":1,\"175\":2}}],[\"load\",{\"1\":{\"158\":2,\"159\":2,\"164\":1,\"168\":1,\"485\":1,\"486\":2,\"489\":2,\"491\":2,\"817\":1,\"1021\":1,\"1046\":2,\"1047\":1,\"1048\":1,\"1049\":1,\"1060\":1,\"1066\":1,\"1079\":1,\"1104\":4,\"1132\":2,\"1137\":1,\"1139\":6,\"1145\":1,\"1148\":1,\"1153\":2,\"1160\":2,\"1168\":3,\"1169\":3,\"1173\":2,\"1177\":2,\"1178\":4}}],[\"loc=local\",{\"1\":{\"851\":1}}],[\"loc\",{\"1\":{\"737\":1}}],[\"lockwithrank\",{\"1\":{\"1167\":1,\"1168\":1,\"1169\":1}}],[\"lockwithrankmayacquire\",{\"1\":{\"1100\":1}}],[\"lockranknotifylist\",{\"1\":{\"1167\":1,\"1168\":1,\"1169\":1}}],[\"lockrankmheap\",{\"1\":{\"1100\":1}}],[\"lockrankstacklarge\",{\"1\":{\"1099\":1}}],[\"lockrankstackpool\",{\"1\":{\"1099\":1}}],[\"lockedg\",{\"1\":{\"1096\":1}}],[\"lockedm\",{\"1\":{\"1096\":2}}],[\"locked\",{\"1\":{\"1096\":1,\"1097\":1,\"1148\":1,\"1150\":1,\"1151\":1}}],[\"locker等\",{\"1\":{\"483\":1}}],[\"locker\",{\"0\":{\"1150\":1},\"1\":{\"480\":1,\"482\":2,\"1150\":3,\"1166\":1}}],[\"locker接口\",{\"1\":{\"480\":1}}],[\"lockslow\",{\"1\":{\"1153\":2}}],[\"locks++\",{\"1\":{\"1097\":1}}],[\"locks\",{\"1\":{\"1087\":2,\"1097\":2,\"1106\":1}}],[\"lockorder\",{\"1\":{\"1067\":16}}],[\"lockorder决定了管道的锁定顺序\",{\"1\":{\"1067\":1}}],[\"lockinit\",{\"1\":{\"1099\":2}}],[\"locking\",{\"1\":{\"881\":2}}],[\"locking子句来提供锁的支持\",{\"1\":{\"881\":1}}],[\"lockindex\",{\"1\":{\"143\":3}}],[\"lock\",{\"0\":{\"1153\":1,\"1158\":1},\"1\":{\"467\":5,\"479\":3,\"480\":5,\"481\":2,\"482\":2,\"484\":1,\"490\":4,\"507\":1,\"510\":3,\"841\":1,\"1046\":1,\"1048\":1,\"1049\":1,\"1057\":1,\"1059\":7,\"1060\":4,\"1061\":4,\"1067\":3,\"1074\":1,\"1086\":3,\"1088\":1,\"1089\":8,\"1092\":3,\"1093\":3,\"1097\":3,\"1098\":1,\"1099\":1,\"1100\":5,\"1104\":3,\"1106\":3,\"1107\":1,\"1116\":3,\"1118\":1,\"1119\":1,\"1120\":9,\"1121\":2,\"1122\":1,\"1132\":3,\"1139\":3,\"1149\":2,\"1150\":1,\"1152\":1,\"1153\":1,\"1158\":2,\"1165\":2,\"1166\":3,\"1167\":4,\"1168\":4,\"1169\":3,\"1173\":1}}],[\"localmiddleware\",{\"1\":{\"994\":2,\"995\":2,\"996\":2}}],[\"locale\",{\"1\":{\"952\":2,\"953\":2}}],[\"locales\",{\"1\":{\"503\":2,\"509\":1,\"952\":3}}],[\"localtime\",{\"1\":{\"841\":1}}],[\"localized\",{\"1\":{\"167\":2}}],[\"localhost\",{\"1\":{\"154\":1,\"158\":1,\"159\":1,\"166\":1,\"167\":1,\"170\":2,\"622\":2,\"643\":1,\"824\":1,\"965\":1,\"977\":1,\"980\":1,\"982\":1,\"984\":1,\"985\":1,\"986\":1,\"989\":1,\"990\":1,\"991\":1,\"993\":1,\"994\":1,\"996\":1,\"1002\":1}}],[\"locals=0x58\",{\"1\":{\"9\":1}}],[\"local\",{\"1\":{\"9\":1,\"14\":1,\"21\":1,\"22\":1,\"93\":1,\"166\":1,\"817\":2,\"1089\":1,\"1095\":1,\"1104\":1}}],[\"location\",{\"1\":{\"7\":3,\"737\":1,\"740\":2,\"968\":2,\"969\":2,\"970\":2,\"972\":1,\"973\":1,\"974\":1,\"977\":1,\"980\":1,\"981\":1,\"982\":1,\"984\":1,\"985\":1,\"986\":1,\"989\":1,\"990\":1,\"991\":1,\"993\":1,\"994\":1,\"996\":1,\"1101\":1}}],[\"lodash\",{\"1\":{\"58\":1}}],[\"lo\",{\"1\":{\"58\":2,\"1086\":1,\"1089\":4,\"1097\":1,\"1101\":2,\"1102\":2,\"1104\":1,\"1106\":1}}],[\"log2npage\",{\"1\":{\"1100\":4}}],[\"log2\",{\"1\":{\"1007\":2}}],[\"log2e\",{\"1\":{\"653\":1}}],[\"log1\",{\"1\":{\"1007\":2}}],[\"log10e\",{\"1\":{\"653\":1}}],[\"login是一组\",{\"1\":{\"988\":1}}],[\"loginwithquery\",{\"1\":{\"971\":1,\"974\":1}}],[\"loginwithform\",{\"1\":{\"971\":1,\"973\":1}}],[\"loginwithjson\",{\"1\":{\"971\":1,\"972\":1}}],[\"login\",{\"1\":{\"971\":11,\"972\":1,\"973\":1,\"974\":6,\"988\":3,\"989\":2,\"990\":2,\"993\":2,\"994\":2,\"996\":2}}],[\"loginuser\",{\"1\":{\"971\":2,\"977\":3}}],[\"logical\",{\"1\":{\"910\":1}}],[\"log等权限\",{\"1\":{\"758\":1}}],[\"logformatterparams\",{\"1\":{\"1007\":1}}],[\"logfileconfig\",{\"1\":{\"840\":3}}],[\"logfile\",{\"1\":{\"840\":4,\"841\":4}}],[\"logf\",{\"1\":{\"521\":1,\"527\":2}}],[\"logging\",{\"1\":{\"504\":1,\"836\":1}}],[\"loggerwithformatter\",{\"1\":{\"1007\":2}}],[\"loggerwithconfig\",{\"1\":{\"982\":1,\"995\":1}}],[\"logger\",{\"1\":{\"503\":1,\"648\":2,\"649\":3,\"829\":6,\"838\":7,\"839\":4,\"840\":6,\"841\":3,\"843\":1,\"849\":1,\"852\":2,\"963\":1,\"992\":1,\"995\":1}}],[\"logo\",{\"1\":{\"87\":1}}],[\"log\",{\"0\":{\"647\":1},\"1\":{\"54\":2,\"141\":1,\"145\":4,\"153\":2,\"154\":2,\"158\":14,\"159\":14,\"165\":7,\"166\":14,\"167\":6,\"174\":1,\"175\":2,\"221\":2,\"224\":1,\"225\":4,\"226\":2,\"227\":4,\"228\":2,\"229\":3,\"241\":2,\"396\":1,\"499\":1,\"504\":1,\"521\":5,\"522\":1,\"523\":5,\"556\":6,\"582\":1,\"616\":1,\"647\":4,\"648\":3,\"649\":8,\"664\":4,\"676\":2,\"721\":1,\"791\":1,\"798\":1,\"824\":2,\"829\":3,\"839\":4,\"840\":2,\"851\":2,\"953\":1,\"955\":2,\"956\":2,\"960\":2,\"968\":2,\"969\":2,\"977\":1,\"980\":1,\"982\":3,\"984\":1,\"985\":1,\"986\":1,\"989\":1,\"990\":1,\"991\":1,\"993\":1,\"994\":1,\"996\":1,\"998\":1,\"1007\":3,\"1008\":2,\"1030\":1,\"1063\":1}}],[\"logrus\",{\"1\":{\"54\":2}}],[\"loopdepth表示的就是当前语句的循环层数\",{\"1\":{\"1074\":1}}],[\"loopdepth\",{\"1\":{\"1074\":1}}],[\"loop\",{\"1\":{\"116\":1,\"471\":2,\"732\":3,\"1028\":1}}],[\"loopvarexperiment\",{\"1\":{\"116\":1}}],[\"loopclosure\",{\"1\":{\"37\":1}}],[\"looking\",{\"1\":{\"1087\":1}}],[\"looklook\",{\"1\":{\"610\":1}}],[\"look\",{\"1\":{\"34\":1,\"1095\":1,\"1100\":1}}],[\"looks\",{\"1\":{\"16\":1,\"34\":1}}],[\"lookups\",{\"1\":{\"1128\":1}}],[\"lookupmx\",{\"1\":{\"681\":1}}],[\"lookuphost\",{\"1\":{\"681\":1}}],[\"lookup支持的参数如下面代码所示\",{\"1\":{\"556\":1}}],[\"lookup\",{\"1\":{\"7\":2,\"450\":2,\"556\":1}}],[\"loong64\",{\"1\":{\"7\":1}}],[\"lowfree\",{\"1\":{\"918\":1}}],[\"lowtotal\",{\"1\":{\"918\":1}}],[\"lowercase\",{\"1\":{\"840\":1,\"933\":1}}],[\"lowdatetime\",{\"1\":{\"416\":3}}],[\"low与high依旧是原来的含义不变\",{\"1\":{\"371\":1}}],[\"low\",{\"1\":{\"4\":1,\"49\":1,\"371\":3,\"1020\":2,\"1176\":1}}],[\"limbo\",{\"1\":{\"1084\":1}}],[\"limiter\",{\"1\":{\"1140\":1}}],[\"limit记录着已使用内存的末端地址\",{\"1\":{\"1114\":1}}],[\"limit和offset方法常常用于分页查询\",{\"1\":{\"877\":1}}],[\"limit\",{\"0\":{\"877\":1},\"1\":{\"225\":1,\"874\":1,\"875\":3,\"877\":4,\"896\":2,\"897\":2,\"898\":3,\"1114\":1,\"1117\":1}}],[\"live\",{\"1\":{\"1030\":1}}],[\"lisp\",{\"1\":{\"1130\":1}}],[\"lisa\",{\"1\":{\"944\":1}}],[\"lists\",{\"1\":{\"1116\":2}}],[\"listmonk\",{\"1\":{\"71\":2}}],[\"listener\",{\"1\":{\"682\":3}}],[\"listening\",{\"1\":{\"159\":1,\"503\":1,\"561\":1,\"993\":1}}],[\"listen\",{\"1\":{\"145\":3,\"153\":3,\"165\":3,\"682\":1}}],[\"listenandserve\",{\"1\":{\"41\":2,\"557\":2,\"643\":1,\"644\":1,\"645\":2,\"646\":1,\"955\":1,\"956\":1,\"960\":1,\"998\":1,\"1071\":1}}],[\"listed\",{\"1\":{\"21\":1}}],[\"list命令的输出是以行为单位\",{\"1\":{\"21\":1}}],[\"list命令会列出指定位置的包\",{\"1\":{\"20\":1}}],[\"listings\",{\"1\":{\"559\":1}}],[\"listing\",{\"1\":{\"9\":1}}],[\"list就是参数列表\",{\"1\":{\"9\":1}}],[\"list\",{\"0\":{\"20\":1},\"1\":{\"2\":1,\"4\":1,\"7\":10,\"9\":1,\"16\":2,\"17\":2,\"19\":16,\"20\":7,\"21\":2,\"25\":2,\"28\":2,\"31\":1,\"35\":1,\"37\":2,\"38\":2,\"140\":2,\"167\":1,\"234\":3,\"265\":5,\"266\":1,\"267\":4,\"268\":3,\"506\":1,\"507\":1,\"510\":1,\"518\":1,\"519\":1,\"559\":1,\"616\":1,\"758\":1,\"944\":2,\"1057\":2,\"1100\":3,\"1104\":4,\"1112\":9,\"1114\":2,\"1132\":3,\"1166\":1}}],[\"literal\",{\"1\":{\"550\":1,\"551\":1,\"553\":1}}],[\"literals\",{\"1\":{\"16\":2}}],[\"lihua\",{\"1\":{\"341\":3}}],[\"lili\",{\"1\":{\"226\":1,\"227\":3,\"229\":1,\"407\":2,\"550\":1,\"572\":1,\"578\":3,\"856\":3,\"866\":2,\"871\":3,\"897\":6,\"898\":5}}],[\"life\",{\"1\":{\"198\":1}}],[\"liyue201\",{\"1\":{\"58\":1}}],[\"like\",{\"1\":{\"18\":1,\"757\":1,\"1106\":1}}],[\"license\",{\"1\":{\"7\":1,\"507\":1,\"513\":1}}],[\"liblink\",{\"1\":{\"1073\":1,\"1078\":2,\"1086\":4}}],[\"libprotoc\",{\"1\":{\"148\":1,\"200\":1}}],[\"libsum\",{\"1\":{\"545\":2,\"546\":1}}],[\"libs对应gomodcache\",{\"1\":{\"92\":1}}],[\"libs\",{\"1\":{\"29\":1,\"92\":2}}],[\"library\",{\"1\":{\"10\":1,\"21\":2,\"603\":2,\"757\":1,\"848\":2,\"923\":1}}],[\"lib\",{\"1\":{\"7\":3,\"8\":1,\"545\":4,\"546\":2}}],[\"lindex\",{\"1\":{\"267\":1}}],[\"linsertafter\",{\"1\":{\"265\":1}}],[\"linsertbefore\",{\"1\":{\"265\":1}}],[\"linode\",{\"1\":{\"141\":1}}],[\"link指向下一个\",{\"1\":{\"1078\":1}}],[\"link执行下一个defer\",{\"1\":{\"1075\":1}}],[\"link表示下一个链接的defer\",{\"1\":{\"1073\":1}}],[\"link1st\",{\"1\":{\"55\":1}}],[\"linkname的滥用\",{\"1\":{\"114\":1}}],[\"linkname\",{\"0\":{\"44\":1},\"1\":{\"44\":3,\"47\":1,\"114\":1,\"1033\":1}}],[\"linkshared\",{\"1\":{\"21\":1}}],[\"linker\",{\"1\":{\"10\":3,\"21\":1,\"114\":1}}],[\"link\",{\"1\":{\"8\":2,\"10\":1,\"14\":2,\"19\":1,\"114\":1,\"1073\":1,\"1074\":3,\"1075\":1,\"1078\":2,\"1079\":2,\"1080\":2,\"1088\":1,\"1089\":1}}],[\"linux\",{\"0\":{\"91\":1},\"1\":{\"7\":4,\"8\":2,\"11\":3,\"12\":4,\"42\":1,\"91\":3,\"201\":1,\"471\":1,\"729\":1,\"904\":2,\"913\":1,\"1115\":1}}],[\"linter\",{\"1\":{\"156\":1}}],[\"lint\",{\"1\":{\"6\":1,\"37\":1,\"156\":1}}],[\"linearalloc\",{\"1\":{\"1111\":2}}],[\"linearalloc结构体\",{\"1\":{\"1111\":1}}],[\"lineending\",{\"1\":{\"839\":3,\"840\":1}}],[\"lines\",{\"1\":{\"835\":2}}],[\"liner\",{\"1\":{\"504\":1}}],[\"line指令也是唯一一个用法跟其它指令不同的指令\",{\"1\":{\"43\":1}}],[\"line指令会影响其下一行的行号\",{\"1\":{\"43\":1}}],[\"line\",{\"0\":{\"43\":1},\"1\":{\"3\":1,\"4\":1,\"9\":2,\"21\":3,\"33\":1,\"34\":1,\"38\":2,\"43\":3,\"346\":9,\"518\":1,\"521\":3,\"522\":1,\"583\":2,\"584\":6}}],[\"函数来判断协程条件是否需要被抢占\",{\"1\":{\"1106\":1}}],[\"函数来提取子结构\",{\"1\":{\"795\":1}}],[\"函数中的defer数量不能超过\",{\"1\":{\"1076\":1}}],[\"函数中output注释表明了检测函数输出是否为hello\",{\"1\":{\"520\":1}}],[\"函数开头做准备工作的逻辑都是类似的\",{\"1\":{\"1039\":1}}],[\"函数与mapaccess1函数逻辑完全一致\",{\"1\":{\"1036\":1}}],[\"函数用来注册当前实例\",{\"1\":{\"1016\":1}}],[\"函数用于解包一个错误链\",{\"1\":{\"603\":1}}],[\"函数则是一个普通的接口\",{\"1\":{\"1011\":1}}],[\"函数上的注释是文档的基本信息\",{\"1\":{\"1011\":1}}],[\"函数可以获取当前时间\",{\"1\":{\"737\":1}}],[\"函数可以将变量转换成reflect\",{\"1\":{\"431\":1,\"438\":1}}],[\"函数调用\",{\"1\":{\"1108\":1}}],[\"函数调用的格式为函数名后衔接参数列表\",{\"1\":{\"728\":1}}],[\"函数调用期间\",{\"1\":{\"533\":1}}],[\"函数内部发生了panic\",{\"1\":{\"607\":1}}],[\"函数一般作为数据流处理的终结函数来使用\",{\"1\":{\"585\":1}}],[\"函数类型也可以实现接口\",{\"1\":{\"567\":1}}],[\"函数之前要将其转换为\",{\"1\":{\"536\":1}}],[\"函数时\",{\"1\":{\"536\":1}}],[\"函数时可以像\",{\"1\":{\"531\":1}}],[\"函数返回值不能带指针\",{\"1\":{\"533\":1}}],[\"函数参数传递给\",{\"1\":{\"533\":1}}],[\"函数具有多个返回值\",{\"1\":{\"533\":1}}],[\"函数让\",{\"1\":{\"533\":1}}],[\"函数os\",{\"1\":{\"418\":1}}],[\"函数open就是对openfile函数的一个简单封装\",{\"1\":{\"416\":1}}],[\"函数进行操作\",{\"1\":{\"416\":1}}],[\"函数式选项模式只适合于复杂的实例化\",{\"1\":{\"406\":1}}],[\"函数式选项模式在很多开源项目中都能看见\",{\"1\":{\"406\":1}}],[\"函数即可\",{\"1\":{\"406\":1,\"645\":1}}],[\"函数重载会让代码变得混淆和难以理解\",{\"1\":{\"395\":1}}],[\"函数签名由函数名称\",{\"1\":{\"395\":1}}],[\"函数签名如下\",{\"1\":{\"365\":1,\"527\":1,\"605\":1,\"677\":1,\"1026\":1,\"1036\":1}}],[\"函数体\",{\"1\":{\"395\":1}}],[\"函数名称为sum\",{\"1\":{\"395\":1}}],[\"函数名\",{\"1\":{\"395\":1,\"728\":1}}],[\"函数的作用是在错误链中寻找第一个类型匹配的错误\",{\"1\":{\"603\":1}}],[\"函数的参数名变得不再重要\",{\"1\":{\"565\":1}}],[\"函数的参数传递过程中\",{\"1\":{\"414\":1}}],[\"函数的第一个入参必须是t\",{\"1\":{\"527\":1}}],[\"函数的声明格式如下\",{\"1\":{\"395\":1}}],[\"函数的返回值\",{\"1\":{\"323\":1}}],[\"函数的返回规则更为宽松\",{\"1\":{\"136\":1}}],[\"函数是\",{\"1\":{\"394\":1}}],[\"函数是一等公民\",{\"1\":{\"394\":1}}],[\"函数是传值传递\",{\"1\":{\"359\":1}}],[\"函数会为该指针分配内存\",{\"1\":{\"391\":1}}],[\"函数花括号换行\",{\"0\":{\"309\":1}}],[\"函数命名\",{\"1\":{\"298\":1}}],[\"函数\",{\"0\":{\"307\":1,\"394\":1,\"444\":1,\"459\":1,\"728\":1},\"1\":{\"4\":1,\"117\":1,\"162\":1,\"320\":1,\"321\":1,\"387\":1,\"399\":1,\"460\":1,\"533\":1,\"536\":2,\"539\":1,\"701\":1,\"829\":1,\"1054\":1,\"1070\":2,\"1106\":1}}],[\"mgcsweep\",{\"1\":{\"1146\":1}}],[\"mget\",{\"1\":{\"255\":1,\"1089\":1}}],[\"m来将\",{\"1\":{\"1098\":1}}],[\"m0\",{\"1\":{\"1089\":2}}],[\"mreserveid\",{\"1\":{\"1089\":1}}],[\"mcentral其次\",{\"1\":{\"1125\":1}}],[\"mcentral主要负责两个工作\",{\"1\":{\"1117\":1}}],[\"mcentral由mheap堆直接进行管理\",{\"1\":{\"1117\":1}}],[\"mcentral的字段很少\",{\"1\":{\"1117\":1}}],[\"mcentral管理着堆中所有存放着小对象的mspan\",{\"1\":{\"1117\":1}}],[\"mcentral\",{\"0\":{\"1117\":1},\"1\":{\"1113\":1,\"1116\":1,\"1117\":5,\"1118\":3,\"1119\":1,\"1125\":2}}],[\"mcachesys\",{\"1\":{\"1128\":1}}],[\"mcacheinuse\",{\"1\":{\"1128\":1}}],[\"mcache分配的成本最低\",{\"1\":{\"1125\":1}}],[\"mcache中的alloc中的链表都只包含一个空的头结点runtime\",{\"1\":{\"1116\":1}}],[\"mcache是每一个处理器\",{\"1\":{\"1116\":1}}],[\"mcache结构体\",{\"1\":{\"1116\":1}}],[\"mcache对应着runtime\",{\"1\":{\"1116\":1}}],[\"mcache\",{\"0\":{\"1116\":1},\"1\":{\"1089\":1,\"1099\":3,\"1100\":1,\"1113\":1,\"1116\":5,\"1118\":1,\"1119\":2,\"1124\":2,\"1125\":2,\"1126\":1}}],[\"mcall\",{\"1\":{\"1080\":1,\"1098\":1,\"1107\":2}}],[\"mcommoninit函数来初始化\",{\"1\":{\"1089\":1,\"1091\":1}}],[\"mcommoninit\",{\"1\":{\"1089\":2,\"1091\":1}}],[\"m结构体\",{\"1\":{\"1087\":1}}],[\"m在运行时表现为runtime\",{\"1\":{\"1087\":1}}],[\"m正在执行当前\",{\"1\":{\"1086\":1}}],[\"mlink\",{\"1\":{\"1112\":5}}],[\"ml\",{\"1\":{\"1084\":1}}],[\"mksizeclasses\",{\"1\":{\"1114\":1}}],[\"mkcallstmt\",{\"1\":{\"1065\":1}}],[\"mkdirall\",{\"1\":{\"425\":1,\"426\":1}}],[\"mkdir\",{\"1\":{\"14\":1,\"19\":2,\"23\":1,\"425\":2}}],[\"m就等于hash\",{\"1\":{\"1036\":1}}],[\"mheap是\",{\"1\":{\"1118\":1}}],[\"mheap这几个组件构成\",{\"1\":{\"1113\":1}}],[\"mheap\",{\"0\":{\"1118\":1},\"1\":{\"1100\":2,\"1115\":2,\"1116\":5,\"1117\":3,\"1118\":4,\"1119\":2,\"1120\":3,\"1121\":2,\"1122\":2,\"1125\":2,\"1126\":1,\"1129\":2,\"1147\":2,\"1148\":8}}],[\"mhz\",{\"1\":{\"909\":1}}],[\"mholt\",{\"1\":{\"65\":2}}],[\"márk\",{\"1\":{\"798\":1}}],[\"m指matcher\",{\"1\":{\"762\":1}}],[\"m=+3\",{\"1\":{\"742\":1}}],[\"m=+2\",{\"1\":{\"742\":1,\"743\":1}}],[\"m=+1\",{\"1\":{\"741\":1,\"742\":1}}],[\"m=+0\",{\"1\":{\"737\":1,\"743\":1}}],[\"mm\",{\"1\":{\"739\":1}}],[\"mxs\",{\"1\":{\"681\":2}}],[\"m2\",{\"1\":{\"585\":2,\"763\":1}}],[\"mpark\",{\"1\":{\"1093\":2}}],[\"mput\",{\"1\":{\"1093\":1}}],[\"mpreinit函数完成\",{\"1\":{\"1089\":1}}],[\"mpreinit\",{\"1\":{\"1089\":1}}],[\"mpfz0r\",{\"1\":{\"904\":1}}],[\"mp\",{\"1\":{\"382\":7,\"383\":9,\"384\":16,\"385\":11,\"386\":7,\"389\":3,\"748\":2,\"1082\":1,\"1089\":10,\"1091\":12,\"1092\":9,\"1095\":3,\"1096\":3,\"1098\":11,\"1104\":6,\"1106\":5,\"1107\":3,\"1124\":2,\"1148\":2}}],[\"mb\",{\"1\":{\"93\":9,\"820\":2,\"986\":1}}],[\"mjl\",{\"1\":{\"71\":1}}],[\"mspansys\",{\"1\":{\"1128\":1}}],[\"mspanstatebox\",{\"1\":{\"1114\":1}}],[\"mspancache\",{\"1\":{\"1120\":11,\"1121\":5}}],[\"mspan的分配都由mheap\",{\"1\":{\"1120\":1}}],[\"mspanmanual\",{\"1\":{\"1114\":1}}],[\"mspandead\",{\"1\":{\"1114\":1,\"1121\":1}}],[\"mspan总共有三种状态\",{\"1\":{\"1114\":1}}],[\"mspan与mspan之间以双向链表的形式通过next和prev进行链接\",{\"1\":{\"1114\":1}}],[\"mspaninuse\",{\"1\":{\"1114\":2,\"1118\":1,\"1128\":1,\"1147\":1}}],[\"mspan是\",{\"1\":{\"1114\":1}}],[\"mspan\",{\"0\":{\"1114\":1},\"1\":{\"1099\":1,\"1100\":1,\"1114\":3,\"1115\":2,\"1116\":1,\"1117\":2,\"1118\":1,\"1119\":2,\"1120\":6,\"1121\":3,\"1125\":4,\"1126\":1,\"1148\":5}}],[\"ms\",{\"1\":{\"1098\":1}}],[\"mstackissystemallocated\",{\"1\":{\"1092\":1}}],[\"mstart时通过runtime\",{\"1\":{\"1107\":1}}],[\"mstart来启动\",{\"1\":{\"1091\":1}}],[\"mstart来正式启动调度器的运行\",{\"1\":{\"1089\":1}}],[\"mstartfn后\",{\"1\":{\"1089\":1}}],[\"mstartfn\",{\"1\":{\"1089\":1,\"1091\":1}}],[\"mstartm0函数设置用于处理信号的回调\",{\"1\":{\"1089\":1}}],[\"mstartm0\",{\"1\":{\"1089\":1}}],[\"mstart0函数会先初始化\",{\"1\":{\"1089\":1}}],[\"mstart0函数进行创建\",{\"1\":{\"1089\":1}}],[\"mstart1函数中\",{\"1\":{\"1104\":1}}],[\"mstart1\",{\"1\":{\"1089\":1,\"1092\":1}}],[\"mstart\",{\"1\":{\"1089\":3}}],[\"mset\",{\"1\":{\"255\":1}}],[\"msgpackbinding\",{\"1\":{\"971\":1}}],[\"msgpack\",{\"1\":{\"971\":1,\"975\":1}}],[\"msgs\",{\"1\":{\"158\":2,\"1079\":3}}],[\"msgtask\",{\"1\":{\"158\":4}}],[\"msg\",{\"1\":{\"151\":1,\"152\":2,\"153\":1,\"155\":1,\"158\":12,\"159\":12,\"168\":2,\"174\":1,\"324\":1,\"447\":2,\"455\":2,\"496\":2,\"572\":2,\"602\":2,\"603\":5}}],[\"mssqldb\",{\"1\":{\"62\":4}}],[\"msan\",{\"1\":{\"8\":1}}],[\"much\",{\"1\":{\"1102\":1}}],[\"muintptr\",{\"1\":{\"1088\":2}}],[\"muluintptr\",{\"1\":{\"1020\":2,\"1025\":1,\"1034\":1,\"1058\":1}}],[\"mul\",{\"1\":{\"847\":3}}],[\"multiwriter\",{\"1\":{\"1007\":1}}],[\"multipartform\",{\"1\":{\"985\":1}}],[\"multipart\",{\"1\":{\"970\":1}}],[\"multiple\",{\"1\":{\"830\":1,\"1099\":1}}],[\"multibyte\",{\"1\":{\"933\":1}}],[\"multi\",{\"1\":{\"33\":1}}],[\"mu\",{\"1\":{\"828\":1,\"1045\":2,\"1046\":2,\"1048\":2,\"1049\":2,\"1099\":1,\"1100\":2,\"1149\":5,\"1165\":9}}],[\"mutator\",{\"1\":{\"561\":1,\"1131\":1}}],[\"mutexwaitershift\",{\"1\":{\"1153\":1}}],[\"mutexwoken=2\",{\"1\":{\"1151\":1}}],[\"mutexwoken\",{\"1\":{\"1151\":2,\"1153\":2,\"1154\":1}}],[\"mutexstarving=4\",{\"1\":{\"1151\":1}}],[\"mutexstarving\",{\"1\":{\"1151\":2,\"1153\":4,\"1154\":1}}],[\"mutexlocked|mutexwoken|mutexstarving\",{\"1\":{\"1154\":1}}],[\"mutexlocked|mutexstarving\",{\"1\":{\"1152\":1,\"1153\":3}}],[\"mutexlocked=1\",{\"1\":{\"1151\":1}}],[\"mutexlocked\",{\"1\":{\"1151\":2,\"1153\":5,\"1154\":2}}],[\"mutexprofilefraction\",{\"1\":{\"519\":1}}],[\"mutexprofile\",{\"1\":{\"519\":1,\"556\":1}}],[\"mutex是\",{\"1\":{\"480\":1}}],[\"mutex\",{\"0\":{\"1149\":1,\"1151\":1},\"1\":{\"416\":1,\"462\":1,\"480\":1,\"484\":1,\"490\":1,\"519\":1,\"556\":1,\"557\":1,\"828\":1,\"1045\":1,\"1057\":1,\"1086\":1,\"1118\":1,\"1149\":2,\"1151\":3,\"1152\":1,\"1153\":3,\"1154\":2,\"1155\":1,\"1164\":1,\"1165\":1,\"1166\":1,\"1172\":1}}],[\"mux\",{\"1\":{\"557\":3,\"1009\":1}}],[\"mustcompile\",{\"1\":{\"1016\":1}}],[\"mustbindwith\",{\"1\":{\"971\":3}}],[\"mustbool\",{\"1\":{\"817\":1}}],[\"mustparseaddrport\",{\"1\":{\"824\":1}}],[\"mustint\",{\"1\":{\"817\":1}}],[\"mustembedunimplementedsayhelloserver\",{\"1\":{\"152\":3}}],[\"mustache\",{\"1\":{\"60\":3}}],[\"must\",{\"1\":{\"14\":1,\"840\":1,\"1030\":1,\"1037\":2,\"1091\":1,\"1097\":1,\"1099\":1,\"1101\":2,\"1139\":1,\"1140\":1}}],[\"mfiles\",{\"1\":{\"21\":1}}],[\"m参数可以分析每一个包的导入情况\",{\"1\":{\"30\":1}}],[\"m参数时\",{\"1\":{\"20\":1}}],[\"m参数输出二进制文件的模块信息\",{\"1\":{\"6\":1}}],[\"mv\",{\"1\":{\"19\":1}}],[\"mexit\",{\"1\":{\"1092\":1}}],[\"meaningful\",{\"1\":{\"1024\":1}}],[\"mergedwritecount\",{\"1\":{\"916\":2}}],[\"mergedreadcount\",{\"1\":{\"916\":2}}],[\"mercure\",{\"1\":{\"788\":1}}],[\"mercurial\",{\"1\":{\"18\":1,\"493\":1}}],[\"mediumint\",{\"1\":{\"862\":1}}],[\"megaset\",{\"1\":{\"823\":1}}],[\"meet\",{\"1\":{\"527\":4,\"717\":4}}],[\"metrics\",{\"1\":{\"561\":1}}],[\"methodget\",{\"1\":{\"1016\":1}}],[\"methodbyname\",{\"1\":{\"452\":1}}],[\"method结构体如下\",{\"1\":{\"451\":1}}],[\"methods\",{\"1\":{\"428\":1,\"958\":1,\"1000\":1,\"1114\":1}}],[\"methodconfig\",{\"1\":{\"175\":1}}],[\"method\",{\"1\":{\"152\":1,\"158\":2,\"166\":21,\"414\":1,\"451\":17,\"540\":1,\"563\":2,\"778\":1,\"779\":1,\"782\":1,\"783\":1,\"958\":1,\"990\":2,\"1000\":4,\"1007\":1,\"1016\":1,\"1069\":1}}],[\"metadata\",{\"0\":{\"160\":1},\"1\":{\"147\":1,\"158\":3,\"159\":4,\"160\":6,\"161\":8,\"162\":13,\"163\":17,\"168\":2}}],[\"me\",{\"1\":{\"99\":1,\"102\":1}}],[\"memstats结构体记录了有关堆内存\",{\"1\":{\"1128\":1}}],[\"memstats\",{\"1\":{\"1119\":8,\"1122\":1,\"1128\":2}}],[\"memclrhaspointers\",{\"1\":{\"1027\":2,\"1039\":2,\"1042\":1}}],[\"memclrnoheappointers\",{\"1\":{\"1025\":1,\"1027\":3,\"1039\":1,\"1095\":1,\"1112\":1,\"1125\":1,\"1126\":1}}],[\"memclr\",{\"1\":{\"1024\":1,\"1027\":1}}],[\"memmove直接复制到新的栈空间中\",{\"1\":{\"1101\":1}}],[\"memmove来拷贝函数的参数\",{\"1\":{\"1095\":1}}],[\"memmove函数将通信数据的内存直接复制到接收方协程的目标元素地址上\",{\"1\":{\"1059\":1}}],[\"memmove函数是由汇编实现的\",{\"1\":{\"1026\":1}}],[\"memmove\",{\"1\":{\"1024\":1,\"1025\":1,\"1026\":3,\"1054\":1,\"1059\":1,\"1101\":1}}],[\"mem>\",{\"1\":{\"1021\":1}}],[\"mem\",{\"1\":{\"519\":1,\"918\":1,\"919\":1,\"920\":1,\"1020\":7,\"1034\":2,\"1058\":3,\"1074\":1}}],[\"memprofilerate查看更多细节\",{\"1\":{\"519\":1}}],[\"memprofilerate\",{\"1\":{\"519\":1}}],[\"memprofile\",{\"1\":{\"519\":1}}],[\"memory\",{\"0\":{\"1109\":1},\"1\":{\"463\":2,\"751\":1,\"918\":2,\"919\":2,\"1077\":1,\"1100\":1,\"1111\":1,\"1116\":1}}],[\"member\",{\"1\":{\"278\":2,\"281\":1}}],[\"members\",{\"1\":{\"143\":1,\"144\":6}}],[\"memberlist\",{\"1\":{\"84\":2}}],[\"memhash64\",{\"1\":{\"114\":1}}],[\"memhash的作用是给定一个指针\",{\"1\":{\"44\":1}}],[\"memhash这个私有函数与我们自己声明的函数链接到了一起\",{\"1\":{\"44\":1}}],[\"memhash\",{\"1\":{\"44\":6,\"47\":3,\"1033\":1}}],[\"messagekey\",{\"1\":{\"839\":3,\"840\":2}}],[\"messageoptions\",{\"1\":{\"202\":1}}],[\"message里面可以嵌套声明message\",{\"1\":{\"191\":1}}],[\"message声明的方式类似于结构体\",{\"1\":{\"181\":1}}],[\"messagequeue\",{\"1\":{\"158\":7,\"159\":8}}],[\"message\",{\"1\":{\"21\":1,\"24\":1,\"107\":1,\"151\":2,\"152\":1,\"157\":3,\"158\":33,\"159\":28,\"162\":1,\"164\":1,\"167\":8,\"168\":5,\"181\":2,\"182\":1,\"185\":1,\"186\":1,\"187\":1,\"188\":1,\"189\":1,\"190\":2,\"191\":5,\"192\":2,\"194\":2,\"195\":3,\"196\":2,\"202\":3,\"284\":1,\"496\":1,\"629\":1,\"723\":3,\"840\":3,\"965\":2,\"981\":1,\"1011\":2,\"1013\":2}}],[\"messageserviceclient\",{\"1\":{\"158\":1}}],[\"messageservice\",{\"1\":{\"157\":3,\"158\":15}}],[\"messagestate\",{\"1\":{\"152\":2,\"167\":1}}],[\"messages\",{\"1\":{\"9\":2,\"14\":1,\"167\":1}}],[\"mybar\",{\"1\":{\"828\":3}}],[\"mybuilder\",{\"1\":{\"175\":5}}],[\"myfoo\",{\"1\":{\"828\":3}}],[\"myfooer\",{\"1\":{\"826\":7}}],[\"myfloat64\",{\"1\":{\"593\":4,\"595\":2}}],[\"myclaims\",{\"1\":{\"781\":2,\"784\":2,\"785\":3}}],[\"myhandler\",{\"1\":{\"645\":3}}],[\"myerr\",{\"1\":{\"603\":3}}],[\"mymap\",{\"1\":{\"486\":2,\"593\":1,\"594\":4}}],[\"mymessage\",{\"1\":{\"202\":2}}],[\"myinterface\",{\"1\":{\"436\":2,\"437\":2}}],[\"myint\",{\"1\":{\"413\":12,\"414\":8,\"593\":2}}],[\"myio\",{\"1\":{\"123\":1}}],[\"mysg\",{\"1\":{\"1059\":12,\"1060\":11}}],[\"mysession\",{\"1\":{\"1003\":1}}],[\"mysession即session名称\",{\"1\":{\"1003\":1}}],[\"mysigningkey\",{\"1\":{\"780\":2}}],[\"mysocket\",{\"1\":{\"680\":1}}],[\"myslice\",{\"1\":{\"484\":8}}],[\"mystruct\",{\"1\":{\"436\":3,\"437\":3}}],[\"mysalary\",{\"1\":{\"294\":1}}],[\"mysqlclient\",{\"1\":{\"824\":5}}],[\"mysql\",{\"0\":{\"230\":1},\"1\":{\"62\":11,\"175\":1,\"230\":1,\"231\":5,\"232\":2,\"234\":2,\"295\":1,\"621\":1,\"623\":1,\"791\":1,\"824\":1,\"851\":12,\"852\":1}}],[\"myname\",{\"1\":{\"294\":1,\"295\":1}}],[\"my\",{\"1\":{\"202\":3,\"436\":3,\"437\":3,\"509\":2,\"645\":1,\"717\":4,\"779\":1,\"781\":1,\"782\":1,\"783\":1,\"784\":1,\"792\":3,\"817\":3}}],[\"myworld\",{\"1\":{\"175\":4}}],[\"myresolver\",{\"1\":{\"145\":3,\"175\":8}}],[\"myorganization\",{\"1\":{\"7\":1}}],[\"myproject\",{\"1\":{\"7\":1}}],[\"myproject的依赖都不会走代理和\",{\"1\":{\"7\":1}}],[\"mdestroy\",{\"1\":{\"1092\":1}}],[\"md5\",{\"1\":{\"934\":2}}],[\"md4\",{\"1\":{\"934\":2}}],[\"md2man\",{\"1\":{\"504\":1}}],[\"md2\",{\"1\":{\"161\":2}}],[\"md1\",{\"1\":{\"161\":2}}],[\"mds\",{\"1\":{\"161\":1}}],[\"mdctx\",{\"1\":{\"159\":2}}],[\"mdns\",{\"1\":{\"141\":1}}],[\"md\",{\"1\":{\"7\":3,\"158\":3,\"159\":2,\"160\":5,\"161\":6,\"162\":10,\"163\":14,\"499\":2,\"507\":1,\"513\":1,\"821\":1,\"923\":1,\"926\":1}}],[\"might\",{\"1\":{\"1097\":2,\"1098\":1,\"1101\":1,\"1107\":1}}],[\"migratecolumn\",{\"1\":{\"863\":1}}],[\"migrator\",{\"1\":{\"863\":3,\"864\":1,\"893\":1}}],[\"migration\",{\"1\":{\"862\":1}}],[\"midle\",{\"1\":{\"1088\":1}}],[\"middlebb\",{\"1\":{\"191\":1}}],[\"middleaa\",{\"1\":{\"191\":1}}],[\"middleware\",{\"1\":{\"164\":1,\"166\":1,\"503\":1,\"992\":1,\"1003\":1}}],[\"milli\",{\"1\":{\"856\":1,\"859\":2,\"862\":3}}],[\"milliseconds\",{\"1\":{\"856\":1,\"859\":2}}],[\"millisecond\",{\"1\":{\"158\":1,\"159\":1,\"462\":6,\"467\":1,\"471\":2,\"476\":1,\"477\":4,\"478\":1,\"479\":2,\"480\":2,\"481\":4,\"482\":4,\"606\":2,\"738\":2,\"1106\":1,\"1165\":1}}],[\"mit\",{\"1\":{\"735\":2,\"736\":2,\"812\":9,\"813\":3,\"895\":5,\"897\":5,\"898\":9,\"899\":1}}],[\"mitchellh\",{\"1\":{\"56\":1}}],[\"miki\",{\"1\":{\"578\":1}}],[\"mike\",{\"1\":{\"158\":16,\"159\":23,\"166\":2,\"167\":2,\"223\":1,\"225\":2,\"406\":1,\"460\":5,\"572\":1,\"578\":1,\"688\":1,\"689\":1,\"730\":1,\"765\":2,\"866\":2,\"875\":4,\"895\":4,\"898\":2,\"899\":2,\"944\":1}}],[\"mib\",{\"1\":{\"499\":1}}],[\"minframesize\",{\"1\":{\"1095\":2}}],[\"mintophash\",{\"1\":{\"1030\":1,\"1042\":1}}],[\"min=1\",{\"1\":{\"945\":1,\"948\":1}}],[\"min=5\",{\"1\":{\"944\":1}}],[\"minute\",{\"1\":{\"738\":2}}],[\"minduration\",{\"1\":{\"738\":1}}],[\"mingw\",{\"1\":{\"529\":1}}],[\"mingrammer\",{\"1\":{\"80\":1}}],[\"minor\",{\"1\":{\"505\":2}}],[\"minval\",{\"1\":{\"332\":1}}],[\"minit的工作\",{\"1\":{\"1092\":1}}],[\"minit两个函数负责初始化系统栈\",{\"1\":{\"1089\":1}}],[\"minit\",{\"1\":{\"1089\":1}}],[\"minint64\",{\"1\":{\"651\":1}}],[\"minint32\",{\"1\":{\"651\":1}}],[\"minint16\",{\"1\":{\"651\":1}}],[\"minint8\",{\"1\":{\"651\":1}}],[\"minint\",{\"1\":{\"651\":1}}],[\"minimizing\",{\"1\":{\"527\":2}}],[\"minimum\",{\"1\":{\"205\":2,\"561\":1}}],[\"minidleconns\",{\"1\":{\"242\":1}}],[\"minretrybackoff\",{\"1\":{\"242\":1}}],[\"min\",{\"1\":{\"141\":3,\"280\":1,\"332\":1,\"655\":1,\"936\":1,\"944\":2,\"1041\":1,\"1112\":3}}],[\"microcode\",{\"1\":{\"909\":1}}],[\"microsecond\",{\"1\":{\"738\":2}}],[\"microsoft\",{\"1\":{\"20\":1,\"24\":1,\"27\":1,\"62\":2,\"907\":1}}],[\"micro\",{\"1\":{\"53\":3}}],[\"misuse\",{\"1\":{\"1177\":4}}],[\"miss\",{\"1\":{\"1046\":1}}],[\"misslocked\",{\"1\":{\"1046\":2,\"1048\":1}}],[\"misses++\",{\"1\":{\"1046\":1}}],[\"misses清零\",{\"1\":{\"1045\":1}}],[\"misses记录了\",{\"1\":{\"1045\":1}}],[\"misses\",{\"1\":{\"1045\":2,\"1046\":3,\"1049\":1}}],[\"missing\",{\"1\":{\"9\":1,\"17\":2,\"22\":1,\"37\":1,\"201\":1,\"324\":1,\"341\":1}}],[\"mismatched\",{\"1\":{\"332\":1,\"591\":1,\"593\":1}}],[\"mismatches\",{\"1\":{\"37\":1}}],[\"mistakes\",{\"1\":{\"37\":2}}],[\"misc\",{\"1\":{\"7\":1}}],[\"mipsle\",{\"1\":{\"7\":1}}],[\"mips64le\",{\"1\":{\"7\":1}}],[\"mips64\",{\"1\":{\"7\":1}}],[\"mips\",{\"1\":{\"7\":1}}],[\"mirror\",{\"1\":{\"7\":1}}],[\"m\",{\"0\":{\"1087\":1},\"1\":{\"6\":2,\"9\":1,\"18\":1,\"20\":3,\"21\":2,\"28\":2,\"30\":1,\"132\":2,\"133\":2,\"158\":6,\"159\":1,\"160\":1,\"161\":1,\"162\":1,\"166\":6,\"175\":11,\"222\":3,\"225\":1,\"385\":1,\"387\":7,\"436\":1,\"437\":1,\"484\":22,\"485\":1,\"486\":6,\"499\":6,\"506\":1,\"509\":1,\"550\":5,\"551\":2,\"552\":2,\"553\":4,\"556\":1,\"585\":11,\"603\":2,\"759\":1,\"762\":3,\"764\":1,\"765\":1,\"766\":1,\"767\":1,\"1036\":2,\"1042\":2,\"1045\":2,\"1046\":19,\"1047\":19,\"1048\":10,\"1049\":11,\"1079\":2,\"1082\":1,\"1083\":1,\"1085\":6,\"1086\":7,\"1087\":9,\"1088\":10,\"1089\":30,\"1090\":2,\"1091\":11,\"1092\":7,\"1093\":10,\"1095\":4,\"1096\":4,\"1097\":25,\"1098\":6,\"1100\":5,\"1101\":1,\"1104\":9,\"1106\":6,\"1107\":2,\"1120\":3,\"1121\":1,\"1128\":4,\"1139\":3,\"1152\":3,\"1153\":12,\"1154\":7,\"1172\":2,\"1173\":2}}],[\"malg\",{\"1\":{\"1095\":2,\"1100\":1}}],[\"mallocs\",{\"1\":{\"1091\":1,\"1128\":2}}],[\"mallocinit\",{\"1\":{\"1089\":1,\"1119\":1}}],[\"mallocing\",{\"1\":{\"1087\":2,\"1106\":1,\"1124\":1}}],[\"mallocgc分配内存时\",{\"1\":{\"1132\":1}}],[\"mallocgc函数分配内存前被调用\",{\"1\":{\"1139\":1}}],[\"mallocgc函数\",{\"1\":{\"1116\":1}}],[\"mallocgc\",{\"1\":{\"1020\":1,\"1025\":1,\"1053\":1,\"1054\":1,\"1058\":3,\"1123\":2,\"1132\":1,\"1139\":1}}],[\"malloc\",{\"1\":{\"536\":2}}],[\"major\",{\"1\":{\"505\":3}}],[\"maven\",{\"1\":{\"501\":1}}],[\"martini\",{\"1\":{\"962\":1}}],[\"marshalindent\",{\"1\":{\"618\":1,\"619\":1,\"627\":2}}],[\"marshaling\",{\"1\":{\"517\":2}}],[\"marshal\",{\"1\":{\"618\":1,\"621\":1,\"622\":1,\"624\":1,\"625\":1,\"629\":1,\"639\":1,\"798\":1}}],[\"mariadb\",{\"1\":{\"231\":1}}],[\"markdrained\",{\"1\":{\"1147\":1}}],[\"markstarttime\",{\"1\":{\"1138\":1}}],[\"marking\",{\"1\":{\"1086\":1,\"1138\":2}}],[\"markbucketsempty\",{\"1\":{\"1040\":2}}],[\"markup\",{\"1\":{\"618\":1}}],[\"mark\",{\"1\":{\"227\":3,\"1047\":1,\"1086\":1,\"1098\":1,\"1121\":1,\"1138\":1,\"1140\":1}}],[\"management\",{\"1\":{\"1003\":1}}],[\"man接口方法集是person的超集\",{\"1\":{\"567\":1}}],[\"man\",{\"1\":{\"567\":1,\"748\":2}}],[\"manual\",{\"1\":{\"218\":1}}],[\"many2many\",{\"1\":{\"862\":1,\"893\":2,\"898\":1}}],[\"many\",{\"1\":{\"31\":1,\"995\":1,\"1041\":1,\"1042\":1,\"1116\":1,\"1138\":1}}],[\"mask\",{\"1\":{\"200\":1,\"1040\":2,\"1042\":2}}],[\"master\",{\"1\":{\"52\":1,\"168\":1,\"194\":1,\"222\":1,\"223\":1,\"226\":1,\"227\":1,\"228\":1,\"229\":1,\"802\":1,\"831\":1,\"926\":2,\"953\":1}}],[\"maxtinysize\",{\"1\":{\"1124\":5}}],[\"maxtinysize常量来决定\",{\"1\":{\"1124\":1}}],[\"maxsmallsize\",{\"1\":{\"1124\":1}}],[\"maxsize\",{\"1\":{\"840\":4,\"841\":2}}],[\"maxwhen\",{\"1\":{\"1098\":1}}],[\"maxmcount\",{\"1\":{\"1089\":2}}],[\"maxmultipartmemory来设置文件传输的最大内存\",{\"1\":{\"986\":1}}],[\"maxalloc\",{\"1\":{\"1020\":2,\"1025\":1,\"1034\":1}}],[\"maximum\",{\"1\":{\"1014\":1}}],[\"maxint64\",{\"1\":{\"651\":1}}],[\"maxint32\",{\"1\":{\"651\":1,\"1058\":1}}],[\"maxint16\",{\"1\":{\"651\":1}}],[\"maxint\",{\"1\":{\"651\":1}}],[\"maxint8\",{\"1\":{\"535\":2,\"651\":1,\"995\":1}}],[\"maxlength\",{\"1\":{\"1014\":1}}],[\"max=10\",{\"1\":{\"948\":1}}],[\"max=5\",{\"1\":{\"944\":1,\"945\":1}}],[\"maxbackups\",{\"1\":{\"841\":1}}],[\"maxduration\",{\"1\":{\"738\":1}}],[\"maxfloat64\",{\"1\":{\"652\":1}}],[\"maxfloat32\",{\"1\":{\"652\":1}}],[\"maxuint64\",{\"1\":{\"651\":1}}],[\"maxuint32\",{\"1\":{\"651\":1}}],[\"maxuint16\",{\"1\":{\"651\":1}}],[\"maxuint8\",{\"1\":{\"651\":1}}],[\"maxuint\",{\"1\":{\"651\":1}}],[\"maxheaderbytes\",{\"1\":{\"644\":1,\"998\":1}}],[\"maxval\",{\"1\":{\"332\":1}}],[\"max函数只支持浮点数\",{\"1\":{\"332\":1}}],[\"maxconnage\",{\"1\":{\"242\":1}}],[\"maxcode\",{\"1\":{\"168\":1}}],[\"maxretrybackoff\",{\"1\":{\"242\":1}}],[\"maxretries\",{\"1\":{\"242\":1}}],[\"max\",{\"1\":{\"116\":1,\"280\":1,\"332\":1,\"371\":2,\"445\":2,\"446\":1,\"654\":1,\"795\":2,\"936\":1}}],[\"maddy\",{\"1\":{\"71\":2}}],[\"magiconair\",{\"1\":{\"63\":1}}],[\"mailservice\",{\"1\":{\"477\":2}}],[\"mail\",{\"1\":{\"71\":4,\"477\":8,\"629\":4}}],[\"mailru\",{\"1\":{\"63\":1}}],[\"mainpc\",{\"1\":{\"1089\":2}}],[\"mainstarted\",{\"1\":{\"1082\":1,\"1095\":1}}],[\"main函数中查看到\",{\"1\":{\"1082\":1}}],[\"maintained\",{\"1\":{\"776\":1}}],[\"mainwait\",{\"1\":{\"472\":8}}],[\"main\",{\"1\":{\"4\":1,\"6\":1,\"7\":1,\"8\":5,\"9\":25,\"10\":6,\"11\":3,\"12\":4,\"13\":5,\"14\":1,\"15\":3,\"16\":11,\"17\":30,\"19\":1,\"20\":4,\"21\":5,\"37\":7,\"40\":2,\"41\":7,\"43\":5,\"44\":3,\"45\":8,\"108\":2,\"111\":2,\"112\":2,\"114\":3,\"115\":1,\"116\":1,\"140\":1,\"145\":4,\"150\":2,\"153\":3,\"154\":3,\"158\":6,\"159\":5,\"164\":3,\"165\":2,\"166\":2,\"167\":1,\"174\":1,\"175\":2,\"202\":1,\"207\":1,\"208\":1,\"209\":1,\"210\":1,\"212\":1,\"213\":1,\"214\":1,\"215\":1,\"216\":3,\"221\":2,\"234\":1,\"238\":1,\"292\":2,\"295\":7,\"296\":1,\"297\":2,\"307\":1,\"309\":2,\"329\":2,\"332\":3,\"333\":2,\"334\":2,\"337\":2,\"338\":2,\"339\":2,\"340\":2,\"341\":2,\"343\":1,\"344\":2,\"345\":1,\"346\":1,\"348\":3,\"349\":2,\"350\":4,\"351\":1,\"352\":1,\"354\":1,\"355\":1,\"356\":2,\"357\":2,\"362\":3,\"368\":1,\"369\":2,\"371\":1,\"372\":3,\"375\":5,\"376\":3,\"377\":2,\"378\":2,\"379\":3,\"380\":5,\"382\":1,\"383\":3,\"384\":3,\"385\":2,\"386\":2,\"387\":2,\"388\":1,\"389\":1,\"391\":6,\"392\":3,\"398\":2,\"399\":2,\"400\":3,\"401\":1,\"402\":5,\"406\":2,\"411\":1,\"412\":1,\"413\":2,\"414\":6,\"416\":4,\"417\":3,\"418\":3,\"419\":3,\"420\":1,\"421\":2,\"422\":1,\"424\":2,\"425\":1,\"431\":1,\"432\":1,\"433\":2,\"434\":1,\"435\":1,\"436\":1,\"437\":1,\"438\":1,\"439\":1,\"440\":1,\"441\":2,\"442\":1,\"443\":1,\"445\":1,\"446\":1,\"448\":2,\"449\":2,\"450\":1,\"451\":5,\"452\":1,\"454\":1,\"455\":1,\"456\":1,\"457\":1,\"458\":1,\"459\":1,\"460\":2,\"462\":5,\"464\":1,\"465\":1,\"466\":2,\"467\":4,\"468\":8,\"469\":2,\"470\":3,\"471\":7,\"472\":3,\"476\":1,\"477\":2,\"478\":1,\"479\":1,\"480\":1,\"481\":1,\"482\":1,\"484\":1,\"485\":1,\"486\":3,\"487\":1,\"489\":2,\"491\":2,\"496\":3,\"498\":2,\"499\":12,\"503\":3,\"504\":1,\"513\":3,\"527\":1,\"530\":4,\"531\":4,\"532\":2,\"533\":4,\"534\":2,\"535\":3,\"536\":8,\"537\":2,\"538\":2,\"539\":4,\"540\":3,\"541\":3,\"542\":2,\"543\":4,\"545\":6,\"546\":3,\"547\":2,\"550\":14,\"551\":16,\"552\":7,\"553\":22,\"556\":6,\"557\":4,\"559\":7,\"566\":1,\"567\":2,\"568\":3,\"572\":1,\"574\":3,\"575\":1,\"578\":1,\"581\":1,\"583\":2,\"585\":8,\"587\":4,\"588\":1,\"591\":2,\"598\":3,\"603\":9,\"604\":1,\"605\":1,\"606\":5,\"607\":3,\"608\":1,\"619\":1,\"620\":1,\"622\":1,\"623\":1,\"625\":1,\"627\":1,\"628\":1,\"629\":2,\"636\":4,\"638\":1,\"639\":1,\"641\":1,\"642\":1,\"644\":1,\"645\":2,\"646\":1,\"647\":1,\"648\":2,\"649\":1,\"675\":2,\"676\":2,\"677\":2,\"678\":2,\"679\":2,\"680\":2,\"681\":4,\"682\":4,\"684\":1,\"685\":1,\"686\":1,\"687\":1,\"688\":1,\"689\":1,\"723\":2,\"725\":4,\"727\":1,\"733\":1,\"734\":1,\"736\":1,\"740\":1,\"741\":1,\"742\":1,\"743\":1,\"748\":1,\"749\":1,\"750\":1,\"751\":4,\"752\":1,\"753\":2,\"754\":1,\"755\":1,\"756\":1,\"805\":4,\"812\":3,\"813\":1,\"817\":3,\"820\":2,\"821\":1,\"823\":2,\"824\":4,\"833\":2,\"847\":2,\"851\":4,\"907\":1,\"909\":1,\"910\":1,\"911\":1,\"912\":1,\"914\":1,\"915\":1,\"916\":1,\"918\":1,\"919\":1,\"920\":1,\"923\":1,\"955\":2,\"956\":2,\"960\":2,\"965\":2,\"968\":2,\"969\":2,\"970\":2,\"971\":2,\"977\":1,\"980\":1,\"982\":2,\"984\":1,\"985\":1,\"986\":1,\"988\":1,\"989\":1,\"990\":1,\"991\":1,\"993\":1,\"994\":1,\"995\":3,\"996\":1,\"998\":1,\"999\":1,\"1002\":1,\"1003\":1,\"1007\":2,\"1008\":2,\"1011\":5,\"1019\":9,\"1027\":2,\"1038\":3,\"1051\":2,\"1052\":2,\"1053\":1,\"1054\":3,\"1056\":1,\"1063\":1,\"1066\":4,\"1067\":7,\"1069\":2,\"1070\":3,\"1071\":3,\"1077\":2,\"1082\":1,\"1083\":1,\"1106\":1,\"1149\":1,\"1165\":2,\"1171\":2,\"1175\":2}}],[\"makebucketarray函数中的如下代码\",{\"1\":{\"1034\":1}}],[\"makebucketarray函数会根据\",{\"1\":{\"1034\":1}}],[\"makebucketarray\",{\"1\":{\"1034\":1,\"1040\":1,\"1042\":1,\"1043\":1}}],[\"makemap\",{\"1\":{\"1034\":1}}],[\"makemap来创建\",{\"1\":{\"1034\":1}}],[\"makemapwithsize\",{\"1\":{\"457\":2}}],[\"makeresult\",{\"1\":{\"1021\":1}}],[\"makespanclass\",{\"1\":{\"1125\":1,\"1126\":1}}],[\"makes\",{\"1\":{\"823\":1,\"1030\":1,\"1080\":1}}],[\"makeslice\",{\"1\":{\"456\":2,\"555\":2,\"559\":3,\"560\":3,\"1020\":4}}],[\"make函数接收两个参数\",{\"1\":{\"464\":1}}],[\"make函数接收三个参数\",{\"1\":{\"364\":1}}],[\"makefunc\",{\"1\":{\"459\":2}}],[\"makefile\",{\"1\":{\"40\":1}}],[\"makechan64\",{\"1\":{\"1058\":1}}],[\"makechan64函数来进行创建\",{\"1\":{\"1058\":1}}],[\"makechan的调用\",{\"1\":{\"1058\":1}}],[\"makechan函数的调用\",{\"1\":{\"1058\":1}}],[\"makechan\",{\"1\":{\"458\":4,\"1058\":3,\"1066\":1,\"1067\":1}}],[\"make\",{\"0\":{\"393\":1},\"1\":{\"22\":1,\"31\":1,\"159\":1,\"175\":1,\"344\":1,\"364\":1,\"365\":1,\"368\":1,\"370\":3,\"378\":1,\"382\":2,\"384\":3,\"385\":1,\"386\":1,\"388\":1,\"389\":1,\"393\":4,\"414\":3,\"417\":1,\"460\":2,\"462\":2,\"464\":3,\"465\":1,\"466\":2,\"467\":7,\"468\":5,\"469\":1,\"470\":3,\"471\":14,\"484\":2,\"486\":1,\"551\":6,\"552\":5,\"553\":5,\"572\":1,\"682\":1,\"721\":1,\"748\":2,\"812\":2,\"813\":2,\"841\":1,\"944\":1,\"1019\":6,\"1021\":1,\"1023\":1,\"1024\":2,\"1026\":2,\"1027\":1,\"1030\":1,\"1038\":1,\"1047\":2,\"1056\":1,\"1058\":1,\"1063\":1,\"1066\":3,\"1067\":5,\"1074\":1,\"1089\":2,\"1091\":1,\"1122\":1}}],[\"mapmemory\",{\"1\":{\"1111\":1}}],[\"map并不适用于所有情况\",{\"1\":{\"1050\":1}}],[\"map采用了读写分离的方式来进行并发控制\",{\"1\":{\"1050\":1}}],[\"map大致的工作逻辑\",{\"1\":{\"1045\":1}}],[\"map是一个并发安全的\",{\"1\":{\"1044\":1}}],[\"map是官方提供的一种并发安全\",{\"1\":{\"486\":1}}],[\"mapclear\",{\"1\":{\"1040\":1}}],[\"mapclear函数\",{\"1\":{\"1040\":1}}],[\"mapclaims\",{\"1\":{\"779\":1,\"782\":1}}],[\"mapclaims是payload\",{\"1\":{\"779\":1}}],[\"mapdelete\",{\"1\":{\"1039\":1}}],[\"mapdelete函数\",{\"1\":{\"1039\":1}}],[\"mapassign\",{\"1\":{\"1038\":3}}],[\"mapassign函数来完成\",{\"1\":{\"1038\":1}}],[\"mapaccessk\",{\"1\":{\"1037\":2}}],[\"mapaccess1函数中的如下代码\",{\"1\":{\"1042\":1}}],[\"mapaccess1\",{\"1\":{\"1036\":1}}],[\"mapaccess1和runtime\",{\"1\":{\"1036\":1}}],[\"mapaccess2\",{\"1\":{\"1036\":3}}],[\"mapiternext\",{\"1\":{\"1037\":1}}],[\"mapiterinit\",{\"1\":{\"1037\":1}}],[\"mapiterinit函数来初始化遍历器\",{\"1\":{\"1037\":1}}],[\"mapinternext对\",{\"1\":{\"1037\":1}}],[\"maptype\",{\"1\":{\"1034\":1,\"1036\":2,\"1037\":4,\"1038\":1,\"1039\":1,\"1040\":1,\"1041\":1,\"1042\":4}}],[\"mapbucketcount\",{\"1\":{\"1032\":1}}],[\"mapbuckettype\",{\"1\":{\"1030\":2}}],[\"mapextra\",{\"1\":{\"1030\":1,\"1032\":1,\"1034\":1,\"1040\":1,\"1042\":1}}],[\"map|swagger\",{\"1\":{\"1016\":3}}],[\"mapped\",{\"1\":{\"918\":1,\"1111\":2,\"1122\":1}}],[\"mappings\",{\"1\":{\"207\":2,\"208\":1}}],[\"mapping\",{\"1\":{\"160\":1,\"713\":1}}],[\"map操作包\",{\"1\":{\"616\":1}}],[\"mapfn\",{\"1\":{\"587\":2}}],[\"map就可以避免这个问题\",{\"1\":{\"486\":1}}],[\"map的性能要比\",{\"1\":{\"486\":1}}],[\"map的基本使用\",{\"1\":{\"486\":1}}],[\"map的实现是基于哈希桶\",{\"1\":{\"381\":1}}],[\"map来替代\",{\"1\":{\"389\":1}}],[\"map<key\",{\"1\":{\"186\":1}}],[\"map<string\",{\"1\":{\"168\":1,\"186\":1,\"187\":1,\"188\":1,\"190\":2}}],[\"maps\",{\"1\":{\"585\":13,\"616\":1}}],[\"maps库新增了若干个迭代器函数\",{\"1\":{\"114\":1}}],[\"mapstructure\",{\"1\":{\"56\":2,\"840\":13}}],[\"map\",{\"0\":{\"186\":1,\"457\":1,\"486\":1,\"943\":1,\"1029\":1},\"1\":{\"21\":2,\"56\":1,\"58\":3,\"116\":2,\"128\":1,\"129\":1,\"131\":2,\"132\":3,\"134\":1,\"137\":5,\"158\":2,\"159\":1,\"160\":3,\"161\":4,\"164\":1,\"175\":6,\"186\":2,\"187\":1,\"222\":1,\"258\":7,\"259\":1,\"260\":1,\"261\":1,\"262\":1,\"263\":1,\"298\":1,\"320\":1,\"381\":1,\"382\":14,\"383\":8,\"384\":6,\"385\":7,\"386\":4,\"387\":5,\"388\":4,\"389\":6,\"393\":1,\"396\":1,\"432\":3,\"433\":1,\"441\":5,\"457\":3,\"486\":14,\"553\":1,\"556\":1,\"568\":4,\"572\":1,\"580\":1,\"585\":19,\"587\":3,\"593\":1,\"594\":7,\"604\":3,\"713\":5,\"723\":1,\"725\":7,\"727\":1,\"728\":2,\"730\":2,\"731\":2,\"732\":1,\"733\":6,\"734\":1,\"735\":1,\"736\":1,\"748\":2,\"778\":1,\"779\":2,\"782\":1,\"784\":1,\"791\":3,\"797\":2,\"810\":1,\"812\":5,\"813\":4,\"839\":1,\"849\":2,\"852\":3,\"886\":3,\"887\":2,\"916\":1,\"926\":2,\"927\":2,\"936\":1,\"943\":6,\"945\":1,\"952\":4,\"953\":2,\"970\":1,\"981\":1,\"1016\":3,\"1029\":1,\"1030\":6,\"1033\":2,\"1034\":4,\"1035\":2,\"1036\":6,\"1037\":12,\"1038\":10,\"1039\":4,\"1040\":5,\"1041\":1,\"1042\":8,\"1043\":3,\"1044\":1,\"1045\":8,\"1046\":2,\"1047\":5,\"1048\":1,\"1049\":1,\"1050\":3,\"1054\":1,\"1070\":2,\"1071\":2}}],[\"matcornic\",{\"1\":{\"71\":1}}],[\"matches\",{\"1\":{\"1016\":4}}],[\"matcher还支持in语法\",{\"1\":{\"762\":1}}],[\"matchers\",{\"1\":{\"759\":1,\"762\":3,\"764\":1,\"765\":1,\"766\":1,\"767\":1}}],[\"matcher\",{\"1\":{\"759\":1,\"1016\":2}}],[\"matchedcount\",{\"1\":{\"227\":1}}],[\"matched\",{\"1\":{\"21\":3}}],[\"match\",{\"1\":{\"21\":1,\"216\":1,\"587\":4,\"817\":1,\"956\":4,\"957\":3,\"1037\":1}}],[\"matching\",{\"1\":{\"4\":1,\"21\":1}}],[\"mattn\",{\"1\":{\"62\":2,\"64\":1,\"503\":2,\"504\":1,\"509\":1}}],[\"math包下远不止以上函数\",{\"1\":{\"672\":1}}],[\"math是\",{\"1\":{\"650\":1}}],[\"math\",{\"0\":{\"650\":1},\"1\":{\"20\":1,\"59\":2,\"384\":4,\"385\":4,\"386\":3,\"397\":1,\"521\":1,\"535\":2,\"616\":5,\"654\":1,\"655\":1,\"656\":1,\"657\":2,\"658\":2,\"659\":3,\"660\":2,\"661\":1,\"662\":1,\"663\":2,\"664\":4,\"665\":1,\"666\":2,\"667\":1,\"668\":2,\"669\":4,\"670\":2,\"671\":2,\"672\":2,\"995\":1,\"1020\":2,\"1025\":1,\"1034\":1,\"1058\":1}}],[\"machine\",{\"1\":{\"1085\":1}}],[\"macos\",{\"1\":{\"8\":2,\"116\":1,\"117\":1}}],[\"mac\",{\"0\":{\"675\":1},\"1\":{\"7\":1,\"11\":2,\"932\":1}}],[\"mayonegg\",{\"1\":{\"809\":2}}],[\"may\",{\"1\":{\"4\":1,\"7\":1,\"165\":1,\"520\":1,\"1030\":1,\"1051\":1,\"1091\":1,\"1137\":1,\"1138\":2}}],[\"most\",{\"1\":{\"1101\":1}}],[\"mountpoint\",{\"1\":{\"915\":3}}],[\"mom字段名\",{\"1\":{\"894\":1}}],[\"momid就是引用字段\",{\"1\":{\"891\":1}}],[\"momid\",{\"1\":{\"860\":7,\"891\":2,\"892\":2,\"893\":2,\"899\":2}}],[\"mom\",{\"1\":{\"550\":8,\"853\":1,\"854\":1,\"855\":1,\"856\":3,\"858\":2,\"859\":2,\"860\":8,\"891\":3,\"892\":3,\"893\":4,\"894\":2,\"895\":2,\"896\":4,\"897\":2,\"898\":2,\"899\":9}}],[\"monday\",{\"1\":{\"739\":1}}],[\"money\",{\"1\":{\"447\":1,\"448\":3,\"449\":7,\"455\":1}}],[\"monster\",{\"1\":{\"193\":3,\"201\":5}}],[\"mongo\",{\"1\":{\"62\":2,\"218\":2,\"219\":3,\"220\":2,\"221\":8,\"222\":2,\"223\":2,\"226\":2,\"227\":4,\"228\":2,\"229\":3}}],[\"mongodb\",{\"0\":{\"218\":1},\"1\":{\"62\":3,\"218\":6,\"219\":5,\"220\":1,\"221\":4,\"222\":2,\"223\":1,\"226\":1,\"227\":1,\"228\":1,\"229\":1,\"510\":1,\"1003\":1}}],[\"mox\",{\"1\":{\"71\":2}}],[\"mozillazg\",{\"1\":{\"56\":1}}],[\"mohae\",{\"1\":{\"56\":1}}],[\"mock\",{\"1\":{\"55\":1}}],[\"move\",{\"1\":{\"1078\":1,\"1098\":1,\"1101\":1}}],[\"moved\",{\"1\":{\"550\":1}}],[\"movl\",{\"1\":{\"45\":1,\"1067\":5,\"1089\":2,\"1153\":1}}],[\"movups\",{\"1\":{\"9\":1}}],[\"movq\",{\"1\":{\"9\":2,\"45\":1,\"1038\":3,\"1053\":1,\"1067\":4,\"1089\":4,\"1107\":1}}],[\"morestack\",{\"1\":{\"1106\":1}}],[\"morestack函数来检查当前协程是否需要进行栈扩容\",{\"1\":{\"1101\":1}}],[\"more\",{\"1\":{\"3\":4,\"4\":1,\"7\":1,\"18\":1,\"22\":1,\"31\":1,\"37\":1,\"504\":1,\"809\":2,\"810\":2,\"1024\":1,\"1042\":1,\"1132\":1,\"1137\":1}}],[\"mod来管理项目依赖\",{\"1\":{\"964\":1}}],[\"mod中指定的本地依赖计算哈希值\",{\"1\":{\"510\":1}}],[\"mod中的指令\",{\"1\":{\"515\":1}}],[\"mod中的依赖\",{\"1\":{\"35\":1}}],[\"mod中的无用依赖项\",{\"1\":{\"24\":1}}],[\"mod两个文件的哈希值\",{\"1\":{\"510\":1}}],[\"mod目录下\",{\"1\":{\"507\":1}}],[\"mod=mod\",{\"1\":{\"500\":1,\"823\":1}}],[\"modify\",{\"1\":{\"1016\":1,\"1037\":1}}],[\"modifyindex\",{\"1\":{\"143\":3}}],[\"modifiedcount\",{\"1\":{\"227\":1}}],[\"modified\",{\"1\":{\"29\":1,\"986\":1}}],[\"mod对应goapth\",{\"1\":{\"92\":1}}],[\"moddirs\",{\"1\":{\"32\":2,\"33\":3}}],[\"mod的一个子命令\",{\"1\":{\"28\":1}}],[\"mod是专用于管理\",{\"1\":{\"22\":1}}],[\"mod和go\",{\"1\":{\"18\":1}}],[\"modcache\",{\"1\":{\"15\":1,\"506\":1,\"507\":1}}],[\"modcmd\",{\"1\":{\"4\":1}}],[\"mod就会采用\",{\"1\":{\"7\":1}}],[\"mod文件引用最新版本\",{\"1\":{\"513\":1}}],[\"mod文件将依赖重定向到本地文件\",{\"1\":{\"513\":1}}],[\"mod文件为指定版本\",{\"1\":{\"513\":1}}],[\"mod文件的情况下导入其它模块\",{\"1\":{\"513\":1}}],[\"mod文件的内容\",{\"1\":{\"512\":1}}],[\"mod文件的哈希值\",{\"1\":{\"510\":1}}],[\"mod文件支持replace指令\",{\"1\":{\"512\":1}}],[\"mod文件是无法保证的\",{\"1\":{\"510\":1}}],[\"mod文件是非常有必要的\",{\"1\":{\"509\":1}}],[\"mod文件可以发现它的module名\",{\"1\":{\"509\":1}}],[\"mod文件加载的\",{\"1\":{\"508\":1}}],[\"mod文件会发现没有了\",{\"1\":{\"503\":1}}],[\"mod文件所在的路径\",{\"1\":{\"416\":1,\"980\":1}}],[\"mod文件中\",{\"1\":{\"509\":1}}],[\"mod文件中只能出现一个module关键字\",{\"1\":{\"509\":1}}],[\"mod文件中但是又不存在与本地依赖缓存中的依赖项\",{\"1\":{\"25\":1}}],[\"mod文件中的版本\",{\"1\":{\"27\":1}}],[\"mod文件中的\",{\"1\":{\"24\":1}}],[\"mod文件中所有标明的依赖下载到本地缓存\",{\"1\":{\"22\":1}}],[\"mod文件\",{\"1\":{\"7\":1,\"22\":1,\"25\":1,\"26\":1,\"503\":1,\"509\":2,\"510\":3,\"513\":1}}],[\"modelname\",{\"1\":{\"909\":1}}],[\"model所有的特性\",{\"1\":{\"857\":1}}],[\"model\",{\"0\":{\"857\":1},\"1\":{\"857\":2,\"869\":1,\"871\":1,\"872\":1,\"880\":2,\"882\":1,\"885\":1,\"886\":2,\"887\":2,\"888\":2,\"894\":1,\"895\":3,\"896\":3,\"897\":3,\"898\":5,\"901\":1,\"902\":2,\"909\":1,\"1013\":1,\"1014\":1}}],[\"models\",{\"1\":{\"757\":1}}],[\"mode=release\",{\"1\":{\"503\":1}}],[\"modern\",{\"1\":{\"503\":4,\"509\":2}}],[\"modernc\",{\"1\":{\"62\":1,\"510\":1}}],[\"modeperm\",{\"1\":{\"416\":2}}],[\"modetype\",{\"1\":{\"416\":2}}],[\"modetemporary\",{\"1\":{\"416\":2}}],[\"modeirregular\",{\"1\":{\"416\":2}}],[\"modechardevice\",{\"1\":{\"416\":2}}],[\"modesticky\",{\"1\":{\"416\":2}}],[\"modesetgid\",{\"1\":{\"416\":2}}],[\"modesetuid\",{\"1\":{\"416\":2}}],[\"modesocket\",{\"1\":{\"416\":2}}],[\"modesymlink\",{\"1\":{\"416\":2}}],[\"modenamedpipe\",{\"1\":{\"416\":2}}],[\"modedevice\",{\"1\":{\"416\":3}}],[\"modedir\",{\"1\":{\"416\":2}}],[\"modeexclusive\",{\"1\":{\"416\":2}}],[\"modeappend\",{\"1\":{\"416\":2}}],[\"mode\",{\"1\":{\"7\":2,\"426\":7,\"499\":5,\"503\":2,\"559\":1,\"817\":6,\"1140\":1}}],[\"module关键字声明了当前项目的模块名\",{\"1\":{\"509\":1}}],[\"module=$prefix\",{\"1\":{\"201\":1}}],[\"modulepath\",{\"1\":{\"34\":1}}],[\"module一样每一个项目的依赖分开放\",{\"1\":{\"28\":1}}],[\"moduleerror\",{\"1\":{\"21\":2}}],[\"modules\",{\"1\":{\"16\":1,\"22\":6,\"24\":1,\"25\":1,\"28\":1,\"29\":2,\"31\":2,\"33\":1,\"34\":1,\"35\":1,\"492\":1,\"501\":1}}],[\"module\",{\"1\":{\"7\":2,\"18\":1,\"21\":18,\"22\":3,\"23\":2,\"25\":1,\"26\":2,\"34\":3,\"66\":1,\"156\":1,\"493\":1,\"494\":2,\"495\":1,\"503\":1,\"507\":1,\"509\":5}}],[\"modfetch\",{\"1\":{\"4\":3}}],[\"modload\",{\"1\":{\"4\":2}}],[\"modget\",{\"1\":{\"4\":3}}],[\"mod\",{\"0\":{\"22\":1,\"509\":1},\"1\":{\"2\":1,\"6\":1,\"7\":6,\"18\":2,\"20\":1,\"21\":4,\"22\":6,\"23\":4,\"24\":4,\"25\":4,\"26\":4,\"27\":3,\"28\":7,\"29\":5,\"30\":3,\"34\":1,\"36\":1,\"92\":5,\"156\":1,\"492\":3,\"493\":1,\"494\":1,\"495\":3,\"499\":9,\"503\":3,\"505\":2,\"506\":10,\"507\":3,\"509\":5,\"510\":5,\"511\":1,\"545\":1,\"657\":2,\"1011\":1}}],[\"p+size\",{\"1\":{\"1111\":1}}],[\"p++\",{\"1\":{\"392\":2}}],[\"p表示\",{\"1\":{\"1088\":1}}],[\"pcache\",{\"1\":{\"1120\":1}}],[\"pcquantum\",{\"1\":{\"1095\":1}}],[\"pcnewg\",{\"1\":{\"1095\":1}}],[\"pc和sp指向调用函数的执行现场便于日后恢复\",{\"1\":{\"1078\":1}}],[\"pc\",{\"1\":{\"1073\":2,\"1074\":1,\"1078\":1,\"1079\":2,\"1080\":4,\"1086\":3,\"1089\":1,\"1095\":3,\"1097\":2,\"1107\":1}}],[\"pc0\",{\"1\":{\"1067\":2}}],[\"pcdata\",{\"1\":{\"9\":2,\"45\":3,\"1066\":1,\"1067\":3}}],[\"p是一个指向\",{\"1\":{\"1045\":1}}],[\"p是一个指针\",{\"1\":{\"391\":1}}],[\"pd\",{\"1\":{\"1107\":5}}],[\"pdead\",{\"1\":{\"1088\":1}}],[\"pdpxdqbbduyte4enxzoacrw\",{\"1\":{\"781\":1}}],[\"pdf\",{\"1\":{\"81\":2,\"559\":1}}],[\"pdfcpu\",{\"1\":{\"81\":6}}],[\"p代表了这是一条策略规则定义\",{\"1\":{\"760\":1}}],[\"p即指policy\",{\"1\":{\"760\":1}}],[\"pm\",{\"1\":{\"739\":1}}],[\"pmezard\",{\"1\":{\"6\":1,\"28\":3}}],[\"phase\",{\"1\":{\"1138\":1}}],[\"physpagesize\",{\"1\":{\"1122\":2}}],[\"physicalid\",{\"1\":{\"909\":1}}],[\"phi\",{\"1\":{\"653\":1}}],[\"phony\",{\"1\":{\"11\":1,\"201\":1}}],[\"png|\",{\"1\":{\"1016\":1}}],[\"png|favicon\",{\"1\":{\"1016\":1}}],[\"png\",{\"1\":{\"559\":3,\"833\":1,\"834\":2,\"835\":2,\"968\":2,\"1016\":2}}],[\"p为nil\",{\"1\":{\"1045\":1}}],[\"p为\",{\"1\":{\"526\":1}}],[\"p=sub\",{\"1\":{\"760\":1}}],[\"p=1\",{\"1\":{\"526\":6}}],[\"p=0\",{\"1\":{\"526\":13}}],[\"pypi\",{\"1\":{\"501\":1}}],[\"pytyon3\",{\"1\":{\"75\":1}}],[\"python3\",{\"1\":{\"75\":1}}],[\"python\",{\"1\":{\"75\":2,\"492\":1,\"581\":2,\"1130\":1}}],[\"p2\",{\"1\":{\"398\":3,\"406\":1,\"763\":1}}],[\"p1\",{\"1\":{\"398\":3}}],[\"p10\",{\"1\":{\"302\":1}}],[\"pttl\",{\"1\":{\"249\":1}}],[\"ptypes\",{\"1\":{\"194\":1}}],[\"ptr代表的就是对象\",{\"1\":{\"1144\":1}}],[\"ptr是新对象\",{\"1\":{\"1144\":1}}],[\"ptrsize\",{\"1\":{\"1074\":1,\"1095\":1,\"1122\":1,\"1137\":1}}],[\"ptrbytes\",{\"1\":{\"1037\":1,\"1039\":2,\"1042\":1,\"1058\":1}}],[\"ptr\",{\"1\":{\"44\":2,\"48\":1,\"49\":1,\"429\":1,\"432\":1,\"536\":4,\"539\":2,\"541\":4,\"543\":4,\"752\":3,\"754\":1,\"755\":4,\"756\":1,\"1019\":6,\"1020\":1,\"1021\":1,\"1023\":3,\"1024\":3,\"1026\":4,\"1027\":1,\"1028\":1,\"1037\":1,\"1042\":2,\"1052\":2,\"1054\":5,\"1086\":1,\"1089\":6,\"1093\":1,\"1095\":2,\"1096\":1,\"1097\":5,\"1098\":1,\"1100\":3,\"1104\":1,\"1106\":1,\"1120\":3,\"1121\":1,\"1138\":1,\"1139\":1,\"1144\":5,\"1153\":1}}],[\"pb文件夹\",{\"1\":{\"156\":1}}],[\"pb\",{\"1\":{\"145\":2,\"147\":1,\"150\":1,\"152\":7,\"153\":6,\"154\":3,\"156\":1,\"158\":1,\"159\":4,\"164\":3,\"193\":1,\"198\":2,\"201\":15,\"202\":1,\"556\":1,\"559\":1,\"560\":1,\"820\":1}}],[\"psyscall\",{\"1\":{\"1088\":1,\"1097\":5,\"1107\":1}}],[\"psutil\",{\"1\":{\"904\":1}}],[\"pss\",{\"1\":{\"776\":1}}],[\"ps\",{\"1\":{\"90\":1,\"636\":4,\"751\":3,\"752\":3,\"873\":2,\"874\":1,\"875\":3,\"876\":3,\"877\":2,\"878\":2,\"879\":1,\"880\":2,\"881\":2,\"901\":3,\"902\":6,\"956\":1,\"960\":2,\"1089\":1}}],[\"pflag\",{\"1\":{\"64\":2}}],[\"pending\",{\"1\":{\"1155\":2}}],[\"pendingpreemptsignals\",{\"1\":{\"1107\":1}}],[\"pekka\",{\"1\":{\"1136\":1}}],[\"peek\",{\"1\":{\"560\":1,\"577\":4,\"578\":3}}],[\"peoplevalidate\",{\"1\":{\"951\":2}}],[\"people\",{\"1\":{\"398\":2,\"589\":1,\"951\":11}}],[\"pelletier\",{\"1\":{\"63\":1,\"503\":2,\"509\":1}}],[\"percpu\",{\"1\":{\"911\":1,\"912\":1}}],[\"percents\",{\"1\":{\"911\":2}}],[\"percent\",{\"1\":{\"911\":2}}],[\"perform\",{\"1\":{\"1140\":1}}],[\"performed\",{\"1\":{\"1138\":1}}],[\"performance\",{\"1\":{\"954\":1}}],[\"perf\",{\"1\":{\"526\":1}}],[\"perm指policy\",{\"1\":{\"759\":1}}],[\"permission\",{\"1\":{\"600\":1}}],[\"permissiondenied\",{\"1\":{\"168\":1}}],[\"perm\",{\"1\":{\"416\":1,\"418\":1,\"425\":2}}],[\"perons\",{\"1\":{\"234\":3}}],[\"persistentalloc\",{\"1\":{\"1112\":1}}],[\"persistauthorization\",{\"1\":{\"1016\":1}}],[\"persist\",{\"1\":{\"248\":1}}],[\"persepolis\",{\"1\":{\"132\":2}}],[\"person和house互相持有对方的切片类型表示多对多的关系\",{\"1\":{\"893\":1}}],[\"personid\",{\"1\":{\"893\":2}}],[\"personinfo\",{\"1\":{\"164\":10,\"166\":2,\"167\":2,\"168\":4}}],[\"personhouse\",{\"1\":{\"893\":2}}],[\"person类型\",{\"1\":{\"892\":1}}],[\"person类型的参数\",{\"1\":{\"406\":1}}],[\"person对于dad和mom是一对一的关系\",{\"1\":{\"860\":1}}],[\"person结构体通过嵌入mom结构体\",{\"1\":{\"891\":1}}],[\"person结构体有两个外键\",{\"1\":{\"860\":1}}],[\"person结构体所映射的表名为perons\",{\"1\":{\"853\":1}}],[\"person>\",{\"1\":{\"619\":1,\"620\":1}}],[\"person实现了该接口\",{\"1\":{\"572\":1}}],[\"personoptions\",{\"1\":{\"406\":6}}],[\"persons是\",{\"1\":{\"892\":1}}],[\"persons\",{\"1\":{\"688\":3,\"689\":3,\"860\":3,\"892\":1,\"893\":2,\"895\":4,\"896\":4,\"897\":1,\"898\":5,\"899\":13}}],[\"personslice\",{\"1\":{\"688\":5,\"689\":2}}],[\"personstream\",{\"1\":{\"164\":3,\"166\":4,\"167\":4}}],[\"personservice\",{\"1\":{\"164\":3,\"165\":1,\"168\":1}}],[\"personnotfounderr\",{\"1\":{\"164\":1,\"167\":2}}],[\"persondata\",{\"1\":{\"164\":3,\"168\":1}}],[\"person\",{\"1\":{\"114\":1,\"115\":1,\"164\":14,\"165\":2,\"166\":21,\"167\":16,\"168\":7,\"186\":1,\"234\":6,\"341\":6,\"395\":5,\"398\":4,\"404\":1,\"405\":3,\"406\":9,\"407\":9,\"408\":1,\"447\":2,\"448\":2,\"449\":2,\"450\":1,\"451\":6,\"452\":1,\"455\":5,\"460\":3,\"540\":5,\"550\":7,\"565\":1,\"566\":3,\"567\":2,\"572\":3,\"578\":7,\"618\":1,\"619\":3,\"620\":3,\"624\":1,\"625\":3,\"626\":1,\"627\":3,\"628\":4,\"629\":7,\"639\":3,\"688\":3,\"689\":1,\"725\":1,\"734\":1,\"735\":3,\"736\":9,\"748\":2,\"749\":2,\"750\":2,\"751\":2,\"853\":1,\"854\":1,\"855\":3,\"856\":5,\"858\":2,\"859\":2,\"860\":5,\"863\":3,\"864\":2,\"866\":4,\"869\":5,\"870\":3,\"871\":1,\"872\":1,\"873\":1,\"875\":1,\"876\":1,\"877\":1,\"878\":1,\"880\":2,\"882\":2,\"884\":1,\"885\":2,\"886\":2,\"888\":8,\"889\":1,\"891\":1,\"892\":2,\"893\":8,\"894\":1,\"895\":3,\"896\":5,\"897\":2,\"898\":2,\"899\":11,\"901\":2,\"902\":4,\"948\":6}}],[\"per\",{\"1\":{\"7\":1,\"1138\":1}}],[\"pgcstop\",{\"1\":{\"1088\":1}}],[\"pgmajfault\",{\"1\":{\"919\":1}}],[\"pgfault\",{\"1\":{\"919\":1}}],[\"pgin\",{\"1\":{\"919\":1}}],[\"pgx\",{\"1\":{\"62\":2}}],[\"pgout\",{\"1\":{\"919\":1}}],[\"pgo文件会启用该功能\",{\"1\":{\"116\":1}}],[\"pgo\",{\"1\":{\"8\":2,\"116\":2,\"117\":1}}],[\"pirinen\",{\"1\":{\"1136\":1}}],[\"pidleget\",{\"1\":{\"1097\":1}}],[\"pidleput\",{\"1\":{\"1089\":1}}],[\"pidle\",{\"1\":{\"1088\":3,\"1089\":2,\"1097\":3}}],[\"pictures\",{\"1\":{\"984\":1,\"985\":3}}],[\"pi\",{\"1\":{\"653\":1,\"904\":1}}],[\"pitaya\",{\"1\":{\"613\":1}}],[\"pipemd160\",{\"1\":{\"934\":1}}],[\"pipemd128\",{\"1\":{\"934\":1}}],[\"pipeline可以根据自己的需求来指定关联模板的根对象\",{\"1\":{\"734\":1}}],[\"pipeline\",{\"1\":{\"229\":2,\"730\":2,\"731\":2,\"732\":5,\"734\":1}}],[\"pipeline类型\",{\"1\":{\"229\":1}}],[\"pip\",{\"1\":{\"492\":1}}],[\"pipline\",{\"1\":{\"229\":2}}],[\"pinner来固定内存\",{\"1\":{\"543\":1}}],[\"ping一下数据库\",{\"1\":{\"852\":1}}],[\"ping测试连接是否可用\",{\"1\":{\"221\":1}}],[\"pingresp\",{\"1\":{\"205\":2}}],[\"ping\",{\"1\":{\"205\":4,\"221\":1,\"965\":2,\"1007\":1,\"1011\":11}}],[\"pinyin\",{\"1\":{\"56\":2}}],[\"pike\",{\"1\":{\"87\":3,\"598\":1}}],[\"pie\",{\"1\":{\"8\":1}}],[\"pprev\",{\"1\":{\"1092\":6}}],[\"pprof支持相当多的格式\",{\"1\":{\"559\":1}}],[\"pprof包将上面的分析函数包装成了\",{\"1\":{\"557\":1}}],[\"pprof包\",{\"1\":{\"556\":1}}],[\"pprof\",{\"0\":{\"554\":1},\"1\":{\"14\":2,\"547\":1,\"554\":2,\"556\":8,\"557\":11,\"558\":3,\"559\":7,\"560\":7,\"561\":2}}],[\"ppfree\",{\"1\":{\"485\":2}}],[\"pp\",{\"1\":{\"485\":3,\"751\":3,\"1074\":10,\"1089\":19,\"1091\":6,\"1095\":6,\"1096\":3,\"1097\":9,\"1100\":1,\"1104\":10,\"1107\":6,\"1120\":18,\"1121\":7,\"1137\":1,\"1138\":3,\"1140\":5,\"1145\":4}}],[\"ppc64le\",{\"1\":{\"7\":1}}],[\"ppc64\",{\"1\":{\"7\":3,\"11\":1}}],[\"puintptr\",{\"1\":{\"1087\":3,\"1088\":1}}],[\"pull是为了iter\",{\"1\":{\"583\":1}}],[\"pull\",{\"1\":{\"583\":2,\"1120\":2}}],[\"pull2\",{\"1\":{\"583\":1,\"584\":1,\"588\":1}}],[\"pull2的区别就是后者的返回值有两个\",{\"1\":{\"583\":1}}],[\"pull2函数就可以将一个标准的推送式迭代器转换为拉取式迭代器\",{\"1\":{\"583\":1}}],[\"pull与iter\",{\"1\":{\"583\":1}}],[\"pull或iter\",{\"1\":{\"583\":1}}],[\"pulling\",{\"1\":{\"583\":1}}],[\"pushback\",{\"1\":{\"1139\":1}}],[\"pushfq\",{\"1\":{\"1107\":1}}],[\"pushcall\",{\"1\":{\"1107\":1}}],[\"pushing\",{\"1\":{\"582\":1,\"583\":1}}],[\"push\",{\"1\":{\"499\":1,\"577\":2,\"578\":5,\"1061\":2,\"1117\":1,\"1132\":1,\"1138\":1}}],[\"pushq\",{\"1\":{\"9\":1,\"45\":1,\"1089\":2,\"1107\":1}}],[\"publickey\",{\"1\":{\"777\":1,\"785\":3}}],[\"publickey类型的值用于验证\",{\"1\":{\"777\":2}}],[\"public\",{\"1\":{\"773\":2}}],[\"publishes\",{\"1\":{\"1095\":1,\"1100\":1}}],[\"published\",{\"1\":{\"509\":1}}],[\"publish\",{\"1\":{\"284\":1,\"1089\":1}}],[\"pubsubnumsub\",{\"1\":{\"284\":1}}],[\"put放入本地的队列中\",{\"1\":{\"1137\":1}}],[\"puts\",{\"1\":{\"530\":1,\"536\":6}}],[\"put\",{\"1\":{\"143\":1,\"144\":1,\"190\":2,\"485\":3,\"758\":1,\"1000\":1}}],[\"purejson\",{\"1\":{\"981\":1}}],[\"pure\",{\"1\":{\"547\":2}}],[\"purell\",{\"1\":{\"20\":1,\"24\":1,\"27\":1}}],[\"purpose\",{\"1\":{\"7\":1}}],[\"puerkitobio\",{\"1\":{\"20\":2,\"24\":2,\"27\":2,\"69\":1}}],[\"pong\",{\"1\":{\"965\":2,\"1007\":1}}],[\"pongo2\",{\"1\":{\"60\":2}}],[\"poll\",{\"1\":{\"1067\":5}}],[\"pollorder\",{\"1\":{\"1067\":7}}],[\"pollorder决定了管道的执行顺序\",{\"1\":{\"1067\":1}}],[\"poland\",{\"1\":{\"884\":2,\"885\":2,\"886\":4}}],[\"polymorphicvalue\",{\"1\":{\"862\":1}}],[\"polymorphic\",{\"1\":{\"862\":1}}],[\"policy示例如下\",{\"1\":{\"767\":1}}],[\"policy示例定义如下\",{\"1\":{\"766\":1}}],[\"policy文件中定义了alice拥有对data1进行read操作的权限\",{\"1\":{\"764\":1}}],[\"policy文件如下\",{\"1\":{\"764\":1}}],[\"policy\",{\"1\":{\"141\":1,\"759\":2,\"760\":1,\"763\":4,\"764\":2,\"765\":2,\"766\":2,\"767\":2}}],[\"power\",{\"1\":{\"1042\":1}}],[\"powershell\",{\"1\":{\"201\":1}}],[\"pow\",{\"1\":{\"666\":2,\"669\":2}}],[\"pop\",{\"1\":{\"226\":1,\"577\":2,\"578\":2,\"1061\":1,\"1104\":1,\"1117\":3,\"1138\":1,\"1139\":1}}],[\"popq\",{\"1\":{\"45\":1,\"1066\":1,\"1067\":1,\"1089\":2}}],[\"portion\",{\"1\":{\"1024\":1}}],[\"port\",{\"1\":{\"145\":1,\"174\":2,\"242\":1,\"503\":2,\"605\":2,\"621\":3,\"622\":2,\"797\":1,\"817\":5,\"932\":1}}],[\"ports\",{\"1\":{\"143\":1}}],[\"pool一定是并发安全\",{\"1\":{\"485\":1}}],[\"pool在申请对象时\",{\"1\":{\"485\":1}}],[\"pool中\",{\"1\":{\"485\":1}}],[\"pool只适合存放临时对象\",{\"1\":{\"485\":1}}],[\"pool时需要注意几个点\",{\"1\":{\"485\":1}}],[\"pool有一个对外暴露的new字段\",{\"1\":{\"485\":1}}],[\"pool总共只有两个方法\",{\"1\":{\"485\":1}}],[\"pool的设计目的是用于存储临时对象以便后续的复用\",{\"1\":{\"485\":1}}],[\"pooltimeout\",{\"1\":{\"242\":1}}],[\"poolsize\",{\"1\":{\"242\":1}}],[\"pool\",{\"0\":{\"485\":1},\"1\":{\"142\":1,\"485\":7,\"852\":1,\"1073\":1,\"1138\":2}}],[\"pointing\",{\"1\":{\"1016\":1}}],[\"points\",{\"1\":{\"834\":1,\"1057\":1,\"1096\":1}}],[\"point\",{\"1\":{\"132\":5,\"595\":4,\"844\":1,\"849\":2,\"1059\":1,\"1073\":1,\"1138\":1}}],[\"pointers\",{\"1\":{\"1101\":2}}],[\"pointer与类型指针本身是不支持指针运算\",{\"1\":{\"751\":1}}],[\"pointer是一个引用\",{\"1\":{\"751\":1}}],[\"pointer是一种可以指向任意类型的\",{\"1\":{\"751\":1}}],[\"pointer转换为uintptr时\",{\"1\":{\"751\":1}}],[\"pointer转换为uintptr\",{\"1\":{\"751\":1}}],[\"pointer转换为uinptr\",{\"1\":{\"122\":1}}],[\"pointer再转换为\",{\"1\":{\"751\":1}}],[\"pointer无法解引用\",{\"1\":{\"751\":1}}],[\"pointer可以转换为uintptr\",{\"1\":{\"751\":1}}],[\"pointer可以转换为任何类型的指针\",{\"1\":{\"751\":1}}],[\"pointer可以进行访问和修改\",{\"1\":{\"541\":1}}],[\"pointer类型可以进行四个特殊操作\",{\"1\":{\"751\":1}}],[\"pointer了解细节\",{\"1\":{\"533\":1}}],[\"pointer不正确转换\",{\"1\":{\"37\":1}}],[\"pointer\",{\"0\":{\"751\":1},\"1\":{\"4\":11,\"44\":2,\"47\":1,\"414\":1,\"428\":5,\"429\":1,\"432\":3,\"441\":16,\"488\":1,\"536\":7,\"539\":1,\"541\":1,\"543\":3,\"719\":1,\"751\":20,\"752\":4,\"753\":2,\"755\":1,\"1019\":4,\"1020\":2,\"1025\":3,\"1026\":4,\"1027\":1,\"1028\":4,\"1030\":4,\"1033\":3,\"1036\":10,\"1037\":10,\"1038\":13,\"1039\":6,\"1040\":1,\"1042\":11,\"1043\":1,\"1045\":2,\"1052\":4,\"1054\":4,\"1057\":1,\"1058\":1,\"1059\":10,\"1060\":10,\"1064\":1,\"1066\":4,\"1067\":2,\"1069\":1,\"1070\":1,\"1073\":1,\"1074\":1,\"1077\":1,\"1078\":3,\"1079\":3,\"1086\":1,\"1089\":6,\"1095\":3,\"1098\":1,\"1100\":2,\"1101\":2,\"1107\":1,\"1111\":2,\"1112\":9,\"1119\":1,\"1121\":1,\"1122\":5,\"1123\":1,\"1124\":2,\"1125\":1,\"1126\":1,\"1132\":1,\"1137\":1,\"1138\":2}}],[\"possible\",{\"1\":{\"817\":2}}],[\"postform方法默认解析application\",{\"1\":{\"970\":1}}],[\"postform\",{\"1\":{\"970\":2}}],[\"postcode\",{\"1\":{\"934\":2}}],[\"postgres\",{\"1\":{\"851\":1}}],[\"postgresql\",{\"1\":{\"62\":1,\"231\":1,\"851\":1,\"1003\":1}}],[\"post\",{\"0\":{\"639\":1},\"1\":{\"106\":1,\"107\":1,\"108\":1,\"112\":2,\"190\":2,\"354\":1,\"639\":1,\"758\":1,\"970\":4,\"971\":2,\"972\":1,\"973\":1,\"977\":2,\"984\":2,\"985\":3,\"986\":2,\"988\":1,\"989\":1,\"990\":1,\"993\":1,\"994\":3,\"996\":1,\"1000\":1}}],[\"positive\",{\"1\":{\"531\":2}}],[\"position\",{\"1\":{\"21\":1,\"209\":7,\"1037\":2}}],[\"positions\",{\"1\":{\"9\":1}}],[\"posix\",{\"1\":{\"64\":1}}],[\"pos\",{\"1\":{\"21\":1,\"307\":1,\"1065\":1}}],[\"pluck方法用于批量查询一个表的单列\",{\"1\":{\"871\":1}}],[\"pluck\",{\"0\":{\"871\":1},\"1\":{\"871\":2}}],[\"plugin\",{\"1\":{\"156\":2,\"200\":1,\"852\":1}}],[\"plugins\",{\"1\":{\"156\":1,\"852\":3}}],[\"plugin这几个选项\",{\"1\":{\"8\":1}}],[\"please\",{\"1\":{\"503\":1}}],[\"pl\",{\"1\":{\"406\":1}}],[\"plot\",{\"1\":{\"76\":2}}],[\"plainerror\",{\"1\":{\"1038\":1,\"1058\":1,\"1059\":2,\"1061\":2,\"1067\":1}}],[\"platformversion\",{\"1\":{\"907\":1}}],[\"platformfamily\",{\"1\":{\"907\":1}}],[\"platform\",{\"1\":{\"610\":1,\"907\":1}}],[\"player\",{\"1\":{\"193\":2,\"201\":5,\"542\":2}}],[\"play\",{\"1\":{\"104\":1,\"105\":1,\"106\":1,\"107\":1,\"108\":1,\"109\":1,\"110\":1,\"111\":1,\"112\":1}}],[\"playgrounds\",{\"0\":{\"103\":1}}],[\"playground\",{\"1\":{\"57\":2,\"104\":11,\"105\":5,\"106\":1,\"109\":1,\"110\":1,\"112\":1,\"290\":1,\"503\":6,\"509\":3,\"926\":4,\"927\":1,\"928\":1,\"929\":1,\"942\":1,\"952\":10,\"953\":1,\"976\":1}}],[\"plan9\",{\"1\":{\"7\":1,\"87\":1}}],[\"p\",{\"0\":{\"1088\":1},\"1\":{\"8\":1,\"14\":2,\"19\":2,\"44\":1,\"47\":1,\"111\":1,\"112\":1,\"164\":2,\"168\":1,\"341\":2,\"376\":2,\"391\":4,\"392\":6,\"406\":14,\"407\":4,\"408\":5,\"416\":1,\"447\":1,\"449\":2,\"455\":1,\"485\":21,\"540\":6,\"572\":2,\"595\":3,\"629\":4,\"688\":10,\"749\":6,\"750\":7,\"751\":6,\"753\":8,\"759\":5,\"760\":3,\"762\":3,\"763\":11,\"764\":7,\"765\":5,\"766\":9,\"767\":11,\"855\":1,\"856\":1,\"867\":3,\"869\":2,\"874\":2,\"875\":5,\"880\":2,\"882\":2,\"884\":4,\"885\":3,\"886\":4,\"887\":2,\"888\":9,\"899\":2,\"1021\":7,\"1023\":2,\"1025\":5,\"1033\":6,\"1045\":2,\"1047\":6,\"1048\":7,\"1053\":3,\"1054\":9,\"1070\":12,\"1073\":4,\"1074\":2,\"1079\":7,\"1080\":10,\"1083\":1,\"1085\":4,\"1087\":7,\"1088\":15,\"1089\":27,\"1090\":2,\"1091\":5,\"1092\":2,\"1093\":1,\"1095\":5,\"1096\":2,\"1097\":25,\"1098\":3,\"1099\":2,\"1100\":3,\"1104\":20,\"1106\":4,\"1107\":2,\"1111\":3,\"1112\":5,\"1115\":2,\"1116\":2,\"1120\":11,\"1121\":4,\"1122\":4,\"1124\":1,\"1125\":1,\"1136\":1,\"1137\":3,\"1138\":14,\"1139\":1,\"1140\":1,\"1145\":4,\"1153\":5,\"1168\":5}}],[\"pkg为测试所在的包\",{\"1\":{\"525\":1}}],[\"pkgpath\",{\"1\":{\"429\":1,\"433\":1,\"448\":1,\"451\":1}}],[\"pkg\",{\"1\":{\"7\":6,\"12\":5,\"14\":8,\"21\":1,\"28\":3,\"42\":1,\"66\":1,\"70\":1,\"503\":1,\"507\":1,\"525\":1,\"526\":3,\"588\":1,\"603\":2}}],[\"prunning状态\",{\"1\":{\"1106\":1}}],[\"prunning\",{\"1\":{\"1088\":2,\"1089\":1,\"1106\":1,\"1107\":1}}],[\"practice\",{\"1\":{\"520\":1}}],[\"pravite等关键字\",{\"1\":{\"294\":1}}],[\"prc\",{\"1\":{\"159\":1}}],[\"pr\",{\"1\":{\"50\":1,\"88\":1,\"95\":1}}],[\"preemptible\",{\"1\":{\"1137\":1,\"1145\":1}}],[\"preemption\",{\"1\":{\"1086\":2,\"1091\":1,\"1095\":1,\"1097\":2,\"1107\":1,\"1139\":1}}],[\"preemptpark\",{\"1\":{\"1107\":1}}],[\"preemptm函数中\",{\"1\":{\"1107\":1}}],[\"preemptm\",{\"1\":{\"1107\":2}}],[\"preemptmsupported\",{\"1\":{\"1107\":1}}],[\"preemptone\",{\"1\":{\"1107\":1}}],[\"preemptoff\",{\"1\":{\"1087\":2,\"1100\":1,\"1106\":1}}],[\"preemptshrink\",{\"1\":{\"1106\":2}}],[\"preemptstop\",{\"1\":{\"1096\":1,\"1107\":2}}],[\"preempted\",{\"1\":{\"1086\":1,\"1107\":1}}],[\"preempt表示当前协程是否需要被抢占\",{\"1\":{\"1086\":1}}],[\"preempt\",{\"1\":{\"1086\":2,\"1088\":3,\"1097\":1,\"1101\":1,\"1104\":2,\"1106\":3,\"1107\":4,\"1137\":1,\"1145\":1}}],[\"prevsize\",{\"1\":{\"1114\":1}}],[\"prev\",{\"1\":{\"1114\":1}}],[\"previous代表着先前的值\",{\"1\":{\"1047\":1}}],[\"previous\",{\"1\":{\"1030\":1,\"1047\":3,\"1095\":1,\"1114\":1,\"1132\":1,\"1178\":2}}],[\"prevents\",{\"1\":{\"817\":1}}],[\"preset\",{\"1\":{\"1016\":2}}],[\"present\",{\"1\":{\"21\":1}}],[\"presented\",{\"1\":{\"21\":1}}],[\"preload\",{\"1\":{\"849\":1,\"899\":6}}],[\"pretax\",{\"1\":{\"847\":6}}],[\"pretty\",{\"1\":{\"64\":2,\"615\":1}}],[\"prefix`\",{\"1\":{\"840\":1}}],[\"prefix\",{\"1\":{\"618\":1,\"627\":1,\"648\":2,\"649\":1,\"711\":1,\"840\":4,\"1016\":1}}],[\"preference\",{\"1\":{\"208\":1}}],[\"prepgoexitframe\",{\"1\":{\"1095\":1}}],[\"prepareforsweep\",{\"1\":{\"1089\":1}}],[\"preparestmt\",{\"1\":{\"852\":1}}],[\"preparing\",{\"1\":{\"561\":1}}],[\"preprocessor\",{\"1\":{\"21\":1}}],[\"precision\",{\"1\":{\"844\":1,\"862\":1}}],[\"prec\",{\"1\":{\"698\":2,\"700\":2}}],[\"precompiled\",{\"1\":{\"504\":1}}],[\"precedence\",{\"1\":{\"299\":1}}],[\"pre\",{\"0\":{\"138\":1},\"1\":{\"847\":2}}],[\"price\",{\"1\":{\"847\":2}}],[\"priority\",{\"1\":{\"763\":2}}],[\"prinlnt\",{\"1\":{\"583\":1}}],[\"printpanics\",{\"1\":{\"1079\":1}}],[\"printunlock\",{\"1\":{\"1067\":5}}],[\"printnl\",{\"1\":{\"1067\":4}}],[\"printnum\",{\"1\":{\"543\":2}}],[\"printlock\",{\"1\":{\"1067\":5}}],[\"println会反射获取参数的类型\",{\"1\":{\"441\":1}}],[\"println确实是最后执行的\",{\"1\":{\"402\":1}}],[\"println函数\",{\"1\":{\"339\":1}}],[\"println\",{\"1\":{\"10\":1,\"12\":2,\"13\":2,\"16\":1,\"17\":6,\"20\":1,\"37\":1,\"41\":1,\"44\":2,\"108\":1,\"111\":1,\"112\":1,\"115\":2,\"145\":1,\"158\":2,\"159\":4,\"165\":4,\"166\":11,\"167\":4,\"202\":1,\"205\":2,\"207\":1,\"208\":1,\"209\":1,\"210\":1,\"212\":1,\"213\":1,\"214\":1,\"215\":1,\"216\":3,\"221\":1,\"226\":2,\"228\":2,\"229\":1,\"234\":3,\"235\":3,\"236\":3,\"237\":3,\"238\":1,\"241\":2,\"246\":1,\"247\":2,\"248\":1,\"249\":2,\"252\":1,\"254\":1,\"255\":1,\"256\":2,\"258\":3,\"292\":2,\"295\":1,\"297\":1,\"307\":2,\"309\":2,\"312\":1,\"332\":2,\"333\":6,\"334\":1,\"338\":2,\"339\":1,\"344\":1,\"346\":1,\"348\":1,\"349\":2,\"350\":3,\"352\":2,\"354\":3,\"355\":4,\"356\":2,\"357\":2,\"361\":1,\"365\":1,\"366\":3,\"367\":4,\"368\":3,\"369\":2,\"370\":3,\"371\":4,\"372\":2,\"375\":4,\"376\":4,\"377\":4,\"378\":2,\"379\":3,\"380\":2,\"382\":1,\"383\":7,\"384\":4,\"385\":4,\"386\":2,\"387\":2,\"388\":1,\"389\":1,\"391\":9,\"392\":3,\"399\":1,\"400\":9,\"401\":1,\"402\":11,\"407\":2,\"408\":1,\"411\":1,\"412\":3,\"413\":2,\"414\":6,\"416\":9,\"417\":10,\"418\":9,\"419\":11,\"420\":2,\"421\":4,\"424\":5,\"425\":2,\"431\":1,\"432\":1,\"433\":4,\"434\":5,\"435\":4,\"436\":2,\"437\":2,\"438\":1,\"439\":1,\"440\":1,\"441\":10,\"442\":2,\"443\":1,\"445\":4,\"446\":1,\"448\":4,\"449\":1,\"450\":2,\"451\":8,\"452\":2,\"454\":1,\"455\":1,\"456\":1,\"457\":1,\"458\":1,\"459\":2,\"460\":4,\"462\":15,\"465\":1,\"466\":2,\"467\":10,\"468\":4,\"469\":1,\"470\":3,\"471\":20,\"472\":7,\"476\":2,\"477\":8,\"478\":2,\"479\":2,\"480\":2,\"481\":5,\"482\":5,\"484\":2,\"485\":1,\"486\":5,\"487\":1,\"489\":2,\"491\":2,\"498\":1,\"518\":2,\"520\":4,\"527\":3,\"531\":3,\"536\":1,\"539\":2,\"540\":1,\"541\":4,\"542\":2,\"543\":3,\"545\":1,\"546\":1,\"553\":2,\"566\":1,\"567\":9,\"568\":14,\"572\":1,\"578\":3,\"581\":1,\"582\":7,\"583\":3,\"584\":7,\"585\":8,\"587\":2,\"591\":2,\"593\":1,\"594\":3,\"595\":2,\"596\":2,\"597\":3,\"598\":4,\"603\":2,\"606\":30,\"607\":9,\"608\":2,\"619\":2,\"620\":1,\"622\":2,\"623\":3,\"625\":2,\"627\":2,\"628\":1,\"629\":4,\"636\":1,\"638\":2,\"639\":1,\"645\":2,\"647\":1,\"648\":1,\"649\":1,\"654\":1,\"655\":1,\"656\":1,\"657\":2,\"658\":1,\"659\":2,\"660\":2,\"661\":1,\"662\":1,\"663\":2,\"664\":2,\"665\":1,\"666\":2,\"667\":1,\"668\":2,\"669\":2,\"670\":2,\"671\":2,\"672\":2,\"675\":1,\"676\":2,\"677\":2,\"678\":2,\"679\":2,\"680\":1,\"681\":2,\"682\":1,\"685\":1,\"687\":1,\"688\":1,\"689\":1,\"692\":1,\"693\":1,\"694\":3,\"695\":2,\"696\":2,\"697\":2,\"698\":6,\"699\":2,\"700\":3,\"701\":1,\"704\":2,\"705\":4,\"706\":8,\"707\":3,\"709\":3,\"711\":2,\"712\":5,\"713\":3,\"714\":2,\"715\":4,\"717\":4,\"718\":5,\"719\":2,\"720\":1,\"721\":2,\"723\":2,\"728\":2,\"737\":1,\"739\":3,\"740\":3,\"741\":1,\"742\":1,\"743\":2,\"748\":7,\"749\":5,\"750\":3,\"751\":8,\"752\":2,\"753\":2,\"754\":1,\"755\":1,\"756\":1,\"779\":1,\"781\":1,\"782\":3,\"783\":4,\"784\":2,\"785\":4,\"793\":1,\"794\":1,\"817\":4,\"847\":5,\"899\":5,\"942\":12,\"943\":1,\"944\":2,\"945\":2,\"946\":2,\"948\":1,\"949\":3,\"950\":2,\"951\":1,\"952\":3,\"953\":1,\"971\":1,\"974\":1,\"982\":2,\"993\":1,\"995\":1,\"996\":1,\"1019\":8,\"1028\":1,\"1051\":1,\"1054\":5,\"1055\":1,\"1056\":1,\"1067\":15,\"1069\":1,\"1070\":11,\"1071\":4,\"1077\":1,\"1083\":2,\"1106\":1,\"1149\":1,\"1171\":2,\"1175\":1}}],[\"printascii\",{\"1\":{\"933\":1}}],[\"printmymap\",{\"1\":{\"594\":2}}],[\"printint\",{\"1\":{\"1067\":4}}],[\"printint32arr\",{\"1\":{\"539\":2}}],[\"printing\",{\"1\":{\"9\":1}}],[\"printgofloat64\",{\"1\":{\"538\":2}}],[\"printgofloat32\",{\"1\":{\"538\":2}}],[\"printgouint64\",{\"1\":{\"537\":2}}],[\"printgouint32\",{\"1\":{\"537\":2}}],[\"printgouint16\",{\"1\":{\"537\":2}}],[\"printgouint8\",{\"1\":{\"537\":1}}],[\"printgoint64\",{\"1\":{\"537\":2}}],[\"printgoint32\",{\"1\":{\"537\":2}}],[\"printgoint16\",{\"1\":{\"537\":2}}],[\"printgoint8\",{\"1\":{\"537\":3}}],[\"printbyte\",{\"1\":{\"534\":4}}],[\"printfgostring\",{\"1\":{\"536\":9}}],[\"printf函数\",{\"1\":{\"396\":1}}],[\"printf函数提供\",{\"1\":{\"341\":1}}],[\"printf来格式化字符串或者输出格式化字符串\",{\"1\":{\"341\":1}}],[\"printf\",{\"1\":{\"37\":2,\"114\":1,\"145\":1,\"153\":1,\"154\":1,\"158\":5,\"159\":3,\"174\":1,\"175\":1,\"224\":1,\"225\":2,\"227\":4,\"234\":2,\"312\":1,\"341\":33,\"344\":1,\"345\":1,\"354\":1,\"362\":6,\"376\":1,\"380\":3,\"396\":1,\"399\":1,\"449\":1,\"513\":1,\"527\":2,\"531\":1,\"532\":1,\"533\":2,\"534\":1,\"535\":1,\"537\":8,\"538\":2,\"539\":1,\"540\":1,\"543\":2,\"547\":2,\"587\":2,\"603\":1,\"628\":1,\"708\":1,\"710\":2,\"716\":4,\"728\":2,\"729\":1,\"751\":1,\"779\":1,\"780\":1,\"812\":6,\"813\":2,\"817\":3,\"820\":5,\"824\":1,\"1002\":1,\"1008\":1,\"1019\":1,\"1052\":2,\"1165\":1}}],[\"print同时存在\",{\"1\":{\"34\":1}}],[\"print|\",{\"1\":{\"26\":1}}],[\"printerconfig\",{\"1\":{\"16\":1}}],[\"print\",{\"0\":{\"338\":1},\"1\":{\"7\":2,\"9\":2,\"10\":1,\"17\":6,\"22\":1,\"26\":2,\"34\":2,\"338\":1,\"728\":2,\"729\":1,\"1112\":1}}],[\"printstring\",{\"1\":{\"1067\":1}}],[\"printsum\",{\"1\":{\"531\":2}}],[\"prints\",{\"1\":{\"3\":4,\"7\":1,\"504\":1}}],[\"primitivearrayencoder\",{\"1\":{\"840\":2}}],[\"primitive\",{\"1\":{\"222\":4}}],[\"primarykey\",{\"1\":{\"856\":2,\"857\":1,\"858\":3,\"859\":4,\"860\":2,\"862\":1,\"863\":1,\"866\":1}}],[\"primary\",{\"1\":{\"212\":1,\"213\":1,\"214\":1,\"215\":1,\"221\":1,\"233\":1,\"863\":2}}],[\"primarily\",{\"1\":{\"34\":1}}],[\"privatekey\",{\"1\":{\"785\":3}}],[\"privatekey类型的值用于签名和ed25519\",{\"1\":{\"777\":1}}],[\"privatekey类型的值用于签名\",{\"1\":{\"777\":2}}],[\"private\",{\"1\":{\"7\":1,\"773\":1}}],[\"protected\",{\"1\":{\"960\":5}}],[\"protoreflect\",{\"1\":{\"202\":4}}],[\"protos\",{\"1\":{\"201\":2}}],[\"proto就是指定要编译的文件\",{\"1\":{\"201\":1}}],[\"proto此刻也必须要使用相对路径\",{\"1\":{\"193\":1}}],[\"proto或monster目录下的文件\",{\"1\":{\"193\":1}}],[\"proto导入其它文件的例子\",{\"1\":{\"193\":1}}],[\"proto导入了common\",{\"1\":{\"193\":1}}],[\"proto导入health\",{\"1\":{\"193\":1}}],[\"proto之间的相互导入可以直接写单文件名\",{\"1\":{\"193\":1}}],[\"proto与player\",{\"1\":{\"193\":1}}],[\"proto文件\",{\"1\":{\"629\":1}}],[\"proto文件中的每一行末尾必须要有分号结尾\",{\"1\":{\"181\":1}}],[\"proto文件的例子\",{\"1\":{\"181\":1}}],[\"proto内容如下\",{\"1\":{\"158\":1,\"159\":1,\"164\":1}}],[\"protoimpl\",{\"1\":{\"152\":6,\"167\":3}}],[\"proto3\",{\"1\":{\"151\":1,\"152\":2,\"158\":1,\"159\":1,\"164\":1,\"167\":3,\"181\":2,\"182\":1,\"187\":1,\"188\":1,\"190\":2,\"197\":1,\"629\":1}}],[\"proto中\",{\"1\":{\"151\":1}}],[\"proto\",{\"1\":{\"148\":1,\"150\":1,\"152\":2,\"156\":1,\"158\":2,\"159\":2,\"164\":2,\"168\":2,\"181\":1,\"184\":1,\"187\":1,\"193\":11,\"194\":2,\"197\":1,\"200\":12,\"201\":33,\"202\":3,\"629\":8,\"1007\":1}}],[\"protobuf方式进行渲染\",{\"1\":{\"981\":1}}],[\"protobufbinding\",{\"1\":{\"971\":1}}],[\"protobuf的文件后缀就是\",{\"1\":{\"181\":1}}],[\"protobuf算是比较流行\",{\"1\":{\"180\":1}}],[\"protobuf\",{\"0\":{\"151\":1,\"179\":1},\"1\":{\"146\":1,\"147\":2,\"148\":2,\"156\":2,\"157\":3,\"158\":6,\"159\":1,\"164\":4,\"166\":1,\"167\":2,\"168\":2,\"186\":1,\"194\":3,\"197\":3,\"200\":2,\"202\":5,\"503\":2,\"509\":2,\"556\":1,\"617\":1,\"629\":2,\"971\":1,\"975\":1,\"981\":1}}],[\"protoc编译器可以根据我们定义好的proto文件生成对应语言的源代码\",{\"1\":{\"629\":1}}],[\"protocbuf\",{\"1\":{\"146\":1}}],[\"protocolbuffers\",{\"1\":{\"148\":1}}],[\"protocol\",{\"0\":{\"629\":1},\"1\":{\"140\":2,\"143\":2,\"144\":3,\"146\":1,\"147\":1,\"148\":1,\"156\":1,\"179\":1,\"180\":3,\"193\":1,\"200\":1,\"504\":1,\"617\":1,\"629\":1,\"817\":8}}],[\"protoc\",{\"1\":{\"6\":4,\"148\":7,\"151\":1,\"152\":2,\"153\":1,\"154\":1,\"200\":10,\"201\":7}}],[\"proiver\",{\"1\":{\"823\":1}}],[\"prometheus\",{\"1\":{\"614\":1,\"849\":1}}],[\"procyield\",{\"1\":{\"1153\":2}}],[\"procresize函数来负责初始化\",{\"1\":{\"1089\":1}}],[\"procresize\",{\"1\":{\"1089\":2}}],[\"procs\",{\"1\":{\"907\":1,\"1089\":6,\"1138\":3}}],[\"proc\",{\"1\":{\"561\":1,\"603\":1}}],[\"process\",{\"1\":{\"146\":1,\"504\":1,\"523\":13,\"1084\":1}}],[\"processor\",{\"1\":{\"7\":1,\"1085\":1}}],[\"producer\",{\"1\":{\"1104\":1}}],[\"produce\",{\"1\":{\"1011\":2}}],[\"produced\",{\"1\":{\"527\":3}}],[\"production\",{\"1\":{\"503\":1,\"817\":4}}],[\"product\",{\"1\":{\"12\":5}}],[\"proxies\",{\"1\":{\"503\":2}}],[\"proxy\",{\"1\":{\"7\":4,\"646\":2}}],[\"proposal\",{\"1\":{\"579\":1}}],[\"propagatecancel\",{\"1\":{\"477\":1}}],[\"properties\",{\"1\":{\"63\":3,\"207\":2,\"208\":1,\"788\":1,\"798\":1}}],[\"profiling\",{\"1\":{\"117\":1,\"554\":1,\"558\":1}}],[\"profile001\",{\"1\":{\"559\":1}}],[\"profiles\",{\"1\":{\"556\":1,\"561\":1}}],[\"profile\",{\"1\":{\"116\":1,\"117\":1,\"556\":1,\"557\":3,\"559\":1,\"560\":1,\"561\":3,\"956\":1}}],[\"prone\",{\"1\":{\"116\":1}}],[\"proullon\",{\"1\":{\"55\":1}}],[\"problems\",{\"1\":{\"37\":1}}],[\"progress\",{\"1\":{\"1030\":1}}],[\"progressbar\",{\"1\":{\"64\":2}}],[\"programmer\",{\"1\":{\"403\":1,\"405\":4,\"409\":1}}],[\"programmercarl\",{\"1\":{\"102\":1}}],[\"programming\",{\"1\":{\"88\":2,\"89\":1,\"104\":1,\"113\":1,\"116\":1,\"117\":1,\"286\":1,\"288\":1,\"289\":1,\"290\":1,\"291\":1,\"529\":1}}],[\"programmable\",{\"1\":{\"4\":1}}],[\"programs\",{\"1\":{\"17\":1,\"37\":1,\"113\":1}}],[\"program\",{\"1\":{\"4\":1,\"200\":1,\"504\":2,\"554\":1,\"1089\":1}}],[\"progma\",{\"1\":{\"39\":1}}],[\"prog\",{\"1\":{\"37\":1}}],[\"provier可以是开发者提供一个构造器\",{\"1\":{\"823\":1}}],[\"provier和injector\",{\"1\":{\"823\":1}}],[\"providemyfooer\",{\"1\":{\"826\":2}}],[\"provide\",{\"1\":{\"823\":1}}],[\"providebaz\",{\"1\":{\"823\":4}}],[\"providebar\",{\"1\":{\"823\":4,\"826\":2,\"828\":3}}],[\"providefoo\",{\"1\":{\"823\":3,\"828\":3}}],[\"providerset\",{\"1\":{\"828\":1}}],[\"providerprovidebar的参数是一个接口类型\",{\"1\":{\"826\":1}}],[\"provider\",{\"1\":{\"823\":4,\"824\":3,\"826\":1,\"827\":1,\"828\":1,\"829\":2,\"830\":2}}],[\"provided\",{\"1\":{\"208\":1}}],[\"provides\",{\"1\":{\"22\":1,\"31\":1,\"33\":1,\"34\":1,\"814\":1}}],[\"provenance\",{\"1\":{\"21\":1}}],[\"project这种格式单独存放每一个项目的依赖\",{\"1\":{\"28\":1}}],[\"project\",{\"1\":{\"7\":1,\"201\":3}}],[\"pacing\",{\"1\":{\"1132\":1}}],[\"pacer\",{\"1\":{\"1132\":1}}],[\"packet\",{\"1\":{\"141\":1}}],[\"pack\",{\"1\":{\"14\":3,\"495\":1,\"499\":1}}],[\"package便会为其创建一个页面\",{\"1\":{\"500\":1}}],[\"package关键字声明了是当前\",{\"1\":{\"292\":1}}],[\"package设置正确\",{\"1\":{\"201\":1}}],[\"packageerror\",{\"1\":{\"21\":3}}],[\"packagefile\",{\"1\":{\"19\":1}}],[\"packages\",{\"1\":{\"8\":1,\"14\":1,\"15\":1,\"16\":1,\"17\":1,\"18\":1,\"19\":1,\"20\":2,\"21\":1,\"22\":1,\"30\":1,\"37\":1,\"38\":1,\"40\":1,\"502\":1,\"529\":1,\"690\":1,\"702\":1,\"722\":1,\"745\":1,\"776\":1,\"831\":1,\"836\":1,\"844\":1,\"904\":1,\"957\":1}}],[\"package\",{\"0\":{\"192\":1},\"1\":{\"4\":9,\"7\":3,\"10\":1,\"12\":7,\"13\":2,\"14\":1,\"16\":2,\"17\":2,\"19\":2,\"20\":1,\"21\":31,\"37\":2,\"40\":2,\"41\":4,\"42\":1,\"43\":2,\"44\":2,\"45\":3,\"111\":1,\"112\":1,\"145\":3,\"151\":1,\"153\":1,\"154\":1,\"158\":4,\"159\":3,\"164\":2,\"165\":1,\"166\":1,\"175\":2,\"192\":1,\"198\":1,\"221\":1,\"292\":1,\"293\":1,\"294\":1,\"295\":6,\"296\":5,\"297\":1,\"298\":1,\"334\":1,\"337\":1,\"338\":1,\"339\":1,\"372\":1,\"496\":3,\"498\":1,\"500\":2,\"503\":1,\"504\":2,\"513\":3,\"518\":2,\"520\":2,\"521\":5,\"522\":1,\"523\":1,\"525\":2,\"527\":2,\"530\":1,\"531\":2,\"532\":1,\"533\":2,\"534\":1,\"535\":1,\"536\":4,\"537\":1,\"538\":1,\"539\":2,\"540\":1,\"541\":1,\"542\":1,\"543\":2,\"545\":1,\"546\":1,\"547\":1,\"550\":1,\"551\":1,\"552\":1,\"553\":2,\"556\":3,\"557\":3,\"587\":1,\"588\":1,\"629\":3,\"675\":1,\"676\":1,\"677\":1,\"678\":1,\"679\":1,\"680\":1,\"681\":2,\"682\":2,\"690\":1,\"702\":1,\"722\":1,\"723\":1,\"745\":1,\"776\":1,\"805\":2,\"814\":1,\"817\":1,\"820\":1,\"823\":6,\"824\":3,\"831\":1,\"833\":1,\"836\":1,\"844\":1,\"847\":1,\"851\":2,\"904\":1,\"942\":1,\"955\":1,\"956\":1,\"957\":1,\"960\":1,\"965\":1,\"968\":1,\"969\":1,\"970\":1,\"971\":1,\"1011\":2,\"1014\":1,\"1019\":4,\"1027\":1,\"1051\":1,\"1165\":1,\"1171\":1,\"1175\":1}}],[\"pallocchunkpages\",{\"1\":{\"1122\":1}}],[\"pad\",{\"1\":{\"1117\":1,\"1118\":1}}],[\"past\",{\"1\":{\"1111\":1}}],[\"passed\",{\"1\":{\"1080\":1}}],[\"passes\",{\"1\":{\"37\":2,\"520\":1,\"582\":1}}],[\"passing\",{\"1\":{\"533\":1}}],[\"password=\",{\"1\":{\"970\":1,\"973\":1}}],[\"password\",{\"1\":{\"174\":1,\"205\":1,\"241\":1,\"242\":1,\"243\":1,\"513\":5,\"621\":3,\"622\":2,\"946\":9,\"960\":2,\"970\":9,\"971\":6,\"972\":1,\"974\":1,\"977\":6,\"1015\":1}}],[\"pass\",{\"1\":{\"38\":5,\"497\":2,\"518\":6,\"520\":4,\"521\":3,\"522\":3,\"523\":13,\"525\":1,\"526\":2,\"527\":10,\"588\":1,\"654\":2,\"655\":2,\"656\":2,\"657\":2,\"658\":2,\"659\":2,\"660\":2,\"661\":2,\"662\":2,\"663\":2,\"664\":2,\"665\":2,\"666\":2,\"667\":2,\"668\":2,\"669\":2,\"670\":2,\"671\":2,\"672\":2,\"692\":2,\"693\":2,\"694\":2,\"695\":2,\"696\":2,\"697\":2,\"698\":2,\"699\":2,\"700\":2,\"701\":2,\"704\":2,\"705\":2,\"706\":6,\"707\":2,\"708\":2,\"709\":2,\"710\":2,\"711\":2,\"712\":2,\"713\":2,\"714\":2,\"715\":4,\"716\":2,\"717\":2,\"718\":2,\"719\":2,\"721\":2,\"960\":2}}],[\"pa\",{\"1\":{\"1070\":11}}],[\"pagecachepages\",{\"1\":{\"1120\":2}}],[\"pagealloc\",{\"1\":{\"1118\":1}}],[\"pagemarks\",{\"1\":{\"1115\":1}}],[\"pagemask\",{\"1\":{\"1099\":1}}],[\"pageinuse\",{\"1\":{\"1115\":1}}],[\"pages标记指定的页内存被释放\",{\"1\":{\"1121\":1}}],[\"pagessweptbasis\",{\"1\":{\"1118\":1}}],[\"pagesswept\",{\"1\":{\"1118\":2}}],[\"pagesinuse\",{\"1\":{\"1118\":1}}],[\"pagesize\",{\"1\":{\"1115\":2,\"1122\":1}}],[\"pagesize大小的页内存\",{\"1\":{\"1114\":1}}],[\"pagesperreclaimerchunk\",{\"1\":{\"1148\":3}}],[\"pagesperarena\",{\"1\":{\"1115\":5,\"1148\":1}}],[\"pagespecials\",{\"1\":{\"1115\":1}}],[\"pages\",{\"1\":{\"1114\":1,\"1118\":3,\"1119\":2,\"1120\":3,\"1121\":1,\"1122\":1}}],[\"pageshift\",{\"1\":{\"1100\":1,\"1117\":1}}],[\"pagefile\",{\"1\":{\"920\":1}}],[\"pagetables\",{\"1\":{\"918\":1}}],[\"page\",{\"1\":{\"877\":2,\"989\":2,\"990\":1,\"1099\":1,\"1118\":1,\"1122\":1}}],[\"payload\",{\"1\":{\"771\":2,\"774\":3}}],[\"pauseend\",{\"1\":{\"1128\":1}}],[\"pausens\",{\"1\":{\"1128\":1}}],[\"pausetotalns\",{\"1\":{\"1128\":1}}],[\"pause\",{\"1\":{\"523\":4,\"1153\":1}}],[\"pairs\",{\"1\":{\"160\":1,\"161\":4,\"163\":2}}],[\"pandaychen\",{\"1\":{\"147\":1}}],[\"paniconfault\",{\"1\":{\"1096\":1}}],[\"panicwait\",{\"1\":{\"1086\":1}}],[\"panic和\",{\"1\":{\"1086\":1}}],[\"panic就等于nil\",{\"1\":{\"1080\":1}}],[\"panicnil\",{\"1\":{\"1079\":2}}],[\"panicnilerror类型的错误\",{\"1\":{\"1079\":1}}],[\"panicnilerror\",{\"1\":{\"116\":1,\"1079\":1}}],[\"panic跟defer一样\",{\"1\":{\"1078\":1}}],[\"panic发生后便会触发defer的执行\",{\"1\":{\"1078\":1}}],[\"panic结构\",{\"1\":{\"1078\":1}}],[\"panic在运行时也有对应的结构进行表示\",{\"1\":{\"1078\":1}}],[\"panicmakeslicecap\",{\"1\":{\"1020\":1}}],[\"panicmakeslicelen\",{\"1\":{\"1020\":1,\"1024\":1}}],[\"paniclevel\",{\"1\":{\"842\":2}}],[\"panicln\",{\"1\":{\"158\":4,\"159\":4,\"165\":1,\"166\":1,\"167\":1,\"221\":1,\"224\":1,\"225\":4,\"226\":2,\"227\":4,\"228\":2,\"229\":2,\"647\":1,\"648\":1,\"649\":1}}],[\"panic日志\",{\"1\":{\"647\":1,\"648\":1,\"649\":1}}],[\"panic的参数禁止使用nil\",{\"1\":{\"607\":1}}],[\"panic恢复\",{\"1\":{\"607\":4}}],[\"panicbounds\",{\"1\":{\"1023\":1}}],[\"panicb\",{\"1\":{\"606\":6}}],[\"panica\",{\"1\":{\"606\":2}}],[\"panic函数接收一个类型为\",{\"1\":{\"605\":1}}],[\"panic是向上传递而不是向下\",{\"1\":{\"607\":1}}],[\"panic是\",{\"1\":{\"604\":1,\"1077\":1}}],[\"panic中文译为恐慌\",{\"1\":{\"604\":1}}],[\"panicking\",{\"1\":{\"485\":1}}],[\"panic`\",{\"1\":{\"468\":1}}],[\"panic现在会打印出下标信息\",{\"1\":{\"124\":1}}],[\"panic\",{\"0\":{\"604\":1,\"1077\":1},\"1\":{\"41\":1,\"145\":4,\"153\":2,\"154\":2,\"165\":2,\"166\":1,\"174\":2,\"175\":2,\"205\":2,\"207\":2,\"208\":2,\"209\":2,\"210\":2,\"212\":2,\"213\":2,\"214\":2,\"215\":2,\"216\":6,\"241\":1,\"382\":1,\"422\":2,\"477\":1,\"491\":2,\"513\":1,\"584\":2,\"598\":1,\"604\":2,\"605\":3,\"606\":16,\"607\":4,\"647\":1,\"675\":1,\"677\":2,\"678\":2,\"679\":2,\"680\":1,\"681\":2,\"682\":5,\"719\":1,\"721\":1,\"725\":4,\"727\":1,\"733\":1,\"734\":5,\"736\":2,\"751\":1,\"781\":1,\"795\":1,\"805\":2,\"812\":3,\"813\":1,\"824\":2,\"830\":1,\"840\":1,\"847\":1,\"963\":1,\"1023\":1,\"1024\":1,\"1025\":2,\"1036\":1,\"1038\":1,\"1058\":1,\"1059\":2,\"1061\":3,\"1067\":1,\"1069\":2,\"1073\":7,\"1077\":1,\"1078\":13,\"1079\":11,\"1080\":8,\"1086\":6,\"1096\":2,\"1101\":1,\"1177\":6,\"1178\":2}}],[\"parked\",{\"1\":{\"1166\":1}}],[\"park\",{\"1\":{\"1067\":1,\"1093\":3,\"1098\":2}}],[\"parkingonchan\",{\"1\":{\"1059\":1,\"1060\":1,\"1067\":1}}],[\"parsing\",{\"1\":{\"699\":1}}],[\"parsetime=true\",{\"1\":{\"851\":1}}],[\"parsetargetsize将字符串转换成指定大小的sizemeta\",{\"1\":{\"820\":1}}],[\"parsetargetsize\",{\"1\":{\"820\":2}}],[\"parsesize1\",{\"1\":{\"820\":2}}],[\"parsesize将字符串转换成一个sizemeta结构体\",{\"1\":{\"820\":1}}],[\"parsesize\",{\"1\":{\"820\":6}}],[\"parseserviceconfig\",{\"1\":{\"145\":1,\"175\":1}}],[\"parsewithclaims\",{\"1\":{\"784\":1,\"785\":1}}],[\"parseinlocation\",{\"1\":{\"740\":1}}],[\"parseglob基于通配符匹配\",{\"1\":{\"736\":1}}],[\"parseglob\",{\"1\":{\"736\":1}}],[\"parsefiles基于文件名\",{\"1\":{\"736\":1}}],[\"parsefiles\",{\"1\":{\"736\":1}}],[\"parsefs就是从指定的文件系统中加载匹配pattern的模板\",{\"1\":{\"736\":1}}],[\"parsefs\",{\"1\":{\"736\":3}}],[\"parsefloat\",{\"1\":{\"697\":3}}],[\"parsedtmpl\",{\"1\":{\"725\":2,\"733\":2}}],[\"parse方法解析模板字符串\",{\"1\":{\"723\":1}}],[\"parsecomplex\",{\"1\":{\"699\":4}}],[\"parsecidr\",{\"1\":{\"676\":2}}],[\"parsebool\",{\"1\":{\"694\":6}}],[\"parsemac\",{\"1\":{\"675\":2}}],[\"parser\",{\"1\":{\"616\":1}}],[\"parse的时间格式是否正确\",{\"1\":{\"37\":1}}],[\"parse\",{\"1\":{\"9\":1,\"496\":1,\"634\":1,\"636\":1,\"723\":2,\"725\":1,\"733\":1,\"734\":4,\"782\":1,\"783\":1,\"1016\":1}}],[\"paramtype\",{\"1\":{\"1012\":1}}],[\"paramskey\",{\"1\":{\"956\":1}}],[\"paramsfromcontext\",{\"1\":{\"956\":1}}],[\"params来访问参数切片\",{\"1\":{\"956\":1}}],[\"params\",{\"1\":{\"955\":1,\"956\":4,\"960\":3}}],[\"parameters\",{\"1\":{\"579\":1,\"830\":1}}],[\"parameter\",{\"1\":{\"553\":1}}],[\"param\",{\"1\":{\"158\":3,\"159\":1,\"165\":8,\"166\":19,\"931\":1,\"942\":1,\"968\":3,\"986\":2,\"1007\":10,\"1011\":2,\"1012\":2,\"1059\":3,\"1060\":3,\"1067\":3,\"1096\":1}}],[\"parallel的测试用例并行运行\",{\"1\":{\"519\":1}}],[\"parallel\",{\"1\":{\"38\":1,\"518\":1,\"519\":1,\"523\":3}}],[\"parentgoid\",{\"1\":{\"1086\":1,\"1095\":1}}],[\"parentindex\",{\"1\":{\"578\":7}}],[\"parent\",{\"1\":{\"18\":1,\"34\":1,\"477\":5,\"478\":4,\"520\":1}}],[\"partialunswept\",{\"1\":{\"1117\":1}}],[\"partialswept\",{\"1\":{\"1117\":1}}],[\"partial和full是两个spanset\",{\"1\":{\"1117\":1}}],[\"partial\",{\"1\":{\"1117\":2}}],[\"partitionstat\",{\"1\":{\"915\":1}}],[\"partitions\",{\"1\":{\"915\":2}}],[\"partition\",{\"1\":{\"143\":2,\"144\":3}}],[\"party\",{\"1\":{\"201\":1}}],[\"part\",{\"1\":{\"14\":1,\"21\":1,\"174\":1,\"915\":2,\"916\":2}}],[\"patch\",{\"1\":{\"505\":2}}],[\"patch了解\",{\"1\":{\"114\":1,\"115\":1,\"116\":1,\"117\":1,\"118\":1,\"119\":1,\"120\":1,\"121\":1,\"122\":1,\"123\":1,\"124\":1,\"125\":1,\"126\":1,\"127\":1,\"128\":1,\"129\":1,\"130\":1,\"131\":1,\"132\":1,\"133\":1,\"134\":1,\"135\":1,\"136\":1,\"137\":1}}],[\"patrickmn\",{\"1\":{\"61\":1}}],[\"pattern可以是\",{\"1\":{\"41\":1}}],[\"patterns\",{\"1\":{\"21\":4,\"736\":1}}],[\"pattern\",{\"1\":{\"17\":1,\"41\":1,\"201\":1,\"736\":1,\"957\":1}}],[\"pattern就是作用范围\",{\"1\":{\"9\":1}}],[\"pattern=args\",{\"1\":{\"9\":1}}],[\"patents\",{\"1\":{\"7\":1}}],[\"pathmap\",{\"1\":{\"797\":1}}],[\"path=\",{\"1\":{\"201\":8}}],[\"path=$path\",{\"1\":{\"91\":1}}],[\"path递归的进行清除\",{\"1\":{\"15\":1}}],[\"path\",{\"1\":{\"6\":1,\"9\":3,\"10\":1,\"14\":3,\"16\":1,\"17\":1,\"20\":1,\"21\":9,\"23\":1,\"34\":1,\"40\":1,\"165\":4,\"166\":18,\"167\":4,\"174\":2,\"201\":1,\"416\":1,\"421\":1,\"425\":1,\"426\":3,\"598\":2,\"616\":2,\"646\":1,\"792\":3,\"797\":1,\"817\":4,\"841\":2,\"914\":2,\"1007\":1,\"1012\":1,\"1016\":3,\"1153\":3,\"1169\":1}}],[\"paths=source\",{\"1\":{\"201\":1}}],[\"paths=import\",{\"1\":{\"201\":1}}],[\"paths中手动添加扫描路径\",{\"1\":{\"193\":1}}],[\"paths\",{\"1\":{\"4\":1,\"21\":1,\"817\":3}}],[\"<>\",{\"1\":{\"1021\":1}}],[\"<mem>\",{\"1\":{\"1021\":1,\"1023\":3}}],[\"<meta\",{\"1\":{\"41\":2,\"980\":1}}],[\"<methodorfield>\",{\"1\":{\"4\":4}}],[\"<int64>\",{\"1\":{\"1023\":1}}],[\"<int\",{\"1\":{\"1021\":1}}],[\"<int>\",{\"1\":{\"1021\":4,\"1023\":3}}],[\"<id>120<\",{\"1\":{\"619\":1,\"620\":1}}],[\"<title>ginlearn<\",{\"1\":{\"980\":1}}],[\"<title>hello\",{\"1\":{\"41\":2}}],[\"<token>\",{\"1\":{\"775\":1}}],[\"<bool>\",{\"1\":{\"1023\":1}}],[\"<body>\",{\"1\":{\"41\":2,\"980\":1}}],[\"<b>html<\",{\"1\":{\"720\":1}}],[\"<address>usa<\",{\"1\":{\"619\":1,\"620\":1}}],[\"<age>18<\",{\"1\":{\"619\":1,\"620\":1}}],[\"<alphanum>\",{\"1\":{\"209\":7}}],[\"<all>\",{\"1\":{\"141\":1,\"143\":3,\"144\":10}}],[\"<port>组合\",{\"1\":{\"932\":1}}],[\"<person>\",{\"1\":{\"619\":1,\"620\":1}}],[\"<pkg>\",{\"1\":{\"4\":4}}],[\"<errno\",{\"1\":{\"531\":1}}],[\"<=\",{\"1\":{\"299\":1,\"350\":3,\"354\":4,\"356\":2,\"371\":2,\"531\":2,\"578\":1,\"600\":2,\"1024\":3,\"1025\":1,\"1040\":1,\"1054\":2,\"1089\":1,\"1098\":1,\"1107\":1,\"1122\":1,\"1124\":3,\"1125\":1,\"1148\":1,\"1153\":2,\"1165\":1}}],[\"<nil>\",{\"1\":{\"159\":10,\"166\":9,\"167\":5,\"227\":1,\"258\":1,\"391\":1,\"416\":1,\"566\":1,\"692\":1,\"694\":3,\"697\":2,\"699\":1,\"779\":1,\"780\":1,\"781\":1,\"946\":1,\"949\":1,\"950\":1,\"1070\":4}}],[\"<name>jack<\",{\"1\":{\"619\":1,\"620\":1}}],[\"<name>=<value>\",{\"1\":{\"7\":1}}],[\"<name>\",{\"1\":{\"7\":2}}],[\"<default>\",{\"1\":{\"143\":1}}],[\"<stdlib\",{\"1\":{\"536\":4}}],[\"<stdint\",{\"1\":{\"531\":1,\"533\":3,\"539\":2,\"540\":1,\"541\":1,\"542\":1,\"543\":2,\"545\":2,\"547\":1}}],[\"<stdio\",{\"1\":{\"530\":1,\"531\":2,\"533\":3,\"534\":1,\"535\":1,\"536\":4,\"537\":1,\"538\":1,\"539\":2,\"540\":1,\"541\":1,\"542\":1,\"543\":2}}],[\"<script>\",{\"1\":{\"41\":2}}],[\"<sym>\",{\"1\":{\"4\":4}}],[\"<h1>404\",{\"1\":{\"989\":2,\"990\":1}}],[\"<h1>this\",{\"1\":{\"980\":1}}],[\"<h1>hello\",{\"1\":{\"41\":2,\"955\":1,\"956\":1,\"980\":1}}],[\"<head>\",{\"1\":{\"41\":2,\"980\":1}}],[\"<html\",{\"1\":{\"41\":2,\"980\":1}}],[\"<\",{\"1\":{\"41\":14,\"115\":1,\"137\":2,\"158\":2,\"159\":3,\"299\":1,\"312\":2,\"341\":1,\"349\":10,\"350\":3,\"354\":3,\"356\":4,\"357\":4,\"369\":1,\"370\":1,\"380\":4,\"388\":1,\"389\":3,\"398\":1,\"399\":1,\"406\":1,\"418\":2,\"424\":1,\"448\":1,\"451\":4,\"456\":1,\"462\":4,\"465\":6,\"466\":4,\"467\":19,\"468\":10,\"469\":5,\"470\":8,\"471\":26,\"472\":1,\"474\":2,\"475\":1,\"476\":2,\"477\":5,\"478\":1,\"479\":1,\"480\":1,\"481\":2,\"482\":3,\"484\":1,\"485\":1,\"486\":4,\"520\":2,\"525\":4,\"527\":3,\"539\":2,\"547\":1,\"555\":1,\"559\":1,\"560\":2,\"578\":5,\"581\":1,\"595\":4,\"619\":1,\"688\":1,\"713\":1,\"720\":1,\"741\":1,\"742\":2,\"753\":2,\"755\":1,\"834\":1,\"862\":5,\"980\":5,\"995\":2,\"1019\":1,\"1020\":2,\"1023\":2,\"1025\":4,\"1026\":1,\"1028\":1,\"1034\":2,\"1036\":1,\"1037\":1,\"1038\":1,\"1039\":1,\"1040\":1,\"1042\":2,\"1046\":1,\"1052\":2,\"1053\":1,\"1055\":2,\"1056\":2,\"1059\":3,\"1060\":2,\"1062\":2,\"1063\":3,\"1066\":3,\"1067\":12,\"1074\":1,\"1089\":3,\"1098\":1,\"1100\":2,\"1102\":1,\"1104\":1,\"1107\":1,\"1112\":2,\"1115\":1,\"1120\":3,\"1121\":1,\"1122\":1,\"1124\":2,\"1125\":2,\"1138\":1,\"1139\":3,\"1159\":2,\"1160\":2,\"1161\":1,\"1162\":1,\"1177\":2}}],[\"<command>\",{\"1\":{\"22\":2,\"31\":1}}],[\"<<\",{\"1\":{\"14\":1,\"19\":1,\"299\":1,\"325\":1,\"392\":8,\"555\":1,\"560\":1,\"649\":1,\"651\":6,\"738\":1,\"986\":1,\"998\":1,\"1030\":1,\"1032\":3,\"1034\":3,\"1036\":4,\"1037\":3,\"1038\":1,\"1041\":2,\"1042\":4,\"1043\":1,\"1067\":3,\"1112\":1,\"1115\":5,\"1117\":1,\"1118\":2,\"1148\":1,\"1151\":1,\"1153\":1,\"1156\":1,\"1177\":2}}],[\"c+1\",{\"1\":{\"1160\":2}}],[\"c++不同\",{\"1\":{\"1109\":1}}],[\"c++的构建工具链\",{\"1\":{\"530\":1}}],[\"c++的编译器\",{\"1\":{\"8\":1}}],[\"c++代码\",{\"1\":{\"392\":1}}],[\"c++看齐\",{\"1\":{\"118\":1}}],[\"c++项目漫长的编译过程中\",{\"1\":{\"87\":1}}],[\"c++stl\",{\"1\":{\"58\":1}}],[\"c++\",{\"1\":{\"21\":1,\"405\":2,\"715\":3}}],[\"c++调试器\",{\"1\":{\"8\":1}}],[\"cycles+0\",{\"1\":{\"1153\":1}}],[\"cycles\",{\"1\":{\"1132\":2}}],[\"cycle\",{\"1\":{\"1086\":1,\"1118\":1,\"1132\":6}}],[\"c和d都实现了close方法\",{\"1\":{\"1069\":1}}],[\"c0\",{\"1\":{\"1033\":2,\"1067\":3}}],[\"c0e9867c7d446bff72fe46e7e9fe3455e970a8adb0d3df0e1472d55db2612cd5\",{\"1\":{\"205\":1}}],[\"c555\",{\"1\":{\"907\":1}}],[\"circular\",{\"1\":{\"1057\":1}}],[\"cidrv6\",{\"1\":{\"932\":2}}],[\"cidrv4\",{\"1\":{\"932\":2}}],[\"cidr\",{\"0\":{\"676\":1},\"1\":{\"932\":2}}],[\"cilium\",{\"1\":{\"504\":1}}],[\"cb\",{\"1\":{\"712\":1}}],[\"cbba\",{\"1\":{\"711\":1}}],[\"cbrt\",{\"1\":{\"668\":2}}],[\"cbytes\",{\"1\":{\"536\":6}}],[\"customwraphandler\",{\"1\":{\"1016\":3}}],[\"customrecoverywithwriter\",{\"1\":{\"982\":1,\"995\":1}}],[\"customtagnamefunc\",{\"1\":{\"952\":4}}],[\"customtimeformatencoder\",{\"1\":{\"840\":2}}],[\"custom\",{\"1\":{\"798\":1}}],[\"cutset\",{\"1\":{\"718\":8}}],[\"cut\",{\"1\":{\"708\":7}}],[\"cum\",{\"1\":{\"559\":6,\"560\":1}}],[\"curarena\",{\"1\":{\"1122\":8}}],[\"curg\",{\"1\":{\"1087\":3,\"1098\":1,\"1101\":1,\"1104\":1,\"1139\":2}}],[\"curfn\",{\"1\":{\"1076\":5}}],[\"cursor\",{\"1\":{\"225\":4}}],[\"currency\",{\"1\":{\"195\":4}}],[\"currentdatabase\",{\"1\":{\"863\":1}}],[\"current\",{\"1\":{\"18\":1,\"22\":1,\"34\":1,\"504\":1,\"951\":1,\"1037\":1,\"1086\":2,\"1087\":1,\"1112\":1,\"1116\":1,\"1132\":1,\"1139\":1,\"1144\":3}}],[\"curve\",{\"1\":{\"117\":1}}],[\"curl\",{\"1\":{\"41\":2,\"143\":3,\"561\":1,\"968\":2,\"969\":2,\"970\":2,\"972\":1,\"973\":1,\"974\":1,\"977\":1,\"980\":1,\"982\":1,\"984\":1,\"985\":1,\"986\":1,\"989\":1,\"990\":1,\"991\":1,\"993\":1,\"994\":1,\"996\":1}}],[\"c举例\",{\"1\":{\"546\":1}}],[\"c这个包也是不存在的\",{\"1\":{\"536\":1}}],[\"cthiiodvwdueqb468k5xdc5633seefoqwxjf\",{\"1\":{\"774\":1}}],[\"ctype\",{\"1\":{\"535\":2,\"540\":2}}],[\"ctxt\",{\"1\":{\"1086\":1,\"1107\":6}}],[\"ctx\",{\"1\":{\"153\":1,\"158\":3,\"159\":2,\"162\":5,\"163\":9,\"164\":1,\"165\":4,\"166\":15,\"167\":3,\"168\":2,\"171\":1,\"221\":4,\"224\":1,\"225\":4,\"226\":2,\"227\":4,\"228\":2,\"229\":2,\"476\":3,\"477\":17,\"478\":3,\"520\":4,\"823\":4,\"977\":4,\"982\":2,\"984\":6,\"985\":5,\"986\":7,\"993\":1,\"1011\":6,\"1016\":15,\"1063\":2}}],[\"c文件\",{\"1\":{\"545\":1}}],[\"c文件中导入的\",{\"1\":{\"533\":1}}],[\"c文件为如下内容\",{\"1\":{\"533\":1}}],[\"c1\",{\"1\":{\"508\":1,\"1033\":2}}],[\"c95f2b4c22f2\",{\"1\":{\"504\":1}}],[\"cease\",{\"1\":{\"1140\":1}}],[\"central\",{\"1\":{\"1116\":3,\"1117\":1,\"1118\":1,\"1119\":2,\"1125\":1}}],[\"center\",{\"1\":{\"142\":1,\"143\":2}}],[\"cells\",{\"1\":{\"1030\":1}}],[\"celler\",{\"1\":{\"1011\":2}}],[\"certificates\",{\"1\":{\"1000\":1}}],[\"certificatefingerprint\",{\"1\":{\"205\":1}}],[\"ceil\",{\"1\":{\"662\":1}}],[\"cespare\",{\"1\":{\"24\":1}}],[\"csp\",{\"1\":{\"1056\":2,\"1084\":3}}],[\"csrf\",{\"1\":{\"1002\":1}}],[\"css|swagger\",{\"1\":{\"1016\":1}}],[\"css\",{\"1\":{\"736\":1,\"1010\":1,\"1016\":3}}],[\"cst\",{\"1\":{\"559\":2,\"737\":1,\"740\":1,\"741\":1,\"742\":3,\"743\":2,\"784\":3}}],[\"cstring\",{\"1\":{\"530\":1,\"536\":6,\"540\":1}}],[\"cs\",{\"1\":{\"74\":1,\"140\":1}}],[\"cznic\",{\"1\":{\"62\":1}}],[\"crud\",{\"1\":{\"849\":1}}],[\"crunch\",{\"1\":{\"59\":2}}],[\"craneb\",{\"1\":{\"567\":5}}],[\"cranea\",{\"1\":{\"567\":5}}],[\"crane\",{\"1\":{\"567\":6}}],[\"crash包无法访问baz包中的类型\",{\"1\":{\"296\":1}}],[\"crash\",{\"1\":{\"296\":1,\"963\":1,\"1079\":1}}],[\"crypto\",{\"1\":{\"503\":2,\"509\":3,\"616\":1}}],[\"credit\",{\"1\":{\"934\":1,\"1148\":5}}],[\"creds\",{\"1\":{\"145\":1}}],[\"credentials\",{\"1\":{\"145\":2,\"154\":1,\"158\":1,\"159\":1,\"166\":1,\"175\":1,\"513\":1,\"1000\":2}}],[\"creat\",{\"1\":{\"416\":1}}],[\"creationtime\",{\"1\":{\"416\":1}}],[\"creation\",{\"1\":{\"208\":2}}],[\"creating\",{\"1\":{\"23\":1,\"495\":1,\"503\":1}}],[\"createstack\",{\"1\":{\"1089\":1}}],[\"createoverflow\",{\"1\":{\"1037\":1}}],[\"createbatch\",{\"1\":{\"902\":2}}],[\"createbatchsize\",{\"1\":{\"852\":1}}],[\"createinbatches\",{\"1\":{\"866\":1}}],[\"createindices\",{\"1\":{\"207\":3}}],[\"createindex\",{\"1\":{\"143\":3,\"863\":1}}],[\"createconstraint\",{\"1\":{\"863\":1}}],[\"createview\",{\"1\":{\"863\":1}}],[\"createtable\",{\"1\":{\"863\":1,\"864\":1,\"893\":1}}],[\"create|o\",{\"1\":{\"418\":1}}],[\"create|os\",{\"1\":{\"418\":3,\"419\":2,\"426\":1}}],[\"create函数用于创建文件\",{\"1\":{\"418\":1}}],[\"create一起使用\",{\"1\":{\"416\":1}}],[\"create\",{\"0\":{\"866\":1},\"1\":{\"166\":6,\"167\":2,\"207\":1,\"212\":4,\"216\":4,\"233\":1,\"416\":2,\"417\":2,\"418\":1,\"422\":5,\"477\":1,\"499\":5,\"556\":3,\"849\":2,\"856\":1,\"862\":1,\"863\":2,\"866\":3,\"867\":3,\"895\":2,\"897\":2,\"901\":2,\"902\":4,\"1007\":2,\"1016\":1,\"1089\":1,\"1137\":1,\"1138\":1}}],[\"createpersoninfotream\",{\"1\":{\"166\":2,\"167\":2}}],[\"createpersoninfoserver\",{\"1\":{\"164\":1}}],[\"createpersoninfo\",{\"1\":{\"164\":2,\"166\":8,\"167\":6}}],[\"createdat\",{\"1\":{\"856\":2,\"857\":1,\"858\":2,\"859\":2}}],[\"created\",{\"1\":{\"21\":1,\"208\":2,\"212\":2,\"1086\":1}}],[\"cross\",{\"1\":{\"144\":1,\"926\":4}}],[\"cron\",{\"1\":{\"66\":2}}],[\"c=n\",{\"1\":{\"37\":1}}],[\"c=4\",{\"1\":{\"14\":1}}],[\"cd\",{\"1\":{\"23\":1,\"34\":2,\"201\":1,\"495\":1,\"545\":1,\"1165\":6}}],[\"cx就是将字符串的地址存储到cx上\",{\"1\":{\"1038\":1}}],[\"cxx\",{\"1\":{\"21\":1}}],[\"cxxfiles\",{\"1\":{\"21\":1}}],[\"cxxflags=\",{\"1\":{\"6\":1}}],[\"cx\",{\"1\":{\"9\":2,\"1021\":1,\"1038\":3}}],[\"cmplx\",{\"1\":{\"616\":1}}],[\"cmp\",{\"1\":{\"57\":2,\"332\":3,\"578\":1,\"587\":4}}],[\"cmpq\",{\"1\":{\"9\":1,\"45\":1,\"1067\":2}}],[\"cmdline\",{\"1\":{\"557\":3}}],[\"cmdlist\",{\"1\":{\"4\":1}}],[\"cmd了解命令的更多有关信息\",{\"1\":{\"506\":1,\"514\":1}}],[\"cmdvet\",{\"1\":{\"4\":1}}],[\"cmdversion\",{\"1\":{\"4\":1}}],[\"cmdtool\",{\"1\":{\"4\":1}}],[\"cmdtest\",{\"1\":{\"4\":1}}],[\"cmdrun\",{\"1\":{\"4\":1}}],[\"cmdwork\",{\"1\":{\"4\":1}}],[\"cmdmod\",{\"1\":{\"4\":1}}],[\"cmdinstall\",{\"1\":{\"4\":1}}],[\"cmdget\",{\"1\":{\"4\":1,\"18\":6}}],[\"cmdgenerate\",{\"1\":{\"4\":1}}],[\"cmdfmt\",{\"1\":{\"4\":1}}],[\"cmdfix\",{\"1\":{\"4\":1}}],[\"cmdenv\",{\"1\":{\"4\":1}}],[\"cmddoc\",{\"1\":{\"4\":1}}],[\"cmdclean\",{\"1\":{\"4\":1}}],[\"cmdbuild\",{\"1\":{\"4\":1}}],[\"cmdbug\",{\"1\":{\"4\":1}}],[\"cmd包下\",{\"1\":{\"4\":1}}],[\"cmd\",{\"1\":{\"4\":2,\"6\":1,\"8\":1,\"9\":2,\"14\":3,\"17\":1,\"18\":1,\"19\":6,\"21\":3,\"37\":2,\"148\":2,\"156\":1,\"200\":2,\"201\":1,\"496\":1,\"497\":1,\"498\":2,\"499\":6,\"500\":2,\"504\":1,\"507\":1,\"529\":1,\"822\":1,\"823\":1,\"824\":1,\"1010\":1,\"1030\":1,\"1037\":3,\"1061\":3}}],[\"cnt\",{\"1\":{\"1153\":2}}],[\"cnblogs\",{\"1\":{\"981\":1}}],[\"cncf\",{\"1\":{\"146\":2}}],[\"cn\",{\"1\":{\"7\":24,\"19\":16,\"25\":2,\"91\":1,\"101\":1,\"112\":1,\"147\":1,\"166\":2,\"167\":2,\"175\":1,\"227\":5,\"501\":2,\"620\":1,\"750\":1,\"814\":1,\"875\":3,\"878\":2,\"879\":2,\"880\":2,\"923\":1,\"950\":1}}],[\"cfflags和ldflags这两个都是\",{\"1\":{\"545\":1}}],[\"cflags\",{\"1\":{\"545\":2,\"546\":1}}],[\"cflags=\",{\"1\":{\"6\":1}}],[\"cfiles\",{\"1\":{\"21\":1}}],[\"cftype\",{\"1\":{\"16\":1}}],[\"cfg\",{\"1\":{\"7\":1,\"18\":1,\"205\":1,\"817\":9,\"840\":3,\"841\":9,\"842\":2,\"843\":6}}],[\"cpython3\",{\"1\":{\"75\":1}}],[\"cpython2\",{\"1\":{\"75\":1}}],[\"cpp\",{\"1\":{\"21\":1}}],[\"cppflags=\",{\"1\":{\"6\":1}}],[\"cpu核数大于1\",{\"1\":{\"1153\":1}}],[\"cpu占用过高\",{\"1\":{\"1153\":1}}],[\"cpu7\",{\"1\":{\"912\":1}}],[\"cpu6\",{\"1\":{\"912\":1}}],[\"cpu5\",{\"1\":{\"912\":1}}],[\"cpu4\",{\"1\":{\"912\":1}}],[\"cpu3\",{\"1\":{\"912\":1}}],[\"cpu2\",{\"1\":{\"912\":1}}],[\"cpu1\",{\"1\":{\"912\":1}}],[\"cpu0\",{\"1\":{\"912\":1}}],[\"cpu火焰图\",{\"1\":{\"560\":1}}],[\"cpu分析图\",{\"1\":{\"560\":1}}],[\"cpu是一些关于\",{\"1\":{\"525\":1}}],[\"cpu=2\",{\"1\":{\"525\":1,\"526\":2}}],[\"cpuprofile\",{\"1\":{\"519\":1}}],[\"cpuguy83\",{\"1\":{\"504\":1}}],[\"cpuid\",{\"1\":{\"503\":2,\"509\":1}}],[\"cpu个数\",{\"1\":{\"242\":1}}],[\"cpu\",{\"0\":{\"908\":1},\"1\":{\"7\":4,\"11\":2,\"14\":1,\"20\":1,\"38\":3,\"40\":1,\"117\":1,\"410\":1,\"490\":1,\"518\":1,\"519\":3,\"525\":6,\"526\":3,\"548\":1,\"554\":1,\"555\":1,\"556\":2,\"557\":1,\"559\":1,\"588\":1,\"904\":1,\"908\":2,\"909\":3,\"910\":1,\"911\":1,\"912\":9,\"1085\":5,\"1089\":1,\"1097\":2,\"1103\":1,\"1117\":3,\"1118\":3,\"1131\":1,\"1140\":1,\"1153\":2}}],[\"ch4\",{\"1\":{\"1067\":2}}],[\"ch3\",{\"1\":{\"1067\":2}}],[\"ch2\",{\"1\":{\"1067\":2}}],[\"ch1\",{\"1\":{\"1067\":2}}],[\"chi\",{\"1\":{\"1009\":2}}],[\"china\",{\"1\":{\"226\":1,\"907\":1}}],[\"chunks\",{\"1\":{\"1112\":1}}],[\"chunk函数会返回一个迭代器\",{\"1\":{\"585\":1}}],[\"chunk\",{\"1\":{\"585\":5,\"1112\":8}}],[\"chore\",{\"1\":{\"499\":3}}],[\"chc\",{\"1\":{\"471\":14}}],[\"chb\",{\"1\":{\"471\":14}}],[\"chr\",{\"1\":{\"467\":4}}],[\"chw\",{\"1\":{\"467\":4}}],[\"ch\",{\"1\":{\"463\":1,\"465\":2,\"466\":8,\"467\":18,\"468\":7,\"469\":5,\"470\":11,\"471\":4,\"535\":3,\"541\":1,\"688\":1,\"689\":1,\"1058\":1,\"1059\":1,\"1060\":2,\"1061\":2,\"1062\":4,\"1066\":7,\"1067\":5}}],[\"cha\",{\"1\":{\"471\":19}}],[\"charge\",{\"1\":{\"1139\":2}}],[\"chars\",{\"1\":{\"706\":3,\"712\":2}}],[\"charset=utf8mb4\",{\"1\":{\"851\":1}}],[\"charset=utf\",{\"1\":{\"639\":1,\"965\":1,\"1016\":3}}],[\"charset=\",{\"1\":{\"41\":2,\"980\":1}}],[\"char类型\",{\"1\":{\"536\":1}}],[\"char对应\",{\"1\":{\"535\":1}}],[\"char了\",{\"1\":{\"534\":1}}],[\"charlie\",{\"1\":{\"398\":1}}],[\"char\",{\"0\":{\"535\":1},\"1\":{\"328\":1,\"533\":2,\"534\":4,\"535\":7,\"536\":11,\"537\":4,\"540\":2,\"541\":1,\"755\":2}}],[\"characters\",{\"1\":{\"380\":1}}],[\"character\",{\"1\":{\"233\":4}}],[\"chainstreaminterceptor\",{\"1\":{\"165\":2}}],[\"chainunaryinterceptor\",{\"1\":{\"165\":2}}],[\"chattask\",{\"1\":{\"159\":12}}],[\"chatch\",{\"1\":{\"159\":3}}],[\"chaterr\",{\"1\":{\"159\":5}}],[\"chatserver\",{\"1\":{\"159\":7,\"162\":3}}],[\"chatserviceclient\",{\"1\":{\"159\":1}}],[\"chatservice\",{\"1\":{\"159\":5,\"162\":2}}],[\"chat\",{\"1\":{\"159\":14,\"162\":1}}],[\"chanrecv中完全一致\",{\"1\":{\"1067\":1}}],[\"chanrecv\",{\"1\":{\"1060\":6,\"1066\":2}}],[\"chanrecv的调用\",{\"1\":{\"1060\":1}}],[\"chanrecv1\",{\"1\":{\"1066\":1}}],[\"chanrecv1函数的直接调用\",{\"1\":{\"1066\":1}}],[\"chanrecv1的调用\",{\"1\":{\"1060\":1}}],[\"chanrecv1和runtime\",{\"1\":{\"1060\":1}}],[\"chanparkcommit\",{\"1\":{\"1059\":1,\"1060\":1}}],[\"chanbuf\",{\"1\":{\"1059\":1,\"1060\":2,\"1067\":2}}],[\"chansend末尾对于sudog\",{\"1\":{\"1060\":1}}],[\"chansend\",{\"1\":{\"1059\":7,\"1066\":2}}],[\"chansend函数\",{\"1\":{\"1059\":1}}],[\"chansend1函数的直接调用\",{\"1\":{\"1066\":1}}],[\"chansend1会向其传递elem指针\",{\"1\":{\"1059\":1}}],[\"chansend1\",{\"1\":{\"1059\":2}}],[\"chantype\",{\"1\":{\"1058\":2}}],[\"chan是引用类型\",{\"1\":{\"469\":1}}],[\"chan<\",{\"1\":{\"464\":1,\"468\":1,\"469\":2,\"471\":2}}],[\"channels\",{\"1\":{\"1067\":1}}],[\"channel就是为此而生\",{\"1\":{\"463\":1}}],[\"channel\",{\"1\":{\"284\":3,\"462\":1,\"463\":1,\"469\":1,\"741\":2,\"1056\":5,\"1057\":5,\"1059\":2,\"1061\":4,\"1067\":2}}],[\"changing\",{\"1\":{\"1166\":1}}],[\"changkun\",{\"1\":{\"99\":1}}],[\"changenotification\",{\"1\":{\"195\":1}}],[\"changed\",{\"1\":{\"7\":2,\"499\":6}}],[\"change\",{\"1\":{\"4\":1,\"7\":2,\"16\":2,\"113\":1,\"1037\":1}}],[\"changes\",{\"1\":{\"3\":1,\"1067\":1}}],[\"chan\",{\"0\":{\"1056\":1},\"1\":{\"37\":1,\"159\":1,\"298\":1,\"320\":1,\"393\":1,\"432\":3,\"441\":2,\"458\":1,\"463\":1,\"464\":3,\"465\":1,\"466\":2,\"467\":7,\"468\":8,\"469\":4,\"470\":3,\"471\":15,\"474\":2,\"475\":1,\"477\":1,\"580\":1,\"595\":4,\"1056\":1,\"1058\":1,\"1062\":2,\"1063\":1,\"1064\":1,\"1066\":4,\"1067\":5,\"1086\":6}}],[\"cherry\",{\"1\":{\"587\":2}}],[\"chenzhuoyu\",{\"1\":{\"24\":1,\"503\":2,\"509\":3}}],[\"checkmarksmap\",{\"1\":{\"1115\":1}}],[\"checkmarks\",{\"1\":{\"1115\":1}}],[\"checkbucket\",{\"1\":{\"1037\":1}}],[\"checkredirect\",{\"1\":{\"640\":1}}],[\"checks\",{\"1\":{\"233\":2,\"1080\":1}}],[\"checksum\",{\"1\":{\"7\":1,\"81\":2,\"511\":1,\"598\":2}}],[\"check\",{\"1\":{\"28\":1,\"37\":4,\"503\":1,\"862\":2,\"1042\":1,\"1061\":2,\"1089\":1,\"1097\":1,\"1098\":1,\"1107\":1,\"1128\":1,\"1132\":1}}],[\"checking\",{\"1\":{\"9\":2,\"1107\":1}}],[\"ccc\",{\"1\":{\"686\":1}}],[\"cccc\",{\"1\":{\"350\":1}}],[\"cc\",{\"1\":{\"7\":1,\"21\":1,\"145\":9,\"166\":11,\"174\":1,\"175\":7}}],[\"cgopkgconfig\",{\"1\":{\"21\":1}}],[\"cgoldflags\",{\"1\":{\"21\":1}}],[\"cgofflags\",{\"1\":{\"21\":1}}],[\"cgofiles\",{\"1\":{\"21\":2}}],[\"cgocall\",{\"1\":{\"37\":1}}],[\"cgocxxflags\",{\"1\":{\"21\":1}}],[\"cgocppflags\",{\"1\":{\"21\":1}}],[\"cgocflags\",{\"1\":{\"21\":1}}],[\"cgo\",{\"0\":{\"529\":1},\"1\":{\"6\":5,\"7\":3,\"11\":6,\"12\":4,\"14\":2,\"21\":7,\"42\":1,\"62\":2,\"116\":1,\"117\":1,\"136\":1,\"529\":6,\"530\":7,\"531\":2,\"532\":3,\"533\":12,\"534\":2,\"536\":1,\"537\":5,\"538\":1,\"539\":2,\"540\":2,\"543\":3,\"544\":1,\"545\":5,\"546\":3,\"547\":12,\"1086\":1,\"1097\":1}}],[\"clairctl\",{\"1\":{\"788\":1}}],[\"claim\",{\"1\":{\"778\":7}}],[\"claimstrings\",{\"1\":{\"778\":1}}],[\"claims是可以由使用\",{\"1\":{\"773\":1}}],[\"claims代表着\",{\"1\":{\"773\":1}}],[\"claims\",{\"0\":{\"780\":1,\"781\":1,\"784\":1},\"1\":{\"773\":2,\"778\":3,\"779\":1,\"780\":2,\"781\":5,\"782\":3,\"784\":7,\"785\":6}}],[\"class128\",{\"1\":{\"1125\":1}}],[\"class8\",{\"1\":{\"1125\":1}}],[\"class\",{\"1\":{\"328\":1,\"812\":11,\"813\":4,\"1114\":4,\"1117\":2,\"1125\":1}}],[\"clauses\",{\"1\":{\"867\":3,\"881\":2}}],[\"clausebuilder\",{\"1\":{\"852\":1}}],[\"clausebuilders\",{\"1\":{\"852\":2}}],[\"clause\",{\"1\":{\"87\":1,\"852\":2,\"863\":1,\"867\":7,\"881\":2,\"887\":1,\"899\":1}}],[\"clobbering\",{\"1\":{\"1107\":1}}],[\"clobber\",{\"1\":{\"1101\":1}}],[\"cloning\",{\"1\":{\"495\":1}}],[\"clone函数\",{\"1\":{\"378\":1}}],[\"clone\",{\"1\":{\"206\":1,\"362\":1,\"378\":1,\"495\":1,\"704\":2,\"776\":1}}],[\"closing\",{\"1\":{\"829\":1}}],[\"closure\",{\"1\":{\"399\":1}}],[\"closer\",{\"1\":{\"1069\":5}}],[\"closers\",{\"1\":{\"1069\":2}}],[\"closechan\",{\"1\":{\"1061\":2}}],[\"closechan的调用\",{\"1\":{\"1061\":1}}],[\"closed\",{\"1\":{\"600\":1,\"1057\":2,\"1059\":7,\"1060\":3,\"1061\":3,\"1062\":2,\"1066\":2,\"1067\":3}}],[\"close函数的形参是一个只写通道\",{\"1\":{\"469\":1}}],[\"closesend\",{\"1\":{\"159\":1}}],[\"closeandrecv\",{\"1\":{\"158\":1,\"166\":1,\"167\":1}}],[\"close\",{\"1\":{\"145\":2,\"154\":1,\"158\":1,\"159\":4,\"174\":2,\"175\":2,\"206\":1,\"234\":1,\"244\":1,\"416\":2,\"417\":2,\"418\":2,\"419\":4,\"422\":1,\"424\":1,\"426\":2,\"464\":2,\"465\":1,\"466\":2,\"467\":5,\"468\":7,\"469\":1,\"470\":2,\"471\":13,\"553\":1,\"598\":1,\"638\":1,\"639\":1,\"641\":1,\"642\":1,\"682\":2,\"805\":2,\"882\":1,\"1061\":3,\"1069\":8,\"1072\":1}}],[\"cloudwego\",{\"1\":{\"51\":1,\"53\":1}}],[\"cloud\",{\"1\":{\"20\":1,\"72\":2,\"146\":1,\"147\":1,\"178\":1,\"510\":1}}],[\"cluster\",{\"1\":{\"141\":1,\"144\":1,\"205\":3}}],[\"cleared\",{\"1\":{\"1097\":1}}],[\"clear\",{\"0\":{\"372\":1},\"1\":{\"372\":2,\"387\":3,\"898\":1,\"1024\":1,\"1027\":1,\"1040\":1,\"1067\":1,\"1097\":1}}],[\"clearcache\",{\"1\":{\"206\":1}}],[\"cleanuphelper\",{\"1\":{\"522\":3,\"523\":3,\"524\":2}}],[\"cleanup的例子就可以修改为帮助函数\",{\"1\":{\"522\":1}}],[\"cleanup\",{\"0\":{\"829\":1},\"1\":{\"521\":2,\"522\":2,\"523\":2,\"524\":2,\"829\":5}}],[\"cleanup来注册一个收尾函数专门做此事\",{\"1\":{\"521\":1}}],[\"clean命令清除即可\",{\"1\":{\"15\":1}}],[\"clean命令用于清除编译过程中生成的对象文件\",{\"1\":{\"15\":1}}],[\"clean\",{\"0\":{\"15\":1},\"1\":{\"2\":1,\"4\":1,\"7\":2,\"15\":7,\"506\":1,\"507\":1}}],[\"clements接手并领导后续的开发工作\",{\"1\":{\"87\":1}}],[\"clients\",{\"1\":{\"1016\":1}}],[\"clientstreaminterceptorwrapper\",{\"1\":{\"166\":4}}],[\"clientstreams\",{\"1\":{\"166\":4}}],[\"clientstream\",{\"1\":{\"163\":1,\"165\":2,\"166\":10}}],[\"clientip\",{\"1\":{\"1007\":1}}],[\"clientconn\",{\"1\":{\"145\":3,\"166\":8,\"174\":2,\"175\":2}}],[\"client01\",{\"1\":{\"143\":1}}],[\"client=0\",{\"1\":{\"143\":6,\"144\":2}}],[\"client\",{\"1\":{\"141\":2,\"142\":5,\"143\":9,\"144\":1,\"145\":23,\"150\":1,\"154\":3,\"155\":2,\"158\":17,\"159\":17,\"163\":6,\"164\":1,\"166\":24,\"167\":16,\"168\":1,\"170\":1,\"171\":1,\"174\":4,\"175\":14,\"205\":7,\"207\":2,\"208\":2,\"209\":2,\"210\":2,\"212\":2,\"213\":2,\"214\":2,\"215\":2,\"216\":6,\"221\":4,\"224\":1,\"225\":2,\"226\":2,\"227\":4,\"228\":2,\"229\":1,\"239\":2,\"504\":1,\"640\":1,\"641\":3,\"642\":3,\"801\":2,\"829\":1,\"1000\":1}}],[\"clickhouse\",{\"1\":{\"851\":2}}],[\"click\",{\"1\":{\"108\":1,\"111\":1,\"112\":1}}],[\"cli\",{\"1\":{\"6\":1,\"141\":1,\"156\":1,\"615\":3}}],[\"camera\",{\"1\":{\"984\":1,\"985\":3}}],[\"cake即策略对象\",{\"1\":{\"760\":1}}],[\"cake\",{\"1\":{\"760\":1}}],[\"cayley\",{\"1\":{\"614\":1}}],[\"caddy\",{\"1\":{\"612\":1}}],[\"capmem\",{\"1\":{\"1025\":9}}],[\"capitalcolorlevelencoder\",{\"1\":{\"840\":1}}],[\"capturing\",{\"1\":{\"551\":1}}],[\"cap\",{\"1\":{\"361\":1,\"365\":1,\"371\":7,\"417\":2,\"456\":1,\"467\":1,\"485\":1,\"1019\":4,\"1020\":11,\"1021\":3,\"1024\":6,\"1025\":1,\"1071\":1,\"1074\":1,\"1089\":3}}],[\"ca\",{\"1\":{\"205\":2}}],[\"card\",{\"1\":{\"934\":1}}],[\"cards\",{\"1\":{\"186\":1}}],[\"carry\",{\"1\":{\"167\":1}}],[\"carmel\",{\"1\":{\"81\":1}}],[\"carbon\",{\"1\":{\"66\":2}}],[\"car\",{\"1\":{\"65\":3}}],[\"caught\",{\"1\":{\"37\":1}}],[\"callargs\",{\"1\":{\"1074\":3}}],[\"callresult\",{\"1\":{\"1074\":1}}],[\"calldeferstack\",{\"1\":{\"1074\":2}}],[\"calldefer\",{\"1\":{\"1074\":1}}],[\"callbacks\",{\"1\":{\"852\":2}}],[\"callback\",{\"1\":{\"582\":1}}],[\"callexpr\",{\"1\":{\"1024\":1,\"1074\":2}}],[\"called\",{\"1\":{\"563\":1,\"1069\":1,\"1106\":1,\"1112\":1,\"1177\":4}}],[\"callergp\",{\"1\":{\"1095\":2}}],[\"callers\",{\"1\":{\"1089\":1}}],[\"callerpc\",{\"1\":{\"1059\":5,\"1066\":1,\"1095\":1}}],[\"callerencoder\",{\"1\":{\"839\":3}}],[\"callerkey\",{\"1\":{\"839\":3,\"840\":1}}],[\"caller\",{\"1\":{\"4\":1,\"536\":2,\"840\":5,\"843\":1,\"1091\":2,\"1095\":1}}],[\"callgrind\",{\"1\":{\"559\":2}}],[\"calling\",{\"1\":{\"536\":2}}],[\"calloption\",{\"1\":{\"163\":2,\"166\":8}}],[\"call\",{\"1\":{\"45\":1,\"146\":1,\"446\":2,\"452\":1,\"459\":1,\"520\":1,\"553\":1,\"728\":1,\"1024\":8,\"1038\":1,\"1066\":2,\"1067\":21,\"1074\":6,\"1078\":1,\"1086\":1,\"1088\":2,\"1089\":11,\"1097\":1,\"1101\":1,\"1107\":2}}],[\"calls\",{\"1\":{\"37\":1,\"1097\":1}}],[\"cas操作更新失败就将互斥锁解锁\",{\"1\":{\"1157\":1}}],[\"casfrom\",{\"1\":{\"1107\":1}}],[\"casrel\",{\"1\":{\"1104\":1}}],[\"casgstatus\",{\"1\":{\"1095\":2,\"1096\":1,\"1097\":3,\"1098\":2,\"1100\":1,\"1101\":2,\"1104\":2,\"1106\":1,\"1138\":1}}],[\"casi\",{\"1\":{\"1067\":11}}],[\"cas1\",{\"1\":{\"1067\":2}}],[\"cas0\",{\"1\":{\"1067\":3}}],[\"cascade\",{\"1\":{\"860\":3}}],[\"cas相关的函数则需要传入地址\",{\"1\":{\"490\":1}}],[\"cas会将期望值与当前内存值进行比较\",{\"1\":{\"490\":1}}],[\"cas\",{\"0\":{\"490\":1},\"1\":{\"1047\":1,\"1067\":18,\"1097\":2,\"1104\":1}}],[\"casbin官网中可以进行在线编辑并测试示例\",{\"1\":{\"764\":1}}],[\"casbin不会进行类型检查\",{\"1\":{\"762\":1}}],[\"casbin只需要负责根据传入的字段来进行访问控制\",{\"1\":{\"761\":1}}],[\"casbin仅仅只是一个访问控制框架\",{\"1\":{\"758\":1}}],[\"casbin就是这样一个开源高效的访问控制库\",{\"1\":{\"758\":1}}],[\"casbin\",{\"0\":{\"757\":1},\"1\":{\"78\":3,\"757\":3}}],[\"cast是一个简单的类型转换库\",{\"1\":{\"807\":1}}],[\"casting\",{\"1\":{\"806\":2}}],[\"casts\",{\"1\":{\"16\":1}}],[\"cast\",{\"0\":{\"806\":1},\"1\":{\"7\":13,\"26\":1,\"56\":2,\"806\":2,\"808\":1,\"809\":13}}],[\"casereleasetime\",{\"1\":{\"1067\":1}}],[\"casei\",{\"1\":{\"1067\":13}}],[\"casesuccess\",{\"1\":{\"1067\":4}}],[\"cases\",{\"1\":{\"1065\":2,\"1067\":1,\"1086\":1}}],[\"casesensitive\",{\"1\":{\"812\":1,\"813\":1}}],[\"case2\",{\"1\":{\"350\":1}}],[\"case1\",{\"1\":{\"350\":1}}],[\"case\",{\"1\":{\"4\":1,\"158\":1,\"159\":1,\"168\":2,\"171\":1,\"298\":1,\"326\":4,\"350\":13,\"471\":18,\"476\":2,\"477\":4,\"478\":1,\"520\":3,\"542\":2,\"571\":2,\"573\":2,\"597\":3,\"741\":1,\"742\":1,\"840\":2,\"842\":5,\"1016\":7,\"1021\":4,\"1024\":3,\"1033\":2,\"1058\":2,\"1061\":1,\"1062\":1,\"1063\":2,\"1065\":3,\"1066\":7,\"1067\":16,\"1074\":1,\"1095\":1,\"1096\":1,\"1097\":1,\"1102\":1,\"1107\":1}}],[\"cachelinepadsize\",{\"1\":{\"1117\":3,\"1118\":3}}],[\"cachealloc\",{\"1\":{\"1116\":1,\"1118\":1,\"1119\":1}}],[\"cachespan方法会在内存不足时由mcentral\",{\"1\":{\"1125\":1}}],[\"cachespan方法来完成\",{\"1\":{\"1117\":1}}],[\"cachespan\",{\"1\":{\"1116\":1,\"1125\":1}}],[\"cachesize\",{\"1\":{\"909\":1}}],[\"cachestore\",{\"1\":{\"852\":1}}],[\"cache2\",{\"1\":{\"795\":1}}],[\"cache1配置不存在\",{\"1\":{\"795\":1}}],[\"cache1config\",{\"1\":{\"795\":2}}],[\"cache1\",{\"1\":{\"795\":2}}],[\"cache\",{\"1\":{\"7\":4,\"15\":6,\"19\":1,\"22\":1,\"61\":2,\"92\":3,\"93\":1,\"507\":2,\"510\":2,\"795\":2,\"1000\":1,\"1099\":1,\"1100\":1,\"1117\":1,\"1120\":5,\"1121\":1,\"1140\":1,\"1153\":1}}],[\"cached\",{\"1\":{\"7\":2,\"518\":1,\"918\":1,\"1116\":2}}],[\"catch简洁一些\",{\"1\":{\"598\":1}}],[\"catch\",{\"1\":{\"598\":2,\"963\":1,\"1097\":1}}],[\"catalogservice\",{\"1\":{\"145\":3}}],[\"catalogderegistration\",{\"1\":{\"145\":1}}],[\"catalogregistration\",{\"1\":{\"145\":1}}],[\"catalog\",{\"1\":{\"144\":1,\"145\":4}}],[\"catalina\",{\"1\":{\"116\":1}}],[\"cat\",{\"1\":{\"7\":3,\"14\":1,\"17\":2,\"19\":1,\"20\":1,\"37\":1,\"503\":2,\"817\":1}}],[\"canspin判断流程\",{\"1\":{\"1153\":1}}],[\"canspin\",{\"1\":{\"1153\":2}}],[\"canpreemptm\",{\"1\":{\"1106\":3}}],[\"cancellation\",{\"1\":{\"520\":1}}],[\"cancelmail\",{\"1\":{\"477\":2}}],[\"cancelauth\",{\"1\":{\"477\":2}}],[\"cancel方法不对外暴露\",{\"1\":{\"477\":1}}],[\"canceler\",{\"1\":{\"477\":1}}],[\"canceled\",{\"1\":{\"168\":1,\"477\":5}}],[\"cancelctxmail\",{\"1\":{\"477\":2}}],[\"cancelctxauth\",{\"1\":{\"477\":2}}],[\"cancelctx译为可取消的上下文\",{\"1\":{\"477\":1}}],[\"cancelctx以及timerctx都实现了canceler接口\",{\"1\":{\"477\":1}}],[\"cancelctx\",{\"0\":{\"477\":1},\"1\":{\"473\":1,\"477\":2}}],[\"cancel\",{\"1\":{\"171\":2,\"477\":5,\"478\":2,\"520\":2}}],[\"cancelfunc\",{\"1\":{\"170\":2,\"477\":3,\"478\":3}}],[\"cannot\",{\"1\":{\"7\":1,\"375\":1,\"414\":1,\"416\":1,\"469\":1,\"477\":1,\"535\":1,\"591\":1,\"823\":1,\"1054\":1,\"1061\":1,\"1078\":1}}],[\"can\",{\"1\":{\"4\":4,\"7\":1,\"21\":1,\"37\":1,\"108\":1,\"111\":1,\"112\":1,\"563\":2,\"567\":2,\"817\":2,\"1016\":1,\"1024\":2,\"1030\":1,\"1067\":1,\"1073\":2,\"1089\":3,\"1097\":3,\"1098\":1,\"1120\":1,\"1138\":2,\"1150\":1,\"1153\":1}}],[\"cos\",{\"0\":{\"671\":1},\"1\":{\"671\":2}}],[\"cosiner\",{\"1\":{\"504\":1}}],[\"cockroach\",{\"1\":{\"614\":1}}],[\"co\",{\"1\":{\"510\":1}}],[\"could\",{\"1\":{\"1089\":1}}],[\"cout\",{\"1\":{\"392\":1}}],[\"count+1\",{\"1\":{\"1041\":1,\"1043\":1}}],[\"count++\",{\"1\":{\"158\":1,\"164\":1,\"1003\":1,\"1038\":1,\"1053\":1}}],[\"counter\",{\"1\":{\"1030\":1,\"1176\":1,\"1177\":2}}],[\"counts\",{\"1\":{\"910\":2}}],[\"count方法用于统计实体记录的数量\",{\"1\":{\"872\":1}}],[\"count==0\",{\"1\":{\"1030\":1}}],[\"count=5\",{\"1\":{\"526\":2}}],[\"count=2\",{\"1\":{\"521\":1,\"525\":1}}],[\"count=1\",{\"1\":{\"38\":1,\"518\":1}}],[\"count=1的方式来禁用缓存\",{\"1\":{\"38\":1}}],[\"counting\",{\"1\":{\"495\":1,\"499\":1}}],[\"country\",{\"1\":{\"112\":2,\"937\":1}}],[\"count\",{\"0\":{\"872\":1},\"1\":{\"38\":2,\"158\":2,\"164\":2,\"280\":1,\"324\":1,\"467\":5,\"479\":3,\"480\":3,\"481\":4,\"482\":4,\"490\":5,\"519\":2,\"707\":4,\"714\":2,\"872\":6,\"1003\":8,\"1030\":2,\"1032\":5,\"1036\":1,\"1039\":2,\"1053\":3,\"1176\":1,\"1178\":2}}],[\"cookies\",{\"1\":{\"1000\":1}}],[\"cookie\",{\"0\":{\"1002\":1},\"1\":{\"255\":2,\"640\":1,\"1001\":1,\"1002\":10,\"1003\":9}}],[\"cox\",{\"1\":{\"87\":1}}],[\"codingsince1985\",{\"1\":{\"81\":1}}],[\"coded\",{\"1\":{\"1073\":1,\"1076\":1}}],[\"codec\",{\"1\":{\"503\":2,\"509\":1}}],[\"coder\",{\"1\":{\"405\":2}}],[\"codereview\",{\"1\":{\"7\":1,\"16\":1}}],[\"codes\",{\"1\":{\"152\":1,\"158\":3,\"168\":16,\"171\":1}}],[\"codegangsta\",{\"1\":{\"67\":1}}],[\"code\",{\"1\":{\"4\":1,\"7\":3,\"16\":1,\"17\":1,\"20\":1,\"37\":1,\"49\":1,\"108\":1,\"111\":1,\"112\":2,\"159\":2,\"166\":1,\"167\":9,\"168\":33,\"171\":1,\"198\":1,\"296\":5,\"498\":1,\"503\":1,\"515\":1,\"559\":1,\"603\":2,\"636\":5,\"823\":1,\"824\":1,\"937\":1,\"981\":16,\"1013\":2,\"1015\":1,\"1059\":1,\"1080\":1,\"1087\":2}}],[\"copied\",{\"1\":{\"719\":2}}],[\"copier\",{\"0\":{\"810\":1},\"1\":{\"56\":2,\"810\":7,\"811\":1,\"812\":3,\"813\":3}}],[\"copy返回一个当前context的副本以便在当前context作用范围外安全的使用\",{\"1\":{\"982\":1}}],[\"copywithoption\",{\"1\":{\"812\":2,\"813\":1}}],[\"copycheck\",{\"1\":{\"719\":1}}],[\"copystack将其缩小为原来的\",{\"1\":{\"1102\":1}}],[\"copystack函数来完成栈拷贝的工作\",{\"1\":{\"1101\":1}}],[\"copystack\",{\"1\":{\"1101\":2,\"1102\":1}}],[\"copys\",{\"1\":{\"704\":3}}],[\"copydir\",{\"1\":{\"426\":1}}],[\"copybuffer来指定缓冲区大小\",{\"1\":{\"419\":1}}],[\"copy函数在运行时调用的是runtime\",{\"1\":{\"1053\":1}}],[\"copy函数\",{\"1\":{\"419\":1}}],[\"copylocks\",{\"1\":{\"37\":1}}],[\"copy\",{\"1\":{\"21\":1,\"22\":1,\"31\":1,\"368\":1,\"378\":1,\"419\":3,\"426\":1,\"598\":1,\"810\":2,\"812\":5,\"982\":2,\"1021\":2,\"1026\":1,\"1042\":2,\"1053\":2,\"1054\":1,\"1060\":2,\"1089\":4,\"1101\":2}}],[\"corsmiddle\",{\"1\":{\"1000\":1}}],[\"cors\",{\"0\":{\"958\":1},\"1\":{\"958\":1}}],[\"correct\",{\"1\":{\"817\":1,\"1139\":1}}],[\"corresponding\",{\"1\":{\"21\":1}}],[\"cores\",{\"1\":{\"909\":1,\"910\":2}}],[\"coreid\",{\"1\":{\"909\":1}}],[\"core\",{\"1\":{\"504\":2,\"525\":1,\"526\":3,\"588\":1,\"843\":2,\"909\":1}}],[\"coroutine\",{\"1\":{\"462\":1}}],[\"corpus\",{\"1\":{\"527\":1}}],[\"corp\",{\"1\":{\"7\":1}}],[\"covdata\",{\"1\":{\"14\":2}}],[\"coverprofile\",{\"1\":{\"519\":1}}],[\"covermode\",{\"1\":{\"519\":1}}],[\"coverage\",{\"1\":{\"20\":1,\"527\":6}}],[\"cover\",{\"1\":{\"8\":1,\"14\":2,\"519\":2}}],[\"color\",{\"1\":{\"404\":1}}],[\"collector阅读英文原文\",{\"1\":{\"1130\":1}}],[\"collector\",{\"1\":{\"1089\":1,\"1097\":1,\"1131\":1}}],[\"collect可以将一个\",{\"1\":{\"585\":1}}],[\"collect可以直接收集成一个切片\",{\"1\":{\"585\":2}}],[\"collect函数会将切片迭代器收集成一个切片\",{\"1\":{\"585\":1}}],[\"collect\",{\"1\":{\"585\":9,\"587\":10}}],[\"collection\",{\"1\":{\"4\":2,\"224\":1,\"225\":2,\"226\":2,\"227\":4,\"228\":2,\"229\":1,\"561\":1,\"1086\":2}}],[\"collate\",{\"1\":{\"233\":4}}],[\"colly\",{\"1\":{\"69\":2}}],[\"columntypes\",{\"1\":{\"863\":1}}],[\"columntype\",{\"1\":{\"863\":3}}],[\"column\",{\"1\":{\"43\":1,\"854\":2,\"855\":2,\"862\":1,\"867\":3,\"871\":1,\"885\":1,\"894\":1}}],[\"columns\",{\"1\":{\"9\":1,\"863\":1,\"867\":3,\"874\":1}}],[\"col\",{\"1\":{\"21\":1}}],[\"cobra\",{\"1\":{\"6\":1,\"64\":2,\"615\":5}}],[\"combinewritesyncers\",{\"1\":{\"841\":1}}],[\"commclause\",{\"1\":{\"1065\":1}}],[\"community\",{\"0\":{\"1181\":1},\"1\":{\"776\":1}}],[\"communicating\",{\"1\":{\"463\":1,\"504\":1}}],[\"communicate\",{\"1\":{\"463\":1,\"1084\":1}}],[\"commits\",{\"1\":{\"1104\":1}}],[\"committedas\",{\"1\":{\"918\":1}}],[\"commitlimit\",{\"1\":{\"918\":1}}],[\"commit方法用于提交事务\",{\"1\":{\"902\":1}}],[\"commitid一般取前12位\",{\"1\":{\"509\":1}}],[\"commitid\",{\"1\":{\"509\":4}}],[\"commit\",{\"1\":{\"238\":2,\"499\":7,\"509\":1,\"902\":3}}],[\"commonregex\",{\"1\":{\"80\":1}}],[\"commonregx\",{\"1\":{\"80\":1}}],[\"common\",{\"1\":{\"37\":2,\"82\":1,\"167\":1,\"193\":3,\"201\":16}}],[\"comment\",{\"1\":{\"21\":1,\"726\":2,\"849\":1,\"862\":1,\"864\":1,\"1012\":1,\"1016\":1,\"1097\":1}}],[\"comments\",{\"1\":{\"16\":1,\"559\":2}}],[\"comma\",{\"1\":{\"16\":1}}],[\"command了解细节\",{\"1\":{\"545\":1}}],[\"command格式查看每个命令的用法\",{\"1\":{\"14\":1}}],[\"commands\",{\"1\":{\"4\":1,\"7\":1,\"22\":2,\"31\":2,\"504\":1,\"559\":2}}],[\"command\",{\"1\":{\"4\":3,\"7\":8,\"14\":1,\"18\":1,\"21\":2,\"22\":1,\"31\":1,\"33\":1,\"34\":1,\"38\":4,\"117\":1,\"504\":4,\"518\":1,\"521\":3,\"522\":1,\"529\":1,\"531\":1,\"533\":1,\"559\":1}}],[\"com和名为github\",{\"1\":{\"7\":1}}],[\"computed\",{\"1\":{\"1114\":1,\"1132\":1}}],[\"compute\",{\"1\":{\"1101\":1}}],[\"computing\",{\"1\":{\"146\":1}}],[\"comprehensive\",{\"1\":{\"923\":1}}],[\"compression\",{\"1\":{\"499\":1}}],[\"compressing\",{\"1\":{\"495\":1,\"499\":1}}],[\"compress\",{\"1\":{\"65\":3,\"616\":1,\"840\":4,\"841\":2,\"915\":2}}],[\"completing\",{\"1\":{\"1155\":2}}],[\"completion\",{\"1\":{\"504\":1}}],[\"completed\",{\"1\":{\"527\":6}}],[\"complete\",{\"1\":{\"4\":1,\"14\":2,\"499\":9}}],[\"complexs\",{\"1\":{\"748\":2}}],[\"complex\",{\"1\":{\"434\":1,\"568\":1,\"700\":3}}],[\"complex64\",{\"1\":{\"318\":1,\"432\":3}}],[\"complex128\",{\"1\":{\"318\":1,\"432\":3,\"699\":1,\"700\":1,\"748\":1}}],[\"comparator\",{\"1\":{\"578\":3}}],[\"comparable接口无法并入类型集\",{\"1\":{\"575\":1}}],[\"comparable\",{\"0\":{\"435\":1},\"1\":{\"435\":5,\"568\":2,\"572\":1,\"575\":4,\"585\":4,\"1019\":3}}],[\"compareandswapint32\",{\"1\":{\"1152\":1,\"1153\":3,\"1154\":1}}],[\"compareandswapint64\",{\"1\":{\"490\":2}}],[\"compareandswap\",{\"1\":{\"1047\":1,\"1048\":1,\"1107\":1,\"1148\":1,\"1157\":1,\"1160\":2,\"1178\":2}}],[\"compare\",{\"1\":{\"332\":1,\"578\":4,\"705\":5,\"1024\":1}}],[\"company\",{\"1\":{\"185\":1,\"567\":4,\"572\":4,\"735\":1,\"736\":4}}],[\"compatibility\",{\"1\":{\"205\":2}}],[\"compatible\",{\"1\":{\"140\":1}}],[\"compat=version\",{\"1\":{\"24\":1}}],[\"compact=version\",{\"1\":{\"24\":1}}],[\"composites\",{\"1\":{\"37\":1}}],[\"composite\",{\"1\":{\"16\":2}}],[\"compilation\",{\"1\":{\"533\":1}}],[\"compiling\",{\"1\":{\"9\":1}}],[\"compile查看其指令\",{\"1\":{\"39\":1}}],[\"compiledgofiles\",{\"1\":{\"21\":1}}],[\"compiled\",{\"1\":{\"20\":1,\"21\":2,\"1059\":1}}],[\"compile时\",{\"1\":{\"15\":1}}],[\"compile与go\",{\"1\":{\"14\":1}}],[\"compile支持的标志参数\",{\"1\":{\"14\":1}}],[\"compile就是自带的编译器\",{\"1\":{\"14\":1}}],[\"compile包下\",{\"1\":{\"8\":1}}],[\"compilers\",{\"1\":{\"37\":1}}],[\"compiler\",{\"1\":{\"8\":2,\"14\":1,\"21\":4,\"49\":1,\"802\":1,\"1030\":1,\"1080\":1}}],[\"compiler=gccgo\",{\"1\":{\"7\":1}}],[\"compiler=gc\",{\"1\":{\"6\":1}}],[\"compile\",{\"0\":{\"107\":1},\"1\":{\"7\":1,\"9\":1,\"14\":6,\"15\":1,\"39\":1,\"107\":1,\"504\":3,\"550\":1,\"821\":1,\"1021\":2,\"1024\":1,\"1026\":1,\"1027\":2,\"1028\":1,\"1030\":2,\"1037\":3,\"1038\":1,\"1055\":1,\"1061\":3,\"1065\":1,\"1070\":1,\"1074\":1,\"1076\":1}}],[\"com\",{\"1\":{\"5\":1,\"6\":4,\"7\":26,\"16\":1,\"18\":4,\"19\":20,\"20\":12,\"23\":3,\"24\":17,\"26\":3,\"27\":14,\"28\":15,\"51\":10,\"52\":7,\"53\":10,\"54\":6,\"55\":8,\"56\":9,\"57\":4,\"58\":9,\"59\":4,\"60\":6,\"61\":6,\"62\":18,\"63\":9,\"64\":8,\"65\":6,\"66\":6,\"67\":3,\"68\":2,\"69\":2,\"70\":3,\"71\":11,\"72\":7,\"73\":2,\"74\":2,\"75\":8,\"76\":4,\"77\":1,\"78\":2,\"79\":1,\"80\":1,\"81\":8,\"82\":2,\"83\":1,\"84\":3,\"85\":1,\"93\":1,\"98\":1,\"99\":1,\"101\":2,\"102\":3,\"104\":1,\"112\":1,\"116\":2,\"140\":2,\"145\":3,\"148\":1,\"156\":2,\"158\":1,\"159\":2,\"168\":1,\"174\":4,\"178\":2,\"194\":1,\"200\":1,\"201\":3,\"204\":2,\"219\":2,\"222\":1,\"223\":1,\"226\":1,\"227\":1,\"228\":1,\"229\":1,\"231\":2,\"239\":1,\"240\":3,\"241\":1,\"493\":1,\"495\":5,\"496\":2,\"497\":1,\"498\":3,\"499\":1,\"500\":5,\"503\":42,\"504\":12,\"507\":2,\"509\":34,\"510\":8,\"512\":2,\"513\":3,\"515\":1,\"558\":1,\"579\":2,\"603\":2,\"621\":1,\"629\":2,\"638\":1,\"681\":2,\"757\":1,\"776\":4,\"786\":2,\"787\":1,\"801\":1,\"802\":2,\"804\":1,\"805\":2,\"806\":2,\"808\":1,\"810\":2,\"811\":1,\"814\":1,\"818\":2,\"819\":1,\"820\":1,\"821\":2,\"822\":2,\"823\":5,\"824\":3,\"831\":3,\"832\":1,\"833\":1,\"836\":1,\"841\":1,\"844\":2,\"846\":1,\"847\":1,\"848\":1,\"904\":2,\"905\":1,\"923\":1,\"926\":4,\"928\":1,\"929\":1,\"942\":1,\"952\":10,\"953\":1,\"954\":1,\"955\":1,\"956\":1,\"957\":1,\"960\":1,\"961\":2,\"964\":2,\"965\":1,\"966\":1,\"968\":1,\"969\":1,\"970\":1,\"971\":1,\"976\":1,\"981\":1,\"982\":2,\"995\":2,\"1002\":1,\"1003\":2,\"1009\":2,\"1010\":4,\"1011\":4,\"1050\":1,\"1052\":1}}],[\"conds\",{\"1\":{\"869\":1,\"870\":1,\"873\":1,\"888\":1}}],[\"condition\",{\"1\":{\"482\":1,\"1166\":1}}],[\"cond提供了如下的方法以供使用\",{\"1\":{\"482\":1}}],[\"cond\",{\"0\":{\"1164\":1},\"1\":{\"482\":8,\"1086\":1,\"1164\":2,\"1166\":1,\"1167\":1,\"1168\":1,\"1169\":1,\"1170\":2}}],[\"cond对此提供了实现\",{\"1\":{\"482\":1}}],[\"concatenation\",{\"1\":{\"1053\":1}}],[\"concatbuilder\",{\"1\":{\"526\":9}}],[\"concatdirect\",{\"1\":{\"526\":10}}],[\"concatstring5\",{\"1\":{\"1053\":1}}],[\"concatstring4\",{\"1\":{\"1053\":1}}],[\"concatstring3\",{\"1\":{\"1053\":1}}],[\"concatstring2\",{\"1\":{\"1053\":1}}],[\"concatstrings\",{\"1\":{\"1053\":6}}],[\"concatstrings在运行时来拼接\",{\"1\":{\"1053\":1}}],[\"concatstrings函数完成\",{\"1\":{\"1053\":1}}],[\"concatstringwithbuilder\",{\"1\":{\"525\":2}}],[\"concatstringdirect\",{\"1\":{\"525\":2}}],[\"concrete\",{\"1\":{\"428\":1}}],[\"concurrently\",{\"1\":{\"1089\":1,\"1177\":4}}],[\"concurrent\",{\"1\":{\"58\":2,\"389\":1,\"486\":1,\"503\":2,\"509\":1,\"1036\":1,\"1037\":1,\"1038\":2,\"1050\":2,\"1084\":1,\"1101\":1}}],[\"conversion\",{\"1\":{\"818\":2}}],[\"converters\",{\"1\":{\"813\":1}}],[\"converted\",{\"1\":{\"4\":4}}],[\"convertibleto\",{\"0\":{\"437\":1},\"1\":{\"437\":3}}],[\"convert\",{\"1\":{\"168\":1,\"535\":1}}],[\"conventionally\",{\"1\":{\"582\":1,\"1051\":1}}],[\"convenience\",{\"1\":{\"160\":1}}],[\"connpool\",{\"1\":{\"852\":3}}],[\"conncontext\",{\"1\":{\"644\":1}}],[\"connstate\",{\"1\":{\"644\":1}}],[\"connect\",{\"1\":{\"221\":1,\"504\":2,\"851\":4}}],[\"connectiontimeout仍处于实验阶段\",{\"1\":{\"170\":1}}],[\"connectiontimeout\",{\"1\":{\"170\":1}}],[\"conn\",{\"1\":{\"145\":3,\"154\":3,\"174\":3,\"175\":3,\"234\":2,\"242\":2,\"682\":5,\"852\":1}}],[\"conference\",{\"1\":{\"1071\":1}}],[\"confdata\",{\"1\":{\"829\":2}}],[\"conf\",{\"1\":{\"829\":2}}],[\"confidence\",{\"1\":{\"526\":3}}],[\"config配置结构体\",{\"1\":{\"852\":1}}],[\"configfilenotfounderror\",{\"1\":{\"791\":1}}],[\"configor\",{\"1\":{\"63\":2}}],[\"config\",{\"1\":{\"14\":1,\"16\":1,\"21\":1,\"141\":1,\"145\":3,\"175\":1,\"187\":1,\"188\":1,\"190\":2,\"205\":2,\"242\":1,\"621\":1,\"622\":3,\"623\":5,\"791\":1,\"792\":3,\"797\":2,\"839\":1,\"840\":5,\"841\":4,\"842\":5,\"843\":4,\"851\":1,\"852\":2,\"1016\":12}}],[\"configuration\",{\"1\":{\"7\":5,\"141\":1,\"786\":2,\"1016\":1}}],[\"confg\",{\"1\":{\"143\":8}}],[\"conflictdir\",{\"1\":{\"21\":1}}],[\"consume\",{\"1\":{\"1104\":1}}],[\"consumers\",{\"1\":{\"1104\":1}}],[\"consulresolver\",{\"1\":{\"145\":10}}],[\"consulresolverbuilder\",{\"1\":{\"145\":5}}],[\"consuladdress\",{\"1\":{\"145\":3}}],[\"consulapi\",{\"1\":{\"145\":12}}],[\"consul\",{\"0\":{\"139\":1,\"176\":1},\"1\":{\"84\":2,\"139\":6,\"140\":5,\"141\":12,\"142\":10,\"143\":22,\"144\":16,\"145\":15,\"175\":2,\"176\":1}}],[\"consulting\",{\"1\":{\"14\":1}}],[\"consult\",{\"1\":{\"7\":1}}],[\"consoleseparator\",{\"1\":{\"839\":3}}],[\"console\",{\"1\":{\"582\":1,\"840\":3}}],[\"const64\",{\"1\":{\"1023\":3}}],[\"const\",{\"1\":{\"115\":1,\"168\":1,\"294\":2,\"298\":1,\"324\":8,\"325\":5,\"326\":2,\"355\":1,\"360\":1,\"416\":2,\"432\":1,\"588\":1,\"649\":1,\"651\":1,\"652\":1,\"653\":1,\"738\":2,\"820\":1,\"948\":1,\"1016\":1,\"1024\":1,\"1025\":1,\"1030\":3,\"1112\":1,\"1120\":1,\"1132\":1,\"1151\":2,\"1153\":2,\"1156\":1}}],[\"constraint\",{\"1\":{\"860\":2,\"862\":1}}],[\"constraints\",{\"1\":{\"21\":2,\"42\":1,\"863\":1}}],[\"construction\",{\"1\":{\"840\":2}}],[\"constructioncompany\",{\"1\":{\"567\":3}}],[\"constructs\",{\"1\":{\"37\":1}}],[\"constant\",{\"1\":{\"16\":1,\"535\":1,\"553\":1,\"591\":1}}],[\"cont\",{\"1\":{\"523\":4}}],[\"continue这类操作\",{\"1\":{\"732\":1}}],[\"continue关键字会跳过最内层循环的本次迭代\",{\"1\":{\"357\":1}}],[\"continue的目标\",{\"1\":{\"351\":1}}],[\"continue\",{\"0\":{\"357\":1},\"1\":{\"158\":3,\"159\":1,\"298\":1,\"357\":2,\"582\":1,\"732\":2,\"1036\":1,\"1037\":2,\"1038\":2,\"1039\":2,\"1042\":1,\"1049\":1,\"1053\":1,\"1067\":1,\"1089\":1,\"1104\":1,\"1107\":1,\"1147\":1,\"1148\":1,\"1153\":1}}],[\"contact\",{\"1\":{\"1011\":6}}],[\"contacting\",{\"1\":{\"144\":1}}],[\"container\",{\"1\":{\"616\":3}}],[\"containers\",{\"1\":{\"20\":1,\"24\":1,\"27\":1,\"579\":1}}],[\"containing\",{\"1\":{\"21\":4}}],[\"contains=back\",{\"1\":{\"952\":1}}],[\"contains=a\",{\"1\":{\"944\":1,\"945\":1}}],[\"contains=jacklove\",{\"1\":{\"943\":1}}],[\"contains=jack\",{\"1\":{\"942\":1,\"948\":1,\"952\":2}}],[\"contains=0x2c\",{\"1\":{\"938\":1}}],[\"containsrune\",{\"1\":{\"706\":4,\"933\":1}}],[\"containsany\",{\"1\":{\"706\":3,\"933\":1}}],[\"contains\",{\"1\":{\"4\":1,\"7\":1,\"21\":1,\"206\":1,\"509\":1,\"706\":4,\"933\":1,\"943\":1,\"944\":1,\"1045\":1}}],[\"contentlength\",{\"1\":{\"981\":1}}],[\"contenttype\",{\"1\":{\"981\":2}}],[\"contentdir\",{\"1\":{\"799\":2}}],[\"contents\",{\"1\":{\"159\":2}}],[\"content\",{\"1\":{\"22\":1,\"158\":17,\"159\":22,\"208\":1,\"638\":2,\"731\":4,\"735\":1,\"799\":1,\"965\":2,\"970\":1,\"972\":1,\"977\":1,\"986\":4,\"1000\":4,\"1011\":2,\"1016\":5}}],[\"context中维护着一个handlerschain\",{\"1\":{\"995\":1}}],[\"context标准库也提供了几个实现\",{\"1\":{\"473\":1}}],[\"context本身是一个接口\",{\"1\":{\"473\":1}}],[\"context译为上下文\",{\"1\":{\"473\":1}}],[\"context更适合子孙协程嵌套层级更深的情况\",{\"1\":{\"462\":1}}],[\"context加入标准库\",{\"1\":{\"130\":1}}],[\"context包下提供了两种创建的函数\",{\"1\":{\"478\":1}}],[\"context包下所有的实现都是不对外暴露的\",{\"1\":{\"475\":1}}],[\"context包\",{\"1\":{\"16\":1}}],[\"context\",{\"0\":{\"473\":1,\"474\":1,\"1163\":1},\"1\":{\"16\":10,\"37\":1,\"145\":2,\"152\":4,\"153\":3,\"154\":2,\"158\":5,\"159\":3,\"162\":9,\"163\":13,\"164\":3,\"165\":6,\"166\":18,\"167\":1,\"168\":2,\"170\":4,\"171\":2,\"174\":1,\"175\":2,\"200\":1,\"221\":2,\"462\":1,\"473\":1,\"474\":1,\"475\":3,\"476\":6,\"477\":21,\"478\":11,\"520\":5,\"616\":1,\"823\":8,\"838\":1,\"849\":2,\"956\":2,\"965\":3,\"968\":2,\"969\":1,\"970\":2,\"971\":2,\"975\":1,\"977\":1,\"979\":1,\"980\":1,\"981\":21,\"982\":3,\"984\":1,\"985\":1,\"986\":2,\"988\":4,\"989\":3,\"990\":6,\"991\":3,\"992\":1,\"993\":1,\"995\":3,\"996\":3,\"1000\":1,\"1002\":1,\"1003\":1,\"1007\":1,\"1011\":2,\"1016\":1,\"1063\":3}}],[\"contrib\",{\"1\":{\"503\":2,\"509\":1,\"1003\":2}}],[\"contributing\",{\"1\":{\"7\":1}}],[\"controller\",{\"1\":{\"1132\":1}}],[\"controll\",{\"1\":{\"765\":1}}],[\"controls\",{\"1\":{\"7\":1,\"117\":1}}],[\"control\",{\"1\":{\"4\":1,\"38\":1,\"757\":1,\"758\":1,\"958\":3,\"1000\":9}}],[\"c\",{\"0\":{\"531\":1,\"532\":1,\"533\":1},\"1\":{\"4\":2,\"8\":4,\"9\":2,\"16\":1,\"21\":4,\"38\":1,\"39\":1,\"45\":6,\"85\":1,\"87\":2,\"90\":1,\"91\":1,\"95\":1,\"117\":1,\"118\":1,\"129\":1,\"132\":1,\"133\":1,\"145\":12,\"158\":1,\"166\":7,\"168\":4,\"175\":4,\"193\":1,\"195\":1,\"239\":1,\"258\":2,\"265\":1,\"270\":2,\"295\":2,\"313\":1,\"324\":1,\"331\":14,\"341\":4,\"344\":1,\"349\":2,\"350\":1,\"382\":1,\"383\":3,\"384\":2,\"385\":6,\"386\":4,\"397\":5,\"399\":3,\"410\":3,\"416\":1,\"464\":1,\"469\":1,\"471\":5,\"476\":5,\"477\":4,\"482\":3,\"508\":3,\"519\":1,\"529\":5,\"530\":4,\"531\":15,\"532\":10,\"533\":29,\"534\":18,\"535\":8,\"536\":56,\"537\":38,\"538\":9,\"539\":16,\"540\":10,\"541\":6,\"542\":9,\"543\":17,\"544\":1,\"545\":6,\"546\":6,\"547\":6,\"553\":1,\"567\":13,\"573\":2,\"578\":1,\"581\":6,\"592\":1,\"595\":3,\"606\":10,\"700\":2,\"710\":4,\"715\":2,\"717\":2,\"741\":1,\"742\":1,\"797\":2,\"798\":2,\"829\":1,\"915\":2,\"916\":2,\"920\":1,\"968\":7,\"969\":4,\"970\":7,\"971\":9,\"974\":3,\"975\":11,\"979\":2,\"980\":2,\"981\":21,\"982\":5,\"984\":1,\"985\":3,\"988\":4,\"991\":4,\"995\":15,\"1000\":10,\"1002\":3,\"1003\":3,\"1007\":2,\"1021\":5,\"1039\":2,\"1042\":3,\"1058\":13,\"1059\":46,\"1060\":52,\"1061\":9,\"1064\":1,\"1066\":11,\"1067\":49,\"1069\":5,\"1100\":6,\"1107\":1,\"1109\":1,\"1116\":11,\"1117\":9,\"1120\":4,\"1124\":11,\"1125\":9,\"1126\":2,\"1130\":2,\"1138\":2,\"1160\":6,\"1167\":5,\"1168\":2,\"1169\":2}}],[\"r+1\",{\"1\":{\"1162\":4}}],[\"rclose\",{\"1\":{\"1067\":2}}],[\"rcs\",{\"1\":{\"546\":1}}],[\"rk\",{\"1\":{\"1037\":3}}],[\"r是一个随机数\",{\"1\":{\"1037\":1}}],[\"rgba\",{\"1\":{\"934\":2}}],[\"rgb\",{\"1\":{\"934\":2}}],[\"r即指request\",{\"1\":{\"761\":1}}],[\"rbac\",{\"0\":{\"765\":1},\"1\":{\"757\":1,\"758\":1,\"763\":1,\"765\":1}}],[\"rlock的逻辑更简单\",{\"1\":{\"1161\":1}}],[\"rlocker方法获得\",{\"1\":{\"482\":1}}],[\"rlocker\",{\"1\":{\"482\":7}}],[\"rlock\",{\"0\":{\"1161\":1},\"1\":{\"481\":2,\"482\":2,\"1086\":1,\"1091\":2,\"1161\":1}}],[\"rw\",{\"1\":{\"481\":11,\"482\":8,\"915\":3,\"1157\":4,\"1158\":8,\"1159\":7,\"1160\":5,\"1161\":3,\"1162\":8}}],[\"rwmutexmaxreaders表示现在写者协程已经持有了互斥锁\",{\"1\":{\"1157\":1}}],[\"rwmutexmaxreaders`\",{\"1\":{\"1156\":1}}],[\"rwmutexmaxreaders+n\",{\"1\":{\"1156\":1}}],[\"rwmutexmaxreaders\",{\"1\":{\"1156\":2,\"1157\":2,\"1158\":8,\"1159\":5,\"1162\":3}}],[\"rwmutex\",{\"0\":{\"1155\":1},\"1\":{\"462\":1,\"481\":8,\"482\":5,\"1016\":1,\"1086\":2,\"1149\":1,\"1155\":2,\"1157\":1,\"1158\":1,\"1159\":3,\"1160\":1,\"1161\":1,\"1162\":4}}],[\"rresvalue\",{\"1\":{\"446\":2}}],[\"rrestype\",{\"1\":{\"445\":2}}],[\"rvalue\",{\"1\":{\"439\":2,\"440\":2,\"442\":2,\"443\":2,\"449\":6,\"452\":3,\"454\":3,\"456\":3,\"457\":3}}],[\"rt0\",{\"1\":{\"1089\":2}}],[\"rtype\",{\"1\":{\"428\":3,\"429\":1,\"433\":5,\"445\":6,\"446\":2,\"448\":7,\"450\":2,\"451\":8,\"455\":2}}],[\"rtcov\",{\"1\":{\"20\":1}}],[\"rdwr|o\",{\"1\":{\"418\":1}}],[\"rdwr|os\",{\"1\":{\"416\":1,\"417\":2,\"418\":3,\"426\":1}}],[\"rdwr的模式打开\",{\"1\":{\"418\":1}}],[\"rdwr\",{\"1\":{\"416\":2}}],[\"rdonly\",{\"1\":{\"416\":3,\"419\":2}}],[\"rparamtype\",{\"1\":{\"445\":2}}],[\"rpop\",{\"1\":{\"267\":1}}],[\"rpush\",{\"1\":{\"265\":1}}],[\"rpc的响应数据\",{\"1\":{\"165\":1}}],[\"rpc的请求数据\",{\"1\":{\"165\":1}}],[\"rpc\",{\"0\":{\"157\":1},\"1\":{\"141\":1,\"146\":4,\"147\":1,\"151\":1,\"152\":1,\"157\":17,\"158\":7,\"159\":5,\"160\":2,\"162\":11,\"163\":2,\"164\":4,\"165\":17,\"166\":13,\"167\":6,\"168\":3,\"171\":1,\"180\":1,\"181\":3,\"196\":7,\"197\":2,\"629\":1}}],[\"r56\",{\"1\":{\"138\":1}}],[\"r57\",{\"1\":{\"138\":1}}],[\"r58\",{\"1\":{\"138\":1}}],[\"r59\",{\"1\":{\"138\":1}}],[\"r60\",{\"1\":{\"138\":1}}],[\"rqlite\",{\"1\":{\"62\":3,\"614\":1}}],[\"rst\",{\"1\":{\"802\":1}}],[\"rs512\",{\"1\":{\"777\":1}}],[\"rs384\",{\"1\":{\"777\":1}}],[\"rs256\",{\"1\":{\"777\":1}}],[\"rsa\",{\"0\":{\"785\":1},\"1\":{\"776\":2,\"777\":3,\"785\":2}}],[\"rsa等\",{\"1\":{\"616\":1}}],[\"rsonindex\",{\"1\":{\"578\":4}}],[\"rsc\",{\"1\":{\"510\":1,\"589\":1}}],[\"rs\",{\"1\":{\"54\":1}}],[\"ragged\",{\"1\":{\"1140\":1}}],[\"raised\",{\"1\":{\"1138\":1}}],[\"rather\",{\"1\":{\"1138\":1}}],[\"ratio\",{\"1\":{\"1118\":1}}],[\"rate\",{\"1\":{\"847\":2}}],[\"rabbitmq\",{\"1\":{\"1084\":1}}],[\"radix\",{\"1\":{\"963\":1}}],[\"raspberry\",{\"1\":{\"904\":1}}],[\"rawbyteslice\",{\"1\":{\"1054\":1}}],[\"rawstring\",{\"1\":{\"1053\":1}}],[\"rawstringtmp函数会返回一个字符串s和字节切片b\",{\"1\":{\"1053\":1}}],[\"rawstringtmp\",{\"1\":{\"1053\":1}}],[\"rawjson\",{\"1\":{\"840\":2}}],[\"rawval\",{\"1\":{\"797\":2}}],[\"raw\",{\"1\":{\"778\":1,\"779\":1,\"970\":1,\"972\":1,\"977\":1}}],[\"rawnum\",{\"1\":{\"391\":2}}],[\"rawdata\",{\"1\":{\"41\":2}}],[\"rand\",{\"1\":{\"216\":3,\"388\":1,\"462\":1,\"479\":2,\"480\":2,\"481\":4,\"482\":4,\"555\":1,\"560\":1,\"616\":1,\"785\":1}}],[\"randomname\",{\"1\":{\"216\":2}}],[\"range的代码块中\",{\"1\":{\"1037\":1}}],[\"range的实现依旧是通过移动指针来遍历元素的\",{\"1\":{\"1028\":1}}],[\"range的实现都有所不同\",{\"1\":{\"355\":1}}],[\"range所支持的pipeline必须是数组\",{\"1\":{\"732\":1}}],[\"range中的e\",{\"1\":{\"1028\":1}}],[\"range中的循环体就是迭代器中的yield回调函数\",{\"1\":{\"582\":1}}],[\"range中也会频繁用到\",{\"1\":{\"729\":1}}],[\"range返回\",{\"1\":{\"584\":1}}],[\"range返回几个值\",{\"1\":{\"582\":1}}],[\"range就有两个返回值\",{\"1\":{\"582\":1}}],[\"range仅有一个返回值\",{\"1\":{\"582\":1}}],[\"range关键字来进行使用\",{\"1\":{\"581\":1}}],[\"range关键字支持了range\",{\"1\":{\"580\":1}}],[\"range会不断读取管道中的元素\",{\"1\":{\"470\":1}}],[\"range遍历的类型\",{\"1\":{\"1055\":1}}],[\"range遍历字符串时\",{\"1\":{\"1055\":1}}],[\"range遍历时获取到的键值\",{\"1\":{\"1037\":1}}],[\"range遍历\",{\"1\":{\"1035\":1}}],[\"range遍历切片时\",{\"1\":{\"1028\":1}}],[\"range遍历管道时\",{\"1\":{\"470\":1}}],[\"range遍历其他可迭代数据结构时\",{\"1\":{\"470\":1}}],[\"range遍历一个字符串\",{\"1\":{\"355\":1}}],[\"range语句\",{\"1\":{\"470\":1}}],[\"range可以遍历\",{\"1\":{\"386\":1}}],[\"range可以更加方便的遍历一些可迭代的数据结构\",{\"1\":{\"355\":1}}],[\"range进行遍历时\",{\"1\":{\"380\":1}}],[\"range也可以迭代一个整型值\",{\"1\":{\"355\":1}}],[\"range迭代\",{\"1\":{\"137\":1}}],[\"range循环会替换成经典的for循环\",{\"1\":{\"1055\":1}}],[\"range循环来遍历\",{\"1\":{\"1049\":1}}],[\"range循环相差不是特别大\",{\"1\":{\"588\":1}}],[\"range循环\",{\"1\":{\"369\":1,\"1055\":1}}],[\"range循环可以一个迭代参数\",{\"1\":{\"133\":1}}],[\"range循环变量改进的预览版本\",{\"1\":{\"116\":1}}],[\"range现在支持迭代数字类型\",{\"1\":{\"115\":1}}],[\"rangefunc\",{\"1\":{\"114\":1}}],[\"range\",{\"0\":{\"355\":1,\"470\":1},\"1\":{\"114\":3,\"115\":1,\"133\":1,\"145\":2,\"158\":1,\"159\":1,\"175\":2,\"202\":1,\"216\":2,\"298\":1,\"344\":1,\"355\":5,\"369\":1,\"370\":2,\"380\":1,\"386\":2,\"387\":1,\"399\":1,\"401\":1,\"406\":1,\"424\":2,\"446\":1,\"452\":1,\"459\":1,\"470\":2,\"486\":3,\"524\":1,\"527\":2,\"539\":1,\"555\":1,\"560\":1,\"580\":1,\"581\":2,\"582\":7,\"584\":2,\"585\":4,\"587\":9,\"588\":7,\"682\":1,\"725\":4,\"727\":1,\"732\":4,\"733\":1,\"734\":1,\"841\":1,\"893\":1,\"899\":4,\"942\":1,\"952\":2,\"985\":1,\"1025\":2,\"1027\":2,\"1028\":2,\"1035\":1,\"1037\":3,\"1047\":1,\"1049\":2,\"1053\":3,\"1055\":2,\"1058\":1,\"1067\":5,\"1069\":1,\"1076\":1,\"1099\":2,\"1116\":1,\"1119\":1,\"1149\":1,\"1165\":1,\"1171\":1,\"1175\":1}}],[\"raft\",{\"1\":{\"84\":6,\"139\":1,\"141\":2,\"142\":4,\"143\":1}}],[\"ramsql\",{\"1\":{\"55\":2}}],[\"raceaddr\",{\"1\":{\"1058\":1}}],[\"race\",{\"1\":{\"8\":1}}],[\"r表示在\",{\"1\":{\"33\":1}}],[\"roc\",{\"1\":{\"1130\":1}}],[\"roll\",{\"1\":{\"984\":1,\"985\":3}}],[\"rollbackto\",{\"1\":{\"902\":1}}],[\"rollback方法用于回滚事务\",{\"1\":{\"902\":1}}],[\"rollback\",{\"1\":{\"238\":3,\"849\":1,\"902\":6}}],[\"role\",{\"1\":{\"765\":4,\"766\":1,\"767\":1}}],[\"rosedb\",{\"1\":{\"614\":1}}],[\"rows\",{\"1\":{\"882\":7}}],[\"rowsaffected\",{\"1\":{\"236\":1,\"237\":1,\"866\":1,\"869\":1,\"870\":1}}],[\"row\",{\"1\":{\"233\":1}}],[\"routergroup\",{\"1\":{\"988\":2,\"999\":3}}],[\"router\",{\"1\":{\"954\":1,\"955\":3,\"956\":3,\"958\":1,\"959\":1,\"960\":4,\"998\":2,\"999\":5,\"1002\":3,\"1007\":5,\"1011\":2}}],[\"routine\",{\"1\":{\"559\":1}}],[\"routing\",{\"1\":{\"208\":1}}],[\"roundupsize\",{\"1\":{\"1025\":1,\"1034\":1}}],[\"round\",{\"1\":{\"145\":1,\"175\":2,\"663\":2,\"669\":2,\"820\":1}}],[\"rounding\",{\"1\":{\"10\":1}}],[\"robin指的是轮询的意思\",{\"1\":{\"175\":1}}],[\"robin\",{\"1\":{\"145\":1,\"175\":1}}],[\"robert\",{\"1\":{\"87\":1}}],[\"rob\",{\"1\":{\"87\":3,\"598\":1}}],[\"robfig\",{\"1\":{\"66\":2}}],[\"roylee0704\",{\"1\":{\"66\":1}}],[\"root目录下\",{\"1\":{\"92\":1}}],[\"root目录用于存放各个版本\",{\"1\":{\"92\":1}}],[\"root\",{\"1\":{\"21\":3,\"40\":1,\"92\":1,\"232\":1,\"234\":1,\"603\":2,\"621\":1,\"622\":2,\"623\":1,\"762\":1,\"790\":1,\"851\":1,\"972\":2,\"973\":2,\"974\":2,\"999\":3}}],[\"right\",{\"1\":{\"1167\":1}}],[\"rightdelim\",{\"1\":{\"1016\":1}}],[\"ri++\",{\"1\":{\"1122\":1}}],[\"ri\",{\"1\":{\"1122\":4}}],[\"ripemd128\",{\"1\":{\"934\":2}}],[\"ring\",{\"1\":{\"616\":1}}],[\"riface\",{\"1\":{\"436\":3,\"437\":3}}],[\"risc\",{\"1\":{\"904\":1}}],[\"riscv64\",{\"1\":{\"7\":1}}],[\"ristretto\",{\"1\":{\"61\":2}}],[\"rivo\",{\"1\":{\"56\":1,\"504\":1}}],[\"riverdb\",{\"1\":{\"20\":1}}],[\"river\",{\"1\":{\"20\":1,\"24\":1,\"27\":1}}],[\"russross\",{\"1\":{\"504\":1}}],[\"rust\",{\"1\":{\"88\":3,\"587\":1,\"598\":2}}],[\"ruby\",{\"1\":{\"75\":1}}],[\"rules\",{\"1\":{\"943\":3,\"948\":2}}],[\"rule\",{\"1\":{\"17\":3}}],[\"runitme\",{\"1\":{\"1137\":1}}],[\"runtimme\",{\"1\":{\"1118\":1}}],[\"runtim\",{\"1\":{\"1091\":1}}],[\"runtime2\",{\"1\":{\"1085\":1}}],[\"runtime\",{\"0\":{\"1186\":1},\"1\":{\"4\":11,\"7\":1,\"9\":1,\"20\":4,\"37\":1,\"44\":1,\"47\":1,\"114\":3,\"116\":1,\"519\":2,\"556\":3,\"559\":1,\"603\":4,\"616\":1,\"751\":1,\"1020\":3,\"1030\":1,\"1038\":1,\"1052\":1,\"1066\":2,\"1067\":22,\"1074\":1,\"1077\":1,\"1078\":2,\"1086\":1,\"1089\":14,\"1092\":1,\"1097\":1,\"1098\":1,\"1099\":1,\"1104\":2,\"1106\":3,\"1112\":3,\"1114\":1,\"1117\":1,\"1128\":1,\"1137\":2,\"1138\":1,\"1153\":10,\"1154\":2,\"1158\":1,\"1159\":2,\"1161\":1,\"1162\":2,\"1167\":2,\"1168\":1,\"1169\":1,\"1177\":2,\"1178\":2}}],[\"runqgrab函数来完成\",{\"1\":{\"1104\":1}}],[\"runqget\",{\"1\":{\"1104\":1}}],[\"runqput函数尝试将其放入\",{\"1\":{\"1095\":1}}],[\"runqput\",{\"1\":{\"1095\":1,\"1098\":1}}],[\"runqempty\",{\"1\":{\"1089\":1,\"1153\":1}}],[\"runqsize\",{\"1\":{\"1088\":1,\"1104\":1}}],[\"runq\",{\"1\":{\"1088\":3,\"1104\":5}}],[\"runqtail\",{\"1\":{\"1088\":2,\"1104\":1}}],[\"runqhead\",{\"1\":{\"1088\":2,\"1104\":2}}],[\"runnext表示下一个可用的\",{\"1\":{\"1088\":1}}],[\"runnext\",{\"1\":{\"1088\":2}}],[\"runnableps\",{\"1\":{\"1089\":4}}],[\"runnable\",{\"1\":{\"1088\":2,\"1089\":2,\"1098\":1}}],[\"runningpanicdefers\",{\"1\":{\"1079\":1}}],[\"running\",{\"1\":{\"4\":1,\"145\":2,\"503\":1,\"504\":1,\"561\":1,\"1063\":1,\"1073\":1,\"1087\":2,\"1088\":1,\"1089\":1,\"1097\":1,\"1107\":1,\"1138\":1}}],[\"run=fuzzreverse\",{\"1\":{\"527\":3}}],[\"run=regex\",{\"1\":{\"40\":1}}],[\"run方法会开启一个新的协程用于运行子测试\",{\"1\":{\"523\":1}}],[\"run参数来指定\",{\"1\":{\"518\":1}}],[\"run直接运行\",{\"1\":{\"500\":1}}],[\"runlockslow\",{\"1\":{\"1162\":2}}],[\"runlock的也是一样的简单易懂\",{\"1\":{\"1162\":1}}],[\"runlock\",{\"0\":{\"1162\":1},\"1\":{\"481\":2,\"482\":2,\"1091\":2,\"1162\":3}}],[\"runereader\",{\"1\":{\"721\":1}}],[\"runewidth\",{\"1\":{\"504\":1}}],[\"runeself\",{\"1\":{\"1055\":1}}],[\"runescanner\",{\"1\":{\"721\":1}}],[\"runes\",{\"1\":{\"380\":4}}],[\"rune再遍历也是一样的道理\",{\"1\":{\"380\":1}}],[\"rune本质上是int32的类型别名\",{\"1\":{\"380\":1}}],[\"rune\",{\"1\":{\"319\":1,\"341\":1,\"380\":1,\"527\":4,\"528\":1,\"706\":1,\"710\":2,\"712\":1,\"713\":8,\"1055\":1}}],[\"runeimte\",{\"1\":{\"198\":1}}],[\"runoob\",{\"1\":{\"101\":1}}],[\"run运行\",{\"1\":{\"13\":1}}],[\"run命令为了加快编译速度\",{\"1\":{\"13\":1}}],[\"run命令与build都会将源代码进行编译\",{\"1\":{\"13\":1}}],[\"run要运行的临时二进制文件\",{\"1\":{\"7\":1}}],[\"runsafepointfn\",{\"1\":{\"1137\":1,\"1145\":1}}],[\"runs\",{\"1\":{\"4\":1,\"7\":1}}],[\"run\",{\"0\":{\"13\":1},\"1\":{\"2\":1,\"3\":1,\"4\":3,\"7\":6,\"8\":1,\"13\":5,\"15\":1,\"16\":2,\"17\":1,\"18\":2,\"19\":1,\"20\":1,\"28\":1,\"32\":1,\"37\":3,\"38\":6,\"40\":1,\"158\":1,\"159\":3,\"200\":1,\"414\":9,\"497\":2,\"500\":1,\"503\":2,\"513\":1,\"518\":6,\"519\":2,\"520\":3,\"521\":8,\"522\":2,\"523\":23,\"525\":1,\"526\":2,\"527\":15,\"654\":1,\"655\":1,\"656\":1,\"657\":1,\"658\":1,\"659\":1,\"660\":1,\"661\":1,\"662\":1,\"663\":1,\"664\":1,\"665\":1,\"666\":1,\"667\":1,\"668\":1,\"669\":1,\"670\":1,\"671\":1,\"672\":1,\"692\":1,\"693\":1,\"694\":1,\"695\":1,\"696\":1,\"697\":1,\"698\":1,\"699\":1,\"700\":1,\"701\":1,\"704\":1,\"705\":1,\"706\":3,\"707\":1,\"708\":1,\"709\":1,\"710\":1,\"711\":1,\"712\":1,\"713\":1,\"714\":1,\"715\":2,\"716\":1,\"717\":1,\"718\":1,\"719\":1,\"721\":1,\"817\":1,\"823\":2,\"824\":5,\"965\":1,\"968\":1,\"969\":1,\"970\":1,\"971\":1,\"977\":1,\"980\":1,\"982\":1,\"984\":1,\"985\":1,\"986\":1,\"989\":1,\"990\":1,\"991\":1,\"993\":1,\"994\":1,\"996\":1,\"999\":1,\"1002\":1,\"1003\":1,\"1007\":2,\"1008\":1,\"1011\":2,\"1078\":1,\"1089\":2,\"1097\":2,\"1138\":1,\"1140\":2}}],[\"rfc4122\",{\"1\":{\"934\":8}}],[\"rfc2141\",{\"1\":{\"932\":1}}],[\"rfc1123\",{\"1\":{\"932\":1,\"1007\":1}}],[\"rfc7519\",{\"1\":{\"778\":7}}],[\"rfc\",{\"1\":{\"174\":1,\"771\":1,\"932\":3}}],[\"rf\",{\"1\":{\"15\":1}}],[\"rm\",{\"1\":{\"15\":3,\"19\":1}}],[\"r\",{\"1\":{\"10\":1,\"15\":2,\"16\":3,\"17\":3,\"19\":1,\"33\":2,\"112\":2,\"305\":1,\"380\":7,\"417\":1,\"419\":1,\"482\":4,\"525\":1,\"526\":3,\"527\":16,\"588\":1,\"706\":2,\"710\":2,\"712\":1,\"713\":7,\"720\":2,\"759\":4,\"761\":1,\"762\":6,\"764\":4,\"765\":4,\"766\":4,\"767\":6,\"909\":1,\"955\":1,\"956\":4,\"958\":3,\"960\":5,\"981\":1,\"1003\":4,\"1024\":4,\"1037\":7,\"1052\":1,\"1055\":4,\"1122\":4,\"1158\":5,\"1159\":6,\"1162\":4}}],[\"r14\",{\"1\":{\"9\":1,\"45\":1}}],[\"remaining\",{\"1\":{\"1101\":1,\"1112\":1}}],[\"remote\",{\"1\":{\"146\":1,\"495\":4,\"499\":1}}],[\"removing\",{\"1\":{\"22\":1}}],[\"removeidlemarkworker\",{\"1\":{\"1138\":1}}],[\"removed\",{\"1\":{\"503\":1}}],[\"removefromparent\",{\"1\":{\"477\":2}}],[\"removeall\",{\"1\":{\"421\":2}}],[\"remove\",{\"1\":{\"16\":1,\"22\":1,\"93\":1,\"421\":2,\"1100\":1}}],[\"reentersyscall函数的一个简单调用\",{\"1\":{\"1097\":1}}],[\"rebinding\",{\"1\":{\"817\":1}}],[\"rexray\",{\"1\":{\"788\":1}}],[\"reigstered\",{\"1\":{\"773\":1}}],[\"re\",{\"1\":{\"452\":2,\"527\":2,\"1037\":2,\"1047\":1,\"1067\":1,\"1097\":1,\"1132\":1,\"1138\":1,\"1140\":1}}],[\"render\",{\"1\":{\"980\":1,\"981\":3}}],[\"rendering\",{\"1\":{\"831\":1}}],[\"renameindex\",{\"1\":{\"863\":1}}],[\"renamecolumn\",{\"1\":{\"863\":1}}],[\"renametable\",{\"1\":{\"863\":1}}],[\"rename\",{\"1\":{\"250\":1,\"420\":2}}],[\"renee\",{\"1\":{\"87\":1}}],[\"req\",{\"1\":{\"145\":8,\"153\":4,\"155\":1,\"165\":6,\"166\":14,\"167\":2,\"175\":10}}],[\"requesturi\",{\"1\":{\"1016\":1}}],[\"requested\",{\"1\":{\"1000\":1}}],[\"request\",{\"1\":{\"41\":2,\"112\":1,\"166\":6,\"167\":2,\"168\":3,\"641\":2,\"642\":3,\"645\":5,\"646\":8,\"759\":2,\"761\":1,\"764\":1,\"765\":1,\"766\":1,\"767\":1,\"954\":1,\"955\":1,\"956\":2,\"958\":2,\"959\":2,\"960\":3,\"968\":2,\"969\":2,\"970\":2,\"972\":1,\"973\":1,\"974\":1,\"975\":2,\"977\":1,\"980\":1,\"982\":1,\"984\":1,\"985\":1,\"986\":4,\"989\":1,\"990\":1,\"991\":1,\"993\":1,\"994\":1,\"996\":1,\"1000\":2,\"1007\":2,\"1016\":3,\"1097\":1,\"1101\":1}}],[\"require关键字表示引用了一个外部依赖\",{\"1\":{\"509\":1}}],[\"requiredpassword\",{\"1\":{\"960\":2}}],[\"requireduser\",{\"1\":{\"960\":2}}],[\"requiredoverridetranslation\",{\"1\":{\"952\":2}}],[\"requiredoverrideregister\",{\"1\":{\"952\":2}}],[\"required\",{\"1\":{\"143\":1,\"936\":7,\"950\":2,\"952\":5,\"953\":2,\"971\":2,\"977\":3}}],[\"require\",{\"1\":{\"26\":1,\"503\":2,\"509\":6}}],[\"require=path\",{\"1\":{\"26\":1}}],[\"requirement\",{\"1\":{\"22\":1}}],[\"requires\",{\"1\":{\"3\":2,\"18\":1}}],[\"revq队列不为空\",{\"1\":{\"1059\":1}}],[\"revision\",{\"1\":{\"140\":1}}],[\"reverse包装再进行排序\",{\"1\":{\"687\":1}}],[\"reverseproxy\",{\"1\":{\"646\":1}}],[\"reverseproxy包含了一个新的\",{\"1\":{\"117\":1}}],[\"reverse\",{\"1\":{\"527\":10,\"687\":1}}],[\"revel\",{\"1\":{\"51\":3}}],[\"rejected\",{\"1\":{\"137\":1}}],[\"real\",{\"1\":{\"1097\":1}}],[\"realm=restricted\",{\"1\":{\"960\":1}}],[\"reaches\",{\"1\":{\"1132\":1}}],[\"reached\",{\"1\":{\"1079\":1}}],[\"reacquired\",{\"1\":{\"1097\":1}}],[\"reason\",{\"1\":{\"168\":2,\"1098\":1}}],[\"reasons\",{\"1\":{\"112\":1}}],[\"readgstatus\",{\"1\":{\"1098\":2,\"1102\":1,\"1107\":1}}],[\"readywithtime\",{\"1\":{\"1168\":1,\"1169\":1}}],[\"ready函数来唤醒协程\",{\"1\":{\"1098\":1}}],[\"ready\",{\"1\":{\"1061\":1,\"1111\":1,\"1122\":1,\"1139\":1}}],[\"read是只读的\",{\"1\":{\"1045\":1}}],[\"read是sync\",{\"1\":{\"1045\":1}}],[\"read和dirty所存储的entry指针都是指向的同一片\",{\"1\":{\"1045\":1}}],[\"readdoc\",{\"1\":{\"1016\":1}}],[\"readdir的一层简单封装\",{\"1\":{\"424\":1}}],[\"readdir本质上也只是对\",{\"1\":{\"424\":1}}],[\"readdir函数\",{\"1\":{\"424\":2}}],[\"readdir\",{\"1\":{\"41\":1,\"424\":6}}],[\"readtime\",{\"1\":{\"916\":2}}],[\"readtimeout\",{\"1\":{\"242\":2,\"644\":1,\"998\":1}}],[\"readbytes\",{\"1\":{\"916\":2}}],[\"readcount\",{\"1\":{\"916\":2}}],[\"readinconfig\",{\"1\":{\"791\":2}}],[\"readheadertimeout\",{\"1\":{\"644\":1}}],[\"readfrom\",{\"1\":{\"419\":3}}],[\"readfile而言\",{\"1\":{\"417\":1}}],[\"readfile\",{\"1\":{\"41\":2,\"417\":5,\"419\":1,\"623\":1}}],[\"readall\",{\"1\":{\"417\":3,\"638\":1}}],[\"readall而言\",{\"1\":{\"417\":1}}],[\"readat\",{\"1\":{\"417\":1}}],[\"readerwait\",{\"1\":{\"1155\":2,\"1158\":1,\"1162\":2}}],[\"readercount\",{\"0\":{\"1156\":1},\"1\":{\"1155\":2,\"1157\":1,\"1158\":4,\"1159\":2,\"1160\":4,\"1161\":1,\"1162\":1}}],[\"readersem\",{\"1\":{\"1155\":2,\"1159\":2,\"1161\":1}}],[\"readers\",{\"1\":{\"1061\":1,\"1155\":4}}],[\"readerat\",{\"1\":{\"721\":1}}],[\"reader类型的实现\",{\"1\":{\"417\":1}}],[\"reader类似\",{\"1\":{\"346\":1}}],[\"reader\",{\"0\":{\"721\":1},\"1\":{\"345\":2,\"417\":1,\"419\":2,\"584\":3,\"639\":2,\"721\":5,\"785\":1,\"827\":2,\"981\":2,\"1086\":1}}],[\"reader来进行内容读取\",{\"1\":{\"345\":1}}],[\"read\",{\"0\":{\"343\":1},\"1\":{\"343\":1,\"417\":2,\"471\":1,\"481\":2,\"482\":2,\"560\":1,\"682\":1,\"721\":3,\"758\":1,\"764\":5,\"766\":1,\"767\":3,\"814\":1,\"817\":1,\"1036\":1,\"1045\":2,\"1046\":11,\"1047\":17,\"1048\":7,\"1049\":11,\"1104\":1}}],[\"readonly类型\",{\"1\":{\"1045\":1}}],[\"readonly\",{\"1\":{\"242\":1,\"1045\":2,\"1046\":1,\"1047\":1,\"1049\":1}}],[\"readpref\",{\"1\":{\"221\":2}}],[\"reads\",{\"1\":{\"34\":1,\"1095\":1}}],[\"readmemstats\",{\"1\":{\"1128\":2}}],[\"readme\",{\"1\":{\"7\":2,\"200\":1,\"330\":1,\"416\":8,\"417\":5,\"418\":3,\"419\":6,\"420\":2,\"421\":1,\"498\":1,\"499\":8,\"503\":1,\"507\":1,\"513\":1,\"598\":1,\"802\":1,\"923\":1,\"926\":1}}],[\"reusable\",{\"1\":{\"923\":1}}],[\"reused\",{\"1\":{\"495\":2,\"499\":2,\"1178\":2}}],[\"reuse=old\",{\"1\":{\"25\":1}}],[\"reuse\",{\"1\":{\"7\":1,\"21\":2,\"1138\":1}}],[\"reugn\",{\"1\":{\"56\":1}}],[\"reduced\",{\"1\":{\"1138\":1}}],[\"redirection\",{\"1\":{\"504\":1}}],[\"redirect\",{\"1\":{\"504\":1,\"817\":1,\"981\":1,\"991\":2,\"1016\":1}}],[\"redis只能查询缓存不能更新\",{\"1\":{\"242\":1}}],[\"redis连接最大的存活时间\",{\"1\":{\"242\":1}}],[\"redis连接池多久会关闭一个空闲连接\",{\"1\":{\"242\":1}}],[\"redis连接池最小空闲连接数\",{\"1\":{\"242\":1}}],[\"redis连接池的最大连接数\",{\"1\":{\"242\":1}}],[\"redis新连接超时时间\",{\"1\":{\"242\":1}}],[\"redis操作失败最大重试次数\",{\"1\":{\"242\":1}}],[\"redis数据库\",{\"1\":{\"242\":1}}],[\"redis密码\",{\"1\":{\"242\":1}}],[\"redis地址\",{\"1\":{\"242\":1}}],[\"redisclient\",{\"1\":{\"241\":3,\"243\":1,\"244\":1,\"246\":2,\"247\":4,\"248\":3,\"249\":2,\"250\":1,\"251\":1,\"252\":1,\"254\":2,\"255\":2,\"256\":5,\"258\":5,\"259\":1,\"260\":1,\"261\":1,\"262\":1,\"263\":1,\"265\":5,\"266\":1,\"267\":4,\"268\":3,\"270\":2,\"271\":4,\"272\":6,\"273\":2,\"274\":1,\"275\":1,\"276\":1,\"278\":1,\"279\":2,\"280\":4,\"281\":1,\"282\":3,\"283\":6,\"284\":3}}],[\"redis\",{\"0\":{\"239\":1},\"1\":{\"53\":1,\"175\":3,\"239\":8,\"240\":9,\"241\":5,\"242\":1,\"243\":2,\"244\":5,\"278\":2,\"280\":1,\"281\":1,\"1003\":2}}],[\"redeclares\",{\"1\":{\"137\":1}}],[\"redsync\",{\"1\":{\"53\":3}}],[\"releasep将\",{\"1\":{\"1092\":1}}],[\"releasep\",{\"1\":{\"1092\":1}}],[\"releasem\",{\"1\":{\"1091\":2,\"1095\":1,\"1098\":2,\"1124\":1,\"1148\":1}}],[\"releasemode\",{\"1\":{\"503\":1}}],[\"releasetime\",{\"1\":{\"1059\":1,\"1067\":3,\"1167\":1}}],[\"releasesudog\",{\"1\":{\"1059\":1,\"1060\":1,\"1067\":1,\"1167\":1}}],[\"releases\",{\"1\":{\"140\":2,\"148\":1}}],[\"released\",{\"1\":{\"115\":1,\"116\":1,\"117\":1,\"118\":1,\"119\":1,\"120\":1,\"121\":1,\"122\":1,\"123\":1,\"124\":1,\"125\":1,\"126\":1,\"127\":1,\"128\":1,\"129\":1,\"130\":1,\"131\":1,\"132\":1,\"133\":1,\"134\":1,\"135\":1,\"136\":1}}],[\"release\",{\"1\":{\"110\":1,\"113\":1,\"114\":2,\"115\":2,\"116\":2,\"117\":2,\"118\":2,\"119\":2,\"120\":2,\"121\":2,\"122\":2,\"123\":2,\"124\":2,\"125\":2,\"126\":2,\"127\":2,\"128\":2,\"129\":2,\"130\":2,\"131\":2,\"132\":2,\"133\":2,\"134\":2,\"135\":2,\"136\":2,\"137\":2,\"138\":1,\"140\":1,\"200\":1,\"291\":1,\"499\":2,\"503\":2,\"509\":1,\"1061\":2,\"1089\":1,\"1104\":1,\"1138\":1}}],[\"rel\",{\"1\":{\"52\":3,\"426\":3}}],[\"relativepath\",{\"1\":{\"988\":1,\"999\":4}}],[\"relative\",{\"1\":{\"9\":1,\"14\":1,\"201\":4,\"1132\":1}}],[\"retake函数完成\",{\"1\":{\"1107\":1}}],[\"retake\",{\"1\":{\"1089\":1,\"1097\":1,\"1107\":1}}],[\"ret指针\",{\"1\":{\"1086\":1}}],[\"retc\",{\"1\":{\"1067\":8}}],[\"retrythrottlingpolicy\",{\"1\":{\"175\":1}}],[\"retrythrottling\",{\"1\":{\"175\":1}}],[\"retryinfo\",{\"1\":{\"168\":1}}],[\"retry\",{\"1\":{\"141\":1,\"143\":3,\"144\":1,\"168\":1}}],[\"retract指令表示\",{\"1\":{\"509\":1}}],[\"retract\",{\"1\":{\"509\":5}}],[\"retract=version\",{\"1\":{\"26\":1}}],[\"retractions\",{\"1\":{\"509\":1}}],[\"retraction\",{\"1\":{\"21\":1}}],[\"retracted\",{\"1\":{\"20\":1,\"21\":2}}],[\"ret\",{\"1\":{\"45\":2,\"1021\":1,\"1067\":1,\"1080\":2,\"1086\":1,\"1089\":1,\"1107\":1,\"1153\":1}}],[\"returned\",{\"1\":{\"1112\":1,\"1178\":2}}],[\"return0\",{\"1\":{\"1074\":1,\"1080\":1}}],[\"return关键字可以不需要指定返回哪些值\",{\"1\":{\"397\":1}}],[\"returns\",{\"1\":{\"151\":1,\"157\":3,\"158\":2,\"159\":1,\"164\":2,\"181\":1,\"196\":4,\"197\":1,\"496\":1,\"823\":2,\"1080\":2,\"1097\":2}}],[\"return\",{\"1\":{\"44\":2,\"45\":2,\"112\":2,\"114\":3,\"137\":2,\"145\":7,\"152\":1,\"153\":1,\"158\":8,\"159\":2,\"164\":4,\"165\":5,\"166\":10,\"168\":4,\"175\":4,\"202\":1,\"216\":1,\"234\":3,\"235\":2,\"236\":2,\"237\":2,\"283\":2,\"298\":1,\"326\":5,\"331\":1,\"350\":1,\"395\":5,\"396\":1,\"397\":6,\"398\":4,\"399\":6,\"400\":1,\"402\":2,\"405\":1,\"406\":5,\"412\":2,\"416\":1,\"417\":1,\"418\":1,\"419\":6,\"422\":1,\"426\":10,\"436\":2,\"437\":2,\"445\":2,\"447\":1,\"455\":1,\"459\":1,\"475\":6,\"476\":3,\"477\":5,\"478\":2,\"482\":1,\"484\":5,\"485\":4,\"486\":2,\"496\":1,\"513\":5,\"521\":2,\"527\":4,\"531\":3,\"532\":1,\"533\":4,\"535\":1,\"542\":3,\"545\":1,\"547\":3,\"550\":3,\"551\":4,\"553\":1,\"555\":1,\"560\":1,\"567\":6,\"568\":1,\"571\":4,\"572\":1,\"573\":4,\"574\":3,\"575\":3,\"577\":7,\"578\":8,\"581\":6,\"582\":6,\"583\":1,\"584\":2,\"587\":19,\"588\":1,\"598\":5,\"600\":2,\"601\":2,\"602\":2,\"603\":9,\"619\":1,\"620\":1,\"622\":1,\"623\":2,\"625\":1,\"627\":1,\"628\":1,\"629\":2,\"638\":1,\"688\":2,\"710\":1,\"713\":4,\"723\":1,\"725\":2,\"728\":2,\"733\":2,\"734\":2,\"740\":2,\"751\":2,\"782\":2,\"783\":2,\"784\":1,\"785\":2,\"792\":4,\"798\":1,\"813\":2,\"823\":8,\"824\":6,\"826\":3,\"827\":3,\"828\":1,\"829\":3,\"830\":1,\"839\":1,\"840\":3,\"841\":1,\"842\":6,\"843\":3,\"855\":1,\"856\":1,\"882\":2,\"901\":4,\"902\":6,\"949\":1,\"950\":3,\"952\":7,\"960\":1,\"971\":2,\"984\":2,\"985\":1,\"992\":2,\"993\":1,\"995\":1,\"996\":1,\"1000\":1,\"1007\":1,\"1011\":2,\"1016\":4,\"1020\":1,\"1021\":3,\"1025\":2,\"1026\":3,\"1032\":1,\"1033\":4,\"1036\":3,\"1037\":2,\"1038\":1,\"1041\":1,\"1042\":1,\"1046\":3,\"1047\":5,\"1048\":4,\"1053\":8,\"1054\":4,\"1058\":2,\"1059\":6,\"1060\":7,\"1061\":1,\"1062\":3,\"1065\":2,\"1066\":5,\"1067\":1,\"1069\":6,\"1072\":1,\"1075\":1,\"1078\":2,\"1080\":4,\"1089\":2,\"1091\":1,\"1095\":1,\"1097\":5,\"1098\":1,\"1100\":1,\"1102\":2,\"1104\":5,\"1106\":3,\"1107\":1,\"1111\":2,\"1112\":2,\"1114\":2,\"1116\":2,\"1117\":4,\"1120\":6,\"1121\":1,\"1124\":1,\"1125\":5,\"1126\":1,\"1138\":3,\"1139\":3,\"1140\":1,\"1147\":1,\"1152\":3,\"1153\":4,\"1154\":2,\"1157\":3,\"1160\":4,\"1167\":3,\"1168\":3,\"1169\":1,\"1177\":2,\"1178\":4}}],[\"regardless\",{\"1\":{\"1088\":1}}],[\"regex\",{\"1\":{\"616\":1}}],[\"regexp\",{\"1\":{\"38\":4,\"40\":1,\"519\":5,\"1016\":1}}],[\"regions\",{\"1\":{\"561\":2}}],[\"registertranslation\",{\"1\":{\"952\":1}}],[\"registertagnamefunc\",{\"1\":{\"952\":2}}],[\"registerdefaulttranslations\",{\"1\":{\"952\":2,\"953\":1}}],[\"registerstructvalidation\",{\"1\":{\"951\":1}}],[\"registersayhelloserver\",{\"1\":{\"145\":1,\"153\":1}}],[\"registercustomtypefunc\",{\"1\":{\"950\":1}}],[\"registervalidation\",{\"1\":{\"949\":1}}],[\"registeruser\",{\"1\":{\"946\":5,\"970\":2}}],[\"registeralias\",{\"1\":{\"794\":1,\"948\":1}}],[\"register注册驱动\",{\"1\":{\"231\":1}}],[\"register注册到全局\",{\"1\":{\"174\":1}}],[\"registerpersonserver\",{\"1\":{\"165\":1}}],[\"register\",{\"1\":{\"145\":5,\"175\":1,\"231\":1,\"970\":2,\"977\":4,\"1016\":3,\"1089\":1,\"1122\":1}}],[\"registeredclaims\",{\"1\":{\"778\":1,\"780\":1,\"781\":3,\"785\":2}}],[\"registered\",{\"1\":{\"37\":1,\"773\":1,\"852\":1,\"970\":2}}],[\"rescan阅读英文原文\",{\"1\":{\"1141\":1}}],[\"rescheduled\",{\"1\":{\"1138\":1}}],[\"resuming\",{\"1\":{\"1097\":1}}],[\"results\",{\"1\":{\"459\":2,\"1076\":1}}],[\"result\",{\"1\":{\"212\":1,\"214\":1,\"215\":1,\"224\":2,\"228\":4,\"235\":2,\"241\":3,\"246\":1,\"462\":1,\"496\":4,\"498\":2,\"587\":4,\"869\":3,\"870\":3,\"1125\":4}}],[\"resulting\",{\"1\":{\"38\":1}}],[\"reserved0\",{\"1\":{\"416\":1}}],[\"reserved\",{\"1\":{\"188\":3,\"1111\":2}}],[\"reserve关键字可以声明保留字段\",{\"1\":{\"188\":1}}],[\"resetspinning\",{\"1\":{\"1104\":1}}],[\"resetforsleep\",{\"1\":{\"1098\":1}}],[\"reset\",{\"1\":{\"158\":1,\"165\":1}}],[\"res\",{\"1\":{\"163\":3,\"227\":3,\"236\":2,\"237\":2,\"452\":2,\"525\":4,\"532\":2,\"535\":3,\"545\":2,\"546\":2,\"577\":6,\"578\":2,\"587\":4,\"758\":2}}],[\"responsibility\",{\"1\":{\"536\":2}}],[\"response\",{\"1\":{\"208\":2,\"209\":2,\"210\":2,\"212\":2,\"213\":2,\"214\":2,\"215\":2,\"216\":6,\"965\":1,\"986\":5}}],[\"responsecontorller\",{\"1\":{\"117\":1}}],[\"responsewriter\",{\"1\":{\"41\":1,\"645\":5,\"646\":1,\"955\":1,\"956\":2,\"958\":1,\"959\":1,\"960\":3}}],[\"resp\",{\"1\":{\"145\":1,\"154\":1,\"155\":1,\"165\":7,\"166\":2,\"174\":2,\"175\":1,\"207\":2,\"638\":3,\"639\":2,\"641\":2,\"642\":2}}],[\"resources\",{\"1\":{\"829\":1,\"1089\":1}}],[\"resourceexhausted\",{\"1\":{\"168\":1}}],[\"resolving\",{\"1\":{\"499\":1}}],[\"resolveunixaddr\",{\"1\":{\"680\":2}}],[\"resolveudpaddr\",{\"1\":{\"679\":3}}],[\"resolvetcpaddr\",{\"1\":{\"678\":3}}],[\"resolveipaddr\",{\"1\":{\"677\":3}}],[\"resolvenowoptions\",{\"1\":{\"145\":1,\"174\":1,\"175\":1}}],[\"resolvenow\",{\"1\":{\"145\":1,\"174\":1,\"175\":1}}],[\"resolve\",{\"1\":{\"145\":3}}],[\"resolver\",{\"1\":{\"145\":16,\"174\":7,\"175\":14,\"849\":1}}],[\"resovler\",{\"1\":{\"174\":1}}],[\"reso\",{\"1\":{\"145\":2}}],[\"restart\",{\"1\":{\"1140\":1}}],[\"rest\",{\"1\":{\"1101\":1}}],[\"restore\",{\"1\":{\"1097\":2}}],[\"restored\",{\"1\":{\"17\":1}}],[\"restful\",{\"1\":{\"70\":1,\"203\":1,\"205\":1,\"758\":1,\"954\":1,\"1009\":2}}],[\"resty\",{\"1\":{\"70\":3}}],[\"restrict\",{\"1\":{\"16\":1}}],[\"reclaimchunk\",{\"1\":{\"1148\":1}}],[\"reclaimcredit\",{\"1\":{\"1147\":1,\"1148\":3}}],[\"reclaimindex\",{\"1\":{\"1148\":2}}],[\"reclaim\",{\"1\":{\"1148\":1}}],[\"reclaim方法来完成\",{\"1\":{\"1148\":1}}],[\"receiving\",{\"1\":{\"495\":1}}],[\"receiver\",{\"1\":{\"414\":1,\"1060\":1}}],[\"receive\",{\"1\":{\"158\":12,\"159\":18,\"469\":1,\"1057\":1,\"1060\":1,\"1061\":1,\"1067\":1,\"1086\":2}}],[\"receivemessagestream\",{\"1\":{\"158\":2}}],[\"receivemessageserver\",{\"1\":{\"158\":4}}],[\"receivemessage接收一个指定的用户名\",{\"1\":{\"158\":1}}],[\"receivemessage\",{\"1\":{\"158\":6}}],[\"received\",{\"1\":{\"145\":9,\"153\":1,\"154\":1,\"155\":2,\"174\":2,\"175\":11,\"1060\":6,\"1062\":2,\"1066\":2}}],[\"rectangle\",{\"1\":{\"404\":1}}],[\"recvok\",{\"1\":{\"1067\":5}}],[\"recvonly\",{\"1\":{\"1061\":1}}],[\"recv函数\",{\"1\":{\"1067\":1}}],[\"recv函数中的设置\",{\"1\":{\"1060\":1}}],[\"recvdirect函数从发送方复制数据\",{\"1\":{\"1060\":1}}],[\"recvdirect\",{\"1\":{\"1060\":1}}],[\"recv来处理该发送方协程\",{\"1\":{\"1060\":1}}],[\"recvq\",{\"1\":{\"1057\":2,\"1059\":1,\"1060\":1,\"1061\":1,\"1067\":3}}],[\"recvx++\",{\"1\":{\"1059\":1,\"1060\":2,\"1067\":1}}],[\"recvx\",{\"1\":{\"1057\":2,\"1059\":3,\"1060\":7,\"1067\":3}}],[\"recvmsg\",{\"1\":{\"158\":1,\"166\":2}}],[\"recv\",{\"1\":{\"158\":7,\"159\":2,\"164\":1,\"166\":4,\"167\":3,\"1057\":1,\"1060\":2,\"1067\":3}}],[\"recvserver\",{\"1\":{\"158\":4}}],[\"recovered就不会被设置为true\",{\"1\":{\"1080\":1}}],[\"recovered\",{\"1\":{\"1078\":1,\"1080\":5}}],[\"recover做了些什么工作\",{\"1\":{\"1077\":1}}],[\"recover\",{\"1\":{\"584\":1,\"607\":3,\"963\":1,\"1062\":2,\"1077\":1}}],[\"recovery函数中\",{\"1\":{\"1080\":1}}],[\"recovery\",{\"1\":{\"503\":1,\"992\":2,\"995\":1,\"1007\":1,\"1080\":3}}],[\"recognize\",{\"1\":{\"531\":1}}],[\"recognized\",{\"1\":{\"38\":1}}],[\"recommend\",{\"1\":{\"503\":1}}],[\"record\",{\"1\":{\"1074\":1}}],[\"recordspan\",{\"1\":{\"1119\":1}}],[\"records\",{\"1\":{\"233\":1}}],[\"recorded\",{\"1\":{\"7\":1}}],[\"recursively\",{\"1\":{\"21\":1,\"33\":1}}],[\"rewrite\",{\"1\":{\"17\":2,\"117\":1,\"582\":1}}],[\"rewrites\",{\"1\":{\"16\":2}}],[\"rewriting\",{\"1\":{\"16\":1}}],[\"refill会负责向mcentral申请一个可用的mspan\",{\"1\":{\"1125\":1}}],[\"refillcount\",{\"1\":{\"1120\":3}}],[\"refillalloccache\",{\"1\":{\"1117\":1}}],[\"refill\",{\"1\":{\"1116\":1,\"1120\":2,\"1125\":2}}],[\"refill方法完成\",{\"1\":{\"1116\":1}}],[\"reflexivekey\",{\"1\":{\"1037\":1,\"1042\":1,\"1043\":1}}],[\"reflectdata\",{\"1\":{\"1030\":2,\"1037\":1}}],[\"reflectedencoder\",{\"1\":{\"839\":1}}],[\"reflect2\",{\"1\":{\"503\":2,\"509\":1}}],[\"reflectvalue\",{\"1\":{\"438\":2}}],[\"reflect包同时根据一些特殊的类型提供了不同的更为方便的函数\",{\"1\":{\"453\":1}}],[\"reflect包使用kind枚举出了\",{\"1\":{\"432\":1}}],[\"reflect包提供了两个函数来将\",{\"1\":{\"429\":1}}],[\"reflecttype\",{\"1\":{\"431\":2}}],[\"reflect\",{\"1\":{\"4\":2,\"138\":1,\"429\":1,\"431\":2,\"432\":1,\"433\":2,\"434\":5,\"435\":4,\"436\":3,\"437\":3,\"438\":2,\"439\":1,\"440\":1,\"441\":2,\"442\":1,\"443\":1,\"445\":1,\"446\":4,\"448\":3,\"449\":5,\"450\":1,\"451\":3,\"452\":6,\"454\":2,\"455\":2,\"456\":2,\"457\":4,\"458\":2,\"459\":6,\"460\":5,\"485\":1,\"531\":2,\"535\":2,\"540\":2,\"541\":2,\"571\":4,\"616\":1,\"950\":1,\"952\":4,\"1030\":2,\"1033\":3,\"1037\":2,\"1052\":2,\"1070\":3}}],[\"refstfulapi\",{\"1\":{\"954\":1}}],[\"referenced\",{\"1\":{\"1089\":1}}],[\"references\",{\"1\":{\"860\":1,\"862\":1}}],[\"reference\",{\"1\":{\"114\":1,\"141\":1,\"146\":1,\"492\":1,\"1144\":2}}],[\"reformatting\",{\"1\":{\"17\":1}}],[\"reformatted\",{\"1\":{\"17\":3}}],[\"ref\",{\"1\":{\"7\":1,\"16\":1}}],[\"repeat\",{\"1\":{\"714\":3}}],[\"repeated\",{\"1\":{\"167\":1,\"168\":1,\"185\":1,\"187\":1,\"188\":1,\"190\":2,\"194\":1}}],[\"repalce\",{\"1\":{\"515\":1}}],[\"rep\",{\"1\":{\"166\":3,\"167\":2}}],[\"replacing\",{\"1\":{\"1097\":1}}],[\"replacer\",{\"0\":{\"720\":1},\"1\":{\"720\":2}}],[\"replaceall\",{\"1\":{\"715\":2}}],[\"replace的方便函数\",{\"1\":{\"715\":1}}],[\"replace指令的话会修改go\",{\"1\":{\"512\":1}}],[\"replace将会替换掉指定版本的依赖\",{\"1\":{\"509\":1}}],[\"replaceone\",{\"1\":{\"227\":1}}],[\"replace=old\",{\"1\":{\"26\":1,\"34\":1}}],[\"replaced\",{\"1\":{\"21\":1}}],[\"replace\",{\"1\":{\"21\":1,\"34\":4,\"509\":3,\"512\":1,\"515\":1,\"715\":5,\"720\":1,\"897\":3}}],[\"replacement\",{\"1\":{\"17\":1}}],[\"replicas\",{\"1\":{\"207\":2,\"208\":1}}],[\"replication\",{\"1\":{\"144\":1}}],[\"replicate\",{\"1\":{\"144\":1}}],[\"reply\",{\"1\":{\"166\":5}}],[\"repository\",{\"1\":{\"961\":1,\"966\":1}}],[\"repo\",{\"1\":{\"23\":1,\"501\":1}}],[\"reporterror\",{\"1\":{\"145\":1,\"175\":1,\"951\":2}}],[\"reported\",{\"1\":{\"7\":1}}],[\"reporting\",{\"1\":{\"141\":1}}],[\"reports\",{\"1\":{\"37\":2}}],[\"report\",{\"1\":{\"5\":2,\"37\":1,\"559\":1}}],[\"representing\",{\"1\":{\"1051\":1}}],[\"representabilitsy\",{\"1\":{\"595\":1}}],[\"representability以了解更多细节\",{\"1\":{\"595\":1}}],[\"representability\",{\"1\":{\"595\":1}}],[\"representation\",{\"1\":{\"4\":1}}],[\"represents\",{\"1\":{\"4\":1,\"1150\":1}}],[\"nwait\",{\"1\":{\"1140\":1}}],[\"n++\",{\"1\":{\"1115\":1}}],[\"n2\",{\"1\":{\"1100\":3}}],[\"nchunk\",{\"1\":{\"1112\":6}}],[\"ncopy\",{\"1\":{\"1101\":3}}],[\"ncpu\",{\"1\":{\"1089\":2,\"1153\":1}}],[\"ncases\",{\"1\":{\"1067\":9}}],[\"ncas\",{\"1\":{\"1065\":4}}],[\"ngsys\",{\"1\":{\"1088\":1}}],[\"nname\",{\"1\":{\"1076\":1}}],[\"nrecvs\",{\"1\":{\"1067\":2}}],[\"nbase\",{\"1\":{\"1122\":5}}],[\"nbuckets指的是实际分配桶的数量\",{\"1\":{\"1034\":1}}],[\"nbuckets\",{\"1\":{\"1034\":6}}],[\"nbf\",{\"1\":{\"778\":1}}],[\"nfound\",{\"1\":{\"1148\":4}}],[\"nflag\",{\"1\":{\"635\":1}}],[\"nfunc\",{\"1\":{\"108\":1}}],[\"n<\",{\"1\":{\"620\":1}}],[\"n=5\",{\"1\":{\"526\":19}}],[\"n=3\",{\"1\":{\"367\":3}}],[\"n的大小\",{\"1\":{\"525\":1}}],[\"nsends+nrecvs表示\",{\"1\":{\"1067\":1}}],[\"nsends和nrecvs表示读\",{\"1\":{\"1067\":1}}],[\"nsends\",{\"1\":{\"1067\":6}}],[\"nsec\",{\"1\":{\"737\":1}}],[\"nsop2\",{\"1\":{\"547\":2}}],[\"nsop1\",{\"1\":{\"547\":2}}],[\"ns\",{\"1\":{\"525\":14,\"526\":60,\"547\":4,\"588\":3,\"1098\":3}}],[\"n为随机种子\",{\"1\":{\"519\":1}}],[\"n值为并行的最大数量\",{\"1\":{\"519\":1}}],[\"nhooyr\",{\"1\":{\"510\":1}}],[\"npidle\",{\"1\":{\"1153\":1}}],[\"nproc\",{\"1\":{\"1140\":1}}],[\"nprocs\",{\"1\":{\"1089\":10}}],[\"npages个runtime\",{\"1\":{\"1114\":1}}],[\"npages\",{\"1\":{\"1114\":2,\"1117\":3,\"1120\":7,\"1121\":1,\"1125\":1,\"1126\":1,\"1147\":6}}],[\"npage\",{\"1\":{\"1100\":3,\"1115\":2,\"1122\":2,\"1148\":9}}],[\"npackage\",{\"1\":{\"108\":1}}],[\"np\",{\"1\":{\"751\":2}}],[\"nps\",{\"1\":{\"612\":1}}],[\"npm\",{\"1\":{\"492\":1,\"501\":1}}],[\"n`\",{\"1\":{\"306\":1}}],[\"nice\",{\"1\":{\"527\":4,\"717\":4,\"912\":8}}],[\"nimport\",{\"1\":{\"108\":1}}],[\"nil代表着上面几种类型的零值\",{\"1\":{\"1071\":1}}],[\"nil是可用的\",{\"1\":{\"1071\":1}}],[\"nil是引用类型的零值\",{\"1\":{\"1070\":1}}],[\"nil的变量\",{\"1\":{\"1070\":1}}],[\"nil似乎没有起到过滤作用\",{\"1\":{\"1069\":1}}],[\"nil就占了相当一部分\",{\"1\":{\"598\":1}}],[\"nilch\",{\"1\":{\"471\":3}}],[\"nil这样的语句是无法通过编译的\",{\"1\":{\"322\":1}}],[\"nil仅仅只是一些引用类型的零值\",{\"1\":{\"322\":1}}],[\"nil类似于其它语言中的none或者null\",{\"1\":{\"322\":1}}],[\"nilfunc\",{\"1\":{\"37\":1}}],[\"nil\",{\"0\":{\"322\":1,\"1068\":1},\"1\":{\"7\":1,\"21\":1,\"41\":1,\"145\":13,\"152\":1,\"153\":3,\"154\":2,\"158\":8,\"159\":5,\"164\":3,\"165\":1,\"166\":1,\"167\":1,\"168\":4,\"174\":2,\"175\":5,\"205\":2,\"207\":2,\"208\":2,\"209\":2,\"210\":2,\"212\":2,\"213\":2,\"214\":2,\"215\":2,\"216\":6,\"221\":1,\"224\":1,\"225\":4,\"226\":2,\"227\":4,\"228\":2,\"229\":2,\"234\":3,\"235\":2,\"236\":2,\"237\":2,\"238\":1,\"241\":2,\"321\":1,\"322\":1,\"329\":1,\"349\":2,\"382\":1,\"397\":1,\"416\":3,\"417\":7,\"418\":5,\"419\":8,\"420\":1,\"421\":2,\"422\":3,\"424\":3,\"425\":1,\"426\":9,\"459\":1,\"460\":1,\"475\":3,\"477\":2,\"484\":4,\"485\":2,\"491\":2,\"496\":1,\"513\":4,\"527\":3,\"531\":1,\"553\":2,\"556\":3,\"557\":1,\"571\":1,\"583\":1,\"584\":4,\"598\":8,\"600\":1,\"603\":2,\"604\":1,\"607\":4,\"619\":1,\"620\":1,\"622\":1,\"623\":2,\"625\":1,\"627\":1,\"628\":1,\"629\":2,\"638\":1,\"639\":1,\"641\":1,\"642\":1,\"643\":1,\"644\":7,\"645\":2,\"646\":1,\"675\":1,\"676\":1,\"677\":2,\"678\":2,\"679\":2,\"680\":1,\"681\":2,\"682\":5,\"719\":1,\"721\":1,\"723\":2,\"725\":5,\"727\":1,\"728\":1,\"733\":2,\"734\":7,\"736\":2,\"740\":2,\"751\":1,\"782\":3,\"783\":2,\"784\":1,\"785\":3,\"791\":2,\"795\":1,\"797\":1,\"798\":1,\"805\":2,\"809\":2,\"812\":3,\"813\":3,\"817\":1,\"823\":4,\"824\":7,\"827\":1,\"829\":5,\"840\":1,\"847\":1,\"851\":2,\"882\":2,\"888\":2,\"895\":3,\"901\":5,\"902\":6,\"950\":1,\"953\":1,\"971\":3,\"974\":1,\"975\":3,\"977\":1,\"984\":2,\"985\":1,\"995\":1,\"1002\":1,\"1003\":1,\"1016\":1,\"1025\":1,\"1030\":2,\"1034\":3,\"1036\":2,\"1037\":5,\"1038\":6,\"1039\":4,\"1040\":3,\"1042\":14,\"1043\":1,\"1046\":2,\"1047\":6,\"1048\":4,\"1049\":1,\"1051\":1,\"1053\":2,\"1054\":3,\"1058\":2,\"1059\":11,\"1060\":15,\"1061\":2,\"1062\":1,\"1065\":1,\"1066\":2,\"1067\":15,\"1069\":12,\"1070\":8,\"1071\":2,\"1072\":1,\"1073\":1,\"1074\":6,\"1075\":1,\"1077\":2,\"1079\":9,\"1080\":4,\"1082\":1,\"1086\":2,\"1087\":1,\"1088\":1,\"1089\":5,\"1092\":1,\"1095\":1,\"1096\":8,\"1097\":3,\"1098\":1,\"1100\":4,\"1104\":3,\"1107\":1,\"1111\":1,\"1112\":3,\"1114\":2,\"1116\":1,\"1117\":7,\"1119\":12,\"1120\":7,\"1121\":1,\"1122\":3,\"1128\":1,\"1138\":2,\"1139\":1,\"1140\":1,\"1147\":1,\"1167\":1,\"1168\":5,\"1169\":4}}],[\"nil了\",{\"1\":{\"0\":1}}],[\"nalloc\",{\"1\":{\"1112\":5}}],[\"nallp\",{\"1\":{\"1089\":3}}],[\"namingstrategy\",{\"1\":{\"852\":1}}],[\"name是html路径\",{\"1\":{\"981\":1}}],[\"name就是一个命名参数\",{\"1\":{\"956\":1}}],[\"name必须包含文本\",{\"1\":{\"952\":2}}],[\"name`\",{\"1\":{\"863\":1}}],[\"namerules\",{\"1\":{\"948\":5}}],[\"namer\",{\"1\":{\"852\":1}}],[\"nameencoder\",{\"1\":{\"839\":3}}],[\"namekey\",{\"1\":{\"839\":3,\"840\":1}}],[\"name>\",{\"1\":{\"619\":1,\"620\":1}}],[\"name注释\",{\"1\":{\"533\":1}}],[\"name=details\",{\"1\":{\"167\":1}}],[\"name=message\",{\"1\":{\"167\":1}}],[\"name=msg\",{\"1\":{\"152\":1}}],[\"name=code\",{\"1\":{\"167\":1}}],[\"name=name\",{\"1\":{\"152\":1}}],[\"name=value\",{\"1\":{\"3\":1,\"10\":1}}],[\"name5566\",{\"1\":{\"72\":1}}],[\"name\",{\"1\":{\"8\":1,\"10\":1,\"12\":5,\"17\":1,\"21\":4,\"23\":3,\"41\":3,\"42\":1,\"110\":1,\"114\":1,\"115\":1,\"141\":1,\"143\":3,\"144\":5,\"145\":9,\"151\":1,\"152\":2,\"153\":1,\"154\":1,\"155\":1,\"162\":1,\"164\":4,\"166\":13,\"167\":6,\"168\":6,\"174\":1,\"175\":11,\"189\":1,\"196\":2,\"201\":1,\"202\":2,\"205\":2,\"207\":2,\"208\":2,\"212\":2,\"213\":1,\"214\":2,\"216\":1,\"223\":3,\"224\":3,\"225\":8,\"226\":3,\"227\":5,\"228\":1,\"231\":1,\"234\":1,\"236\":1,\"246\":2,\"247\":4,\"248\":3,\"249\":2,\"250\":1,\"251\":1,\"258\":2,\"307\":2,\"324\":4,\"328\":1,\"329\":8,\"330\":1,\"341\":1,\"395\":7,\"398\":8,\"403\":1,\"404\":1,\"405\":5,\"406\":4,\"407\":6,\"408\":3,\"409\":2,\"416\":6,\"417\":3,\"418\":5,\"421\":1,\"424\":3,\"425\":1,\"429\":1,\"433\":1,\"445\":1,\"447\":2,\"448\":5,\"449\":6,\"450\":6,\"451\":3,\"455\":2,\"460\":3,\"496\":10,\"497\":1,\"500\":2,\"513\":3,\"523\":7,\"527\":3,\"540\":4,\"550\":3,\"572\":7,\"573\":4,\"578\":5,\"598\":1,\"618\":1,\"626\":2,\"627\":1,\"628\":1,\"629\":3,\"633\":5,\"636\":6,\"717\":4,\"725\":1,\"727\":3,\"728\":2,\"729\":1,\"730\":5,\"733\":5,\"734\":5,\"735\":4,\"736\":5,\"748\":2,\"749\":4,\"750\":4,\"751\":2,\"762\":3,\"773\":1,\"779\":2,\"782\":1,\"793\":1,\"797\":1,\"812\":9,\"813\":4,\"851\":1,\"853\":1,\"854\":2,\"855\":2,\"856\":3,\"857\":1,\"858\":2,\"859\":2,\"860\":5,\"863\":10,\"866\":8,\"867\":6,\"871\":3,\"874\":2,\"875\":14,\"876\":4,\"878\":1,\"879\":1,\"886\":2,\"887\":2,\"891\":2,\"892\":3,\"893\":4,\"895\":6,\"897\":10,\"898\":11,\"899\":11,\"901\":1,\"902\":2,\"916\":2,\"920\":1,\"942\":2,\"943\":3,\"944\":1,\"945\":2,\"948\":2,\"949\":5,\"950\":5,\"952\":8,\"956\":4,\"981\":2,\"1011\":8,\"1012\":1,\"1014\":3,\"1015\":1,\"1016\":5,\"1020\":3,\"1021\":4,\"1023\":3,\"1076\":1}}],[\"named\",{\"1\":{\"3\":3,\"21\":2,\"582\":1}}],[\"namespace\",{\"1\":{\"942\":1}}],[\"names\",{\"1\":{\"3\":1,\"9\":1,\"21\":1,\"233\":1,\"916\":1}}],[\"narg\",{\"1\":{\"635\":1}}],[\"nan永远成立\",{\"1\":{\"1037\":1}}],[\"nanotime\",{\"1\":{\"1098\":1,\"1107\":1,\"1132\":1,\"1153\":2}}],[\"nanotime等等\",{\"1\":{\"114\":1}}],[\"nanopack\",{\"1\":{\"788\":1}}],[\"nanobox\",{\"1\":{\"788\":1}}],[\"nanosecond\",{\"1\":{\"738\":2}}],[\"nanoseconds\",{\"1\":{\"547\":1,\"856\":1,\"859\":2,\"996\":1,\"1132\":1}}],[\"nano\",{\"1\":{\"613\":1,\"856\":1,\"859\":2,\"862\":3}}],[\"nan\",{\"0\":{\"658\":1},\"1\":{\"384\":13,\"385\":11,\"386\":7,\"397\":1,\"658\":1,\"1033\":2}}],[\"native\",{\"1\":{\"146\":1,\"178\":1}}],[\"natefinch\",{\"1\":{\"54\":1,\"841\":1}}],[\"nacos\",{\"1\":{\"139\":1,\"175\":2}}],[\"n和\",{\"1\":{\"37\":1}}],[\"nuhandlers\",{\"1\":{\"1008\":2}}],[\"nuserid\",{\"1\":{\"969\":1}}],[\"nutsdb\",{\"1\":{\"614\":1}}],[\"numforcedgc\",{\"1\":{\"1128\":1}}],[\"numfield\",{\"1\":{\"448\":3}}],[\"numgc\",{\"1\":{\"1128\":1}}],[\"numdefers\",{\"1\":{\"1076\":1}}],[\"numreturns\",{\"1\":{\"1076\":1}}],[\"numofobject\",{\"1\":{\"485\":3}}],[\"numout\",{\"1\":{\"445\":1,\"451\":1}}],[\"nummethod\",{\"1\":{\"451\":4,\"452\":1}}],[\"numin\",{\"1\":{\"445\":1,\"451\":1}}],[\"numericdate\",{\"1\":{\"778\":3}}],[\"numeric\",{\"1\":{\"392\":1,\"933\":1,\"934\":1,\"937\":1}}],[\"numexpression\",{\"1\":{\"324\":1}}],[\"numptr\",{\"1\":{\"391\":7}}],[\"numpy\",{\"1\":{\"59\":1}}],[\"numstackorders\",{\"1\":{\"1099\":1,\"1100\":1,\"1116\":1}}],[\"numspanclasses\",{\"1\":{\"1099\":1,\"1116\":1,\"1117\":1,\"1118\":1}}],[\"numsref1\",{\"1\":{\"754\":2}}],[\"nums4\",{\"1\":{\"360\":1}}],[\"nums3\",{\"1\":{\"360\":1}}],[\"nums2\",{\"1\":{\"360\":1}}],[\"nums\",{\"1\":{\"360\":6,\"361\":4,\"362\":5,\"364\":5,\"365\":5,\"366\":11,\"367\":15,\"370\":2,\"753\":7,\"754\":4}}],[\"num++\",{\"1\":{\"350\":3}}],[\"numcgocall\",{\"1\":{\"1089\":1}}],[\"numc\",{\"1\":{\"328\":1}}],[\"numb\",{\"1\":{\"328\":1}}],[\"number\",{\"1\":{\"181\":1,\"182\":1,\"187\":2,\"188\":1,\"190\":2,\"205\":1,\"207\":4,\"208\":2,\"521\":3,\"567\":3,\"574\":2,\"575\":1,\"817\":2,\"933\":1,\"1012\":1,\"1030\":1,\"1088\":1,\"1114\":3,\"1132\":2,\"1155\":2,\"1166\":1}}],[\"numbers\",{\"1\":{\"9\":1,\"844\":1}}],[\"numa\",{\"1\":{\"328\":1}}],[\"num5\",{\"1\":{\"325\":1}}],[\"num4\",{\"1\":{\"325\":4}}],[\"num3\",{\"1\":{\"325\":4,\"331\":3}}],[\"num2\",{\"1\":{\"325\":4,\"331\":6,\"595\":2}}],[\"num1被正确的转换为了int32类型\",{\"1\":{\"595\":1}}],[\"num1\",{\"1\":{\"325\":3,\"331\":6,\"595\":2}}],[\"num\",{\"1\":{\"324\":2,\"325\":4,\"350\":27,\"354\":3,\"370\":2,\"391\":4,\"402\":2,\"410\":3,\"439\":2,\"440\":3,\"441\":5,\"442\":3,\"490\":3,\"543\":7,\"751\":5,\"753\":4,\"1025\":3}}],[\"nullint64\",{\"1\":{\"891\":1,\"892\":2,\"893\":4}}],[\"nulltime\",{\"1\":{\"856\":2,\"858\":4}}],[\"null泛型类型\",{\"1\":{\"115\":1}}],[\"null\",{\"1\":{\"34\":1,\"115\":3,\"233\":7,\"860\":3,\"862\":4,\"895\":3,\"897\":6}}],[\"n标志就可以知晓其将要执行的指令\",{\"1\":{\"17\":1}}],[\"n参数打印将要执行的命令\",{\"1\":{\"15\":1}}],[\"n参数打印出其所有支持的命令参数\",{\"1\":{\"14\":1}}],[\"nmspinning\",{\"1\":{\"1153\":1}}],[\"nm\",{\"1\":{\"14\":2}}],[\"ntfs\",{\"1\":{\"915\":2}}],[\"nt\",{\"1\":{\"8\":1,\"10\":1}}],[\"n\",{\"0\":{\"669\":1},\"1\":{\"8\":1,\"9\":3,\"14\":3,\"15\":5,\"17\":1,\"38\":2,\"40\":2,\"93\":1,\"107\":1,\"108\":6,\"114\":1,\"115\":3,\"120\":1,\"158\":3,\"159\":3,\"186\":1,\"224\":1,\"225\":2,\"305\":1,\"306\":6,\"338\":1,\"341\":26,\"343\":2,\"344\":7,\"345\":1,\"355\":4,\"362\":6,\"367\":5,\"374\":1,\"380\":3,\"396\":1,\"399\":8,\"401\":3,\"417\":2,\"418\":7,\"419\":1,\"424\":2,\"449\":1,\"457\":1,\"466\":4,\"467\":2,\"470\":6,\"471\":26,\"485\":2,\"486\":6,\"519\":7,\"525\":2,\"527\":2,\"532\":1,\"534\":1,\"537\":24,\"538\":6,\"543\":2,\"547\":8,\"553\":12,\"567\":2,\"574\":6,\"575\":6,\"581\":6,\"582\":2,\"583\":4,\"585\":6,\"587\":2,\"588\":11,\"620\":4,\"628\":1,\"682\":2,\"708\":1,\"710\":2,\"715\":3,\"716\":8,\"725\":3,\"779\":1,\"812\":6,\"813\":2,\"817\":2,\"820\":3,\"956\":1,\"960\":2,\"968\":1,\"1002\":1,\"1007\":1,\"1008\":1,\"1021\":10,\"1024\":4,\"1026\":10,\"1027\":1,\"1038\":1,\"1042\":4,\"1053\":3,\"1054\":7,\"1067\":1,\"1074\":14,\"1076\":1,\"1085\":8,\"1088\":1,\"1089\":6,\"1100\":8,\"1104\":7,\"1107\":2,\"1112\":1,\"1115\":4,\"1117\":2,\"1122\":8,\"1132\":5,\"1137\":2,\"1156\":1,\"1165\":1,\"1168\":4}}],[\"nocopy\",{\"1\":{\"1176\":2}}],[\"nomorework\",{\"1\":{\"1147\":2}}],[\"nomoreptrs\",{\"1\":{\"1115\":1}}],[\"nomethod\",{\"1\":{\"990\":2}}],[\"nop\",{\"1\":{\"1066\":1,\"1067\":5}}],[\"nopqrst\",{\"1\":{\"374\":1}}],[\"noldbuckets\",{\"1\":{\"1042\":1}}],[\"nolocalimports\",{\"1\":{\"14\":1}}],[\"normal\",{\"1\":{\"1120\":1}}],[\"normally\",{\"1\":{\"1016\":1,\"1080\":1}}],[\"norder++\",{\"1\":{\"1067\":1}}],[\"norder\",{\"1\":{\"1067\":5}}],[\"nor\",{\"1\":{\"1054\":1}}],[\"noroute\",{\"1\":{\"989\":2,\"990\":1}}],[\"norace指令表示一个函数的内存访问不再需要竞态分析\",{\"1\":{\"49\":1}}],[\"norace\",{\"0\":{\"49\":1},\"1\":{\"49\":1}}],[\"noscan\",{\"1\":{\"1114\":2,\"1124\":1,\"1125\":1,\"1126\":4}}],[\"nosql\",{\"1\":{\"239\":1}}],[\"nosplit|noframe\",{\"1\":{\"1107\":1}}],[\"nosplit|noframe|topframe\",{\"1\":{\"1089\":1}}],[\"nosplit|noframe|abiinternal\",{\"1\":{\"45\":1}}],[\"nosplit\",{\"1\":{\"46\":1,\"1153\":1}}],[\"nospilitfn\",{\"1\":{\"46\":1}}],[\"nospilit指令的作用是跳过栈溢出检测\",{\"1\":{\"46\":1}}],[\"nospilit\",{\"0\":{\"46\":1},\"1\":{\"48\":1}}],[\"noverflow\",{\"1\":{\"1030\":2,\"1041\":3,\"1042\":1}}],[\"noverb\",{\"1\":{\"341\":1}}],[\"nov\",{\"1\":{\"137\":2,\"739\":1,\"965\":1}}],[\"nowait\",{\"1\":{\"881\":2}}],[\"nowfunc\",{\"1\":{\"852\":1}}],[\"now\",{\"1\":{\"66\":2,\"93\":1,\"129\":1,\"141\":1,\"469\":1,\"478\":2,\"520\":1,\"527\":1,\"547\":2,\"603\":1,\"737\":5,\"739\":5,\"743\":2,\"781\":3,\"785\":3,\"856\":1,\"996\":1,\"1061\":1,\"1089\":2,\"1104\":1,\"1107\":6,\"1112\":1,\"1120\":1,\"1132\":4,\"1138\":3,\"1140\":3}}],[\"noescape\",{\"0\":{\"47\":1},\"1\":{\"47\":2,\"719\":1,\"1079\":2,\"1089\":1}}],[\"noinline指令表示一个函数禁止内联优化\",{\"1\":{\"45\":1}}],[\"noinline\",{\"0\":{\"45\":1},\"1\":{\"45\":1}}],[\"nodep\",{\"1\":{\"1138\":2}}],[\"nodes\",{\"1\":{\"144\":1,\"559\":1}}],[\"node=agent05\",{\"1\":{\"144\":1}}],[\"node=agent04\",{\"1\":{\"144\":1}}],[\"node=agent03\",{\"1\":{\"143\":2}}],[\"node=agent02\",{\"1\":{\"143\":1}}],[\"node=agent01\",{\"1\":{\"143\":1}}],[\"node=agent\",{\"1\":{\"143\":2}}],[\"node=dev01\",{\"1\":{\"141\":1}}],[\"node\",{\"1\":{\"39\":1,\"51\":1,\"141\":4,\"143\":2,\"144\":3,\"145\":2,\"1024\":2,\"1065\":2,\"1138\":9}}],[\"nodejs\",{\"1\":{\"28\":1,\"492\":1}}],[\"none即可删除该依赖\",{\"1\":{\"503\":1}}],[\"nonemptyinterface\",{\"1\":{\"428\":3}}],[\"none\",{\"1\":{\"18\":1,\"106\":1,\"503\":1,\"1114\":2}}],[\"non\",{\"1\":{\"9\":1,\"21\":1,\"392\":1,\"553\":1,\"719\":2,\"1030\":1,\"1065\":1,\"1074\":1,\"1096\":1,\"1104\":1}}],[\"no\",{\"1\":{\"7\":1,\"10\":1,\"18\":1,\"21\":1,\"25\":1,\"34\":1,\"144\":1,\"212\":1,\"213\":1,\"214\":1,\"215\":1,\"518\":1,\"533\":1,\"540\":1,\"559\":1,\"956\":2,\"1086\":1,\"1120\":1,\"1138\":1,\"1169\":1}}],[\"nothing\",{\"1\":{\"1138\":1}}],[\"notification\",{\"1\":{\"1169\":1}}],[\"notified\",{\"1\":{\"1167\":1}}],[\"notify加一\",{\"1\":{\"1168\":1}}],[\"notifylistnotifyall\",{\"1\":{\"1169\":1}}],[\"notifylistnotifyone\",{\"1\":{\"1168\":1}}],[\"notifylistwait\",{\"1\":{\"1167\":2}}],[\"notifylistadd\",{\"1\":{\"1167\":2}}],[\"notifylist结构\",{\"1\":{\"1166\":1}}],[\"notifylist\",{\"1\":{\"1166\":2,\"1167\":3}}],[\"notify\",{\"1\":{\"1140\":1,\"1166\":4,\"1167\":3,\"1168\":5,\"1169\":3}}],[\"notifycontext\",{\"1\":{\"1063\":1}}],[\"notinheap的真正作用是为了避免内存屏障以提高运行时效率\",{\"1\":{\"1129\":1}}],[\"notinheap\",{\"0\":{\"1129\":1},\"1\":{\"1024\":1,\"1099\":1,\"1112\":1,\"1115\":1,\"1116\":1,\"1117\":1,\"1118\":1,\"1129\":2}}],[\"notlast\",{\"1\":{\"1039\":3}}],[\"notset\",{\"1\":{\"1002\":1}}],[\"notary\",{\"1\":{\"788\":1}}],[\"notbefore\",{\"1\":{\"778\":1,\"781\":1,\"785\":1}}],[\"notfound\",{\"1\":{\"168\":8,\"959\":1}}],[\"notewakeup\",{\"1\":{\"1138\":1}}],[\"notetsleepg\",{\"1\":{\"1138\":1}}],[\"noteclear\",{\"1\":{\"1093\":1,\"1138\":1}}],[\"notesleep\",{\"1\":{\"1093\":1}}],[\"notes查看\",{\"1\":{\"114\":1,\"115\":1,\"116\":1,\"117\":1,\"118\":1,\"119\":1,\"120\":1,\"121\":1,\"122\":1,\"123\":1,\"124\":1,\"125\":1,\"126\":1,\"127\":1,\"128\":1,\"129\":1,\"130\":1,\"131\":1,\"132\":1,\"133\":1,\"134\":1,\"135\":1,\"136\":1,\"137\":1}}],[\"note\",{\"1\":{\"8\":2,\"10\":2,\"22\":1,\"31\":1,\"1030\":1,\"1101\":1,\"1138\":1}}],[\"not\",{\"0\":{\"959\":1},\"1\":{\"4\":2,\"7\":2,\"12\":1,\"17\":3,\"18\":1,\"19\":7,\"21\":1,\"22\":1,\"31\":1,\"34\":1,\"37\":3,\"112\":1,\"137\":1,\"152\":1,\"158\":2,\"165\":1,\"166\":2,\"167\":5,\"168\":5,\"200\":1,\"233\":1,\"241\":1,\"329\":1,\"414\":1,\"463\":1,\"503\":1,\"513\":1,\"527\":1,\"531\":1,\"551\":2,\"553\":1,\"567\":2,\"600\":2,\"728\":2,\"778\":1,\"817\":1,\"823\":4,\"824\":1,\"862\":4,\"875\":3,\"897\":2,\"960\":1,\"989\":2,\"990\":3,\"1042\":1,\"1045\":1,\"1051\":2,\"1067\":1,\"1079\":1,\"1087\":1,\"1089\":1,\"1091\":1,\"1097\":3,\"1101\":1,\"1102\":1,\"1132\":1,\"1144\":1,\"1180\":1}}],[\"nelems\",{\"1\":{\"1114\":2,\"1117\":1,\"1125\":3}}],[\"never\",{\"1\":{\"1089\":2,\"1097\":2,\"1106\":2}}],[\"nevacuate所指向的旧桶\",{\"1\":{\"1042\":1}}],[\"nevacuate++\",{\"1\":{\"1042\":2}}],[\"nevacuate\",{\"1\":{\"1030\":1,\"1042\":6}}],[\"neither\",{\"1\":{\"1054\":1}}],[\"nefield\",{\"1\":{\"931\":1}}],[\"necessarily\",{\"1\":{\"1051\":1}}],[\"necessary\",{\"1\":{\"520\":1,\"1089\":1,\"1120\":1}}],[\"necsfield=password\",{\"1\":{\"946\":1}}],[\"necsfield\",{\"1\":{\"931\":1,\"946\":1}}],[\"negative\",{\"1\":{\"823\":1,\"1177\":2}}],[\"ne\",{\"1\":{\"728\":2,\"935\":1}}],[\"needphyspagealign\",{\"1\":{\"1120\":1}}],[\"needs\",{\"1\":{\"1114\":1}}],[\"needzero\",{\"1\":{\"1114\":1,\"1123\":1,\"1125\":2,\"1126\":2,\"1132\":1}}],[\"needasync\",{\"1\":{\"1107\":1}}],[\"needkeyupdate\",{\"1\":{\"1038\":1}}],[\"need\",{\"1\":{\"526\":3,\"1089\":1,\"1097\":1,\"1132\":1,\"1138\":1,\"1169\":1}}],[\"needed\",{\"1\":{\"21\":1,\"22\":1,\"536\":2}}],[\"nextspanforsweep\",{\"1\":{\"1147\":1}}],[\"nextsample\",{\"1\":{\"1099\":1,\"1116\":3}}],[\"nextfast\",{\"1\":{\"1137\":1}}],[\"nextfree方法来完成\",{\"1\":{\"1125\":1}}],[\"nextfree\",{\"1\":{\"1124\":1,\"1125\":2}}],[\"nextfreefast根据spanclass尝试去mcache中对应的缓存mspan获取可用的内存空间\",{\"1\":{\"1125\":1}}],[\"nextfreefast\",{\"1\":{\"1124\":1,\"1125\":2}}],[\"nextfreeindex\",{\"1\":{\"1117\":1,\"1125\":2}}],[\"nextgc\",{\"1\":{\"1128\":1}}],[\"next指向可使用的内存地址\",{\"1\":{\"1111\":1}}],[\"nextwhen\",{\"1\":{\"1098\":3}}],[\"nextpreemptm\",{\"1\":{\"1107\":2}}],[\"nextp指向新分配的\",{\"1\":{\"1087\":1}}],[\"nextp\",{\"1\":{\"1067\":3,\"1087\":1,\"1089\":2,\"1091\":1,\"1093\":2}}],[\"nextoverflow指针就是指向的第一个可用的溢出桶\",{\"1\":{\"1034\":1}}],[\"nextoverflow\",{\"1\":{\"1032\":1,\"1034\":6,\"1040\":4,\"1042\":4,\"1043\":1}}],[\"next会返回被迭代的元素\",{\"1\":{\"583\":1}}],[\"next\",{\"1\":{\"399\":3,\"583\":5,\"584\":2,\"588\":2,\"882\":1,\"995\":4,\"996\":1,\"1000\":1,\"1037\":2,\"1073\":1,\"1098\":1,\"1100\":1,\"1101\":1,\"1111\":4,\"1112\":3,\"1114\":2,\"1122\":1,\"1137\":1,\"1138\":1,\"1145\":1,\"1166\":1,\"1167\":1,\"1168\":4,\"1169\":4}}],[\"netpollwaiters\",{\"1\":{\"1104\":1}}],[\"netpollinited\",{\"1\":{\"1104\":1}}],[\"netpoll\",{\"0\":{\"1081\":1},\"1\":{\"1104\":1}}],[\"netip\",{\"1\":{\"824\":2}}],[\"netipv6zone\",{\"1\":{\"16\":1}}],[\"network\",{\"0\":{\"1185\":1},\"1\":{\"242\":2,\"561\":1,\"677\":1,\"678\":1,\"679\":1,\"680\":1}}],[\"net\",{\"0\":{\"673\":1},\"1\":{\"16\":4,\"18\":5,\"26\":1,\"38\":1,\"41\":2,\"101\":1,\"130\":1,\"145\":2,\"153\":2,\"165\":2,\"242\":1,\"503\":2,\"504\":1,\"509\":12,\"557\":5,\"610\":1,\"616\":1,\"675\":2,\"676\":2,\"677\":3,\"678\":3,\"679\":3,\"680\":2,\"681\":4,\"682\":4,\"824\":9,\"955\":1,\"956\":1,\"960\":1,\"965\":1,\"968\":1,\"969\":1,\"970\":1,\"971\":1,\"1009\":1}}],[\"netbsd\",{\"1\":{\"7\":2,\"11\":1}}],[\"new+mutexlocked\",{\"1\":{\"1154\":1}}],[\"newg\",{\"1\":{\"1095\":23,\"1100\":5}}],[\"newdefer函数就会尝试从\",{\"1\":{\"1074\":1}}],[\"newdefer\",{\"1\":{\"1074\":1}}],[\"newdata\",{\"1\":{\"829\":3}}],[\"newentry\",{\"1\":{\"1047\":1}}],[\"newer\",{\"1\":{\"7\":1}}],[\"newbit\",{\"1\":{\"1042\":8,\"1043\":1}}],[\"newb\",{\"1\":{\"1038\":3}}],[\"newbuckets\",{\"1\":{\"1042\":2,\"1043\":1}}],[\"newbufferstring\",{\"1\":{\"207\":1,\"209\":1,\"212\":1,\"214\":1,\"216\":3}}],[\"newbuilder\",{\"1\":{\"175\":2}}],[\"newosproc的实现会根据操作系统的不同而不同\",{\"1\":{\"1091\":1}}],[\"newosproc\",{\"1\":{\"1091\":1}}],[\"newosproc函数来完成真正的系统线程的创建\",{\"1\":{\"1091\":1}}],[\"newoverflow\",{\"1\":{\"1038\":1,\"1042\":1}}],[\"newobject\",{\"1\":{\"1038\":3}}],[\"newoutgoingcontext\",{\"1\":{\"163\":3}}],[\"newlenmem\",{\"1\":{\"1025\":4}}],[\"newlen\",{\"1\":{\"1024\":7,\"1025\":13}}],[\"newline\",{\"1\":{\"17\":1,\"37\":1}}],[\"newuser\",{\"1\":{\"977\":3}}],[\"new和\",{\"1\":{\"956\":1}}],[\"newjsonencoder\",{\"1\":{\"840\":1}}],[\"newarray\",{\"1\":{\"1038\":1}}],[\"newapp\",{\"1\":{\"824\":3}}],[\"newat\",{\"1\":{\"449\":1}}],[\"newhandler\",{\"1\":{\"1016\":2}}],[\"newhelper\",{\"1\":{\"829\":1}}],[\"newheap\",{\"1\":{\"578\":1}}],[\"newhttpserver\",{\"1\":{\"824\":3}}],[\"newnumericdate\",{\"1\":{\"780\":1,\"781\":3,\"785\":3}}],[\"newname\",{\"1\":{\"250\":1,\"863\":2}}],[\"newwork\",{\"1\":{\"1104\":1}}],[\"newwithclaims\",{\"1\":{\"779\":1,\"780\":1,\"781\":1,\"785\":1}}],[\"newwriter\",{\"1\":{\"340\":2}}],[\"newreflectedencoder\",{\"1\":{\"839\":1}}],[\"newreplacer\",{\"1\":{\"720\":2}}],[\"newrequest\",{\"1\":{\"641\":1,\"642\":1}}],[\"newreader\",{\"1\":{\"345\":1,\"639\":1,\"721\":2}}],[\"newm会先调用runtime\",{\"1\":{\"1091\":1}}],[\"newm1调用runtime\",{\"1\":{\"1091\":1}}],[\"newm1\",{\"1\":{\"1091\":2}}],[\"newm完成的\",{\"1\":{\"1091\":1}}],[\"newm\",{\"1\":{\"1082\":1,\"1091\":1}}],[\"newmysqlclient\",{\"1\":{\"824\":2}}],[\"newmyerror\",{\"1\":{\"603\":2}}],[\"newmessageserviceclient\",{\"1\":{\"158\":1}}],[\"new执行耗时\",{\"1\":{\"526\":1}}],[\"newvalue0a\",{\"1\":{\"1074\":1}}],[\"newvalue1\",{\"1\":{\"1021\":1}}],[\"newval\",{\"1\":{\"489\":1}}],[\"newpc\",{\"1\":{\"1107\":2}}],[\"newproc1来完成实际的创建\",{\"1\":{\"1095\":1}}],[\"newproc1\",{\"1\":{\"1095\":1}}],[\"newproc函数的调用\",{\"1\":{\"1095\":1}}],[\"newproc函数创建一个新的协程来启动\",{\"1\":{\"1089\":1}}],[\"newproc\",{\"1\":{\"1089\":2,\"1095\":1}}],[\"newproduction\",{\"1\":{\"838\":2}}],[\"newprinter\",{\"1\":{\"485\":2}}],[\"newpath\",{\"1\":{\"420\":1}}],[\"newperson\",{\"1\":{\"395\":2,\"405\":1,\"406\":3,\"897\":3}}],[\"newpersonclient\",{\"1\":{\"166\":1,\"167\":1}}],[\"newfromfloat\",{\"1\":{\"847\":2}}],[\"newfromint\",{\"1\":{\"847\":1}}],[\"newfromstring\",{\"1\":{\"847\":3}}],[\"newfoobar\",{\"1\":{\"830\":2}}],[\"newfile\",{\"1\":{\"335\":3}}],[\"newf\",{\"1\":{\"168\":3}}],[\"new来创建一个\",{\"1\":{\"168\":1}}],[\"new函数是由使用者传入的\",{\"1\":{\"485\":1}}],[\"new函数只有一个参数那就是类型\",{\"1\":{\"391\":1}}],[\"new函数\",{\"1\":{\"161\":1,\"455\":1}}],[\"new函数来创建\",{\"1\":{\"160\":1}}],[\"newticker\",{\"1\":{\"742\":3}}],[\"newtimer\",{\"1\":{\"158\":1,\"476\":1,\"741\":3}}],[\"newtask\",{\"1\":{\"158\":1,\"159\":3}}],[\"newsize\",{\"1\":{\"1101\":4,\"1102\":3}}],[\"newsqueak\",{\"1\":{\"1084\":1}}],[\"newstack函数上半部分都是在进行抢占检测\",{\"1\":{\"1106\":1}}],[\"newstack来完成真正的扩容操作\",{\"1\":{\"1101\":1}}],[\"newstack\",{\"1\":{\"1097\":2,\"1101\":1}}],[\"newstate\",{\"1\":{\"805\":2}}],[\"newstore\",{\"1\":{\"1003\":1}}],[\"newset\",{\"1\":{\"823\":1,\"824\":3,\"826\":1,\"828\":1}}],[\"newservemux\",{\"1\":{\"557\":1}}],[\"newserver\",{\"1\":{\"145\":1,\"153\":1,\"165\":1,\"170\":1}}],[\"newscanner\",{\"1\":{\"346\":1,\"583\":1,\"584\":1}}],[\"newsayhelloclient\",{\"1\":{\"145\":1,\"154\":1,\"174\":1,\"175\":1}}],[\"newcore\",{\"1\":{\"843\":1}}],[\"newconsoleencoder\",{\"1\":{\"840\":2}}],[\"newconsulresolver\",{\"1\":{\"145\":2}}],[\"newconsulresolverbuilder\",{\"1\":{\"145\":2}}],[\"newcontext\",{\"1\":{\"833\":1,\"834\":1,\"835\":1}}],[\"newcond\",{\"1\":{\"482\":2,\"1165\":2}}],[\"newcharptr\",{\"1\":{\"533\":2}}],[\"newchat\",{\"1\":{\"159\":3}}],[\"newchatserviceclient\",{\"1\":{\"159\":1}}],[\"newcancelctx\",{\"1\":{\"477\":1}}],[\"newcap\",{\"1\":{\"365\":2,\"1025\":17}}],[\"newcredentials\",{\"1\":{\"145\":2,\"154\":1,\"158\":1,\"159\":1,\"166\":1,\"167\":1,\"170\":2,\"174\":1,\"175\":1}}],[\"newclient来建立一个新的连接\",{\"1\":{\"205\":1}}],[\"newclient\",{\"1\":{\"145\":3,\"205\":2,\"207\":1,\"208\":1,\"209\":1,\"210\":1,\"212\":1,\"213\":1,\"214\":1,\"215\":1,\"216\":3,\"241\":1,\"243\":1}}],[\"new\",{\"0\":{\"393\":1},\"1\":{\"5\":1,\"22\":1,\"23\":1,\"34\":1,\"156\":1,\"160\":2,\"161\":3,\"168\":2,\"360\":1,\"364\":1,\"391\":6,\"393\":4,\"397\":1,\"433\":1,\"436\":3,\"437\":3,\"440\":1,\"442\":1,\"448\":2,\"450\":1,\"451\":2,\"452\":1,\"454\":3,\"455\":2,\"456\":1,\"457\":1,\"458\":1,\"459\":1,\"475\":2,\"485\":2,\"490\":1,\"495\":1,\"499\":1,\"513\":2,\"526\":5,\"527\":13,\"533\":1,\"571\":1,\"598\":1,\"600\":2,\"601\":1,\"602\":1,\"603\":2,\"649\":1,\"715\":4,\"723\":1,\"725\":1,\"733\":1,\"734\":3,\"799\":2,\"813\":1,\"823\":1,\"826\":3,\"827\":1,\"828\":2,\"843\":1,\"851\":1,\"862\":2,\"941\":1,\"942\":1,\"943\":1,\"944\":2,\"945\":2,\"946\":1,\"948\":1,\"949\":1,\"950\":1,\"951\":1,\"952\":6,\"953\":3,\"955\":1,\"956\":1,\"960\":1,\"992\":2,\"1007\":1,\"1016\":1,\"1019\":2,\"1024\":1,\"1034\":2,\"1042\":1,\"1047\":1,\"1058\":1,\"1074\":2,\"1079\":2,\"1089\":3,\"1091\":1,\"1098\":1,\"1100\":1,\"1101\":11,\"1112\":1,\"1116\":1,\"1122\":1,\"1124\":1,\"1138\":2,\"1153\":6,\"1154\":6,\"1169\":1}}],[\"nvd8gbk33xpdqcazvvtd6ofjp+3dxkxuz7+u7kavn6s=\",{\"1\":{\"6\":1}}],[\"observing\",{\"1\":{\"1166\":1}}],[\"observe\",{\"1\":{\"1097\":1}}],[\"observed\",{\"1\":{\"1088\":1}}],[\"objindex\",{\"1\":{\"1137\":2}}],[\"obj是内容\",{\"1\":{\"981\":1}}],[\"objb\",{\"1\":{\"975\":3}}],[\"obja\",{\"1\":{\"975\":2}}],[\"obj即object\",{\"1\":{\"760\":1,\"761\":1}}],[\"obj\",{\"1\":{\"759\":4,\"760\":3,\"761\":1,\"762\":4,\"764\":4,\"765\":4,\"766\":4,\"767\":4,\"971\":4,\"981\":11,\"1107\":1,\"1137\":7}}],[\"objx\",{\"1\":{\"28\":1}}],[\"objdump\",{\"1\":{\"14\":2}}],[\"objective\",{\"1\":{\"1130\":1}}],[\"objectid\",{\"1\":{\"226\":5}}],[\"objects+tailwaste\",{\"1\":{\"1114\":1}}],[\"objects\",{\"1\":{\"495\":4,\"499\":4,\"560\":2,\"1114\":1,\"1138\":1}}],[\"object\",{\"1\":{\"7\":1,\"21\":1,\"1013\":6,\"1114\":1,\"1125\":1,\"1144\":1,\"1150\":1}}],[\"odefer\",{\"1\":{\"1074\":2}}],[\"ovf\",{\"1\":{\"1038\":3}}],[\"overloadfactor函数\",{\"1\":{\"1041\":1}}],[\"overloadfactor\",{\"1\":{\"1032\":2,\"1034\":1,\"1041\":1,\"1043\":1}}],[\"over\",{\"1\":{\"580\":1,\"581\":1,\"589\":1,\"1078\":1,\"1089\":1}}],[\"overslept\",{\"1\":{\"520\":1}}],[\"overflow\",{\"1\":{\"24\":1,\"1020\":4,\"1024\":1,\"1025\":3,\"1030\":3,\"1032\":1,\"1034\":2,\"1036\":1,\"1037\":6,\"1038\":1,\"1039\":5,\"1040\":1,\"1041\":1,\"1042\":4,\"1058\":1,\"1098\":1}}],[\"overview\",{\"1\":{\"22\":1,\"37\":1}}],[\"overwritten\",{\"1\":{\"1144\":1}}],[\"overwriting\",{\"1\":{\"17\":1}}],[\"overwrite\",{\"1\":{\"17\":1}}],[\"overrides\",{\"1\":{\"7\":1}}],[\"override\",{\"1\":{\"7\":1,\"763\":2,\"953\":1}}],[\"oappend\",{\"1\":{\"1024\":1}}],[\"oauth2defaultclientid\",{\"1\":{\"1016\":1}}],[\"oauth2\",{\"1\":{\"172\":4,\"1015\":4,\"1016\":1}}],[\"oindex\",{\"1\":{\"1021\":1}}],[\"oimtempty\",{\"1\":{\"936\":1}}],[\"o参数可以指定文档描述文件的输出路径\",{\"1\":{\"1017\":1}}],[\"oeis\",{\"1\":{\"653\":9}}],[\"olen\",{\"1\":{\"1021\":1}}],[\"olleh\",{\"1\":{\"527\":1}}],[\"old|mutexwoken\",{\"1\":{\"1153\":1}}],[\"old|mutexlocked\",{\"1\":{\"1152\":1}}],[\"old>>mutexwaitershift\",{\"1\":{\"1153\":2,\"1154\":1}}],[\"old=0\",{\"1\":{\"1153\":1}}],[\"old可能不等于0\",{\"1\":{\"1152\":1}}],[\"oldsize\",{\"1\":{\"1101\":2,\"1102\":2}}],[\"oldb\",{\"1\":{\"1042\":3}}],[\"oldbucket+newbit\",{\"1\":{\"1042\":1,\"1043\":1}}],[\"oldbucket\",{\"1\":{\"1042\":3}}],[\"oldbucketmask\",{\"1\":{\"1042\":2}}],[\"oldbuckets\",{\"1\":{\"1030\":2,\"1037\":1,\"1042\":9,\"1043\":1}}],[\"oldoverflow\",{\"1\":{\"1032\":1,\"1037\":3,\"1042\":4}}],[\"olditerator\",{\"1\":{\"1030\":1,\"1042\":3}}],[\"oldlen\",{\"1\":{\"1025\":3}}],[\"oldp指向在执行系统调用前的\",{\"1\":{\"1087\":1}}],[\"oldp\",{\"1\":{\"1087\":1,\"1097\":13}}],[\"oldptr\",{\"1\":{\"1025\":3}}],[\"oldpath\",{\"1\":{\"420\":1}}],[\"oldname\",{\"1\":{\"863\":3}}],[\"oldnew\",{\"1\":{\"720\":1}}],[\"oldcap+3\",{\"1\":{\"365\":1}}],[\"oldcap+\",{\"1\":{\"365\":1}}],[\"oldcap\",{\"1\":{\"365\":1,\"1025\":4}}],[\"old\",{\"1\":{\"21\":1,\"34\":1,\"489\":1,\"490\":1,\"526\":5,\"715\":5,\"1089\":3,\"1101\":8,\"1138\":1,\"1152\":3,\"1153\":14,\"1154\":4}}],[\"ombdisnwtfiuyjnf9xnpbw\",{\"1\":{\"205\":1}}],[\"omit\",{\"1\":{\"874\":2,\"1067\":1}}],[\"omitkey\",{\"1\":{\"840\":1}}],[\"omitempty\",{\"1\":{\"152\":2,\"167\":3,\"778\":7}}],[\"omitted\",{\"1\":{\"21\":1}}],[\"our\",{\"1\":{\"1067\":1}}],[\"ougo\",{\"1\":{\"99\":1}}],[\"outlined\",{\"1\":{\"1153\":1}}],[\"out的参数就是指定的生成路径\",{\"1\":{\"201\":1}}],[\"out参数\",{\"1\":{\"201\":2}}],[\"outer\",{\"1\":{\"191\":1,\"356\":2}}],[\"outofrange\",{\"1\":{\"168\":1}}],[\"out=paths=source\",{\"1\":{\"201\":2}}],[\"out=\",{\"1\":{\"152\":2,\"201\":9}}],[\"outgoingcontext\",{\"1\":{\"163\":5}}],[\"outgoing\",{\"1\":{\"141\":2}}],[\"outdir\",{\"1\":{\"28\":2,\"36\":1}}],[\"out\",{\"1\":{\"19\":1,\"156\":2,\"162\":1,\"357\":2,\"445\":1,\"451\":1,\"519\":6,\"556\":2,\"561\":3,\"621\":2,\"622\":2,\"649\":1,\"725\":8,\"727\":2,\"733\":2,\"833\":1,\"834\":1,\"839\":1,\"1025\":2,\"1058\":1,\"1087\":1,\"1100\":1,\"1101\":1,\"1116\":1,\"1118\":1}}],[\"outside\",{\"1\":{\"18\":1,\"21\":1,\"1166\":1}}],[\"outputpaths\",{\"1\":{\"839\":3,\"840\":1}}],[\"outputs\",{\"1\":{\"559\":2}}],[\"outputdir\",{\"1\":{\"519\":1}}],[\"output\",{\"1\":{\"8\":1,\"17\":5,\"518\":3,\"520\":7,\"559\":2,\"840\":5,\"841\":1,\"1016\":1}}],[\"ookie\",{\"1\":{\"1002\":1}}],[\"oop\",{\"1\":{\"88\":1,\"95\":2,\"294\":1,\"403\":2}}],[\"oogle\",{\"1\":{\"78\":1}}],[\"ot可以指定输出文件类型\",{\"1\":{\"1017\":1}}],[\"ot\",{\"1\":{\"527\":1,\"1017\":1}}],[\"otiai10\",{\"1\":{\"85\":1}}],[\"othersys\",{\"1\":{\"1128\":1}}],[\"otherwise\",{\"1\":{\"1097\":1}}],[\"other\",{\"1\":{\"4\":1,\"31\":1,\"479\":1,\"792\":1,\"1097\":1,\"1104\":1,\"1119\":5}}],[\"occam\",{\"1\":{\"1084\":1}}],[\"occurs\",{\"1\":{\"141\":1}}],[\"occurred\",{\"1\":{\"17\":1}}],[\"ocap\",{\"1\":{\"1021\":2}}],[\"octet\",{\"1\":{\"986\":1}}],[\"ocr\",{\"0\":{\"85\":1},\"1\":{\"85\":1}}],[\"oci\",{\"1\":{\"62\":2}}],[\"ozzo\",{\"1\":{\"57\":3}}],[\"o的文件\",{\"1\":{\"15\":1}}],[\"opstaticlecall\",{\"1\":{\"1074\":1}}],[\"opslicecap\",{\"1\":{\"1021\":1}}],[\"opslicelen\",{\"1\":{\"1021\":1}}],[\"op表示每一次循环内存分配的次数\",{\"1\":{\"525\":1}}],[\"op表示每一次循环所分配内存的字节大小\",{\"1\":{\"525\":1}}],[\"op代表了每一次循环所消耗的时间\",{\"1\":{\"525\":1}}],[\"opqrst\",{\"1\":{\"374\":1}}],[\"opaque\",{\"1\":{\"145\":1,\"175\":1}}],[\"opt\",{\"1\":{\"152\":2,\"156\":2,\"167\":2,\"812\":1}}],[\"opts\",{\"1\":{\"145\":1,\"166\":11,\"174\":1,\"175\":1,\"901\":1,\"902\":1,\"915\":3}}],[\"optimizer\",{\"1\":{\"849\":1}}],[\"optimize\",{\"1\":{\"198\":1}}],[\"optimization\",{\"1\":{\"116\":2,\"117\":1,\"1042\":1,\"1065\":3}}],[\"optimizations\",{\"1\":{\"9\":1}}],[\"optionfunc\",{\"1\":{\"839\":3}}],[\"option的实现\",{\"1\":{\"839\":1}}],[\"option是关于一些配置的开关及应用\",{\"1\":{\"839\":1}}],[\"optional\",{\"1\":{\"187\":1,\"202\":2,\"1030\":1}}],[\"optionally\",{\"1\":{\"33\":1}}],[\"option\",{\"0\":{\"198\":1},\"1\":{\"151\":1,\"158\":1,\"159\":1,\"163\":1,\"164\":1,\"165\":1,\"166\":1,\"190\":1,\"198\":4,\"202\":4,\"406\":2,\"629\":1,\"812\":2,\"813\":1,\"839\":2,\"843\":2,\"863\":1}}],[\"options\",{\"0\":{\"958\":1},\"1\":{\"8\":1,\"9\":1,\"10\":1,\"145\":1,\"174\":1,\"202\":1,\"221\":2,\"225\":2,\"241\":1,\"242\":2,\"243\":1,\"405\":1,\"406\":3,\"559\":1,\"843\":8,\"864\":1,\"881\":1,\"958\":1,\"990\":1,\"1000\":2}}],[\"op\",{\"1\":{\"10\":1,\"525\":36,\"526\":188,\"547\":4,\"588\":9,\"725\":2,\"1021\":4,\"1065\":2,\"1074\":1}}],[\"operator\",{\"1\":{\"299\":1}}],[\"operators\",{\"1\":{\"37\":1}}],[\"operation\",{\"1\":{\"332\":1,\"392\":1,\"469\":1,\"591\":1,\"593\":1}}],[\"operations\",{\"1\":{\"4\":2,\"22\":1,\"31\":1}}],[\"operating\",{\"1\":{\"14\":1}}],[\"operand\",{\"1\":{\"17\":1}}],[\"opendeferrecord\",{\"1\":{\"1074\":1}}],[\"opendefer\",{\"1\":{\"1073\":1}}],[\"opening\",{\"1\":{\"561\":1}}],[\"opentelemetry\",{\"1\":{\"510\":1}}],[\"opencodeddeferdisallowed\",{\"1\":{\"1076\":1}}],[\"opencensus\",{\"1\":{\"510\":1}}],[\"opencv4+\",{\"1\":{\"76\":1}}],[\"openfile\",{\"1\":{\"416\":3,\"417\":2,\"418\":3,\"419\":4,\"426\":1}}],[\"openfga\",{\"1\":{\"78\":3}}],[\"open函数返回值一个文件指针和一个错误\",{\"1\":{\"416\":1}}],[\"open函数有两个返回值\",{\"1\":{\"330\":1}}],[\"open函数\",{\"1\":{\"232\":1}}],[\"open\",{\"1\":{\"41\":1,\"88\":1,\"192\":3,\"232\":2,\"234\":2,\"330\":2,\"416\":5,\"424\":1,\"426\":1,\"598\":2,\"611\":1,\"851\":3,\"852\":2,\"862\":2,\"1072\":1,\"1073\":1,\"1076\":2}}],[\"openbsd\",{\"1\":{\"7\":1,\"904\":1}}],[\"openapi\",{\"1\":{\"6\":1,\"1016\":2,\"1017\":1}}],[\"opensource\",{\"1\":{\"74\":1}}],[\"opens\",{\"1\":{\"5\":1}}],[\"o标志所指示的文件输出路径\",{\"1\":{\"8\":1}}],[\"o\",{\"1\":{\"8\":6,\"10\":1,\"11\":3,\"14\":1,\"28\":4,\"36\":1,\"38\":1,\"140\":2,\"341\":4,\"380\":4,\"416\":19,\"417\":4,\"418\":15,\"419\":8,\"426\":3,\"484\":11,\"519\":1,\"530\":1,\"532\":1,\"545\":4,\"546\":3,\"559\":1,\"578\":1,\"600\":1,\"715\":3,\"1017\":1,\"1042\":3,\"1052\":2,\"1054\":1,\"1067\":2,\"1089\":1,\"1173\":8}}],[\"okay\",{\"1\":{\"1097\":1}}],[\"ok为false\",{\"1\":{\"450\":1}}],[\"ok\",{\"1\":{\"7\":9,\"19\":2,\"25\":1,\"38\":4,\"109\":1,\"137\":1,\"158\":4,\"159\":4,\"164\":2,\"168\":11,\"205\":2,\"207\":1,\"208\":1,\"209\":1,\"210\":1,\"213\":1,\"214\":1,\"215\":1,\"443\":2,\"448\":2,\"450\":3,\"465\":1,\"468\":4,\"470\":2,\"471\":24,\"474\":2,\"475\":1,\"486\":1,\"497\":1,\"513\":3,\"518\":5,\"520\":1,\"521\":1,\"522\":1,\"523\":3,\"525\":1,\"526\":2,\"527\":3,\"573\":1,\"583\":4,\"584\":2,\"588\":3,\"596\":2,\"603\":2,\"782\":4,\"783\":2,\"784\":2,\"785\":2,\"791\":2,\"813\":2,\"950\":2,\"965\":1,\"1046\":7,\"1047\":8,\"1048\":7,\"1049\":2,\"1060\":1,\"1066\":2,\"1067\":1,\"1071\":2,\"1089\":4,\"1097\":3,\"1102\":1,\"1107\":2,\"1117\":4,\"1120\":3,\"1138\":1,\"1147\":2,\"1148\":2}}],[\"osinit和runtime\",{\"1\":{\"1089\":1}}],[\"osinit\",{\"1\":{\"1089\":2}}],[\"os包下提供了以下常量以供使用\",{\"1\":{\"416\":1}}],[\"os库\",{\"1\":{\"415\":1}}],[\"oschwald\",{\"1\":{\"68\":1}}],[\"osstackalloc\",{\"1\":{\"1100\":1}}],[\"osstack\",{\"1\":{\"1089\":2,\"1092\":2}}],[\"oss\",{\"1\":{\"33\":1}}],[\"os\",{\"1\":{\"7\":1,\"13\":2,\"20\":1,\"37\":1,\"141\":1,\"330\":1,\"335\":4,\"337\":2,\"340\":2,\"343\":2,\"345\":1,\"346\":1,\"396\":1,\"397\":1,\"415\":1,\"416\":7,\"417\":8,\"418\":7,\"419\":11,\"420\":1,\"421\":2,\"422\":2,\"424\":7,\"425\":1,\"426\":6,\"496\":3,\"556\":6,\"557\":1,\"561\":1,\"584\":1,\"598\":2,\"608\":1,\"616\":4,\"623\":1,\"723\":2,\"725\":4,\"727\":1,\"733\":1,\"734\":1,\"736\":3,\"817\":2,\"827\":1,\"841\":1,\"907\":1,\"1007\":3,\"1063\":4,\"1072\":1}}],[\"owns\",{\"1\":{\"1091\":1}}],[\"ownership\",{\"1\":{\"1091\":1}}],[\"owner\",{\"1\":{\"899\":3}}],[\"owner这种语法糖获取元素的属性\",{\"1\":{\"758\":1}}],[\"own\",{\"1\":{\"3\":1}}],[\"off+size\",{\"1\":{\"1124\":1}}],[\"offi\",{\"1\":{\"1037\":7}}],[\"official\",{\"1\":{\"219\":2}}],[\"office\",{\"1\":{\"81\":2}}],[\"offsetof\",{\"0\":{\"749\":1},\"1\":{\"749\":3,\"751\":2,\"1030\":1}}],[\"offset\",{\"1\":{\"209\":14,\"280\":1,\"417\":1,\"418\":4,\"419\":2,\"448\":2,\"751\":1,\"877\":4,\"1019\":2,\"1037\":6,\"1073\":1,\"1078\":1,\"1086\":5}}],[\"off\",{\"1\":{\"7\":4,\"417\":1,\"418\":1,\"519\":1,\"1120\":2,\"1124\":3}}],[\"of\",{\"1\":{\"3\":4,\"4\":3,\"7\":2,\"9\":1,\"10\":2,\"14\":1,\"16\":7,\"21\":7,\"22\":3,\"31\":1,\"37\":2,\"38\":1,\"113\":1,\"156\":1,\"167\":3,\"207\":4,\"208\":2,\"233\":1,\"375\":1,\"414\":1,\"462\":2,\"469\":1,\"491\":2,\"550\":1,\"558\":1,\"559\":2,\"563\":6,\"582\":1,\"636\":1,\"719\":2,\"776\":1,\"830\":1,\"923\":1,\"1024\":1,\"1025\":2,\"1028\":1,\"1030\":8,\"1033\":1,\"1037\":4,\"1042\":1,\"1051\":3,\"1057\":4,\"1058\":1,\"1061\":2,\"1070\":1,\"1073\":4,\"1078\":1,\"1080\":1,\"1086\":2,\"1087\":1,\"1088\":4,\"1095\":2,\"1097\":1,\"1099\":1,\"1100\":2,\"1101\":2,\"1102\":1,\"1111\":2,\"1112\":3,\"1114\":6,\"1116\":2,\"1118\":2,\"1130\":1,\"1139\":1,\"1154\":1,\"1155\":2,\"1159\":2,\"1162\":2,\"1166\":2}}],[\"order++\",{\"1\":{\"1100\":1}}],[\"orders\",{\"1\":{\"1067\":1}}],[\"order1\",{\"1\":{\"1067\":3}}],[\"order0\",{\"1\":{\"1067\":3}}],[\"order\",{\"0\":{\"876\":1},\"1\":{\"857\":1,\"863\":2,\"874\":1,\"875\":3,\"876\":6,\"896\":2,\"897\":2,\"898\":3,\"1086\":1,\"1100\":9,\"1101\":1}}],[\"ori\",{\"1\":{\"704\":4,\"1019\":2}}],[\"origin不能为\",{\"1\":{\"1000\":1}}],[\"origin\",{\"1\":{\"21\":1,\"419\":6,\"499\":2,\"613\":1,\"958\":1,\"1000\":7,\"1118\":1}}],[\"originalerr\",{\"1\":{\"603\":4}}],[\"original\",{\"1\":{\"17\":1,\"603\":3}}],[\"orig\",{\"1\":{\"17\":4}}],[\"ora\",{\"1\":{\"62\":2}}],[\"oracle\",{\"1\":{\"62\":3,\"231\":1,\"622\":2,\"851\":2}}],[\"orcaman\",{\"1\":{\"58\":1}}],[\"orm\",{\"0\":{\"52\":1},\"1\":{\"52\":8,\"230\":3,\"848\":5,\"849\":3,\"902\":1}}],[\"org\",{\"1\":{\"6\":1,\"7\":17,\"16\":5,\"18\":8,\"26\":1,\"37\":2,\"62\":3,\"87\":1,\"105\":1,\"106\":1,\"107\":1,\"108\":1,\"109\":1,\"110\":1,\"111\":1,\"112\":1,\"130\":1,\"145\":6,\"148\":3,\"153\":1,\"154\":2,\"158\":7,\"159\":4,\"164\":1,\"165\":1,\"166\":3,\"168\":1,\"175\":4,\"200\":2,\"220\":1,\"221\":3,\"287\":1,\"501\":1,\"503\":12,\"504\":2,\"509\":16,\"510\":6,\"526\":1,\"639\":1,\"641\":1,\"642\":1,\"646\":2,\"653\":9,\"778\":7,\"836\":1,\"837\":1}}],[\"or\",{\"1\":{\"3\":3,\"7\":4,\"12\":1,\"16\":2,\"18\":3,\"21\":3,\"22\":2,\"31\":1,\"34\":1,\"112\":1,\"167\":1,\"201\":1,\"504\":1,\"533\":1,\"540\":1,\"578\":2,\"651\":1,\"728\":2,\"751\":1,\"817\":1,\"875\":7,\"1016\":1,\"1024\":1,\"1073\":1,\"1077\":1,\"1089\":1,\"1101\":2,\"1114\":3,\"1120\":1,\"1121\":1,\"1166\":1}}],[\"onstack\",{\"1\":{\"1076\":1}}],[\"onsi\",{\"1\":{\"55\":1}}],[\"ondelete\",{\"1\":{\"860\":3,\"862\":1}}],[\"onupdate\",{\"1\":{\"860\":3,\"862\":1}}],[\"onconflict\",{\"1\":{\"867\":3}}],[\"onconfigchange\",{\"1\":{\"793\":1}}],[\"onconnect\",{\"1\":{\"242\":1}}],[\"once的实现相当简单\",{\"1\":{\"484\":1}}],[\"once保证了在并发条件下指定操作只会执行一次\",{\"1\":{\"484\":1}}],[\"once译为一次\",{\"1\":{\"484\":1}}],[\"once要解决的问题\",{\"1\":{\"484\":1}}],[\"once\",{\"0\":{\"484\":1,\"1171\":1},\"1\":{\"484\":5,\"1016\":3,\"1171\":6,\"1172\":1,\"1173\":2,\"1174\":1}}],[\"only\",{\"1\":{\"21\":5,\"34\":1,\"49\":1,\"469\":1,\"509\":1,\"1030\":1,\"1047\":1,\"1061\":1}}],[\"oneline\",{\"1\":{\"499\":1}}],[\"oneof\",{\"0\":{\"195\":1},\"1\":{\"195\":1,\"936\":1}}],[\"one\",{\"1\":{\"3\":4,\"4\":1,\"21\":1,\"226\":4,\"585\":5,\"806\":2,\"809\":4,\"1042\":1,\"1065\":2,\"1088\":1,\"1101\":1,\"1111\":1,\"1120\":1}}],[\"on\",{\"1\":{\"3\":2,\"7\":3,\"21\":2,\"22\":1,\"31\":1,\"159\":1,\"503\":1,\"519\":1,\"561\":1,\"824\":2,\"895\":4,\"896\":1,\"897\":4,\"904\":3,\"942\":1,\"943\":2,\"944\":4,\"945\":2,\"946\":2,\"948\":2,\"949\":1,\"950\":1,\"951\":2,\"977\":1,\"993\":1,\"1024\":1,\"1059\":2,\"1067\":2,\"1073\":1,\"1074\":1,\"1086\":1,\"1087\":1,\"1088\":3,\"1089\":1,\"1107\":1,\"1140\":1}}],[\"ico\",{\"1\":{\"999\":2}}],[\"iat\",{\"1\":{\"778\":1}}],[\"ietf\",{\"1\":{\"778\":7}}],[\"iee754\",{\"1\":{\"384\":1}}],[\"ieee\",{\"1\":{\"317\":3}}],[\"illegal\",{\"1\":{\"719\":2}}],[\"illumos\",{\"1\":{\"7\":1,\"904\":1}}],[\"iş\",{\"1\":{\"717\":2}}],[\"i̇ş\",{\"1\":{\"717\":2}}],[\"i<<1\",{\"1\":{\"578\":2}}],[\"i>>1\",{\"1\":{\"578\":2}}],[\"i指的是搜索头文件的相对路径\",{\"1\":{\"545\":1}}],[\"i7\",{\"1\":{\"525\":1,\"526\":3,\"588\":1,\"909\":1}}],[\"i736aousyt75hyzlojw9eryxcy6ean6h4bzxu064p\",{\"1\":{\"510\":1}}],[\"i7elfevbr3yfpicc8+mwvrjk+3vjbcszoxm3jva+jd8=\",{\"1\":{\"6\":1}}],[\"i就是接收者\",{\"1\":{\"412\":1}}],[\"i=2\",{\"1\":{\"367\":1}}],[\"i=3\",{\"1\":{\"366\":1}}],[\"i=0\",{\"1\":{\"312\":1}}],[\"i+n\",{\"1\":{\"367\":1}}],[\"i+1\",{\"1\":{\"354\":1,\"366\":2,\"527\":3,\"753\":2,\"755\":1,\"1019\":1,\"1039\":1,\"1042\":1}}],[\"i++\",{\"1\":{\"115\":1,\"137\":1,\"312\":2,\"354\":2,\"356\":2,\"357\":2,\"369\":1,\"370\":1,\"380\":3,\"388\":1,\"389\":3,\"399\":2,\"418\":2,\"448\":1,\"451\":4,\"456\":1,\"462\":4,\"467\":2,\"470\":4,\"471\":2,\"472\":1,\"479\":1,\"480\":1,\"481\":2,\"482\":2,\"484\":1,\"485\":1,\"486\":4,\"525\":4,\"539\":2,\"547\":1,\"555\":1,\"559\":1,\"560\":2,\"581\":2,\"587\":1,\"742\":1,\"834\":1,\"1028\":1,\"1036\":1,\"1037\":1,\"1038\":1,\"1039\":1,\"1040\":2,\"1042\":1,\"1052\":2,\"1089\":2,\"1104\":1,\"1107\":2,\"1120\":1,\"1159\":2,\"1165\":1}}],[\"i或者\",{\"1\":{\"201\":1}}],[\"ival\",{\"1\":{\"191\":2}}],[\"immediately\",{\"1\":{\"1138\":1}}],[\"immutable\",{\"1\":{\"1051\":1}}],[\"img\",{\"1\":{\"790\":1,\"968\":2}}],[\"imgur\",{\"1\":{\"788\":1}}],[\"im\",{\"0\":{\"611\":1},\"1\":{\"611\":2}}],[\"imrpot\",{\"1\":{\"193\":1}}],[\"implicit\",{\"1\":{\"1015\":1}}],[\"implementation\",{\"1\":{\"823\":1}}],[\"implements\",{\"0\":{\"436\":1},\"1\":{\"436\":3}}],[\"implement\",{\"1\":{\"414\":1,\"563\":2,\"645\":1}}],[\"implemented\",{\"1\":{\"152\":1,\"158\":2}}],[\"improt\",{\"1\":{\"122\":1}}],[\"importer\",{\"1\":{\"616\":1}}],[\"imported\",{\"1\":{\"14\":1,\"21\":1}}],[\"import是导入关键字\",{\"1\":{\"292\":1}}],[\"importmap\",{\"1\":{\"21\":1}}],[\"importcomment\",{\"1\":{\"21\":1}}],[\"importcfg\",{\"1\":{\"14\":3,\"19\":1}}],[\"importpath\",{\"1\":{\"10\":1,\"21\":2}}],[\"importstack\",{\"1\":{\"21\":1}}],[\"imports\",{\"1\":{\"9\":1,\"14\":1,\"16\":2,\"21\":3,\"108\":2}}],[\"import\",{\"0\":{\"193\":1},\"1\":{\"4\":4,\"9\":1,\"10\":1,\"12\":2,\"13\":1,\"14\":1,\"16\":2,\"17\":4,\"20\":1,\"21\":5,\"37\":1,\"41\":4,\"44\":2,\"111\":1,\"112\":1,\"145\":3,\"153\":1,\"154\":1,\"158\":4,\"159\":3,\"164\":2,\"165\":1,\"166\":1,\"168\":1,\"175\":2,\"193\":5,\"194\":1,\"197\":1,\"202\":2,\"221\":1,\"241\":1,\"292\":1,\"295\":7,\"297\":1,\"298\":1,\"332\":1,\"334\":1,\"337\":1,\"339\":1,\"372\":1,\"496\":3,\"498\":2,\"503\":1,\"513\":2,\"518\":2,\"520\":2,\"521\":4,\"522\":1,\"523\":1,\"525\":2,\"527\":1,\"530\":1,\"531\":3,\"532\":2,\"533\":2,\"534\":1,\"535\":2,\"536\":8,\"537\":1,\"538\":1,\"539\":4,\"540\":2,\"541\":2,\"542\":2,\"543\":4,\"545\":2,\"546\":2,\"547\":2,\"553\":1,\"556\":3,\"557\":3,\"587\":1,\"588\":1,\"603\":1,\"629\":1,\"631\":1,\"675\":1,\"676\":1,\"677\":1,\"678\":1,\"679\":1,\"680\":1,\"681\":2,\"682\":2,\"691\":1,\"703\":1,\"723\":1,\"736\":1,\"776\":1,\"798\":1,\"805\":2,\"817\":1,\"820\":1,\"823\":4,\"824\":3,\"833\":1,\"847\":1,\"851\":2,\"929\":1,\"942\":1,\"952\":2,\"953\":1,\"955\":1,\"956\":1,\"960\":1,\"964\":1,\"965\":1,\"968\":1,\"969\":1,\"970\":1,\"971\":1,\"1002\":1,\"1011\":2,\"1019\":4,\"1051\":1,\"1056\":1,\"1063\":1,\"1083\":1,\"1149\":1,\"1165\":1,\"1171\":1,\"1175\":1}}],[\"images\",{\"1\":{\"834\":1,\"835\":1}}],[\"image\",{\"1\":{\"616\":1,\"1016\":1}}],[\"imaging\",{\"1\":{\"76\":2}}],[\"imap\",{\"1\":{\"71\":3,\"817\":1}}],[\"ip6\",{\"1\":{\"677\":1,\"932\":1}}],[\"ip4\",{\"1\":{\"677\":1,\"932\":1}}],[\"ipv6addr\",{\"1\":{\"677\":2}}],[\"ipv6\",{\"1\":{\"677\":1,\"932\":3}}],[\"ipv4\",{\"1\":{\"677\":1,\"932\":3}}],[\"ipv4net\",{\"1\":{\"676\":2}}],[\"ipv4addr\",{\"1\":{\"676\":2,\"677\":2}}],[\"ipnet\",{\"1\":{\"676\":1}}],[\"iptr++\",{\"1\":{\"543\":1}}],[\"iptr\",{\"1\":{\"543\":1}}],[\"ip2location\",{\"1\":{\"68\":3}}],[\"ip\",{\"0\":{\"677\":1},\"1\":{\"68\":2,\"174\":1,\"673\":1,\"676\":1,\"677\":1,\"681\":1,\"932\":4}}],[\"ipld\",{\"1\":{\"65\":1}}],[\"ipaddr\",{\"1\":{\"16\":1,\"677\":1}}],[\"iroutes\",{\"1\":{\"999\":3}}],[\"irq\",{\"1\":{\"912\":8}}],[\"iris等等\",{\"1\":{\"557\":1}}],[\"iris\",{\"1\":{\"51\":2,\"610\":1,\"962\":1}}],[\"ir\",{\"1\":{\"39\":1,\"1021\":6,\"1024\":3,\"1065\":3,\"1074\":9,\"1076\":1}}],[\"iotime\",{\"1\":{\"916\":2}}],[\"iota<<2\",{\"1\":{\"325\":2}}],[\"iota是递增的\",{\"1\":{\"325\":1}}],[\"iota是一个内置的常量标识符\",{\"1\":{\"325\":1}}],[\"iota\",{\"0\":{\"325\":1},\"1\":{\"323\":1,\"325\":6,\"326\":2,\"432\":1,\"649\":1,\"1132\":1,\"1151\":1}}],[\"iopsinprogress\",{\"1\":{\"916\":2}}],[\"iowait\",{\"1\":{\"912\":8}}],[\"io库\",{\"1\":{\"415\":1}}],[\"iocountersstat\",{\"1\":{\"916\":1}}],[\"iocounters\",{\"1\":{\"916\":2}}],[\"iocore\",{\"1\":{\"839\":1}}],[\"ioc\",{\"1\":{\"40\":1}}],[\"io\",{\"0\":{\"916\":1},\"1\":{\"20\":1,\"25\":3,\"26\":1,\"29\":2,\"30\":3,\"61\":1,\"62\":1,\"67\":1,\"73\":1,\"84\":2,\"99\":1,\"123\":1,\"147\":1,\"158\":4,\"164\":2,\"340\":2,\"396\":1,\"415\":1,\"416\":1,\"417\":3,\"418\":2,\"419\":3,\"422\":1,\"426\":1,\"471\":2,\"485\":1,\"501\":1,\"510\":6,\"561\":1,\"584\":1,\"598\":1,\"616\":2,\"638\":1,\"649\":2,\"673\":1,\"682\":2,\"721\":8,\"723\":1,\"725\":1,\"733\":2,\"770\":2,\"827\":2,\"839\":1,\"850\":1,\"851\":11,\"981\":2,\"1007\":1,\"1011\":4,\"1069\":1,\"1086\":1}}],[\"ios\",{\"1\":{\"7\":1,\"1107\":1}}],[\"ignorerelationshipswhenmigrating\",{\"1\":{\"852\":1}}],[\"ignoreempty\",{\"1\":{\"812\":1,\"813\":1}}],[\"ignoredotherfiles\",{\"1\":{\"21\":1}}],[\"ignored\",{\"1\":{\"21\":2}}],[\"ignoredgofiles\",{\"1\":{\"21\":1}}],[\"ignore\",{\"1\":{\"12\":1}}],[\"i386\",{\"1\":{\"12\":2,\"904\":3}}],[\"i\",{\"1\":{\"9\":1,\"10\":1,\"14\":2,\"15\":1,\"114\":4,\"115\":5,\"133\":1,\"137\":4,\"152\":1,\"165\":2,\"216\":1,\"265\":1,\"303\":1,\"312\":5,\"344\":2,\"354\":12,\"355\":6,\"356\":8,\"357\":8,\"366\":1,\"367\":2,\"369\":3,\"370\":3,\"380\":17,\"388\":2,\"389\":6,\"399\":6,\"401\":2,\"412\":7,\"413\":2,\"414\":8,\"418\":4,\"429\":2,\"443\":1,\"448\":4,\"451\":12,\"456\":4,\"462\":14,\"467\":6,\"470\":11,\"471\":6,\"472\":3,\"479\":2,\"480\":2,\"481\":10,\"482\":11,\"484\":10,\"485\":2,\"486\":10,\"525\":8,\"527\":15,\"539\":8,\"545\":1,\"546\":1,\"547\":2,\"555\":2,\"559\":2,\"560\":4,\"563\":3,\"567\":2,\"578\":14,\"581\":4,\"585\":2,\"587\":16,\"588\":8,\"600\":4,\"682\":2,\"683\":2,\"688\":5,\"693\":2,\"725\":2,\"742\":2,\"753\":6,\"755\":3,\"834\":4,\"1019\":3,\"1021\":2,\"1023\":3,\"1027\":4,\"1028\":5,\"1030\":5,\"1036\":5,\"1037\":11,\"1038\":6,\"1039\":12,\"1040\":6,\"1042\":12,\"1047\":2,\"1052\":6,\"1053\":2,\"1055\":3,\"1067\":4,\"1071\":2,\"1089\":12,\"1091\":1,\"1099\":5,\"1104\":2,\"1107\":4,\"1115\":3,\"1116\":2,\"1119\":3,\"1120\":3,\"1149\":4,\"1153\":2,\"1159\":4,\"1165\":8,\"1171\":3,\"1175\":2}}],[\"id`=null\",{\"1\":{\"897\":1,\"898\":2}}],[\"id`=2\",{\"1\":{\"897\":1}}],[\"id`=`person\",{\"1\":{\"895\":1,\"897\":1}}],[\"id`=values\",{\"1\":{\"895\":1,\"897\":1}}],[\"id`=1\",{\"1\":{\"895\":1}}],[\"id`\",{\"1\":{\"895\":8,\"896\":3,\"897\":11,\"898\":4}}],[\"id就是被引用字段\",{\"1\":{\"891\":1}}],[\"id>\",{\"1\":{\"619\":1,\"620\":1}}],[\"idx\",{\"1\":{\"859\":3,\"1053\":4,\"1148\":3}}],[\"idxlo\",{\"1\":{\"416\":1}}],[\"idxhi\",{\"1\":{\"416\":1}}],[\"idle\",{\"1\":{\"912\":8,\"1086\":2,\"1088\":3,\"1097\":1,\"1132\":2,\"1138\":1}}],[\"idlecheckfrequency\",{\"1\":{\"242\":1}}],[\"idletimeout\",{\"1\":{\"242\":1,\"644\":1}}],[\"idea\",{\"1\":{\"94\":1}}],[\"ide\",{\"1\":{\"26\":1,\"94\":1}}],[\"identity\",{\"1\":{\"21\":1}}],[\"id\",{\"1\":{\"8\":1,\"10\":1,\"21\":1,\"106\":1,\"111\":2,\"112\":1,\"141\":2,\"145\":2,\"195\":1,\"212\":1,\"213\":2,\"214\":1,\"215\":2,\"234\":2,\"235\":2,\"236\":1,\"237\":1,\"572\":7,\"573\":3,\"618\":1,\"626\":2,\"627\":1,\"628\":1,\"758\":1,\"778\":2,\"779\":2,\"782\":1,\"812\":9,\"813\":5,\"853\":1,\"854\":2,\"855\":2,\"856\":2,\"857\":2,\"858\":2,\"859\":2,\"860\":5,\"863\":2,\"866\":1,\"874\":2,\"875\":13,\"876\":4,\"880\":4,\"885\":3,\"888\":7,\"891\":2,\"892\":3,\"893\":4,\"895\":1,\"899\":6,\"901\":1,\"902\":2,\"1003\":2,\"1012\":1,\"1014\":3,\"1087\":2,\"1088\":2,\"1089\":7,\"1091\":5}}],[\"item\",{\"1\":{\"795\":2,\"1099\":2,\"1100\":2}}],[\"items\",{\"1\":{\"795\":2,\"1030\":1}}],[\"iter++\",{\"1\":{\"1153\":1}}],[\"iterx\",{\"1\":{\"587\":5}}],[\"iter标准库中也定义了迭代器的类型iter\",{\"1\":{\"582\":1}}],[\"iterates\",{\"1\":{\"1089\":1}}],[\"iteration\",{\"1\":{\"1037\":5}}],[\"iterators\",{\"1\":{\"589\":1}}],[\"iterator\",{\"1\":{\"503\":2,\"509\":1,\"582\":7,\"583\":2,\"1030\":1,\"1042\":3,\"1043\":1}}],[\"iterable\",{\"1\":{\"355\":1}}],[\"iter\",{\"1\":{\"114\":1,\"582\":5,\"583\":2,\"584\":2,\"585\":8,\"587\":3,\"588\":2,\"1037\":1,\"1153\":4}}],[\"itoa\",{\"1\":{\"693\":2}}],[\"ityp\",{\"1\":{\"428\":1}}],[\"itab\",{\"1\":{\"428\":2,\"1070\":1}}],[\"it\",{\"1\":{\"4\":2,\"7\":1,\"17\":2,\"34\":2,\"37\":2,\"141\":1,\"520\":4,\"536\":4,\"1016\":1,\"1024\":1,\"1037\":30,\"1047\":1,\"1088\":1,\"1089\":4,\"1091\":2,\"1097\":3,\"1101\":2,\"1102\":1,\"1107\":1,\"1120\":1,\"1121\":1,\"1132\":1,\"1138\":1,\"1166\":1}}],[\"itself\",{\"1\":{\"21\":2,\"38\":1,\"1089\":1}}],[\"its\",{\"1\":{\"3\":1,\"17\":1,\"34\":1,\"520\":3,\"563\":1,\"1138\":1}}],[\"isempty\",{\"1\":{\"1037\":1,\"1038\":1,\"1042\":1,\"1100\":1}}],[\"isexported\",{\"1\":{\"448\":2,\"451\":2}}],[\"isasyncsafepoint\",{\"1\":{\"1107\":1}}],[\"isappendofmake\",{\"1\":{\"1024\":1}}],[\"isatty\",{\"1\":{\"64\":2,\"503\":2,\"509\":1}}],[\"isinbounds\",{\"1\":{\"1023\":2}}],[\"isinf\",{\"1\":{\"659\":2}}],[\"isrequired\",{\"1\":{\"1012\":1}}],[\"isregular\",{\"1\":{\"426\":2}}],[\"is666\",{\"1\":{\"949\":5}}],[\"iscolor\",{\"1\":{\"937\":1}}],[\"isclientstream\",{\"1\":{\"165\":2}}],[\"isddd\",{\"1\":{\"1024\":1}}],[\"isdebugging\",{\"1\":{\"1008\":1}}],[\"isdefault\",{\"1\":{\"936\":1}}],[\"isdir\",{\"1\":{\"426\":1}}],[\"isbn13\",{\"1\":{\"934\":1}}],[\"isbn10\",{\"1\":{\"934\":1}}],[\"isbn\",{\"1\":{\"934\":4}}],[\"iso4217\",{\"1\":{\"934\":1}}],[\"iso3166\",{\"1\":{\"934\":9,\"937\":1}}],[\"iso\",{\"1\":{\"934\":5}}],[\"isn\",{\"1\":{\"1097\":1}}],[\"isnil\",{\"1\":{\"1070\":1}}],[\"isnan\",{\"1\":{\"658\":1}}],[\"isnotexist\",{\"1\":{\"416\":2}}],[\"is函数的作用是判断错误链中是否包含指定的错误\",{\"1\":{\"603\":1}}],[\"is这段逻辑也就没有执行\",{\"1\":{\"167\":1}}],[\"is来判断错误\",{\"1\":{\"167\":1}}],[\"isshrinkstacksafe\",{\"1\":{\"1102\":2}}],[\"isslice\",{\"1\":{\"1021\":2}}],[\"isselect\",{\"1\":{\"1059\":1,\"1060\":1,\"1067\":2}}],[\"isset\",{\"1\":{\"791\":1}}],[\"isserverstream\",{\"1\":{\"165\":2}}],[\"iss\",{\"1\":{\"773\":1,\"778\":1}}],[\"issorted\",{\"1\":{\"689\":1}}],[\"issuedat\",{\"1\":{\"778\":1,\"781\":1,\"785\":1}}],[\"issued\",{\"1\":{\"778\":1}}],[\"issuer\",{\"1\":{\"773\":1,\"778\":2,\"780\":1,\"781\":1,\"785\":1}}],[\"issue\",{\"1\":{\"5\":1,\"112\":1,\"1036\":1,\"1128\":1}}],[\"istest\",{\"1\":{\"107\":1}}],[\"is\",{\"1\":{\"3\":1,\"4\":2,\"7\":2,\"14\":1,\"17\":5,\"18\":2,\"19\":1,\"21\":7,\"22\":1,\"31\":1,\"34\":1,\"37\":1,\"112\":1,\"137\":2,\"158\":2,\"160\":1,\"164\":1,\"167\":3,\"168\":1,\"209\":3,\"375\":6,\"376\":2,\"377\":2,\"378\":2,\"379\":8,\"417\":1,\"428\":2,\"503\":2,\"513\":1,\"520\":1,\"521\":14,\"522\":2,\"523\":2,\"524\":2,\"527\":1,\"536\":15,\"558\":1,\"561\":1,\"563\":4,\"582\":1,\"603\":4,\"682\":1,\"707\":2,\"715\":8,\"716\":8,\"717\":4,\"718\":10,\"720\":2,\"723\":2,\"726\":2,\"783\":3,\"817\":2,\"823\":3,\"961\":1,\"968\":6,\"969\":6,\"970\":8,\"980\":1,\"1011\":2,\"1016\":2,\"1024\":1,\"1030\":1,\"1042\":1,\"1047\":1,\"1051\":1,\"1065\":1,\"1067\":1,\"1073\":1,\"1078\":3,\"1086\":1,\"1087\":2,\"1088\":2,\"1089\":3,\"1091\":1,\"1095\":1,\"1097\":2,\"1101\":1,\"1102\":1,\"1104\":1,\"1107\":1,\"1112\":1,\"1120\":2,\"1125\":1,\"1138\":4,\"1139\":1,\"1144\":4,\"1151\":1,\"1166\":3,\"1178\":2}}],[\"iface对应的是nonemptyinterface\",{\"1\":{\"428\":1}}],[\"iface\",{\"1\":{\"428\":1,\"826\":1,\"1070\":1}}],[\"ifaceassert\",{\"1\":{\"37\":1}}],[\"if\",{\"0\":{\"348\":1,\"349\":1},\"1\":{\"3\":2,\"4\":1,\"7\":2,\"16\":1,\"17\":5,\"21\":6,\"34\":1,\"41\":1,\"112\":1,\"114\":1,\"137\":1,\"145\":7,\"153\":2,\"154\":2,\"158\":12,\"159\":8,\"164\":3,\"165\":1,\"166\":1,\"167\":3,\"168\":2,\"174\":2,\"175\":4,\"205\":2,\"207\":2,\"208\":2,\"209\":2,\"210\":2,\"212\":2,\"213\":2,\"214\":2,\"215\":2,\"216\":6,\"221\":1,\"224\":1,\"225\":4,\"226\":2,\"227\":4,\"228\":2,\"229\":2,\"233\":1,\"234\":3,\"235\":2,\"236\":2,\"237\":2,\"238\":1,\"241\":2,\"298\":1,\"312\":1,\"346\":1,\"348\":6,\"349\":16,\"352\":1,\"354\":1,\"356\":2,\"357\":2,\"383\":1,\"384\":1,\"397\":1,\"398\":2,\"399\":2,\"406\":1,\"416\":5,\"417\":8,\"418\":5,\"419\":8,\"420\":1,\"421\":2,\"422\":3,\"424\":3,\"425\":1,\"426\":10,\"443\":1,\"445\":1,\"448\":1,\"449\":2,\"450\":1,\"452\":1,\"476\":1,\"477\":1,\"484\":6,\"485\":1,\"487\":1,\"490\":1,\"496\":3,\"513\":5,\"521\":8,\"522\":2,\"523\":2,\"524\":2,\"527\":7,\"531\":2,\"536\":2,\"556\":3,\"571\":1,\"577\":3,\"578\":7,\"581\":3,\"582\":2,\"583\":3,\"584\":6,\"587\":7,\"588\":1,\"596\":1,\"598\":4,\"600\":1,\"603\":4,\"605\":1,\"607\":3,\"608\":1,\"619\":1,\"620\":1,\"622\":1,\"623\":2,\"625\":1,\"627\":1,\"628\":1,\"629\":2,\"638\":1,\"639\":1,\"675\":1,\"676\":1,\"677\":2,\"678\":2,\"679\":2,\"680\":1,\"681\":2,\"682\":6,\"713\":1,\"719\":2,\"721\":1,\"723\":2,\"725\":5,\"727\":1,\"729\":1,\"731\":4,\"732\":3,\"733\":2,\"734\":6,\"736\":2,\"740\":2,\"782\":3,\"783\":4,\"784\":1,\"785\":3,\"791\":3,\"795\":1,\"797\":1,\"798\":1,\"805\":2,\"812\":3,\"813\":2,\"817\":4,\"823\":3,\"824\":4,\"829\":1,\"840\":1,\"841\":2,\"843\":2,\"847\":1,\"851\":2,\"882\":2,\"901\":3,\"902\":6,\"936\":2,\"950\":2,\"951\":1,\"952\":4,\"953\":1,\"958\":1,\"960\":1,\"971\":2,\"974\":1,\"975\":3,\"977\":1,\"984\":2,\"985\":1,\"995\":1,\"1000\":2,\"1002\":1,\"1003\":1,\"1008\":1,\"1016\":5,\"1020\":2,\"1021\":1,\"1023\":1,\"1024\":6,\"1025\":6,\"1026\":6,\"1027\":4,\"1030\":1,\"1034\":7,\"1036\":8,\"1037\":12,\"1038\":15,\"1039\":15,\"1040\":2,\"1041\":2,\"1042\":26,\"1043\":5,\"1045\":1,\"1046\":4,\"1047\":13,\"1048\":5,\"1049\":4,\"1053\":4,\"1054\":5,\"1055\":1,\"1058\":1,\"1059\":12,\"1060\":17,\"1061\":3,\"1062\":1,\"1065\":3,\"1066\":5,\"1067\":24,\"1069\":9,\"1072\":1,\"1074\":8,\"1075\":1,\"1076\":4,\"1077\":1,\"1078\":2,\"1079\":7,\"1080\":5,\"1086\":1,\"1087\":2,\"1088\":1,\"1089\":20,\"1091\":1,\"1092\":2,\"1095\":3,\"1097\":10,\"1098\":4,\"1099\":1,\"1100\":7,\"1101\":1,\"1102\":5,\"1104\":10,\"1106\":4,\"1107\":14,\"1111\":2,\"1112\":7,\"1114\":2,\"1115\":1,\"1116\":1,\"1117\":8,\"1120\":15,\"1121\":2,\"1122\":6,\"1124\":5,\"1125\":7,\"1126\":2,\"1132\":5,\"1137\":8,\"1138\":9,\"1139\":10,\"1140\":3,\"1144\":3,\"1145\":4,\"1147\":4,\"1148\":7,\"1152\":2,\"1153\":14,\"1154\":5,\"1155\":1,\"1157\":2,\"1158\":1,\"1159\":2,\"1160\":4,\"1161\":1,\"1162\":5,\"1165\":1,\"1167\":3,\"1168\":5,\"1169\":2,\"1173\":2,\"1177\":8,\"1178\":6}}],[\"inherittime\",{\"1\":{\"1104\":6,\"1138\":1}}],[\"inactive\",{\"1\":{\"918\":1}}],[\"inodesfree\",{\"1\":{\"914\":1}}],[\"inodesusedpercent\",{\"1\":{\"914\":1}}],[\"inodesused\",{\"1\":{\"914\":1}}],[\"inodestotal\",{\"1\":{\"914\":1}}],[\"inlocation\",{\"1\":{\"740\":2}}],[\"inlined\",{\"1\":{\"1153\":1}}],[\"inline\",{\"1\":{\"559\":1}}],[\"inuse\",{\"1\":{\"559\":1,\"560\":2,\"1112\":6}}],[\"innodb\",{\"1\":{\"233\":1}}],[\"innermost\",{\"1\":{\"1073\":2,\"1078\":2,\"1086\":4}}],[\"inner\",{\"1\":{\"191\":2}}],[\"input\",{\"1\":{\"201\":1,\"527\":5}}],[\"invalidop+\",{\"1\":{\"1061\":1}}],[\"invalidsend\",{\"1\":{\"1061\":1}}],[\"invalidates\",{\"1\":{\"1041\":1}}],[\"invalidargument\",{\"1\":{\"168\":3}}],[\"invalid\",{\"1\":{\"114\":1,\"201\":1,\"332\":1,\"392\":1,\"432\":3,\"469\":1,\"527\":3,\"591\":1,\"593\":1,\"600\":1,\"699\":1,\"751\":1,\"977\":2,\"1077\":1}}],[\"invoker\",{\"1\":{\"166\":4}}],[\"invokes\",{\"1\":{\"7\":1}}],[\"involving\",{\"1\":{\"37\":1}}],[\"involved\",{\"1\":{\"34\":1}}],[\"injectglist\",{\"1\":{\"1104\":1,\"1132\":1}}],[\"injectreader\",{\"1\":{\"827\":1}}],[\"injectfoobar\",{\"1\":{\"828\":3}}],[\"injectfoo\",{\"1\":{\"827\":2}}],[\"injectors\",{\"1\":{\"824\":1}}],[\"injector\",{\"1\":{\"823\":2,\"824\":3,\"827\":2,\"828\":2,\"829\":2}}],[\"injector是由\",{\"1\":{\"823\":1}}],[\"injection\",{\"1\":{\"821\":1}}],[\"inject\",{\"1\":{\"67\":2,\"829\":1,\"1107\":1}}],[\"ini文件如下\",{\"1\":{\"817\":1}}],[\"ini的改进\",{\"1\":{\"617\":1}}],[\"ini\",{\"0\":{\"814\":1},\"1\":{\"63\":4,\"791\":1,\"814\":7,\"816\":1,\"817\":5}}],[\"initheapbits\",{\"1\":{\"1117\":1}}],[\"initspan\",{\"1\":{\"1120\":1}}],[\"initsig注册的信号处理器回调函数runtime\",{\"1\":{\"1107\":1}}],[\"initsigmask\",{\"1\":{\"1091\":1}}],[\"initsystemserver\",{\"1\":{\"824\":3}}],[\"initmem\",{\"1\":{\"1021\":1,\"1023\":1}}],[\"init默认指定的是当前目录\",{\"1\":{\"1017\":1}}],[\"initzap\",{\"1\":{\"843\":1}}],[\"initdatabase\",{\"1\":{\"605\":2}}],[\"init命令初始化模块\",{\"1\":{\"495\":1}}],[\"init命令用于初始化一个\",{\"1\":{\"23\":1}}],[\"init子命令用于初始化一个\",{\"1\":{\"32\":1}}],[\"initialization\",{\"1\":{\"1037\":1}}],[\"initializefoobar\",{\"1\":{\"830\":1}}],[\"initializebaz\",{\"1\":{\"823\":2}}],[\"initialize\",{\"1\":{\"22\":1,\"31\":1,\"1089\":1}}],[\"initializers\",{\"1\":{\"9\":1,\"16\":4}}],[\"initialfields\",{\"1\":{\"839\":3,\"840\":1}}],[\"initial\",{\"1\":{\"7\":1,\"141\":1,\"499\":1}}],[\"init\",{\"0\":{\"23\":1,\"32\":1},\"1\":{\"4\":1,\"22\":2,\"23\":3,\"31\":1,\"32\":4,\"145\":1,\"156\":1,\"175\":1,\"234\":1,\"324\":1,\"354\":1,\"485\":1,\"495\":1,\"496\":1,\"499\":3,\"506\":1,\"514\":1,\"557\":1,\"588\":1,\"1011\":1,\"1016\":2,\"1017\":6,\"1024\":3,\"1065\":1,\"1089\":1,\"1099\":2,\"1101\":1,\"1112\":2,\"1117\":1,\"1119\":11}}],[\"indicates\",{\"1\":{\"1132\":3}}],[\"indicate\",{\"1\":{\"1037\":1,\"1088\":1}}],[\"indicesdelete\",{\"1\":{\"210\":2}}],[\"indicesvalidatequery\",{\"1\":{\"206\":1}}],[\"indicesclose\",{\"1\":{\"206\":1}}],[\"indicesclone\",{\"1\":{\"206\":1}}],[\"indicesclearcache\",{\"1\":{\"206\":1}}],[\"indicesanalyze\",{\"1\":{\"206\":1}}],[\"indicesaddblock\",{\"1\":{\"206\":1}}],[\"indices\",{\"1\":{\"206\":3,\"207\":1,\"208\":1,\"209\":1,\"210\":1}}],[\"indices结构体中\",{\"1\":{\"206\":1}}],[\"india\",{\"1\":{\"688\":1,\"689\":1}}],[\"indirectelem\",{\"1\":{\"1036\":1,\"1037\":1,\"1038\":2,\"1039\":1,\"1042\":1}}],[\"indirectkey\",{\"1\":{\"1036\":1,\"1037\":1,\"1038\":2,\"1039\":2,\"1042\":2}}],[\"indirect注释的表示该依赖没有被当前项目直接引用\",{\"1\":{\"509\":1}}],[\"indirectly\",{\"1\":{\"21\":1}}],[\"indirect\",{\"1\":{\"21\":1,\"503\":23,\"509\":25}}],[\"indentedjson\",{\"1\":{\"981\":1}}],[\"indent\",{\"1\":{\"618\":1,\"627\":1}}],[\"indentation\",{\"1\":{\"17\":1}}],[\"indexexpr\",{\"1\":{\"1021\":1}}],[\"indexes\",{\"1\":{\"863\":1}}],[\"index+1\",{\"1\":{\"995\":1}}],[\"index++\",{\"1\":{\"995\":2}}],[\"indexrune\",{\"1\":{\"712\":2}}],[\"indexany\",{\"1\":{\"712\":2}}],[\"index为可迭代数据结构的索引\",{\"1\":{\"355\":1}}],[\"index=1\",{\"1\":{\"141\":1}}],[\"index\",{\"1\":{\"41\":2,\"205\":1,\"207\":1,\"208\":1,\"212\":1,\"213\":1,\"214\":1,\"215\":1,\"355\":3,\"369\":2,\"412\":4,\"448\":2,\"451\":3,\"456\":1,\"557\":1,\"559\":1,\"582\":10,\"587\":7,\"645\":3,\"646\":2,\"712\":2,\"725\":2,\"727\":2,\"728\":3,\"849\":1,\"857\":1,\"859\":3,\"862\":2,\"863\":2,\"960\":2,\"980\":4,\"991\":2,\"995\":2,\"1011\":1,\"1016\":5,\"1054\":1,\"1057\":2}}],[\"incnondefault\",{\"1\":{\"1079\":1}}],[\"incus\",{\"1\":{\"788\":1}}],[\"inconsistent\",{\"1\":{\"1097\":1,\"1104\":1}}],[\"inconsistently\",{\"1\":{\"491\":1}}],[\"incompatible\",{\"1\":{\"509\":1}}],[\"incomplete\",{\"1\":{\"21\":1,\"1024\":1,\"1047\":1}}],[\"incoming\",{\"1\":{\"141\":3}}],[\"incrnoverflow\",{\"1\":{\"1030\":1}}],[\"incremental\",{\"1\":{\"1136\":1}}],[\"incremented\",{\"1\":{\"1088\":2,\"1166\":1}}],[\"increment\",{\"1\":{\"862\":1,\"863\":2,\"1178\":2}}],[\"incr\",{\"1\":{\"256\":1,\"1003\":1}}],[\"include<complex\",{\"1\":{\"535\":1}}],[\"include\",{\"1\":{\"208\":1,\"530\":1,\"531\":4,\"532\":2,\"533\":11,\"534\":1,\"535\":1,\"536\":10,\"537\":1,\"538\":1,\"539\":4,\"540\":2,\"541\":2,\"542\":2,\"543\":4,\"545\":3,\"546\":1,\"547\":1}}],[\"includes\",{\"1\":{\"4\":1,\"5\":1}}],[\"including\",{\"1\":{\"17\":1,\"926\":2}}],[\"insertk\",{\"1\":{\"1038\":7}}],[\"inserti\",{\"1\":{\"1038\":6}}],[\"insertions\",{\"1\":{\"499\":6}}],[\"insert\",{\"1\":{\"233\":2,\"235\":5,\"238\":1,\"856\":2,\"895\":6,\"897\":6}}],[\"insertedids\",{\"1\":{\"226\":1}}],[\"insertedid\",{\"1\":{\"226\":1}}],[\"insertone和db\",{\"1\":{\"226\":1}}],[\"insertone\",{\"1\":{\"226\":1}}],[\"insertmany\",{\"1\":{\"223\":1,\"226\":2}}],[\"insecure\",{\"1\":{\"18\":1,\"145\":4,\"154\":2,\"158\":2,\"159\":2,\"166\":2,\"167\":1,\"170\":2,\"174\":1,\"175\":2}}],[\"instruction\",{\"1\":{\"1095\":1}}],[\"instrument\",{\"1\":{\"195\":1}}],[\"instancename\",{\"1\":{\"1016\":7}}],[\"instance\",{\"1\":{\"503\":1,\"1016\":1}}],[\"install安装即可\",{\"1\":{\"156\":1}}],[\"installer\",{\"1\":{\"90\":1}}],[\"installed\",{\"1\":{\"7\":2,\"93\":1,\"1144\":1}}],[\"install来进行下载\",{\"1\":{\"37\":1}}],[\"install下载\",{\"1\":{\"19\":1}}],[\"install下载并编译的第三方二进制可执行文件\",{\"1\":{\"7\":1}}],[\"install下载并编译的二进制文件\",{\"1\":{\"7\":1}}],[\"install命令会将第三方依赖下载到本地并编译成二进制文件\",{\"1\":{\"504\":1}}],[\"install命令现在只用于安装和编译命令行工具\",{\"1\":{\"127\":1}}],[\"install命令还有一个限制就是下载的包必须是该项目的入口包\",{\"1\":{\"19\":1}}],[\"install命令接收构建标志和包名作为参数\",{\"1\":{\"19\":1}}],[\"install命令与get命令类似\",{\"1\":{\"19\":1}}],[\"install一样使用go\",{\"1\":{\"18\":1}}],[\"install类似\",{\"1\":{\"18\":1}}],[\"install\",{\"0\":{\"19\":1},\"1\":{\"2\":1,\"7\":2,\"18\":5,\"19\":5,\"21\":2,\"37\":1,\"93\":1,\"140\":1,\"148\":2,\"156\":2,\"200\":2,\"498\":3,\"500\":1,\"504\":1,\"526\":1,\"822\":1,\"1010\":1}}],[\"instead\",{\"1\":{\"3\":1,\"16\":1,\"463\":1,\"509\":1,\"1112\":1}}],[\"intra\",{\"1\":{\"1037\":1}}],[\"introduction\",{\"1\":{\"218\":1,\"770\":1}}],[\"int>\",{\"1\":{\"1023\":2}}],[\"intvar\",{\"1\":{\"633\":1,\"636\":1}}],[\"intval\",{\"1\":{\"596\":2}}],[\"int类型\",{\"1\":{\"594\":1}}],[\"int就是类型实参\",{\"1\":{\"571\":1}}],[\"intall安装命令行程序\",{\"1\":{\"500\":1}}],[\"intsize\",{\"1\":{\"651\":3}}],[\"ints\",{\"1\":{\"465\":1,\"468\":4,\"573\":1,\"684\":3,\"692\":2,\"748\":2}}],[\"intslice就是接收者的类型\",{\"1\":{\"412\":1}}],[\"intslice\",{\"1\":{\"412\":12}}],[\"intch\",{\"1\":{\"464\":3,\"465\":5,\"468\":20}}],[\"int指针\",{\"1\":{\"393\":1}}],[\"int即代表该变量的类型是一个int类型的指针\",{\"1\":{\"391\":1}}],[\"int是不可比较的\",{\"1\":{\"382\":1}}],[\"int是可比较的\",{\"1\":{\"382\":1}}],[\"int这种方式声明的切片\",{\"1\":{\"364\":1}}],[\"int=1\",{\"1\":{\"341\":2}}],[\"int16占\",{\"1\":{\"410\":1}}],[\"int16\",{\"1\":{\"316\":1,\"410\":1,\"432\":3,\"528\":1,\"537\":4,\"574\":7,\"575\":2}}],[\"int8只能表示\",{\"1\":{\"595\":1}}],[\"int8占一个字节\",{\"1\":{\"410\":1}}],[\"int8\",{\"1\":{\"316\":1,\"410\":5,\"432\":3,\"528\":1,\"537\":4,\"574\":8,\"575\":4,\"595\":2,\"995\":2,\"1114\":2}}],[\"intnum\",{\"1\":{\"328\":1}}],[\"intn\",{\"1\":{\"216\":2,\"388\":1,\"462\":1,\"479\":2,\"480\":2,\"481\":4,\"482\":4}}],[\"int32能够表示\",{\"1\":{\"595\":1}}],[\"int32占\",{\"1\":{\"410\":1}}],[\"int32>\",{\"1\":{\"187\":1,\"188\":1,\"190\":2}}],[\"int32\",{\"1\":{\"167\":2,\"184\":4,\"191\":1,\"195\":1,\"316\":1,\"319\":1,\"341\":1,\"410\":2,\"432\":3,\"488\":1,\"528\":1,\"531\":5,\"533\":15,\"537\":5,\"539\":7,\"540\":3,\"541\":3,\"543\":5,\"545\":7,\"546\":2,\"547\":7,\"571\":1,\"572\":2,\"573\":2,\"574\":7,\"575\":2,\"595\":2,\"629\":1,\"737\":1,\"750\":1,\"751\":2,\"1087\":3,\"1088\":4,\"1089\":3,\"1151\":1,\"1153\":1,\"1155\":2,\"1162\":1,\"1177\":4,\"1178\":2}}],[\"int64占\",{\"1\":{\"410\":1}}],[\"int64>\",{\"1\":{\"186\":1}}],[\"int64\",{\"1\":{\"158\":2,\"164\":3,\"184\":4,\"191\":1,\"202\":1,\"316\":1,\"332\":4,\"410\":3,\"417\":1,\"418\":1,\"419\":2,\"432\":3,\"456\":1,\"485\":1,\"488\":1,\"489\":1,\"490\":4,\"528\":1,\"537\":4,\"547\":3,\"572\":2,\"573\":2,\"574\":7,\"575\":2,\"593\":3,\"632\":1,\"737\":2,\"751\":1,\"872\":2,\"899\":4,\"981\":1,\"1030\":1,\"1058\":2,\"1074\":1,\"1086\":1,\"1087\":1,\"1089\":1,\"1091\":2,\"1098\":1,\"1102\":1,\"1107\":3,\"1132\":1,\"1137\":1,\"1138\":2,\"1139\":10,\"1153\":1}}],[\"int64value\",{\"1\":{\"158\":1,\"164\":1}}],[\"intel\",{\"1\":{\"525\":1,\"526\":3,\"588\":1,\"909\":1}}],[\"integertype代表的是任意整数类型\",{\"1\":{\"747\":1}}],[\"integertype\",{\"0\":{\"747\":1},\"1\":{\"393\":1,\"747\":1,\"752\":1,\"754\":1,\"756\":1,\"1054\":2}}],[\"integer\",{\"1\":{\"202\":1,\"302\":1,\"574\":6,\"575\":5,\"1012\":1}}],[\"integration\",{\"1\":{\"117\":1}}],[\"interrupt\",{\"1\":{\"1063\":1}}],[\"interator的简写\",{\"1\":{\"1037\":1}}],[\"interactive\",{\"1\":{\"559\":1}}],[\"interact\",{\"1\":{\"4\":1}}],[\"interesting\",{\"1\":{\"527\":12}}],[\"interval\",{\"1\":{\"526\":3,\"911\":1}}],[\"interchange\",{\"1\":{\"200\":1}}],[\"intercept\",{\"1\":{\"165\":2,\"166\":4}}],[\"interceptors\",{\"1\":{\"165\":2,\"166\":2}}],[\"interceptor\",{\"1\":{\"164\":2,\"165\":4,\"166\":4}}],[\"internalserviceconfig\",{\"1\":{\"175\":1}}],[\"internal包的语义可以应用到任何地方\",{\"1\":{\"132\":1}}],[\"internal\",{\"1\":{\"14\":7,\"19\":1,\"20\":12,\"39\":1,\"141\":1,\"168\":1,\"296\":1,\"550\":1,\"1016\":1,\"1021\":2,\"1024\":1,\"1026\":1,\"1027\":2,\"1028\":1,\"1030\":2,\"1037\":3,\"1055\":1,\"1061\":3,\"1065\":1,\"1070\":1,\"1112\":1,\"1139\":1}}],[\"interfacevalue\",{\"1\":{\"827\":2}}],[\"interfaces\",{\"1\":{\"721\":1}}],[\"interfaces即通用接口\",{\"1\":{\"574\":1}}],[\"interface下的三个方法len\",{\"1\":{\"683\":1}}],[\"interface\",{\"1\":{\"4\":1,\"33\":1,\"34\":1,\"88\":1,\"116\":1,\"123\":1,\"152\":2,\"158\":5,\"162\":1,\"163\":1,\"165\":9,\"166\":6,\"168\":3,\"174\":2,\"222\":3,\"258\":1,\"298\":1,\"320\":1,\"396\":1,\"414\":1,\"428\":2,\"429\":1,\"432\":4,\"433\":1,\"434\":1,\"435\":1,\"436\":2,\"437\":2,\"440\":1,\"441\":1,\"442\":2,\"443\":2,\"446\":1,\"448\":2,\"449\":2,\"452\":1,\"454\":1,\"455\":1,\"456\":1,\"457\":1,\"458\":1,\"459\":1,\"474\":1,\"477\":1,\"480\":1,\"521\":1,\"563\":11,\"565\":1,\"567\":3,\"568\":8,\"572\":1,\"574\":15,\"575\":10,\"596\":1,\"597\":1,\"599\":1,\"603\":1,\"621\":2,\"683\":2,\"762\":1,\"778\":1,\"782\":1,\"783\":1,\"784\":1,\"785\":1,\"791\":3,\"797\":2,\"809\":2,\"812\":4,\"813\":6,\"823\":1,\"826\":2,\"828\":1,\"839\":2,\"852\":1,\"855\":1,\"861\":9,\"863\":23,\"866\":2,\"869\":2,\"870\":2,\"871\":1,\"873\":2,\"874\":2,\"875\":6,\"876\":1,\"878\":2,\"879\":1,\"885\":1,\"886\":1,\"887\":1,\"888\":2,\"942\":1,\"943\":5,\"950\":2,\"951\":1,\"981\":1,\"1013\":1,\"1150\":1}}],[\"into\",{\"1\":{\"22\":1,\"31\":1,\"233\":2,\"235\":1,\"491\":2,\"495\":1,\"856\":2,\"866\":1,\"895\":6,\"897\":6,\"1101\":1}}],[\"int\",{\"1\":{\"10\":1,\"114\":3,\"115\":1,\"129\":2,\"133\":1,\"135\":1,\"137\":1,\"202\":1,\"224\":1,\"225\":2,\"234\":1,\"242\":4,\"312\":1,\"316\":1,\"320\":4,\"328\":4,\"329\":2,\"331\":2,\"341\":1,\"344\":5,\"345\":1,\"350\":1,\"360\":12,\"362\":6,\"364\":4,\"365\":1,\"366\":3,\"367\":1,\"368\":2,\"369\":2,\"370\":4,\"371\":3,\"372\":2,\"379\":4,\"382\":5,\"383\":3,\"384\":2,\"385\":1,\"386\":1,\"387\":2,\"388\":1,\"389\":1,\"391\":6,\"392\":5,\"393\":5,\"395\":11,\"396\":2,\"397\":8,\"398\":6,\"399\":6,\"400\":2,\"402\":8,\"403\":1,\"404\":2,\"405\":2,\"406\":2,\"407\":2,\"409\":1,\"412\":7,\"413\":2,\"414\":13,\"416\":9,\"417\":2,\"418\":4,\"424\":1,\"432\":4,\"433\":2,\"435\":1,\"439\":1,\"440\":1,\"441\":1,\"442\":2,\"445\":4,\"447\":2,\"448\":5,\"451\":1,\"455\":2,\"456\":2,\"457\":2,\"458\":2,\"459\":2,\"460\":2,\"462\":4,\"463\":1,\"464\":2,\"465\":1,\"466\":2,\"467\":3,\"468\":9,\"469\":3,\"470\":3,\"471\":16,\"472\":1,\"475\":1,\"479\":1,\"480\":1,\"481\":2,\"482\":2,\"484\":11,\"485\":1,\"486\":4,\"490\":2,\"513\":1,\"524\":1,\"528\":1,\"531\":4,\"532\":8,\"534\":1,\"535\":1,\"536\":4,\"537\":10,\"539\":1,\"545\":1,\"547\":1,\"552\":5,\"553\":5,\"555\":4,\"559\":1,\"560\":4,\"565\":1,\"567\":5,\"568\":3,\"571\":7,\"572\":18,\"573\":13,\"574\":12,\"575\":10,\"577\":1,\"578\":7,\"581\":6,\"582\":5,\"585\":10,\"587\":18,\"588\":4,\"591\":3,\"592\":17,\"593\":2,\"594\":9,\"595\":6,\"596\":2,\"597\":3,\"600\":2,\"604\":1,\"605\":1,\"618\":1,\"621\":1,\"624\":1,\"626\":1,\"632\":1,\"633\":2,\"635\":2,\"636\":2,\"649\":3,\"683\":3,\"684\":1,\"688\":4,\"692\":1,\"693\":1,\"697\":1,\"698\":1,\"699\":1,\"700\":1,\"705\":1,\"707\":1,\"712\":5,\"714\":1,\"715\":1,\"716\":2,\"725\":1,\"746\":1,\"747\":1,\"748\":5,\"749\":1,\"751\":3,\"752\":3,\"753\":5,\"754\":1,\"791\":2,\"797\":1,\"817\":1,\"823\":3,\"827\":1,\"828\":2,\"838\":1,\"840\":2,\"852\":1,\"862\":3,\"874\":1,\"877\":2,\"910\":1,\"930\":1,\"942\":3,\"952\":3,\"981\":16,\"995\":1,\"1003\":2,\"1008\":1,\"1012\":2,\"1013\":1,\"1014\":2,\"1016\":1,\"1019\":11,\"1020\":8,\"1021\":13,\"1023\":6,\"1024\":1,\"1025\":3,\"1026\":8,\"1027\":1,\"1030\":1,\"1032\":1,\"1034\":1,\"1042\":1,\"1045\":1,\"1052\":2,\"1053\":1,\"1054\":1,\"1058\":4,\"1059\":1,\"1060\":2,\"1062\":2,\"1066\":4,\"1067\":11,\"1070\":6,\"1071\":2,\"1077\":2,\"1079\":1,\"1138\":1,\"1140\":1,\"1149\":1,\"1153\":1,\"1159\":2,\"1177\":1}}],[\"infoinstancename\",{\"1\":{\"1016\":1}}],[\"info2\",{\"1\":{\"1007\":1}}],[\"info1\",{\"1\":{\"1007\":1}}],[\"infostat\",{\"1\":{\"907\":1,\"909\":1}}],[\"infolevel\",{\"1\":{\"842\":2}}],[\"infof\",{\"1\":{\"838\":1}}],[\"infow\",{\"1\":{\"838\":1}}],[\"inforesp\",{\"1\":{\"205\":2}}],[\"information\",{\"1\":{\"3\":2,\"4\":2,\"5\":1,\"7\":1,\"18\":1,\"21\":3,\"22\":1,\"31\":1,\"34\":1,\"174\":1,\"504\":1}}],[\"info\",{\"1\":{\"7\":2,\"21\":2,\"141\":1,\"147\":1,\"165\":14,\"167\":2,\"168\":1,\"171\":1,\"205\":3,\"426\":6,\"507\":1,\"510\":3,\"734\":2,\"735\":2,\"736\":3,\"829\":1,\"838\":1,\"840\":2,\"843\":1,\"851\":2,\"907\":4,\"909\":4,\"1016\":1,\"1063\":3,\"1080\":1,\"1107\":1}}],[\"inf\",{\"0\":{\"659\":1},\"1\":{\"4\":2,\"659\":1}}],[\"inf变量\",{\"1\":{\"4\":1}}],[\"in\",{\"1\":{\"3\":1,\"7\":6,\"9\":2,\"14\":2,\"17\":2,\"18\":1,\"21\":9,\"22\":1,\"28\":5,\"34\":1,\"37\":1,\"112\":1,\"141\":1,\"167\":2,\"168\":1,\"296\":5,\"380\":1,\"382\":1,\"414\":1,\"445\":1,\"446\":1,\"451\":1,\"503\":4,\"504\":2,\"509\":1,\"510\":1,\"520\":1,\"536\":2,\"559\":4,\"563\":1,\"579\":1,\"591\":1,\"604\":1,\"621\":2,\"757\":1,\"762\":2,\"798\":1,\"802\":1,\"806\":2,\"814\":1,\"816\":1,\"817\":3,\"823\":1,\"831\":1,\"836\":1,\"844\":1,\"862\":2,\"871\":3,\"874\":2,\"875\":11,\"878\":2,\"879\":2,\"880\":2,\"888\":3,\"896\":1,\"897\":2,\"898\":6,\"930\":1,\"961\":1,\"1015\":1,\"1024\":1,\"1030\":2,\"1037\":2,\"1038\":1,\"1045\":1,\"1057\":1,\"1070\":1,\"1078\":2,\"1080\":1,\"1086\":1,\"1089\":2,\"1091\":1,\"1095\":3,\"1096\":1,\"1097\":5,\"1101\":3,\"1112\":3,\"1114\":5,\"1118\":1,\"1120\":2,\"1125\":1,\"1138\":1,\"1139\":1,\"1140\":1}}],[\"sghi\",{\"1\":{\"1101\":2}}],[\"sgnext\",{\"1\":{\"1067\":2}}],[\"sg1\",{\"1\":{\"1067\":7}}],[\"sglist\",{\"1\":{\"1067\":11}}],[\"sg\",{\"1\":{\"1059\":12,\"1060\":12,\"1061\":6,\"1067\":21,\"1117\":5}}],[\"sz\",{\"1\":{\"1034\":3}}],[\"s中\",{\"1\":{\"1033\":1,\"1089\":1,\"1107\":1}}],[\"s查看细节\",{\"1\":{\"1027\":1}}],[\"s+16\",{\"1\":{\"1021\":3}}],[\"s+1=\",{\"1\":{\"729\":1}}],[\"s+8\",{\"1\":{\"1021\":3,\"1023\":1}}],[\"s4\",{\"1\":{\"1019\":1}}],[\"s3\",{\"1\":{\"1019\":1}}],[\"s390x\",{\"1\":{\"7\":1}}],[\"sági\",{\"1\":{\"798\":1}}],[\"sfnni22dhtnjmshpg8\",{\"1\":{\"780\":1}}],[\"sfixed64\",{\"1\":{\"184\":1}}],[\"sfixed32\",{\"1\":{\"184\":1}}],[\"sfiles\",{\"1\":{\"21\":1}}],[\"sqrt\",{\"1\":{\"667\":1}}],[\"sqrtphi\",{\"1\":{\"653\":1}}],[\"sqrtpi\",{\"1\":{\"653\":1}}],[\"sqrte\",{\"1\":{\"653\":1}}],[\"sqrt2\",{\"1\":{\"653\":1}}],[\"sql这三个库就可以开发一个独立完整的web项目\",{\"1\":{\"616\":1}}],[\"sql支持的数据库不止\",{\"1\":{\"231\":1}}],[\"sql新增了sql\",{\"1\":{\"115\":1}}],[\"sqlserver\",{\"1\":{\"62\":2,\"851\":1}}],[\"sqlite3\",{\"1\":{\"62\":2,\"817\":2}}],[\"sqlite\",{\"1\":{\"62\":5,\"231\":1,\"614\":1,\"851\":2}}],[\"sqlmock\",{\"1\":{\"55\":2}}],[\"sql\",{\"0\":{\"887\":1},\"1\":{\"52\":2,\"55\":3,\"62\":1,\"115\":2,\"222\":1,\"230\":2,\"231\":1,\"614\":1,\"616\":1,\"845\":1,\"848\":1,\"849\":4,\"851\":1,\"853\":1,\"856\":3,\"858\":4,\"866\":2,\"882\":1,\"887\":1,\"891\":1,\"892\":2,\"893\":4,\"899\":1,\"901\":1,\"902\":1}}],[\"sqlx或者说标准库database\",{\"1\":{\"231\":1}}],[\"sqlx\",{\"1\":{\"52\":2,\"231\":1,\"232\":1,\"234\":2,\"610\":1}}],[\"svg\",{\"1\":{\"559\":1}}],[\"svn\",{\"1\":{\"18\":1,\"493\":1}}],[\"s2\",{\"1\":{\"371\":9,\"585\":2,\"1019\":1}}],[\"sdiffstore\",{\"1\":{\"272\":1}}],[\"sdiff\",{\"1\":{\"272\":1}}],[\"sdks\",{\"1\":{\"145\":1,\"800\":1}}],[\"sdk\",{\"1\":{\"62\":2,\"145\":2}}],[\"ssa\",{\"1\":{\"1021\":2,\"1074\":2}}],[\"ssagen中的escape\",{\"1\":{\"1074\":1}}],[\"ssagen\",{\"1\":{\"1021\":2,\"1076\":1}}],[\"ssn\",{\"1\":{\"934\":2}}],[\"ssevent\",{\"1\":{\"981\":1}}],[\"sse\",{\"1\":{\"503\":2,\"509\":1}}],[\"sscan\",{\"1\":{\"276\":1}}],[\"ss\",{\"1\":{\"165\":1,\"278\":1,\"279\":2,\"280\":4,\"281\":1,\"282\":3,\"780\":2}}],[\"sreclaimable\",{\"1\":{\"918\":1}}],[\"srem\",{\"1\":{\"275\":1}}],[\"srandmembern\",{\"1\":{\"271\":1}}],[\"srv\",{\"1\":{\"165\":8,\"166\":2}}],[\"srctype\",{\"1\":{\"813\":2}}],[\"srcdir\",{\"1\":{\"545\":2,\"546\":1}}],[\"srcfile\",{\"1\":{\"426\":3}}],[\"src\",{\"1\":{\"4\":2,\"7\":3,\"8\":1,\"14\":3,\"296\":1,\"368\":4,\"378\":9,\"419\":1,\"425\":1,\"426\":4,\"603\":2,\"623\":1,\"629\":1,\"636\":4,\"812\":5,\"813\":8,\"957\":4,\"1026\":2,\"1059\":2}}],[\"s的消息\",{\"1\":{\"158\":1}}],[\"s1通过切割的方式创建了一个新的切片\",{\"1\":{\"1019\":1}}],[\"s1与s2是共享的同一个底层数组\",{\"1\":{\"371\":1}}],[\"s1\",{\"1\":{\"114\":2,\"371\":9,\"376\":5,\"1019\":8,\"1024\":6}}],[\"s9\",{\"1\":{\"106\":1}}],[\"snapshot\",{\"1\":{\"138\":1,\"205\":1,\"208\":1}}],[\"snippets\",{\"1\":{\"112\":1}}],[\"snippet\",{\"1\":{\"106\":1,\"111\":1}}],[\"snowflake\",{\"1\":{\"24\":1,\"27\":1}}],[\"skylar\",{\"1\":{\"81\":1}}],[\"skip+1\",{\"1\":{\"1059\":1,\"1060\":2}}],[\"skipdefaulttransaction\",{\"1\":{\"852\":1}}],[\"skiplineending\",{\"1\":{\"839\":3}}],[\"skipf\",{\"1\":{\"521\":2,\"522\":1,\"523\":1}}],[\"skipnow\",{\"1\":{\"521\":1}}],[\"skip=regex\",{\"1\":{\"40\":1}}],[\"skip\",{\"1\":{\"38\":1,\"519\":1,\"521\":2,\"527\":2,\"1059\":1,\"1060\":2}}],[\"smallsizediv\",{\"1\":{\"1125\":1}}],[\"smallsizemax\",{\"1\":{\"1125\":2}}],[\"small\",{\"1\":{\"1123\":1}}],[\"smallestnonzerofloat64\",{\"1\":{\"652\":1}}],[\"smallestnonzerofloat32\",{\"1\":{\"652\":1}}],[\"smartos\",{\"1\":{\"904\":1}}],[\"smartystreets\",{\"1\":{\"55\":1}}],[\"smove\",{\"1\":{\"274\":1}}],[\"smembers\",{\"1\":{\"271\":1}}],[\"smtp\",{\"1\":{\"71\":3,\"817\":3}}],[\"sc\",{\"1\":{\"1114\":4}}],[\"sclose\",{\"1\":{\"1067\":3}}],[\"score\",{\"1\":{\"278\":2,\"281\":1,\"349\":20}}],[\"scoping\",{\"1\":{\"116\":1}}],[\"scav\",{\"1\":{\"1120\":3}}],[\"scavenge\",{\"1\":{\"1086\":1}}],[\"scases\",{\"1\":{\"1067\":17}}],[\"scase数组的头部指针\",{\"1\":{\"1067\":1}}],[\"scase\",{\"1\":{\"1064\":1,\"1067\":3}}],[\"scase结构体表示\",{\"1\":{\"1064\":1}}],[\"scales\",{\"1\":{\"954\":1}}],[\"scale\",{\"1\":{\"862\":1}}],[\"scaleway\",{\"1\":{\"141\":1}}],[\"scard\",{\"1\":{\"271\":1}}],[\"scanbytes+gp\",{\"1\":{\"1139\":1}}],[\"scanbytes\",{\"1\":{\"1139\":7}}],[\"scanwork\",{\"1\":{\"1139\":15}}],[\"scansize\",{\"1\":{\"1137\":2}}],[\"scanstack\",{\"1\":{\"1102\":1}}],[\"scanobject函数在扫描时会不断的将可达的白色对象标记为灰色\",{\"1\":{\"1137\":1}}],[\"scanobject函数继续执行扫描任务\",{\"1\":{\"1137\":1}}],[\"scanobject\",{\"1\":{\"1137\":3,\"1145\":1}}],[\"scanned\",{\"1\":{\"1144\":1}}],[\"scanner和\",{\"1\":{\"853\":1}}],[\"scanner与bufio\",{\"1\":{\"346\":1}}],[\"scanner\",{\"0\":{\"346\":1},\"1\":{\"346\":3,\"583\":6,\"584\":4,\"1095\":1,\"1100\":1}}],[\"scannable\",{\"1\":{\"1116\":1}}],[\"scanalloc\",{\"1\":{\"1099\":1,\"1116\":2}}],[\"scanrows\",{\"1\":{\"882\":1}}],[\"scanlines迭代器是一次性使用的\",{\"1\":{\"584\":1}}],[\"scanlines\",{\"1\":{\"584\":4}}],[\"scanln\",{\"1\":{\"344\":2,\"1054\":1}}],[\"scanf\",{\"1\":{\"344\":1}}],[\"scan\",{\"1\":{\"252\":1,\"344\":2,\"346\":5,\"583\":1,\"584\":1,\"1086\":1,\"1097\":1,\"1101\":1,\"1138\":1}}],[\"schudule是整个\",{\"1\":{\"1089\":1}}],[\"schedenableuser\",{\"1\":{\"1140\":1}}],[\"schedenabled\",{\"1\":{\"1097\":2}}],[\"schedwhen+forcepreemptns\",{\"1\":{\"1107\":1}}],[\"schedwhen\",{\"1\":{\"1107\":1}}],[\"schedlock\",{\"1\":{\"1089\":1}}],[\"schedlink\",{\"1\":{\"1061\":1}}],[\"schedinit函数\",{\"1\":{\"1089\":1}}],[\"schedinit的调用\",{\"1\":{\"1089\":1}}],[\"schedinit\",{\"1\":{\"1089\":3,\"1119\":1}}],[\"schedt\",{\"1\":{\"1088\":1}}],[\"schedt结构体中\",{\"1\":{\"1088\":1}}],[\"schedtick\",{\"1\":{\"1088\":2,\"1107\":3}}],[\"schedule调度循环正式开始调度\",{\"1\":{\"1104\":1}}],[\"schedule\",{\"1\":{\"1089\":1,\"1096\":2,\"1097\":1,\"1098\":1,\"1104\":1,\"1106\":1,\"1138\":1}}],[\"scheduler\",{\"1\":{\"1088\":2}}],[\"scheduling\",{\"1\":{\"1087\":1,\"1097\":1}}],[\"sched用于存储协程上下文信息用于恢复协程的执行现场\",{\"1\":{\"1086\":1}}],[\"sched\",{\"1\":{\"1074\":6,\"1080\":6,\"1086\":1,\"1089\":8,\"1092\":5,\"1093\":2,\"1095\":6,\"1097\":5,\"1101\":3,\"1102\":1,\"1104\":5,\"1106\":3,\"1137\":1,\"1145\":1,\"1153\":1}}],[\"schema\",{\"1\":{\"775\":1,\"852\":1,\"863\":2}}],[\"schemes\",{\"1\":{\"1016\":1}}],[\"scheme\",{\"1\":{\"145\":1,\"174\":5,\"175\":6,\"646\":1}}],[\"schar\",{\"1\":{\"537\":3}}],[\"schools\",{\"1\":{\"899\":3}}],[\"schoolid\",{\"1\":{\"892\":4,\"893\":2,\"899\":2}}],[\"school\",{\"1\":{\"328\":1,\"407\":6,\"735\":4,\"736\":4,\"812\":11,\"813\":4,\"859\":1,\"892\":4,\"893\":4,\"895\":1,\"896\":4,\"897\":1,\"898\":2,\"899\":8}}],[\"schollz\",{\"1\":{\"64\":1}}],[\"scriptexists\",{\"1\":{\"283\":1}}],[\"scriptkill\",{\"1\":{\"283\":1}}],[\"scriptflush\",{\"1\":{\"283\":1}}],[\"scriptload\",{\"1\":{\"283\":1}}],[\"script>\",{\"1\":{\"41\":2}}],[\"scripts\",{\"1\":{\"22\":1,\"31\":1,\"34\":1}}],[\"script\",{\"1\":{\"3\":2,\"214\":1,\"504\":1}}],[\"slightly\",{\"1\":{\"1095\":1}}],[\"slicebytetostring\",{\"1\":{\"1054\":1}}],[\"slicebytetostring函数\",{\"1\":{\"1054\":1}}],[\"slicecopy\",{\"1\":{\"1026\":3,\"1053\":1}}],[\"sliceptr\",{\"1\":{\"1023\":1}}],[\"slicelen\",{\"1\":{\"1023\":1}}],[\"slice结构体的工作并不由makeslice函数来完成\",{\"1\":{\"1020\":1}}],[\"slice值是否唯一\",{\"1\":{\"936\":1}}],[\"sliceheader类型来获取\",{\"1\":{\"753\":1}}],[\"slice是要添加元素的目标切片\",{\"1\":{\"365\":1}}],[\"sliceseq\",{\"1\":{\"587\":19}}],[\"slices\",{\"1\":{\"362\":1,\"370\":5,\"398\":2,\"555\":1,\"560\":1,\"585\":15,\"586\":2,\"587\":4,\"588\":3,\"616\":1}}],[\"slices库新增了若干个迭代器函数\",{\"1\":{\"114\":1}}],[\"slice函数接收一个指针\",{\"1\":{\"754\":1}}],[\"slice函数可以将数组指针转换为切片\",{\"1\":{\"539\":1}}],[\"slice函数\",{\"1\":{\"120\":1}}],[\"slice\",{\"0\":{\"754\":1,\"1018\":1},\"1\":{\"116\":1,\"135\":1,\"362\":10,\"365\":12,\"369\":5,\"370\":2,\"371\":1,\"376\":1,\"414\":11,\"432\":3,\"441\":2,\"484\":3,\"536\":1,\"539\":3,\"553\":1,\"555\":2,\"559\":2,\"560\":4,\"585\":7,\"587\":5,\"728\":3,\"748\":2,\"753\":1,\"754\":2,\"926\":2,\"1019\":7,\"1020\":2,\"1024\":1,\"1025\":3,\"1053\":1,\"1054\":4}}],[\"slicedata就是为了替代它的\",{\"1\":{\"753\":1}}],[\"slicedata直接获取了字符串底层数组的指针\",{\"1\":{\"536\":1}}],[\"slicedata\",{\"0\":{\"753\":1},\"1\":{\"44\":1,\"376\":1,\"536\":2,\"539\":1,\"753\":2,\"754\":1,\"756\":1,\"1019\":4,\"1054\":2}}],[\"slab\",{\"1\":{\"918\":1}}],[\"slow\",{\"1\":{\"1153\":1}}],[\"slot代表的就是对象\",{\"1\":{\"1144\":1}}],[\"slot=ptr是一次赋值操作\",{\"1\":{\"1144\":1}}],[\"slot是原对象\",{\"1\":{\"1144\":1}}],[\"slot\",{\"1\":{\"735\":2,\"736\":3,\"1144\":5}}],[\"slogtest库\",{\"1\":{\"116\":1}}],[\"slog库\",{\"1\":{\"116\":1}}],[\"slog\",{\"1\":{\"37\":1,\"851\":6,\"1063\":4}}],[\"sleep举例\",{\"1\":{\"1098\":1}}],[\"sleeping\",{\"1\":{\"1067\":1}}],[\"sleep来模拟不同的耗时\",{\"1\":{\"479\":1}}],[\"sleep并不是一种良好的解决办法\",{\"1\":{\"462\":1}}],[\"sleep\",{\"0\":{\"743\":1},\"1\":{\"158\":2,\"159\":3,\"247\":1,\"248\":1,\"462\":6,\"467\":1,\"471\":3,\"472\":1,\"476\":1,\"477\":6,\"478\":1,\"479\":2,\"480\":2,\"481\":4,\"482\":4,\"556\":2,\"606\":2,\"743\":3,\"1063\":1,\"1086\":1,\"1098\":1,\"1106\":1,\"1138\":1,\"1165\":1}}],[\"sl\",{\"1\":{\"114\":2,\"951\":4,\"1117\":4,\"1147\":3}}],[\"saveancestors\",{\"1\":{\"1095\":1}}],[\"saveuploadedfile\",{\"1\":{\"984\":1,\"985\":1}}],[\"savepoint\",{\"1\":{\"902\":1}}],[\"savepng\",{\"1\":{\"833\":1,\"834\":1,\"835\":1}}],[\"save方法只能是匹配主键\",{\"1\":{\"867\":1}}],[\"save方法也可以创建记录\",{\"1\":{\"866\":1}}],[\"saved\",{\"1\":{\"849\":1,\"965\":1}}],[\"save\",{\"0\":{\"884\":1},\"1\":{\"849\":2,\"866\":2,\"884\":1,\"1003\":1,\"1097\":1,\"1107\":1}}],[\"saveto\",{\"1\":{\"817\":1}}],[\"sagikazarmark\",{\"1\":{\"798\":1}}],[\"said\",{\"1\":{\"563\":2}}],[\"sayable\",{\"1\":{\"572\":2}}],[\"sayable是一个泛型接口\",{\"1\":{\"572\":1}}],[\"say\",{\"1\":{\"493\":1,\"496\":1,\"498\":1,\"518\":7,\"520\":6,\"565\":1,\"567\":3,\"572\":3,\"1011\":2}}],[\"sayhello函数就是待测函数\",{\"1\":{\"520\":1}}],[\"sayhelloserver\",{\"1\":{\"152\":1}}],[\"sayhello\",{\"1\":{\"151\":1}}],[\"sadd\",{\"1\":{\"270\":2}}],[\"salary\",{\"1\":{\"207\":2,\"208\":1,\"212\":2,\"213\":1,\"214\":2,\"216\":1,\"395\":4,\"398\":4,\"405\":4,\"406\":4}}],[\"sarulabs\",{\"1\":{\"67\":1}}],[\"samplingconfig\",{\"1\":{\"839\":1}}],[\"sampling\",{\"1\":{\"839\":3}}],[\"samples\",{\"1\":{\"526\":5,\"559\":2}}],[\"sample\",{\"1\":{\"198\":1,\"559\":3,\"1011\":2,\"1116\":1}}],[\"samber\",{\"1\":{\"58\":2}}],[\"samesizegrow\",{\"1\":{\"1030\":1,\"1042\":4,\"1043\":3}}],[\"same\",{\"1\":{\"14\":2,\"1095\":1}}],[\"safely\",{\"1\":{\"1089\":1,\"1138\":1}}],[\"safewriteconfigas\",{\"1\":{\"792\":5}}],[\"safewriteconfig\",{\"1\":{\"792\":4}}],[\"safe\",{\"1\":{\"21\":1,\"239\":1,\"503\":1,\"806\":2,\"1050\":1,\"1067\":1,\"1107\":1}}],[\"swept\",{\"1\":{\"1117\":1,\"1118\":1}}],[\"sweepone\",{\"1\":{\"1147\":1}}],[\"sweepone来完成清理工作\",{\"1\":{\"1147\":1}}],[\"sweeparenas\",{\"1\":{\"1118\":1,\"1148\":1}}],[\"sweepgen会随着\",{\"1\":{\"1148\":1}}],[\"sweepgen\",{\"1\":{\"1116\":1,\"1117\":1,\"1148\":10}}],[\"sweep\",{\"1\":{\"1086\":1,\"1117\":4,\"1118\":1,\"1147\":4}}],[\"swaplocked\",{\"1\":{\"1047\":2}}],[\"swapdevice\",{\"1\":{\"920\":1}}],[\"swapdevices\",{\"1\":{\"920\":2}}],[\"swapmemorystat\",{\"1\":{\"919\":1}}],[\"swapmemory\",{\"1\":{\"919\":2}}],[\"swapfree\",{\"1\":{\"918\":1}}],[\"swaptotal\",{\"1\":{\"918\":1}}],[\"swapcached\",{\"1\":{\"918\":1}}],[\"swapped\",{\"1\":{\"490\":1}}],[\"swapint64\",{\"1\":{\"489\":1}}],[\"swap\",{\"1\":{\"489\":2,\"683\":2,\"688\":1,\"1047\":1,\"1101\":1}}],[\"swags\",{\"1\":{\"1016\":1}}],[\"swaggertemplate\",{\"1\":{\"1016\":1}}],[\"swaggerinfo\",{\"1\":{\"1016\":4}}],[\"swaggerindextpl\",{\"1\":{\"1016\":1}}],[\"swaggermu\",{\"1\":{\"1016\":1}}],[\"swaggerfiles\",{\"1\":{\"1011\":2,\"1016\":2}}],[\"swagger\",{\"1\":{\"40\":1,\"1009\":7,\"1010\":5,\"1011\":9,\"1012\":1,\"1014\":2,\"1016\":12,\"1017\":3}}],[\"swaggo\",{\"1\":{\"26\":1,\"1009\":3,\"1010\":4,\"1011\":2}}],[\"swag\",{\"0\":{\"1009\":1},\"1\":{\"6\":1,\"26\":1,\"1009\":4,\"1010\":3,\"1011\":1,\"1016\":7,\"1017\":7}}],[\"swift\",{\"1\":{\"934\":1}}],[\"switch语句还支持一种特殊的写法\",{\"1\":{\"597\":1}}],[\"switch语句也可以没有入口处的表达式\",{\"1\":{\"350\":1}}],[\"switch语句也是一种多分支的判断语句\",{\"1\":{\"350\":1}}],[\"switch\",{\"0\":{\"350\":1},\"1\":{\"168\":1,\"171\":1,\"298\":1,\"326\":1,\"347\":1,\"350\":7,\"503\":1,\"542\":1,\"571\":1,\"573\":1,\"597\":1,\"840\":1,\"842\":1,\"1016\":2,\"1021\":2,\"1024\":1,\"1025\":1,\"1033\":1,\"1058\":1,\"1063\":1,\"1102\":1,\"1107\":1,\"1122\":1,\"1128\":1}}],[\"switching\",{\"1\":{\"18\":1,\"141\":1}}],[\"swigcxx\",{\"1\":{\"21\":1}}],[\"swigcxxfiles\",{\"1\":{\"21\":1}}],[\"swig\",{\"1\":{\"21\":1}}],[\"swigfiles\",{\"1\":{\"21\":1}}],[\"sid\",{\"1\":{\"860\":2}}],[\"sismember\",{\"1\":{\"271\":1}}],[\"since\",{\"1\":{\"996\":1,\"1089\":1,\"1097\":1,\"1101\":1,\"1132\":1,\"1140\":1,\"1169\":1}}],[\"sink\",{\"1\":{\"843\":2}}],[\"sin\",{\"0\":{\"670\":1},\"1\":{\"670\":2,\"919\":1}}],[\"single\",{\"1\":{\"1065\":2}}],[\"singed\",{\"1\":{\"537\":1}}],[\"singular\",{\"1\":{\"187\":1}}],[\"sinterstore\",{\"1\":{\"272\":1}}],[\"sinter\",{\"1\":{\"272\":1}}],[\"sint64\",{\"1\":{\"184\":1}}],[\"sint32\",{\"1\":{\"184\":1}}],[\"size可获得mspan的对象大小\",{\"1\":{\"1114\":1}}],[\"sizeclasses\",{\"1\":{\"1114\":1}}],[\"sizeclass\",{\"1\":{\"1114\":2,\"1117\":2,\"1125\":5}}],[\"sizecache\",{\"1\":{\"152\":4,\"167\":2}}],[\"size决定\",{\"1\":{\"1112\":1}}],[\"size来决定\",{\"1\":{\"1112\":1}}],[\"size来计算预计需要的内存大小\",{\"1\":{\"1058\":1}}],[\"size为\",{\"1\":{\"1058\":1}}],[\"sizemeta\",{\"1\":{\"820\":3}}],[\"sizeof\",{\"0\":{\"748\":1},\"1\":{\"411\":1,\"434\":1,\"539\":2,\"748\":8,\"749\":3,\"750\":3,\"753\":2,\"755\":1,\"1019\":1,\"1020\":2,\"1021\":1,\"1023\":1,\"1024\":2,\"1025\":1,\"1026\":1,\"1027\":3,\"1030\":2,\"1052\":2,\"1095\":1,\"1112\":1,\"1117\":1,\"1118\":1,\"1119\":7,\"1122\":1}}],[\"sizeof函数来计算占用的字节大小\",{\"1\":{\"411\":1}}],[\"size\",{\"0\":{\"434\":1,\"818\":1},\"1\":{\"81\":2,\"198\":1,\"216\":2,\"324\":1,\"393\":1,\"429\":1,\"434\":6,\"553\":1,\"577\":5,\"578\":17,\"795\":2,\"818\":5,\"819\":1,\"820\":9,\"862\":3,\"877\":3,\"984\":3,\"1020\":2,\"1025\":6,\"1026\":3,\"1030\":2,\"1034\":3,\"1039\":3,\"1053\":4,\"1057\":1,\"1058\":11,\"1059\":1,\"1074\":1,\"1089\":5,\"1099\":2,\"1100\":1,\"1111\":2,\"1112\":20,\"1114\":2,\"1117\":3,\"1122\":3,\"1123\":1,\"1124\":6,\"1125\":8,\"1126\":4,\"1128\":1,\"1132\":3,\"1139\":2}}],[\"size=171\",{\"1\":{\"9\":1}}],[\"simple\",{\"1\":{\"71\":2,\"498\":1,\"831\":1}}],[\"simplify\",{\"1\":{\"17\":1}}],[\"sijms\",{\"1\":{\"62\":1}}],[\"sirupsen\",{\"1\":{\"54\":1}}],[\"siglr\",{\"1\":{\"1107\":1}}],[\"sigsp\",{\"1\":{\"1107\":1}}],[\"sigpc\",{\"1\":{\"1107\":1}}],[\"sigpreempt\",{\"1\":{\"1107\":2}}],[\"siginfo\",{\"1\":{\"1107\":1}}],[\"sighandler\",{\"1\":{\"1107\":1}}],[\"sighandler就会派上用场\",{\"1\":{\"1107\":1}}],[\"sigmask\",{\"1\":{\"1091\":1}}],[\"sigctxt\",{\"1\":{\"1107\":1}}],[\"sigcode1\",{\"1\":{\"1080\":2}}],[\"sigcode0\",{\"1\":{\"1080\":2}}],[\"sigchanyzer\",{\"1\":{\"37\":1}}],[\"sig\",{\"1\":{\"1080\":1,\"1107\":2}}],[\"signingmethodrs256\",{\"1\":{\"785\":1}}],[\"signingmethodhmac\",{\"1\":{\"782\":1,\"783\":1}}],[\"signingmethodhs256\",{\"1\":{\"779\":1,\"780\":1,\"781\":1}}],[\"signingmethod\",{\"1\":{\"778\":1}}],[\"sign\",{\"1\":{\"774\":1}}],[\"signature吗\",{\"1\":{\"771\":1}}],[\"signature\",{\"1\":{\"771\":1,\"774\":1,\"778\":1,\"779\":1}}],[\"signal会按照队列先入先出的顺序唤醒阻塞的协程\",{\"1\":{\"1168\":1}}],[\"signalm\",{\"1\":{\"1107\":1}}],[\"signalpending\",{\"1\":{\"1107\":1}}],[\"signal\",{\"0\":{\"1168\":1},\"1\":{\"37\":1,\"482\":1,\"616\":1,\"1063\":2,\"1067\":1,\"1086\":2,\"1087\":2,\"1107\":1,\"1166\":1,\"1168\":1}}],[\"signedstring\",{\"1\":{\"779\":3,\"780\":1,\"781\":3,\"785\":4}}],[\"signedint\",{\"1\":{\"574\":7,\"575\":4}}],[\"signed\",{\"1\":{\"140\":1,\"537\":4}}],[\"sbinet\",{\"1\":{\"75\":1}}],[\"sb\",{\"1\":{\"9\":4,\"45\":8,\"1038\":4,\"1053\":1,\"1066\":4,\"1067\":23,\"1089\":14,\"1107\":2,\"1153\":1}}],[\"s参数\",{\"1\":{\"9\":1}}],[\"spc\",{\"1\":{\"1116\":4,\"1125\":9,\"1126\":2}}],[\"spcae\",{\"1\":{\"560\":1}}],[\"spanalloc分配器释放mspan\",{\"1\":{\"1121\":1}}],[\"spanalloc分配\",{\"1\":{\"1120\":1}}],[\"spanalloctype\",{\"1\":{\"1120\":1,\"1121\":1}}],[\"spanalloc和负责页分配的分配器mheap\",{\"1\":{\"1119\":1}}],[\"spanalloc\",{\"1\":{\"1118\":1,\"1119\":2,\"1120\":2,\"1121\":1}}],[\"spanallocstack\",{\"1\":{\"1100\":1}}],[\"spanbudget\",{\"1\":{\"1117\":4}}],[\"spanset\",{\"1\":{\"1117\":2}}],[\"spans\",{\"1\":{\"1115\":2,\"1117\":1,\"1118\":2}}],[\"spansize\",{\"1\":{\"1114\":1}}],[\"spanclass决定了mspan的固定大小\",{\"1\":{\"1123\":1}}],[\"spanclass表示所存储的mspan类型\",{\"1\":{\"1117\":1}}],[\"spanclass自身是一个uint8类型的整数\",{\"1\":{\"1114\":1}}],[\"spanclass\",{\"1\":{\"1114\":5,\"1116\":1,\"1117\":5,\"1119\":1,\"1120\":3,\"1125\":3}}],[\"span\",{\"1\":{\"1099\":1,\"1114\":7,\"1116\":3,\"1118\":1,\"1124\":4,\"1125\":4,\"1126\":6,\"1137\":2}}],[\"sparg\",{\"1\":{\"1095\":2}}],[\"space\",{\"1\":{\"104\":1,\"559\":1,\"560\":1,\"1095\":1,\"1111\":2,\"1120\":1,\"1121\":1,\"1122\":2}}],[\"spin\",{\"1\":{\"1153\":5}}],[\"spinning\",{\"1\":{\"1087\":2,\"1104\":1}}],[\"spill\",{\"1\":{\"551\":1,\"553\":2}}],[\"sp和pc记录了调用方的函数信息\",{\"1\":{\"1073\":1}}],[\"sprig\",{\"1\":{\"722\":1}}],[\"sprintln\",{\"1\":{\"728\":1}}],[\"sprint\",{\"1\":{\"728\":1}}],[\"sprintf一致\",{\"1\":{\"725\":1}}],[\"sprintf函数来进行字符串格式化\",{\"1\":{\"722\":1}}],[\"sprintf或者fmt\",{\"1\":{\"341\":1}}],[\"sprintf\",{\"1\":{\"145\":2,\"153\":1,\"165\":4,\"166\":8,\"216\":1,\"416\":1,\"496\":2,\"725\":1,\"728\":3,\"1007\":1,\"1011\":2}}],[\"spring\",{\"1\":{\"326\":3,\"821\":1}}],[\"splitaftern\",{\"1\":{\"716\":2}}],[\"splitafter\",{\"1\":{\"716\":2}}],[\"splitn\",{\"1\":{\"716\":2}}],[\"split\",{\"1\":{\"716\":2,\"1097\":1}}],[\"splitting\",{\"1\":{\"561\":1}}],[\"spoiled\",{\"1\":{\"1097\":1}}],[\"spopn\",{\"1\":{\"273\":1}}],[\"spop\",{\"1\":{\"273\":1}}],[\"spoken\",{\"1\":{\"140\":1}}],[\"speed\",{\"1\":{\"198\":2}}],[\"spec\",{\"1\":{\"168\":1,\"1016\":1}}],[\"specifies\",{\"1\":{\"563\":1}}],[\"specified\",{\"1\":{\"10\":1,\"14\":1,\"34\":1,\"416\":1,\"504\":2}}],[\"specification\",{\"1\":{\"289\":1,\"1009\":1}}],[\"specific\",{\"1\":{\"195\":2}}],[\"specialpincounter\",{\"1\":{\"1118\":1,\"1119\":1}}],[\"specialpincounteralloc\",{\"1\":{\"1118\":1,\"1119\":1}}],[\"specialprofile\",{\"1\":{\"1118\":1,\"1119\":1}}],[\"specialprofilealloc\",{\"1\":{\"1118\":1,\"1119\":1}}],[\"specialreachable\",{\"1\":{\"1118\":1,\"1119\":1}}],[\"specialreachablealloc\",{\"1\":{\"1118\":1,\"1119\":1}}],[\"specialfinalizer\",{\"1\":{\"1118\":1,\"1119\":1}}],[\"specialfinalizeralloc\",{\"1\":{\"1118\":1,\"1119\":1}}],[\"specialcase\",{\"1\":{\"717\":4}}],[\"special\",{\"1\":{\"4\":1}}],[\"speaking\",{\"1\":{\"140\":1}}],[\"spew\",{\"1\":{\"28\":5}}],[\"spurious\",{\"1\":{\"17\":1,\"1059\":1}}],[\"sp\",{\"1\":{\"9\":6,\"45\":2,\"1038\":1,\"1053\":1,\"1066\":1,\"1067\":5,\"1073\":2,\"1074\":1,\"1075\":3,\"1078\":1,\"1079\":2,\"1080\":4,\"1086\":1,\"1089\":5,\"1095\":7,\"1097\":3,\"1101\":2,\"1102\":1,\"1107\":2}}],[\"spf13\",{\"0\":{\"806\":1},\"1\":{\"7\":15,\"26\":1,\"56\":1,\"63\":1,\"64\":2,\"786\":2,\"787\":1,\"806\":2,\"808\":1}}],[\"sout\",{\"1\":{\"919\":1}}],[\"sources\",{\"1\":{\"17\":3,\"21\":1,\"140\":1}}],[\"source\",{\"1\":{\"4\":1,\"9\":1,\"14\":1,\"17\":1,\"21\":12,\"37\":1,\"88\":1,\"200\":1,\"213\":1,\"560\":1,\"851\":1}}],[\"softirq\",{\"1\":{\"912\":8}}],[\"softlayer\",{\"1\":{\"141\":1}}],[\"somthing\",{\"1\":{\"567\":1,\"1037\":1}}],[\"somehandler\",{\"1\":{\"975\":1}}],[\"somefile\",{\"1\":{\"957\":2}}],[\"some\",{\"1\":{\"587\":1,\"603\":1,\"759\":1,\"763\":10,\"764\":1,\"765\":1,\"766\":1,\"767\":1,\"1045\":1}}],[\"some等常用的功能\",{\"1\":{\"587\":1}}],[\"something\",{\"1\":{\"464\":1,\"568\":2,\"1056\":1,\"1066\":9,\"1097\":1}}],[\"somerpc\",{\"1\":{\"163\":3}}],[\"son\",{\"1\":{\"550\":6}}],[\"sonic\",{\"1\":{\"24\":1,\"63\":2,\"503\":2,\"509\":2,\"510\":4}}],[\"so\",{\"1\":{\"520\":1,\"1016\":1,\"1024\":1,\"1041\":1,\"1089\":3,\"1095\":2,\"1097\":3,\"1100\":1,\"1101\":1,\"1107\":1,\"1120\":2,\"1153\":1}}],[\"soon\",{\"1\":{\"520\":1}}],[\"socket写超时时间\",{\"1\":{\"242\":1}}],[\"socket读取超时时间\",{\"1\":{\"242\":1}}],[\"sockets\",{\"1\":{\"174\":1}}],[\"sortstablefunc\",{\"1\":{\"587\":1}}],[\"sortstable\",{\"1\":{\"587\":1}}],[\"sortslice\",{\"1\":{\"555\":2,\"559\":1,\"560\":3}}],[\"sorted\",{\"1\":{\"586\":1}}],[\"sortedslices\",{\"1\":{\"586\":1}}],[\"sortfunc接受两个参数\",{\"1\":{\"398\":1}}],[\"sortfunc\",{\"1\":{\"398\":1,\"587\":1}}],[\"sort\",{\"0\":{\"683\":1},\"1\":{\"225\":1,\"555\":1,\"560\":1,\"587\":1,\"616\":1,\"684\":1,\"685\":1,\"686\":1,\"687\":4,\"688\":2,\"689\":3,\"859\":1}}],[\"solaris\",{\"1\":{\"7\":1,\"904\":1}}],[\"stwreadmemstats\",{\"1\":{\"1128\":1}}],[\"stw\",{\"1\":{\"1085\":1,\"1128\":2,\"1130\":1,\"1134\":2,\"1137\":1,\"1140\":3,\"1141\":1,\"1142\":3,\"1143\":2,\"1144\":5}}],[\"stktopsp\",{\"1\":{\"1095\":1,\"1101\":1}}],[\"stksize\",{\"1\":{\"1074\":2}}],[\"stkobj\",{\"1\":{\"9\":1}}],[\"stmt\",{\"1\":{\"1061\":1}}],[\"stub\",{\"1\":{\"823\":1}}],[\"stuff\",{\"1\":{\"572\":4}}],[\"studentname\",{\"1\":{\"812\":11,\"813\":4}}],[\"studentid\",{\"1\":{\"812\":11,\"813\":5}}],[\"student\",{\"1\":{\"407\":8,\"736\":2,\"812\":15,\"813\":8}}],[\"studygolang\",{\"1\":{\"98\":1,\"101\":1}}],[\"style\",{\"1\":{\"524\":1}}],[\"st\",{\"1\":{\"406\":1}}],[\"stole\",{\"1\":{\"1104\":1}}],[\"stolen\",{\"1\":{\"1091\":1,\"1139\":6}}],[\"stoptheworldwithsema进行\",{\"1\":{\"1140\":1}}],[\"stoptheworld\",{\"1\":{\"1128\":1}}],[\"stopwait\",{\"1\":{\"1097\":2}}],[\"stopm给暂停\",{\"1\":{\"1104\":1}}],[\"stopm进入空闲状态\",{\"1\":{\"1097\":1}}],[\"stopm\",{\"1\":{\"1093\":1,\"1097\":1}}],[\"stopm函数来暂停线程\",{\"1\":{\"1093\":1}}],[\"stopped\",{\"1\":{\"1089\":1}}],[\"stopping\",{\"1\":{\"1086\":1}}],[\"stops\",{\"1\":{\"1080\":1}}],[\"stop函数会结束迭代过程\",{\"1\":{\"583\":1}}],[\"stop\",{\"1\":{\"556\":1,\"583\":6,\"584\":2,\"588\":2,\"741\":1,\"742\":1,\"1042\":4,\"1063\":2,\"1130\":1}}],[\"stopcpuprofile\",{\"1\":{\"556\":1}}],[\"storage\",{\"1\":{\"551\":1,\"552\":1,\"553\":4,\"1089\":1}}],[\"storepnowb\",{\"1\":{\"1122\":1}}],[\"stores\",{\"1\":{\"1016\":1}}],[\"storeint64\",{\"1\":{\"489\":1}}],[\"storeuint32\",{\"1\":{\"484\":1}}],[\"store\",{\"1\":{\"7\":1,\"93\":1,\"158\":4,\"159\":4,\"164\":1,\"272\":4,\"486\":5,\"489\":2,\"491\":5,\"563\":2,\"817\":2,\"1003\":2,\"1023\":1,\"1046\":1,\"1047\":1,\"1049\":1,\"1059\":1,\"1060\":1,\"1067\":2,\"1092\":1,\"1097\":1,\"1116\":1,\"1132\":1,\"1140\":1,\"1148\":1,\"1168\":1,\"1169\":1,\"1173\":1,\"1177\":2}}],[\"stored\",{\"1\":{\"7\":1}}],[\"stock\",{\"1\":{\"195\":4}}],[\"strongly\",{\"1\":{\"838\":1}}],[\"stroke\",{\"1\":{\"835\":1}}],[\"stripmono\",{\"1\":{\"737\":1}}],[\"stringtoslicebyte\",{\"1\":{\"1054\":2}}],[\"string本身只占很小的内存即一个指向真实数据的指针\",{\"1\":{\"1052\":1}}],[\"stringheader\",{\"1\":{\"1052\":3}}],[\"string可以是空的\",{\"1\":{\"1051\":1}}],[\"string类型通常是utf\",{\"1\":{\"1051\":1}}],[\"string是不可变的\",{\"1\":{\"1051\":1}}],[\"string是\",{\"1\":{\"1051\":2}}],[\"string方式进行渲染\",{\"1\":{\"981\":1}}],[\"string方法上的注释如下说道\",{\"1\":{\"952\":1}}],[\"stringvar\",{\"1\":{\"496\":1,\"633\":1,\"636\":1}}],[\"stringvalue\",{\"1\":{\"157\":3,\"158\":5,\"162\":2,\"164\":2,\"168\":1}}],[\"string指针\",{\"1\":{\"393\":1}}],[\"stringdataonstack\",{\"1\":{\"1053\":1}}],[\"stringdata来代替\",{\"1\":{\"1052\":1}}],[\"stringdata和string在字符串与字节切片的转换过程中不涉及内存拷贝\",{\"1\":{\"756\":1}}],[\"stringdata\",{\"0\":{\"755\":1},\"1\":{\"376\":2,\"755\":2,\"1052\":1,\"1054\":3}}],[\"stringdata函数\",{\"1\":{\"117\":1}}],[\"string=\",{\"1\":{\"341\":1}}],[\"string>\",{\"1\":{\"168\":1}}],[\"stringstruct\",{\"1\":{\"1052\":1}}],[\"stringstruct结构体表示\",{\"1\":{\"1052\":1}}],[\"strings\",{\"0\":{\"702\":1},\"1\":{\"114\":1,\"378\":1,\"379\":1,\"433\":2,\"525\":3,\"527\":1,\"587\":1,\"616\":1,\"686\":3,\"702\":3,\"703\":1,\"704\":1,\"705\":4,\"706\":8,\"707\":3,\"708\":1,\"709\":3,\"710\":2,\"711\":2,\"712\":5,\"713\":3,\"714\":2,\"715\":4,\"716\":4,\"717\":4,\"718\":5,\"719\":3,\"720\":1,\"721\":1,\"952\":2,\"1051\":1}}],[\"stringintconv\",{\"1\":{\"37\":1}}],[\"string\",{\"0\":{\"756\":1,\"1051\":1},\"1\":{\"10\":2,\"13\":1,\"16\":3,\"21\":63,\"34\":6,\"37\":1,\"41\":4,\"44\":2,\"45\":3,\"106\":1,\"107\":2,\"108\":2,\"112\":1,\"114\":5,\"115\":1,\"117\":1,\"132\":2,\"145\":5,\"151\":2,\"152\":2,\"153\":1,\"154\":1,\"158\":5,\"159\":6,\"160\":4,\"161\":7,\"163\":1,\"164\":2,\"166\":11,\"167\":3,\"168\":10,\"171\":1,\"174\":2,\"175\":11,\"181\":3,\"182\":2,\"184\":2,\"185\":1,\"187\":3,\"188\":3,\"189\":1,\"190\":6,\"194\":1,\"196\":2,\"202\":4,\"205\":1,\"208\":3,\"210\":1,\"216\":3,\"222\":2,\"224\":2,\"225\":4,\"231\":1,\"232\":1,\"234\":3,\"242\":3,\"258\":1,\"283\":2,\"307\":1,\"319\":1,\"320\":1,\"324\":2,\"326\":2,\"328\":4,\"329\":3,\"330\":1,\"341\":4,\"344\":1,\"349\":2,\"375\":7,\"376\":4,\"377\":5,\"378\":5,\"379\":6,\"380\":5,\"382\":5,\"383\":3,\"384\":3,\"385\":2,\"386\":2,\"387\":2,\"389\":1,\"391\":1,\"393\":2,\"395\":5,\"396\":2,\"397\":1,\"398\":1,\"403\":3,\"404\":2,\"405\":6,\"406\":5,\"407\":6,\"409\":3,\"416\":3,\"417\":4,\"418\":4,\"420\":1,\"421\":2,\"424\":1,\"425\":2,\"426\":3,\"429\":4,\"431\":1,\"432\":5,\"433\":2,\"434\":1,\"436\":4,\"437\":4,\"441\":1,\"443\":2,\"447\":4,\"448\":5,\"450\":4,\"451\":10,\"454\":1,\"455\":4,\"457\":1,\"464\":1,\"469\":1,\"485\":2,\"496\":3,\"513\":4,\"523\":1,\"525\":2,\"527\":17,\"528\":1,\"536\":19,\"542\":2,\"550\":1,\"551\":9,\"556\":1,\"565\":2,\"567\":13,\"568\":2,\"572\":20,\"573\":6,\"578\":1,\"584\":2,\"585\":4,\"587\":1,\"591\":2,\"593\":1,\"594\":8,\"597\":2,\"598\":3,\"599\":1,\"601\":3,\"602\":2,\"603\":3,\"604\":1,\"605\":1,\"608\":1,\"618\":4,\"619\":1,\"621\":4,\"622\":1,\"624\":3,\"625\":1,\"626\":3,\"627\":2,\"629\":1,\"632\":1,\"633\":2,\"635\":1,\"636\":2,\"638\":1,\"648\":2,\"649\":1,\"675\":1,\"676\":1,\"677\":1,\"678\":1,\"679\":1,\"680\":1,\"682\":1,\"686\":1,\"688\":3,\"692\":1,\"693\":1,\"694\":1,\"695\":1,\"697\":1,\"698\":1,\"699\":1,\"700\":1,\"701\":1,\"704\":2,\"705\":1,\"706\":3,\"707\":1,\"708\":3,\"709\":1,\"710\":4,\"711\":2,\"712\":5,\"713\":2,\"714\":2,\"715\":4,\"716\":8,\"717\":8,\"718\":10,\"719\":1,\"720\":1,\"721\":2,\"723\":4,\"725\":6,\"727\":1,\"728\":6,\"730\":2,\"731\":2,\"733\":9,\"734\":2,\"735\":1,\"736\":4,\"740\":1,\"748\":4,\"749\":1,\"750\":1,\"751\":2,\"755\":2,\"756\":3,\"778\":6,\"781\":1,\"784\":1,\"791\":18,\"792\":2,\"797\":3,\"798\":2,\"812\":18,\"813\":10,\"817\":4,\"818\":2,\"820\":3,\"823\":1,\"824\":3,\"826\":6,\"828\":1,\"830\":7,\"838\":1,\"839\":13,\"840\":7,\"852\":2,\"853\":4,\"854\":4,\"855\":6,\"856\":9,\"857\":1,\"858\":8,\"859\":9,\"860\":5,\"862\":1,\"863\":21,\"866\":1,\"867\":1,\"871\":4,\"874\":2,\"875\":3,\"878\":2,\"879\":1,\"880\":1,\"885\":1,\"886\":1,\"887\":3,\"891\":3,\"892\":4,\"893\":5,\"894\":1,\"898\":2,\"899\":1,\"914\":1,\"916\":2,\"938\":1,\"942\":2,\"943\":5,\"944\":1,\"946\":5,\"948\":2,\"949\":2,\"950\":1,\"951\":2,\"952\":13,\"953\":1,\"960\":1,\"968\":2,\"969\":1,\"970\":4,\"971\":4,\"974\":2,\"975\":3,\"977\":4,\"979\":1,\"981\":13,\"982\":1,\"984\":3,\"985\":2,\"988\":1,\"989\":1,\"990\":2,\"991\":1,\"999\":3,\"1007\":2,\"1008\":1,\"1011\":2,\"1012\":2,\"1013\":1,\"1014\":3,\"1016\":9,\"1024\":1,\"1038\":6,\"1051\":5,\"1052\":3,\"1053\":20,\"1054\":11,\"1067\":1,\"1071\":1,\"1086\":1,\"1087\":1}}],[\"strconv\",{\"0\":{\"690\":1},\"1\":{\"616\":1,\"690\":3,\"691\":1,\"692\":1,\"693\":1,\"694\":3,\"695\":2,\"696\":2,\"697\":2,\"698\":6,\"699\":3,\"700\":3,\"701\":3}}],[\"strconcat\",{\"1\":{\"525\":1}}],[\"strch\",{\"1\":{\"464\":1}}],[\"str2\",{\"1\":{\"377\":5}}],[\"str\",{\"1\":{\"328\":1,\"341\":3,\"350\":8,\"375\":11,\"376\":7,\"377\":4,\"379\":8,\"380\":17,\"431\":2,\"438\":2,\"443\":3,\"527\":22,\"608\":2,\"693\":2,\"694\":1,\"711\":3,\"755\":4,\"756\":2,\"820\":2,\"1052\":8,\"1053\":4,\"1054\":14}}],[\"stranger\",{\"1\":{\"166\":1,\"985\":3}}],[\"strength\",{\"1\":{\"881\":2}}],[\"stream等之类的\",{\"1\":{\"217\":1}}],[\"streamname\",{\"1\":{\"166\":4}}],[\"streampersonclientinterceptor\",{\"1\":{\"166\":5,\"167\":1,\"170\":2}}],[\"streampersonloginterceptor\",{\"1\":{\"165\":3}}],[\"streamer\",{\"1\":{\"166\":12}}],[\"streamdesc\",{\"1\":{\"166\":6}}],[\"streamclientinterceptor\",{\"1\":{\"166\":3}}],[\"streaminterceptor也是同理\",{\"1\":{\"165\":1}}],[\"streaminterceptor\",{\"1\":{\"165\":1}}],[\"streaming\",{\"1\":{\"157\":2}}],[\"streamhandler\",{\"1\":{\"165\":6}}],[\"streamrpc\",{\"1\":{\"163\":3}}],[\"stream\",{\"1\":{\"56\":2,\"141\":1,\"157\":5,\"158\":7,\"159\":5,\"163\":5,\"164\":1,\"165\":5,\"166\":14,\"167\":2,\"196\":4,\"981\":1,\"986\":1}}],[\"streamserverinfo\",{\"1\":{\"165\":3}}],[\"streamserverinterceptor\",{\"1\":{\"165\":3}}],[\"streams\",{\"1\":{\"56\":2}}],[\"stress\",{\"1\":{\"55\":2}}],[\"stretchr\",{\"1\":{\"28\":4,\"55\":1}}],[\"structlevel\",{\"1\":{\"951\":1}}],[\"structnamespace\",{\"1\":{\"942\":1}}],[\"struct方法用于验证一个结构体所有公开的字段\",{\"1\":{\"942\":1}}],[\"structprovider\",{\"1\":{\"828\":1}}],[\"structtype\",{\"1\":{\"828\":1}}],[\"structtag\",{\"1\":{\"37\":1,\"448\":1,\"450\":2}}],[\"struct来利用其他\",{\"1\":{\"828\":1}}],[\"structfield\",{\"1\":{\"448\":9,\"942\":1,\"952\":2}}],[\"structfield结构的结构如下\",{\"1\":{\"448\":1}}],[\"structures\",{\"1\":{\"1086\":1,\"1101\":1,\"1122\":1}}],[\"structured\",{\"1\":{\"836\":1,\"838\":1}}],[\"structure\",{\"1\":{\"233\":1,\"579\":1,\"1037\":2,\"1118\":1}}],[\"structs\",{\"1\":{\"114\":1,\"1073\":1}}],[\"struct\",{\"1\":{\"21\":4,\"34\":4,\"114\":1,\"115\":2,\"129\":2,\"145\":2,\"152\":3,\"153\":1,\"158\":2,\"159\":1,\"164\":1,\"166\":1,\"167\":1,\"175\":3,\"200\":1,\"206\":1,\"222\":1,\"224\":1,\"225\":2,\"234\":1,\"242\":1,\"298\":1,\"320\":1,\"341\":1,\"388\":2,\"395\":1,\"398\":1,\"403\":1,\"404\":2,\"405\":1,\"406\":1,\"407\":6,\"409\":1,\"410\":3,\"411\":1,\"414\":2,\"428\":5,\"429\":1,\"432\":3,\"435\":1,\"436\":2,\"437\":2,\"447\":1,\"448\":1,\"451\":1,\"455\":1,\"467\":9,\"471\":2,\"474\":2,\"475\":1,\"476\":1,\"477\":1,\"484\":2,\"485\":1,\"491\":1,\"513\":1,\"524\":1,\"540\":6,\"550\":2,\"553\":1,\"567\":3,\"572\":5,\"573\":2,\"574\":2,\"578\":2,\"587\":1,\"601\":1,\"602\":1,\"603\":1,\"618\":1,\"621\":1,\"624\":1,\"626\":1,\"645\":1,\"688\":1,\"719\":2,\"725\":2,\"748\":2,\"749\":1,\"750\":1,\"751\":1,\"778\":2,\"781\":1,\"797\":1,\"810\":4,\"812\":5,\"813\":3,\"820\":1,\"823\":3,\"824\":3,\"827\":1,\"828\":5,\"829\":1,\"830\":1,\"839\":3,\"840\":2,\"852\":1,\"853\":1,\"854\":1,\"855\":1,\"856\":2,\"857\":2,\"858\":2,\"859\":2,\"860\":5,\"863\":2,\"866\":1,\"891\":2,\"892\":3,\"893\":5,\"926\":4,\"942\":3,\"946\":5,\"948\":2,\"949\":3,\"950\":4,\"951\":2,\"952\":5,\"953\":2,\"971\":1,\"977\":1,\"1012\":1,\"1013\":1,\"1014\":2,\"1016\":1,\"1019\":1,\"1030\":4,\"1032\":1,\"1037\":1,\"1042\":1,\"1045\":3,\"1052\":2,\"1056\":2,\"1057\":2,\"1059\":1,\"1063\":2,\"1064\":1,\"1069\":1,\"1070\":1,\"1071\":1,\"1073\":3,\"1074\":1,\"1078\":2,\"1080\":1,\"1086\":3,\"1087\":1,\"1088\":3,\"1099\":2,\"1111\":1,\"1112\":2,\"1114\":1,\"1115\":2,\"1116\":1,\"1117\":3,\"1118\":2,\"1124\":1,\"1128\":2,\"1129\":1,\"1132\":1,\"1145\":2,\"1151\":1,\"1155\":1,\"1166\":2,\"1172\":1,\"1176\":1}}],[\"step\",{\"1\":{\"981\":1}}],[\"stepping\",{\"1\":{\"909\":1}}],[\"stealwork会随机选一个\",{\"1\":{\"1104\":1}}],[\"stealwork\",{\"1\":{\"1104\":1}}],[\"steal\",{\"1\":{\"912\":8}}],[\"steam\",{\"1\":{\"20\":1,\"24\":1,\"27\":1}}],[\"stext\",{\"1\":{\"9\":1}}],[\"stays\",{\"1\":{\"1030\":1}}],[\"standalone\",{\"1\":{\"907\":1,\"1016\":2}}],[\"standard\",{\"1\":{\"17\":5,\"21\":2,\"209\":2}}],[\"starving\",{\"1\":{\"1153\":6}}],[\"starvationthresholdns\",{\"1\":{\"1151\":1,\"1153\":1}}],[\"starlark\",{\"1\":{\"504\":1}}],[\"star\",{\"1\":{\"95\":1,\"849\":1}}],[\"startgctransition\",{\"1\":{\"1140\":1}}],[\"startcycle\",{\"1\":{\"1138\":1}}],[\"startcpuprofile\",{\"1\":{\"556\":1}}],[\"startcpuprofile函数\",{\"1\":{\"556\":1}}],[\"starttheworldwithsema让程序恢复运行\",{\"1\":{\"1140\":1}}],[\"starttheworld\",{\"1\":{\"1128\":1}}],[\"startaddr记录着这些页的起始地址和mspan\",{\"1\":{\"1114\":1}}],[\"startaddr\",{\"1\":{\"1114\":1}}],[\"startpc表示当前协程入口函数的地址\",{\"1\":{\"1086\":1}}],[\"startpc\",{\"1\":{\"1086\":1,\"1095\":2}}],[\"startpanic\",{\"1\":{\"1079\":1}}],[\"started\",{\"1\":{\"1037\":1,\"1073\":1,\"1079\":3,\"1089\":1,\"1132\":4}}],[\"startbucket\",{\"1\":{\"1037\":5}}],[\"startindex\",{\"1\":{\"362\":1}}],[\"starting\",{\"1\":{\"141\":1}}],[\"start\",{\"1\":{\"10\":1,\"108\":1,\"111\":1,\"112\":1,\"175\":2,\"209\":7,\"462\":9,\"471\":1,\"472\":2,\"547\":2,\"556\":1,\"743\":2,\"996\":2,\"1037\":1,\"1089\":3,\"1132\":1,\"1140\":2}}],[\"startswith\",{\"1\":{\"933\":1}}],[\"startsnotwith\",{\"1\":{\"933\":1}}],[\"starts\",{\"1\":{\"5\":1,\"504\":1,\"1089\":1}}],[\"stable\",{\"1\":{\"89\":1}}],[\"stackinuse\",{\"1\":{\"1128\":1}}],[\"stackinit函数负责来初始化全局的栈空间缓存stackpool和stacklarge\",{\"1\":{\"1099\":1}}],[\"stackinit\",{\"1\":{\"1089\":1,\"1099\":1}}],[\"stacknosplit\",{\"1\":{\"1102\":1}}],[\"stacknocache\",{\"1\":{\"1100\":1}}],[\"stackfree\",{\"1\":{\"1101\":1}}],[\"stackfreelist\",{\"1\":{\"1099\":1,\"1116\":1}}],[\"stacksys\",{\"1\":{\"1128\":1}}],[\"stacks\",{\"1\":{\"1101\":1,\"1128\":1}}],[\"stacklog2\",{\"1\":{\"1100\":1}}],[\"stacklarge\",{\"1\":{\"1099\":3,\"1100\":5}}],[\"stackalloc\",{\"1\":{\"1100\":2,\"1101\":1}}],[\"stackalign\",{\"1\":{\"1095\":1}}],[\"stackcacherefill\",{\"1\":{\"1100\":1}}],[\"stackcache\",{\"1\":{\"1099\":1,\"1100\":4,\"1116\":1}}],[\"stackcachesize\",{\"1\":{\"1099\":1,\"1100\":1}}],[\"stackpoolalloc\",{\"1\":{\"1100\":1}}],[\"stackpool\",{\"1\":{\"1099\":3,\"1100\":2}}],[\"stackpreempt时\",{\"1\":{\"1106\":1}}],[\"stackpreempt表示在准备工作完成后将\",{\"1\":{\"1097\":1}}],[\"stackpreempt\",{\"1\":{\"1086\":3,\"1097\":2,\"1106\":1,\"1107\":1}}],[\"stackmin\",{\"1\":{\"1095\":1,\"1100\":1}}],[\"stackguardmultiplier\",{\"1\":{\"1089\":1}}],[\"stackguard\",{\"1\":{\"1089\":2,\"1097\":2,\"1101\":1,\"1104\":1,\"1106\":1}}],[\"stackguard1\",{\"1\":{\"1089\":2}}],[\"stackguard0设置为stackpreempt\",{\"1\":{\"1106\":1}}],[\"stackguard0进行抢占判断\",{\"1\":{\"1106\":1}}],[\"stackguard0\",{\"1\":{\"1086\":3,\"1089\":2,\"1097\":4,\"1101\":1,\"1104\":1,\"1106\":5,\"1107\":1}}],[\"stacktrace\",{\"1\":{\"840\":5,\"843\":1}}],[\"stacktracekey\",{\"1\":{\"839\":3,\"840\":1}}],[\"stack\",{\"1\":{\"24\":1,\"168\":1,\"203\":1,\"552\":1,\"1067\":2,\"1073\":2,\"1074\":2,\"1086\":3,\"1087\":2,\"1089\":8,\"1095\":2,\"1096\":1,\"1097\":4,\"1100\":6,\"1101\":11,\"1102\":6,\"1104\":1,\"1106\":1,\"1107\":1,\"1141\":1,\"1144\":4}}],[\"stackoverflow\",{\"1\":{\"24\":1}}],[\"stale==true\",{\"1\":{\"21\":1}}],[\"stalereason\",{\"1\":{\"21\":1}}],[\"stale\",{\"1\":{\"21\":1}}],[\"stats\",{\"1\":{\"1118\":1,\"1140\":1}}],[\"stat\",{\"1\":{\"416\":2,\"426\":1,\"1112\":5}}],[\"state+1\",{\"1\":{\"1178\":2}}],[\"state进行移位操作\",{\"1\":{\"1177\":1}}],[\"state是一个32位的整数类型\",{\"1\":{\"1151\":1}}],[\"state\",{\"1\":{\"145\":1,\"152\":2,\"167\":1,\"175\":1,\"416\":1,\"542\":6,\"1042\":1,\"1114\":1,\"1121\":1,\"1147\":3,\"1151\":2,\"1152\":2,\"1153\":7,\"1154\":3,\"1176\":2,\"1177\":14,\"1178\":14}}],[\"statement以了解更多细节\",{\"1\":{\"355\":1}}],[\"statement2\",{\"1\":{\"350\":1}}],[\"statement1\",{\"1\":{\"350\":1}}],[\"statement\",{\"1\":{\"21\":1,\"350\":1,\"354\":5,\"718\":10}}],[\"status表示\",{\"1\":{\"1088\":1}}],[\"status==gwaiting\",{\"1\":{\"1086\":1}}],[\"statusinternalservererror\",{\"1\":{\"1016\":1}}],[\"statuscode\",{\"1\":{\"1007\":1}}],[\"statusmovedpermanently\",{\"1\":{\"991\":1}}],[\"statusmethodnotallowed\",{\"1\":{\"990\":1,\"1016\":1}}],[\"statusnotfound\",{\"1\":{\"989\":1,\"990\":1,\"1016\":2}}],[\"statusnocontent\",{\"1\":{\"958\":1,\"1000\":1}}],[\"statusbadrequest\",{\"1\":{\"971\":2,\"974\":1,\"977\":1,\"984\":2,\"985\":1}}],[\"statusok代表着200状态码\",{\"1\":{\"979\":1}}],[\"statusok\",{\"1\":{\"965\":1,\"968\":2,\"969\":1,\"970\":2,\"971\":1,\"974\":1,\"975\":3,\"977\":1,\"979\":1,\"980\":1,\"982\":1,\"984\":1,\"985\":1,\"991\":1,\"1016\":1}}],[\"statusunauthorized\",{\"1\":{\"960\":2}}],[\"statustext\",{\"1\":{\"960\":1,\"1016\":1}}],[\"status包提供了相当多的函数以方\",{\"1\":{\"168\":1}}],[\"status\",{\"1\":{\"107\":1,\"143\":2,\"144\":3,\"152\":1,\"158\":3,\"167\":5,\"168\":23,\"171\":1,\"527\":2,\"1067\":1,\"1088\":2,\"1089\":3,\"1097\":5,\"1098\":5,\"1101\":1,\"1106\":1,\"1107\":1}}],[\"staticauxcall\",{\"1\":{\"1074\":1}}],[\"staticuint64s\",{\"1\":{\"1054\":1}}],[\"staticfile\",{\"1\":{\"999\":2}}],[\"staticfs\",{\"1\":{\"999\":2}}],[\"static\",{\"1\":{\"9\":1,\"37\":1,\"41\":3,\"999\":6}}],[\"stdlib\",{\"1\":{\"536\":2}}],[\"stderr\",{\"1\":{\"335\":4,\"397\":1,\"496\":1,\"840\":1}}],[\"stdin读入的文本\",{\"1\":{\"344\":1}}],[\"stdin\",{\"1\":{\"335\":4,\"343\":1,\"345\":1,\"346\":1,\"827\":1,\"1072\":1}}],[\"stdout\",{\"0\":{\"337\":1},\"1\":{\"107\":1,\"335\":4,\"337\":1,\"340\":2,\"343\":1,\"396\":1,\"496\":1,\"723\":2,\"725\":4,\"727\":1,\"733\":1,\"734\":1,\"736\":2,\"840\":1,\"841\":1,\"1005\":1,\"1007\":1}}],[\"stdmethods\",{\"1\":{\"37\":1}}],[\"std\",{\"1\":{\"9\":1,\"14\":1}}],[\"sunreclaim\",{\"1\":{\"918\":1}}],[\"sunionstore\",{\"1\":{\"272\":1}}],[\"sunion\",{\"1\":{\"272\":1}}],[\"sugar\",{\"1\":{\"838\":4}}],[\"suffix\",{\"1\":{\"711\":1,\"718\":2}}],[\"suffrage\",{\"1\":{\"141\":1}}],[\"sure\",{\"1\":{\"536\":2,\"823\":1,\"1030\":1,\"1047\":1}}],[\"suspendgstate\",{\"1\":{\"1107\":1}}],[\"suspendg\",{\"1\":{\"1107\":1}}],[\"suspicious\",{\"1\":{\"37\":1}}],[\"sushi\",{\"1\":{\"509\":1}}],[\"succeeded\",{\"1\":{\"840\":2}}],[\"success为false代表管道已经关闭了\",{\"1\":{\"1067\":1}}],[\"success判断\",{\"1\":{\"1060\":1}}],[\"successive\",{\"1\":{\"582\":1}}],[\"successful\",{\"1\":{\"212\":1,\"214\":1,\"215\":1}}],[\"successfully\",{\"1\":{\"144\":1,\"970\":4,\"971\":1,\"972\":1,\"973\":1,\"974\":1,\"984\":2,\"985\":2,\"1104\":1}}],[\"success\",{\"1\":{\"143\":1,\"144\":1,\"168\":5,\"851\":2,\"1013\":3,\"1059\":2,\"1060\":6,\"1061\":2,\"1067\":1,\"1069\":1}}],[\"succ\",{\"1\":{\"234\":2,\"235\":1,\"236\":1,\"237\":1}}],[\"such\",{\"1\":{\"4\":1,\"37\":1,\"533\":1,\"536\":2,\"563\":2}}],[\"sudog\",{\"1\":{\"1057\":3,\"1059\":2,\"1060\":2,\"1067\":1,\"1086\":2,\"1166\":2,\"1168\":1}}],[\"sudo\",{\"1\":{\"140\":4}}],[\"suppress\",{\"1\":{\"1107\":1}}],[\"supports\",{\"1\":{\"757\":1}}],[\"support\",{\"1\":{\"22\":1,\"31\":1,\"117\":1,\"600\":1,\"1011\":6}}],[\"supported\",{\"1\":{\"7\":2,\"18\":1,\"21\":1}}],[\"superset\",{\"1\":{\"563\":1,\"823\":1}}],[\"superwhiskers\",{\"1\":{\"59\":1}}],[\"subl\",{\"1\":{\"1153\":1}}],[\"subdir\",{\"1\":{\"957\":1}}],[\"subcore\",{\"1\":{\"843\":2}}],[\"subcommands\",{\"1\":{\"6\":1}}],[\"subject\",{\"1\":{\"778\":2}}],[\"subjectpriority\",{\"1\":{\"763\":1}}],[\"sub即subject\",{\"1\":{\"761\":1}}],[\"sub指subject\",{\"1\":{\"760\":1}}],[\"substr\",{\"1\":{\"706\":2,\"707\":2,\"712\":2}}],[\"subscribe\",{\"1\":{\"284\":1}}],[\"sub\",{\"1\":{\"467\":1,\"547\":1,\"573\":2,\"575\":1,\"737\":1,\"759\":4,\"760\":2,\"761\":1,\"762\":5,\"764\":4,\"765\":4,\"766\":4,\"767\":4,\"773\":1,\"778\":1,\"795\":2,\"847\":2,\"1107\":1}}],[\"subtotal\",{\"1\":{\"847\":5}}],[\"subtraction\",{\"1\":{\"302\":1}}],[\"subtypes\",{\"1\":{\"16\":1}}],[\"subq\",{\"1\":{\"9\":1}}],[\"summary\",{\"1\":{\"1011\":2}}],[\"summer\",{\"1\":{\"326\":3}}],[\"sumpositive\",{\"1\":{\"600\":1}}],[\"sumany\",{\"1\":{\"571\":1}}],[\"sumandmul\",{\"1\":{\"397\":2}}],[\"sumfloat64\",{\"1\":{\"571\":1}}],[\"sum是\",{\"1\":{\"532\":1}}],[\"sum是经过\",{\"1\":{\"510\":1}}],[\"sumint\",{\"1\":{\"521\":5,\"522\":1,\"523\":1}}],[\"sum中记录的哈希值进行比对\",{\"1\":{\"510\":1}}],[\"sum文件\",{\"1\":{\"510\":1}}],[\"sum文件都有可能被修改过\",{\"1\":{\"510\":1}}],[\"sum文件插入两条记录\",{\"1\":{\"510\":1}}],[\"sum文件并不适合人类阅读\",{\"1\":{\"510\":1}}],[\"sum文件在创建项目之初并不会存在\",{\"1\":{\"510\":1}}],[\"sum文件中\",{\"1\":{\"18\":1,\"510\":1}}],[\"sum的文件\",{\"1\":{\"503\":1}}],[\"sum函数早在延迟调用被执行以前就被调用了\",{\"1\":{\"402\":1}}],[\"sum函数返回一个int类型的值\",{\"1\":{\"397\":1}}],[\"sum\",{\"0\":{\"510\":1},\"1\":{\"7\":10,\"20\":1,\"331\":2,\"395\":3,\"397\":2,\"400\":2,\"402\":6,\"503\":1,\"510\":1,\"521\":14,\"522\":2,\"523\":17,\"524\":2,\"531\":4,\"532\":9,\"533\":16,\"545\":11,\"546\":5,\"547\":11,\"559\":1,\"571\":5,\"573\":4,\"575\":1,\"598\":5}}],[\"sumdb\",{\"1\":{\"7\":12,\"510\":1}}],[\"syms\",{\"1\":{\"1074\":1}}],[\"symbols\",{\"1\":{\"4\":2,\"10\":1}}],[\"symbol\",{\"1\":{\"4\":3,\"8\":1,\"9\":1,\"10\":1,\"557\":2}}],[\"syntax\",{\"1\":{\"151\":1,\"158\":1,\"159\":1,\"164\":1,\"181\":1,\"182\":1,\"187\":1,\"188\":1,\"190\":2,\"197\":1,\"629\":1,\"699\":1,\"1061\":1}}],[\"syndtr\",{\"1\":{\"62\":1}}],[\"synchronize\",{\"1\":{\"1089\":1,\"1104\":2}}],[\"synchronization\",{\"1\":{\"561\":1}}],[\"syncers\",{\"1\":{\"841\":6}}],[\"sync命令来完成\",{\"1\":{\"513\":1}}],[\"syncmap\",{\"0\":{\"1044\":1},\"1\":{\"486\":11}}],[\"sync包下还有一些其他的工具可以使用\",{\"1\":{\"483\":1}}],[\"sync这一个函数封装了底层的系统调用fsync\",{\"1\":{\"422\":1}}],[\"syncs\",{\"1\":{\"35\":1}}],[\"sync子命令用于将go\",{\"1\":{\"35\":1}}],[\"sync\",{\"0\":{\"35\":1,\"483\":1,\"1187\":1},\"1\":{\"31\":2,\"35\":3,\"37\":1,\"115\":1,\"118\":1,\"158\":2,\"159\":2,\"164\":2,\"416\":2,\"422\":1,\"472\":6,\"476\":1,\"477\":2,\"478\":1,\"479\":1,\"480\":3,\"481\":2,\"482\":4,\"483\":1,\"484\":3,\"485\":6,\"486\":6,\"490\":1,\"491\":2,\"514\":1,\"606\":1,\"616\":1,\"682\":2,\"828\":1,\"838\":2,\"840\":1,\"852\":1,\"1016\":2,\"1030\":1,\"1050\":1,\"1083\":2,\"1086\":4,\"1149\":5,\"1153\":4,\"1154\":1,\"1159\":2,\"1162\":2,\"1164\":3,\"1165\":5,\"1170\":2,\"1171\":4,\"1174\":1,\"1175\":2,\"1177\":6,\"1178\":2}}],[\"sysfreeos\",{\"1\":{\"1122\":1}}],[\"sysreserve\",{\"1\":{\"1122\":1}}],[\"sysretake\",{\"1\":{\"1107\":2}}],[\"sysalloc为当前heaparena申请更多内存或者分配一个新的heaparena\",{\"1\":{\"1122\":1}}],[\"sysalloc\",{\"1\":{\"1122\":2}}],[\"sysmemstat\",{\"1\":{\"1111\":1,\"1112\":2}}],[\"sysmontick\",{\"1\":{\"1088\":3,\"1107\":1}}],[\"sysmon是一个普通的函数\",{\"1\":{\"1082\":1}}],[\"sysmon\",{\"0\":{\"1082\":1},\"1\":{\"1082\":1,\"1088\":1,\"1132\":1}}],[\"sysstat\",{\"1\":{\"1111\":1}}],[\"syscallpc\",{\"1\":{\"1097\":1}}],[\"syscallsp\",{\"1\":{\"1097\":3}}],[\"syscall标准库的系统调用\",{\"1\":{\"1097\":1}}],[\"syscalltick++\",{\"1\":{\"1097\":1}}],[\"syscalltick\",{\"1\":{\"1088\":2,\"1097\":2}}],[\"syscall\",{\"1\":{\"335\":3,\"416\":8,\"531\":1,\"561\":1,\"616\":1,\"1087\":1,\"1089\":1}}],[\"syso\",{\"1\":{\"21\":1}}],[\"sysofiles\",{\"1\":{\"21\":1}}],[\"sys\",{\"1\":{\"20\":1,\"74\":2,\"143\":8,\"503\":2,\"509\":1,\"920\":1,\"1089\":1,\"1095\":4,\"1099\":1,\"1112\":1,\"1115\":1,\"1116\":1,\"1117\":1,\"1118\":1,\"1119\":7,\"1125\":2,\"1128\":1,\"1129\":3}}],[\"systemstack\",{\"1\":{\"1079\":2,\"1082\":1,\"1095\":1,\"1097\":1,\"1116\":1,\"1128\":1}}],[\"systemset\",{\"1\":{\"824\":2}}],[\"systems\",{\"1\":{\"14\":1}}],[\"system\",{\"1\":{\"4\":2,\"5\":1,\"7\":1,\"116\":1,\"416\":1,\"824\":11,\"912\":8,\"1011\":2,\"1088\":2}}],[\"s\",{\"1\":{\"4\":2,\"7\":1,\"9\":3,\"10\":2,\"15\":1,\"16\":1,\"17\":9,\"21\":2,\"35\":2,\"41\":2,\"44\":1,\"47\":1,\"93\":1,\"114\":5,\"145\":1,\"153\":1,\"165\":4,\"166\":6,\"168\":13,\"175\":1,\"200\":1,\"216\":1,\"326\":2,\"341\":9,\"344\":3,\"349\":2,\"372\":7,\"380\":3,\"400\":3,\"414\":23,\"416\":1,\"418\":2,\"484\":8,\"496\":4,\"498\":1,\"499\":1,\"527\":8,\"535\":1,\"536\":14,\"539\":8,\"542\":2,\"543\":4,\"555\":6,\"560\":6,\"567\":2,\"572\":9,\"573\":3,\"578\":26,\"585\":11,\"586\":1,\"587\":33,\"588\":12,\"601\":2,\"603\":1,\"675\":1,\"676\":1,\"692\":2,\"694\":1,\"697\":2,\"699\":2,\"704\":1,\"706\":7,\"707\":2,\"708\":5,\"709\":2,\"710\":2,\"711\":2,\"712\":5,\"713\":3,\"714\":1,\"715\":4,\"716\":8,\"717\":4,\"718\":7,\"721\":1,\"725\":1,\"728\":3,\"751\":2,\"752\":2,\"782\":1,\"783\":1,\"788\":1,\"813\":2,\"824\":3,\"838\":1,\"942\":1,\"956\":1,\"968\":3,\"969\":2,\"970\":4,\"984\":1,\"1002\":1,\"1007\":8,\"1011\":2,\"1019\":38,\"1020\":13,\"1021\":14,\"1023\":8,\"1024\":42,\"1025\":3,\"1026\":1,\"1027\":19,\"1028\":2,\"1030\":1,\"1038\":1,\"1052\":2,\"1053\":3,\"1054\":8,\"1055\":3,\"1061\":2,\"1067\":1,\"1071\":8,\"1074\":7,\"1076\":13,\"1088\":3,\"1089\":4,\"1095\":1,\"1097\":3,\"1100\":9,\"1107\":6,\"1114\":1,\"1115\":2,\"1116\":4,\"1117\":30,\"1120\":11,\"1121\":8,\"1122\":1,\"1125\":23,\"1126\":2,\"1130\":1,\"1132\":1,\"1138\":2,\"1144\":1,\"1147\":7,\"1167\":8,\"1168\":9,\"1169\":6}}],[\"shrinkstack来完成\",{\"1\":{\"1102\":1}}],[\"shrinkstack\",{\"1\":{\"1102\":3,\"1106\":1}}],[\"shrinking\",{\"1\":{\"1067\":1}}],[\"shrink\",{\"1\":{\"1067\":1,\"1102\":1}}],[\"shutting\",{\"1\":{\"1063\":1}}],[\"shuralyov\",{\"1\":{\"510\":1}}],[\"shuffle\",{\"1\":{\"38\":1,\"519\":1}}],[\"shirou\",{\"1\":{\"74\":1,\"904\":2,\"905\":1}}],[\"shiyanhui\",{\"1\":{\"60\":1}}],[\"shift\",{\"1\":{\"37\":1}}],[\"shlib\",{\"1\":{\"21\":1}}],[\"shades\",{\"1\":{\"1144\":2}}],[\"shade\",{\"1\":{\"1144\":7}}],[\"shadowed\",{\"1\":{\"137\":2}}],[\"shadow\",{\"1\":{\"37\":3}}],[\"shadows\",{\"1\":{\"21\":1}}],[\"sha512\",{\"1\":{\"934\":2}}],[\"sha384\",{\"1\":{\"934\":2}}],[\"shanghai\",{\"1\":{\"740\":1}}],[\"sha256\",{\"1\":{\"598\":1,\"934\":2}}],[\"sha\",{\"1\":{\"283\":1,\"776\":1}}],[\"shards\",{\"1\":{\"207\":3,\"208\":1,\"212\":1,\"214\":1,\"215\":1}}],[\"sharing\",{\"1\":{\"112\":1,\"463\":1}}],[\"share\",{\"0\":{\"106\":1},\"1\":{\"106\":1,\"140\":2,\"463\":1,\"881\":2}}],[\"shared\",{\"1\":{\"8\":2,\"21\":1,\"545\":1,\"918\":1}}],[\"sha1\",{\"1\":{\"10\":1,\"18\":1}}],[\"shopify\",{\"1\":{\"75\":1}}],[\"shopspring\",{\"1\":{\"59\":1,\"844\":2,\"846\":1,\"847\":1}}],[\"shouldhelpgc\",{\"1\":{\"1124\":1,\"1125\":4,\"1126\":1,\"1132\":1}}],[\"shouldbindbodywith\",{\"1\":{\"975\":5}}],[\"shouldbinduri\",{\"1\":{\"974\":1}}],[\"shouldbindwith\",{\"1\":{\"971\":1}}],[\"shouldbind\",{\"1\":{\"970\":1,\"971\":1,\"975\":2,\"977\":1}}],[\"should\",{\"1\":{\"22\":1,\"160\":1,\"167\":3,\"200\":1,\"520\":1,\"975\":3,\"1037\":1,\"1088\":1,\"1089\":1,\"1096\":1,\"1132\":3}}],[\"shortcallerencoder\",{\"1\":{\"840\":1}}],[\"shortduration\",{\"1\":{\"520\":1}}],[\"shorthand\",{\"1\":{\"504\":1}}],[\"shortest\",{\"1\":{\"21\":1}}],[\"short\",{\"1\":{\"4\":2,\"38\":2,\"518\":1,\"537\":6}}],[\"showing\",{\"1\":{\"559\":1}}],[\"show\",{\"1\":{\"4\":4,\"9\":1,\"14\":1,\"708\":5}}],[\"shell\",{\"1\":{\"3\":2,\"138\":1,\"201\":1,\"504\":1}}],[\"selparkcommit\",{\"1\":{\"1067\":1}}],[\"selparkcommit函数完成\",{\"1\":{\"1067\":1}}],[\"selunlock\",{\"1\":{\"1067\":8}}],[\"sellock\",{\"1\":{\"1067\":2}}],[\"sellock按照顺序将其上锁\",{\"1\":{\"1067\":1}}],[\"sellineno\",{\"1\":{\"1065\":1}}],[\"selectdone\",{\"1\":{\"1067\":1}}],[\"selectgo\",{\"1\":{\"1067\":3}}],[\"selectgo函数的调用\",{\"1\":{\"1067\":1}}],[\"selectgo函数\",{\"1\":{\"1064\":1,\"1067\":1}}],[\"selectnbrecv\",{\"1\":{\"1066\":2}}],[\"selectnbrecv的调用\",{\"1\":{\"1066\":1}}],[\"selectnbsend\",{\"1\":{\"1066\":2}}],[\"selectnbsend调用的if语句\",{\"1\":{\"1066\":1}}],[\"selected\",{\"1\":{\"1060\":6,\"1066\":5}}],[\"select会忽略掉nil管道\",{\"1\":{\"476\":1}}],[\"select会伪随机的选择一个case来执行\",{\"1\":{\"471\":1}}],[\"select由于没有默认分支\",{\"1\":{\"471\":1}}],[\"select由多个case和一个default组成\",{\"1\":{\"471\":1}}],[\"select的语法与switch语句类似\",{\"1\":{\"471\":1}}],[\"select是一种管道多路复用的控制结构\",{\"1\":{\"471\":1}}],[\"select在\",{\"1\":{\"471\":1}}],[\"select相对前两者而言比较特殊\",{\"1\":{\"347\":1}}],[\"select\",{\"0\":{\"471\":1,\"874\":1,\"1063\":1},\"1\":{\"24\":1,\"158\":1,\"159\":1,\"234\":3,\"298\":1,\"347\":1,\"471\":7,\"476\":1,\"477\":4,\"478\":1,\"520\":1,\"741\":1,\"742\":1,\"871\":2,\"872\":1,\"873\":1,\"874\":5,\"875\":5,\"876\":2,\"877\":1,\"878\":2,\"879\":1,\"880\":5,\"881\":2,\"896\":5,\"897\":2,\"898\":6,\"899\":2,\"1062\":1,\"1063\":7,\"1064\":2,\"1065\":4,\"1066\":7,\"1067\":7,\"1086\":2,\"1098\":1}}],[\"sesison\",{\"1\":{\"1003\":1}}],[\"sessions\",{\"1\":{\"817\":2,\"1003\":5}}],[\"session\",{\"0\":{\"1003\":1},\"1\":{\"172\":1,\"504\":1,\"1001\":1,\"1003\":13}}],[\"seo\",{\"1\":{\"954\":1}}],[\"semrelease\",{\"1\":{\"1154\":2,\"1159\":2,\"1162\":2,\"1177\":2}}],[\"semtable中的信号量\",{\"1\":{\"1151\":1}}],[\"semver\",{\"1\":{\"934\":2}}],[\"semaphore\",{\"1\":{\"1155\":2}}],[\"semacquirerwmutexr\",{\"1\":{\"1161\":1}}],[\"semacquirerwmutex流程尝试获取信号量writersem\",{\"1\":{\"1158\":1}}],[\"semacquirerwmutex\",{\"1\":{\"1158\":1}}],[\"semacquiremutex\",{\"1\":{\"1153\":1}}],[\"semacquire1函数\",{\"1\":{\"1153\":1}}],[\"semacquire\",{\"1\":{\"1086\":1,\"1178\":2}}],[\"sema\",{\"1\":{\"416\":1,\"1151\":2,\"1153\":1,\"1154\":2,\"1166\":1,\"1176\":2,\"1177\":2,\"1178\":2}}],[\"sex=false\",{\"1\":{\"636\":1}}],[\"sex\",{\"1\":{\"633\":5,\"636\":5,\"952\":2}}],[\"se2\",{\"1\":{\"272\":1}}],[\"sequential\",{\"1\":{\"1084\":1}}],[\"sequence\",{\"1\":{\"355\":2,\"582\":1}}],[\"seq而存在的\",{\"1\":{\"583\":1}}],[\"seq的回调函数只接受一个参数\",{\"1\":{\"582\":1}}],[\"seq\",{\"1\":{\"212\":1,\"213\":1,\"214\":1,\"215\":1,\"582\":3,\"583\":3,\"585\":7,\"587\":13}}],[\"seq2的回调函数接受两个参数\",{\"1\":{\"582\":1}}],[\"seq2\",{\"1\":{\"114\":1,\"582\":1,\"583\":1,\"584\":1,\"585\":3,\"587\":2}}],[\"sense\",{\"1\":{\"1089\":1}}],[\"sensible\",{\"1\":{\"7\":1}}],[\"sent\",{\"1\":{\"167\":1}}],[\"sendstmt\",{\"1\":{\"1061\":1}}],[\"sendserver\",{\"1\":{\"158\":5}}],[\"sender\",{\"1\":{\"1060\":1,\"1067\":1}}],[\"senddirect\",{\"1\":{\"1059\":2}}],[\"send函数完成了\",{\"1\":{\"1067\":1}}],[\"send函数\",{\"1\":{\"1067\":1}}],[\"send函数中看到\",{\"1\":{\"1060\":1}}],[\"send函数内容如下\",{\"1\":{\"1059\":1}}],[\"send函数进行发送\",{\"1\":{\"1059\":1}}],[\"sendq中有等待发送的协程\",{\"1\":{\"1060\":2}}],[\"sendq队列中\",{\"1\":{\"1067\":1}}],[\"sendq队列\",{\"1\":{\"1060\":1}}],[\"sendq等待发送协程队列\",{\"1\":{\"1059\":1}}],[\"sendq\",{\"1\":{\"1057\":2,\"1059\":1,\"1060\":1,\"1061\":1,\"1067\":3}}],[\"sendx++\",{\"1\":{\"1059\":1,\"1067\":1}}],[\"sendx+1\",{\"1\":{\"1059\":1,\"1060\":1}}],[\"sendx\",{\"1\":{\"1057\":2,\"1059\":5,\"1060\":2,\"1067\":3}}],[\"sendmsg时\",{\"1\":{\"162\":1}}],[\"sendmsg\",{\"1\":{\"158\":1,\"166\":2}}],[\"sendmessagestream\",{\"1\":{\"158\":3}}],[\"sendmessageserver\",{\"1\":{\"158\":4}}],[\"sendmessage\",{\"1\":{\"158\":7}}],[\"sendheader被调用时\",{\"1\":{\"162\":1}}],[\"sendheader和servertream\",{\"1\":{\"162\":1}}],[\"sendheader函数\",{\"1\":{\"162\":1}}],[\"sendheader\",{\"1\":{\"158\":1,\"162\":2}}],[\"sendandclose\",{\"1\":{\"158\":2,\"164\":1}}],[\"send\",{\"1\":{\"158\":9,\"159\":16,\"166\":5,\"167\":4,\"469\":1,\"471\":8,\"1057\":2,\"1059\":4,\"1060\":1,\"1061\":2,\"1067\":4,\"1086\":2}}],[\"securejson\",{\"1\":{\"981\":1}}],[\"securitydefinitions\",{\"1\":{\"1015\":1}}],[\"security\",{\"1\":{\"7\":1,\"1015\":1}}],[\"section\",{\"1\":{\"778\":7,\"817\":7}}],[\"secret\",{\"1\":{\"774\":2,\"779\":3,\"781\":3,\"782\":3,\"783\":3,\"784\":3,\"960\":1,\"1003\":1}}],[\"sec\",{\"1\":{\"526\":4,\"527\":12,\"737\":1}}],[\"seconddpaswod\",{\"1\":{\"946\":1}}],[\"secondpassword\",{\"1\":{\"946\":5}}],[\"secondsdurationencoder\",{\"1\":{\"840\":1}}],[\"second\",{\"1\":{\"145\":1,\"158\":3,\"159\":2,\"170\":2,\"171\":1,\"175\":1,\"209\":3,\"247\":2,\"248\":1,\"346\":2,\"469\":1,\"471\":4,\"476\":1,\"477\":2,\"478\":1,\"520\":1,\"527\":16,\"556\":2,\"725\":2,\"730\":2,\"738\":2,\"741\":1,\"742\":1,\"743\":1,\"838\":2,\"911\":1,\"998\":2,\"1037\":1,\"1063\":1}}],[\"serialnumber\",{\"1\":{\"916\":2}}],[\"serializer\",{\"1\":{\"862\":2}}],[\"serf\",{\"1\":{\"142\":1}}],[\"servre\",{\"1\":{\"557\":2}}],[\"serving\",{\"1\":{\"503\":1,\"993\":1}}],[\"service关键字可以定义一个\",{\"1\":{\"196\":1}}],[\"service中定义了一个服务\",{\"1\":{\"181\":1}}],[\"serviceconfig\",{\"1\":{\"145\":1,\"175\":1}}],[\"serviceport\",{\"1\":{\"145\":1}}],[\"serviceid\",{\"1\":{\"145\":1}}],[\"service1\",{\"1\":{\"145\":1}}],[\"services\",{\"1\":{\"145\":3,\"501\":1}}],[\"service\",{\"0\":{\"196\":1},\"1\":{\"32\":1,\"145\":9,\"151\":1,\"157\":3,\"158\":2,\"159\":2,\"162\":2,\"164\":1,\"175\":1,\"181\":1,\"196\":2,\"197\":1}}],[\"servefile\",{\"1\":{\"986\":1}}],[\"servehttp\",{\"1\":{\"645\":1,\"646\":1,\"1016\":1}}],[\"serve\",{\"1\":{\"145\":1,\"153\":1,\"165\":1}}],[\"serveraddr\",{\"1\":{\"824\":3}}],[\"serverproviderset\",{\"1\":{\"824\":2}}],[\"servermux是核心结构体\",{\"1\":{\"645\":1}}],[\"server没有设置可以为空\",{\"1\":{\"242\":1}}],[\"server02\",{\"1\":{\"175\":1}}],[\"server01\",{\"1\":{\"145\":3,\"175\":1}}],[\"serveroption\",{\"1\":{\"165\":4}}],[\"serverstreams\",{\"1\":{\"166\":4}}],[\"serverstream接口\",{\"1\":{\"158\":1}}],[\"serverstream\",{\"1\":{\"158\":3,\"162\":1,\"165\":5,\"166\":2}}],[\"servers=\",{\"1\":{\"141\":1}}],[\"server2012\",{\"1\":{\"117\":1}}],[\"server2008\",{\"1\":{\"117\":1}}],[\"server\",{\"1\":{\"116\":1,\"141\":8,\"142\":11,\"143\":14,\"144\":13,\"145\":7,\"150\":1,\"153\":4,\"154\":1,\"157\":1,\"158\":16,\"159\":21,\"164\":1,\"165\":5,\"166\":12,\"167\":2,\"170\":1,\"406\":1,\"504\":2,\"557\":1,\"561\":1,\"611\":2,\"644\":3,\"781\":1,\"784\":1,\"785\":1,\"791\":2,\"817\":7,\"824\":7,\"851\":1,\"998\":4,\"1011\":4}}],[\"segment\",{\"1\":{\"141\":1,\"143\":2,\"144\":3,\"1101\":1}}],[\"sep\",{\"1\":{\"708\":5,\"716\":10}}],[\"sepc\",{\"1\":{\"136\":1}}],[\"separated\",{\"1\":{\"16\":1}}],[\"season\",{\"1\":{\"326\":4}}],[\"sea\",{\"1\":{\"62\":1}}],[\"searchservice\",{\"1\":{\"181\":1}}],[\"searchresult\",{\"1\":{\"181\":2}}],[\"searchrequest中定义了三个字段\",{\"1\":{\"181\":1}}],[\"searchrequest\",{\"1\":{\"181\":2,\"182\":1,\"187\":1,\"188\":1,\"190\":2}}],[\"search\",{\"1\":{\"9\":1,\"14\":1,\"93\":1,\"181\":1,\"205\":1,\"216\":10,\"381\":1,\"1039\":3}}],[\"seeker\",{\"1\":{\"721\":1}}],[\"seed\",{\"1\":{\"527\":7,\"1030\":1}}],[\"seen\",{\"1\":{\"7\":2}}],[\"see\",{\"1\":{\"3\":1,\"4\":1,\"7\":6,\"18\":1,\"22\":1,\"778\":7,\"1030\":1,\"1036\":1,\"1037\":2,\"1073\":1,\"1097\":1,\"1128\":1}}],[\"setesc\",{\"1\":{\"1074\":1}}],[\"setoverflow\",{\"1\":{\"1034\":1}}],[\"setoutput\",{\"1\":{\"649\":1}}],[\"setcookie\",{\"1\":{\"1002\":1}}],[\"setconfigtype\",{\"1\":{\"791\":1}}],[\"setconfigname\",{\"1\":{\"791\":1,\"792\":1}}],[\"setrgb\",{\"1\":{\"833\":1,\"834\":1,\"835\":1}}],[\"setvalue\",{\"1\":{\"817\":1}}],[\"setdefault\",{\"1\":{\"790\":2,\"799\":2}}],[\"setlikely\",{\"1\":{\"1024\":1}}],[\"setlinewidth\",{\"1\":{\"835\":1}}],[\"setlimit\",{\"1\":{\"225\":1}}],[\"setloc\",{\"1\":{\"737\":1}}],[\"setflags\",{\"1\":{\"649\":2}}],[\"setup\",{\"1\":{\"523\":4}}],[\"setuid\",{\"1\":{\"416\":1}}],[\"setblockprofilerate查看更多细节\",{\"1\":{\"519\":1}}],[\"setmode\",{\"1\":{\"503\":1,\"1008\":1}}],[\"setmapindex\",{\"1\":{\"457\":1}}],[\"setmemorylimit函数对\",{\"1\":{\"118\":1}}],[\"setspans\",{\"1\":{\"1115\":1}}],[\"setspans方法中找到\",{\"1\":{\"1115\":1}}],[\"sets\",{\"1\":{\"1097\":1}}],[\"setstring\",{\"1\":{\"449\":1,\"454\":1}}],[\"setsort\",{\"1\":{\"225\":1}}],[\"setint\",{\"1\":{\"442\":1,\"449\":1,\"456\":1}}],[\"setgid\",{\"1\":{\"416\":1}}],[\"set和len\",{\"1\":{\"412\":1}}],[\"set2\",{\"1\":{\"270\":1,\"272\":4,\"274\":1}}],[\"setprefix\",{\"1\":{\"158\":1,\"159\":1,\"165\":1,\"166\":1,\"167\":1,\"648\":2}}],[\"settype\",{\"1\":{\"971\":1}}],[\"settrailer\",{\"1\":{\"158\":1,\"162\":1}}],[\"settings\",{\"1\":{\"3\":1,\"193\":1,\"207\":2,\"208\":1}}],[\"setting\",{\"1\":{\"3\":1,\"7\":4,\"21\":1}}],[\"setheader\",{\"1\":{\"158\":1,\"162\":3}}],[\"set\",{\"0\":{\"388\":1},\"1\":{\"3\":1,\"7\":4,\"8\":1,\"9\":1,\"10\":4,\"11\":10,\"14\":2,\"21\":1,\"165\":1,\"167\":1,\"187\":1,\"233\":7,\"236\":1,\"241\":1,\"246\":1,\"247\":1,\"248\":1,\"254\":1,\"256\":1,\"270\":1,\"271\":4,\"272\":6,\"273\":2,\"274\":1,\"275\":1,\"276\":1,\"388\":5,\"412\":2,\"413\":4,\"414\":9,\"442\":1,\"503\":1,\"519\":1,\"535\":2,\"563\":4,\"574\":2,\"794\":2,\"826\":1,\"828\":3,\"860\":3,\"864\":1,\"884\":1,\"885\":1,\"886\":2,\"887\":2,\"895\":1,\"897\":2,\"898\":2,\"958\":2,\"960\":1,\"986\":3,\"1003\":1,\"1051\":1,\"1067\":1,\"1088\":1,\"1089\":2,\"1091\":1,\"1097\":1,\"1114\":1,\"1121\":1,\"1138\":1}}],[\"aka\",{\"1\":{\"1114\":1}}],[\"a4\",{\"1\":{\"1053\":2}}],[\"a3\",{\"1\":{\"1053\":4}}],[\"auxint\",{\"1\":{\"1074\":1}}],[\"aux\",{\"1\":{\"1074\":3}}],[\"audience\",{\"1\":{\"773\":1,\"778\":2}}],[\"aud\",{\"1\":{\"773\":1,\"778\":1}}],[\"autumn\",{\"1\":{\"326\":3}}],[\"authenticate\",{\"1\":{\"960\":1}}],[\"authentication\",{\"1\":{\"513\":1}}],[\"authorization\",{\"1\":{\"642\":1,\"757\":1,\"775\":1,\"963\":1,\"1000\":2,\"1015\":1}}],[\"authority\",{\"1\":{\"174\":1}}],[\"auth模块依赖于user模块的结构体user\",{\"1\":{\"513\":1}}],[\"authservice\",{\"1\":{\"477\":2}}],[\"auth\",{\"1\":{\"34\":2,\"477\":8,\"513\":10,\"515\":1,\"1015\":5}}],[\"automigrate\",{\"1\":{\"863\":4}}],[\"automigrate方法会帮助我们进行自动迁移\",{\"1\":{\"863\":1}}],[\"automatic\",{\"1\":{\"17\":1}}],[\"automatically\",{\"1\":{\"7\":1,\"140\":1,\"1009\":2}}],[\"autoincrementincrement\",{\"1\":{\"862\":1}}],[\"autoincrement\",{\"1\":{\"862\":2}}],[\"autoupdatetime\",{\"1\":{\"856\":1,\"859\":2,\"862\":2}}],[\"autocreatetime\",{\"1\":{\"856\":1,\"859\":2,\"862\":2}}],[\"autocompletion\",{\"1\":{\"504\":1}}],[\"autotmp\",{\"1\":{\"9\":3,\"1038\":1,\"1067\":4}}],[\"auto\",{\"1\":{\"7\":2,\"141\":1,\"862\":1,\"863\":2}}],[\"a=b\",{\"1\":{\"705\":1}}],[\"a<b\",{\"1\":{\"705\":1}}],[\"a<<1\",{\"1\":{\"348\":2}}],[\"a>b\",{\"1\":{\"705\":1}}],[\"a0\",{\"1\":{\"1053\":8}}],[\"a019774\",{\"1\":{\"653\":1}}],[\"a002392\",{\"1\":{\"653\":1}}],[\"a002162\",{\"1\":{\"653\":1}}],[\"a002161\",{\"1\":{\"653\":1}}],[\"a002193\",{\"1\":{\"653\":1}}],[\"a001622\",{\"1\":{\"653\":1}}],[\"a001113\",{\"1\":{\"653\":1}}],[\"a000796\",{\"1\":{\"653\":1}}],[\"a62a605\",{\"1\":{\"499\":2}}],[\"a2\",{\"1\":{\"396\":1,\"1053\":6}}],[\"a139339\",{\"1\":{\"653\":1}}],[\"a1\",{\"1\":{\"396\":1,\"508\":1,\"1053\":8}}],[\"a+b\",{\"1\":{\"331\":3,\"344\":1,\"345\":1,\"531\":1}}],[\"a++\",{\"1\":{\"299\":1,\"348\":2}}],[\"aaa\",{\"1\":{\"686\":1}}],[\"aaaaaaaaaa\",{\"1\":{\"714\":1}}],[\"aaaa\",{\"1\":{\"350\":1}}],[\"aa\",{\"1\":{\"265\":1,\"749\":1,\"750\":1}}],[\"av\",{\"1\":{\"1122\":5}}],[\"avail\",{\"1\":{\"1102\":2}}],[\"available\",{\"1\":{\"4\":2,\"16\":1,\"21\":2,\"112\":1,\"504\":1,\"918\":1,\"1073\":1,\"1088\":1,\"1104\":1}}],[\"avoid\",{\"1\":{\"1042\":1,\"1112\":1}}],[\"avg\",{\"1\":{\"880\":2}}],[\"avhhuqv2shgkrp9z7xbdda\",{\"1\":{\"208\":1}}],[\"azure\",{\"1\":{\"141\":1}}],[\"azul3d\",{\"1\":{\"72\":2}}],[\"atreugo\",{\"1\":{\"1009\":1}}],[\"at`\",{\"1\":{\"856\":4}}],[\"attempt\",{\"1\":{\"838\":2}}],[\"attacks\",{\"1\":{\"817\":1}}],[\"attach\",{\"1\":{\"504\":2}}],[\"attached\",{\"1\":{\"503\":1,\"1087\":2}}],[\"attachment\",{\"1\":{\"112\":1,\"986\":1}}],[\"atoi32\",{\"1\":{\"1089\":2}}],[\"atoi\",{\"1\":{\"692\":2}}],[\"atomically\",{\"1\":{\"1114\":1,\"1166\":1}}],[\"atomicstorep\",{\"1\":{\"1089\":2}}],[\"atomicstatus用于存储协程\",{\"1\":{\"1086\":1}}],[\"atomicstatus\",{\"1\":{\"1086\":1}}],[\"atomiclevel\",{\"1\":{\"839\":1}}],[\"atomic包下已经提供了原子操作相关的\",{\"1\":{\"488\":1}}],[\"atomic包现在提供了更多的类型可供使用\",{\"1\":{\"118\":1}}],[\"atomic时是否破坏了原子性\",{\"1\":{\"37\":1}}],[\"atomic\",{\"1\":{\"20\":1,\"37\":3,\"484\":2,\"485\":1,\"488\":8,\"489\":5,\"490\":2,\"491\":5,\"519\":1,\"1045\":2,\"1060\":1,\"1066\":1,\"1086\":1,\"1088\":1,\"1097\":2,\"1099\":1,\"1104\":3,\"1106\":1,\"1116\":1,\"1118\":3,\"1122\":1,\"1140\":2,\"1152\":1,\"1153\":4,\"1154\":2,\"1155\":2,\"1166\":1,\"1168\":2,\"1169\":2,\"1172\":1,\"1176\":1}}],[\"atmoic包还提供了compareandswap操作\",{\"1\":{\"490\":1}}],[\"atmoic包下原子操作只有函数签名\",{\"1\":{\"488\":1}}],[\"at\",{\"1\":{\"144\":1,\"168\":1,\"194\":1,\"222\":1,\"223\":1,\"226\":1,\"227\":1,\"228\":1,\"229\":1,\"526\":3,\"550\":4,\"551\":3,\"552\":1,\"553\":5,\"559\":1,\"778\":1,\"802\":1,\"821\":1,\"831\":1,\"923\":1,\"926\":2,\"953\":1,\"1037\":2,\"1073\":2,\"1095\":1,\"1096\":1,\"1100\":1,\"1102\":1,\"1138\":1,\"1139\":1}}],[\"ah\",{\"1\":{\"109\":1}}],[\"aims\",{\"1\":{\"848\":2}}],[\"aint64\",{\"1\":{\"489\":10}}],[\"ai\",{\"1\":{\"77\":1,\"812\":9,\"813\":3,\"1115\":6}}],[\"aix\",{\"1\":{\"7\":2}}],[\"against\",{\"1\":{\"1139\":1}}],[\"again\",{\"1\":{\"1038\":1,\"1041\":2,\"1138\":1,\"1140\":1,\"1153\":2}}],[\"agones\",{\"1\":{\"613\":1}}],[\"aggregate\",{\"1\":{\"229\":3}}],[\"age必须大于或等于18\",{\"1\":{\"952\":2}}],[\"age>\",{\"1\":{\"619\":1,\"620\":1}}],[\"agent05\",{\"1\":{\"144\":2}}],[\"agent04\",{\"1\":{\"144\":2}}],[\"agent03\",{\"1\":{\"143\":1,\"144\":2}}],[\"agent02\",{\"1\":{\"143\":1,\"144\":2}}],[\"agent01\",{\"1\":{\"143\":1,\"144\":2}}],[\"agent就是运行一个新的\",{\"1\":{\"141\":1}}],[\"agent是子命令\",{\"1\":{\"141\":1}}],[\"agentservice\",{\"1\":{\"145\":1}}],[\"agents\",{\"1\":{\"140\":1}}],[\"agent\",{\"1\":{\"140\":1,\"141\":8,\"142\":2,\"143\":11,\"144\":3,\"145\":1}}],[\"age\",{\"1\":{\"114\":1,\"115\":1,\"164\":1,\"166\":7,\"167\":4,\"207\":2,\"208\":1,\"212\":2,\"213\":1,\"214\":2,\"216\":2,\"223\":3,\"224\":3,\"225\":10,\"226\":3,\"227\":3,\"228\":1,\"229\":1,\"234\":2,\"256\":5,\"328\":1,\"329\":3,\"341\":1,\"395\":4,\"398\":4,\"403\":1,\"404\":1,\"405\":5,\"406\":6,\"407\":4,\"408\":3,\"409\":2,\"447\":2,\"448\":1,\"449\":2,\"455\":2,\"460\":3,\"513\":1,\"540\":6,\"541\":1,\"578\":7,\"618\":2,\"619\":1,\"620\":2,\"624\":1,\"625\":2,\"626\":3,\"627\":2,\"628\":2,\"629\":3,\"633\":5,\"636\":6,\"639\":1,\"688\":6,\"689\":3,\"730\":4,\"734\":3,\"735\":4,\"736\":5,\"748\":1,\"749\":4,\"750\":4,\"751\":2,\"862\":1,\"887\":8,\"891\":1,\"892\":1,\"893\":1,\"895\":2,\"899\":2,\"930\":1,\"942\":8,\"943\":3,\"944\":3,\"945\":2,\"952\":6}}],[\"ages\",{\"1\":{\"9\":1}}],[\"agiledragon\",{\"1\":{\"55\":1}}],[\"ax\",{\"1\":{\"45\":1,\"1021\":1,\"1038\":4,\"1053\":2,\"1066\":1,\"1067\":8,\"1089\":10,\"1153\":2}}],[\"a9d515a09cc2\",{\"1\":{\"27\":1}}],[\"acquire\",{\"1\":{\"1097\":1,\"1104\":2,\"1120\":1,\"1169\":1}}],[\"acquirem\",{\"1\":{\"1091\":2,\"1095\":1,\"1098\":2,\"1148\":1}}],[\"acquirep函数将\",{\"1\":{\"1089\":1}}],[\"acquirep函数来完成\",{\"1\":{\"1089\":1}}],[\"acquirep\",{\"1\":{\"1089\":2,\"1091\":2,\"1093\":1,\"1097\":1}}],[\"acquiresudog\",{\"1\":{\"1059\":1,\"1060\":1,\"1067\":1,\"1167\":1}}],[\"acresults\",{\"1\":{\"1074\":1}}],[\"acargs\",{\"1\":{\"1074\":3}}],[\"actively\",{\"1\":{\"1087\":1}}],[\"activestackchans\",{\"1\":{\"1059\":1,\"1060\":1,\"1067\":2}}],[\"active\",{\"1\":{\"918\":1,\"1086\":1,\"1117\":2,\"1147\":3,\"1153\":5}}],[\"act即action\",{\"1\":{\"760\":1,\"761\":1}}],[\"act\",{\"1\":{\"759\":4,\"760\":3,\"761\":1,\"762\":2,\"764\":4,\"765\":4,\"766\":4,\"767\":4,\"1106\":1}}],[\"actualtag\",{\"1\":{\"942\":1}}],[\"actual\",{\"1\":{\"9\":1,\"486\":1,\"521\":38,\"522\":8,\"523\":8,\"524\":8}}],[\"account\",{\"1\":{\"1013\":2,\"1014\":3,\"1139\":1}}],[\"accounting\",{\"1\":{\"559\":1}}],[\"accept\",{\"1\":{\"682\":1,\"1000\":1}}],[\"accessed\",{\"1\":{\"1088\":1,\"1114\":1}}],[\"access\",{\"1\":{\"22\":1,\"31\":1,\"757\":1,\"758\":1,\"765\":1,\"958\":3,\"1000\":8,\"1015\":1}}],[\"accidentally\",{\"1\":{\"509\":1}}],[\"acm\",{\"1\":{\"346\":1}}],[\"acknowledged\",{\"1\":{\"207\":2,\"210\":1}}],[\"acl\",{\"1\":{\"141\":2,\"757\":1,\"758\":3,\"763\":1}}],[\"ace\",{\"1\":{\"60\":2}}],[\"amended为true\",{\"1\":{\"1049\":1}}],[\"amended为false的话\",{\"1\":{\"1047\":1}}],[\"amended标记为true\",{\"1\":{\"1047\":1}}],[\"amended\",{\"1\":{\"1045\":1,\"1046\":2,\"1047\":2,\"1048\":2,\"1049\":2}}],[\"ameda\",{\"1\":{\"20\":1,\"24\":1,\"27\":1}}],[\"am\",{\"1\":{\"739\":1}}],[\"amber\",{\"1\":{\"60\":2}}],[\"amd64\",{\"1\":{\"6\":1,\"7\":4,\"11\":3,\"12\":3,\"14\":6,\"18\":2,\"40\":1,\"90\":1,\"91\":3,\"93\":4,\"525\":1,\"526\":3,\"588\":1,\"603\":1,\"904\":6,\"1026\":1,\"1027\":1}}],[\"apr\",{\"1\":{\"559\":1}}],[\"apt\",{\"1\":{\"140\":6}}],[\"apex\",{\"1\":{\"54\":2}}],[\"apache\",{\"1\":{\"53\":1}}],[\"approx\",{\"1\":{\"1086\":1}}],[\"approximate\",{\"1\":{\"1030\":1}}],[\"appapi\",{\"1\":{\"1016\":1}}],[\"appapi参数\",{\"1\":{\"1016\":1}}],[\"application\",{\"1\":{\"639\":1,\"965\":1,\"970\":3,\"972\":1,\"977\":1,\"986\":1,\"1016\":2}}],[\"apple\",{\"1\":{\"587\":2}}],[\"applyuri\",{\"1\":{\"221\":1}}],[\"applying\",{\"1\":{\"17\":1}}],[\"apply\",{\"1\":{\"17\":1,\"38\":2,\"839\":2}}],[\"appdata\",{\"1\":{\"166\":1}}],[\"append函数会被展开对应的中间代码\",{\"1\":{\"1024\":1}}],[\"append函数是有返回值的\",{\"1\":{\"414\":1}}],[\"appendslice\",{\"1\":{\"1024\":1}}],[\"appendslice这样的函数与之对应\",{\"1\":{\"1024\":1}}],[\"appendstring\",{\"1\":{\"840\":1}}],[\"appenddata\",{\"1\":{\"1019\":6}}],[\"appendbool\",{\"1\":{\"701\":1}}],[\"appendfloat\",{\"1\":{\"701\":1}}],[\"appendint\",{\"1\":{\"701\":1}}],[\"append模式打开的文件\",{\"1\":{\"418\":1}}],[\"append模式打开时\",{\"1\":{\"418\":1}}],[\"append|os\",{\"1\":{\"418\":3}}],[\"appendnametopath\",{\"1\":{\"416\":1}}],[\"appendcontext\",{\"1\":{\"163\":3}}],[\"appendtooutgoingcontext\",{\"1\":{\"159\":1,\"163\":2}}],[\"append\",{\"1\":{\"145\":1,\"158\":1,\"159\":1,\"165\":1,\"175\":1,\"216\":1,\"365\":2,\"366\":4,\"367\":1,\"371\":2,\"376\":1,\"379\":1,\"414\":6,\"416\":2,\"417\":1,\"484\":2,\"539\":1,\"555\":1,\"560\":1,\"577\":1,\"578\":1,\"587\":1,\"588\":1,\"701\":1,\"841\":2,\"843\":2,\"895\":3,\"899\":1,\"944\":1,\"1019\":6,\"1024\":7,\"1025\":1,\"1027\":1,\"1071\":1,\"1074\":3}}],[\"appengine\",{\"1\":{\"112\":1}}],[\"app\",{\"1\":{\"21\":1,\"496\":1,\"817\":6,\"824\":4,\"829\":1,\"1015\":1,\"1016\":1}}],[\"appspot\",{\"1\":{\"16\":1}}],[\"api两个目录下查找和解析其他接口的注释信息并生成对应的文档\",{\"1\":{\"1017\":1}}],[\"apidoc\",{\"1\":{\"1016\":1}}],[\"api描述文件\",{\"1\":{\"1016\":1}}],[\"apikey\",{\"1\":{\"1015\":2}}],[\"api对开发人员而言十分友好\",{\"1\":{\"616\":1}}],[\"api了解更多信息\",{\"1\":{\"214\":1}}],[\"apis\",{\"1\":{\"167\":1,\"206\":1}}],[\"api\",{\"0\":{\"105\":1},\"1\":{\"7\":1,\"15\":2,\"16\":3,\"32\":1,\"33\":1,\"40\":1,\"105\":2,\"114\":1,\"143\":1,\"145\":7,\"147\":1,\"170\":1,\"178\":1,\"200\":1,\"205\":5,\"206\":2,\"210\":2,\"214\":1,\"216\":4,\"217\":3,\"239\":1,\"427\":1,\"479\":1,\"488\":1,\"516\":1,\"683\":1,\"736\":1,\"831\":1,\"849\":1,\"906\":1,\"907\":1,\"917\":1,\"949\":1,\"954\":1,\"962\":1,\"963\":3,\"986\":1,\"998\":1,\"1009\":3,\"1011\":8,\"1015\":1,\"1016\":8,\"1017\":5}}],[\"adequate\",{\"1\":{\"1120\":1}}],[\"adjsp\",{\"1\":{\"1107\":3}}],[\"adjustframe调整指向旧栈内存的指针\",{\"1\":{\"1101\":1}}],[\"adjustframe\",{\"1\":{\"1101\":1}}],[\"adjustpanics\",{\"1\":{\"1101\":1}}],[\"adjustdefers\",{\"1\":{\"1101\":1}}],[\"adjustctxt\",{\"1\":{\"1101\":1}}],[\"adjust\",{\"1\":{\"1101\":2,\"1107\":1}}],[\"adjustinfo\",{\"1\":{\"1101\":1}}],[\"adjustment\",{\"1\":{\"1101\":1}}],[\"adjinfo\",{\"1\":{\"1101\":11}}],[\"advanceevacuationmark\",{\"1\":{\"1042\":1}}],[\"advanceevacuationmark函数进行扩容的收尾工作\",{\"1\":{\"1042\":1}}],[\"advertise\",{\"1\":{\"141\":1}}],[\"adc6cb650dde\",{\"1\":{\"907\":1}}],[\"admin的用户能对具有data\",{\"1\":{\"766\":1}}],[\"admin具有角色data2\",{\"1\":{\"765\":1}}],[\"admin指的是角色\",{\"1\":{\"765\":1}}],[\"admins\",{\"1\":{\"762\":2}}],[\"admin\",{\"1\":{\"221\":1,\"610\":2,\"762\":1,\"765\":11,\"766\":3,\"767\":8,\"773\":1}}],[\"ad\",{\"1\":{\"175\":2}}],[\"ads\",{\"1\":{\"175\":8}}],[\"adaptor\",{\"1\":{\"504\":1}}],[\"adapt\",{\"1\":{\"16\":1}}],[\"add和wait不要并发的调用\",{\"1\":{\"1179\":1}}],[\"add和sub函数在每次操作前都会尝试向管道中发送数据\",{\"1\":{\"467\":1}}],[\"add方法就是增加需要等待协程的数量\",{\"1\":{\"1177\":1}}],[\"add方法用于指明要等待的协程的数量\",{\"1\":{\"472\":1}}],[\"addargs\",{\"1\":{\"1074\":1}}],[\"addq\",{\"1\":{\"1066\":1,\"1067\":1}}],[\"addcolumn\",{\"1\":{\"863\":1}}],[\"addconfigpath\",{\"1\":{\"791\":3,\"792\":1}}],[\"addcaller\",{\"1\":{\"843\":1}}],[\"add将返回使用偏移量len更新后的pointer\",{\"1\":{\"752\":1}}],[\"addparsetree方法进行关联\",{\"1\":{\"734\":1}}],[\"addparsetree\",{\"1\":{\"734\":2}}],[\"addidlemarkworker\",{\"1\":{\"1138\":1}}],[\"additional\",{\"1\":{\"504\":1}}],[\"addint32\",{\"1\":{\"1153\":1,\"1154\":1}}],[\"addint64\",{\"1\":{\"489\":1}}],[\"adding\",{\"1\":{\"22\":1,\"33\":1,\"1047\":1}}],[\"addblock\",{\"1\":{\"206\":1}}],[\"addjobs\",{\"1\":{\"158\":2,\"159\":6}}],[\"addstacktrace\",{\"1\":{\"843\":1}}],[\"addsync\",{\"1\":{\"841\":2}}],[\"addsec\",{\"1\":{\"737\":1}}],[\"adds\",{\"1\":{\"145\":4,\"871\":3}}],[\"add函数\",{\"1\":{\"120\":1}}],[\"addr参数\",{\"1\":{\"824\":1}}],[\"addrs\",{\"1\":{\"681\":2}}],[\"addr=false\",{\"1\":{\"551\":1}}],[\"addres\",{\"1\":{\"175\":4}}],[\"addressable\",{\"1\":{\"1054\":1}}],[\"address必须以文本\",{\"1\":{\"952\":2}}],[\"address指向的地址已经无效了\",{\"1\":{\"751\":1}}],[\"address>\",{\"1\":{\"619\":1,\"620\":1}}],[\"addresses\",{\"1\":{\"145\":1,\"175\":1,\"205\":1}}],[\"address\",{\"1\":{\"10\":2,\"141\":1,\"143\":4,\"144\":3,\"145\":12,\"164\":1,\"166\":7,\"167\":4,\"175\":2,\"223\":1,\"224\":5,\"225\":8,\"226\":3,\"227\":5,\"229\":2,\"234\":2,\"328\":1,\"341\":1,\"395\":4,\"405\":4,\"406\":4,\"447\":2,\"448\":1,\"449\":2,\"455\":2,\"550\":1,\"618\":2,\"619\":1,\"620\":2,\"624\":1,\"625\":2,\"626\":3,\"627\":2,\"628\":2,\"639\":1,\"677\":1,\"678\":1,\"679\":1,\"680\":1,\"688\":4,\"689\":3,\"730\":4,\"735\":4,\"736\":5,\"751\":3,\"812\":18,\"813\":7,\"853\":1,\"854\":1,\"855\":1,\"856\":3,\"858\":2,\"859\":2,\"863\":1,\"867\":1,\"871\":2,\"874\":3,\"875\":7,\"876\":2,\"878\":4,\"879\":2,\"880\":2,\"884\":1,\"885\":1,\"886\":2,\"891\":1,\"892\":1,\"893\":1,\"895\":2,\"899\":2,\"942\":2,\"943\":2,\"944\":1,\"950\":14,\"952\":6,\"1077\":1,\"1114\":1,\"1120\":1}}],[\"addr\",{\"1\":{\"141\":2,\"145\":1,\"175\":1,\"241\":1,\"242\":2,\"243\":1,\"441\":10,\"449\":1,\"490\":1,\"557\":1,\"644\":1,\"719\":4,\"824\":6,\"859\":3,\"932\":10,\"934\":3,\"998\":1,\"1021\":1,\"1074\":1,\"1122\":2,\"1137\":9}}],[\"addr2line\",{\"1\":{\"14\":2}}],[\"add\",{\"0\":{\"752\":1,\"1177\":1},\"1\":{\"8\":1,\"9\":1,\"10\":3,\"16\":1,\"21\":1,\"22\":1,\"31\":1,\"115\":1,\"389\":1,\"467\":1,\"472\":5,\"476\":1,\"477\":2,\"478\":3,\"479\":1,\"480\":1,\"481\":1,\"482\":1,\"484\":4,\"485\":2,\"486\":2,\"489\":1,\"490\":2,\"499\":4,\"520\":1,\"527\":4,\"606\":1,\"642\":1,\"682\":1,\"728\":2,\"737\":1,\"752\":3,\"753\":2,\"755\":1,\"781\":1,\"785\":1,\"847\":2,\"952\":1,\"1019\":1,\"1025\":1,\"1030\":3,\"1034\":2,\"1036\":3,\"1037\":2,\"1038\":7,\"1039\":2,\"1040\":1,\"1042\":18,\"1043\":3,\"1052\":2,\"1054\":1,\"1058\":1,\"1079\":1,\"1083\":1,\"1089\":1,\"1107\":2,\"1139\":3,\"1147\":1,\"1148\":2,\"1149\":1,\"1158\":5,\"1159\":2,\"1161\":1,\"1162\":3,\"1165\":1,\"1167\":1,\"1171\":1,\"1175\":1,\"1176\":1,\"1177\":7}}],[\"added\",{\"1\":{\"7\":1,\"500\":1,\"503\":24,\"1138\":1}}],[\"abb\",{\"1\":{\"711\":1}}],[\"abbc\",{\"1\":{\"711\":1}}],[\"abe\",{\"1\":{\"705\":5}}],[\"absolutepath\",{\"1\":{\"1008\":2}}],[\"abs\",{\"1\":{\"656\":1}}],[\"abac\",{\"0\":{\"768\":1},\"1\":{\"757\":1,\"758\":1}}],[\"abandon\",{\"1\":{\"520\":1}}],[\"aba\",{\"1\":{\"490\":1}}],[\"above\",{\"1\":{\"1097\":1,\"1140\":1}}],[\"abort\",{\"1\":{\"1089\":1}}],[\"abortwithstatus\",{\"1\":{\"1000\":1,\"1016\":2}}],[\"abortwitherror\",{\"1\":{\"971\":1}}],[\"abortindex\",{\"1\":{\"995\":1}}],[\"aborted表示其是否被强制停止\",{\"1\":{\"1078\":1}}],[\"aborted\",{\"1\":{\"168\":1,\"1078\":2,\"1079\":1,\"1080\":1}}],[\"about\",{\"1\":{\"3\":1,\"7\":1,\"21\":1,\"22\":1,\"31\":1,\"34\":1,\"504\":5,\"1067\":1,\"1080\":1}}],[\"abcabcabcabcabcabcabcabcabcabc\",{\"1\":{\"714\":1}}],[\"abcedf\",{\"1\":{\"706\":2}}],[\"abcedfg\",{\"1\":{\"706\":2}}],[\"abcefg\",{\"1\":{\"255\":1}}],[\"abcefghijklmn\",{\"1\":{\"254\":1}}],[\"abcd\",{\"1\":{\"705\":1}}],[\"abcdefghijk\",{\"1\":{\"713\":5,\"721\":2}}],[\"abcdefghijlmn\",{\"1\":{\"374\":2}}],[\"abcdefghisa\",{\"1\":{\"712\":1}}],[\"abcdefga\",{\"1\":{\"712\":1}}],[\"abcdefg\",{\"1\":{\"341\":1,\"706\":3,\"712\":3}}],[\"abc\",{\"1\":{\"43\":2,\"174\":1,\"306\":1,\"574\":1,\"705\":1,\"706\":1,\"714\":1,\"1039\":1,\"1067\":2}}],[\"ab\",{\"1\":{\"34\":2}}],[\"abianalyzetypes\",{\"1\":{\"1074\":1}}],[\"abidefault\",{\"1\":{\"1074\":1}}],[\"abiinterna\",{\"1\":{\"1067\":1}}],[\"abiinternal\",{\"1\":{\"9\":1,\"1066\":1}}],[\"abijk\",{\"1\":{\"705\":1}}],[\"abi\",{\"1\":{\"20\":1,\"1032\":1,\"1095\":1,\"1107\":1}}],[\"afterfind\",{\"1\":{\"861\":1}}],[\"afterfindinterface\",{\"1\":{\"861\":1}}],[\"afterdelete\",{\"1\":{\"861\":1}}],[\"afterdeleteinterface\",{\"1\":{\"861\":1}}],[\"aftersave\",{\"1\":{\"861\":1}}],[\"aftersaveinterface\",{\"1\":{\"861\":1}}],[\"aftership\",{\"1\":{\"71\":1}}],[\"afterupdate\",{\"1\":{\"861\":1}}],[\"afterupdateinterface\",{\"1\":{\"861\":1}}],[\"aftercreate\",{\"1\":{\"861\":1}}],[\"aftercreateinterface\",{\"1\":{\"861\":1}}],[\"after函数\",{\"1\":{\"471\":1}}],[\"after函数的返回值是一个只读通道\",{\"1\":{\"469\":1}}],[\"after\",{\"1\":{\"9\":1,\"14\":1,\"17\":1,\"165\":2,\"166\":9,\"167\":2,\"469\":2,\"471\":3,\"520\":1,\"527\":3,\"708\":4,\"737\":1,\"1116\":1,\"1140\":1}}],[\"affected\",{\"1\":{\"4\":1,\"9\":1,\"866\":1,\"869\":1,\"870\":1}}],[\"away\",{\"1\":{\"1167\":1}}],[\"aware\",{\"1\":{\"7\":1}}],[\"awoke\",{\"1\":{\"1153\":6}}],[\"aws\",{\"1\":{\"141\":1}}],[\"awk\",{\"1\":{\"7\":4}}],[\"ancestors\",{\"1\":{\"1095\":1}}],[\"another\",{\"1\":{\"806\":2}}],[\"anonymous\",{\"1\":{\"448\":1}}],[\"angry\",{\"1\":{\"589\":1}}],[\"annotated\",{\"1\":{\"559\":1}}],[\"animal\",{\"1\":{\"414\":5}}],[\"ans\",{\"1\":{\"349\":18,\"397\":2,\"479\":2,\"480\":2,\"1062\":3}}],[\"anscii\",{\"1\":{\"319\":1}}],[\"ansi\",{\"1\":{\"64\":3,\"239\":1}}],[\"analyzer\",{\"1\":{\"209\":2}}],[\"analyzers\",{\"1\":{\"37\":2}}],[\"analyze\",{\"1\":{\"206\":1,\"209\":7,\"559\":1}}],[\"analysis\",{\"1\":{\"37\":3,\"558\":1,\"561\":1}}],[\"anyone\",{\"1\":{\"1067\":1}}],[\"any的参数v\",{\"1\":{\"605\":1}}],[\"any接口内部没有方法集合\",{\"1\":{\"568\":1}}],[\"any类型来承载参数\",{\"1\":{\"875\":1}}],[\"any类型时也可能会发生逃逸\",{\"1\":{\"553\":1}}],[\"any类型\",{\"1\":{\"491\":1}}],[\"anypb\",{\"1\":{\"167\":1}}],[\"anything\",{\"1\":{\"21\":1,\"568\":21,\"1098\":1,\"1120\":1}}],[\"any\",{\"0\":{\"194\":1},\"1\":{\"4\":2,\"17\":1,\"18\":1,\"21\":6,\"38\":1,\"115\":1,\"167\":3,\"194\":3,\"200\":1,\"226\":1,\"344\":3,\"396\":2,\"397\":1,\"429\":2,\"432\":1,\"433\":2,\"443\":1,\"460\":1,\"474\":4,\"475\":2,\"476\":3,\"485\":5,\"486\":11,\"491\":1,\"504\":1,\"520\":1,\"527\":2,\"563\":3,\"568\":3,\"571\":2,\"574\":1,\"577\":2,\"578\":3,\"582\":2,\"583\":2,\"585\":8,\"587\":2,\"603\":1,\"605\":1,\"618\":3,\"624\":2,\"627\":1,\"723\":2,\"725\":11,\"727\":2,\"728\":4,\"730\":2,\"731\":2,\"732\":1,\"733\":9,\"734\":1,\"735\":1,\"736\":1,\"763\":1,\"875\":1,\"886\":1,\"887\":2,\"893\":1,\"971\":1,\"981\":12,\"1011\":1,\"1033\":1,\"1045\":3,\"1046\":2,\"1047\":5,\"1048\":3,\"1049\":1,\"1070\":3,\"1078\":1,\"1079\":1,\"1080\":1,\"1097\":3}}],[\"an\",{\"1\":{\"4\":1,\"7\":1,\"8\":1,\"10\":1,\"17\":3,\"21\":1,\"22\":1,\"37\":1,\"167\":1,\"168\":1,\"414\":8,\"428\":2,\"503\":1,\"520\":1,\"563\":2,\"574\":1,\"582\":1,\"603\":1,\"757\":1,\"1042\":1,\"1057\":1,\"1089\":1,\"1120\":1,\"1150\":1}}],[\"andrew\",{\"1\":{\"598\":1}}],[\"android\",{\"1\":{\"7\":2}}],[\"andeya\",{\"1\":{\"20\":2,\"24\":2,\"27\":2}}],[\"and\",{\"1\":{\"3\":2,\"4\":1,\"5\":1,\"7\":4,\"9\":1,\"10\":1,\"12\":2,\"14\":3,\"16\":3,\"17\":1,\"18\":1,\"21\":3,\"22\":2,\"34\":1,\"37\":5,\"38\":3,\"58\":2,\"108\":1,\"111\":1,\"112\":2,\"113\":1,\"145\":1,\"160\":1,\"165\":1,\"167\":1,\"242\":1,\"329\":1,\"332\":1,\"380\":1,\"503\":2,\"504\":5,\"520\":1,\"558\":1,\"561\":1,\"591\":1,\"593\":1,\"598\":1,\"728\":2,\"763\":1,\"802\":1,\"806\":2,\"810\":2,\"814\":1,\"817\":2,\"818\":2,\"875\":6,\"896\":1,\"897\":2,\"898\":3,\"904\":1,\"923\":1,\"926\":4,\"961\":1,\"966\":1,\"993\":1,\"1036\":1,\"1037\":2,\"1047\":1,\"1067\":2,\"1080\":1,\"1087\":1,\"1089\":1,\"1095\":1,\"1097\":3,\"1101\":1,\"1104\":1,\"1107\":2,\"1114\":1,\"1138\":3,\"1140\":1,\"1144\":1,\"1150\":1}}],[\"around\",{\"1\":{\"1037\":1,\"1097\":1}}],[\"articles\",{\"1\":{\"981\":1}}],[\"article\",{\"1\":{\"758\":1}}],[\"artifacts\",{\"1\":{\"7\":1}}],[\"arch\",{\"1\":{\"503\":2,\"504\":1,\"509\":1}}],[\"archived\",{\"1\":{\"89\":1}}],[\"archiver\",{\"1\":{\"65\":2}}],[\"archive\",{\"1\":{\"8\":1,\"21\":1,\"65\":1,\"90\":1,\"93\":1,\"140\":2,\"616\":2}}],[\"architectures\",{\"1\":{\"14\":1,\"1086\":1}}],[\"architecture\",{\"1\":{\"7\":1}}],[\"arrange\",{\"1\":{\"536\":2}}],[\"arrayrangeclear函数优化成这种形式\",{\"1\":{\"1027\":1}}],[\"arrayclear函数展开成下面这种形式\",{\"1\":{\"1027\":1}}],[\"array\",{\"1\":{\"135\":2,\"362\":4,\"432\":3,\"536\":2,\"926\":2,\"1013\":2,\"1019\":2,\"1020\":2,\"1024\":1,\"1030\":2,\"1037\":1,\"1057\":1}}],[\"arr\",{\"1\":{\"362\":9,\"392\":7,\"539\":5,\"582\":2,\"1020\":6}}],[\"araddon\",{\"1\":{\"66\":1}}],[\"arg就是panic函数的参数\",{\"1\":{\"1078\":1}}],[\"argp指向defer的参数\",{\"1\":{\"1078\":1}}],[\"argp\",{\"1\":{\"1078\":1,\"1079\":2,\"1080\":3}}],[\"argc\",{\"1\":{\"1024\":6,\"1089\":1}}],[\"argintreg\",{\"1\":{\"1021\":2}}],[\"arg3\",{\"1\":{\"728\":1}}],[\"arg2\",{\"1\":{\"728\":1}}],[\"arg1\",{\"1\":{\"728\":1}}],[\"argv\",{\"1\":{\"504\":1,\"1089\":1}}],[\"arg\",{\"1\":{\"459\":2,\"485\":1,\"1023\":1,\"1074\":1,\"1078\":1,\"1079\":1,\"1080\":1,\"1098\":1,\"1112\":7}}],[\"argument\",{\"1\":{\"17\":2,\"37\":1,\"553\":6,\"600\":1,\"1078\":1}}],[\"arguments\",{\"1\":{\"3\":3,\"13\":2,\"22\":1,\"37\":1,\"38\":2,\"518\":1,\"521\":3,\"522\":1,\"1078\":1}}],[\"args=0x0\",{\"1\":{\"9\":1}}],[\"args\",{\"1\":{\"8\":1,\"13\":1,\"14\":1,\"38\":1,\"459\":3,\"527\":1,\"635\":1,\"874\":1,\"875\":3,\"878\":1,\"879\":1,\"887\":1,\"1024\":1,\"1089\":1}}],[\"arm64\",{\"1\":{\"7\":1,\"904\":2}}],[\"arm\",{\"1\":{\"7\":3,\"11\":1,\"904\":3,\"1086\":2}}],[\"ar\",{\"1\":{\"7\":2,\"546\":1}}],[\"arena在预分配的内存空间中申请一块内存\",{\"1\":{\"1122\":1}}],[\"arena\",{\"1\":{\"1122\":1}}],[\"arenahint\",{\"1\":{\"1119\":1,\"1122\":2}}],[\"arenahints\",{\"1\":{\"1118\":1,\"1122\":2}}],[\"arenahintalloc\",{\"1\":{\"1118\":1,\"1119\":1,\"1122\":1}}],[\"arenaidx\",{\"1\":{\"1118\":2}}],[\"arenaindex\",{\"1\":{\"1115\":2,\"1122\":2}}],[\"arenal2bits\",{\"1\":{\"1115\":1,\"1118\":1}}],[\"arenal1bits\",{\"1\":{\"1115\":1,\"1118\":1}}],[\"arenas字段\",{\"1\":{\"1115\":1}}],[\"arenas\",{\"1\":{\"1115\":3,\"1118\":1,\"1122\":1,\"1148\":3}}],[\"areana\",{\"1\":{\"616\":1}}],[\"area\",{\"1\":{\"404\":1}}],[\"are\",{\"1\":{\"4\":2,\"7\":2,\"16\":1,\"17\":1,\"22\":2,\"31\":1,\"37\":1,\"38\":1,\"470\":1,\"472\":1,\"526\":2,\"589\":1,\"598\":1,\"1051\":1,\"1097\":1,\"1101\":1,\"1155\":1,\"1169\":1,\"1176\":2}}],[\"arbitrarytyp\",{\"1\":{\"753\":1}}],[\"arbitrarytype\",{\"0\":{\"746\":1},\"1\":{\"4\":1,\"746\":1,\"748\":1,\"749\":1,\"750\":1,\"751\":2,\"753\":1,\"754\":2,\"1054\":4}}],[\"arbitrary\",{\"1\":{\"4\":1,\"520\":1,\"746\":1,\"844\":1}}],[\"alpha3|iso3166\",{\"1\":{\"937\":1}}],[\"alpha3\",{\"1\":{\"934\":1}}],[\"alpha2|iso3166\",{\"1\":{\"937\":1}}],[\"alpha2\",{\"1\":{\"934\":3}}],[\"alphaunicode\",{\"1\":{\"933\":1}}],[\"alphanumunicode\",{\"1\":{\"933\":1}}],[\"alphanum\",{\"1\":{\"933\":1}}],[\"alpha\",{\"1\":{\"933\":1,\"934\":5,\"937\":1}}],[\"altercolumn\",{\"1\":{\"863\":1}}],[\"algorithm\",{\"1\":{\"1132\":1,\"1140\":1}}],[\"alg\",{\"1\":{\"772\":1,\"774\":2,\"779\":1,\"782\":1,\"783\":1,\"1033\":1}}],[\"alreadyexists\",{\"1\":{\"168\":1}}],[\"already\",{\"1\":{\"165\":1,\"503\":1,\"600\":2,\"1037\":1,\"1067\":1,\"1096\":1,\"1167\":1}}],[\"alice指的是主体\",{\"1\":{\"765\":1}}],[\"alice\",{\"1\":{\"398\":1,\"762\":2,\"764\":4,\"765\":2,\"766\":2,\"767\":2}}],[\"aliases\",{\"1\":{\"208\":1}}],[\"alias\",{\"1\":{\"190\":2}}],[\"alive表示存活\",{\"1\":{\"143\":1}}],[\"alive\",{\"1\":{\"143\":4,\"144\":10,\"520\":1,\"542\":6,\"1037\":2}}],[\"aliyun\",{\"1\":{\"141\":1}}],[\"alignup\",{\"1\":{\"1095\":1,\"1111\":1,\"1122\":4}}],[\"alignof\",{\"0\":{\"750\":1},\"1\":{\"750\":4}}],[\"align\",{\"1\":{\"37\":1,\"1111\":2}}],[\"alignment\",{\"1\":{\"17\":2}}],[\"align=0x0\",{\"1\":{\"9\":1}}],[\"alef\",{\"1\":{\"1084\":1}}],[\"alexmullins\",{\"1\":{\"65\":2}}],[\"alert\",{\"1\":{\"41\":2}}],[\"always\",{\"1\":{\"10\":1,\"13\":1,\"1080\":1}}],[\"also\",{\"1\":{\"4\":2,\"9\":1,\"1024\":1,\"1030\":1,\"1037\":1,\"1144\":1}}],[\"allarenas\",{\"1\":{\"1118\":1}}],[\"allspans\",{\"1\":{\"1118\":1}}],[\"allsettings\",{\"1\":{\"791\":1,\"798\":1}}],[\"allgadd\",{\"1\":{\"1095\":1,\"1100\":1}}],[\"allplock\",{\"1\":{\"1089\":4,\"1107\":2}}],[\"allp\",{\"1\":{\"1089\":17,\"1107\":2}}],[\"allp这个存放所有\",{\"1\":{\"1089\":1}}],[\"alllink\",{\"1\":{\"1089\":1,\"1092\":2}}],[\"allm的头结点\",{\"1\":{\"1089\":1}}],[\"allm\",{\"1\":{\"1089\":4,\"1092\":1}}],[\"allyourbase\",{\"1\":{\"780\":1}}],[\"all可以将一个\",{\"1\":{\"585\":1}}],[\"all会将切片转换成一个切片迭代器\",{\"1\":{\"585\":1}}],[\"alloclarge负责向mheap申请大对象的内存空间\",{\"1\":{\"1126\":1}}],[\"alloclarge\",{\"1\":{\"1126\":2}}],[\"alloc来为其分配足够的页内存\",{\"1\":{\"1120\":1}}],[\"alloctocache\",{\"1\":{\"1120\":1}}],[\"allocnpages\",{\"1\":{\"1117\":1}}],[\"allocnpages可获得mspan的页数\",{\"1\":{\"1114\":1}}],[\"alloc方法会竞争整个堆的全局锁\",{\"1\":{\"1125\":1}}],[\"alloc方法\",{\"1\":{\"1117\":1}}],[\"alloccount++\",{\"1\":{\"1125\":2}}],[\"alloccount\",{\"1\":{\"1114\":1,\"1126\":1}}],[\"alloccache是一个\",{\"1\":{\"1125\":1}}],[\"alloccache的作用是记录内存空间是否有对象使用\",{\"1\":{\"1125\":1}}],[\"alloccache\",{\"1\":{\"1114\":1,\"1117\":1,\"1125\":4}}],[\"allocmspanlocked\",{\"1\":{\"1120\":2}}],[\"allocmcache\",{\"1\":{\"1116\":1}}],[\"allocmanual\",{\"1\":{\"1100\":1}}],[\"allocmlock\",{\"1\":{\"1091\":2}}],[\"allocm函数来创建线程的运行时表示也就是\",{\"1\":{\"1091\":1}}],[\"allocm\",{\"1\":{\"1091\":2}}],[\"alloc\",{\"1\":{\"560\":2,\"1099\":1,\"1111\":1,\"1112\":2,\"1116\":6,\"1117\":2,\"1120\":5,\"1122\":2,\"1124\":1,\"1125\":4,\"1126\":1,\"1128\":2}}],[\"allocator\",{\"1\":{\"1118\":7,\"1122\":1}}],[\"allocating\",{\"1\":{\"1116\":1,\"1139\":1}}],[\"allocations\",{\"1\":{\"1112\":1,\"1140\":1}}],[\"allocation\",{\"1\":{\"208\":1,\"1114\":1,\"1118\":1,\"1122\":1,\"1139\":2}}],[\"allocate\",{\"1\":{\"1074\":1,\"1100\":1,\"1101\":2,\"1124\":1}}],[\"allocated\",{\"1\":{\"536\":2,\"1024\":1,\"1047\":1,\"1087\":1,\"1089\":1,\"1096\":1,\"1114\":1,\"1116\":1}}],[\"allocspan\",{\"1\":{\"1120\":1}}],[\"allocspan方法来完成\",{\"1\":{\"1120\":1}}],[\"allocsprofile\",{\"1\":{\"556\":1}}],[\"allocs\",{\"1\":{\"525\":13,\"526\":62,\"556\":1,\"557\":1,\"588\":3}}],[\"allowed\",{\"1\":{\"990\":2}}],[\"allowglobalupdate\",{\"1\":{\"852\":1}}],[\"allow\",{\"1\":{\"141\":1,\"190\":1,\"759\":1,\"763\":7,\"764\":1,\"765\":1,\"766\":1,\"767\":1,\"958\":3,\"1000\":7,\"1067\":1}}],[\"allowshare\",{\"1\":{\"112\":1}}],[\"allegro\",{\"1\":{\"61\":1}}],[\"all查看下当前项目所引用的依赖\",{\"1\":{\"28\":1}}],[\"all表示当前模块引用的所有依赖\",{\"1\":{\"20\":1}}],[\"all\",{\"1\":{\"4\":3,\"7\":2,\"9\":1,\"14\":2,\"17\":1,\"18\":1,\"20\":1,\"21\":1,\"22\":1,\"28\":1,\"29\":1,\"37\":1,\"201\":1,\"216\":1,\"225\":2,\"229\":1,\"470\":1,\"472\":1,\"503\":2,\"526\":2,\"559\":1,\"585\":7,\"587\":6,\"588\":2,\"862\":1,\"915\":1,\"936\":4,\"1051\":1,\"1061\":3,\"1067\":1,\"1118\":1,\"1140\":2}}],[\"a\",{\"1\":{\"3\":3,\"4\":11,\"5\":1,\"7\":4,\"8\":1,\"10\":1,\"14\":2,\"17\":8,\"18\":3,\"19\":2,\"21\":2,\"22\":1,\"31\":1,\"33\":2,\"34\":2,\"37\":2,\"43\":2,\"44\":2,\"137\":2,\"156\":1,\"160\":3,\"167\":3,\"168\":3,\"188\":2,\"190\":2,\"193\":1,\"209\":3,\"216\":1,\"222\":3,\"258\":4,\"259\":1,\"260\":1,\"265\":4,\"268\":1,\"270\":1,\"271\":1,\"274\":1,\"275\":1,\"278\":1,\"280\":1,\"282\":1,\"295\":4,\"299\":4,\"304\":1,\"305\":1,\"313\":2,\"324\":1,\"329\":11,\"331\":15,\"332\":5,\"333\":11,\"344\":6,\"345\":3,\"348\":3,\"349\":2,\"350\":3,\"351\":2,\"352\":5,\"360\":1,\"375\":7,\"376\":2,\"377\":2,\"378\":2,\"379\":8,\"382\":7,\"383\":4,\"384\":4,\"385\":6,\"386\":4,\"387\":2,\"395\":6,\"396\":2,\"397\":17,\"398\":3,\"399\":4,\"400\":2,\"402\":19,\"410\":3,\"414\":4,\"416\":1,\"445\":3,\"457\":2,\"460\":2,\"471\":7,\"479\":4,\"484\":3,\"485\":2,\"486\":9,\"487\":4,\"498\":1,\"500\":2,\"503\":1,\"504\":7,\"508\":2,\"520\":2,\"521\":28,\"522\":6,\"523\":6,\"524\":6,\"526\":2,\"531\":5,\"532\":3,\"533\":11,\"534\":3,\"536\":7,\"545\":3,\"546\":1,\"547\":4,\"551\":7,\"558\":1,\"559\":2,\"563\":9,\"567\":2,\"568\":5,\"571\":8,\"573\":11,\"574\":1,\"578\":4,\"581\":8,\"582\":3,\"591\":4,\"594\":2,\"596\":2,\"597\":2,\"604\":2,\"606\":8,\"682\":1,\"705\":2,\"706\":2,\"707\":2,\"710\":4,\"712\":1,\"714\":1,\"718\":10,\"726\":2,\"762\":1,\"794\":3,\"812\":3,\"813\":3,\"823\":3,\"826\":1,\"830\":1,\"831\":1,\"923\":1,\"954\":1,\"961\":2,\"966\":1,\"980\":1,\"984\":2,\"985\":1,\"986\":2,\"999\":1,\"1011\":2,\"1016\":2,\"1026\":4,\"1030\":4,\"1037\":1,\"1042\":1,\"1050\":1,\"1051\":1,\"1053\":7,\"1054\":1,\"1067\":3,\"1069\":17,\"1071\":6,\"1074\":2,\"1077\":4,\"1080\":2,\"1086\":1,\"1087\":1,\"1089\":3,\"1095\":1,\"1097\":3,\"1099\":1,\"1100\":3,\"1101\":3,\"1107\":2,\"1116\":1,\"1120\":3,\"1121\":1,\"1124\":1,\"1125\":1,\"1132\":4,\"1138\":2,\"1150\":1}}],[\"asize\",{\"1\":{\"1122\":3}}],[\"asia\",{\"1\":{\"740\":1}}],[\"ask\",{\"1\":{\"1122\":3}}],[\"asyncsafepoint\",{\"1\":{\"1107\":2}}],[\"asyncpreempt2\",{\"1\":{\"1107\":2}}],[\"asyncpreempt2的调用\",{\"1\":{\"1107\":1}}],[\"asyncpreempt函数中\",{\"1\":{\"1107\":1}}],[\"asyncpreempt函数\",{\"1\":{\"1107\":1}}],[\"asyncpreempt\",{\"1\":{\"1107\":4}}],[\"asyncpreemptoff\",{\"1\":{\"1107\":2}}],[\"asyncm\",{\"1\":{\"1107\":1}}],[\"asc\",{\"1\":{\"876\":4}}],[\"asciijson\",{\"1\":{\"981\":1}}],[\"ascii\",{\"1\":{\"160\":1,\"380\":2,\"696\":1,\"933\":3,\"1052\":1}}],[\"asdajl\",{\"1\":{\"820\":1}}],[\"asleep\",{\"1\":{\"470\":1,\"472\":1}}],[\"as也是一样的结果\",{\"1\":{\"167\":1}}],[\"ast\",{\"1\":{\"88\":1,\"616\":1}}],[\"astaxie\",{\"1\":{\"52\":1}}],[\"as传递非指针类型或非error类型的值\",{\"1\":{\"37\":1}}],[\"asap\",{\"1\":{\"1088\":1}}],[\"asaskevich\",{\"1\":{\"24\":1,\"27\":1}}],[\"asan\",{\"1\":{\"8\":1}}],[\"assists\",{\"1\":{\"1140\":4}}],[\"assistworkperbyte\",{\"1\":{\"1139\":6}}],[\"assistqueue\",{\"1\":{\"1139\":6}}],[\"assistbytesperwork中\",{\"1\":{\"1139\":1}}],[\"assistbytesperwork\",{\"1\":{\"1139\":10}}],[\"assistg\",{\"1\":{\"1139\":9}}],[\"assist\",{\"1\":{\"1086\":2,\"1139\":1}}],[\"assign=false\",{\"1\":{\"551\":1}}],[\"assignmentcolumns\",{\"1\":{\"867\":1}}],[\"assignment\",{\"1\":{\"382\":1,\"414\":1,\"591\":1,\"604\":1,\"1038\":1,\"1061\":1,\"1070\":1}}],[\"assignments\",{\"1\":{\"37\":1}}],[\"assign\",{\"1\":{\"37\":2,\"375\":1,\"550\":1,\"551\":1,\"1024\":1,\"1054\":1}}],[\"associations\",{\"1\":{\"899\":1}}],[\"associations表示预加载全部的关系\",{\"1\":{\"899\":1}}],[\"association的参数就是mom\",{\"1\":{\"894\":1}}],[\"association\",{\"1\":{\"894\":3,\"895\":3,\"896\":3,\"897\":3,\"898\":5}}],[\"associated\",{\"1\":{\"1073\":1,\"1088\":1}}],[\"associate\",{\"1\":{\"734\":2}}],[\"assertlockheld\",{\"1\":{\"1120\":1,\"1121\":2,\"1122\":1}}],[\"assert1\",{\"1\":{\"995\":1}}],[\"assert\",{\"1\":{\"28\":1}}],[\"assembly\",{\"1\":{\"9\":1,\"37\":1,\"559\":1}}],[\"assumes\",{\"1\":{\"17\":1}}],[\"asminit和runtime\",{\"1\":{\"1089\":1}}],[\"asminit\",{\"1\":{\"1089\":1}}],[\"asmdecl\",{\"1\":{\"37\":2}}],[\"asm\",{\"1\":{\"14\":2,\"503\":2,\"509\":1,\"603\":1,\"1033\":1,\"1089\":1}}],[\"as\",{\"1\":{\"3\":3,\"4\":3,\"7\":2,\"10\":1,\"37\":1,\"141\":1,\"168\":1,\"414\":1,\"498\":1,\"520\":2,\"536\":2,\"591\":1,\"603\":3,\"838\":1,\"880\":2,\"992\":1,\"1024\":3,\"1042\":2,\"1047\":1,\"1089\":1,\"1118\":1,\"1121\":1}}],[\"bgscancredit\",{\"1\":{\"1139\":8}}],[\"bgmarkready\",{\"1\":{\"1138\":3}}],[\"b也不会加一\",{\"1\":{\"1043\":1}}],[\"b时\",{\"1\":{\"1037\":1}}],[\"b就是哈希桶的数量\",{\"1\":{\"1032\":1}}],[\"bmap中的元素\",{\"1\":{\"1036\":1}}],[\"bmap的结构如下\",{\"1\":{\"1030\":1}}],[\"bmap的字段不止这些\",{\"1\":{\"1030\":1}}],[\"bmap\",{\"1\":{\"1030\":7,\"1032\":3,\"1034\":4,\"1036\":4,\"1037\":4,\"1038\":2,\"1040\":1,\"1042\":5,\"1043\":1}}],[\"btc\",{\"1\":{\"934\":4}}],[\"btree\",{\"1\":{\"58\":3,\"233\":1}}],[\"bfebfbff000806ec\",{\"1\":{\"909\":1}}],[\"b>\",{\"1\":{\"720\":1}}],[\"bcp47\",{\"1\":{\"934\":2}}],[\"bc\",{\"1\":{\"712\":1}}],[\"b2\",{\"1\":{\"694\":2}}],[\"b76863e36670\",{\"1\":{\"503\":2,\"509\":1}}],[\"bkg\",{\"1\":{\"477\":2}}],[\"b8\",{\"1\":{\"380\":1}}],[\"b1\",{\"1\":{\"376\":3,\"508\":1}}],[\"bba\",{\"1\":{\"711\":1}}],[\"bbb\",{\"1\":{\"686\":1}}],[\"bb\",{\"1\":{\"350\":1}}],[\"b+bigger\",{\"1\":{\"1042\":2,\"1043\":1}}],[\"b++\",{\"1\":{\"348\":2,\"1034\":1}}],[\"b++这类语句的写法是错误的\",{\"1\":{\"299\":1}}],[\"b+tree\",{\"1\":{\"62\":1}}],[\"bs\",{\"1\":{\"798\":2,\"1054\":5}}],[\"bson数据的有序表示\",{\"1\":{\"222\":2}}],[\"bson文档的无序表示\",{\"1\":{\"222\":2}}],[\"bson文档的有序表示的基本单位\",{\"1\":{\"222\":2}}],[\"bson文档的有序表示\",{\"1\":{\"222\":2}}],[\"bson\",{\"0\":{\"222\":1},\"1\":{\"218\":1,\"222\":1,\"224\":1,\"225\":3,\"227\":10,\"228\":2,\"229\":4}}],[\"bsr\",{\"1\":{\"156\":1}}],[\"bsd\",{\"1\":{\"87\":1,\"239\":1,\"904\":1}}],[\"broadcast会唤醒所有阻塞的协程\",{\"1\":{\"1169\":1}}],[\"broadcast\",{\"0\":{\"1169\":1},\"1\":{\"482\":2,\"1165\":2,\"1166\":1,\"1169\":1}}],[\"browser\",{\"1\":{\"5\":1,\"561\":1}}],[\"break关键字会终止最内层的for循环\",{\"1\":{\"356\":1}}],[\"break\",{\"0\":{\"356\":1},\"1\":{\"158\":2,\"159\":4,\"298\":1,\"346\":1,\"351\":1,\"356\":2,\"471\":1,\"490\":1,\"578\":2,\"582\":1,\"583\":2,\"584\":4,\"682\":1,\"732\":1,\"1036\":1,\"1038\":2,\"1039\":4,\"1049\":1,\"1076\":1,\"1079\":1,\"1117\":2,\"1122\":1,\"1137\":2,\"1139\":1,\"1145\":1,\"1147\":2,\"1148\":1,\"1153\":2,\"1165\":1}}],[\"breaking\",{\"1\":{\"113\":1,\"156\":1}}],[\"bic\",{\"1\":{\"934\":2}}],[\"bibibibibi\",{\"1\":{\"567\":2}}],[\"bigendian\",{\"1\":{\"1054\":1}}],[\"bigger\",{\"1\":{\"1042\":2,\"1043\":2,\"1101\":1}}],[\"bigint\",{\"1\":{\"863\":2}}],[\"big\",{\"1\":{\"616\":1,\"1037\":1}}],[\"bigmemdata\",{\"1\":{\"485\":4}}],[\"bigcache\",{\"1\":{\"61\":2}}],[\"birthday\",{\"1\":{\"406\":1}}],[\"bitmap用于标识页中对应的地址是否存放了对象\",{\"1\":{\"1115\":1}}],[\"bitmap\",{\"1\":{\"1076\":1,\"1115\":1}}],[\"bitzise\",{\"1\":{\"698\":1}}],[\"bit\",{\"1\":{\"168\":1,\"1051\":1,\"1151\":3}}],[\"bitsize\",{\"1\":{\"697\":2,\"698\":1,\"699\":2,\"700\":2}}],[\"bitset\",{\"1\":{\"58\":1}}],[\"bitsets\",{\"1\":{\"58\":1}}],[\"bits\",{\"1\":{\"58\":2,\"616\":1,\"1117\":1,\"1151\":1,\"1176\":2}}],[\"bi\",{\"1\":{\"157\":1,\"159\":3}}],[\"biancheng\",{\"1\":{\"101\":1}}],[\"biset\",{\"1\":{\"58\":1}}],[\"bin>\",{\"1\":{\"636\":4}}],[\"bin或者$gobin目录下\",{\"1\":{\"504\":1}}],[\"binding\",{\"1\":{\"826\":1,\"971\":4,\"975\":3}}],[\"bind=vm\",{\"1\":{\"143\":2}}],[\"bind=192\",{\"1\":{\"141\":1,\"143\":4,\"144\":2}}],[\"bind\",{\"1\":{\"141\":1,\"826\":2}}],[\"bin对应gobin\",{\"1\":{\"92\":1}}],[\"binaryheap\",{\"1\":{\"578\":7}}],[\"binary\",{\"1\":{\"21\":1,\"38\":2,\"218\":1,\"504\":2,\"986\":1}}],[\"binaryonly\",{\"1\":{\"21\":1}}],[\"bin目录下\",{\"1\":{\"17\":1,\"19\":1}}],[\"bin一样\",{\"1\":{\"7\":1}}],[\"bin应该被添加到系统变量中\",{\"1\":{\"7\":1}}],[\"bin\",{\"1\":{\"7\":4,\"8\":5,\"17\":2,\"19\":3,\"90\":2,\"91\":2,\"92\":2,\"148\":1,\"200\":1,\"233\":4,\"636\":1}}],[\"bx\",{\"1\":{\"45\":1,\"1021\":2,\"1066\":4,\"1067\":1}}],[\"bwmarrin\",{\"1\":{\"24\":1,\"27\":1}}],[\"bzr\",{\"1\":{\"18\":1,\"493\":1}}],[\"borrow\",{\"1\":{\"1091\":2}}],[\"borig\",{\"1\":{\"1039\":3}}],[\"bob拥有对data2进行write操作的权限\",{\"1\":{\"764\":1}}],[\"bob\",{\"1\":{\"398\":1,\"730\":2,\"762\":1,\"764\":4,\"766\":1,\"767\":1,\"897\":3}}],[\"book\",{\"1\":{\"762\":1}}],[\"boottime\",{\"1\":{\"907\":1}}],[\"boot\",{\"1\":{\"567\":4}}],[\"bootstrap\",{\"1\":{\"141\":3,\"143\":5,\"144\":1,\"1089\":2}}],[\"boolvar\",{\"1\":{\"633\":1,\"636\":1}}],[\"booly\",{\"1\":{\"191\":2}}],[\"boolean\",{\"1\":{\"37\":1,\"933\":1,\"1012\":1}}],[\"bools\",{\"1\":{\"37\":2}}],[\"bool\",{\"1\":{\"18\":6,\"21\":9,\"112\":1,\"114\":1,\"115\":1,\"162\":1,\"168\":1,\"184\":2,\"191\":2,\"202\":1,\"242\":1,\"315\":1,\"399\":2,\"432\":3,\"435\":1,\"436\":1,\"437\":1,\"448\":2,\"450\":1,\"460\":1,\"474\":2,\"475\":1,\"477\":1,\"481\":2,\"484\":2,\"486\":6,\"488\":1,\"490\":1,\"513\":1,\"521\":1,\"523\":1,\"524\":1,\"528\":1,\"573\":1,\"581\":4,\"582\":6,\"583\":3,\"584\":1,\"587\":11,\"603\":2,\"632\":1,\"633\":2,\"636\":1,\"683\":1,\"688\":1,\"694\":1,\"695\":1,\"706\":3,\"708\":1,\"709\":1,\"710\":2,\"711\":2,\"737\":2,\"778\":1,\"791\":2,\"812\":3,\"817\":1,\"839\":4,\"840\":3,\"852\":11,\"862\":1,\"863\":4,\"910\":1,\"911\":1,\"912\":1,\"915\":1,\"949\":1,\"981\":2,\"1012\":1,\"1016\":2,\"1025\":1,\"1032\":1,\"1036\":1,\"1037\":1,\"1041\":1,\"1042\":1,\"1045\":1,\"1046\":1,\"1047\":2,\"1048\":2,\"1049\":1,\"1059\":10,\"1060\":12,\"1062\":2,\"1066\":6,\"1067\":2,\"1073\":3,\"1078\":3,\"1079\":1,\"1086\":2,\"1087\":1,\"1088\":1,\"1097\":3,\"1106\":1,\"1111\":1,\"1112\":1,\"1114\":1,\"1120\":1,\"1122\":2,\"1123\":1,\"1125\":1,\"1126\":1,\"1128\":2,\"1132\":1,\"1138\":2,\"1147\":1,\"1152\":1,\"1153\":1,\"1157\":1,\"1160\":1}}],[\"body\",{\"1\":{\"106\":2,\"107\":1,\"108\":2,\"189\":1,\"196\":10,\"355\":1,\"582\":4,\"638\":2,\"639\":1,\"641\":1,\"642\":1,\"732\":3,\"733\":5,\"735\":1,\"975\":7,\"1012\":1,\"1028\":1}}],[\"body>\",{\"1\":{\"41\":2,\"980\":1}}],[\"bolt\",{\"1\":{\"62\":1}}],[\"boltdb\",{\"1\":{\"62\":2}}],[\"both\",{\"1\":{\"38\":1,\"840\":2}}],[\"bounds\",{\"1\":{\"9\":1,\"1042\":1}}],[\"blackenenabled置为\",{\"1\":{\"1140\":1}}],[\"blacken\",{\"1\":{\"1138\":1}}],[\"blackfriday\",{\"1\":{\"504\":1}}],[\"blazing\",{\"1\":{\"836\":1}}],[\"blanks\",{\"1\":{\"17\":1}}],[\"blevesearch\",{\"1\":{\"62\":1}}],[\"bleve\",{\"1\":{\"62\":2}}],[\"bloomapi\",{\"1\":{\"788\":1}}],[\"bloom\",{\"1\":{\"58\":3}}],[\"blooms\",{\"1\":{\"58\":2}}],[\"blocked\",{\"1\":{\"1086\":2,\"1140\":2}}],[\"block表示是否阻塞\",{\"1\":{\"1067\":1}}],[\"block表示当前的发送操作是否是阻塞的\",{\"1\":{\"1059\":1}}],[\"block函数的直接调用\",{\"1\":{\"1066\":1}}],[\"block的值与select结构有关\",{\"1\":{\"1059\":1}}],[\"block语句可以插槽中的默认内容\",{\"1\":{\"735\":1}}],[\"blocking\",{\"1\":{\"520\":1,\"561\":2,\"1065\":1,\"1104\":1}}],[\"blockprofilerate\",{\"1\":{\"519\":1}}],[\"blockprofile\",{\"1\":{\"519\":1,\"556\":1}}],[\"block\",{\"1\":{\"4\":1,\"519\":1,\"556\":1,\"557\":1,\"735\":1,\"736\":1,\"1024\":1,\"1059\":8,\"1060\":8,\"1065\":1,\"1066\":5,\"1067\":2,\"1124\":1}}],[\"blocks\",{\"1\":{\"4\":1,\"1104\":1}}],[\"b004=>\",{\"1\":{\"14\":1}}],[\"b004\",{\"1\":{\"14\":5}}],[\"b001\",{\"1\":{\"13\":1,\"19\":4}}],[\"bdfkcdmtoigiujz\",{\"1\":{\"9\":1}}],[\"bptr\",{\"1\":{\"1037\":3}}],[\"bp\",{\"1\":{\"9\":2,\"45\":3,\"1066\":1,\"1067\":1,\"1086\":1,\"1107\":2}}],[\"b\",{\"1\":{\"8\":1,\"9\":1,\"10\":1,\"53\":2,\"87\":1,\"137\":2,\"162\":2,\"193\":1,\"216\":4,\"258\":5,\"265\":1,\"270\":1,\"275\":1,\"278\":1,\"281\":1,\"295\":4,\"296\":1,\"305\":1,\"313\":2,\"324\":1,\"329\":1,\"331\":20,\"332\":5,\"341\":4,\"344\":3,\"345\":3,\"348\":5,\"349\":2,\"350\":1,\"351\":2,\"352\":1,\"360\":1,\"382\":1,\"383\":4,\"384\":6,\"385\":6,\"386\":4,\"387\":2,\"395\":7,\"397\":14,\"398\":3,\"399\":4,\"400\":2,\"402\":19,\"410\":3,\"417\":2,\"418\":2,\"445\":3,\"460\":2,\"471\":5,\"479\":2,\"484\":2,\"486\":2,\"508\":2,\"521\":28,\"522\":6,\"523\":6,\"524\":6,\"525\":19,\"526\":62,\"527\":8,\"531\":5,\"532\":3,\"533\":11,\"534\":4,\"545\":3,\"547\":4,\"567\":1,\"568\":5,\"571\":8,\"573\":7,\"578\":4,\"581\":8,\"588\":12,\"594\":2,\"596\":2,\"606\":4,\"694\":2,\"695\":2,\"698\":2,\"700\":1,\"705\":2,\"706\":1,\"710\":4,\"719\":6,\"720\":2,\"751\":2,\"794\":2,\"812\":3,\"813\":3,\"820\":2,\"826\":5,\"830\":1,\"971\":2,\"1026\":4,\"1030\":7,\"1032\":4,\"1034\":15,\"1036\":14,\"1037\":22,\"1038\":14,\"1039\":20,\"1040\":7,\"1041\":7,\"1042\":27,\"1043\":4,\"1053\":8,\"1054\":8,\"1067\":3,\"1069\":8,\"1137\":15,\"1145\":7}}],[\"balance\",{\"1\":{\"1137\":1,\"1145\":1}}],[\"balancerconfig\",{\"1\":{\"175\":1}}],[\"balancer\",{\"1\":{\"141\":1}}],[\"bad\",{\"1\":{\"1042\":2,\"1098\":1,\"1102\":1}}],[\"badrequest\",{\"1\":{\"971\":1}}],[\"badger\",{\"1\":{\"62\":2,\"614\":1}}],[\"ba697a8c\",{\"1\":{\"907\":1}}],[\"bac\",{\"1\":{\"706\":1}}],[\"backoff\",{\"1\":{\"838\":2}}],[\"backend\",{\"1\":{\"504\":2}}],[\"back\",{\"1\":{\"35\":1,\"952\":4,\"1088\":1}}],[\"backups\",{\"1\":{\"840\":4,\"841\":1}}],[\"backup\",{\"1\":{\"17\":1}}],[\"background和context\",{\"1\":{\"475\":1}}],[\"background\",{\"1\":{\"16\":3,\"145\":1,\"154\":1,\"158\":1,\"159\":1,\"163\":2,\"166\":1,\"167\":1,\"170\":1,\"174\":1,\"175\":1,\"221\":1,\"475\":3,\"476\":1,\"477\":2,\"478\":1,\"520\":1,\"1063\":1,\"1138\":2,\"1140\":1}}],[\"ba\",{\"1\":{\"706\":1,\"712\":1}}],[\"baidu\",{\"1\":{\"638\":1}}],[\"baz\",{\"1\":{\"296\":2,\"823\":11,\"1014\":2}}],[\"bazaar\",{\"1\":{\"18\":1,\"493\":1}}],[\"banana\",{\"1\":{\"587\":2}}],[\"bang\",{\"1\":{\"296\":2}}],[\"banner\",{\"1\":{\"64\":3}}],[\"basicauth\",{\"1\":{\"960\":3}}],[\"basic\",{\"1\":{\"563\":1,\"735\":2,\"736\":3,\"960\":1,\"1015\":1}}],[\"basics\",{\"1\":{\"146\":1,\"180\":1}}],[\"bashrc文件中设置环境变量\",{\"1\":{\"91\":1}}],[\"base+ask\",{\"1\":{\"1122\":1}}],[\"base指的是预计分配桶的数量\",{\"1\":{\"1034\":1}}],[\"basepath\",{\"1\":{\"1011\":2,\"1016\":2}}],[\"based\",{\"1\":{\"765\":1}}],[\"basecontext\",{\"1\":{\"644\":1}}],[\"baseline\",{\"1\":{\"527\":6}}],[\"base64url\",{\"1\":{\"934\":2}}],[\"base64urlencode\",{\"1\":{\"774\":4}}],[\"base64\",{\"1\":{\"143\":1,\"934\":2}}],[\"base64x\",{\"1\":{\"24\":1,\"503\":2,\"509\":3}}],[\"base\",{\"1\":{\"4\":2,\"526\":4,\"579\":1,\"1024\":1,\"1034\":4,\"1065\":1,\"1076\":1,\"1100\":1,\"1114\":1,\"1115\":4,\"1117\":1,\"1120\":9,\"1121\":1,\"1122\":3,\"1125\":2,\"1126\":1}}],[\"bamzi\",{\"1\":{\"66\":1}}],[\"barrier\",{\"1\":{\"1136\":1,\"1137\":1,\"1140\":1,\"1144\":1}}],[\"barriers\",{\"1\":{\"1112\":1}}],[\"bar\",{\"1\":{\"7\":3,\"129\":1,\"192\":2,\"296\":2,\"823\":12,\"826\":1,\"828\":7,\"830\":4,\"840\":2,\"1014\":2}}],[\"batchhead+i\",{\"1\":{\"1104\":1}}],[\"batch\",{\"1\":{\"3\":1,\"1104\":2}}],[\"being\",{\"1\":{\"1102\":1,\"1140\":1,\"1144\":2}}],[\"beijing\",{\"1\":{\"341\":3}}],[\"beyond\",{\"1\":{\"1095\":1}}],[\"because\",{\"1\":{\"1089\":1,\"1095\":1,\"1097\":1,\"1101\":1}}],[\"become\",{\"1\":{\"1086\":1}}],[\"bech32\",{\"1\":{\"934\":2}}],[\"bello\",{\"1\":{\"1054\":1}}],[\"bearer\",{\"1\":{\"775\":1,\"1015\":4}}],[\"betteralign\",{\"1\":{\"410\":1}}],[\"between\",{\"1\":{\"37\":1,\"818\":2,\"1067\":1,\"1098\":1}}],[\"beginning\",{\"1\":{\"1037\":1}}],[\"begin方法用于开启事务\",{\"1\":{\"902\":1}}],[\"begin\",{\"1\":{\"238\":2,\"504\":5,\"902\":3,\"1147\":1}}],[\"be6f6b8d\",{\"1\":{\"141\":3}}],[\"beego\",{\"1\":{\"51\":3,\"52\":3,\"962\":1}}],[\"been\",{\"1\":{\"3\":1,\"29\":1,\"1030\":1,\"1067\":1,\"1132\":1,\"1144\":1,\"1167\":1}}],[\"benchstat\",{\"0\":{\"526\":1},\"1\":{\"526\":5}}],[\"benchmarkpulling\",{\"1\":{\"588\":3}}],[\"benchmarkpushing\",{\"1\":{\"588\":3}}],[\"benchmarknaive\",{\"1\":{\"588\":3}}],[\"benchmark\",{\"1\":{\"548\":2}}],[\"benchmarkconcatbuilder\",{\"1\":{\"525\":8,\"526\":32}}],[\"benchmarkconcatdirect\",{\"1\":{\"525\":8,\"526\":32}}],[\"benchmem\",{\"1\":{\"519\":1,\"525\":1,\"526\":2}}],[\"bench参数则会运行所有类型的测试\",{\"1\":{\"518\":1}}],[\"benchtime\",{\"1\":{\"38\":2,\"518\":1}}],[\"bench\",{\"1\":{\"38\":1,\"518\":2,\"519\":1,\"525\":3,\"526\":4}}],[\"be\",{\"1\":{\"4\":4,\"7\":2,\"14\":1,\"21\":1,\"22\":1,\"165\":1,\"167\":3,\"200\":1,\"520\":1,\"536\":4,\"826\":1,\"848\":2,\"975\":3,\"1016\":1,\"1024\":1,\"1030\":2,\"1037\":3,\"1042\":1,\"1051\":1,\"1073\":1,\"1088\":1,\"1089\":2,\"1096\":1,\"1099\":1,\"1101\":2,\"1107\":2,\"1114\":1,\"1132\":3,\"1138\":3,\"1140\":1,\"1150\":1,\"1153\":1}}],[\"beforedelete\",{\"1\":{\"861\":1}}],[\"beforedeleteinterface\",{\"1\":{\"861\":1}}],[\"beforesave\",{\"1\":{\"861\":1}}],[\"beforesaveinterface\",{\"1\":{\"861\":1}}],[\"beforeupdate\",{\"1\":{\"861\":1}}],[\"beforeupdateinterface\",{\"1\":{\"861\":1}}],[\"beforecreate\",{\"1\":{\"861\":1}}],[\"beforecreateinterface\",{\"1\":{\"861\":1}}],[\"before\",{\"1\":{\"4\":1,\"17\":1,\"37\":1,\"165\":2,\"166\":9,\"167\":2,\"527\":3,\"708\":4,\"737\":1,\"778\":1,\"1067\":1,\"1087\":1,\"1097\":1,\"1101\":1,\"1107\":1,\"1112\":1,\"1114\":1,\"1128\":1,\"1138\":1,\"1139\":2,\"1140\":1,\"1178\":2}}],[\"bysize\",{\"1\":{\"1128\":1}}],[\"bypassed\",{\"1\":{\"1078\":2}}],[\"byname\",{\"1\":{\"956\":1}}],[\"bye\",{\"1\":{\"518\":3,\"520\":5,\"527\":4}}],[\"by=\",{\"1\":{\"140\":1}}],[\"byte的值用于签名和验证\",{\"1\":{\"777\":1}}],[\"byte都可以用作有效的密钥\",{\"1\":{\"777\":1}}],[\"bytereader\",{\"1\":{\"721\":1}}],[\"byte来访问类型unsigned\",{\"1\":{\"534\":1}}],[\"byte值\",{\"1\":{\"341\":1}}],[\"byte类型即字节切片\",{\"1\":{\"319\":1}}],[\"bytebufferpool\",{\"1\":{\"82\":2}}],[\"byte\",{\"1\":{\"41\":3,\"44\":2,\"117\":1,\"184\":1,\"216\":2,\"319\":1,\"328\":1,\"341\":3,\"343\":1,\"375\":1,\"376\":2,\"378\":1,\"379\":1,\"396\":1,\"417\":6,\"418\":4,\"422\":1,\"428\":1,\"527\":4,\"528\":2,\"534\":6,\"536\":8,\"553\":1,\"572\":3,\"598\":1,\"618\":3,\"620\":1,\"621\":2,\"624\":2,\"627\":1,\"628\":1,\"682\":3,\"698\":1,\"700\":1,\"701\":1,\"719\":1,\"721\":1,\"748\":1,\"755\":3,\"756\":2,\"779\":1,\"780\":1,\"781\":1,\"782\":1,\"783\":1,\"784\":1,\"809\":1,\"840\":1,\"981\":1,\"984\":2,\"1003\":1,\"1026\":2,\"1052\":2,\"1053\":3,\"1054\":12,\"1111\":2,\"1114\":1,\"1117\":1,\"1118\":1}}],[\"bytesmarked\",{\"1\":{\"1137\":1}}],[\"bytescanner\",{\"1\":{\"721\":1}}],[\"bytes\",{\"1\":{\"41\":2,\"152\":2,\"167\":2,\"184\":1,\"207\":1,\"209\":1,\"212\":1,\"214\":1,\"216\":3,\"376\":7,\"379\":4,\"380\":1,\"417\":6,\"616\":1,\"619\":2,\"623\":2,\"625\":2,\"627\":2,\"629\":2,\"639\":1,\"701\":8,\"756\":3,\"862\":1,\"1051\":1,\"1054\":6,\"1112\":3,\"1116\":2}}],[\"bytedance\",{\"1\":{\"24\":2,\"27\":1,\"57\":1,\"63\":1,\"503\":2,\"509\":2,\"510\":4}}],[\"bytealg\",{\"1\":{\"20\":1}}],[\"by\",{\"1\":{\"3\":1,\"4\":1,\"7\":5,\"9\":1,\"21\":6,\"34\":1,\"37\":1,\"38\":1,\"139\":1,\"140\":1,\"144\":1,\"167\":1,\"200\":1,\"463\":2,\"503\":1,\"536\":2,\"551\":1,\"561\":2,\"719\":2,\"823\":1,\"824\":1,\"874\":1,\"875\":3,\"876\":2,\"878\":1,\"896\":2,\"897\":2,\"898\":3,\"992\":1,\"1030\":1,\"1067\":1,\"1088\":1,\"1089\":1,\"1097\":1,\"1132\":1,\"1138\":2}}],[\"busy\",{\"1\":{\"1153\":1}}],[\"buckhashsys\",{\"1\":{\"1128\":1}}],[\"bucketevacuated\",{\"1\":{\"1042\":1}}],[\"bucket++\",{\"1\":{\"1037\":1}}],[\"bucketloop\",{\"1\":{\"1036\":2,\"1038\":2}}],[\"bucketmask函数所干的事就是计算\",{\"1\":{\"1036\":1}}],[\"bucketmask\",{\"1\":{\"1036\":1,\"1037\":1,\"1038\":1,\"1040\":1}}],[\"bucketcntbits\",{\"1\":{\"1037\":1}}],[\"bucketcnt\",{\"1\":{\"1030\":1,\"1032\":5,\"1036\":1,\"1037\":5,\"1038\":2,\"1039\":3,\"1040\":1,\"1042\":8,\"1043\":1}}],[\"bucket\",{\"1\":{\"1030\":5,\"1032\":1,\"1034\":3,\"1037\":16,\"1038\":4,\"1040\":2,\"1042\":6}}],[\"bucketshift是计算1\",{\"1\":{\"1032\":1}}],[\"bucketshift\",{\"1\":{\"1032\":1,\"1034\":2,\"1037\":1}}],[\"buckets指向哈希桶数组\",{\"1\":{\"1032\":1}}],[\"bucketsize\",{\"1\":{\"1030\":4,\"1034\":2,\"1036\":1,\"1038\":1,\"1040\":1,\"1042\":6,\"1043\":1}}],[\"buckets\",{\"1\":{\"1030\":7,\"1032\":1,\"1034\":4,\"1036\":1,\"1037\":7,\"1038\":3,\"1040\":2,\"1042\":5,\"1043\":2}}],[\"burnt\",{\"1\":{\"509\":1}}],[\"burntsushi最终会转义为github\",{\"1\":{\"509\":1}}],[\"burntsushi\",{\"1\":{\"20\":1}}],[\"buzz\",{\"1\":{\"201\":3}}],[\"bundle\",{\"1\":{\"1016\":2}}],[\"bun\",{\"1\":{\"52\":2}}],[\"builtin\",{\"1\":{\"1030\":1,\"1051\":1}}],[\"builtins获取默认的函数映射表\",{\"1\":{\"728\":1}}],[\"built\",{\"1\":{\"22\":1,\"31\":1,\"823\":1}}],[\"build时\",{\"1\":{\"827\":1}}],[\"build来声明\",{\"1\":{\"823\":1}}],[\"builder作为函数参数传递的时候\",{\"1\":{\"719\":1}}],[\"builder的性能要远远高于使用+拼接字符串\",{\"1\":{\"525\":1}}],[\"builder则要好很多\",{\"1\":{\"525\":1}}],[\"builder\",{\"0\":{\"719\":1},\"1\":{\"174\":4,\"379\":6,\"433\":2,\"525\":1,\"719\":14,\"852\":1,\"952\":5}}],[\"buildoptions\",{\"1\":{\"145\":1,\"174\":1,\"175\":1,\"843\":2}}],[\"buildinfo包\",{\"1\":{\"119\":1}}],[\"buildid字段值为包的buildid\",{\"1\":{\"20\":1}}],[\"buildid\",{\"1\":{\"14\":4,\"21\":1}}],[\"build指令是在\",{\"1\":{\"42\":1}}],[\"build2033992495\",{\"1\":{\"19\":2}}],[\"build2822241271\",{\"1\":{\"13\":1}}],[\"buildv\",{\"1\":{\"18\":1}}],[\"buildtag\",{\"1\":{\"16\":1,\"37\":2}}],[\"build那会做很多善后处理\",{\"1\":{\"15\":1}}],[\"build产生的缓存\",{\"1\":{\"15\":1}}],[\"build的不同在于\",{\"1\":{\"14\":1}}],[\"build没有太大的差别\",{\"1\":{\"13\":1}}],[\"build进行编译\",{\"1\":{\"11\":1}}],[\"buildmode\",{\"1\":{\"8\":1}}],[\"buildmode=exe\",{\"1\":{\"6\":1}}],[\"build命令可以通过tags来达到控制编译的效果\",{\"1\":{\"12\":1}}],[\"build命令还支持相当多的构建标志用于控制编译时的一些行为\",{\"1\":{\"8\":1}}],[\"build命令的作用就是将\",{\"1\":{\"8\":1}}],[\"buildssa函数的下面这部分代码\",{\"1\":{\"1076\":1}}],[\"builds\",{\"1\":{\"7\":1}}],[\"build\",{\"0\":{\"8\":1,\"42\":1},\"1\":{\"2\":1,\"6\":11,\"7\":4,\"8\":10,\"9\":2,\"10\":4,\"11\":9,\"12\":2,\"13\":1,\"14\":1,\"15\":1,\"18\":2,\"19\":2,\"20\":1,\"21\":3,\"31\":1,\"35\":1,\"37\":2,\"38\":2,\"39\":1,\"40\":1,\"42\":2,\"140\":1,\"141\":1,\"143\":2,\"144\":3,\"145\":1,\"166\":1,\"174\":1,\"175\":1,\"205\":5,\"530\":1,\"532\":1,\"545\":1,\"546\":1,\"550\":2,\"551\":1,\"552\":1,\"553\":2,\"567\":3,\"636\":4,\"823\":4,\"824\":3,\"827\":2,\"828\":2,\"830\":1,\"840\":1,\"907\":2}}],[\"but\",{\"1\":{\"7\":1,\"24\":1,\"37\":1,\"496\":1,\"1051\":2,\"1065\":1,\"1091\":1,\"1096\":1,\"1097\":2,\"1107\":2,\"1120\":1}}],[\"bufsend\",{\"1\":{\"1067\":2}}],[\"bufrecv\",{\"1\":{\"1067\":2}}],[\"bufio提供了可缓冲的输出方法\",{\"1\":{\"340\":1}}],[\"bufio\",{\"0\":{\"340\":1,\"345\":1},\"1\":{\"340\":2,\"345\":1,\"346\":2,\"583\":1,\"584\":1,\"616\":1}}],[\"bufbuild\",{\"0\":{\"156\":1},\"1\":{\"156\":2}}],[\"buff\",{\"1\":{\"553\":1}}],[\"buffer\",{\"1\":{\"148\":1,\"180\":1,\"365\":1,\"417\":13,\"458\":1,\"629\":2,\"721\":3,\"1137\":1}}],[\"buffers下文统称为protobuf\",{\"1\":{\"180\":1}}],[\"buffers是谷歌\",{\"1\":{\"180\":1}}],[\"buffers\",{\"0\":{\"629\":1},\"1\":{\"146\":1,\"147\":1,\"156\":1,\"179\":1,\"180\":1,\"193\":1,\"200\":1,\"617\":1,\"918\":1}}],[\"buffalo\",{\"1\":{\"51\":2,\"1009\":1}}],[\"buf\",{\"1\":{\"6\":1,\"156\":12,\"158\":4,\"159\":2,\"164\":2,\"343\":3,\"485\":5,\"536\":5,\"553\":1,\"682\":3,\"719\":1,\"1053\":12,\"1054\":9,\"1057\":2,\"1058\":3,\"1120\":4,\"1121\":2,\"1145\":1}}],[\"buger\",{\"1\":{\"24\":1,\"27\":1}}],[\"bug\",{\"0\":{\"5\":1},\"1\":{\"2\":1,\"4\":1,\"5\":5,\"137\":1,\"505\":1,\"516\":1,\"1069\":1}}],[\"它确保了并发环境下某个操作只执行一次\",{\"1\":{\"1174\":1}}],[\"它确实使得编写代码更加方便\",{\"1\":{\"589\":1}}],[\"它依赖于\",{\"1\":{\"1165\":1}}],[\"它允许协程在某个条件满足之前进入等待状态\",{\"1\":{\"1164\":1}}],[\"它正在等待当前的所有读者协程完成工作\",{\"1\":{\"1162\":1}}],[\"它大致上归纳为以下几种状态\",{\"1\":{\"1156\":1}}],[\"它开始时会进行检查\",{\"1\":{\"1152\":1}}],[\"它获取锁的优先级肯定是要高很多的\",{\"1\":{\"1151\":1}}],[\"它本身的代码并不复杂\",{\"1\":{\"1149\":1}}],[\"它本质上也是对runtime\",{\"1\":{\"1058\":1}}],[\"它满足强三色不变式\",{\"1\":{\"1142\":1}}],[\"它存放着要追踪的对象指针\",{\"1\":{\"1137\":1}}],[\"它存放的是待执行管道的sacses数组下标\",{\"1\":{\"1067\":1}}],[\"它其实跟强三色不变性同理\",{\"1\":{\"1136\":1}}],[\"它便会强制开启\",{\"1\":{\"1132\":1}}],[\"它专门记录了用于heaparena扩容相关的地址信息\",{\"1\":{\"1122\":1}}],[\"它管理着所有被创建的mspan\",{\"1\":{\"1118\":1}}],[\"它唯一的调用入口就是runtime\",{\"1\":{\"1116\":1}}],[\"它唯一参与的与后台有关的事情就是局域网流言转发\",{\"1\":{\"142\":1}}],[\"它由汇编实现\",{\"1\":{\"1107\":1}}],[\"它由汇编实现位于文件runtime\",{\"1\":{\"1089\":1}}],[\"它通过getg获取当前的协程\",{\"1\":{\"1098\":1}}],[\"它通常用于延迟初始化\",{\"1\":{\"1171\":1}}],[\"它通常由结构体的方式展现\",{\"1\":{\"853\":1}}],[\"它通常和slicedata配合起来使用\",{\"1\":{\"754\":1}}],[\"它总共就三个方法\",{\"1\":{\"1166\":1}}],[\"它总共只干两件事\",{\"1\":{\"1160\":1}}],[\"它总共只有四个字段\",{\"1\":{\"1045\":1}}],[\"它总共有\",{\"1\":{\"1114\":1}}],[\"它总共做了以下几个主要的事情\",{\"1\":{\"1092\":1}}],[\"它借鉴过的语言有下面这些\",{\"1\":{\"1084\":1}}],[\"它吸收了很多前人的经验和教训\",{\"1\":{\"1084\":1}}],[\"它主要是负责执行各个分配器的初始化工作\",{\"1\":{\"1119\":1}}],[\"它主要是用来更新单列字段\",{\"1\":{\"885\":1}}],[\"它主要做了下面几件事情\",{\"1\":{\"1082\":1}}],[\"它实际上是一个数组\",{\"1\":{\"1145\":1}}],[\"它实际上是链接到了runtime\",{\"1\":{\"1098\":1}}],[\"它实际上是\",{\"1\":{\"1070\":1}}],[\"它实现的效果跟上一个例子是差不多的\",{\"1\":{\"41\":1}}],[\"它被作为回调函数传入了gopark中\",{\"1\":{\"1067\":1}}],[\"它最终会唤醒发送方协程\",{\"1\":{\"1067\":1}}],[\"它退出的条件有两个\",{\"1\":{\"1063\":1}}],[\"它保存在了sudog\",{\"1\":{\"1059\":1}}],[\"它指向全局runtime\",{\"1\":{\"1151\":1}}],[\"它指向发送元素的指针\",{\"1\":{\"1059\":1}}],[\"它指在并发标记时的对象颜色的两个不变性\",{\"1\":{\"1136\":1}}],[\"它指的是\",{\"1\":{\"8\":1}}],[\"它所包含的字段并不多\",{\"1\":{\"1057\":1}}],[\"它所做的工作就是直接把src的内存直接复制到dst的地址\",{\"1\":{\"1053\":1}}],[\"它所接受的值也就是template\",{\"1\":{\"21\":1}}],[\"它更适合读多写少的场景\",{\"1\":{\"1050\":1}}],[\"它更多的是为了展示某一个功能的使用方法\",{\"1\":{\"520\":1}}],[\"它首先会对wg\",{\"1\":{\"1177\":1}}],[\"它首先会对链表进行上锁\",{\"1\":{\"1167\":1}}],[\"它首先会尝试讲readercount减一\",{\"1\":{\"1162\":1}}],[\"它首先会尝试快速解锁\",{\"1\":{\"1154\":1}}],[\"它首先会根据npage计算所需内存并进行对齐\",{\"1\":{\"1122\":1}}],[\"它首先会根据传入的size和元素类型elem\",{\"1\":{\"1058\":1}}],[\"它首先会将自身加入notifylist中\",{\"1\":{\"1167\":1}}],[\"它首先会将\",{\"1\":{\"1093\":1}}],[\"它首先会将源代码下载到gomodcache所存放的路径\",{\"1\":{\"19\":1}}],[\"它首先会从全局的sched\",{\"1\":{\"1074\":1}}],[\"它首先会初始化几个数组\",{\"1\":{\"1067\":1}}],[\"它首先会检查管道是否为nil\",{\"1\":{\"1059\":1}}],[\"它首先会访问\",{\"1\":{\"1046\":1}}],[\"它都不会有任何反应\",{\"1\":{\"1039\":1}}],[\"它加上了溢出桶的数量\",{\"1\":{\"1034\":1}}],[\"它代表的是数据在bmap中的内存偏移量\",{\"1\":{\"1030\":1}}],[\"它能访问和修改的起始位置取决于对数组的引用位置\",{\"1\":{\"1019\":1}}],[\"它相比前者多了一个\",{\"1\":{\"1016\":1}}],[\"它相当于\",{\"1\":{\"582\":1}}],[\"它相当常用\",{\"1\":{\"38\":1}}],[\"它\",{\"1\":{\"963\":1}}],[\"它具有类似\",{\"1\":{\"962\":1}}],[\"它具有以下特点\",{\"1\":{\"810\":1}}],[\"它底层兼容许多主流的操作系统\",{\"1\":{\"904\":1}}],[\"它需要经过以下的严格判断\",{\"1\":{\"1153\":1}}],[\"它需要是完整的数据库数据类型\",{\"1\":{\"862\":1}}],[\"它需要一定的时间进行采样\",{\"1\":{\"556\":1}}],[\"它包含\",{\"1\":{\"857\":1}}],[\"它包含了filter\",{\"1\":{\"587\":1}}],[\"它包含了有关所有\",{\"1\":{\"533\":1}}],[\"它返回的指针就是该对象的地址\",{\"1\":{\"1123\":1}}],[\"它返回的就是dns\",{\"1\":{\"174\":1}}],[\"它返回了字符串person\",{\"1\":{\"855\":1}}],[\"它同样是由汇编实现\",{\"1\":{\"1089\":1}}],[\"它同样支持链式操作\",{\"1\":{\"849\":1}}],[\"它同样也是开源的\",{\"1\":{\"8\":1}}],[\"它同样也有许多缺点\",{\"1\":{\"0\":1}}],[\"它仅仅存储用户与角色之间的映射关系\",{\"1\":{\"758\":1}}],[\"它仅能作用于语言内置的几个数据结构\",{\"1\":{\"580\":1}}],[\"它完完全全是一门面向工程的语言\",{\"1\":{\"609\":1}}],[\"它并非关键字\",{\"1\":{\"581\":1}}],[\"它与\",{\"1\":{\"581\":1}}],[\"它与前者的数据文件互不兼容\",{\"1\":{\"561\":1}}],[\"它与前者的区别就是是否开启测试缓存\",{\"1\":{\"38\":1}}],[\"它描述了一组抽象的规范\",{\"1\":{\"562\":1}}],[\"它带有\",{\"1\":{\"543\":1}}],[\"它没法被取消\",{\"1\":{\"475\":1}}],[\"它没有名称\",{\"1\":{\"398\":1}}],[\"它则是一边读一边写\",{\"1\":{\"419\":1}}],[\"它必须是指针\",{\"1\":{\"406\":1}}],[\"它必须位于包声明的上方\",{\"1\":{\"12\":1}}],[\"它用于存放不知道长度的数据\",{\"1\":{\"363\":1}}],[\"它就是异或运算符\",{\"1\":{\"299\":1}}],[\"它就会以文件夹模式执行测试\",{\"1\":{\"38\":1}}],[\"它控制可见性的方式非常简单\",{\"1\":{\"294\":1}}],[\"它接收一个字节数组和一个字符串切片\",{\"1\":{\"1053\":1}}],[\"它接收一个关联参数\",{\"1\":{\"894\":1}}],[\"它接收两个参数\",{\"1\":{\"1027\":1}}],[\"它接收源切片和目的切片的指针和长度\",{\"1\":{\"1026\":1}}],[\"它接收三个参数\",{\"1\":{\"8\":1,\"1020\":1}}],[\"它接受一个函数和\",{\"1\":{\"1091\":1}}],[\"它接受一个回调函数作为参数\",{\"1\":{\"581\":1,\"582\":1}}],[\"它接受一个可变长personoptions类型的参数\",{\"1\":{\"406\":1}}],[\"它接受一个\",{\"1\":{\"406\":1}}],[\"它接受两个参数\",{\"1\":{\"232\":1}}],[\"它基于前者\",{\"1\":{\"201\":1}}],[\"它很少用于修饰字段\",{\"1\":{\"197\":1}}],[\"它是唯一一个需要手动初始化的同步工具\",{\"1\":{\"1164\":1}}],[\"它是go定义的一组接口\",{\"1\":{\"1150\":1}}],[\"它是所有\",{\"1\":{\"1123\":1}}],[\"它是用于直接调用通过在execute时期传入的data中的函数\",{\"1\":{\"728\":1}}],[\"它是通过错误来体现\",{\"1\":{\"598\":1}}],[\"它是绝对不会自己释放掉的\",{\"1\":{\"543\":1}}],[\"它是乐观锁的一种典型实现\",{\"1\":{\"490\":1}}],[\"它是一种对defer的优化方式\",{\"1\":{\"1076\":1}}],[\"它是一种开放的\",{\"1\":{\"770\":1}}],[\"它是一种在协程间通信的解决方案\",{\"1\":{\"463\":1}}],[\"它是一个结构体类型\",{\"1\":{\"1151\":1}}],[\"它是一个非常老牌的\",{\"1\":{\"848\":1}}],[\"它是一个变量而不是常量\",{\"1\":{\"598\":1}}],[\"它是一个高性能的通用编程语言\",{\"1\":{\"88\":1}}],[\"它是一个独立的二进制文件\",{\"1\":{\"17\":1}}],[\"它是自带的\",{\"1\":{\"194\":1}}],[\"它负责在垃圾回收时防止\",{\"1\":{\"1131\":1}}],[\"它负责从协程的链表中取出defer并执行\",{\"1\":{\"1075\":1}}],[\"它负责删除\",{\"1\":{\"1040\":1}}],[\"它负责按照指定的顺序去调用\",{\"1\":{\"823\":1}}],[\"它负责构造\",{\"1\":{\"174\":1}}],[\"它负责检测短变量命名的变量隐藏问题\",{\"1\":{\"37\":1}}],[\"它把一些需要跨进程传递的数据放在了\",{\"1\":{\"169\":1}}],[\"它不断正序遍历直到当前溢出桶的前一个为止\",{\"1\":{\"1039\":1}}],[\"它不再需要去自己手写表的字段名\",{\"1\":{\"849\":1}}],[\"它不控制对特定文章或日志的访问\",{\"1\":{\"758\":1}}],[\"它不一定能在减少内存占用这方面带来实质性的提升\",{\"1\":{\"410\":1}}],[\"它不会覆盖\",{\"1\":{\"163\":1}}],[\"它不参与\",{\"1\":{\"142\":1}}],[\"它在运行时会与可执行文件一起加载到内存中\",{\"1\":{\"545\":1}}],[\"它在\",{\"1\":{\"160\":1}}],[\"它只会在没有协程阻塞等待时才会去直接持有锁\",{\"1\":{\"1153\":1}}],[\"它只会被覆盖\",{\"1\":{\"1028\":1}}],[\"它只需要将未标记的对象回收释放就行\",{\"1\":{\"1146\":1}}],[\"它只接收参数runtime\",{\"1\":{\"1132\":1}}],[\"它只在\",{\"1\":{\"1111\":1}}],[\"它只是一个抽象的概念\",{\"1\":{\"1104\":1}}],[\"它只是暂时让你略过了提交到发版的这一过程\",{\"1\":{\"513\":1}}],[\"它只负责指定新旧桶\",{\"1\":{\"1042\":1}}],[\"它只负责返回元素指针\",{\"1\":{\"1038\":1}}],[\"它只负责转发\",{\"1\":{\"142\":1}}],[\"它只有三个参数\",{\"1\":{\"1123\":1}}],[\"它只有三个方法\",{\"1\":{\"41\":1}}],[\"它只有一个方法\",{\"1\":{\"855\":1}}],[\"它只对外暴露两个函数\",{\"1\":{\"812\":1}}],[\"它使用空白符号缩进和大量依赖外观的特色\",{\"1\":{\"621\":1}}],[\"它使用\",{\"1\":{\"142\":1}}],[\"它提供的方法非常的简单易懂\",{\"1\":{\"1150\":1}}],[\"它提供的\",{\"1\":{\"736\":1}}],[\"它提供的命令行接口主要是提供给其它工具或脚本调用的\",{\"1\":{\"22\":1}}],[\"它提供了一种灵活且高效的方式来管理协程间的同步\",{\"1\":{\"1170\":1}}],[\"它提供了处理网络通信\",{\"1\":{\"673\":1}}],[\"它提供了fmt\",{\"1\":{\"339\":1}}],[\"它提供了服务发现\",{\"1\":{\"139\":1}}],[\"它定义和描述了关于迭代器的详细信息\",{\"1\":{\"114\":1}}],[\"它自带\",{\"1\":{\"88\":1}}],[\"它适合用于云服务开发\",{\"1\":{\"88\":1}}],[\"它适合执行简短的命令\",{\"1\":{\"40\":1}}],[\"它将ret值设置成为了\",{\"1\":{\"1080\":1}}],[\"它将runtime\",{\"1\":{\"44\":1}}],[\"它将允许多个验证映射到单个标签上\",{\"1\":{\"927\":1}}],[\"它将序列中的元素逐个传递给回调函数\",{\"1\":{\"582\":1}}],[\"它将输出该路径下所有可以被识别的二进制文件编译时所采用的\",{\"1\":{\"6\":1}}],[\"它除了支持build命令的编译参数之外\",{\"1\":{\"38\":1}}],[\"它可以直接传实体结构\",{\"1\":{\"888\":1}}],[\"它可以是一个闭包或者结构体\",{\"1\":{\"583\":1}}],[\"它可以在\",{\"1\":{\"578\":1}}],[\"它可以在链接时定义指定包的字符串变量的值\",{\"1\":{\"10\":1}}],[\"它可以更好的控制子孙协程以及层级更深的协程\",{\"1\":{\"473\":1}}],[\"它可以很灵活的去应对一些问题\",{\"1\":{\"427\":1}}],[\"它可以做一些一些优化\",{\"1\":{\"198\":1}}],[\"它可以通过可插拔的负载平衡\",{\"1\":{\"146\":1}}],[\"它可以管理本地多个\",{\"1\":{\"93\":1}}],[\"它可以以文件名或者包名来作为输入参数来表示执行哪些文件的generate指令\",{\"1\":{\"40\":1}}],[\"它可以将当前模块所引用的全局依赖导出到\",{\"1\":{\"28\":1}}],[\"它有三种可能的情况\",{\"1\":{\"1045\":1}}],[\"它有着以下独一无二的特性\",{\"1\":{\"927\":1}}],[\"它有两种检查级别\",{\"1\":{\"533\":1}}],[\"它有一个专门的命令可以用于执行所有位于源文件中的\",{\"1\":{\"40\":1}}],[\"它有下面几个子命令\",{\"1\":{\"22\":1}}],[\"它有以下可选的值\",{\"1\":{\"1086\":1}}],[\"它有以下几个可选值\",{\"1\":{\"1138\":1}}],[\"它有以下几个可选项\",{\"1\":{\"7\":2}}],[\"它有以下几个参数\",{\"1\":{\"28\":1}}],[\"它有以下常用下标志\",{\"1\":{\"4\":1}}],[\"它输出了从当前项目到fmt及其引用的所有依赖的包\",{\"1\":{\"20\":1}}],[\"它们可以共存\",{\"1\":{\"1151\":1}}],[\"它们并不涉及内存复制\",{\"1\":{\"1054\":1}}],[\"它们两个指向的都是同一个内存地址\",{\"1\":{\"1053\":1}}],[\"它们之间层层作用\",{\"1\":{\"1113\":1}}],[\"它们之间最大的不同就是对称加密和非对称加密\",{\"1\":{\"777\":1}}],[\"它们之间不能有其它字符\",{\"1\":{\"726\":1}}],[\"它们仅仅只是一个代表而已\",{\"1\":{\"747\":1}}],[\"它们是两个不同的变量\",{\"1\":{\"730\":1}}],[\"它们是这样一个调用链go\",{\"1\":{\"533\":1}}],[\"它们分别代表了\",{\"1\":{\"557\":1}}],[\"它们在\",{\"1\":{\"541\":1}}],[\"它们一般是with开头\",{\"1\":{\"406\":1}}],[\"它们诞生在exp函数的作用域内\",{\"1\":{\"399\":1}}],[\"它们不再具有返回值\",{\"1\":{\"299\":1}}],[\"它们被降级为了语句statement\",{\"1\":{\"299\":1}}],[\"它们的业务使用场景非常常见\",{\"1\":{\"1149\":1}}],[\"它们的实际类型就是你传入的具体类型\",{\"1\":{\"747\":1}}],[\"它们的实际类型如下\",{\"1\":{\"222\":1}}],[\"它们的类型是time\",{\"1\":{\"738\":1}}],[\"它们的类型必须是message\",{\"1\":{\"181\":1}}],[\"它们的思想都是一样的\",{\"1\":{\"583\":1}}],[\"它们的返回值就是一个闭包函数\",{\"1\":{\"406\":1}}],[\"它们的参数支持所有的可比较类型\",{\"1\":{\"332\":1}}],[\"它们对外暴露\",{\"1\":{\"142\":1}}],[\"它们发展的领域各不相同\",{\"1\":{\"88\":1}}],[\"它们会被添加到全局任务队列中\",{\"1\":{\"1138\":1}}],[\"它们会涉及到更深的东西\",{\"1\":{\"49\":1}}],[\"它们会在gomodcache\",{\"1\":{\"18\":1}}],[\"它们有另一个比较术语化的名字\",{\"1\":{\"39\":1}}],[\"它们都位于runtime\",{\"1\":{\"1085\":1}}],[\"它们都接受一个迭代器作为参数\",{\"1\":{\"583\":1}}],[\"它们都嵌入了gprc\",{\"1\":{\"158\":1}}],[\"它们都是存在栈上\",{\"1\":{\"1053\":1}}],[\"它们都是使用的本地文件系统\",{\"1\":{\"736\":1}}],[\"它们都是较为现代化的语言\",{\"1\":{\"88\":1}}],[\"它们都是针对某一个点进行分析的分析器\",{\"1\":{\"37\":1}}],[\"它们都是用于下载第三方的依赖\",{\"1\":{\"19\":1}}],[\"它们都有一个\",{\"1\":{\"12\":1}}],[\"它支持泛型\",{\"1\":{\"683\":1}}],[\"它支持多种语言\",{\"1\":{\"199\":1}}],[\"它支持构建标志作为参数\",{\"1\":{\"37\":1}}],[\"它支持下面几个参数\",{\"1\":{\"26\":1}}],[\"它支持以下接口方法\",{\"1\":{\"863\":1}}],[\"它支持以下参数\",{\"1\":{\"24\":1}}],[\"它支持以下标志\",{\"1\":{\"15\":1}}],[\"它支持的参数如下\",{\"1\":{\"20\":1}}],[\"它支持文件夹\",{\"1\":{\"16\":1}}],[\"它也会使用cas操作来尝试直接持有锁\",{\"1\":{\"1153\":1}}],[\"它也可以用来更新记录\",{\"1\":{\"884\":1}}],[\"它也可以是一个模块路径\",{\"1\":{\"201\":1}}],[\"它也同样实现了locker接口\",{\"1\":{\"481\":1}}],[\"它也是\",{\"1\":{\"146\":1}}],[\"它也是由\",{\"1\":{\"93\":1}}],[\"它也支持build命令的构建标志\",{\"1\":{\"13\":1}}],[\"它也提示了\",{\"1\":{\"3\":1}}],[\"它还适用于连接设备\",{\"1\":{\"146\":1}}],[\"它还支持许多testflag\",{\"1\":{\"38\":1}}],[\"它还支持一些其它的标志参数\",{\"1\":{\"37\":1}}],[\"它还支持两个参数\",{\"1\":{\"27\":1}}],[\"它还可以用来管理不那么普通的依赖\",{\"1\":{\"18\":1}}],[\"它还可以通过简单的间隔来达到逻辑控制的目的\",{\"1\":{\"12\":1}}],[\"它还接收文件路径作为参数\",{\"1\":{\"6\":1}}],[\"它以一种指令的方式存在于源代码中\",{\"1\":{\"12\":1}}],[\"它的核心就在于add\",{\"1\":{\"1176\":1}}],[\"它的用法不再赘述\",{\"1\":{\"1175\":1}}],[\"它的用途十分广泛\",{\"1\":{\"618\":1}}],[\"它的原理就是在执行前先加锁\",{\"1\":{\"1172\":1}}],[\"它的流程就是一个for循环\",{\"1\":{\"1178\":1}}],[\"它的流程基本上是一致的\",{\"1\":{\"1169\":1}}],[\"它的流程如下\",{\"1\":{\"1159\":1,\"1168\":1}}],[\"它的大部分实现都被隐藏在了runtime库下\",{\"1\":{\"1166\":1}}],[\"它的大小默认为\",{\"1\":{\"1100\":1}}],[\"它的缺点比较明显\",{\"1\":{\"1134\":1}}],[\"它的类型定义位于sync\",{\"1\":{\"1176\":1}}],[\"它的类型为gccontrollerstate\",{\"1\":{\"1131\":1}}],[\"它的类型就是函数\",{\"1\":{\"582\":1}}],[\"它的字段不像线性分配器一样简单易懂\",{\"1\":{\"1112\":1}}],[\"它的执行权会被剥夺\",{\"1\":{\"1104\":1}}],[\"它的执行结果是\",{\"1\":{\"527\":1}}],[\"它的默认值是当前机器上的\",{\"1\":{\"1085\":1}}],[\"它的名字相信各位或多或少都应该听说过\",{\"1\":{\"1083\":1}}],[\"它的结构与defer非常类似\",{\"1\":{\"1078\":1}}],[\"它的结构并不复杂\",{\"1\":{\"1073\":1}}],[\"它的结构如下\",{\"1\":{\"1042\":1}}],[\"它的长度是scase数组的两倍\",{\"1\":{\"1067\":2}}],[\"它的处理逻辑长达\",{\"1\":{\"1067\":1}}],[\"它的语法跟\",{\"1\":{\"1063\":1}}],[\"它的语法如下\",{\"1\":{\"193\":1}}],[\"它的情况仅仅适用于管道已关闭且管道缓冲区中没有元素\",{\"1\":{\"1062\":1}}],[\"它的逻辑还是非常简单的\",{\"1\":{\"1054\":1}}],[\"它的逻辑比较简单\",{\"1\":{\"1020\":1}}],[\"它的思路与读操作几乎完全一致\",{\"1\":{\"1048\":1}}],[\"它的返回值返回了一个新的切片\",{\"1\":{\"1025\":1}}],[\"它的返回值是\",{\"1\":{\"532\":1}}],[\"它的代码如下所示\",{\"1\":{\"1058\":1}}],[\"它的代码如下\",{\"1\":{\"1020\":1}}],[\"它的容量就被限制到了\",{\"1\":{\"1019\":1}}],[\"它的值是互斥锁可以阻塞等待协程数量的2倍\",{\"1\":{\"1156\":1}}],[\"它的值是你的securitydefinitions定义的名称\",{\"1\":{\"1015\":1}}],[\"它的值只能是0或1\",{\"1\":{\"1042\":1}}],[\"它的值就是字段的中文名\",{\"1\":{\"952\":1}}],[\"它的值应该是嵌入引用结构体中的被引用类型的字段名\",{\"1\":{\"894\":1}}],[\"它的设计理念上是基于图\",{\"1\":{\"849\":1}}],[\"它的中文文档已经相当完善了\",{\"1\":{\"848\":1}}],[\"它的实际上是\",{\"1\":{\"826\":1}}],[\"它的实现也很简单\",{\"1\":{\"1158\":1}}],[\"它的实现也基于互斥锁\",{\"1\":{\"1155\":1}}],[\"它的实现也只是稍微封装了一下并调用withdeadline\",{\"1\":{\"478\":1}}],[\"它的实现非常简单\",{\"1\":{\"1080\":1}}],[\"它的实现代码如下\",{\"1\":{\"581\":1}}],[\"它的特点就是安全性高\",{\"1\":{\"770\":1}}],[\"它的内部结构非常简单\",{\"1\":{\"1172\":1}}],[\"它的内部不允许出现repeated修饰的字段\",{\"1\":{\"195\":1}}],[\"它的内容结构更加简洁\",{\"1\":{\"621\":1}}],[\"它的出现是可以被接受的\",{\"1\":{\"599\":1}}],[\"它的性能肯定是不如原生\",{\"1\":{\"588\":1}}],[\"它的应用场景确实不是很多\",{\"1\":{\"583\":1}}],[\"它的增长趋势总体上而言会持续变缓\",{\"1\":{\"527\":1}}],[\"它的存在只是为了更加方便的进行本地开发\",{\"1\":{\"513\":1}}],[\"它的功能就是开启10个协程打印0\",{\"1\":{\"1175\":1}}],[\"它的功能就是用于等待一组协程运行完毕\",{\"1\":{\"1175\":1}}],[\"它的功能就是把之前的斐波那契迭代器改造成拉取式迭代器\",{\"1\":{\"583\":1}}],[\"它的功能是获取到当前协程的运行时表示\",{\"1\":{\"1089\":1}}],[\"它的功能与mapaccess1函数完全一致\",{\"1\":{\"1037\":1}}],[\"它的功能与前者没什么区别\",{\"1\":{\"42\":1}}],[\"它的功能同样非常简单\",{\"1\":{\"496\":1}}],[\"它的功能非常简单\",{\"1\":{\"496\":1}}],[\"它的使用与其他的原子类型并无太大的差别\",{\"1\":{\"491\":1}}],[\"它的使用非常简单\",{\"1\":{\"484\":1}}],[\"它的使用格式是\",{\"1\":{\"9\":1}}],[\"它的参数是会被预计算的\",{\"1\":{\"402\":1}}],[\"它的参数支持任意类型\",{\"1\":{\"339\":1}}],[\"它的输出\",{\"1\":{\"730\":1,\"899\":1}}],[\"它的输出如下\",{\"1\":{\"730\":1}}],[\"它的输出还是和之前一样\",{\"1\":{\"414\":1}}],[\"它的输出一定是\",{\"1\":{\"402\":1}}],[\"它的输出是\",{\"1\":{\"333\":2}}],[\"它的入参依旧是\",{\"1\":{\"331\":1}}],[\"它的顺序是先计算值再赋值\",{\"1\":{\"331\":1}}],[\"它的本质是\",{\"1\":{\"229\":1}}],[\"它的基本数据单位就是文档\",{\"1\":{\"218\":1}}],[\"它的生命周期也就结束了\",{\"1\":{\"160\":1}}],[\"它的\",{\"1\":{\"160\":1}}],[\"它的职责主要有参与\",{\"1\":{\"142\":1}}],[\"它的作用主要是解决一致性构建问题\",{\"1\":{\"510\":1}}],[\"它的作用仅限于此\",{\"1\":{\"43\":1}}],[\"它的作用是不断的扫描缓冲区中的对象\",{\"1\":{\"1137\":1}}],[\"它的作用是在获取字段名时或替换掉原名称\",{\"1\":{\"952\":1}}],[\"它的作用是查询出所有学校关联的所有学生以及每一个学生所关联的母亲和每一个学生所拥有的房子\",{\"1\":{\"899\":1}}],[\"它的作用是按照主键升序查找第一条记录\",{\"1\":{\"869\":1}}],[\"它的作用是当字段name冲突后\",{\"1\":{\"867\":1}}],[\"它的作用是当主键匹配时就更新记录\",{\"1\":{\"866\":1}}],[\"它的作用是表示当前函数不会发生内存逃逸行为\",{\"1\":{\"47\":1}}],[\"它的作用是返回一个字符串字面量\",{\"1\":{\"45\":1}}],[\"它的作用是将可以将静态文件一同打包进二进制文件中\",{\"1\":{\"41\":1}}],[\"它的作用是将指定地址包源代码下载到gomodcache所对应的目录中\",{\"1\":{\"18\":1}}],[\"它的作用是预下载依赖到本地的文件缓存中\",{\"1\":{\"25\":1}}],[\"它的作用是直接调用cmd\",{\"1\":{\"14\":1}}],[\"它的格式是\",{\"1\":{\"43\":1}}],[\"它的格式如下\",{\"1\":{\"41\":1}}],[\"它的格式就是简单的key=value这种形式\",{\"1\":{\"7\":1}}],[\"它的命名规则一般为\",{\"1\":{\"23\":1}}],[\"它的所有字段也可以作为模板参数\",{\"1\":{\"21\":1}}],[\"它的源代码位于cmd\",{\"1\":{\"8\":1}}],[\"它会检查是否仍有任务要执行\",{\"1\":{\"1140\":1}}],[\"它会检测源文件中那些已经过时的\",{\"1\":{\"16\":1}}],[\"它会被扣除与申请内存大小相同的积分\",{\"1\":{\"1139\":1}}],[\"它会被翻译成对runtime\",{\"1\":{\"1066\":2}}],[\"它会创建一个runtime\",{\"1\":{\"1138\":1}}],[\"它会创建表\",{\"1\":{\"863\":1}}],[\"它会尝试将readercount的值加1\",{\"1\":{\"1161\":1}}],[\"它会尝试调用互斥锁的trylock\",{\"1\":{\"1157\":1}}],[\"它会尝试在内存单元中寻找未标记的对象\",{\"1\":{\"1147\":1}}],[\"它会尝试从缓冲池去获取可追踪的指针\",{\"1\":{\"1137\":1}}],[\"它会尝试获取缓存中最后一个mspan\",{\"1\":{\"1120\":1}}],[\"它会尝试偷取该\",{\"1\":{\"1104\":1}}],[\"它会让当前协程停止工作并进行一轮新的调度循环从而将执行权让给其它协程\",{\"1\":{\"1107\":1}}],[\"它会将旧栈内存拷贝到一个更大的栈空间上\",{\"1\":{\"1103\":1}}],[\"它会调用runtime\",{\"1\":{\"1098\":1}}],[\"它会在堆中寻找所有对象都未被标记的内存单元\",{\"1\":{\"1148\":1}}],[\"它会在下轮扫描中被释放掉\",{\"1\":{\"1143\":1}}],[\"它会在runtime\",{\"1\":{\"1139\":1}}],[\"它会在程序启动时负责初始化调度器运行所需的资源\",{\"1\":{\"1089\":1}}],[\"它会在程序引导阶段时被分配一个单独的线程来启动\",{\"1\":{\"1082\":1}}],[\"它会在mapassign函数和mapdelete函数中\",{\"1\":{\"1042\":1}}],[\"它会以先进后出的方式来执行defer关联的函数\",{\"1\":{\"1072\":1}}],[\"它会遍历整个scases数组\",{\"1\":{\"1067\":1}}],[\"它会更新recvx和sendx\",{\"1\":{\"1059\":1}}],[\"它会阻塞当前\",{\"1\":{\"1050\":1}}],[\"它会统计已搬迁数量并确认是否与旧桶数量相等\",{\"1\":{\"1042\":1}}],[\"它会删除\",{\"1\":{\"1039\":1}}],[\"它会删除gocache目录下产生的编译缓存\",{\"1\":{\"15\":1}}],[\"它会指向存放溢出桶的切片\",{\"1\":{\"1032\":1}}],[\"它会进行一系列检查工作\",{\"1\":{\"1030\":1}}],[\"它会返回一个新的切片结构体\",{\"1\":{\"1024\":1}}],[\"它会返回该段内存的切片表达形式\",{\"1\":{\"754\":1}}],[\"它会替代原本的字段名称\",{\"1\":{\"952\":2}}],[\"它会先预先加载被关联引用的实体\",{\"1\":{\"899\":1}}],[\"它会先将数据写入到内存中\",{\"1\":{\"340\":1}}],[\"它会追踪时间戳秒数\",{\"1\":{\"862\":2}}],[\"它会对程序运行时的数据进行部分采样\",{\"1\":{\"554\":1}}],[\"它会与\",{\"1\":{\"546\":1}}],[\"它会根据传入的数量来修改runtime\",{\"1\":{\"1089\":1}}],[\"它会根据给定的条件查找出所有符合的记录\",{\"1\":{\"873\":1}}],[\"它会根据版本及模块名缓存开发者下载过的模块\",{\"1\":{\"501\":1}}],[\"它会根据各个模块的依赖关系来更新\",{\"1\":{\"35\":1}}],[\"它会执行当前所在包下的所有测试用例\",{\"1\":{\"38\":1}}],[\"它会下载所有存在于go\",{\"1\":{\"25\":1}}],[\"它会下载并编译这些包\",{\"1\":{\"18\":1}}],[\"它会提示你此用法已经被废弃了\",{\"1\":{\"18\":1}}],[\"它会输出当前\",{\"1\":{\"6\":1}}],[\"它会输出当前包的注释\",{\"1\":{\"4\":1}}],[\"它会用你的默认浏览器访问github\",{\"1\":{\"5\":1}}],[\"dying\",{\"1\":{\"1087\":2}}],[\"dynamic\",{\"1\":{\"10\":1,\"233\":1}}],[\"dflt\",{\"1\":{\"1065\":1}}],[\"d指定多个目录\",{\"1\":{\"1017\":1}}],[\"dgrijalva\",{\"1\":{\"776\":1}}],[\"dgraph\",{\"1\":{\"61\":1,\"62\":1,\"614\":1}}],[\"dd\",{\"1\":{\"739\":1}}],[\"ddd\",{\"1\":{\"698\":1}}],[\"dddd\",{\"1\":{\"698\":1}}],[\"dddde±dd\",{\"1\":{\"698\":2}}],[\"ddddp±ddd\",{\"1\":{\"698\":3}}],[\"d个格式化参数的的错误\",{\"1\":{\"600\":1}}],[\"d+\",{\"1\":{\"531\":1}}],[\"d97214ce235bfcf5\",{\"1\":{\"527\":1}}],[\"d856c981b6266ba2便是输出的语料文件路径\",{\"1\":{\"527\":1}}],[\"d856c981b6266ba2\",{\"1\":{\"527\":7}}],[\"d为时间间隔\",{\"1\":{\"519\":1}}],[\"dmitri\",{\"1\":{\"510\":1}}],[\"d1\",{\"1\":{\"508\":1}}],[\"d=\",{\"1\":{\"399\":1,\"531\":1}}],[\"d将不会被返回\",{\"1\":{\"397\":1}}],[\"ds\",{\"0\":{\"1183\":1}}],[\"dsttype\",{\"1\":{\"813\":2}}],[\"dst\",{\"1\":{\"378\":6,\"419\":1,\"426\":2,\"813\":2,\"863\":21,\"1026\":2,\"1042\":26,\"1059\":2}}],[\"dstgo\",{\"1\":{\"26\":1,\"28\":1,\"81\":2,\"158\":1,\"159\":2,\"818\":3,\"819\":1,\"820\":1}}],[\"dsn\",{\"1\":{\"232\":2,\"851\":4,\"852\":1}}],[\"dsl\",{\"1\":{\"207\":2,\"209\":2,\"216\":4,\"1017\":1}}],[\"dbsxqsufeyxct5ztwvi\",{\"1\":{\"781\":1}}],[\"db\",{\"1\":{\"205\":1,\"223\":1,\"224\":1,\"225\":2,\"227\":1,\"232\":2,\"234\":6,\"235\":1,\"236\":1,\"237\":1,\"238\":3,\"241\":1,\"242\":1,\"243\":1,\"817\":2,\"851\":6,\"852\":2,\"856\":1,\"861\":9,\"862\":1,\"863\":5,\"864\":1,\"866\":16,\"867\":3,\"869\":6,\"870\":4,\"871\":5,\"872\":4,\"873\":4,\"874\":9,\"875\":18,\"876\":5,\"877\":7,\"878\":7,\"879\":4,\"880\":4,\"881\":2,\"882\":4,\"884\":2,\"885\":5,\"886\":6,\"887\":2,\"888\":13,\"889\":1,\"893\":1,\"894\":3,\"895\":5,\"896\":5,\"897\":7,\"898\":12,\"899\":3,\"901\":5,\"902\":11,\"963\":1}}],[\"d>\",{\"1\":{\"201\":1}}],[\"d条消息\",{\"1\":{\"158\":1}}],[\"dc2\",{\"1\":{\"144\":10}}],[\"dc\",{\"1\":{\"143\":2,\"144\":5,\"833\":5,\"834\":5,\"835\":7}}],[\"dc1\",{\"1\":{\"141\":3,\"143\":5,\"144\":14}}],[\"dnsbuilder\",{\"1\":{\"174\":1}}],[\"dns\",{\"0\":{\"681\":1},\"1\":{\"141\":1,\"142\":1,\"174\":4,\"673\":1,\"681\":1,\"817\":1}}],[\"dll\",{\"1\":{\"545\":3}}],[\"dlrow\",{\"1\":{\"527\":1}}],[\"dl\",{\"1\":{\"91\":1,\"93\":1}}],[\"dlv=\",{\"1\":{\"19\":1}}],[\"dlv\",{\"1\":{\"6\":1,\"8\":1,\"19\":4,\"504\":7}}],[\"d5\",{\"1\":{\"75\":1}}],[\"django\",{\"1\":{\"60\":1}}],[\"dryrun\",{\"1\":{\"849\":1,\"852\":1}}],[\"driven\",{\"1\":{\"524\":2}}],[\"drivername\",{\"1\":{\"232\":1}}],[\"driver接口的类型都支持\",{\"1\":{\"231\":1}}],[\"driver\",{\"1\":{\"62\":3,\"219\":4,\"220\":1,\"221\":3,\"222\":2,\"223\":2,\"226\":2,\"227\":2,\"228\":2,\"229\":2,\"231\":4,\"295\":1,\"851\":9}}],[\"driectional\",{\"1\":{\"157\":1}}],[\"drawline\",{\"1\":{\"835\":2}}],[\"drawpoint\",{\"1\":{\"834\":1}}],[\"drawcircle\",{\"1\":{\"833\":1}}],[\"draveness\",{\"1\":{\"99\":1,\"102\":1}}],[\"dragonfly\",{\"1\":{\"7\":1,\"904\":1}}],[\"dropg\",{\"1\":{\"1096\":2,\"1097\":1,\"1098\":1,\"1106\":1}}],[\"dropped\",{\"1\":{\"1061\":1}}],[\"dropindex\",{\"1\":{\"863\":1}}],[\"dropconstraint\",{\"1\":{\"863\":1}}],[\"dropcolumn\",{\"1\":{\"863\":1}}],[\"dropview\",{\"1\":{\"863\":1}}],[\"droptable\",{\"1\":{\"863\":1}}],[\"drop\",{\"1\":{\"233\":1}}],[\"dropuse\",{\"1\":{\"34\":1}}],[\"dropretract=version\",{\"1\":{\"26\":1}}],[\"dropreplace=old\",{\"1\":{\"26\":1,\"34\":1}}],[\"droprequire=path\",{\"1\":{\"26\":1}}],[\"dropexclude=path\",{\"1\":{\"26\":1}}],[\"duplicates\",{\"1\":{\"1086\":2}}],[\"duplicate\",{\"1\":{\"895\":4,\"897\":4}}],[\"dumping\",{\"1\":{\"1086\":1}}],[\"dump\",{\"1\":{\"504\":1}}],[\"duke\",{\"1\":{\"82\":1,\"923\":2}}],[\"dustin\",{\"1\":{\"56\":1}}],[\"dubbo\",{\"1\":{\"53\":3}}],[\"durationencoder\",{\"1\":{\"839\":3}}],[\"duration\",{\"1\":{\"38\":1,\"168\":1,\"194\":1,\"200\":1,\"242\":9,\"462\":1,\"469\":1,\"478\":2,\"479\":2,\"480\":2,\"481\":4,\"482\":4,\"632\":1,\"737\":2,\"738\":4,\"741\":1,\"742\":1,\"743\":1,\"791\":1,\"838\":1,\"911\":1,\"996\":2}}],[\"during\",{\"1\":{\"17\":1,\"1037\":1,\"1078\":1,\"1089\":2,\"1096\":1,\"1097\":1}}],[\"due\",{\"1\":{\"21\":2}}],[\"d参数可以预览其变化\",{\"1\":{\"17\":1}}],[\"dwarf\",{\"1\":{\"9\":2,\"10\":1}}],[\"d\",{\"1\":{\"9\":1,\"14\":1,\"17\":5,\"18\":1,\"19\":1,\"20\":1,\"114\":1,\"140\":1,\"145\":1,\"216\":1,\"222\":3,\"224\":1,\"225\":2,\"227\":10,\"228\":2,\"229\":4,\"258\":2,\"265\":1,\"270\":1,\"312\":1,\"324\":1,\"341\":2,\"344\":3,\"345\":3,\"349\":1,\"354\":2,\"380\":4,\"383\":4,\"385\":3,\"386\":2,\"397\":4,\"399\":1,\"410\":1,\"414\":2,\"416\":2,\"469\":1,\"478\":1,\"508\":1,\"519\":1,\"520\":2,\"521\":24,\"522\":6,\"523\":6,\"524\":4,\"531\":1,\"532\":1,\"533\":2,\"537\":6,\"539\":1,\"543\":2,\"547\":2,\"559\":1,\"573\":2,\"587\":3,\"603\":4,\"606\":6,\"636\":5,\"698\":2,\"710\":4,\"737\":2,\"741\":1,\"742\":1,\"743\":1,\"817\":1,\"915\":2,\"916\":2,\"984\":1,\"985\":1,\"1007\":1,\"1016\":1,\"1017\":2,\"1019\":1,\"1052\":1,\"1069\":5,\"1074\":21,\"1075\":7,\"1079\":13,\"1080\":1,\"1165\":1}}],[\"dad和mom对于person是一对多的关系\",{\"1\":{\"860\":1}}],[\"dadid\",{\"1\":{\"860\":5}}],[\"dad\",{\"1\":{\"853\":1,\"854\":1,\"855\":1,\"856\":3,\"858\":2,\"859\":2,\"860\":5}}],[\"dangerop\",{\"1\":{\"606\":8,\"607\":6,\"608\":2}}],[\"dap\",{\"1\":{\"504\":3}}],[\"daemon\",{\"1\":{\"144\":1}}],[\"dave\",{\"1\":{\"79\":1}}],[\"davecgh\",{\"1\":{\"28\":3}}],[\"darjun\",{\"1\":{\"67\":1}}],[\"darwin\",{\"1\":{\"7\":2,\"11\":2,\"42\":1,\"904\":1,\"1107\":1}}],[\"datetime\",{\"1\":{\"934\":1}}],[\"date\",{\"1\":{\"137\":5,\"140\":1,\"141\":1,\"205\":1,\"208\":2,\"840\":2,\"965\":1,\"986\":1}}],[\"dateparse\",{\"1\":{\"66\":1}}],[\"dataqsiz字段\",{\"1\":{\"1057\":1}}],[\"dataqsize\",{\"1\":{\"1057\":1}}],[\"dataqsiz\",{\"1\":{\"1057\":2,\"1058\":1,\"1059\":4,\"1060\":4,\"1067\":3}}],[\"dataoffset+uintptr\",{\"1\":{\"1037\":1}}],[\"dataoffset+bucketcnt\",{\"1\":{\"1030\":1,\"1036\":1,\"1037\":1,\"1038\":2,\"1039\":1}}],[\"dataoffset+i\",{\"1\":{\"1030\":1,\"1036\":1,\"1038\":2,\"1039\":1}}],[\"dataoffset\",{\"1\":{\"1030\":1,\"1038\":1,\"1042\":6,\"1043\":1}}],[\"data=\",{\"1\":{\"1013\":1}}],[\"data=account\",{\"1\":{\"1013\":1}}],[\"data字段的类型是不确定的\",{\"1\":{\"1013\":1}}],[\"datatype\",{\"1\":{\"1012\":1}}],[\"datatracker\",{\"1\":{\"778\":7}}],[\"datafromreader\",{\"1\":{\"981\":1}}],[\"data类型的表单\",{\"1\":{\"970\":1}}],[\"datauri\",{\"1\":{\"932\":1}}],[\"datadata\",{\"1\":{\"829\":1}}],[\"datadog\",{\"1\":{\"75\":1}}],[\"dataaddr\",{\"1\":{\"824\":3}}],[\"data2\",{\"1\":{\"764\":3,\"765\":5,\"766\":2,\"767\":2}}],[\"data1\",{\"1\":{\"764\":5,\"765\":4,\"766\":2,\"767\":3}}],[\"datas\",{\"1\":{\"725\":8,\"727\":2,\"733\":2}}],[\"datasourcename\",{\"1\":{\"232\":1}}],[\"datastructures\",{\"1\":{\"58\":2}}],[\"dataloss\",{\"1\":{\"168\":1}}],[\"datacenters\",{\"1\":{\"144\":1}}],[\"datacenter=dc2\",{\"1\":{\"144\":2}}],[\"datacenter\",{\"1\":{\"141\":1}}],[\"dataparse\",{\"1\":{\"66\":1}}],[\"data\",{\"1\":{\"21\":1,\"44\":3,\"55\":1,\"107\":2,\"108\":2,\"112\":1,\"141\":3,\"142\":1,\"143\":9,\"144\":3,\"163\":3,\"174\":1,\"181\":1,\"195\":2,\"200\":1,\"208\":1,\"217\":1,\"418\":1,\"419\":2,\"428\":2,\"479\":4,\"480\":4,\"496\":3,\"524\":7,\"527\":4,\"536\":2,\"541\":3,\"558\":1,\"579\":1,\"618\":1,\"624\":1,\"629\":4,\"682\":2,\"723\":3,\"725\":32,\"727\":2,\"733\":15,\"736\":3,\"766\":7,\"817\":5,\"820\":1,\"824\":4,\"829\":8,\"851\":1,\"943\":1,\"970\":3,\"972\":1,\"977\":1,\"981\":2,\"1013\":2,\"1019\":6,\"1052\":3,\"1057\":1,\"1060\":4,\"1064\":1,\"1070\":1,\"1096\":1,\"1114\":1,\"1118\":1}}],[\"databasetypename\",{\"1\":{\"863\":1}}],[\"databaseproviderset\",{\"1\":{\"824\":2}}],[\"database\",{\"1\":{\"7\":1,\"115\":1,\"224\":1,\"225\":2,\"226\":2,\"227\":4,\"228\":2,\"229\":1,\"616\":2,\"621\":3,\"622\":2,\"791\":2,\"829\":1,\"849\":1,\"852\":1,\"863\":1}}],[\"day\",{\"1\":{\"22\":2}}],[\"doing\",{\"1\":{\"1101\":1}}],[\"dofile\",{\"1\":{\"805\":1}}],[\"dom\",{\"1\":{\"767\":5}}],[\"domain2\",{\"1\":{\"767\":3}}],[\"domain1\",{\"1\":{\"767\":5}}],[\"domain\",{\"1\":{\"7\":1,\"23\":1,\"168\":2,\"174\":1,\"817\":6}}],[\"do2\",{\"1\":{\"560\":1}}],[\"do1\",{\"1\":{\"560\":1}}],[\"dot\",{\"1\":{\"559\":2,\"1053\":2}}],[\"dotweb\",{\"1\":{\"51\":2}}],[\"doog\",{\"1\":{\"527\":1}}],[\"doother\",{\"1\":{\"479\":2}}],[\"donothing\",{\"1\":{\"867\":2}}],[\"don\",{\"1\":{\"503\":1,\"1120\":2,\"1121\":1,\"1138\":1,\"1169\":1}}],[\"done和finished两个管道\",{\"1\":{\"1063\":1}}],[\"done通道将会关闭\",{\"1\":{\"477\":1}}],[\"done永远会返回nil\",{\"1\":{\"476\":1}}],[\"done方法表示当前协程已经执行完毕\",{\"1\":{\"472\":1}}],[\"done\",{\"1\":{\"22\":1,\"115\":1,\"389\":1,\"472\":5,\"474\":3,\"475\":1,\"476\":2,\"477\":10,\"478\":2,\"479\":1,\"480\":1,\"481\":4,\"482\":4,\"484\":5,\"485\":1,\"486\":2,\"495\":4,\"499\":5,\"520\":1,\"606\":1,\"682\":1,\"1038\":2,\"1056\":3,\"1063\":1,\"1083\":2,\"1149\":1,\"1165\":2,\"1171\":1,\"1172\":2,\"1173\":3,\"1175\":1,\"1177\":1}}],[\"dopanic\",{\"1\":{\"1079\":1}}],[\"doprintf\",{\"1\":{\"485\":1}}],[\"dop251\",{\"1\":{\"75\":1}}],[\"dospin进入自旋\",{\"1\":{\"1153\":1}}],[\"dospin\",{\"1\":{\"1153\":2}}],[\"dosigpreempt会修改目标协程的上下文\",{\"1\":{\"1107\":1}}],[\"dosigpreempt\",{\"1\":{\"1107\":2}}],[\"dostring\",{\"1\":{\"805\":1}}],[\"doslow\",{\"1\":{\"484\":2,\"1173\":2}}],[\"dosomthing函数显然不知道doother函数可能会对数据做点什么\",{\"1\":{\"479\":1}}],[\"dosomething2\",{\"1\":{\"196\":1}}],[\"dosomething1\",{\"1\":{\"196\":1}}],[\"dosomething\",{\"1\":{\"196\":2,\"479\":2,\"568\":2,\"1095\":1}}],[\"doe\",{\"1\":{\"406\":1,\"773\":1}}],[\"doesn\",{\"1\":{\"1089\":2,\"1095\":1,\"1100\":1,\"1107\":2}}],[\"does\",{\"1\":{\"34\":1,\"414\":1,\"531\":1,\"551\":2,\"553\":1,\"600\":2,\"817\":1,\"1097\":1,\"1107\":1}}],[\"doupdates\",{\"1\":{\"867\":1}}],[\"doublecap\",{\"1\":{\"1025\":3}}],[\"double\",{\"1\":{\"184\":1,\"207\":2,\"208\":1,\"538\":4,\"575\":2}}],[\"douyu\",{\"1\":{\"53\":1}}],[\"dog指针依然可以正常赋值给animal\",{\"1\":{\"414\":1}}],[\"dog\",{\"1\":{\"55\":1,\"414\":13}}],[\"down\",{\"1\":{\"578\":2,\"1042\":1,\"1063\":1}}],[\"downgrading\",{\"1\":{\"22\":1}}],[\"downloadfile\",{\"1\":{\"968\":2}}],[\"download目录下存放着依赖的原始文件\",{\"1\":{\"507\":1}}],[\"downloads\",{\"1\":{\"89\":1}}],[\"download命令的名称虽然翻译过来叫下载\",{\"1\":{\"25\":1}}],[\"downloading\",{\"1\":{\"7\":1,\"18\":1,\"93\":1,\"500\":1,\"504\":14}}],[\"download\",{\"0\":{\"25\":1,\"112\":1},\"1\":{\"7\":2,\"22\":3,\"25\":4,\"112\":2,\"506\":1,\"507\":1,\"510\":2,\"986\":5}}],[\"do\",{\"0\":{\"1173\":1},\"1\":{\"17\":3,\"21\":1,\"37\":2,\"197\":1,\"400\":4,\"463\":1,\"464\":1,\"476\":2,\"479\":1,\"484\":3,\"520\":1,\"533\":5,\"547\":2,\"551\":2,\"555\":1,\"556\":3,\"557\":1,\"559\":4,\"567\":1,\"574\":11,\"575\":4,\"603\":3,\"641\":1,\"642\":1,\"823\":1,\"824\":1,\"1016\":1,\"1037\":1,\"1056\":1,\"1066\":9,\"1071\":2,\"1097\":1,\"1098\":1,\"1101\":1,\"1120\":2,\"1138\":2,\"1140\":1,\"1171\":3,\"1173\":1}}],[\"docrash\",{\"1\":{\"1079\":3}}],[\"docexpansion\",{\"1\":{\"1016\":1}}],[\"doctemplate\",{\"1\":{\"1016\":1}}],[\"doctl\",{\"1\":{\"788\":1}}],[\"doctype\",{\"1\":{\"41\":2,\"980\":1}}],[\"dockerapi是docker的sdk\",{\"1\":{\"800\":1}}],[\"dockerapi\",{\"0\":{\"800\":1}}],[\"docker\",{\"1\":{\"205\":2,\"615\":1,\"788\":1,\"800\":2,\"801\":2,\"904\":1}}],[\"doc命令会输出指定包\",{\"1\":{\"4\":1}}],[\"docs\",{\"1\":{\"4\":1,\"21\":2,\"499\":6,\"821\":1,\"1011\":2,\"1017\":3}}],[\"documentation\",{\"1\":{\"4\":2,\"21\":1,\"146\":2,\"222\":1,\"223\":1,\"226\":1,\"227\":1,\"228\":1,\"229\":1,\"286\":1,\"800\":1,\"1009\":3,\"1016\":2}}],[\"doc\",{\"0\":{\"4\":1},\"1\":{\"2\":1,\"4\":15,\"7\":2,\"14\":4,\"17\":2,\"18\":1,\"21\":1,\"39\":1,\"212\":2,\"214\":4,\"216\":2,\"519\":2,\"529\":1,\"778\":7,\"1016\":3}}],[\"dijkstra\",{\"1\":{\"1142\":1}}],[\"die\",{\"1\":{\"1097\":1}}],[\"ditry\",{\"1\":{\"1047\":1,\"1048\":1,\"1049\":1}}],[\"dict\",{\"1\":{\"727\":1,\"1035\":3,\"1037\":1,\"1038\":3,\"1039\":1,\"1040\":1}}],[\"dic\",{\"1\":{\"441\":3,\"604\":2}}],[\"divroundup\",{\"1\":{\"1125\":2}}],[\"dividebyelemsize\",{\"1\":{\"1117\":1}}],[\"diving\",{\"1\":{\"926\":2}}],[\"dive\",{\"1\":{\"944\":3}}],[\"dive后的\",{\"1\":{\"944\":1}}],[\"dive前是\",{\"1\":{\"944\":1}}],[\"div\",{\"1\":{\"397\":1,\"847\":1}}],[\"dialector\",{\"1\":{\"852\":3}}],[\"dialer\",{\"1\":{\"242\":2}}],[\"dialtimeout\",{\"1\":{\"242\":1}}],[\"dialcontext\",{\"1\":{\"170\":1}}],[\"dialcontext来替代gprc\",{\"1\":{\"170\":1}}],[\"dial以传入\",{\"1\":{\"170\":1}}],[\"dialoption\",{\"1\":{\"166\":4}}],[\"dial\",{\"1\":{\"145\":1,\"154\":1,\"158\":4,\"159\":4,\"166\":3,\"167\":3,\"170\":3,\"174\":2,\"175\":1,\"682\":1}}],[\"di\",{\"1\":{\"67\":2}}],[\"digitalocean\",{\"1\":{\"141\":1}}],[\"dig\",{\"1\":{\"67\":2,\"821\":1}}],[\"dimiro1\",{\"1\":{\"64\":2}}],[\"diffie\",{\"1\":{\"117\":1}}],[\"different\",{\"1\":{\"17\":3,\"559\":1}}],[\"diffs\",{\"1\":{\"16\":1,\"17\":1}}],[\"diff\",{\"1\":{\"16\":4,\"17\":2}}],[\"difflib\",{\"1\":{\"6\":1,\"28\":5}}],[\"dispose\",{\"1\":{\"1140\":1,\"1145\":1}}],[\"disposition\",{\"1\":{\"986\":2}}],[\"display\",{\"1\":{\"16\":1}}],[\"disk\",{\"1\":{\"914\":1,\"915\":1,\"916\":1}}],[\"diskpath\",{\"1\":{\"34\":4}}],[\"dismatch\",{\"1\":{\"571\":1}}],[\"disabling\",{\"1\":{\"1139\":1}}],[\"disabled\",{\"1\":{\"1097\":1}}],[\"disableconsolecolor\",{\"1\":{\"1006\":1,\"1007\":1}}],[\"disablecaller\",{\"1\":{\"839\":3}}],[\"disablenestedtransaction\",{\"1\":{\"852\":1}}],[\"disableforeignkeyconstraintwhenmigrating\",{\"1\":{\"852\":1}}],[\"disableautomaticping\",{\"1\":{\"852\":1}}],[\"disablestacktrace\",{\"1\":{\"839\":3}}],[\"disable\",{\"1\":{\"9\":3,\"1091\":1,\"1095\":1,\"1097\":2,\"1140\":1}}],[\"disassemble\",{\"1\":{\"560\":1}}],[\"disasm\",{\"1\":{\"559\":1}}],[\"discardhole\",{\"1\":{\"1074\":1}}],[\"discards\",{\"1\":{\"462\":1}}],[\"discussion\",{\"1\":{\"589\":1}}],[\"disconnect\",{\"1\":{\"221\":1}}],[\"discovery\",{\"1\":{\"145\":1}}],[\"disintegration\",{\"1\":{\"76\":1}}],[\"distinct方法多用于去重\",{\"1\":{\"879\":1}}],[\"distinct\",{\"0\":{\"879\":1},\"1\":{\"879\":3}}],[\"dist\",{\"1\":{\"7\":4}}],[\"dirtylocked\",{\"1\":{\"1047\":2}}],[\"dirtylocked将\",{\"1\":{\"1047\":1}}],[\"dirty是可以被修改的\",{\"1\":{\"1045\":1}}],[\"dirty\",{\"1\":{\"918\":1,\"1045\":6,\"1046\":8,\"1047\":13,\"1048\":2,\"1049\":2}}],[\"dirpath\",{\"1\":{\"426\":4}}],[\"dirs\",{\"1\":{\"424\":2}}],[\"dir=\",{\"1\":{\"141\":1,\"143\":6,\"144\":2}}],[\"direntry\",{\"1\":{\"41\":1,\"424\":2}}],[\"directly\",{\"1\":{\"200\":1,\"1060\":1,\"1121\":1}}],[\"directive\",{\"1\":{\"37\":1}}],[\"directives中看到有关它们的介绍\",{\"1\":{\"49\":1}}],[\"directives\",{\"1\":{\"9\":1,\"21\":1,\"37\":1,\"39\":1}}],[\"director\",{\"1\":{\"117\":1,\"646\":3}}],[\"directories\",{\"1\":{\"33\":1,\"34\":1}}],[\"directory\",{\"1\":{\"7\":5,\"9\":2,\"10\":2,\"18\":2,\"21\":3,\"22\":1,\"34\":1,\"504\":1,\"519\":1,\"533\":1}}],[\"direct意思是直接使用\",{\"1\":{\"7\":1}}],[\"directed\",{\"1\":{\"7\":1}}],[\"direct\",{\"1\":{\"7\":2,\"501\":1}}],[\"dir2\",{\"1\":{\"14\":2}}],[\"dir1\",{\"1\":{\"14\":2}}],[\"dir\",{\"1\":{\"4\":2,\"21\":7,\"29\":1,\"141\":2,\"424\":5,\"426\":1,\"790\":1,\"936\":1,\"999\":1,\"1061\":1}}],[\"deductassistcredit\",{\"1\":{\"1139\":2}}],[\"dedicated\",{\"1\":{\"1138\":1}}],[\"dedicatedmarkworkersneeded\",{\"1\":{\"1138\":4}}],[\"demo\",{\"0\":{\"587\":1},\"1\":{\"587\":1,\"598\":1,\"606\":5,\"843\":1}}],[\"deeplinking\",{\"1\":{\"1016\":1}}],[\"deepequal\",{\"1\":{\"460\":5}}],[\"deepequal是反射包下提供的一个用于判断两个变量是否完全相等的函数\",{\"1\":{\"460\":1}}],[\"deepcopy\",{\"1\":{\"56\":2,\"812\":1,\"813\":1}}],[\"detail\",{\"1\":{\"168\":1}}],[\"details来获取信息\",{\"1\":{\"168\":1}}],[\"details\",{\"1\":{\"3\":1,\"7\":4,\"8\":1,\"13\":1,\"15\":1,\"16\":1,\"17\":1,\"18\":1,\"19\":1,\"20\":1,\"28\":1,\"32\":1,\"37\":1,\"38\":1,\"167\":6,\"168\":5,\"194\":1,\"503\":1,\"1030\":1,\"1097\":1}}],[\"dead\",{\"1\":{\"542\":6}}],[\"deadlock\",{\"1\":{\"470\":1,\"472\":1}}],[\"deadline是截止时间\",{\"1\":{\"474\":1}}],[\"deadline\",{\"1\":{\"170\":1,\"474\":5,\"475\":2,\"478\":3,\"520\":2,\"600\":1}}],[\"deadlineexceeded\",{\"1\":{\"168\":1,\"171\":1}}],[\"dearmor\",{\"1\":{\"140\":1}}],[\"dereference\",{\"1\":{\"751\":1,\"1077\":1}}],[\"derekparker\",{\"1\":{\"504\":1}}],[\"deregister\",{\"1\":{\"145\":3}}],[\"derfer的使用开销降低了\",{\"1\":{\"124\":1}}],[\"debtbytes\",{\"1\":{\"1139\":4}}],[\"debt\",{\"1\":{\"1139\":1}}],[\"debian12\",{\"1\":{\"205\":1}}],[\"deb\",{\"1\":{\"140\":1}}],[\"debuggc\",{\"1\":{\"1128\":1}}],[\"debugging\",{\"1\":{\"504\":3}}],[\"debugprintroutefunc\",{\"1\":{\"1008\":1}}],[\"debugprintwarningdefault\",{\"1\":{\"992\":1}}],[\"debugmode\",{\"1\":{\"1008\":1}}],[\"debuglevel\",{\"1\":{\"842\":3}}],[\"debuginfo\",{\"1\":{\"168\":1}}],[\"debug\",{\"1\":{\"9\":4,\"12\":5,\"118\":1,\"141\":1,\"503\":6,\"504\":4,\"557\":6,\"559\":1,\"560\":3,\"561\":1,\"840\":2,\"993\":1,\"1079\":1,\"1086\":1,\"1107\":2}}],[\"deny\",{\"1\":{\"763\":7}}],[\"denied\",{\"1\":{\"600\":1}}],[\"denisenkom\",{\"1\":{\"62\":2}}],[\"dengsgo\",{\"1\":{\"59\":1}}],[\"decoding\",{\"1\":{\"798\":1}}],[\"decoderune来获取其完整编码\",{\"1\":{\"1055\":1}}],[\"decoderune\",{\"1\":{\"1055\":1}}],[\"decoderuneinstring\",{\"1\":{\"380\":1}}],[\"decode\",{\"1\":{\"224\":1,\"227\":1}}],[\"declarative\",{\"1\":{\"1016\":1}}],[\"declarations\",{\"1\":{\"37\":1}}],[\"declared\",{\"1\":{\"329\":1}}],[\"decr\",{\"1\":{\"256\":1}}],[\"dec\",{\"1\":{\"137\":2,\"986\":2}}],[\"decimal\",{\"0\":{\"844\":1},\"1\":{\"59\":2,\"844\":4,\"846\":1,\"847\":7}}],[\"dequeuesudog\",{\"1\":{\"1067\":2}}],[\"dequeued\",{\"1\":{\"1067\":1}}],[\"dequeue\",{\"1\":{\"1059\":1,\"1060\":1,\"1061\":2,\"1067\":2}}],[\"deque\",{\"1\":{\"58\":2}}],[\"de5bf2ad4578\",{\"1\":{\"20\":1,\"27\":1}}],[\"deletion\",{\"1\":{\"499\":1}}],[\"delete是一组\",{\"1\":{\"988\":1}}],[\"deletemany\",{\"1\":{\"228\":1}}],[\"deleteone\",{\"1\":{\"228\":1}}],[\"deletedat\",{\"1\":{\"857\":2}}],[\"deletedcount\",{\"1\":{\"228\":2}}],[\"deleted\",{\"1\":{\"215\":1}}],[\"deletedoc\",{\"1\":{\"215\":3}}],[\"delete\",{\"1\":{\"7\":1,\"190\":2,\"210\":1,\"215\":1,\"237\":5,\"238\":1,\"385\":3,\"387\":2,\"486\":1,\"758\":1,\"849\":1,\"888\":15,\"889\":1,\"897\":1,\"898\":6,\"988\":4,\"989\":3,\"990\":4,\"993\":3,\"994\":3,\"996\":3,\"1000\":1,\"1039\":1,\"1048\":3}}],[\"deltas\",{\"1\":{\"499\":1}}],[\"delta\",{\"1\":{\"472\":1,\"495\":2,\"499\":3,\"1101\":3,\"1153\":3,\"1177\":7}}],[\"del\",{\"1\":{\"246\":1}}],[\"delayedzeroing\",{\"1\":{\"1126\":1}}],[\"delayedsignal\",{\"1\":{\"1107\":1}}],[\"delay\",{\"1\":{\"107\":1,\"168\":1}}],[\"delve\",{\"1\":{\"19\":19,\"504\":5,\"615\":1}}],[\"desbytes\",{\"1\":{\"378\":3}}],[\"destroy负责销毁\",{\"1\":{\"1092\":1}}],[\"destroy\",{\"1\":{\"1089\":1}}],[\"destination\",{\"1\":{\"1042\":1}}],[\"destfile\",{\"1\":{\"426\":3}}],[\"destpath\",{\"1\":{\"426\":4}}],[\"dest\",{\"1\":{\"368\":4,\"812\":3,\"813\":3,\"869\":1,\"870\":1,\"871\":1,\"873\":1}}],[\"description\",{\"1\":{\"840\":2,\"931\":1,\"932\":1,\"933\":1,\"934\":1,\"935\":1,\"936\":1,\"937\":1,\"938\":1,\"1011\":4,\"1016\":2}}],[\"descriptor\",{\"1\":{\"200\":1,\"202\":6}}],[\"describing\",{\"1\":{\"21\":1}}],[\"describe\",{\"1\":{\"10\":1,\"13\":1}}],[\"desc\",{\"1\":{\"159\":2,\"166\":22,\"167\":4,\"859\":1,\"876\":4,\"1013\":2}}],[\"design阅读英文原文\",{\"1\":{\"1132\":1}}],[\"design\",{\"1\":{\"99\":1}}],[\"desired\",{\"1\":{\"14\":1}}],[\"desktop\",{\"1\":{\"73\":1}}],[\"define\",{\"1\":{\"733\":8,\"735\":1,\"736\":2}}],[\"defines\",{\"1\":{\"563\":1,\"574\":1,\"992\":1}}],[\"defined\",{\"1\":{\"168\":1,\"561\":3,\"1012\":1}}],[\"definition\",{\"1\":{\"10\":2,\"759\":2,\"760\":1,\"761\":1,\"764\":2,\"765\":5,\"766\":3,\"767\":3,\"1016\":1,\"1030\":1}}],[\"defer是分别指向panic栈和defer栈的指针\",{\"1\":{\"1086\":1}}],[\"deferred\",{\"1\":{\"1078\":1,\"1080\":1}}],[\"deferreturn\",{\"1\":{\"1075\":1}}],[\"deferreturn函数\",{\"1\":{\"1075\":1,\"1080\":1}}],[\"defer不能出现在循环中\",{\"1\":{\"1076\":1}}],[\"defer与return两者数量的乘积不能超过\",{\"1\":{\"1076\":1}}],[\"defer的使用并非毫无成本\",{\"1\":{\"1076\":1}}],[\"deferlock\",{\"1\":{\"1074\":2}}],[\"deferproc的函数注释中可以看代码下面这些内容\",{\"1\":{\"1080\":1}}],[\"deferprocstack函数的签名如下\",{\"1\":{\"1074\":1}}],[\"deferprocstack函数来完成defer结构的创建\",{\"1\":{\"1074\":1}}],[\"deferprocstack\",{\"1\":{\"1074\":5}}],[\"deferproc函数代码如下所示\",{\"1\":{\"1074\":1}}],[\"deferproc函数的调用\",{\"1\":{\"1074\":1}}],[\"deferproc\",{\"1\":{\"1074\":2,\"1080\":4}}],[\"deferpool向局部的deferpool装填一半的defer结构\",{\"1\":{\"1074\":1}}],[\"deferpool中存放着预分配好的defer结构\",{\"1\":{\"1073\":1}}],[\"deferpoolbuf\",{\"1\":{\"1073\":1}}],[\"deferpool\",{\"1\":{\"1073\":1,\"1074\":14}}],[\"deferstruct\",{\"1\":{\"1074\":1}}],[\"defers\",{\"1\":{\"1073\":1}}],[\"defer结构体\",{\"1\":{\"1073\":1}}],[\"defer关键字对应runtime\",{\"1\":{\"1073\":1}}],[\"defer关键字可以使得一个函数延迟一段时间调用\",{\"1\":{\"400\":1}}],[\"defer在\",{\"1\":{\"1072\":1}}],[\"defer中嵌套的panic\",{\"1\":{\"606\":1}}],[\"defer中也可以嵌套panic\",{\"1\":{\"606\":1}}],[\"defer\",{\"0\":{\"1072\":1},\"1\":{\"145\":2,\"154\":1,\"158\":1,\"159\":3,\"170\":1,\"171\":1,\"174\":1,\"175\":1,\"221\":1,\"234\":1,\"238\":1,\"244\":1,\"298\":1,\"340\":2,\"400\":9,\"401\":4,\"402\":6,\"416\":1,\"419\":4,\"422\":1,\"424\":1,\"426\":2,\"465\":1,\"466\":2,\"467\":3,\"468\":4,\"471\":5,\"476\":1,\"477\":6,\"478\":2,\"484\":2,\"520\":1,\"582\":2,\"583\":1,\"584\":2,\"598\":1,\"606\":26,\"607\":3,\"638\":1,\"639\":1,\"641\":1,\"642\":1,\"682\":3,\"741\":1,\"742\":1,\"805\":2,\"838\":2,\"840\":1,\"882\":1,\"1062\":2,\"1063\":1,\"1072\":1,\"1073\":16,\"1074\":9,\"1075\":3,\"1077\":1,\"1078\":3,\"1079\":3,\"1080\":1,\"1083\":2,\"1086\":6,\"1096\":1,\"1101\":1,\"1149\":1,\"1165\":2,\"1171\":1,\"1173\":2,\"1175\":1}}],[\"defer调用的开销降低至几乎跟原生调用一样\",{\"1\":{\"123\":1}}],[\"defaultmodelsexpanddepth\",{\"1\":{\"1016\":1}}],[\"defaultwriter\",{\"1\":{\"1007\":3}}],[\"default函数中\",{\"1\":{\"992\":1}}],[\"defaultuser\",{\"1\":{\"969\":2}}],[\"defaultquery\",{\"1\":{\"969\":1}}],[\"defaultlineending\",{\"1\":{\"840\":1}}],[\"default分支可以省略\",{\"1\":{\"471\":1}}],[\"defaultgodebug\",{\"1\":{\"21\":1}}],[\"defaultgodebug=panicnil=1\",{\"1\":{\"6\":1}}],[\"defaultservemux是的默认实例\",{\"1\":{\"645\":1}}],[\"defaultservemux\",{\"1\":{\"41\":2,\"643\":1}}],[\"defaults\",{\"1\":{\"7\":2}}],[\"default\",{\"1\":{\"3\":3,\"5\":1,\"7\":4,\"8\":1,\"10\":2,\"21\":1,\"140\":1,\"141\":1,\"143\":4,\"144\":10,\"156\":1,\"158\":1,\"159\":1,\"205\":1,\"233\":3,\"298\":1,\"350\":3,\"471\":1,\"476\":1,\"477\":4,\"478\":1,\"503\":2,\"542\":1,\"559\":1,\"636\":3,\"735\":1,\"862\":1,\"895\":1,\"965\":1,\"968\":1,\"969\":1,\"970\":1,\"971\":1,\"977\":1,\"980\":1,\"982\":1,\"984\":1,\"985\":1,\"986\":1,\"988\":1,\"989\":1,\"990\":1,\"991\":1,\"992\":1,\"993\":1,\"994\":1,\"996\":1,\"998\":1,\"999\":1,\"1002\":1,\"1003\":2,\"1007\":1,\"1008\":1,\"1011\":2,\"1014\":1,\"1016\":2,\"1024\":1,\"1025\":1,\"1033\":1,\"1058\":1,\"1062\":1,\"1065\":1,\"1066\":4,\"1067\":6}}],[\"developed\",{\"1\":{\"904\":1}}],[\"developers\",{\"1\":{\"179\":1,\"180\":1}}],[\"developer\",{\"1\":{\"141\":1,\"142\":1,\"143\":1,\"145\":2,\"167\":1,\"848\":2}}],[\"development\",{\"1\":{\"817\":4,\"839\":5}}],[\"develop\",{\"1\":{\"800\":1}}],[\"devices\",{\"1\":{\"920\":2}}],[\"device\",{\"1\":{\"531\":1,\"915\":3}}],[\"dev01\",{\"1\":{\"141\":2}}],[\"devfeel\",{\"1\":{\"51\":1}}],[\"dev\",{\"1\":{\"7\":1,\"66\":1,\"70\":1,\"87\":1,\"141\":2,\"146\":1,\"239\":1,\"335\":3,\"503\":1,\"1072\":1}}],[\"departing\",{\"1\":{\"1155\":1}}],[\"depends\",{\"1\":{\"1140\":1}}],[\"dependencies\",{\"1\":{\"21\":2,\"22\":3,\"25\":1,\"31\":1}}],[\"dependency\",{\"1\":{\"21\":3,\"821\":1}}],[\"deponly\",{\"1\":{\"21\":1}}],[\"depth\",{\"1\":{\"20\":1,\"24\":1,\"27\":1}}],[\"depserrors\",{\"1\":{\"21\":1}}],[\"deps\",{\"1\":{\"20\":3,\"21\":1}}],[\"deprecation\",{\"1\":{\"18\":1,\"21\":1,\"509\":1}}],[\"deprecated\",{\"1\":{\"10\":1,\"21\":1,\"189\":1,\"509\":1}}],[\"dep\",{\"1\":{\"6\":3}}],[\"v代表的是wg计数\",{\"1\":{\"1177\":1}}],[\"v6\",{\"1\":{\"1023\":2,\"1030\":1}}],[\"v5\",{\"1\":{\"934\":2,\"1023\":4,\"1030\":1}}],[\"vmem\",{\"1\":{\"1038\":2}}],[\"vmallocchunk\",{\"1\":{\"918\":1}}],[\"vmallocused\",{\"1\":{\"918\":1}}],[\"vmalloctotal\",{\"1\":{\"918\":1}}],[\"vm\",{\"1\":{\"802\":1}}],[\"vm04\",{\"1\":{\"144\":3}}],[\"vm01\",{\"1\":{\"143\":1,\"144\":2}}],[\"vm03\",{\"1\":{\"143\":2,\"144\":7}}],[\"vm02\",{\"1\":{\"143\":2,\"144\":2}}],[\"vm00\",{\"1\":{\"143\":4,\"144\":4}}],[\"v+1\",{\"1\":{\"728\":1}}],[\"vue\",{\"1\":{\"610\":1,\"735\":1}}],[\"vuepress\",{\"1\":{\"105\":1}}],[\"v也会被输出\",{\"1\":{\"605\":1}}],[\"v4\",{\"1\":{\"509\":1,\"776\":3,\"934\":2,\"1021\":2,\"1030\":1}}],[\"vtype\",{\"1\":{\"433\":3}}],[\"void\",{\"1\":{\"531\":1,\"533\":3,\"534\":1,\"535\":1,\"536\":5,\"537\":8,\"538\":2,\"539\":1,\"543\":1}}],[\"vol\",{\"1\":{\"416\":1}}],[\"voter\",{\"1\":{\"141\":1}}],[\"v9\",{\"1\":{\"240\":1,\"1021\":4,\"1023\":1}}],[\"v7\",{\"1\":{\"204\":1,\"1020\":1,\"1023\":4}}],[\"vs\",{\"1\":{\"526\":4}}],[\"vsphere\",{\"1\":{\"141\":1}}],[\"vscode\",{\"1\":{\"94\":1}}],[\"v主版本\",{\"1\":{\"113\":1}}],[\"virtualmemorystat\",{\"1\":{\"918\":1}}],[\"virtualmemory\",{\"1\":{\"918\":2}}],[\"virtualizationrole\",{\"1\":{\"907\":1}}],[\"virtualizationsystem\",{\"1\":{\"907\":1}}],[\"visualize\",{\"1\":{\"559\":2}}],[\"visualization\",{\"1\":{\"558\":1}}],[\"via\",{\"1\":{\"504\":1}}],[\"viewi++\",{\"1\":{\"1149\":1}}],[\"viewi\",{\"1\":{\"1149\":2}}],[\"viewing\",{\"1\":{\"112\":1}}],[\"viewoption\",{\"1\":{\"863\":1}}],[\"views\",{\"1\":{\"863\":1}}],[\"viewer\",{\"1\":{\"561\":3}}],[\"view\",{\"0\":{\"111\":1},\"1\":{\"999\":3}}],[\"viper并不负责配置文件的加密与解密\",{\"1\":{\"788\":1}}],[\"viper2\",{\"1\":{\"786\":1}}],[\"viper\",{\"0\":{\"786\":1},\"1\":{\"63\":2,\"786\":2,\"787\":1,\"788\":1,\"789\":2,\"790\":2,\"791\":14,\"792\":8,\"793\":5,\"794\":4,\"795\":2,\"796\":1,\"797\":2,\"798\":3,\"799\":3}}],[\"v8\",{\"1\":{\"87\":1,\"204\":1,\"240\":1,\"1020\":1,\"1023\":2}}],[\"v参数可以查看更详细的输出\",{\"1\":{\"38\":1}}],[\"v参数指定version命令去尝试输出无法识别的文件的\",{\"1\":{\"6\":1}}],[\"v3\",{\"1\":{\"28\":6,\"66\":1,\"503\":4,\"509\":2,\"904\":1,\"905\":1,\"934\":2,\"1021\":2,\"1030\":1}}],[\"v2的创建方式可能会变成下面这样\",{\"1\":{\"1028\":1}}],[\"v2两个分组\",{\"1\":{\"988\":1}}],[\"v2\",{\"1\":{\"24\":2,\"27\":2,\"70\":1,\"129\":2,\"161\":2,\"163\":1,\"503\":8,\"504\":4,\"509\":7,\"798\":1,\"988\":4,\"989\":4,\"990\":5,\"993\":4,\"994\":6,\"996\":4,\"1028\":3,\"1030\":1}}],[\"vcs\",{\"1\":{\"7\":6,\"18\":2,\"493\":4,\"513\":1}}],[\"v15\",{\"1\":{\"1023\":1}}],[\"v12\",{\"1\":{\"1023\":2}}],[\"v14\",{\"1\":{\"1023\":1}}],[\"v11\",{\"1\":{\"1020\":1,\"1021\":2,\"1023\":2}}],[\"v13\",{\"1\":{\"934\":2}}],[\"v10\",{\"1\":{\"57\":1,\"503\":4,\"509\":2,\"928\":1,\"929\":1,\"934\":2,\"942\":1,\"952\":4,\"976\":1,\"1021\":4}}],[\"v1\",{\"1\":{\"6\":2,\"7\":10,\"20\":4,\"26\":4,\"27\":5,\"28\":7,\"29\":2,\"129\":2,\"140\":1,\"143\":3,\"148\":1,\"156\":2,\"161\":2,\"163\":2,\"200\":1,\"499\":5,\"500\":2,\"503\":15,\"504\":3,\"507\":6,\"509\":26,\"510\":14,\"512\":1,\"515\":1,\"527\":1,\"816\":1,\"817\":1,\"988\":4,\"989\":4,\"990\":4,\"993\":6,\"994\":4,\"996\":5,\"1011\":4,\"1016\":2,\"1021\":2,\"1023\":3,\"1028\":2,\"1030\":1}}],[\"v0\",{\"1\":{\"6\":2,\"18\":1,\"20\":8,\"26\":1,\"27\":8,\"28\":4,\"503\":26,\"504\":9,\"509\":14}}],[\"v\",{\"1\":{\"6\":3,\"7\":12,\"8\":1,\"9\":1,\"10\":1,\"18\":3,\"19\":16,\"24\":3,\"25\":2,\"28\":4,\"34\":4,\"36\":1,\"37\":1,\"38\":9,\"40\":2,\"115\":1,\"161\":2,\"305\":1,\"341\":4,\"362\":4,\"414\":6,\"439\":1,\"440\":1,\"441\":4,\"442\":1,\"443\":3,\"446\":1,\"491\":1,\"497\":1,\"504\":3,\"505\":1,\"507\":1,\"510\":1,\"513\":1,\"518\":3,\"519\":1,\"520\":1,\"521\":3,\"522\":1,\"523\":3,\"525\":1,\"526\":2,\"527\":5,\"535\":1,\"572\":2,\"582\":6,\"583\":7,\"585\":13,\"587\":18,\"605\":1,\"618\":3,\"624\":2,\"627\":1,\"708\":1,\"728\":1,\"780\":2,\"792\":4,\"797\":1,\"798\":1,\"817\":2,\"904\":1,\"942\":1,\"943\":1,\"977\":1,\"1003\":3,\"1008\":4,\"1024\":1,\"1027\":1,\"1030\":2,\"1047\":9,\"1049\":2,\"1066\":1,\"1074\":1,\"1100\":4,\"1112\":9,\"1122\":12,\"1124\":4,\"1125\":6,\"1177\":8,\"1178\":4}}],[\"val2\",{\"1\":{\"409\":1}}],[\"val1\",{\"1\":{\"409\":1}}],[\"validstring\",{\"1\":{\"527\":5}}],[\"valid\",{\"1\":{\"115\":1,\"527\":1,\"778\":1,\"779\":1,\"782\":1,\"783\":1,\"784\":1,\"785\":1,\"899\":4,\"1086\":1,\"1101\":1}}],[\"validateaddress\",{\"1\":{\"950\":2}}],[\"validatemap\",{\"1\":{\"943\":4}}],[\"validate\",{\"1\":{\"940\":2,\"941\":1,\"942\":4,\"943\":3,\"946\":3,\"948\":5,\"949\":4,\"950\":4,\"951\":3,\"952\":13,\"953\":3}}],[\"validatequery\",{\"1\":{\"206\":1}}],[\"validationerrors\",{\"1\":{\"942\":1,\"952\":4,\"953\":1}}],[\"validation\",{\"1\":{\"57\":2,\"926\":2,\"942\":1,\"943\":2,\"944\":4,\"945\":2,\"946\":2,\"948\":2,\"949\":1,\"950\":1,\"951\":2,\"977\":1}}],[\"validator为我们提供了相关的\",{\"1\":{\"949\":1}}],[\"validator实现了一款基于结构体标签的值验证器\",{\"1\":{\"927\":1}}],[\"validator\",{\"0\":{\"926\":1},\"1\":{\"57\":2,\"503\":2,\"509\":1,\"926\":6,\"928\":1,\"929\":1,\"940\":1,\"941\":1,\"942\":3,\"943\":1,\"944\":2,\"945\":2,\"946\":1,\"948\":2,\"949\":2,\"950\":1,\"951\":2,\"952\":13,\"953\":2,\"976\":2,\"977\":1}}],[\"vale\",{\"1\":{\"77\":2}}],[\"valyala\",{\"1\":{\"60\":1,\"82\":1}}],[\"val这个调用\",{\"1\":{\"45\":1}}],[\"val是一个非常简单的函数\",{\"1\":{\"45\":1}}],[\"val\",{\"1\":{\"45\":10,\"247\":2,\"254\":1,\"255\":1,\"256\":2,\"258\":3,\"369\":2,\"383\":2,\"386\":4,\"412\":2,\"413\":2,\"414\":2,\"476\":2,\"485\":3,\"489\":1,\"491\":7,\"535\":2,\"568\":1,\"725\":1,\"728\":4,\"1002\":1,\"1023\":1,\"1027\":1,\"1035\":3,\"1037\":1,\"1038\":1,\"1061\":1}}],[\"valuer接口的类型组成\",{\"1\":{\"853\":1}}],[\"valuer\",{\"1\":{\"849\":1}}],[\"value支持表达式来构造值\",{\"1\":{\"827\":1}}],[\"value来提供一个具体的值\",{\"1\":{\"827\":1}}],[\"value结构体\",{\"1\":{\"491\":1}}],[\"value结构体类型来表示\",{\"1\":{\"429\":1}}],[\"value类型支持存储任何类型\",{\"1\":{\"488\":1}}],[\"value类型的话\",{\"1\":{\"441\":1}}],[\"valuectx多用于在多级协程中传递一些数据\",{\"1\":{\"476\":1}}],[\"valuectx实现比较简单\",{\"1\":{\"476\":1}}],[\"valuectx\",{\"0\":{\"476\":1},\"1\":{\"473\":1,\"476\":2}}],[\"valuecontext\",{\"1\":{\"163\":1}}],[\"value代表着反射接口的值\",{\"1\":{\"438\":1}}],[\"valueof\",{\"1\":{\"429\":1,\"430\":1,\"438\":2,\"439\":1,\"440\":1,\"441\":2,\"442\":1,\"443\":1,\"446\":3,\"449\":2,\"452\":2,\"457\":2,\"459\":1,\"571\":2,\"1070\":2}}],[\"valueof函数\",{\"1\":{\"429\":1}}],[\"valuetype\",{\"1\":{\"382\":1}}],[\"value则是对应索引下的值\",{\"1\":{\"355\":1}}],[\"value2\",{\"1\":{\"161\":2}}],[\"value1\",{\"1\":{\"161\":2}}],[\"valuesize\",{\"1\":{\"1030\":1,\"1036\":1,\"1037\":1,\"1038\":2,\"1039\":1,\"1042\":2}}],[\"values会返回一个迭代\",{\"1\":{\"585\":1}}],[\"values会将切片转换成一个切片迭代器\",{\"1\":{\"585\":1}}],[\"values\",{\"1\":{\"3\":1,\"7\":1,\"160\":1,\"233\":2,\"559\":1,\"585\":7,\"586\":1,\"598\":1,\"817\":2,\"838\":1,\"856\":2,\"866\":1,\"886\":1,\"895\":6,\"897\":6,\"981\":1,\"1051\":1}}],[\"value\",{\"0\":{\"491\":1},\"1\":{\"3\":1,\"4\":2,\"10\":1,\"143\":4,\"158\":4,\"159\":6,\"160\":1,\"161\":2,\"164\":3,\"166\":8,\"167\":5,\"168\":3,\"186\":2,\"202\":3,\"222\":1,\"235\":1,\"239\":1,\"321\":1,\"355\":3,\"375\":1,\"414\":1,\"428\":2,\"429\":2,\"438\":1,\"439\":1,\"440\":2,\"441\":6,\"442\":2,\"443\":1,\"446\":6,\"449\":3,\"450\":1,\"451\":1,\"452\":2,\"454\":1,\"456\":1,\"457\":1,\"458\":1,\"459\":6,\"462\":1,\"474\":3,\"475\":1,\"476\":3,\"485\":2,\"486\":9,\"488\":1,\"491\":7,\"503\":1,\"551\":1,\"559\":1,\"563\":2,\"582\":12,\"587\":7,\"591\":1,\"719\":2,\"810\":2,\"823\":1,\"827\":1,\"866\":2,\"876\":1,\"885\":1,\"888\":1,\"927\":1,\"942\":1,\"950\":4,\"956\":1,\"992\":1,\"995\":3,\"1002\":1,\"1030\":1,\"1037\":2,\"1045\":2,\"1046\":1,\"1047\":5,\"1048\":2,\"1049\":1,\"1052\":1,\"1069\":1,\"1073\":1,\"1080\":1}}],[\"vars\",{\"1\":{\"1095\":1}}],[\"varp\",{\"1\":{\"1073\":2}}],[\"var方法可以验证的类型包含结构体\",{\"1\":{\"945\":1}}],[\"varbinary\",{\"1\":{\"862\":1}}],[\"varchar\",{\"1\":{\"233\":3,\"863\":2}}],[\"varint\",{\"1\":{\"167\":1}}],[\"variables\",{\"1\":{\"3\":3,\"7\":2,\"14\":1,\"1016\":1}}],[\"variable\",{\"1\":{\"3\":2,\"7\":3,\"116\":1,\"469\":1,\"503\":1,\"563\":2,\"727\":1}}],[\"var\",{\"1\":{\"3\":2,\"4\":1,\"7\":1,\"8\":1,\"10\":1,\"13\":1,\"18\":1,\"41\":4,\"43\":2,\"45\":3,\"115\":1,\"129\":2,\"133\":1,\"135\":1,\"145\":3,\"158\":2,\"159\":3,\"163\":1,\"164\":1,\"216\":1,\"224\":1,\"225\":2,\"227\":1,\"229\":1,\"234\":3,\"298\":1,\"313\":1,\"322\":1,\"328\":6,\"329\":6,\"332\":4,\"335\":1,\"343\":1,\"344\":1,\"345\":1,\"349\":2,\"360\":8,\"364\":1,\"370\":1,\"378\":2,\"382\":1,\"391\":2,\"395\":1,\"402\":4,\"412\":1,\"414\":2,\"426\":2,\"432\":2,\"433\":2,\"443\":1,\"463\":1,\"467\":2,\"468\":3,\"471\":1,\"472\":4,\"475\":1,\"476\":1,\"477\":2,\"478\":1,\"479\":2,\"480\":3,\"481\":3,\"482\":4,\"484\":2,\"485\":3,\"486\":4,\"489\":2,\"490\":3,\"491\":2,\"496\":1,\"525\":2,\"536\":1,\"539\":1,\"540\":1,\"541\":2,\"543\":1,\"547\":1,\"555\":1,\"560\":1,\"566\":1,\"567\":1,\"568\":3,\"572\":1,\"573\":1,\"577\":1,\"587\":1,\"588\":1,\"591\":1,\"593\":2,\"594\":2,\"595\":4,\"596\":2,\"597\":1,\"598\":1,\"600\":1,\"603\":2,\"604\":1,\"606\":1,\"620\":1,\"623\":1,\"633\":3,\"636\":3,\"682\":1,\"736\":1,\"748\":5,\"797\":1,\"809\":2,\"812\":1,\"823\":1,\"824\":3,\"826\":1,\"827\":1,\"828\":1,\"840\":1,\"869\":1,\"870\":1,\"871\":1,\"872\":1,\"873\":1,\"875\":1,\"876\":1,\"877\":1,\"878\":1,\"882\":1,\"884\":1,\"885\":1,\"886\":1,\"888\":3,\"896\":5,\"897\":2,\"898\":4,\"899\":3,\"901\":1,\"902\":2,\"940\":1,\"944\":2,\"945\":2,\"948\":1,\"952\":2,\"970\":1,\"971\":2,\"1003\":1,\"1016\":4,\"1020\":5,\"1024\":2,\"1025\":4,\"1034\":1,\"1037\":1,\"1038\":3,\"1042\":2,\"1053\":1,\"1054\":3,\"1058\":1,\"1061\":1,\"1067\":1,\"1069\":1,\"1070\":6,\"1071\":3,\"1077\":2,\"1079\":2,\"1083\":1,\"1086\":1,\"1089\":1,\"1097\":3,\"1100\":2,\"1101\":2,\"1116\":1,\"1118\":1,\"1120\":1,\"1122\":1,\"1125\":1,\"1132\":1,\"1137\":1,\"1139\":1,\"1147\":1,\"1149\":3,\"1153\":1,\"1165\":3,\"1171\":2,\"1175\":1}}],[\"ve\",{\"1\":{\"1061\":1,\"1097\":2}}],[\"vendorid\",{\"1\":{\"909\":1}}],[\"vendor命令会将\",{\"1\":{\"36\":1}}],[\"vendor是go\",{\"1\":{\"28\":1}}],[\"vendored\",{\"1\":{\"22\":1,\"31\":1}}],[\"vendor\",{\"0\":{\"28\":1,\"36\":1},\"1\":{\"22\":3,\"28\":13,\"30\":1,\"31\":1,\"36\":3,\"37\":1,\"132\":1,\"492\":1,\"514\":2}}],[\"verifier\",{\"1\":{\"71\":2}}],[\"verified\",{\"1\":{\"29\":2}}],[\"verify\",{\"0\":{\"29\":1},\"1\":{\"22\":3,\"29\":4,\"141\":6,\"506\":1,\"513\":3,\"774\":1}}],[\"verion\",{\"1\":{\"7\":1}}],[\"versioning\",{\"1\":{\"113\":1}}],[\"version命令\",{\"1\":{\"90\":1}}],[\"version=new\",{\"1\":{\"26\":1}}],[\"version=$\",{\"1\":{\"10\":1,\"13\":1}}],[\"versions\",{\"1\":{\"20\":1,\"21\":2}}],[\"version变量值与goversion的值相同\",{\"1\":{\"7\":1}}],[\"version文件\",{\"1\":{\"7\":1}}],[\"version输出的就是自身二进制文件的\",{\"1\":{\"6\":1}}],[\"version\",{\"0\":{\"6\":1,\"110\":1},\"1\":{\"2\":1,\"4\":1,\"6\":6,\"7\":3,\"9\":1,\"10\":3,\"13\":2,\"16\":1,\"17\":1,\"18\":1,\"21\":7,\"26\":6,\"34\":1,\"40\":2,\"89\":2,\"90\":2,\"91\":2,\"93\":3,\"110\":2,\"140\":1,\"141\":4,\"148\":3,\"156\":3,\"200\":3,\"205\":4,\"208\":1,\"212\":1,\"213\":1,\"214\":1,\"215\":1,\"504\":2,\"1011\":2,\"1016\":2}}],[\"vet参数中的\",{\"1\":{\"37\":1}}],[\"vet命令并不能直接用来对代码进行检查\",{\"1\":{\"37\":1}}],[\"vet会报告哪个文件哪一行出了什么问题\",{\"1\":{\"37\":1}}],[\"vettool=$\",{\"1\":{\"37\":1}}],[\"vettool\",{\"1\":{\"37\":1}}],[\"vet\",{\"0\":{\"37\":1},\"1\":{\"2\":1,\"4\":1,\"14\":2,\"37\":21,\"107\":1,\"127\":1,\"497\":1,\"1107\":2}}],[\"w不为0\",{\"1\":{\"1177\":1}}],[\"w代表的等待wg完成的协程数量\",{\"1\":{\"1177\":1}}],[\"wbbufentries\",{\"1\":{\"1145\":1}}],[\"wbbuf\",{\"1\":{\"1145\":4}}],[\"wbbufflush1\",{\"1\":{\"1140\":1,\"1145\":1}}],[\"wbbufflush\",{\"1\":{\"1137\":1,\"1145\":1}}],[\"www\",{\"1\":{\"960\":1,\"970\":2,\"981\":1,\"1011\":2}}],[\"w格式动词\",{\"1\":{\"602\":1}}],[\"wrote\",{\"1\":{\"824\":1}}],[\"wronly|os\",{\"1\":{\"419\":2}}],[\"wronly或o\",{\"1\":{\"418\":1}}],[\"wronly\",{\"1\":{\"416\":2}}],[\"wr\",{\"1\":{\"723\":1,\"733\":1}}],[\"wraphandler\",{\"1\":{\"1011\":1}}],[\"wrap2\",{\"1\":{\"603\":4}}],[\"wrapp\",{\"1\":{\"603\":2}}],[\"wrapped\",{\"1\":{\"829\":1,\"1037\":5}}],[\"wrappederr\",{\"1\":{\"485\":1}}],[\"wrapperror同样实现了error接口\",{\"1\":{\"602\":1}}],[\"wrapperspb\",{\"1\":{\"158\":9,\"162\":2,\"164\":3,\"166\":3,\"167\":1,\"168\":2,\"171\":1}}],[\"wrappers\",{\"1\":{\"158\":1,\"159\":1,\"164\":1,\"200\":1}}],[\"wrap1\",{\"1\":{\"603\":4}}],[\"wraperr\",{\"1\":{\"602\":1}}],[\"wraperror\",{\"1\":{\"602\":3}}],[\"wraperrs\",{\"1\":{\"485\":1}}],[\"wright\",{\"1\":{\"71\":2}}],[\"writing\",{\"1\":{\"499\":1}}],[\"writepointer\",{\"1\":{\"1144\":1}}],[\"writeheadernow\",{\"1\":{\"995\":1}}],[\"writeheader\",{\"1\":{\"958\":1}}],[\"writebuf\",{\"1\":{\"1096\":1}}],[\"writebacktmp\",{\"1\":{\"918\":1}}],[\"writeback\",{\"1\":{\"918\":1}}],[\"writebytes\",{\"1\":{\"916\":2}}],[\"writeboth\",{\"1\":{\"841\":2}}],[\"writecount\",{\"1\":{\"916\":2}}],[\"writeconsole\",{\"1\":{\"841\":1}}],[\"writeconfigas\",{\"1\":{\"792\":4}}],[\"writeconfig\",{\"1\":{\"792\":4}}],[\"writecloser\",{\"1\":{\"123\":1}}],[\"writetime\",{\"1\":{\"916\":2}}],[\"writetimeout\",{\"1\":{\"242\":1,\"644\":1,\"998\":1}}],[\"writeto\",{\"1\":{\"556\":1}}],[\"writefile\",{\"1\":{\"418\":3,\"419\":1,\"841\":1}}],[\"writefile与io\",{\"1\":{\"418\":1}}],[\"writeat\",{\"1\":{\"418\":1}}],[\"writesyncer\",{\"1\":{\"839\":2,\"841\":2}}],[\"writes\",{\"1\":{\"389\":1,\"486\":1,\"1038\":2}}],[\"writestring\",{\"1\":{\"337\":1,\"340\":1,\"379\":2,\"418\":6,\"496\":2,\"525\":1,\"719\":2,\"952\":2}}],[\"write\",{\"1\":{\"41\":1,\"343\":1,\"418\":1,\"422\":1,\"468\":2,\"469\":2,\"471\":1,\"481\":2,\"482\":2,\"485\":1,\"682\":1,\"758\":1,\"764\":3,\"766\":3,\"767\":2,\"814\":1,\"1036\":1,\"1037\":2,\"1112\":1,\"1137\":1,\"1144\":1}}],[\"writersem\",{\"1\":{\"1155\":2,\"1158\":1,\"1162\":2}}],[\"writers\",{\"1\":{\"1061\":1,\"1155\":3}}],[\"writermem\",{\"1\":{\"995\":1}}],[\"writerto\",{\"1\":{\"721\":1}}],[\"writer等\",{\"1\":{\"616\":1}}],[\"writer\",{\"1\":{\"41\":2,\"340\":6,\"396\":2,\"418\":1,\"419\":1,\"485\":1,\"553\":2,\"645\":1,\"646\":2,\"649\":2,\"723\":1,\"725\":3,\"733\":4,\"839\":1,\"840\":4,\"841\":4,\"959\":1,\"981\":1,\"986\":1,\"1016\":2}}],[\"written\",{\"1\":{\"7\":1,\"143\":1,\"144\":1,\"419\":3,\"527\":2,\"961\":1}}],[\"wg\",{\"1\":{\"115\":4,\"472\":3,\"682\":4,\"1083\":5,\"1149\":4,\"1165\":5,\"1171\":4,\"1175\":4,\"1177\":9,\"1178\":9}}],[\"wget\",{\"1\":{\"91\":1,\"140\":1}}],[\"wneessen\",{\"1\":{\"71\":1}}],[\"won\",{\"1\":{\"1089\":1}}],[\"woken\",{\"1\":{\"1138\":1}}],[\"woke\",{\"1\":{\"1067\":1}}],[\"would\",{\"1\":{\"21\":1,\"24\":1,\"1091\":1}}],[\"word\",{\"1\":{\"428\":2}}],[\"worldstarted将所有的\",{\"1\":{\"1089\":1}}],[\"worldstarted\",{\"1\":{\"1089\":1}}],[\"worldstopped\",{\"1\":{\"1089\":1}}],[\"world\",{\"0\":{\"149\":1},\"1\":{\"17\":6,\"20\":2,\"37\":1,\"38\":2,\"40\":2,\"41\":6,\"107\":1,\"108\":1,\"111\":1,\"112\":1,\"114\":2,\"145\":1,\"150\":1,\"153\":1,\"155\":1,\"157\":1,\"174\":1,\"202\":2,\"241\":1,\"306\":1,\"324\":1,\"337\":1,\"338\":2,\"339\":1,\"340\":2,\"341\":4,\"355\":1,\"376\":1,\"380\":1,\"417\":3,\"418\":14,\"431\":1,\"435\":1,\"438\":2,\"454\":2,\"462\":3,\"486\":5,\"491\":1,\"496\":2,\"527\":4,\"572\":2,\"708\":14,\"719\":2,\"723\":2,\"725\":10,\"731\":2,\"755\":1,\"756\":1,\"826\":1,\"955\":1,\"956\":1,\"979\":2,\"980\":1,\"1011\":6,\"1038\":3,\"1051\":1,\"1052\":2,\"1053\":5,\"1054\":5,\"1055\":1,\"1083\":2,\"1086\":1,\"1089\":2,\"1130\":1,\"1140\":3}}],[\"workdone\",{\"1\":{\"1139\":2}}],[\"worker\",{\"1\":{\"1085\":1,\"1086\":2,\"1138\":10}}],[\"workers\",{\"1\":{\"527\":1,\"1138\":3,\"1140\":1}}],[\"work如下所示\",{\"1\":{\"515\":1}}],[\"work仅用于演示\",{\"1\":{\"513\":1}}],[\"work也不应该提交到\",{\"1\":{\"513\":1}}],[\"working\",{\"1\":{\"156\":1}}],[\"workiva\",{\"1\":{\"58\":1}}],[\"works\",{\"1\":{\"1024\":1}}],[\"workstation\",{\"1\":{\"907\":1}}],[\"worksapce\",{\"1\":{\"35\":1}}],[\"workspaces\",{\"1\":{\"31\":2}}],[\"workspace\",{\"1\":{\"20\":1,\"31\":3,\"32\":1,\"35\":3,\"36\":1,\"512\":1,\"559\":1,\"603\":4,\"636\":5}}],[\"work中的的replace指令会作用于所有的模块\",{\"1\":{\"515\":1}}],[\"work中的模块列表回到\",{\"1\":{\"35\":1}}],[\"work中添加一个新模块\",{\"1\":{\"514\":1}}],[\"work中添加纳入管理的模块目录\",{\"1\":{\"33\":1}}],[\"work的文件\",{\"1\":{\"32\":1}}],[\"work=\",{\"1\":{\"19\":1}}],[\"work文件的内容很简单\",{\"1\":{\"515\":1}}],[\"work文件仅用在开发过程中\",{\"1\":{\"513\":1}}],[\"work文件\",{\"1\":{\"7\":1,\"34\":1,\"513\":1}}],[\"workcmd\",{\"1\":{\"4\":1}}],[\"work\",{\"0\":{\"31\":1},\"1\":{\"2\":1,\"4\":2,\"31\":6,\"32\":4,\"33\":4,\"34\":8,\"35\":2,\"36\":2,\"512\":2,\"513\":5,\"514\":2,\"520\":1,\"567\":4,\"1087\":2,\"1088\":1,\"1104\":1,\"1132\":2,\"1137\":3,\"1138\":4,\"1139\":6,\"1140\":3,\"1145\":1}}],[\"wed\",{\"1\":{\"986\":2}}],[\"weightedio\",{\"1\":{\"916\":2}}],[\"were\",{\"1\":{\"559\":1}}],[\"we\",{\"1\":{\"503\":1,\"1047\":1,\"1061\":1,\"1067\":2,\"1089\":2,\"1091\":2,\"1095\":1,\"1097\":6,\"1101\":3,\"1120\":5,\"1121\":1,\"1128\":1,\"1132\":2,\"1138\":3,\"1139\":1,\"1140\":3,\"1169\":1}}],[\"webdav\",{\"1\":{\"1016\":1}}],[\"webrtc\",{\"1\":{\"615\":1}}],[\"webassembly\",{\"1\":{\"116\":1}}],[\"web\",{\"0\":{\"51\":1,\"610\":1},\"1\":{\"19\":1,\"51\":9,\"72\":1,\"100\":1,\"141\":2,\"143\":1,\"473\":1,\"503\":2,\"557\":1,\"559\":2,\"560\":2,\"561\":1,\"610\":3,\"637\":1,\"770\":2,\"775\":1,\"961\":2,\"962\":3,\"983\":1,\"1001\":1,\"1005\":1,\"1008\":2,\"1009\":1,\"1010\":1,\"1011\":1}}],[\"well\",{\"1\":{\"4\":1,\"954\":1}}],[\"wyh246859\",{\"1\":{\"234\":1}}],[\"wyh\",{\"1\":{\"19\":2,\"629\":2,\"688\":1,\"689\":1}}],[\"w会将修改应用到源文件中\",{\"1\":{\"17\":1}}],[\"w的别名\",{\"1\":{\"17\":1}}],[\"waking\",{\"1\":{\"1140\":1}}],[\"wake\",{\"1\":{\"1140\":1,\"1165\":1}}],[\"wakep\",{\"1\":{\"1095\":1,\"1098\":1}}],[\"wakeup\",{\"1\":{\"1059\":1}}],[\"watchconfig\",{\"1\":{\"793\":1}}],[\"walkcompare函数\",{\"1\":{\"1070\":1}}],[\"walkcopy在编译期间生成的代码决定以何种方式拷贝\",{\"1\":{\"1026\":1}}],[\"walkselectcases\",{\"1\":{\"1065\":1}}],[\"walkselectcases函数中看到对于这四种情况的处理逻辑\",{\"1\":{\"1065\":1}}],[\"walkappend\",{\"1\":{\"1024\":1}}],[\"walkassign函数中\",{\"1\":{\"1024\":1}}],[\"walk会递归遍历整个文件夹\",{\"1\":{\"426\":1}}],[\"walk\",{\"1\":{\"426\":1,\"565\":1,\"567\":5,\"1024\":1,\"1026\":1,\"1027\":2,\"1028\":1,\"1037\":2,\"1055\":1,\"1065\":1,\"1070\":1}}],[\"way\",{\"1\":{\"156\":1}}],[\"wantasyncpreempt\",{\"1\":{\"1107\":1}}],[\"wants\",{\"1\":{\"1107\":1}}],[\"wan\",{\"1\":{\"141\":1,\"142\":2,\"144\":2}}],[\"wait是否等于l\",{\"1\":{\"1168\":1}}],[\"wait加一而已\",{\"1\":{\"1167\":1}}],[\"wait方法的调用会使当前协程陷入阻塞\",{\"1\":{\"1178\":1}}],[\"wait方法会让协程自身陷入阻塞等待\",{\"1\":{\"1167\":1}}],[\"wait方法等待子协程结束\",{\"1\":{\"472\":1}}],[\"waitstarttime\",{\"1\":{\"1153\":6}}],[\"waitsince记录了协程发生阻塞的时刻\",{\"1\":{\"1086\":1}}],[\"waitsince\",{\"1\":{\"1086\":1,\"1097\":1,\"1104\":1}}],[\"waiter\",{\"1\":{\"1151\":1,\"1166\":1,\"1176\":1}}],[\"waiters\",{\"1\":{\"1057\":2,\"1166\":1,\"1169\":1,\"1178\":2}}],[\"waittraceskip\",{\"1\":{\"1098\":1}}],[\"waittraceblockreason\",{\"1\":{\"1098\":1}}],[\"waitunlockf\",{\"1\":{\"1098\":1}}],[\"waitlock\",{\"1\":{\"1098\":1}}],[\"waitlink\",{\"1\":{\"1059\":1,\"1060\":1,\"1067\":4}}],[\"waitreasondebugcall\",{\"1\":{\"1086\":1}}],[\"waitreasondumpingheap\",{\"1\":{\"1086\":1}}],[\"waitreasonpreempted\",{\"1\":{\"1086\":1}}],[\"waitreasonpanicwait\",{\"1\":{\"1086\":1}}],[\"waitreasonwaitforgccycle\",{\"1\":{\"1086\":1}}],[\"waitreasontracereaderblocked\",{\"1\":{\"1086\":1}}],[\"waitreasonforcegcidle\",{\"1\":{\"1086\":1}}],[\"waitreasonfinalizerwait\",{\"1\":{\"1086\":1}}],[\"waitreasongcmarktermination\",{\"1\":{\"1086\":1,\"1140\":1,\"1145\":1}}],[\"waitreasongcworkeractive\",{\"1\":{\"1086\":1}}],[\"waitreasongcworkeridle\",{\"1\":{\"1086\":1,\"1138\":1}}],[\"waitreasongcscavengewait\",{\"1\":{\"1086\":1}}],[\"waitreasongcsweepwait\",{\"1\":{\"1086\":1}}],[\"waitreasongcassistwait\",{\"1\":{\"1086\":1}}],[\"waitreasongcassistmarking\",{\"1\":{\"1086\":1}}],[\"waitreasongarbagecollectionscan\",{\"1\":{\"1086\":1}}],[\"waitreasongarbagecollection\",{\"1\":{\"1086\":1}}],[\"waitreasoniowait\",{\"1\":{\"1086\":1}}],[\"waitreasonzero\",{\"1\":{\"1086\":1,\"1096\":1}}],[\"waitreasonstoppingtheworld\",{\"1\":{\"1086\":1}}],[\"waitreasonstrings\",{\"1\":{\"1086\":1}}],[\"waitreasonsyncrwmutexlock\",{\"1\":{\"1086\":1}}],[\"waitreasonsyncrwmutexrlock\",{\"1\":{\"1086\":1}}],[\"waitreasonsyncmutexlock\",{\"1\":{\"1086\":1}}],[\"waitreasonsynccondwait\",{\"1\":{\"1086\":1,\"1167\":1}}],[\"waitreasonsleep\",{\"1\":{\"1086\":1,\"1098\":1}}],[\"waitreasonsemacquire\",{\"1\":{\"1086\":1}}],[\"waitreasonselect\",{\"1\":{\"1067\":1,\"1086\":1}}],[\"waitreasonselectnocases\",{\"1\":{\"1066\":1,\"1086\":1}}],[\"waitreason表示协程阻塞的原因\",{\"1\":{\"1086\":1}}],[\"waitreason\",{\"1\":{\"1086\":2,\"1096\":1,\"1098\":1}}],[\"waitreasonchanreceive\",{\"1\":{\"1060\":1,\"1086\":1}}],[\"waitreasonchanreceivenilchan\",{\"1\":{\"1060\":1,\"1086\":1}}],[\"waitreasonchansend\",{\"1\":{\"1059\":1,\"1086\":1}}],[\"waitreasonchansendnilchan\",{\"1\":{\"1059\":1,\"1086\":1}}],[\"waiting\",{\"1\":{\"1059\":2,\"1060\":2,\"1067\":5,\"1086\":3,\"1088\":1,\"1153\":1}}],[\"waitq\",{\"1\":{\"1057\":3}}],[\"wait\",{\"0\":{\"1167\":1,\"1178\":1},\"1\":{\"115\":1,\"389\":1,\"472\":15,\"476\":1,\"477\":2,\"478\":5,\"479\":5,\"480\":5,\"481\":8,\"482\":11,\"484\":5,\"485\":5,\"486\":10,\"606\":1,\"682\":1,\"1083\":1,\"1086\":7,\"1149\":1,\"1155\":2,\"1165\":3,\"1166\":4,\"1167\":2,\"1168\":2,\"1169\":2,\"1171\":1,\"1175\":1,\"1176\":1,\"1177\":4,\"1178\":3}}],[\"waitgroup的值不应该被复制\",{\"1\":{\"472\":1}}],[\"waitgroup通常适用于可动态调整协程数量的时候\",{\"1\":{\"472\":1}}],[\"waitgroup替代了原先的time\",{\"1\":{\"472\":1}}],[\"waitgroup使用起来十分简单\",{\"1\":{\"472\":1}}],[\"waitgroup即等待执行\",{\"1\":{\"472\":1}}],[\"waitgroup是sync包下提供的一个结构体\",{\"1\":{\"472\":1}}],[\"waitgroup可以动态的控制一组指定数量的协程\",{\"1\":{\"462\":1}}],[\"waitgroup\",{\"0\":{\"472\":1,\"1175\":1},\"1\":{\"115\":1,\"462\":1,\"472\":8,\"476\":5,\"477\":12,\"478\":1,\"479\":1,\"480\":1,\"481\":1,\"482\":1,\"483\":1,\"484\":1,\"485\":1,\"486\":2,\"606\":5,\"682\":1,\"1083\":1,\"1149\":1,\"1165\":1,\"1171\":1,\"1175\":2,\"1176\":2,\"1177\":7,\"1178\":3}}],[\"warning\",{\"1\":{\"7\":1,\"503\":3}}],[\"was\",{\"1\":{\"21\":1,\"165\":1,\"1078\":1,\"1087\":1}}],[\"wasm\",{\"1\":{\"7\":2,\"116\":1,\"126\":1}}],[\"wasip1\",{\"1\":{\"7\":1}}],[\"w命令所修改\",{\"1\":{\"7\":1}}],[\"what\",{\"1\":{\"1088\":1}}],[\"while\",{\"1\":{\"527\":1,\"1101\":1,\"1166\":1}}],[\"whichbyte\",{\"1\":{\"1117\":2}}],[\"which\",{\"1\":{\"7\":1,\"37\":1,\"167\":2,\"1089\":1,\"1091\":1}}],[\"whose\",{\"1\":{\"37\":1,\"1144\":1}}],[\"why\",{\"0\":{\"30\":1},\"1\":{\"22\":3,\"30\":3,\"506\":1,\"589\":1}}],[\"when\",{\"1\":{\"8\":1,\"10\":1,\"21\":4,\"140\":1,\"823\":1,\"1030\":1,\"1067\":2,\"1086\":1,\"1089\":1,\"1132\":2,\"1140\":1}}],[\"where\",{\"0\":{\"875\":1},\"1\":{\"7\":2,\"234\":1,\"236\":1,\"237\":1,\"759\":1,\"763\":9,\"764\":1,\"765\":1,\"766\":1,\"767\":1,\"817\":2,\"871\":3,\"874\":2,\"875\":21,\"879\":2,\"880\":4,\"884\":1,\"885\":2,\"886\":2,\"887\":2,\"888\":8,\"895\":1,\"896\":2,\"897\":7,\"898\":14,\"899\":1,\"901\":1,\"902\":2,\"1078\":2}}],[\"whether\",{\"1\":{\"7\":1,\"1078\":1}}],[\"w标志\",{\"1\":{\"7\":1}}],[\"wilson\",{\"1\":{\"1016\":1}}],[\"will\",{\"1\":{\"7\":2,\"140\":1,\"141\":1,\"520\":1,\"826\":1,\"1061\":1,\"1097\":1,\"1101\":1,\"1140\":4}}],[\"wiki\",{\"1\":{\"114\":1,\"116\":1}}],[\"width的取值\",{\"1\":{\"1026\":1}}],[\"width=24\",{\"1\":{\"551\":1}}],[\"width\",{\"1\":{\"17\":1,\"380\":2,\"404\":1,\"1026\":4}}],[\"winter\",{\"1\":{\"326\":3}}],[\"win64\",{\"1\":{\"200\":1}}],[\"win7\",{\"1\":{\"117\":1}}],[\"win10\",{\"1\":{\"116\":1,\"529\":1,\"905\":1}}],[\"winio\",{\"1\":{\"20\":1,\"24\":1,\"27\":1}}],[\"window\",{\"1\":{\"862\":2,\"1067\":1}}],[\"windows\",{\"0\":{\"90\":1},\"1\":{\"3\":1,\"6\":1,\"7\":3,\"8\":2,\"12\":5,\"14\":4,\"18\":2,\"40\":1,\"64\":1,\"90\":2,\"93\":4,\"94\":1,\"116\":2,\"201\":2,\"525\":1,\"526\":3,\"529\":1,\"530\":1,\"588\":1,\"904\":1,\"907\":2,\"1115\":1}}],[\"windwos\",{\"1\":{\"11\":1}}],[\"win\",{\"1\":{\"11\":3}}],[\"wirep\",{\"1\":{\"1097\":1}}],[\"wired\",{\"1\":{\"918\":1}}],[\"wireapp\",{\"1\":{\"829\":1}}],[\"wirefoovalue\",{\"1\":{\"827\":2}}],[\"wireinject是为了在编译时忽略掉此\",{\"1\":{\"824\":1}}],[\"wireinject\",{\"1\":{\"823\":2,\"824\":4}}],[\"wire\",{\"0\":{\"821\":1},\"1\":{\"6\":6,\"18\":2,\"40\":1,\"67\":2,\"205\":1,\"821\":6,\"822\":3,\"823\":17,\"824\":13,\"826\":3,\"827\":5,\"828\":5,\"830\":2}}],[\"without\",{\"1\":{\"936\":4,\"1067\":1,\"1088\":1}}],[\"with会检查管道操作返回的值\",{\"1\":{\"730\":1}}],[\"withdeadline\",{\"1\":{\"478\":3,\"520\":1}}],[\"withdetails\",{\"1\":{\"168\":3}}],[\"withvalidmethods\",{\"1\":{\"784\":1}}],[\"withvalue\",{\"1\":{\"476\":1}}],[\"withvet\",{\"1\":{\"107\":1}}],[\"withsalary\",{\"1\":{\"406\":2}}],[\"withstreaminterceptor\",{\"1\":{\"166\":1}}],[\"withaddress\",{\"1\":{\"406\":2}}],[\"withage\",{\"1\":{\"406\":3}}],[\"withname\",{\"1\":{\"406\":3}}],[\"withindex\",{\"1\":{\"209\":1}}],[\"withbody\",{\"1\":{\"207\":1,\"209\":1,\"216\":2}}],[\"withblock\",{\"1\":{\"170\":3}}],[\"withhuman\",{\"1\":{\"205\":2,\"208\":1,\"209\":1}}],[\"withpretty\",{\"1\":{\"205\":1,\"208\":1,\"209\":1,\"212\":1,\"213\":1,\"214\":1,\"215\":1,\"216\":3}}],[\"withresolver\",{\"1\":{\"174\":1}}],[\"withtimeout其实与withdealine非常相似\",{\"1\":{\"478\":1}}],[\"withtimeout\",{\"1\":{\"170\":1,\"171\":1,\"478\":2}}],[\"withtransportcredentials\",{\"1\":{\"145\":1,\"154\":1,\"158\":1,\"159\":1,\"166\":1,\"167\":1,\"170\":2,\"174\":1,\"175\":1}}],[\"withcancel\",{\"1\":{\"477\":5}}],[\"withcancel源代码中所示\",{\"1\":{\"477\":1}}],[\"withcancel没有使用cancel函数\",{\"1\":{\"37\":1}}],[\"withchainstreaminterceptor\",{\"1\":{\"166\":2,\"167\":1,\"170\":2}}],[\"withchainunaryinterceptor\",{\"1\":{\"166\":2,\"167\":1,\"170\":2}}],[\"withunaryinterceptor\",{\"1\":{\"166\":1}}],[\"with\",{\"0\":{\"730\":1},\"1\":{\"3\":1,\"4\":2,\"17\":1,\"18\":1,\"21\":3,\"37\":1,\"145\":1,\"156\":1,\"428\":1,\"503\":1,\"504\":1,\"520\":1,\"527\":1,\"536\":2,\"559\":2,\"563\":1,\"730\":4,\"733\":6,\"786\":2,\"798\":1,\"800\":1,\"831\":1,\"849\":1,\"936\":4,\"953\":1,\"1000\":1,\"1009\":2,\"1016\":1,\"1030\":1,\"1073\":1,\"1074\":2,\"1087\":1,\"1089\":1,\"1095\":1,\"1097\":1,\"1100\":1,\"1104\":2,\"1177\":4}}],[\"w\",{\"1\":{\"3\":4,\"7\":7,\"9\":1,\"10\":2,\"14\":1,\"17\":4,\"380\":4,\"418\":1,\"485\":2,\"494\":1,\"501\":1,\"507\":1,\"530\":1,\"553\":2,\"556\":6,\"602\":1,\"603\":2,\"649\":1,\"955\":2,\"956\":4,\"958\":3,\"960\":8,\"981\":1,\"1052\":1,\"1089\":1,\"1104\":1,\"1155\":2,\"1157\":2,\"1158\":1,\"1159\":2,\"1177\":10,\"1178\":2}}],[\"uminit来撤销runtime\",{\"1\":{\"1092\":1}}],[\"uch\",{\"1\":{\"1061\":2}}],[\"uchar\",{\"1\":{\"537\":1}}],[\"u754c\",{\"1\":{\"696\":1}}],[\"u4e16\",{\"1\":{\"696\":1}}],[\"u转义\",{\"1\":{\"696\":1}}],[\"uoy\",{\"1\":{\"527\":1}}],[\"u=\",{\"1\":{\"510\":1}}],[\"ugorji\",{\"1\":{\"503\":2,\"509\":1}}],[\"uvwxyz\",{\"1\":{\"374\":2}}],[\"u00ff\",{\"1\":{\"306\":1}}],[\"u00008a9e\",{\"1\":{\"306\":1}}],[\"u00101234\",{\"1\":{\"304\":1}}],[\"u65e5本\",{\"1\":{\"306\":1}}],[\"u+0022\",{\"1\":{\"305\":1}}],[\"u+0027\",{\"1\":{\"305\":1}}],[\"u+005c\",{\"1\":{\"305\":1}}],[\"u+000b\",{\"1\":{\"305\":1}}],[\"u+0009\",{\"1\":{\"305\":1}}],[\"u+000d\",{\"1\":{\"305\":1}}],[\"u+000a\",{\"1\":{\"305\":1}}],[\"u+000c\",{\"1\":{\"305\":1}}],[\"u+0008\",{\"1\":{\"305\":1}}],[\"u+0007\",{\"1\":{\"305\":1}}],[\"u12e4\",{\"1\":{\"304\":1}}],[\"uk\",{\"1\":{\"226\":1,\"227\":1,\"229\":4,\"875\":4,\"880\":2,\"895\":2,\"899\":1}}],[\"uuid5\",{\"1\":{\"934\":2}}],[\"uuid4\",{\"1\":{\"934\":2}}],[\"uuid3\",{\"1\":{\"934\":2}}],[\"uuid\",{\"1\":{\"205\":1,\"208\":1,\"934\":10}}],[\"urn\",{\"1\":{\"503\":2,\"509\":1,\"932\":1}}],[\"uribinding\",{\"1\":{\"971\":1}}],[\"uri\",{\"1\":{\"174\":2,\"932\":1,\"971\":3,\"977\":2}}],[\"urlencoded和multipart\",{\"1\":{\"970\":1}}],[\"urlencoded\",{\"1\":{\"970\":1}}],[\"urlesc\",{\"1\":{\"20\":1,\"24\":1,\"27\":1}}],[\"url参数\",{\"1\":{\"967\":1}}],[\"urlquery\",{\"1\":{\"728\":2}}],[\"url\",{\"0\":{\"969\":1,\"974\":1},\"1\":{\"7\":1,\"145\":1,\"175\":3,\"495\":1,\"509\":1,\"512\":1,\"559\":1,\"560\":1,\"621\":3,\"622\":2,\"646\":3,\"728\":1,\"771\":1,\"791\":2,\"838\":8,\"932\":2,\"954\":1,\"955\":1,\"956\":1,\"965\":1,\"969\":2,\"974\":1,\"989\":1,\"999\":1,\"1011\":2,\"1016\":2}}],[\"udpv6\",{\"1\":{\"932\":1}}],[\"udpv4\",{\"1\":{\"932\":1}}],[\"udp6addr\",{\"1\":{\"679\":2}}],[\"udp6\",{\"1\":{\"679\":2,\"932\":1}}],[\"udp4addr\",{\"1\":{\"679\":2}}],[\"udp4\",{\"1\":{\"679\":2,\"932\":1}}],[\"udp\",{\"0\":{\"679\":1},\"1\":{\"142\":1,\"673\":1,\"679\":1,\"682\":1,\"932\":2}}],[\"udpaddr\",{\"1\":{\"16\":1,\"679\":1}}],[\"ut\",{\"1\":{\"952\":13,\"953\":2}}],[\"util\",{\"1\":{\"923\":1}}],[\"utilization\",{\"1\":{\"561\":1}}],[\"utc\",{\"1\":{\"141\":1}}],[\"utf8\",{\"1\":{\"380\":3,\"527\":7,\"702\":2,\"1055\":1}}],[\"utf8mb4\",{\"1\":{\"233\":9}}],[\"utf\",{\"1\":{\"41\":2,\"87\":1,\"137\":1,\"319\":1,\"527\":4,\"702\":1,\"980\":1,\"1051\":1}}],[\"ui\",{\"1\":{\"141\":2,\"143\":6,\"144\":2,\"1016\":9,\"1017\":1}}],[\"uint\",{\"1\":{\"316\":1,\"432\":4,\"528\":1,\"537\":2,\"574\":5,\"632\":1,\"853\":1,\"854\":1,\"855\":1,\"856\":2,\"857\":1,\"858\":2,\"859\":2,\"860\":10,\"862\":1,\"863\":2,\"866\":1,\"875\":2,\"888\":2,\"889\":1,\"891\":3,\"892\":4,\"893\":5,\"1012\":1,\"1024\":7,\"1057\":4,\"1058\":1,\"1125\":1}}],[\"uint16\",{\"1\":{\"316\":1,\"432\":3,\"528\":1,\"537\":4,\"574\":5,\"1030\":1,\"1041\":2,\"1057\":1,\"1058\":1,\"1067\":4,\"1114\":1}}],[\"uint8\",{\"1\":{\"316\":1,\"319\":1,\"326\":1,\"432\":3,\"528\":1,\"537\":4,\"541\":1,\"574\":5,\"1030\":4,\"1032\":1,\"1034\":1,\"1037\":4,\"1038\":1,\"1041\":1,\"1042\":2,\"1043\":1,\"1100\":1,\"1114\":3,\"1115\":4,\"1125\":1}}],[\"uint32\",{\"1\":{\"168\":1,\"184\":3,\"316\":1,\"428\":1,\"432\":3,\"484\":1,\"488\":1,\"528\":1,\"537\":5,\"574\":5,\"1012\":1,\"1030\":1,\"1057\":1,\"1067\":1,\"1086\":1,\"1088\":7,\"1099\":1,\"1100\":1,\"1101\":1,\"1104\":4,\"1107\":4,\"1112\":4,\"1116\":1,\"1128\":3,\"1132\":1,\"1151\":1,\"1155\":2,\"1166\":2,\"1167\":2,\"1172\":1,\"1176\":1,\"1177\":2,\"1178\":2}}],[\"uint64\",{\"1\":{\"44\":2,\"184\":3,\"316\":1,\"332\":3,\"432\":3,\"488\":1,\"489\":1,\"528\":1,\"537\":4,\"574\":5,\"632\":1,\"751\":6,\"856\":2,\"859\":4,\"1012\":1,\"1086\":2,\"1114\":1,\"1118\":2,\"1124\":2,\"1128\":28,\"1137\":1,\"1176\":1,\"1177\":2}}],[\"uintptr的数组头部\",{\"1\":{\"1067\":1}}],[\"uintptr保存的是地址\",{\"1\":{\"751\":1}}],[\"uintptr可以转换为unsafe\",{\"1\":{\"751\":1}}],[\"uintptrescapes指令表示该函数中uinptr类型的参数被转换为了指针值并且逃逸到了堆上\",{\"1\":{\"48\":1}}],[\"uintptrescapes\",{\"0\":{\"48\":1},\"1\":{\"48\":1}}],[\"uintptr\",{\"1\":{\"4\":2,\"44\":3,\"47\":2,\"48\":2,\"49\":2,\"316\":1,\"335\":3,\"429\":1,\"432\":3,\"434\":1,\"441\":3,\"448\":1,\"488\":1,\"748\":1,\"749\":1,\"750\":1,\"751\":7,\"752\":4,\"1020\":2,\"1025\":5,\"1026\":3,\"1027\":1,\"1028\":2,\"1030\":5,\"1032\":2,\"1033\":7,\"1034\":3,\"1036\":6,\"1037\":9,\"1038\":10,\"1039\":4,\"1040\":4,\"1042\":18,\"1043\":3,\"1052\":3,\"1053\":1,\"1054\":2,\"1058\":1,\"1059\":5,\"1066\":1,\"1067\":1,\"1073\":4,\"1078\":1,\"1080\":3,\"1086\":8,\"1087\":1,\"1089\":1,\"1095\":2,\"1099\":5,\"1100\":6,\"1101\":1,\"1111\":4,\"1112\":8,\"1114\":6,\"1115\":4,\"1116\":5,\"1117\":2,\"1118\":1,\"1120\":1,\"1122\":12,\"1123\":1,\"1124\":4,\"1125\":2,\"1126\":1,\"1132\":1,\"1137\":3,\"1139\":1,\"1145\":3,\"1147\":1,\"1148\":3}}],[\"ulid\",{\"1\":{\"934\":2}}],[\"ulikunitz\",{\"1\":{\"65\":1}}],[\"ulonglong\",{\"1\":{\"537\":2}}],[\"ulong\",{\"1\":{\"537\":1}}],[\"uluru\",{\"1\":{\"132\":2}}],[\"ubuntu\",{\"1\":{\"91\":1,\"140\":1}}],[\"uber\",{\"1\":{\"54\":2,\"67\":1,\"510\":1,\"821\":1,\"836\":2,\"837\":1}}],[\"uploadfiles\",{\"1\":{\"985\":4,\"986\":2}}],[\"uploadfile\",{\"1\":{\"984\":2,\"985\":1,\"986\":1}}],[\"upload\",{\"1\":{\"984\":4,\"985\":4,\"986\":1}}],[\"uptime\",{\"1\":{\"907\":1}}],[\"uptrace\",{\"1\":{\"52\":1,\"239\":1}}],[\"upres\",{\"1\":{\"227\":6}}],[\"upsertedid\",{\"1\":{\"227\":1}}],[\"upsertedcount\",{\"1\":{\"227\":1}}],[\"upsert\",{\"0\":{\"867\":1},\"1\":{\"214\":1,\"849\":1,\"867\":2}}],[\"uppercase\",{\"1\":{\"933\":1}}],[\"upper\",{\"1\":{\"114\":2}}],[\"up\",{\"1\":{\"34\":1,\"499\":1,\"578\":2,\"1030\":1,\"1034\":3,\"1067\":1,\"1089\":1,\"1138\":1,\"1140\":1,\"1165\":1}}],[\"upgrading\",{\"1\":{\"22\":1}}],[\"upgraded\",{\"1\":{\"18\":1}}],[\"upgradeflag\",{\"1\":{\"18\":1}}],[\"updateuser\",{\"1\":{\"970\":2}}],[\"updates方法用于更新多列\",{\"1\":{\"886\":1}}],[\"updates\",{\"0\":{\"886\":1},\"1\":{\"886\":3,\"887\":2}}],[\"updatestate\",{\"1\":{\"145\":1,\"175\":2}}],[\"updateall\",{\"1\":{\"867\":2}}],[\"updatemany\",{\"1\":{\"227\":1}}],[\"updateone\",{\"1\":{\"227\":2}}],[\"update\",{\"0\":{\"885\":1},\"1\":{\"21\":2,\"140\":1,\"214\":5,\"236\":5,\"238\":1,\"499\":3,\"849\":1,\"862\":1,\"881\":2,\"884\":1,\"885\":3,\"886\":2,\"887\":2,\"895\":5,\"897\":6,\"898\":2,\"901\":1,\"902\":2,\"970\":4,\"988\":4,\"989\":2,\"990\":2,\"993\":2,\"994\":4,\"996\":2,\"1000\":1,\"1122\":1}}],[\"updatedat\",{\"1\":{\"856\":2,\"857\":1,\"858\":2,\"859\":2}}],[\"updated\",{\"1\":{\"16\":1,\"214\":1}}],[\"updating\",{\"1\":{\"18\":1}}],[\"u标志\",{\"1\":{\"7\":1}}],[\"us\",{\"1\":{\"688\":1,\"689\":1,\"875\":1,\"878\":2,\"879\":2,\"1067\":1,\"1097\":2}}],[\"ushort\",{\"1\":{\"537\":2}}],[\"usa\",{\"1\":{\"166\":5,\"167\":2,\"223\":1,\"224\":3,\"225\":1,\"226\":1,\"619\":1,\"620\":1,\"625\":2,\"626\":1,\"627\":2,\"628\":2,\"639\":1,\"730\":2,\"735\":2,\"736\":3,\"812\":9,\"813\":3,\"856\":3,\"875\":8,\"895\":3,\"899\":1}}],[\"usagestat\",{\"1\":{\"914\":1}}],[\"usage\",{\"1\":{\"3\":2,\"4\":1,\"5\":1,\"6\":1,\"7\":1,\"8\":2,\"9\":1,\"10\":1,\"13\":1,\"14\":2,\"15\":1,\"16\":2,\"17\":2,\"18\":1,\"19\":1,\"20\":1,\"22\":1,\"23\":1,\"24\":1,\"25\":1,\"26\":1,\"27\":1,\"28\":2,\"29\":1,\"30\":1,\"32\":1,\"33\":1,\"34\":1,\"35\":1,\"36\":1,\"37\":1,\"38\":1,\"40\":1,\"504\":1,\"636\":1,\"914\":2}}],[\"usr\",{\"1\":{\"140\":2,\"790\":1}}],[\"using\",{\"1\":{\"7\":1,\"8\":1,\"10\":1,\"16\":1,\"17\":1,\"21\":3,\"22\":1,\"37\":1,\"233\":1,\"499\":1,\"503\":3,\"536\":2,\"1069\":1}}],[\"usey\",{\"1\":{\"1042\":7,\"1043\":2}}],[\"useless\",{\"1\":{\"37\":1}}],[\"use子命令用于向go\",{\"1\":{\"33\":1}}],[\"use\",{\"0\":{\"33\":1},\"1\":{\"7\":1,\"10\":1,\"18\":1,\"21\":1,\"22\":1,\"31\":2,\"33\":4,\"34\":7,\"93\":2,\"140\":1,\"156\":2,\"160\":1,\"167\":1,\"223\":1,\"414\":1,\"504\":1,\"509\":1,\"513\":1,\"514\":1,\"515\":2,\"591\":1,\"719\":2,\"817\":1,\"914\":2,\"992\":1,\"993\":2,\"994\":1,\"996\":1,\"1003\":1,\"1007\":2,\"1070\":1,\"1112\":3,\"1118\":1}}],[\"userforced\",{\"1\":{\"1140\":1}}],[\"useragent\",{\"1\":{\"1007\":1}}],[\"userpage\",{\"1\":{\"968\":2}}],[\"user注册到同一个请求方法上\",{\"1\":{\"956\":1}}],[\"userlist\",{\"1\":{\"944\":4}}],[\"userid=001\",{\"1\":{\"969\":1}}],[\"userid\",{\"1\":{\"234\":1,\"618\":1,\"619\":1,\"620\":2,\"624\":1,\"625\":2,\"626\":1,\"627\":1,\"628\":1,\"639\":1,\"688\":4,\"689\":3,\"968\":6,\"969\":5,\"1012\":1}}],[\"users\",{\"1\":{\"160\":1,\"166\":1,\"223\":2,\"224\":2,\"225\":10,\"226\":6,\"227\":5,\"228\":2,\"229\":4,\"899\":3,\"984\":1,\"985\":3}}],[\"username=\",{\"1\":{\"970\":1,\"973\":1}}],[\"username=jack\",{\"1\":{\"969\":1}}],[\"username>\",{\"1\":{\"90\":1}}],[\"username\",{\"1\":{\"7\":1,\"174\":1,\"205\":1,\"234\":1,\"513\":2,\"618\":1,\"619\":1,\"620\":2,\"621\":3,\"622\":2,\"624\":1,\"625\":2,\"626\":1,\"627\":1,\"628\":1,\"639\":1,\"688\":4,\"689\":3,\"946\":5,\"968\":6,\"969\":6,\"970\":11,\"971\":6,\"972\":1,\"974\":1,\"977\":5,\"1014\":1}}],[\"userconfigdir\",{\"1\":{\"7\":1}}],[\"user\",{\"1\":{\"7\":5,\"19\":3,\"23\":1,\"28\":1,\"34\":2,\"90\":1,\"158\":7,\"167\":1,\"174\":1,\"207\":2,\"208\":3,\"209\":1,\"210\":1,\"212\":2,\"213\":2,\"214\":2,\"215\":2,\"216\":1,\"223\":2,\"224\":6,\"225\":6,\"226\":5,\"227\":8,\"228\":2,\"229\":2,\"233\":2,\"234\":2,\"235\":1,\"236\":1,\"237\":1,\"296\":1,\"513\":21,\"515\":1,\"561\":3,\"616\":1,\"781\":3,\"785\":1,\"812\":11,\"813\":5,\"866\":8,\"912\":8,\"930\":1,\"942\":7,\"943\":2,\"944\":4,\"952\":12,\"956\":8,\"960\":4,\"977\":3,\"984\":1,\"1012\":2,\"1089\":1,\"1097\":1,\"1139\":1,\"1140\":1}}],[\"useslr\",{\"1\":{\"1095\":1}}],[\"uses\",{\"1\":{\"7\":1,\"17\":1,\"37\":1,\"1101\":1}}],[\"useful\",{\"1\":{\"5\":1}}],[\"usedbytes\",{\"1\":{\"920\":1}}],[\"usedpercent\",{\"1\":{\"914\":1,\"918\":1,\"919\":1}}],[\"used\",{\"1\":{\"4\":1,\"14\":1,\"21\":2,\"329\":1,\"817\":2,\"914\":1,\"918\":1,\"919\":1,\"992\":1,\"1016\":1,\"1030\":1,\"1042\":1,\"1101\":2,\"1102\":3}}],[\"unminit\",{\"1\":{\"1092\":1}}],[\"unmarshalkey\",{\"1\":{\"797\":1}}],[\"unmarshal\",{\"1\":{\"20\":1,\"24\":1,\"27\":1,\"37\":1,\"618\":1,\"620\":1,\"621\":1,\"623\":1,\"624\":1,\"628\":1,\"629\":1,\"797\":2,\"840\":1}}],[\"unwinder\",{\"1\":{\"1101\":1}}],[\"unwindable\",{\"1\":{\"1089\":1}}],[\"unwrap\",{\"1\":{\"602\":1,\"603\":5}}],[\"unlinking\",{\"1\":{\"1067\":1}}],[\"unless\",{\"1\":{\"936\":2}}],[\"unlockslow\",{\"1\":{\"1154\":1}}],[\"unlocked\",{\"1\":{\"1150\":1,\"1153\":1,\"1154\":1,\"1159\":2,\"1162\":2}}],[\"unlockf\",{\"1\":{\"1059\":2,\"1060\":3,\"1098\":1}}],[\"unlock\",{\"0\":{\"1154\":1,\"1159\":1},\"1\":{\"479\":3,\"480\":2,\"481\":2,\"482\":2,\"484\":1,\"490\":1,\"1046\":1,\"1048\":1,\"1049\":1,\"1059\":4,\"1060\":3,\"1061\":1,\"1074\":1,\"1089\":4,\"1092\":1,\"1093\":1,\"1097\":1,\"1100\":2,\"1104\":1,\"1106\":1,\"1107\":1,\"1116\":1,\"1120\":3,\"1132\":1,\"1139\":1,\"1149\":2,\"1150\":1,\"1154\":2,\"1157\":1,\"1159\":5,\"1165\":2,\"1167\":2,\"1168\":3,\"1169\":1,\"1173\":1}}],[\"unknwon\",{\"1\":{\"814\":1}}],[\"unknown\",{\"1\":{\"159\":2,\"166\":1,\"167\":2,\"168\":2,\"504\":1,\"542\":1,\"1089\":2}}],[\"unknownfields\",{\"1\":{\"152\":4,\"167\":2}}],[\"unexpungelocked\",{\"1\":{\"1047\":1}}],[\"unexpected\",{\"1\":{\"603\":1}}],[\"unexported\",{\"1\":{\"4\":1}}],[\"untyped\",{\"1\":{\"535\":1,\"591\":3,\"1070\":1}}],[\"until\",{\"1\":{\"4\":1,\"1104\":1,\"1138\":1}}],[\"unordered\",{\"1\":{\"520\":1}}],[\"unable\",{\"1\":{\"1137\":1}}],[\"unallocatable\",{\"1\":{\"1024\":1}}],[\"unauthenticated\",{\"1\":{\"168\":1}}],[\"unavailable\",{\"1\":{\"168\":1}}],[\"unaryexpr\",{\"1\":{\"1021\":1}}],[\"unarypersonclientinterceptor\",{\"1\":{\"166\":3,\"167\":1,\"170\":2}}],[\"unarypersonloginterceptor\",{\"1\":{\"165\":3}}],[\"unaryinvoker\",{\"1\":{\"166\":3}}],[\"unaryinterceptor\",{\"1\":{\"165\":1}}],[\"unaryclientinterceptor\",{\"1\":{\"166\":3}}],[\"unaryhandler\",{\"1\":{\"165\":6}}],[\"unaryserverinfo\",{\"1\":{\"165\":3}}],[\"unaryserverinterceptor\",{\"1\":{\"165\":3}}],[\"unary\",{\"1\":{\"157\":1,\"165\":3,\"166\":10,\"167\":2}}],[\"unarr\",{\"1\":{\"65\":2}}],[\"understand\",{\"1\":{\"1107\":2}}],[\"understands\",{\"1\":{\"140\":1}}],[\"underlying\",{\"1\":{\"1024\":1}}],[\"undefined\",{\"1\":{\"43\":2,\"503\":1,\"540\":1}}],[\"undefinedtype\",{\"1\":{\"43\":4}}],[\"uninitialized\",{\"1\":{\"1095\":1,\"1100\":1}}],[\"uni\",{\"1\":{\"952\":6}}],[\"uniqueindex\",{\"1\":{\"860\":1,\"862\":1,\"863\":1}}],[\"unique\",{\"1\":{\"859\":3,\"862\":1,\"863\":1,\"936\":1,\"1012\":1,\"1016\":1}}],[\"unit\",{\"1\":{\"521\":1,\"820\":1}}],[\"universaltranslator\",{\"1\":{\"952\":2,\"953\":3}}],[\"universal\",{\"1\":{\"503\":2,\"509\":1,\"952\":3,\"953\":4}}],[\"union\",{\"1\":{\"161\":1,\"541\":4}}],[\"unioffice\",{\"1\":{\"81\":2}}],[\"unimplementedpersonserver\",{\"1\":{\"164\":1,\"166\":2}}],[\"unimplementedchatserviceserver\",{\"1\":{\"159\":1}}],[\"unimplementedmessageserviceserver\",{\"1\":{\"158\":2}}],[\"unimplemented\",{\"1\":{\"152\":1,\"158\":2,\"168\":1}}],[\"unimplementedsayhelloserver\",{\"1\":{\"152\":3,\"153\":1}}],[\"unixtime\",{\"1\":{\"862\":1}}],[\"unix时间格式的\",{\"1\":{\"737\":1}}],[\"unixsec\",{\"1\":{\"737\":1}}],[\"unixaddr\",{\"1\":{\"680\":3}}],[\"unixpacket\",{\"1\":{\"680\":1}}],[\"unixgram\",{\"1\":{\"680\":1}}],[\"unix\",{\"0\":{\"680\":1},\"1\":{\"87\":1,\"116\":1,\"174\":1,\"242\":1,\"416\":3,\"680\":3,\"780\":1,\"932\":2}}],[\"unidoc\",{\"1\":{\"81\":1}}],[\"unicode字符集操作包\",{\"1\":{\"616\":1}}],[\"unicode\",{\"0\":{\"744\":1},\"1\":{\"56\":1,\"319\":1,\"341\":2,\"380\":1,\"527\":1,\"616\":1,\"706\":1,\"717\":4,\"933\":2}}],[\"uniseg\",{\"1\":{\"56\":2,\"504\":1}}],[\"unreachable\",{\"1\":{\"37\":1,\"1059\":1,\"1060\":1}}],[\"unusedresult\",{\"1\":{\"37\":1}}],[\"unused\",{\"1\":{\"22\":1,\"24\":17,\"1089\":1}}],[\"unscoped\",{\"1\":{\"889\":1,\"898\":1}}],[\"unsupported\",{\"1\":{\"175\":1}}],[\"unsignedint\",{\"1\":{\"574\":4}}],[\"unsigned\",{\"1\":{\"168\":1,\"534\":3,\"535\":1,\"537\":9,\"862\":1,\"863\":2}}],[\"unset\",{\"1\":{\"7\":1,\"187\":1}}],[\"unsets\",{\"1\":{\"3\":1}}],[\"unsafe包更新了下面几个函数\",{\"1\":{\"1054\":1}}],[\"unsafeiterator\",{\"1\":{\"1019\":3}}],[\"unsafe也还是被大量的项目使用\",{\"1\":{\"745\":1}}],[\"unsafe标准库是官方提供的一个可以进行低级编程的库\",{\"1\":{\"745\":1}}],[\"unsafeaddr\",{\"1\":{\"441\":7}}],[\"unsafepointer时\",{\"1\":{\"441\":2}}],[\"unsafepointer\",{\"1\":{\"432\":2,\"441\":8,\"449\":1}}],[\"unsafeptr\",{\"1\":{\"37\":1}}],[\"unsafe了解细节\",{\"1\":{\"392\":1}}],[\"unsafesayhelloserver\",{\"1\":{\"152\":1}}],[\"unsafe新增了slicedata\",{\"1\":{\"117\":1}}],[\"unsafeheader\",{\"1\":{\"20\":1}}],[\"unsafe\",{\"0\":{\"745\":1},\"1\":{\"4\":3,\"20\":1,\"44\":5,\"47\":1,\"376\":4,\"411\":1,\"428\":5,\"429\":1,\"432\":1,\"441\":6,\"536\":12,\"539\":9,\"541\":1,\"543\":4,\"616\":1,\"719\":1,\"745\":2,\"748\":7,\"749\":5,\"750\":6,\"751\":21,\"752\":3,\"753\":7,\"754\":2,\"755\":4,\"756\":2,\"1019\":11,\"1020\":2,\"1025\":3,\"1026\":4,\"1027\":1,\"1028\":3,\"1030\":6,\"1033\":3,\"1036\":10,\"1037\":10,\"1038\":13,\"1039\":6,\"1040\":1,\"1042\":10,\"1043\":1,\"1052\":10,\"1053\":2,\"1054\":12,\"1057\":1,\"1058\":1,\"1059\":10,\"1060\":10,\"1064\":1,\"1066\":4,\"1067\":2,\"1070\":1,\"1073\":1,\"1078\":2,\"1079\":3,\"1086\":1,\"1089\":6,\"1095\":4,\"1098\":1,\"1100\":2,\"1101\":2,\"1107\":1,\"1111\":2,\"1112\":10,\"1117\":1,\"1118\":1,\"1119\":8,\"1121\":1,\"1122\":6,\"1123\":1,\"1124\":2,\"1125\":1,\"1126\":1,\"1132\":1,\"1137\":1,\"1138\":2}}],[\"u\",{\"1\":{\"3\":3,\"4\":3,\"7\":2,\"18\":3,\"21\":3,\"341\":2,\"416\":1,\"436\":1,\"437\":1,\"503\":1,\"541\":6,\"603\":2,\"737\":4,\"776\":1,\"832\":1,\"837\":1,\"841\":1,\"850\":1,\"851\":1,\"964\":1,\"1101\":5}}],[\"jmp\",{\"1\":{\"1067\":4}}],[\"jmoiron\",{\"1\":{\"52\":1,\"231\":1}}],[\"jnz\",{\"1\":{\"1153\":1}}],[\"jne\",{\"1\":{\"1067\":1}}],[\"jni\",{\"1\":{\"16\":3}}],[\"jpg\",{\"1\":{\"984\":2,\"985\":3,\"986\":2,\"999\":1}}],[\"jp\",{\"1\":{\"875\":2}}],[\"jzde0emz2tdyigr1u3ddkfjqmgw\",{\"1\":{\"784\":1}}],[\"jti\",{\"1\":{\"778\":1}}],[\"j+1\",{\"1\":{\"354\":1}}],[\"j++\",{\"1\":{\"137\":1,\"354\":1,\"356\":2,\"357\":2}}],[\"jwt是否合法有效\",{\"1\":{\"778\":1}}],[\"jwt的签名部分\",{\"1\":{\"778\":1}}],[\"jwt的payload部分\",{\"1\":{\"778\":1}}],[\"jwt的header部分\",{\"1\":{\"778\":1}}],[\"jwt\",{\"0\":{\"769\":1,\"776\":1,\"1004\":1},\"1\":{\"172\":2,\"769\":1,\"770\":4,\"771\":2,\"772\":3,\"773\":4,\"774\":4,\"775\":2,\"776\":11,\"777\":1,\"778\":4,\"779\":5,\"780\":4,\"781\":7,\"782\":4,\"783\":6,\"784\":3,\"785\":12,\"934\":2,\"1001\":1,\"1004\":4,\"1015\":1}}],[\"journey\",{\"1\":{\"1130\":1}}],[\"jojo即策略主体\",{\"1\":{\"760\":1}}],[\"jojo\",{\"1\":{\"760\":1,\"886\":4,\"887\":4,\"897\":3}}],[\"john\",{\"1\":{\"167\":3,\"168\":1,\"171\":1,\"226\":1,\"406\":1,\"540\":1,\"578\":2,\"773\":1}}],[\"joinreferences\",{\"1\":{\"862\":1}}],[\"joinforeignkey\",{\"1\":{\"862\":1}}],[\"joins\",{\"1\":{\"849\":1}}],[\"join来合并多个\",{\"1\":{\"161\":1}}],[\"joined\",{\"1\":{\"144\":1}}],[\"join的作用等于自动执行\",{\"1\":{\"143\":1}}],[\"join=192\",{\"1\":{\"143\":3,\"144\":1}}],[\"join\",{\"1\":{\"141\":1,\"143\":4,\"144\":6,\"161\":2,\"426\":1,\"896\":1}}],[\"jordan\",{\"1\":{\"71\":2}}],[\"job\",{\"1\":{\"403\":1,\"405\":1,\"407\":2,\"409\":2}}],[\"jobrunner\",{\"1\":{\"66\":2}}],[\"jobject\",{\"1\":{\"16\":1}}],[\"j\",{\"1\":{\"69\":1,\"137\":7,\"354\":9,\"356\":8,\"357\":8,\"527\":15,\"600\":3,\"683\":2,\"688\":5,\"725\":2,\"1067\":3,\"1165\":2}}],[\"jeq\",{\"1\":{\"1067\":2}}],[\"jen20\",{\"1\":{\"904\":1}}],[\"jenny\",{\"1\":{\"166\":4,\"223\":1,\"225\":1,\"895\":4,\"899\":2}}],[\"jennifer\",{\"1\":{\"79\":2}}],[\"jet\",{\"1\":{\"722\":1}}],[\"jetbrains\",{\"1\":{\"94\":1}}],[\"jetbrain\",{\"1\":{\"94\":1}}],[\"jedib0t\",{\"1\":{\"64\":1}}],[\"jessevdk\",{\"1\":{\"64\":1}}],[\"jellydator\",{\"1\":{\"61\":1}}],[\"jinzhu\",{\"1\":{\"56\":1,\"63\":1,\"66\":2,\"810\":2,\"811\":1}}],[\"jumps\",{\"1\":{\"1080\":1}}],[\"julienschmidt\",{\"1\":{\"954\":1,\"955\":1,\"956\":1,\"957\":1,\"960\":1}}],[\"juejin\",{\"1\":{\"147\":1,\"175\":1,\"620\":1,\"750\":1}}],[\"jupiter\",{\"1\":{\"53\":2}}],[\"juptiers\",{\"1\":{\"53\":1}}],[\"just\",{\"1\":{\"22\":1,\"31\":1,\"498\":1,\"1089\":1,\"1096\":1,\"1120\":1,\"1121\":1}}],[\"jak\",{\"1\":{\"943\":1}}],[\"jan\",{\"1\":{\"739\":1}}],[\"jane\",{\"1\":{\"406\":1}}],[\"jar\",{\"1\":{\"640\":1}}],[\"jade\",{\"1\":{\"60\":1}}],[\"jack1\",{\"1\":{\"977\":1}}],[\"jack123456\",{\"1\":{\"513\":2}}],[\"jacklove\",{\"1\":{\"942\":1,\"944\":1}}],[\"jackmike\",{\"1\":{\"730\":1}}],[\"jackup\",{\"1\":{\"567\":8}}],[\"jackc\",{\"1\":{\"62\":1}}],[\"jack\",{\"1\":{\"23\":3,\"158\":17,\"159\":23,\"166\":9,\"167\":2,\"198\":1,\"212\":2,\"213\":1,\"214\":2,\"223\":1,\"224\":1,\"225\":1,\"228\":1,\"246\":1,\"247\":1,\"248\":1,\"258\":2,\"294\":1,\"324\":2,\"329\":5,\"341\":1,\"405\":2,\"407\":2,\"408\":1,\"449\":2,\"460\":6,\"496\":1,\"497\":2,\"498\":1,\"500\":4,\"513\":2,\"515\":1,\"550\":1,\"572\":1,\"573\":1,\"619\":1,\"620\":1,\"625\":2,\"626\":1,\"627\":2,\"628\":2,\"639\":1,\"688\":1,\"689\":1,\"717\":4,\"725\":1,\"727\":3,\"730\":3,\"734\":2,\"735\":2,\"736\":3,\"751\":2,\"779\":2,\"782\":1,\"812\":14,\"813\":3,\"856\":3,\"866\":3,\"871\":3,\"875\":8,\"895\":8,\"897\":6,\"898\":10,\"899\":4,\"901\":1,\"902\":2,\"944\":1,\"945\":1,\"952\":3,\"968\":2,\"969\":1,\"970\":2}}],[\"javascript\",{\"1\":{\"1016\":1}}],[\"javaproperties\",{\"1\":{\"791\":1}}],[\"java\",{\"1\":{\"0\":1,\"53\":1,\"82\":1,\"95\":1,\"492\":1,\"582\":1,\"587\":1,\"701\":2,\"788\":1,\"798\":1,\"821\":1,\"1130\":1}}],[\"jlt\",{\"1\":{\"1067\":1}}],[\"jleagle\",{\"1\":{\"20\":2,\"24\":2,\"27\":2}}],[\"jls\",{\"1\":{\"9\":1,\"45\":1}}],[\"j5f+7qw7o7ve2qcwc7dpeq==\",{\"1\":{\"9\":1}}],[\"js|swagger\",{\"1\":{\"1016\":3}}],[\"js做了安全处理\",{\"1\":{\"736\":1}}],[\"js\",{\"1\":{\"7\":1,\"17\":1,\"51\":1,\"87\":1,\"218\":1,\"582\":1,\"587\":1,\"728\":3,\"1010\":1,\"1016\":4}}],[\"json|favicon\",{\"1\":{\"1016\":1}}],[\"json也就是\",{\"1\":{\"1016\":1}}],[\"jsonresult\",{\"1\":{\"1013\":5}}],[\"json和swagger\",{\"1\":{\"1009\":1}}],[\"json方式进行渲染\",{\"1\":{\"981\":3}}],[\"json`\",{\"1\":{\"975\":1,\"1016\":1}}],[\"jsonbinding\",{\"1\":{\"971\":1}}],[\"jsonp\",{\"1\":{\"981\":1}}],[\"jsonp方式进行渲染\",{\"1\":{\"981\":1}}],[\"jsonprint\",{\"1\":{\"907\":1,\"909\":1,\"910\":1,\"911\":1,\"912\":1,\"914\":1,\"915\":1,\"916\":1,\"918\":1,\"919\":1,\"920\":1}}],[\"jsonparser\",{\"1\":{\"24\":1,\"27\":1}}],[\"json或者console\",{\"1\":{\"840\":1}}],[\"jsonstr\",{\"1\":{\"628\":2}}],[\"jsonsc\",{\"1\":{\"175\":1}}],[\"json包下提供对应的函数来进行\",{\"1\":{\"624\":1}}],[\"json在restful风格的接口通信中经常会用到\",{\"1\":{\"624\":1}}],[\"jsonmc\",{\"1\":{\"175\":1}}],[\"json可以输出其json形式\",{\"1\":{\"7\":1}}],[\"json\",{\"0\":{\"624\":1,\"972\":1},\"1\":{\"3\":4,\"7\":2,\"20\":3,\"25\":2,\"26\":3,\"34\":3,\"37\":2,\"38\":2,\"54\":1,\"63\":3,\"141\":1,\"152\":2,\"167\":3,\"218\":2,\"450\":2,\"503\":4,\"509\":2,\"510\":1,\"519\":2,\"617\":2,\"624\":1,\"625\":1,\"627\":1,\"628\":3,\"639\":4,\"770\":3,\"772\":1,\"773\":1,\"775\":1,\"788\":1,\"791\":1,\"798\":1,\"840\":3,\"845\":1,\"862\":1,\"884\":1,\"908\":1,\"927\":1,\"934\":2,\"952\":2,\"953\":2,\"963\":3,\"965\":3,\"970\":2,\"971\":5,\"972\":1,\"975\":3,\"977\":3,\"981\":2,\"1003\":1,\"1004\":1,\"1011\":6,\"1016\":4,\"1017\":2}}],[\"$runtime\",{\"1\":{\"1089\":2}}],[\"$4\",{\"1\":{\"1067\":2}}],[\"$home\",{\"1\":{\"791\":1}}],[\"$index\",{\"1\":{\"732\":3}}],[\"$float\",{\"1\":{\"727\":1}}],[\"$numer\",{\"1\":{\"727\":1}}],[\"$name\",{\"1\":{\"727\":4,\"729\":3,\"730\":4}}],[\"$val\",{\"1\":{\"727\":2,\"732\":2}}],[\"$sort\",{\"1\":{\"229\":1}}],[\"$set\",{\"1\":{\"227\":3}}],[\"$match\",{\"1\":{\"229\":1}}],[\"$368\",{\"1\":{\"1107\":1}}],[\"$3\",{\"1\":{\"45\":1,\"1067\":2}}],[\"$path\",{\"1\":{\"40\":1}}],[\"$dollar\",{\"1\":{\"40\":1}}],[\"$work\",{\"1\":{\"14\":5,\"19\":3}}],[\"$8\",{\"1\":{\"1067\":1}}],[\"$80\",{\"1\":{\"9\":1}}],[\"$88\",{\"1\":{\"9\":1}}],[\"$gopackage\",{\"1\":{\"40\":1}}],[\"$gopath\",{\"1\":{\"21\":1,\"91\":1}}],[\"$goline\",{\"1\":{\"40\":1}}],[\"$gofile\",{\"1\":{\"40\":1}}],[\"$goarch\",{\"1\":{\"14\":1,\"40\":1}}],[\"$goos\",{\"1\":{\"14\":1,\"40\":1}}],[\"$gomodcache\",{\"1\":{\"7\":1,\"510\":1}}],[\"$goroot目录下会有一个默认的名为go\",{\"1\":{\"7\":1}}],[\"$goroot\",{\"1\":{\"7\":4,\"14\":2,\"17\":1,\"40\":1,\"91\":1}}],[\"$2\",{\"1\":{\"7\":1,\"9\":1,\"1066\":1,\"1067\":3}}],[\"$0\",{\"1\":{\"7\":2,\"9\":3,\"45\":7,\"1066\":1,\"1067\":1,\"1089\":1,\"1107\":1,\"1153\":1}}],[\"$160\",{\"1\":{\"1067\":1}}],[\"$16\",{\"1\":{\"1066\":1}}],[\"$1\",{\"1\":{\"7\":1,\"9\":1,\"45\":3,\"1066\":1,\"1067\":6,\"1153\":1}}],[\"$\",{\"1\":{\"3\":2,\"4\":6,\"5\":1,\"6\":4,\"7\":17,\"8\":6,\"9\":4,\"10\":2,\"12\":2,\"13\":2,\"14\":5,\"15\":4,\"16\":4,\"17\":11,\"18\":11,\"19\":3,\"20\":5,\"21\":2,\"22\":1,\"23\":4,\"24\":2,\"25\":2,\"26\":2,\"27\":2,\"28\":4,\"29\":3,\"30\":2,\"31\":1,\"32\":2,\"33\":2,\"34\":3,\"35\":1,\"36\":1,\"37\":12,\"38\":14,\"40\":3,\"41\":2,\"45\":2,\"91\":3,\"93\":4,\"140\":5,\"141\":1,\"143\":6,\"144\":10,\"148\":6,\"152\":1,\"156\":5,\"158\":1,\"200\":5,\"201\":8,\"204\":2,\"220\":1,\"231\":2,\"494\":2,\"495\":2,\"497\":3,\"499\":11,\"500\":3,\"501\":1,\"503\":8,\"504\":2,\"507\":6,\"510\":2,\"513\":2,\"518\":7,\"520\":1,\"521\":3,\"522\":1,\"523\":3,\"525\":1,\"526\":4,\"527\":5,\"530\":4,\"532\":1,\"545\":6,\"546\":3,\"550\":2,\"551\":1,\"552\":1,\"553\":2,\"559\":2,\"560\":4,\"561\":2,\"817\":2,\"819\":1,\"824\":2,\"850\":1,\"851\":1,\"1067\":2}}],[\"hbits\",{\"1\":{\"1137\":4}}],[\"h+n\",{\"1\":{\"1104\":1}}],[\"h+i\",{\"1\":{\"1104\":1}}],[\"hv2\",{\"1\":{\"1055\":4}}],[\"hv1++\",{\"1\":{\"1055\":1}}],[\"hv1t\",{\"1\":{\"1055\":2}}],[\"hv1\",{\"1\":{\"1055\":6}}],[\"hn\",{\"1\":{\"1024\":2,\"1027\":6}}],[\"hp\",{\"1\":{\"1024\":2,\"1027\":6,\"1028\":4}}],[\"hpp\",{\"1\":{\"21\":1}}],[\"h查看\",{\"1\":{\"1017\":1}}],[\"h5\",{\"1\":{\"897\":2}}],[\"h4\",{\"1\":{\"897\":2,\"898\":2}}],[\"h3\",{\"1\":{\"897\":2,\"898\":2}}],[\"h2\",{\"1\":{\"895\":4,\"899\":1}}],[\"h2non\",{\"1\":{\"70\":1}}],[\"hchansize+mem\",{\"1\":{\"1058\":1}}],[\"hchansize\",{\"1\":{\"1058\":2}}],[\"hchan\",{\"1\":{\"1057\":1,\"1058\":6,\"1059\":7,\"1060\":8,\"1061\":2,\"1064\":1,\"1066\":4,\"1067\":1}}],[\"hchan结构体\",{\"1\":{\"1057\":1}}],[\"hcl\",{\"1\":{\"788\":1,\"791\":1,\"798\":1}}],[\"hcp\",{\"1\":{\"141\":1}}],[\"hw\",{\"1\":{\"675\":3}}],[\"hu使用的uinptr类型来存放地址\",{\"1\":{\"1028\":1}}],[\"hugepagesize\",{\"1\":{\"918\":1}}],[\"hugepagessurp\",{\"1\":{\"918\":1}}],[\"hugepagesrsvd\",{\"1\":{\"918\":1}}],[\"hugepagesfree\",{\"1\":{\"918\":1}}],[\"hugepagestotal\",{\"1\":{\"918\":1}}],[\"hugo\",{\"1\":{\"615\":1,\"788\":1}}],[\"hu\",{\"1\":{\"798\":1,\"1028\":3}}],[\"humanize\",{\"1\":{\"56\":2}}],[\"h头文件\",{\"1\":{\"545\":1}}],[\"h不能在\",{\"1\":{\"533\":1}}],[\"h中还定义了其它很多错误代码\",{\"1\":{\"531\":1}}],[\"h>中的整数类型\",{\"1\":{\"537\":1}}],[\"h>的整数类型提供了支持\",{\"1\":{\"537\":1}}],[\"h>\",{\"1\":{\"530\":1,\"531\":4,\"533\":6,\"534\":1,\"535\":2,\"536\":8,\"537\":1,\"538\":1,\"539\":4,\"540\":2,\"541\":2,\"542\":2,\"543\":4,\"545\":2,\"547\":1}}],[\"hs\",{\"1\":{\"1028\":3}}],[\"hsla\",{\"1\":{\"934\":2}}],[\"hsl\",{\"1\":{\"934\":2}}],[\"hs512\",{\"1\":{\"777\":1}}],[\"hs384\",{\"1\":{\"777\":1}}],[\"hs256\",{\"1\":{\"772\":2,\"774\":2,\"777\":1,\"779\":1,\"784\":1}}],[\"hscan\",{\"1\":{\"263\":1}}],[\"hset\",{\"1\":{\"258\":1}}],[\"hlen\",{\"1\":{\"262\":1}}],[\"hkeys\",{\"1\":{\"261\":1}}],[\"hdel\",{\"1\":{\"259\":1}}],[\"hmap中有一个字段nevacuate用来记录搬迁进度\",{\"1\":{\"1042\":1}}],[\"hmap\",{\"1\":{\"1030\":9,\"1032\":4,\"1034\":6,\"1036\":2,\"1037\":7,\"1038\":2,\"1039\":3,\"1040\":1,\"1041\":1,\"1042\":5}}],[\"hmap结构体就是代表着\",{\"1\":{\"1030\":1}}],[\"hmac的密钥类型是字节数组\",{\"1\":{\"779\":1}}],[\"hmac\",{\"0\":{\"779\":1,\"782\":1},\"1\":{\"776\":1,\"777\":1}}],[\"hmacsha256\",{\"1\":{\"774\":2}}],[\"hmget\",{\"1\":{\"258\":1}}],[\"hmset\",{\"1\":{\"258\":1}}],[\"h来查看其支持的参数\",{\"1\":{\"201\":1}}],[\"hi\",{\"1\":{\"1086\":1,\"1089\":3,\"1095\":1,\"1101\":7,\"1102\":3}}],[\"hiter\",{\"1\":{\"1037\":4}}],[\"hiter就是hmap\",{\"1\":{\"1037\":1}}],[\"hintlist的类型为runtime\",{\"1\":{\"1122\":1}}],[\"hintlist\",{\"1\":{\"1122\":5}}],[\"hint\",{\"1\":{\"849\":1,\"1034\":10,\"1122\":5}}],[\"his\",{\"1\":{\"436\":1,\"437\":1}}],[\"hisstruct\",{\"1\":{\"436\":3,\"437\":3}}],[\"history了解全部预览版本的每周快照版本信息\",{\"1\":{\"138\":1}}],[\"history了解这些主要版本的信息\",{\"1\":{\"138\":1}}],[\"history\",{\"1\":{\"7\":1,\"113\":1,\"291\":1}}],[\"highfree\",{\"1\":{\"918\":1}}],[\"hightotal\",{\"1\":{\"918\":1}}],[\"highdatetime\",{\"1\":{\"416\":3}}],[\"high\",{\"1\":{\"371\":2,\"954\":1,\"1176\":1}}],[\"hierarchical\",{\"1\":{\"174\":1}}],[\"hybridgroup\",{\"1\":{\"76\":1}}],[\"html|swagger\",{\"1\":{\"1016\":1}}],[\"html|doc\",{\"1\":{\"1016\":1}}],[\"html即位于根路径下的index\",{\"1\":{\"980\":1}}],[\"html模板操作包\",{\"1\":{\"616\":1}}],[\"html>\",{\"1\":{\"41\":4,\"980\":2}}],[\"htmlfs\",{\"1\":{\"41\":2}}],[\"html\",{\"0\":{\"980\":1},\"1\":{\"41\":4,\"60\":1,\"616\":2,\"720\":1,\"728\":3,\"778\":7,\"934\":4,\"963\":1,\"980\":5,\"981\":2,\"999\":1,\"1010\":1,\"1011\":1,\"1016\":5}}],[\"httperror\",{\"1\":{\"1013\":3}}],[\"httpmethod\",{\"1\":{\"1008\":2}}],[\"http创建\",{\"1\":{\"998\":1}}],[\"http也已经封装的足够好了\",{\"1\":{\"986\":1}}],[\"http的流程都差不多\",{\"1\":{\"983\":1}}],[\"http默认组件\",{\"1\":{\"955\":1}}],[\"httprouter的工作原理是构建大量的前缀树\",{\"1\":{\"957\":1}}],[\"httprouter\",{\"0\":{\"954\":1},\"1\":{\"954\":1,\"955\":3,\"956\":5,\"957\":2,\"960\":7,\"962\":1,\"966\":1}}],[\"httpresponse\",{\"1\":{\"37\":1}}],[\"http包十分的优秀\",{\"1\":{\"637\":1}}],[\"httphandler\",{\"1\":{\"477\":2}}],[\"http2\",{\"1\":{\"169\":1}}],[\"http2server=0\",{\"1\":{\"7\":1}}],[\"http1\",{\"1\":{\"160\":1}}],[\"httputil\",{\"1\":{\"117\":1,\"646\":1,\"1013\":3}}],[\"http标准库的路由\",{\"1\":{\"115\":1}}],[\"httpserver\",{\"1\":{\"824\":7}}],[\"httpserver的\",{\"1\":{\"824\":1}}],[\"https\",{\"1\":{\"7\":27,\"16\":1,\"18\":1,\"19\":16,\"25\":2,\"51\":10,\"52\":7,\"53\":10,\"54\":6,\"55\":8,\"56\":9,\"57\":4,\"58\":9,\"59\":4,\"60\":6,\"61\":6,\"62\":18,\"63\":9,\"64\":8,\"65\":6,\"66\":6,\"67\":4,\"68\":2,\"69\":2,\"70\":3,\"71\":11,\"72\":7,\"73\":2,\"74\":3,\"75\":8,\"76\":4,\"77\":1,\"78\":2,\"79\":1,\"80\":1,\"81\":8,\"82\":2,\"83\":1,\"84\":3,\"85\":1,\"91\":1,\"93\":1,\"106\":1,\"107\":1,\"108\":1,\"109\":1,\"110\":1,\"111\":1,\"112\":1,\"140\":2,\"141\":2,\"205\":3,\"503\":1,\"638\":1,\"639\":1,\"641\":1,\"642\":1,\"646\":1,\"653\":9,\"776\":1,\"778\":7,\"808\":1,\"817\":2,\"819\":1,\"981\":1}}],[\"http\",{\"0\":{\"105\":1,\"637\":1,\"998\":1},\"1\":{\"6\":1,\"38\":1,\"41\":13,\"51\":1,\"70\":2,\"104\":1,\"105\":3,\"112\":1,\"117\":1,\"131\":1,\"138\":1,\"141\":1,\"142\":1,\"143\":4,\"145\":3,\"147\":1,\"157\":1,\"160\":1,\"168\":1,\"207\":1,\"216\":1,\"217\":1,\"503\":1,\"511\":1,\"556\":1,\"557\":14,\"559\":2,\"560\":7,\"561\":2,\"610\":2,\"616\":1,\"637\":4,\"638\":3,\"639\":1,\"640\":1,\"641\":2,\"642\":2,\"643\":2,\"644\":1,\"645\":9,\"646\":6,\"673\":1,\"758\":1,\"817\":8,\"954\":1,\"955\":4,\"956\":6,\"958\":4,\"959\":3,\"960\":12,\"961\":1,\"963\":3,\"965\":3,\"968\":3,\"969\":2,\"970\":3,\"971\":4,\"974\":2,\"975\":3,\"977\":3,\"978\":1,\"979\":2,\"980\":2,\"981\":1,\"982\":2,\"984\":6,\"985\":3,\"986\":2,\"989\":2,\"990\":4,\"991\":3,\"993\":2,\"994\":1,\"996\":1,\"998\":1,\"999\":2,\"1000\":2,\"1003\":1,\"1009\":1,\"1011\":2,\"1016\":7,\"1071\":3}}],[\"happen\",{\"1\":{\"1139\":1}}],[\"happened\",{\"1\":{\"603\":1}}],[\"handoffp让\",{\"1\":{\"1092\":1}}],[\"handoffp\",{\"1\":{\"1092\":1}}],[\"handling\",{\"1\":{\"598\":1,\"1087\":2}}],[\"handlemethodnotallowed\",{\"1\":{\"959\":1,\"990\":2}}],[\"handlername\",{\"1\":{\"1008\":2}}],[\"handlernames\",{\"1\":{\"982\":2,\"995\":1}}],[\"handlerhttprequest\",{\"1\":{\"995\":1}}],[\"handlers\",{\"1\":{\"988\":1,\"989\":1,\"990\":1,\"995\":8}}],[\"handler来使用\",{\"1\":{\"956\":1}}],[\"handler和http\",{\"1\":{\"956\":1}}],[\"handlerfunc当作httprouter\",{\"1\":{\"956\":1}}],[\"handlerfunc\",{\"1\":{\"645\":2,\"958\":1,\"959\":1,\"988\":1,\"989\":1,\"990\":1,\"992\":2,\"993\":1,\"995\":1,\"996\":1,\"1000\":1,\"1016\":1}}],[\"handlerfunc函数\",{\"1\":{\"645\":1}}],[\"handler\",{\"1\":{\"117\":1,\"162\":1,\"165\":2,\"557\":1,\"644\":1,\"645\":1,\"992\":1,\"998\":1,\"1011\":1,\"1016\":5,\"1071\":1}}],[\"handler的实现\",{\"1\":{\"116\":1}}],[\"handlefunc\",{\"1\":{\"41\":1,\"557\":6,\"645\":1,\"646\":1}}],[\"handle\",{\"1\":{\"41\":1,\"645\":2,\"960\":2}}],[\"ha\",{\"1\":{\"1055\":4,\"1115\":3}}],[\"hamp中的buckets指针\",{\"1\":{\"1030\":1}}],[\"hamp\",{\"1\":{\"1030\":2,\"1042\":1}}],[\"haml\",{\"1\":{\"60\":1}}],[\"half\",{\"1\":{\"1030\":1,\"1042\":1}}],[\"having\",{\"1\":{\"878\":3}}],[\"havespan\",{\"1\":{\"1117\":4,\"1120\":2}}],[\"have\",{\"1\":{\"22\":1,\"1030\":1,\"1086\":1,\"1097\":1,\"1101\":2,\"1120\":3,\"1121\":1,\"1132\":1,\"1138\":2}}],[\"hardwareaddr\",{\"1\":{\"675\":1}}],[\"hajimehoshi\",{\"1\":{\"72\":1}}],[\"hasdefer\",{\"1\":{\"1076\":1}}],[\"hasopendefers\",{\"1\":{\"1074\":1,\"1076\":7}}],[\"haspointer\",{\"1\":{\"1027\":2}}],[\"hasprefix\",{\"1\":{\"711\":2}}],[\"hasauth\",{\"1\":{\"960\":2}}],[\"hasindex\",{\"1\":{\"863\":1}}],[\"hasconstraint\",{\"1\":{\"863\":1}}],[\"hascolumn\",{\"1\":{\"863\":1}}],[\"hastable\",{\"1\":{\"863\":1}}],[\"hassuffix\",{\"1\":{\"711\":2}}],[\"hashgrow\",{\"1\":{\"1041\":3,\"1042\":1}}],[\"hasher\",{\"1\":{\"1036\":2,\"1038\":1,\"1042\":1,\"1043\":1}}],[\"hashmightpanic\",{\"1\":{\"1036\":1}}],[\"hashwriting\",{\"1\":{\"1030\":1,\"1036\":1,\"1037\":1,\"1038\":4}}],[\"hash0\",{\"1\":{\"1030\":2,\"1034\":1,\"1036\":1,\"1038\":1,\"1039\":1,\"1040\":1,\"1042\":1,\"1043\":1}}],[\"hash\",{\"1\":{\"205\":1,\"381\":1,\"428\":1,\"598\":3,\"1030\":1,\"1036\":4,\"1037\":2,\"1038\":4,\"1042\":7,\"1043\":4}}],[\"hashicorp\",{\"1\":{\"61\":1,\"84\":4,\"139\":3,\"140\":5,\"141\":1,\"142\":1,\"143\":1,\"145\":5,\"504\":1}}],[\"has\",{\"1\":{\"3\":1,\"7\":1,\"21\":1,\"29\":1,\"414\":1,\"540\":1,\"830\":1,\"1067\":1,\"1138\":1,\"1144\":1,\"1167\":1,\"1178\":2}}],[\"hxx\",{\"1\":{\"21\":1}}],[\"hh\",{\"1\":{\"21\":1}}],[\"hfiles\",{\"1\":{\"21\":1}}],[\"hgetall\",{\"1\":{\"258\":1}}],[\"hget\",{\"1\":{\"258\":1}}],[\"hg\",{\"1\":{\"18\":4,\"493\":1}}],[\"hexcolor|rgb|rgba|hsl|hsla\",{\"1\":{\"937\":1}}],[\"hexcolor\",{\"1\":{\"934\":1}}],[\"hexadecimal\",{\"1\":{\"934\":1}}],[\"hex\",{\"1\":{\"598\":1,\"938\":1}}],[\"hexsum\",{\"1\":{\"598\":3}}],[\"hexists\",{\"1\":{\"260\":1}}],[\"height\",{\"1\":{\"404\":1}}],[\"heapscanwork\",{\"1\":{\"1137\":1}}],[\"heapsys\",{\"1\":{\"1128\":1}}],[\"heapobjects\",{\"1\":{\"1128\":1}}],[\"heapinuse\",{\"1\":{\"1128\":1}}],[\"heapidle\",{\"1\":{\"1128\":1}}],[\"heapalloc\",{\"1\":{\"1128\":1}}],[\"heaparenaalloc\",{\"1\":{\"1122\":1}}],[\"heaparena所管理的页内存空间并非在初期就已经全部申请好了\",{\"1\":{\"1122\":1}}],[\"heaparenabytes\",{\"1\":{\"1122\":2}}],[\"heaparenabytes决定\",{\"1\":{\"1115\":1}}],[\"heaparenabitmapwords\",{\"1\":{\"1115\":2}}],[\"heaparena的大小由runtime\",{\"1\":{\"1115\":1}}],[\"heaparena\",{\"0\":{\"1115\":1},\"1\":{\"1113\":1,\"1115\":3,\"1118\":1,\"1122\":2}}],[\"heapreleased\",{\"1\":{\"1122\":1,\"1128\":1}}],[\"heapprofile\",{\"1\":{\"556\":3}}],[\"heap\",{\"1\":{\"536\":2,\"550\":2,\"551\":2,\"552\":3,\"553\":6,\"556\":3,\"557\":1,\"559\":2,\"560\":2,\"578\":52,\"616\":1,\"1073\":2,\"1074\":2,\"1086\":1,\"1100\":1,\"1116\":2,\"1120\":2,\"1121\":1,\"1132\":2}}],[\"healthcheckconfig\",{\"1\":{\"175\":2}}],[\"health\",{\"0\":{\"109\":1},\"1\":{\"109\":1,\"193\":3,\"201\":4}}],[\"headless\",{\"1\":{\"504\":2}}],[\"head\",{\"1\":{\"265\":1,\"499\":2,\"1166\":2,\"1167\":1,\"1168\":2,\"1169\":2}}],[\"head>\",{\"1\":{\"41\":2,\"980\":1}}],[\"headers\",{\"1\":{\"1000\":4}}],[\"headerbinding\",{\"1\":{\"971\":1}}],[\"header和grpc\",{\"1\":{\"163\":1}}],[\"header\",{\"1\":{\"10\":1,\"112\":1,\"160\":2,\"162\":6,\"163\":8,\"428\":2,\"642\":1,\"771\":1,\"774\":3,\"775\":1,\"778\":1,\"779\":1,\"782\":1,\"783\":1,\"817\":1,\"958\":6,\"960\":1,\"970\":1,\"971\":1,\"972\":1,\"977\":1,\"986\":3,\"990\":1,\"1000\":6,\"1012\":1,\"1015\":2,\"1016\":5,\"1030\":1}}],[\"here\",{\"1\":{\"108\":1,\"111\":1,\"112\":1,\"137\":2,\"498\":1,\"1024\":1,\"1098\":1,\"1120\":1}}],[\"hermes\",{\"1\":{\"71\":2}}],[\"hero\",{\"1\":{\"60\":2}}],[\"hertz\",{\"1\":{\"51\":2,\"610\":1,\"1009\":1}}],[\"heuristics\",{\"1\":{\"37\":1}}],[\"held\",{\"1\":{\"1155\":1,\"1166\":1}}],[\"hellc++\",{\"1\":{\"715\":1}}],[\"hellc\",{\"1\":{\"715\":2}}],[\"hellman\",{\"1\":{\"117\":1}}],[\"hello是包名\",{\"1\":{\"151\":1}}],[\"helloreq\",{\"1\":{\"145\":1,\"151\":2,\"152\":3,\"153\":1,\"154\":1,\"174\":1,\"175\":1}}],[\"hellorep\",{\"1\":{\"145\":2,\"151\":2,\"152\":3,\"153\":2,\"154\":2,\"174\":2,\"175\":2}}],[\"hellorpc\",{\"1\":{\"145\":1}}],[\"hello2\",{\"1\":{\"145\":3,\"174\":2,\"175\":3}}],[\"helloworld\",{\"1\":{\"145\":3,\"150\":1,\"162\":1,\"174\":1,\"175\":2,\"389\":2,\"686\":1}}],[\"hello\",{\"0\":{\"149\":1},\"1\":{\"13\":2,\"17\":6,\"20\":2,\"37\":1,\"38\":7,\"40\":2,\"41\":3,\"44\":1,\"107\":1,\"108\":1,\"111\":1,\"112\":1,\"114\":2,\"145\":9,\"150\":3,\"151\":3,\"152\":5,\"153\":2,\"154\":1,\"155\":1,\"156\":3,\"157\":1,\"162\":1,\"174\":2,\"175\":5,\"202\":2,\"241\":2,\"292\":2,\"297\":1,\"306\":1,\"307\":1,\"309\":2,\"324\":1,\"334\":1,\"337\":1,\"338\":2,\"339\":1,\"340\":2,\"341\":4,\"355\":1,\"376\":1,\"380\":5,\"417\":3,\"418\":14,\"422\":1,\"431\":1,\"435\":1,\"438\":2,\"443\":2,\"452\":2,\"454\":2,\"462\":7,\"472\":4,\"486\":3,\"491\":1,\"493\":2,\"495\":8,\"496\":20,\"497\":3,\"498\":8,\"499\":30,\"500\":11,\"507\":4,\"512\":3,\"515\":2,\"518\":7,\"520\":10,\"527\":4,\"530\":2,\"572\":2,\"696\":4,\"704\":3,\"708\":14,\"709\":4,\"715\":5,\"719\":2,\"723\":2,\"725\":10,\"731\":2,\"755\":1,\"756\":1,\"805\":2,\"826\":1,\"851\":1,\"955\":3,\"956\":5,\"979\":3,\"982\":7,\"988\":4,\"989\":2,\"990\":2,\"991\":6,\"993\":4,\"994\":2,\"995\":3,\"996\":3,\"1007\":2,\"1008\":4,\"1011\":6,\"1038\":1,\"1051\":1,\"1052\":2,\"1053\":5,\"1054\":4,\"1055\":1,\"1083\":2}}],[\"helper\",{\"0\":{\"522\":1},\"1\":{\"522\":3,\"523\":1}}],[\"helpenvironment\",{\"1\":{\"4\":1}}],[\"help命令查看可用的值\",{\"1\":{\"16\":1}}],[\"helpvcs\",{\"1\":{\"4\":1}}],[\"helptestfunc\",{\"1\":{\"4\":1}}],[\"helptestflag\",{\"1\":{\"4\":1}}],[\"helpprivate\",{\"1\":{\"4\":1}}],[\"helppackages\",{\"1\":{\"4\":1}}],[\"helpmoduleauth\",{\"1\":{\"4\":1}}],[\"helpmoduleget\",{\"1\":{\"4\":1}}],[\"helpmodules\",{\"1\":{\"4\":1}}],[\"helpimportpath\",{\"1\":{\"4\":1}}],[\"helpgoproxy\",{\"1\":{\"4\":1}}],[\"helpgopathget\",{\"1\":{\"4\":1}}],[\"helpgopath\",{\"1\":{\"4\":1}}],[\"helpgomod\",{\"1\":{\"4\":1}}],[\"helpfiletype\",{\"1\":{\"4\":1}}],[\"helpcache\",{\"1\":{\"4\":1}}],[\"helpc\",{\"1\":{\"4\":1}}],[\"helpbuildmode\",{\"1\":{\"4\":1}}],[\"helpbuildconstraint\",{\"1\":{\"4\":1}}],[\"help\",{\"0\":{\"3\":1},\"1\":{\"3\":5,\"4\":10,\"5\":1,\"7\":4,\"8\":3,\"9\":1,\"10\":1,\"13\":1,\"15\":1,\"16\":2,\"17\":1,\"18\":3,\"19\":1,\"20\":1,\"22\":3,\"23\":1,\"24\":1,\"25\":1,\"26\":1,\"27\":1,\"28\":2,\"29\":1,\"30\":1,\"31\":2,\"32\":1,\"33\":1,\"34\":1,\"35\":1,\"36\":1,\"37\":4,\"38\":3,\"40\":1,\"504\":7,\"516\":1,\"519\":1,\"559\":2}}],[\"house`\",{\"1\":{\"895\":1,\"896\":3,\"897\":4,\"898\":3}}],[\"houseid\",{\"1\":{\"893\":2}}],[\"house\",{\"1\":{\"893\":7,\"895\":3,\"896\":1,\"897\":1,\"898\":1,\"899\":6}}],[\"houses\",{\"1\":{\"893\":1,\"895\":1,\"896\":3,\"897\":1,\"898\":7,\"899\":5}}],[\"hour\",{\"1\":{\"738\":1,\"781\":1,\"785\":1}}],[\"hoist\",{\"1\":{\"567\":8}}],[\"hoisie\",{\"1\":{\"60\":1}}],[\"how\",{\"1\":{\"560\":1}}],[\"honnef\",{\"1\":{\"510\":1}}],[\"honors\",{\"1\":{\"4\":1}}],[\"hostid\",{\"1\":{\"907\":1}}],[\"host\",{\"1\":{\"174\":2,\"242\":1,\"605\":2,\"646\":1,\"817\":1,\"904\":1,\"907\":1,\"961\":1,\"966\":1,\"1016\":1}}],[\"hostname\",{\"1\":{\"141\":1,\"907\":1,\"932\":3}}],[\"hostlayout\",{\"1\":{\"114\":1}}],[\"holiday2\",{\"1\":{\"137\":1}}],[\"holiday1\",{\"1\":{\"137\":1}}],[\"hold\",{\"1\":{\"1030\":1,\"1037\":1,\"1095\":1}}],[\"holding\",{\"1\":{\"21\":1}}],[\"holds\",{\"1\":{\"7\":1,\"1016\":1}}],[\"hook\",{\"1\":{\"117\":2,\"1141\":2}}],[\"home\",{\"1\":{\"7\":3,\"19\":5,\"296\":1,\"515\":1,\"817\":3,\"907\":1}}],[\"h1>\",{\"1\":{\"41\":2,\"980\":2,\"989\":2,\"990\":1}}],[\"h1\",{\"1\":{\"6\":4,\"510\":2,\"895\":4,\"899\":1}}],[\"h\",{\"1\":{\"3\":1,\"4\":1,\"6\":1,\"7\":1,\"8\":1,\"10\":1,\"13\":1,\"14\":1,\"15\":1,\"16\":1,\"17\":1,\"18\":1,\"19\":1,\"20\":1,\"21\":1,\"28\":1,\"32\":1,\"37\":1,\"38\":1,\"44\":1,\"47\":1,\"162\":1,\"380\":3,\"436\":1,\"437\":1,\"531\":1,\"532\":3,\"533\":8,\"536\":2,\"545\":2,\"546\":1,\"636\":1,\"645\":1,\"960\":2,\"965\":1,\"980\":1,\"1003\":1,\"1011\":2,\"1030\":1,\"1033\":7,\"1034\":11,\"1036\":8,\"1037\":17,\"1038\":13,\"1039\":4,\"1040\":9,\"1041\":7,\"1042\":57,\"1043\":11,\"1052\":4,\"1054\":1,\"1104\":4,\"1115\":3,\"1119\":14,\"1120\":18,\"1121\":7,\"1122\":19,\"1148\":8}}],[\"h标志\",{\"1\":{\"3\":1}}],[\"t+1\",{\"1\":{\"1168\":1}}],[\"tnow\",{\"1\":{\"1104\":1,\"1138\":2}}],[\"ts\",{\"1\":{\"734\":2}}],[\"t3\",{\"1\":{\"734\":5}}],[\"tb\",{\"1\":{\"571\":2,\"820\":2}}],[\"tm\",{\"1\":{\"525\":1,\"526\":3,\"588\":1,\"909\":1}}],[\"tmpbuf\",{\"1\":{\"1053\":6,\"1054\":3}}],[\"tmpl3\",{\"1\":{\"734\":2}}],[\"tmpl2\",{\"1\":{\"734\":2}}],[\"tmpl1\",{\"1\":{\"734\":2}}],[\"tmpl是一个模板字符串\",{\"1\":{\"723\":1}}],[\"tmpl\",{\"1\":{\"723\":2,\"725\":10,\"727\":2,\"733\":4}}],[\"tmp\",{\"1\":{\"7\":1,\"19\":2,\"141\":1,\"143\":6,\"144\":2,\"680\":1}}],[\"t是testing包提供的用于方便测试的结构体\",{\"1\":{\"521\":1}}],[\"t为时间间隔\",{\"1\":{\"519\":1}}],[\"twitchyliquid64\",{\"1\":{\"503\":2,\"509\":1}}],[\"twodmap\",{\"1\":{\"594\":2}}],[\"two\",{\"1\":{\"160\":1,\"585\":5,\"1042\":1,\"1065\":1}}],[\"t制表符但是无效\",{\"1\":{\"374\":2}}],[\"txoptions\",{\"1\":{\"901\":1,\"902\":1}}],[\"tx\",{\"1\":{\"238\":6,\"866\":2,\"869\":1,\"870\":1,\"871\":1,\"872\":1,\"873\":1,\"874\":2,\"875\":3,\"876\":1,\"877\":2,\"878\":2,\"879\":1,\"885\":1,\"886\":1,\"888\":1,\"901\":5,\"902\":17}}],[\"txt作为插槽文件\",{\"1\":{\"736\":1}}],[\"txt的文件\",{\"1\":{\"598\":1}}],[\"txt文件以做对比\",{\"1\":{\"526\":1}}],[\"txt和new\",{\"1\":{\"526\":1}}],[\"txt是描述所有依赖项的文件\",{\"1\":{\"28\":1}}],[\"txt\",{\"1\":{\"28\":1,\"41\":2,\"200\":1,\"330\":1,\"416\":9,\"417\":5,\"418\":3,\"419\":6,\"420\":2,\"421\":1,\"422\":1,\"526\":10,\"598\":1,\"735\":1,\"736\":10}}],[\"tuintptr\",{\"1\":{\"1074\":1}}],[\"tue\",{\"1\":{\"965\":1}}],[\"turkishcase\",{\"1\":{\"717\":2}}],[\"ture\",{\"1\":{\"107\":1,\"108\":1}}],[\"tutorials\",{\"1\":{\"961\":1,\"966\":1}}],[\"tutorial\",{\"1\":{\"146\":1}}],[\"tlsslots\",{\"1\":{\"1087\":1}}],[\"tlsnextproto\",{\"1\":{\"644\":1}}],[\"tlsconfig\",{\"1\":{\"242\":1,\"644\":1}}],[\"tls配置\",{\"1\":{\"242\":1}}],[\"tlsv1\",{\"1\":{\"141\":3}}],[\"tls\",{\"1\":{\"141\":5,\"242\":1,\"1000\":1,\"1087\":2}}],[\"t245aodel2x19x8\",{\"1\":{\"784\":1}}],[\"t2\",{\"1\":{\"129\":2,\"733\":12,\"734\":5,\"735\":1,\"736\":2,\"751\":2}}],[\"t1转换为unsafe\",{\"1\":{\"751\":1}}],[\"t1\",{\"1\":{\"129\":3,\"733\":11,\"734\":5,\"735\":2,\"736\":2,\"751\":1}}],[\"tzdata\",{\"1\":{\"122\":2}}],[\"tcmalloc\",{\"1\":{\"1109\":1,\"1134\":1}}],[\"tcmollcate\",{\"1\":{\"118\":1}}],[\"tcpv6\",{\"1\":{\"932\":1}}],[\"tcp6addr\",{\"1\":{\"678\":2}}],[\"tcp6\",{\"1\":{\"678\":2,\"932\":1}}],[\"tcp4addr\",{\"1\":{\"678\":2}}],[\"tcp4\",{\"1\":{\"678\":2,\"932\":2}}],[\"tcp\",{\"0\":{\"678\":1},\"1\":{\"145\":1,\"153\":1,\"165\":1,\"232\":1,\"234\":1,\"242\":2,\"504\":1,\"673\":1,\"678\":1,\"682\":3,\"851\":1,\"932\":2}}],[\"tcpaddrfromaddrport\",{\"1\":{\"824\":1}}],[\"tcpaddr\",{\"1\":{\"16\":1,\"678\":1}}],[\"tfmt\",{\"1\":{\"108\":1}}],[\"typ\",{\"1\":{\"428\":2,\"429\":1,\"454\":1,\"456\":1,\"457\":1,\"458\":1,\"459\":1,\"772\":1,\"774\":2,\"779\":1,\"1120\":2,\"1121\":1,\"1123\":1,\"1132\":1}}],[\"typing\",{\"1\":{\"108\":1,\"111\":1,\"112\":1}}],[\"typecheck\",{\"1\":{\"1061\":1}}],[\"typeconverter\",{\"1\":{\"813\":2}}],[\"typeconverter即可\",{\"1\":{\"813\":1}}],[\"typehash\",{\"1\":{\"1033\":5}}],[\"type是空字符串\",{\"1\":{\"974\":1}}],[\"type是具体类型\",{\"1\":{\"568\":1}}],[\"type来进行推断用什么方式解析\",{\"1\":{\"971\":1}}],[\"type与rule都可以不填\",{\"1\":{\"953\":1}}],[\"typevar\",{\"1\":{\"633\":1}}],[\"typename\",{\"1\":{\"534\":1}}],[\"typedmemclr\",{\"1\":{\"1060\":3,\"1067\":2}}],[\"typedmemmove\",{\"1\":{\"1038\":2,\"1042\":4,\"1059\":1,\"1060\":3,\"1067\":2}}],[\"typedef\",{\"1\":{\"534\":2}}],[\"typed\",{\"1\":{\"491\":1,\"838\":1}}],[\"type方法可以获取一个反射值的类型\",{\"1\":{\"439\":1}}],[\"type代表着\",{\"1\":{\"431\":1}}],[\"typeof\",{\"1\":{\"429\":1,\"430\":1,\"431\":2,\"432\":1,\"433\":2,\"434\":5,\"435\":4,\"436\":3,\"437\":3,\"445\":1,\"448\":2,\"450\":1,\"451\":2,\"454\":1,\"455\":1,\"456\":1,\"457\":1,\"458\":1,\"459\":1,\"531\":1,\"535\":1,\"540\":1,\"541\":1,\"1070\":1}}],[\"typeof函数\",{\"1\":{\"429\":1}}],[\"type接口类型来表示\",{\"1\":{\"429\":1}}],[\"type1\",{\"1\":{\"385\":1}}],[\"type没有类型限制\",{\"1\":{\"186\":1}}],[\"type必须是数字或者字符串\",{\"1\":{\"186\":1}}],[\"type>\",{\"1\":{\"186\":1}}],[\"types2\",{\"1\":{\"1061\":2}}],[\"types\",{\"1\":{\"4\":1,\"16\":3,\"158\":3,\"164\":1,\"166\":1,\"167\":1,\"332\":1,\"591\":1,\"593\":1,\"1021\":3,\"1030\":2,\"1074\":4}}],[\"type\",{\"0\":{\"439\":1},\"1\":{\"4\":7,\"9\":1,\"10\":2,\"21\":4,\"34\":4,\"114\":1,\"115\":2,\"123\":1,\"129\":2,\"133\":1,\"143\":2,\"144\":3,\"145\":2,\"152\":5,\"153\":1,\"158\":5,\"159\":1,\"160\":1,\"162\":1,\"163\":1,\"164\":1,\"165\":2,\"166\":3,\"167\":1,\"168\":1,\"174\":2,\"175\":3,\"184\":2,\"186\":1,\"190\":6,\"200\":1,\"205\":1,\"206\":1,\"207\":6,\"208\":3,\"209\":7,\"222\":8,\"224\":1,\"225\":2,\"229\":1,\"234\":1,\"239\":1,\"242\":1,\"251\":1,\"298\":1,\"320\":3,\"322\":1,\"326\":1,\"341\":1,\"365\":3,\"375\":1,\"385\":2,\"392\":1,\"393\":4,\"395\":1,\"396\":2,\"398\":1,\"403\":1,\"404\":2,\"405\":1,\"406\":2,\"407\":6,\"409\":1,\"410\":3,\"411\":1,\"412\":1,\"413\":1,\"414\":9,\"428\":7,\"429\":4,\"431\":1,\"432\":3,\"433\":3,\"434\":2,\"435\":2,\"436\":6,\"437\":6,\"439\":3,\"447\":1,\"448\":9,\"449\":1,\"451\":9,\"454\":1,\"455\":1,\"456\":1,\"457\":1,\"458\":1,\"459\":2,\"462\":1,\"464\":1,\"469\":2,\"474\":1,\"475\":1,\"476\":1,\"477\":1,\"480\":1,\"482\":1,\"484\":3,\"485\":1,\"489\":3,\"491\":1,\"513\":1,\"521\":1,\"535\":3,\"540\":1,\"542\":1,\"550\":1,\"553\":1,\"559\":3,\"563\":10,\"565\":1,\"567\":8,\"568\":4,\"571\":1,\"572\":8,\"573\":4,\"574\":17,\"575\":11,\"577\":2,\"578\":4,\"582\":2,\"587\":1,\"593\":6,\"594\":3,\"595\":1,\"596\":1,\"597\":1,\"599\":1,\"600\":1,\"601\":1,\"602\":1,\"603\":1,\"618\":1,\"621\":1,\"624\":1,\"626\":1,\"633\":1,\"645\":1,\"683\":1,\"688\":2,\"719\":2,\"728\":1,\"746\":1,\"747\":1,\"748\":2,\"749\":1,\"750\":1,\"751\":2,\"778\":2,\"781\":1,\"797\":1,\"806\":2,\"812\":5,\"813\":4,\"820\":1,\"823\":3,\"824\":3,\"826\":2,\"827\":1,\"828\":4,\"829\":1,\"830\":2,\"839\":5,\"840\":3,\"852\":1,\"853\":1,\"854\":1,\"855\":2,\"856\":2,\"857\":2,\"858\":2,\"859\":2,\"860\":5,\"861\":9,\"862\":1,\"863\":4,\"866\":1,\"891\":2,\"892\":3,\"893\":5,\"930\":1,\"942\":2,\"946\":3,\"948\":1,\"949\":1,\"950\":2,\"951\":1,\"952\":3,\"953\":1,\"965\":1,\"970\":1,\"971\":1,\"972\":1,\"977\":2,\"986\":1,\"992\":1,\"1000\":2,\"1013\":1,\"1014\":2,\"1016\":6,\"1019\":1,\"1020\":3,\"1021\":3,\"1024\":2,\"1025\":1,\"1030\":7,\"1032\":1,\"1033\":2,\"1037\":1,\"1038\":1,\"1042\":1,\"1045\":3,\"1051\":2,\"1052\":2,\"1057\":4,\"1059\":1,\"1064\":1,\"1066\":1,\"1069\":1,\"1070\":1,\"1071\":1,\"1073\":3,\"1076\":1,\"1078\":2,\"1086\":3,\"1087\":1,\"1088\":2,\"1099\":2,\"1111\":1,\"1112\":2,\"1114\":2,\"1115\":2,\"1116\":1,\"1117\":2,\"1118\":1,\"1123\":1,\"1124\":1,\"1128\":1,\"1129\":1,\"1132\":2,\"1145\":2,\"1150\":1,\"1151\":1,\"1155\":1,\"1166\":2,\"1172\":1,\"1176\":1}}],[\"tt\",{\"1\":{\"734\":3}}],[\"tty\",{\"1\":{\"64\":1}}],[\"ttl\",{\"1\":{\"61\":2,\"249\":1}}],[\"ttlcache\",{\"1\":{\"61\":2}}],[\"tail\",{\"1\":{\"1166\":2,\"1167\":3,\"1168\":1,\"1169\":1}}],[\"take方法与first类似\",{\"1\":{\"870\":1}}],[\"take\",{\"0\":{\"870\":1},\"1\":{\"870\":2,\"1148\":5}}],[\"takes\",{\"1\":{\"38\":1,\"1074\":1}}],[\"taxes\",{\"1\":{\"847\":2}}],[\"tax\",{\"1\":{\"847\":4}}],[\"taxrate\",{\"1\":{\"847\":2}}],[\"tan\",{\"0\":{\"672\":1},\"1\":{\"672\":2}}],[\"tangsengdaodaoserver\",{\"1\":{\"611\":1}}],[\"ta\",{\"1\":{\"571\":3}}],[\"talk\",{\"1\":{\"447\":1,\"451\":2,\"452\":4,\"455\":1}}],[\"tab\",{\"1\":{\"428\":1,\"1070\":1}}],[\"tab缩进\",{\"1\":{\"374\":2}}],[\"tabletype\",{\"1\":{\"863\":2}}],[\"tablelist\",{\"1\":{\"863\":1}}],[\"tables\",{\"1\":{\"863\":1,\"893\":2}}],[\"tablename\",{\"1\":{\"855\":2,\"856\":1}}],[\"tabler\",{\"1\":{\"855\":1}}],[\"table\",{\"1\":{\"233\":3,\"381\":1,\"524\":1,\"863\":2,\"864\":2,\"866\":1,\"869\":1,\"880\":1,\"893\":2,\"1041\":1}}],[\"tabs\",{\"1\":{\"17\":1}}],[\"tar归档文件的包\",{\"1\":{\"616\":1}}],[\"tar\",{\"1\":{\"91\":4,\"616\":1}}],[\"tarscloud\",{\"1\":{\"53\":1}}],[\"tars\",{\"1\":{\"53\":1}}],[\"tarsgo\",{\"1\":{\"53\":2}}],[\"targetsize\",{\"1\":{\"820\":3}}],[\"target必须是指向error的指针\",{\"1\":{\"603\":1}}],[\"target=consul\",{\"1\":{\"141\":1}}],[\"target\",{\"1\":{\"14\":2,\"21\":1,\"145\":10,\"174\":2,\"175\":7,\"419\":6,\"512\":1,\"603\":2}}],[\"tasks\",{\"1\":{\"561\":2}}],[\"task\",{\"1\":{\"26\":1,\"28\":1,\"158\":2,\"159\":5}}],[\"tagnamefunc如下\",{\"1\":{\"952\":1}}],[\"taglabel\",{\"1\":{\"952\":1}}],[\"tagline\",{\"1\":{\"205\":1}}],[\"tagmap来进行键值对验证\",{\"1\":{\"943\":1}}],[\"tags\",{\"1\":{\"499\":1,\"1011\":2}}],[\"tags=\",{\"1\":{\"12\":2}}],[\"tagexpr\",{\"1\":{\"24\":1,\"27\":1,\"57\":2}}],[\"tag2\",{\"1\":{\"12\":1}}],[\"tag1\",{\"1\":{\"12\":1}}],[\"tag\",{\"0\":{\"450\":1},\"1\":{\"8\":3,\"12\":3,\"37\":1,\"57\":1,\"129\":1,\"138\":1,\"202\":1,\"448\":2,\"450\":5,\"493\":1,\"499\":6,\"823\":1,\"828\":1,\"930\":2,\"931\":1,\"932\":1,\"933\":1,\"934\":2,\"935\":1,\"936\":1,\"937\":1,\"938\":1,\"942\":2,\"943\":2,\"944\":6,\"945\":2,\"946\":3,\"948\":3,\"949\":5,\"950\":1,\"951\":2,\"952\":4,\"977\":3}}],[\"t\",{\"1\":{\"10\":1,\"18\":3,\"38\":1,\"115\":2,\"120\":2,\"133\":3,\"158\":1,\"165\":4,\"166\":8,\"175\":3,\"241\":2,\"304\":1,\"305\":1,\"341\":4,\"362\":2,\"374\":1,\"377\":1,\"393\":1,\"416\":2,\"496\":3,\"503\":1,\"519\":2,\"521\":49,\"522\":17,\"523\":41,\"524\":14,\"527\":13,\"531\":5,\"533\":15,\"537\":16,\"539\":5,\"540\":3,\"541\":3,\"543\":3,\"545\":7,\"546\":2,\"547\":5,\"563\":6,\"571\":4,\"572\":17,\"573\":23,\"574\":9,\"575\":9,\"577\":17,\"578\":16,\"619\":1,\"627\":1,\"654\":2,\"655\":2,\"656\":2,\"657\":2,\"658\":2,\"659\":2,\"660\":2,\"661\":2,\"662\":2,\"663\":2,\"664\":2,\"665\":2,\"666\":2,\"667\":2,\"668\":2,\"669\":2,\"670\":2,\"671\":2,\"672\":2,\"692\":2,\"693\":2,\"694\":4,\"695\":2,\"696\":2,\"697\":2,\"698\":2,\"699\":2,\"700\":2,\"701\":2,\"704\":2,\"705\":2,\"706\":6,\"707\":2,\"708\":2,\"709\":4,\"710\":2,\"711\":2,\"712\":4,\"713\":2,\"714\":2,\"715\":4,\"716\":2,\"717\":2,\"718\":2,\"719\":2,\"720\":2,\"721\":2,\"723\":2,\"728\":1,\"733\":3,\"734\":3,\"737\":11,\"741\":2,\"742\":2,\"779\":2,\"781\":2,\"782\":2,\"783\":2,\"784\":2,\"785\":2,\"791\":2,\"792\":2,\"793\":2,\"794\":2,\"797\":1,\"817\":2,\"834\":2,\"835\":2,\"840\":5,\"942\":2,\"943\":2,\"944\":4,\"945\":4,\"946\":2,\"948\":2,\"949\":2,\"950\":2,\"951\":2,\"952\":7,\"953\":2,\"1019\":9,\"1024\":8,\"1028\":1,\"1030\":5,\"1033\":3,\"1034\":9,\"1036\":13,\"1037\":18,\"1038\":24,\"1039\":18,\"1040\":4,\"1041\":2,\"1042\":36,\"1043\":6,\"1058\":4,\"1059\":2,\"1074\":1,\"1089\":4,\"1095\":1,\"1097\":1,\"1098\":12,\"1100\":1,\"1104\":3,\"1107\":5,\"1120\":3,\"1121\":1,\"1132\":5,\"1138\":1,\"1167\":5,\"1168\":3,\"1169\":1}}],[\"trust\",{\"1\":{\"503\":1}}],[\"trusted\",{\"1\":{\"503\":1}}],[\"trunc模式打开文件\",{\"1\":{\"418\":1}}],[\"trunc\",{\"1\":{\"416\":2,\"418\":3,\"419\":2,\"426\":1,\"660\":2}}],[\"true这么一件事\",{\"1\":{\"1080\":1}}],[\"true代表了是否重写已有的模板\",{\"1\":{\"952\":1}}],[\"true为真值\",{\"1\":{\"315\":1}}],[\"true\",{\"1\":{\"18\":1,\"112\":2,\"141\":1,\"166\":4,\"167\":2,\"189\":1,\"190\":1,\"202\":1,\"207\":2,\"210\":1,\"213\":1,\"341\":1,\"350\":2,\"399\":2,\"435\":3,\"436\":1,\"437\":1,\"448\":3,\"450\":1,\"451\":2,\"460\":2,\"470\":5,\"471\":9,\"477\":1,\"484\":2,\"486\":4,\"513\":2,\"521\":5,\"524\":2,\"568\":1,\"581\":2,\"582\":1,\"587\":2,\"633\":2,\"636\":3,\"659\":1,\"694\":7,\"695\":2,\"706\":6,\"708\":4,\"709\":3,\"711\":2,\"728\":3,\"764\":2,\"773\":1,\"809\":1,\"817\":2,\"839\":1,\"840\":2,\"841\":1,\"867\":2,\"899\":3,\"910\":1,\"911\":1,\"912\":1,\"915\":1,\"952\":1,\"953\":1,\"990\":2,\"1000\":1,\"1002\":1,\"1011\":2,\"1012\":1,\"1020\":1,\"1024\":1,\"1037\":1,\"1045\":1,\"1047\":5,\"1048\":1,\"1058\":3,\"1059\":6,\"1060\":10,\"1062\":1,\"1066\":1,\"1067\":4,\"1070\":2,\"1074\":2,\"1079\":3,\"1080\":1,\"1082\":1,\"1092\":1,\"1095\":1,\"1096\":1,\"1097\":3,\"1107\":4,\"1111\":1,\"1112\":1,\"1117\":2,\"1122\":1,\"1125\":1,\"1126\":2,\"1138\":2,\"1140\":1,\"1152\":1,\"1153\":3,\"1154\":1,\"1157\":1,\"1160\":2}}],[\"trailingzeros64\",{\"1\":{\"1125\":2}}],[\"trailer来实现\",{\"1\":{\"163\":1}}],[\"trailer\",{\"1\":{\"162\":3,\"163\":7}}],[\"tracing\",{\"1\":{\"504\":1,\"1136\":1}}],[\"tracerelease\",{\"1\":{\"1138\":1,\"1148\":2}}],[\"tracereason\",{\"1\":{\"1098\":1}}],[\"traceacquire\",{\"1\":{\"1138\":1,\"1148\":2}}],[\"tracegounpark\",{\"1\":{\"1104\":1}}],[\"traceenabled\",{\"1\":{\"1104\":1}}],[\"traceskip\",{\"1\":{\"1098\":1}}],[\"traceback\",{\"1\":{\"1097\":1,\"1101\":1}}],[\"traceblockcondwait\",{\"1\":{\"1167\":1}}],[\"traceblockchanrecv\",{\"1\":{\"1060\":1}}],[\"traceblockchansend\",{\"1\":{\"1059\":1}}],[\"traceblocksystemgoroutine\",{\"1\":{\"1138\":1}}],[\"traceblocksleep\",{\"1\":{\"1098\":1}}],[\"traceblockselect\",{\"1\":{\"1067\":1}}],[\"traceblockforever\",{\"1\":{\"1059\":1,\"1060\":1,\"1066\":1}}],[\"trace命令来完成相关的分析工作\",{\"1\":{\"561\":1}}],[\"trace\",{\"0\":{\"561\":1},\"1\":{\"14\":2,\"504\":1,\"519\":2,\"556\":5,\"557\":5,\"561\":12,\"1086\":1,\"1138\":4,\"1148\":8}}],[\"transition\",{\"1\":{\"1111\":1}}],[\"transfer\",{\"1\":{\"986\":1}}],[\"trans\",{\"1\":{\"952\":14,\"953\":2}}],[\"transaction\",{\"1\":{\"901\":2}}],[\"transation\",{\"1\":{\"238\":4}}],[\"translate\",{\"1\":{\"952\":5,\"953\":1}}],[\"translateerror\",{\"1\":{\"852\":1}}],[\"translations\",{\"1\":{\"952\":2}}],[\"translator在使用时有很多坑\",{\"1\":{\"953\":1}}],[\"translator提供了通过编写json\",{\"1\":{\"953\":1}}],[\"translator\",{\"1\":{\"503\":2,\"509\":1,\"952\":6,\"953\":5}}],[\"transport\",{\"1\":{\"640\":1}}],[\"trigger\",{\"1\":{\"1116\":1,\"1132\":2,\"1138\":1}}],[\"trip\",{\"1\":{\"1097\":1}}],[\"trimsuffix\",{\"1\":{\"718\":2}}],[\"trimright\",{\"1\":{\"718\":2}}],[\"trimprefix\",{\"1\":{\"718\":2}}],[\"trimpath\",{\"1\":{\"8\":1,\"9\":1,\"14\":1}}],[\"trimleft\",{\"1\":{\"718\":2}}],[\"trim\",{\"1\":{\"718\":2,\"1089\":1}}],[\"trie\",{\"1\":{\"504\":1}}],[\"triton\",{\"1\":{\"141\":1}}],[\"tryget来尝试获取灰色对象以继续扫描\",{\"1\":{\"1137\":1}}],[\"tryget\",{\"1\":{\"1137\":2,\"1145\":2}}],[\"trygetfast\",{\"1\":{\"1137\":1,\"1145\":1}}],[\"tryallocmspan\",{\"1\":{\"1120\":2}}],[\"tryallocmspan方法完成\",{\"1\":{\"1120\":1}}],[\"tryacquire\",{\"1\":{\"1117\":2,\"1147\":1}}],[\"trywakep\",{\"1\":{\"1104\":1,\"1138\":1}}],[\"trying\",{\"1\":{\"1067\":1}}],[\"tryexpungelocked\",{\"1\":{\"1047\":1}}],[\"tryswap\",{\"1\":{\"1047\":2}}],[\"trylock\",{\"0\":{\"1152\":1,\"1157\":1},\"1\":{\"481\":1,\"1152\":3,\"1157\":2}}],[\"tryrlock\",{\"0\":{\"1160\":1},\"1\":{\"481\":1,\"1160\":1}}],[\"try\",{\"1\":{\"17\":1,\"559\":1,\"1041\":1,\"1097\":2,\"1100\":1,\"1117\":1,\"1120\":1,\"1121\":1,\"1138\":1}}],[\"tree\",{\"1\":{\"9\":1,\"52\":1,\"381\":1,\"734\":3}}],[\"tinyspanclass\",{\"1\":{\"1124\":2}}],[\"tinyallocs++\",{\"1\":{\"1124\":1}}],[\"tinyallocs表示分配了多少个微对象\",{\"1\":{\"1116\":1}}],[\"tinyallocs\",{\"1\":{\"1099\":1,\"1116\":1,\"1124\":1}}],[\"tinyoffset则是空闲内存相对于起始地址的偏移量\",{\"1\":{\"1116\":1}}],[\"tinyoffset\",{\"1\":{\"1099\":1,\"1116\":1,\"1124\":5}}],[\"tiny\",{\"1\":{\"1099\":1,\"1116\":1,\"1123\":1,\"1124\":5}}],[\"tinyint\",{\"1\":{\"233\":1,\"574\":4,\"575\":4}}],[\"tint\",{\"1\":{\"1021\":1}}],[\"title\",{\"1\":{\"1011\":2,\"1016\":5}}],[\"title>\",{\"1\":{\"41\":2,\"980\":1}}],[\"tiger192\",{\"1\":{\"934\":2}}],[\"tiger160\",{\"1\":{\"934\":2}}],[\"tiger128\",{\"1\":{\"934\":2}}],[\"tips\",{\"1\":{\"550\":1}}],[\"tier\",{\"1\":{\"208\":1}}],[\"ticket\",{\"1\":{\"1166\":1,\"1167\":2,\"1168\":1}}],[\"ticker\",{\"0\":{\"742\":1},\"1\":{\"476\":2,\"742\":7}}],[\"tick\",{\"1\":{\"145\":1,\"175\":1,\"1088\":1}}],[\"tidb\",{\"1\":{\"614\":1,\"851\":2}}],[\"tidwall\",{\"1\":{\"63\":1}}],[\"tidy命令会清除go\",{\"1\":{\"24\":1}}],[\"tidy\",{\"0\":{\"24\":1},\"1\":{\"22\":2,\"24\":5,\"25\":1,\"506\":1}}],[\"tile\",{\"1\":{\"7\":6}}],[\"timemiddleware\",{\"1\":{\"996\":2}}],[\"timezone\",{\"1\":{\"934\":1}}],[\"timesleep函数中有这么一行代码\",{\"1\":{\"1098\":1}}],[\"timesleep\",{\"1\":{\"1098\":2}}],[\"timesstat\",{\"1\":{\"912\":1}}],[\"times\",{\"1\":{\"912\":4}}],[\"timestamp\",{\"1\":{\"200\":1,\"1007\":1}}],[\"timeencoder\",{\"1\":{\"839\":3,\"840\":1}}],[\"timeerror类型的\",{\"1\":{\"603\":2}}],[\"timeerror类型的错误\",{\"1\":{\"603\":1}}],[\"timeerror\",{\"1\":{\"603\":4}}],[\"timekey\",{\"1\":{\"839\":3,\"840\":1}}],[\"time包存放了基础的时间单位常量\",{\"1\":{\"738\":1}}],[\"time包提供了时间和日历的相关的函数与方法\",{\"1\":{\"737\":1}}],[\"timelines\",{\"1\":{\"561\":1}}],[\"timech\",{\"1\":{\"469\":3}}],[\"timerencoder本质上其实是一个函数\",{\"1\":{\"840\":1}}],[\"timerctx会在时间到期后自动取消当前上下文\",{\"1\":{\"478\":1}}],[\"timerctx在cancelctx\",{\"1\":{\"478\":1}}],[\"timerctx\",{\"0\":{\"478\":1},\"1\":{\"473\":1}}],[\"timer\",{\"0\":{\"741\":1},\"1\":{\"158\":3,\"741\":6,\"742\":2,\"1096\":1,\"1098\":3}}],[\"timeoutcontext\",{\"1\":{\"170\":1,\"171\":1}}],[\"timeout\",{\"1\":{\"38\":2,\"169\":1,\"170\":2,\"171\":2,\"471\":2,\"476\":2,\"478\":3,\"518\":1,\"519\":1,\"600\":1,\"640\":1}}],[\"timeformat=false\",{\"1\":{\"37\":1}}],[\"timeformat\",{\"1\":{\"37\":2,\"840\":5}}],[\"time\",{\"0\":{\"737\":1},\"1\":{\"4\":1,\"7\":2,\"21\":4,\"37\":3,\"122\":1,\"145\":3,\"158\":9,\"159\":8,\"170\":2,\"171\":1,\"175\":3,\"242\":9,\"247\":3,\"248\":2,\"462\":13,\"467\":2,\"469\":6,\"471\":12,\"474\":4,\"475\":2,\"476\":4,\"477\":12,\"478\":9,\"479\":6,\"480\":6,\"481\":12,\"482\":12,\"520\":3,\"547\":3,\"556\":6,\"559\":1,\"603\":6,\"606\":4,\"616\":1,\"737\":19,\"739\":1,\"740\":2,\"741\":2,\"742\":2,\"743\":5,\"773\":1,\"778\":1,\"780\":1,\"781\":4,\"785\":4,\"791\":3,\"809\":4,\"821\":1,\"838\":2,\"840\":5,\"852\":2,\"857\":4,\"862\":1,\"911\":2,\"996\":2,\"998\":2,\"1007\":1,\"1037\":1,\"1063\":3,\"1073\":2,\"1086\":1,\"1102\":1,\"1106\":2,\"1112\":1,\"1132\":1,\"1138\":1,\"1165\":3}}],[\"techniques\",{\"1\":{\"1136\":1}}],[\"te\",{\"1\":{\"723\":2}}],[\"teardown\",{\"1\":{\"523\":4}}],[\"team\",{\"1\":{\"62\":1}}],[\"tell\",{\"1\":{\"520\":1,\"1097\":1}}],[\"telemetry\",{\"1\":{\"114\":1}}],[\"termination\",{\"1\":{\"1086\":1,\"1140\":2}}],[\"terminated\",{\"1\":{\"533\":1}}],[\"terminal\",{\"1\":{\"504\":1}}],[\"term\",{\"1\":{\"212\":1,\"213\":1,\"214\":1,\"215\":1,\"216\":1}}],[\"tetj8iy+ifbt8slc+rrq\",{\"1\":{\"205\":1}}],[\"tencentcloud\",{\"1\":{\"141\":1}}],[\"tengo\",{\"1\":{\"75\":3}}],[\"teem\",{\"1\":{\"527\":1}}],[\"tee\",{\"1\":{\"140\":1,\"526\":2,\"843\":2}}],[\"tesseract\",{\"1\":{\"85\":1}}],[\"testq\",{\"1\":{\"1067\":1}}],[\"testquote\",{\"1\":{\"696\":3}}],[\"testquickstart\",{\"1\":{\"241\":1,\"840\":1}}],[\"testvar1\",{\"1\":{\"945\":1}}],[\"testvar\",{\"1\":{\"945\":1}}],[\"testdot\",{\"1\":{\"834\":1}}],[\"testdata\",{\"1\":{\"524\":2,\"527\":7}}],[\"testwatchingconfig\",{\"1\":{\"793\":1}}],[\"testwritingconfig\",{\"1\":{\"792\":1}}],[\"testhmac\",{\"1\":{\"779\":1}}],[\"testhello\",{\"1\":{\"38\":5,\"496\":1,\"497\":2}}],[\"testbuilder\",{\"1\":{\"719\":3}}],[\"testbota\",{\"1\":{\"695\":3}}],[\"testrsa\",{\"1\":{\"785\":1}}],[\"testreadconfigfile\",{\"1\":{\"791\":1}}],[\"testreader\",{\"1\":{\"721\":3}}],[\"testreplacer\",{\"1\":{\"720\":1}}],[\"testreplaceall\",{\"1\":{\"715\":3}}],[\"testreplace\",{\"1\":{\"715\":3}}],[\"testrepeat\",{\"1\":{\"714\":3}}],[\"testround\",{\"1\":{\"663\":3}}],[\"testlines\",{\"1\":{\"835\":1}}],[\"testlowerandupper\",{\"1\":{\"717\":3}}],[\"testlog\",{\"1\":{\"664\":3}}],[\"testlastindex\",{\"1\":{\"712\":1}}],[\"testalias\",{\"1\":{\"948\":1}}],[\"testaliases\",{\"1\":{\"794\":1}}],[\"testappend\",{\"1\":{\"701\":3}}],[\"testaotb\",{\"1\":{\"694\":2}}],[\"testaoti\",{\"1\":{\"692\":3}}],[\"testatob\",{\"1\":{\"694\":1}}],[\"testabs\",{\"1\":{\"656\":3}}],[\"testn\",{\"1\":{\"669\":3}}],[\"testname\",{\"1\":{\"658\":1}}],[\"testnaivefor\",{\"1\":{\"588\":2}}],[\"testprocess\",{\"1\":{\"783\":1}}],[\"testpresuffix\",{\"1\":{\"711\":3}}],[\"testparse\",{\"1\":{\"782\":1}}],[\"testparsecomplex\",{\"1\":{\"699\":3}}],[\"testparsefloat\",{\"1\":{\"697\":1}}],[\"testpow\",{\"1\":{\"666\":3}}],[\"testpulling\",{\"1\":{\"588\":2}}],[\"testpushing\",{\"1\":{\"588\":2}}],[\"testcrossstructfieldvalidate\",{\"1\":{\"946\":1}}],[\"testcustomstructlevel\",{\"1\":{\"951\":1}}],[\"testcustomtypevalidate\",{\"1\":{\"950\":1}}],[\"testcustomvalidate\",{\"1\":{\"949\":1}}],[\"testcustomclaimsparse\",{\"1\":{\"784\":1}}],[\"testcustomclaims\",{\"1\":{\"781\":1}}],[\"testcut\",{\"1\":{\"708\":3}}],[\"testcube\",{\"1\":{\"668\":3}}],[\"testcount\",{\"1\":{\"707\":3}}],[\"testcontainsrune\",{\"1\":{\"706\":3}}],[\"testcontainsany\",{\"1\":{\"706\":3}}],[\"testcontains\",{\"1\":{\"706\":3}}],[\"testcompare\",{\"1\":{\"705\":3}}],[\"testcos\",{\"1\":{\"671\":3}}],[\"testclone\",{\"1\":{\"704\":3}}],[\"testceil\",{\"1\":{\"662\":3}}],[\"testcase\",{\"1\":{\"499\":3}}],[\"testcache\",{\"1\":{\"15\":1}}],[\"testtranslate\",{\"1\":{\"952\":2}}],[\"testtrim\",{\"1\":{\"718\":3}}],[\"testtrunc\",{\"1\":{\"660\":3}}],[\"testtan\",{\"1\":{\"672\":3}}],[\"testtoolparallel\",{\"1\":{\"523\":30}}],[\"testtool\",{\"1\":{\"523\":10}}],[\"testmap\",{\"1\":{\"713\":3,\"943\":1}}],[\"testmax\",{\"1\":{\"654\":3}}],[\"testmod\",{\"1\":{\"657\":3}}],[\"testmin\",{\"1\":{\"655\":3}}],[\"tested\",{\"1\":{\"904\":1}}],[\"testex\",{\"1\":{\"665\":3}}],[\"testequalfold\",{\"1\":{\"709\":3}}],[\"testequal\",{\"1\":{\"521\":12,\"522\":3,\"523\":4,\"524\":2}}],[\"testembedfiles\",{\"1\":{\"21\":1}}],[\"testembedpatterns\",{\"1\":{\"21\":2}}],[\"test或者是想要测试的包或者功能作为文件前缀\",{\"1\":{\"521\":1}}],[\"test的运行目录\",{\"1\":{\"519\":1}}],[\"testfilei18n\",{\"1\":{\"953\":1}}],[\"testfield\",{\"1\":{\"710\":3}}],[\"testformatcomplex\",{\"1\":{\"700\":3}}],[\"testformatfloat\",{\"1\":{\"698\":3}}],[\"testfloat\",{\"1\":{\"697\":2}}],[\"testfloor\",{\"1\":{\"658\":2,\"661\":3}}],[\"testflag命令自行查阅\",{\"1\":{\"519\":1}}],[\"testflag\",{\"1\":{\"38\":2}}],[\"testfunc命令\",{\"1\":{\"516\":1}}],[\"test命令默认运行所有的单元测试\",{\"1\":{\"518\":1}}],[\"test命令\",{\"1\":{\"518\":1}}],[\"test命令分两种模式\",{\"1\":{\"38\":1}}],[\"test命令是\",{\"1\":{\"38\":1}}],[\"test方式命名\",{\"1\":{\"38\":1}}],[\"test还支持下面几个参数\",{\"1\":{\"38\":1}}],[\"testslice\",{\"1\":{\"944\":1}}],[\"testslice1\",{\"1\":{\"944\":1}}],[\"testsplit\",{\"1\":{\"716\":3}}],[\"testsin\",{\"1\":{\"670\":3}}],[\"testsqrt\",{\"1\":{\"667\":3}}],[\"teststruct\",{\"1\":{\"573\":1,\"942\":1}}],[\"testsum\",{\"1\":{\"521\":12,\"522\":3,\"523\":4,\"547\":3}}],[\"testsfailed\",{\"1\":{\"107\":1}}],[\"tests\",{\"1\":{\"37\":1,\"117\":1}}],[\"testiota\",{\"1\":{\"693\":3}}],[\"testindex\",{\"1\":{\"712\":3}}],[\"testinf\",{\"1\":{\"659\":3}}],[\"testing包支持子测试\",{\"1\":{\"130\":1}}],[\"testing\",{\"1\":{\"55\":2,\"241\":2,\"496\":2,\"521\":15,\"522\":4,\"523\":8,\"524\":2,\"525\":3,\"527\":7,\"588\":4,\"616\":1,\"654\":1,\"655\":1,\"656\":1,\"657\":1,\"658\":1,\"659\":1,\"660\":1,\"661\":1,\"662\":1,\"663\":1,\"664\":1,\"665\":1,\"666\":1,\"667\":1,\"668\":1,\"669\":1,\"670\":1,\"671\":1,\"672\":1,\"692\":1,\"693\":1,\"694\":1,\"695\":1,\"696\":1,\"697\":1,\"698\":1,\"699\":1,\"700\":1,\"701\":1,\"704\":1,\"705\":1,\"706\":3,\"707\":1,\"708\":1,\"709\":1,\"710\":1,\"711\":1,\"712\":2,\"713\":1,\"714\":1,\"715\":2,\"716\":1,\"717\":1,\"718\":1,\"719\":1,\"720\":1,\"721\":1,\"779\":1,\"781\":1,\"782\":1,\"783\":1,\"784\":1,\"785\":1,\"791\":1,\"792\":1,\"793\":1,\"794\":1,\"834\":1,\"835\":1,\"840\":1,\"942\":2,\"943\":1,\"944\":2,\"945\":2,\"946\":1,\"948\":1,\"949\":1,\"950\":1,\"951\":1,\"952\":4,\"953\":1}}],[\"testinggoroutine\",{\"1\":{\"37\":1}}],[\"testify\",{\"1\":{\"28\":3,\"55\":2}}],[\"testimports\",{\"1\":{\"21\":1}}],[\"testgofiles\",{\"1\":{\"21\":4}}],[\"test产生的缓存\",{\"1\":{\"15\":1}}],[\"test2json\",{\"1\":{\"14\":2}}],[\"test\",{\"0\":{\"38\":1},\"1\":{\"2\":1,\"4\":3,\"7\":1,\"8\":1,\"15\":5,\"20\":1,\"21\":4,\"38\":28,\"44\":5,\"209\":3,\"232\":1,\"234\":1,\"422\":1,\"496\":2,\"497\":1,\"499\":6,\"504\":2,\"507\":1,\"516\":1,\"517\":4,\"518\":16,\"520\":5,\"521\":32,\"522\":9,\"523\":24,\"525\":8,\"526\":9,\"527\":23,\"718\":10,\"780\":1,\"824\":1,\"1002\":1,\"1128\":1,\"1132\":2}}],[\"text3\",{\"1\":{\"731\":1}}],[\"text2\",{\"1\":{\"730\":1,\"731\":1}}],[\"text1\",{\"1\":{\"730\":1,\"731\":1}}],[\"textmpl\",{\"1\":{\"723\":1}}],[\"text模板引擎包所定义的模板语法\",{\"1\":{\"21\":1}}],[\"text\",{\"1\":{\"9\":1,\"10\":1,\"45\":1,\"207\":2,\"208\":1,\"209\":5,\"346\":1,\"503\":2,\"509\":2,\"583\":1,\"584\":1,\"601\":2,\"722\":1,\"723\":2,\"730\":1,\"736\":1,\"1016\":2,\"1051\":1,\"1066\":1,\"1067\":1,\"1089\":1,\"1107\":1,\"1153\":1}}],[\"temporarily\",{\"1\":{\"1091\":1}}],[\"tempalte\",{\"1\":{\"734\":1}}],[\"template完全一致\",{\"1\":{\"736\":1}}],[\"template包\",{\"1\":{\"736\":1}}],[\"templatename\",{\"1\":{\"734\":1}}],[\"template关联起来\",{\"1\":{\"734\":1}}],[\"template都有一个funcsmap\",{\"1\":{\"728\":1}}],[\"template\",{\"0\":{\"722\":1},\"1\":{\"616\":1,\"722\":4,\"723\":9,\"725\":2,\"728\":5,\"733\":9,\"734\":12,\"735\":1,\"736\":8,\"980\":1,\"1016\":2}}],[\"temp\",{\"1\":{\"7\":1,\"13\":1,\"92\":3,\"166\":1,\"399\":2,\"479\":2,\"480\":2,\"481\":2,\"482\":2,\"629\":3,\"817\":2}}],[\"thursday\",{\"1\":{\"739\":1}}],[\"throwsplit\",{\"1\":{\"1097\":2}}],[\"throwtype\",{\"1\":{\"1087\":1}}],[\"throwing\",{\"1\":{\"1087\":2}}],[\"throw\",{\"1\":{\"1042\":3,\"1053\":1,\"1059\":2,\"1060\":1,\"1080\":1,\"1089\":2,\"1098\":1,\"1099\":1,\"1100\":1,\"1102\":1,\"1112\":2,\"1116\":1,\"1120\":1}}],[\"through\",{\"1\":{\"559\":2}}],[\"threshold\",{\"1\":{\"1025\":3}}],[\"three\",{\"1\":{\"585\":5}}],[\"thread\",{\"1\":{\"561\":1,\"1050\":1,\"1085\":1,\"1089\":1}}],[\"threadcreateprofile\",{\"1\":{\"556\":1}}],[\"threadcreate\",{\"1\":{\"556\":1,\"557\":1}}],[\"threads\",{\"1\":{\"499\":1}}],[\"though\",{\"1\":{\"520\":1}}],[\"thompson\",{\"1\":{\"87\":1}}],[\"third\",{\"1\":{\"201\":1,\"346\":2}}],[\"thing\",{\"1\":{\"69\":1,\"1120\":1}}],[\"thisg\",{\"1\":{\"1100\":3,\"1101\":2,\"1106\":1}}],[\"this\",{\"1\":{\"7\":2,\"16\":1,\"21\":13,\"108\":1,\"111\":1,\"112\":1,\"200\":1,\"209\":3,\"375\":5,\"376\":2,\"377\":2,\"378\":2,\"379\":4,\"503\":1,\"520\":1,\"536\":9,\"603\":1,\"715\":8,\"716\":8,\"718\":10,\"720\":2,\"723\":1,\"726\":2,\"1011\":2,\"1030\":2,\"1037\":1,\"1067\":1,\"1078\":3,\"1086\":2,\"1087\":1,\"1088\":1,\"1089\":2,\"1091\":1,\"1097\":2,\"1107\":1,\"1116\":1,\"1118\":1,\"1122\":1,\"1137\":1,\"1138\":2,\"1139\":4,\"1140\":2,\"1167\":1}}],[\"thank\",{\"1\":{\"904\":2}}],[\"than\",{\"1\":{\"17\":1,\"520\":1,\"578\":2,\"1030\":1,\"1132\":1,\"1138\":1}}],[\"that\",{\"1\":{\"4\":2,\"17\":1,\"21\":2,\"22\":1,\"31\":1,\"37\":1,\"38\":2,\"167\":1,\"375\":2,\"379\":4,\"520\":1,\"563\":2,\"582\":1,\"757\":1,\"817\":2,\"954\":1,\"1061\":1,\"1067\":2,\"1073\":1,\"1080\":1,\"1086\":2,\"1087\":1,\"1088\":1,\"1095\":1,\"1097\":3,\"1098\":1,\"1101\":1,\"1120\":1,\"1121\":1,\"1132\":3,\"1138\":2,\"1140\":2,\"1150\":1,\"1153\":1}}],[\"thebit\",{\"1\":{\"1125\":4}}],[\"them\",{\"1\":{\"1101\":1,\"1107\":1}}],[\"they\",{\"1\":{\"1061\":1}}],[\"these\",{\"1\":{\"7\":1,\"16\":1,\"1101\":1,\"1140\":2}}],[\"there\",{\"1\":{\"4\":1,\"167\":1,\"707\":2,\"1042\":1,\"1097\":2,\"1118\":1,\"1125\":1,\"1155\":1,\"1169\":1}}],[\"the\",{\"1\":{\"3\":11,\"4\":7,\"5\":2,\"7\":25,\"10\":2,\"14\":5,\"16\":2,\"17\":5,\"21\":7,\"22\":2,\"31\":1,\"34\":2,\"35\":2,\"37\":3,\"38\":5,\"88\":2,\"89\":1,\"104\":2,\"113\":2,\"116\":1,\"117\":1,\"156\":1,\"160\":1,\"165\":1,\"167\":4,\"168\":1,\"178\":1,\"206\":1,\"209\":3,\"219\":2,\"286\":1,\"288\":1,\"289\":1,\"290\":1,\"291\":1,\"416\":2,\"428\":2,\"503\":1,\"504\":4,\"520\":1,\"529\":1,\"531\":2,\"536\":6,\"559\":1,\"560\":1,\"563\":5,\"723\":2,\"778\":7,\"817\":3,\"823\":3,\"829\":1,\"848\":2,\"942\":1,\"943\":2,\"944\":4,\"945\":2,\"946\":2,\"948\":2,\"949\":1,\"950\":1,\"951\":2,\"977\":1,\"992\":1,\"1016\":1,\"1024\":2,\"1030\":7,\"1037\":1,\"1041\":1,\"1045\":1,\"1047\":3,\"1051\":1,\"1057\":2,\"1061\":1,\"1067\":3,\"1073\":3,\"1074\":1,\"1078\":1,\"1080\":6,\"1086\":2,\"1087\":1,\"1088\":1,\"1089\":1,\"1091\":2,\"1097\":6,\"1098\":1,\"1100\":2,\"1101\":11,\"1102\":1,\"1104\":1,\"1107\":1,\"1114\":1,\"1116\":3,\"1118\":2,\"1120\":9,\"1121\":4,\"1122\":2,\"1125\":1,\"1130\":1,\"1132\":4,\"1137\":1,\"1138\":7,\"1139\":5,\"1140\":6,\"1144\":4,\"1153\":1,\"1166\":4,\"1169\":2}}],[\"tolen\",{\"1\":{\"1026\":5}}],[\"tolowerspecial\",{\"1\":{\"717\":2}}],[\"tolower\",{\"1\":{\"717\":2}}],[\"toswaggerconfig\",{\"1\":{\"1016\":1}}],[\"tostring\",{\"1\":{\"809\":6}}],[\"tovalue\",{\"1\":{\"812\":2}}],[\"toint\",{\"1\":{\"809\":7}}],[\"tophash不相等\",{\"1\":{\"1038\":1}}],[\"tophash\",{\"1\":{\"1030\":4,\"1036\":6,\"1037\":4,\"1038\":8,\"1039\":11,\"1040\":2,\"1042\":9,\"1043\":1}}],[\"toptr\",{\"1\":{\"1026\":4}}],[\"top\",{\"1\":{\"559\":1,\"560\":2,\"1036\":2,\"1038\":3,\"1039\":1,\"1042\":7,\"1043\":2,\"1104\":1,\"1138\":1,\"1140\":2}}],[\"top命令只是简单的看个大概\",{\"1\":{\"559\":1}}],[\"topics\",{\"1\":{\"504\":1}}],[\"topgoer\",{\"1\":{\"101\":1}}],[\"todo\",{\"1\":{\"475\":3,\"829\":1,\"1007\":1}}],[\"todo来进行创建\",{\"1\":{\"475\":1}}],[\"tom\",{\"1\":{\"460\":3,\"617\":1,\"856\":3}}],[\"toml方式进行渲染\",{\"1\":{\"981\":1}}],[\"tomlbinding\",{\"1\":{\"971\":1}}],[\"toml\",{\"1\":{\"20\":1,\"63\":3,\"503\":2,\"509\":1,\"617\":1,\"788\":1,\"791\":1,\"798\":1,\"971\":1,\"981\":1}}],[\"totalutilizationgoal\",{\"1\":{\"1138\":4}}],[\"totalalloc\",{\"1\":{\"1128\":1}}],[\"totalgrowth\",{\"1\":{\"1122\":2}}],[\"totalsize\",{\"1\":{\"1095\":4}}],[\"total\",{\"1\":{\"212\":1,\"214\":1,\"215\":1,\"495\":1,\"499\":1,\"527\":11,\"559\":5,\"847\":6,\"914\":1,\"918\":1,\"919\":1,\"1057\":1}}],[\"token处理异常\",{\"1\":{\"783\":1}}],[\"token已经过期或者还没有生效\",{\"1\":{\"783\":1}}],[\"token合法\",{\"1\":{\"783\":2}}],[\"token\",{\"0\":{\"782\":1},\"1\":{\"209\":7,\"254\":2,\"255\":2,\"770\":1,\"775\":2,\"777\":1,\"778\":3,\"779\":3,\"780\":2,\"781\":2,\"782\":8,\"783\":6,\"784\":6,\"785\":7,\"1004\":1,\"1015\":1}}],[\"tokenstring\",{\"1\":{\"782\":2,\"783\":2,\"784\":2}}],[\"tokens\",{\"1\":{\"209\":1,\"770\":1}}],[\"to=<none>\",{\"1\":{\"141\":1}}],[\"toupperspecial\",{\"1\":{\"717\":2}}],[\"toupper\",{\"1\":{\"114\":1,\"587\":1,\"717\":2}}],[\"toomanyoverflowbuckets\",{\"1\":{\"1041\":3}}],[\"too\",{\"1\":{\"7\":1,\"552\":1,\"995\":1,\"1041\":1,\"1053\":1,\"1083\":1,\"1107\":1,\"1112\":1,\"1138\":1}}],[\"toolbox\",{\"1\":{\"94\":2}}],[\"tool目录下\",{\"1\":{\"14\":1}}],[\"tool目录下寻找\",{\"1\":{\"7\":1}}],[\"tool可以直接调用这些工具\",{\"1\":{\"14\":1}}],[\"tool命令本身没有任何功能\",{\"1\":{\"14\":1}}],[\"tool命令会在$goroot\",{\"1\":{\"7\":1}}],[\"toolexec\",{\"1\":{\"8\":2}}],[\"toolchain=name\",{\"1\":{\"34\":1}}],[\"toolchain\",{\"1\":{\"7\":1,\"18\":2,\"34\":1}}],[\"toolchains\",{\"1\":{\"7\":1,\"117\":1}}],[\"tools\",{\"1\":{\"6\":1,\"7\":1,\"16\":1,\"22\":1,\"31\":1,\"34\":1,\"37\":2,\"410\":1}}],[\"tool\",{\"0\":{\"14\":1},\"1\":{\"2\":1,\"4\":1,\"7\":5,\"14\":9,\"15\":2,\"16\":4,\"21\":4,\"37\":5,\"521\":30,\"522\":7,\"523\":47,\"524\":2,\"525\":12,\"526\":7,\"527\":23,\"558\":1,\"559\":2,\"560\":4,\"561\":3,\"1038\":1}}],[\"to\",{\"1\":{\"3\":1,\"4\":8,\"7\":8,\"9\":1,\"10\":1,\"16\":6,\"17\":7,\"18\":2,\"21\":9,\"22\":3,\"25\":1,\"31\":3,\"33\":1,\"35\":1,\"38\":2,\"93\":1,\"114\":1,\"140\":2,\"143\":1,\"144\":1,\"158\":19,\"159\":25,\"160\":2,\"167\":1,\"188\":1,\"218\":1,\"375\":1,\"382\":1,\"469\":1,\"496\":1,\"499\":2,\"503\":2,\"504\":2,\"520\":4,\"527\":8,\"535\":1,\"536\":11,\"550\":2,\"551\":2,\"552\":2,\"553\":4,\"559\":1,\"560\":1,\"563\":2,\"578\":2,\"582\":1,\"604\":1,\"717\":4,\"792\":3,\"806\":2,\"810\":2,\"817\":5,\"826\":1,\"838\":3,\"848\":2,\"849\":2,\"961\":1,\"966\":1,\"1016\":2,\"1030\":1,\"1037\":5,\"1038\":1,\"1042\":2,\"1047\":1,\"1054\":1,\"1057\":1,\"1060\":2,\"1061\":1,\"1067\":3,\"1073\":2,\"1074\":1,\"1078\":9,\"1080\":1,\"1086\":5,\"1088\":2,\"1089\":4,\"1091\":1,\"1097\":6,\"1100\":1,\"1101\":3,\"1107\":3,\"1111\":1,\"1112\":1,\"1114\":3,\"1116\":1,\"1117\":2,\"1118\":1,\"1120\":2,\"1121\":3,\"1122\":2,\"1125\":3,\"1132\":3,\"1137\":1,\"1138\":8,\"1139\":1,\"1140\":2,\"1155\":2,\"1169\":1}}],[\"包实现了简单的日志\",{\"1\":{\"647\":1}}],[\"包提供了开箱即用的反向代理功能\",{\"1\":{\"646\":1}}],[\"包提供了两个函数来方便构造\",{\"1\":{\"163\":1}}],[\"包下的函数就可以发起简单的请求\",{\"1\":{\"638\":1}}],[\"包下包含default\",{\"1\":{\"116\":1}}],[\"包做的封装与修改\",{\"1\":{\"637\":1}}],[\"包裹原始错误\",{\"1\":{\"603\":2}}],[\"包裹了一下就成了\",{\"1\":{\"539\":1}}],[\"包应该是再熟悉不过的概念了\",{\"1\":{\"505\":1}}],[\"包中的各个实现关系如下图所示\",{\"1\":{\"475\":1}}],[\"包含了对\",{\"1\":{\"1033\":1}}],[\"包含字母a\",{\"1\":{\"945\":1}}],[\"包含字符串\",{\"0\":{\"706\":1}}],[\"包含有并发\",{\"1\":{\"924\":1}}],[\"包含\",{\"1\":{\"428\":1}}],[\"包为内部包\",{\"1\":{\"296\":1}}],[\"包的命名风格建议都是小写字母\",{\"1\":{\"293\":1}}],[\"包内共享所有变量\",{\"1\":{\"293\":1}}],[\"包其实就是一个文件夹\",{\"1\":{\"293\":1}}],[\"包来解决这类问题\",{\"1\":{\"167\":1}}],[\"包装多个\",{\"1\":{\"117\":1}}],[\"包装的支持\",{\"1\":{\"117\":1}}],[\"包名\",{\"1\":{\"40\":1,\"448\":1,\"451\":1}}],[\"包名必须携带版本号\",{\"1\":{\"19\":1}}],[\"包括所有的关联关系\",{\"1\":{\"899\":1}}],[\"包括已释放\",{\"1\":{\"560\":2}}],[\"包括哈希文件\",{\"1\":{\"507\":1}}],[\"包括换行和缩进\",{\"1\":{\"374\":1}}],[\"包括安装\",{\"1\":{\"286\":1}}],[\"包括\",{\"1\":{\"8\":1}}],[\"包\",{\"0\":{\"293\":1},\"1\":{\"2\":1,\"14\":1,\"64\":1,\"82\":1,\"138\":2,\"160\":1,\"295\":4,\"637\":1,\"690\":1,\"702\":1}}],[\"gqueue\",{\"1\":{\"1088\":1}}],[\"g0的sched字段中\",{\"1\":{\"1092\":1}}],[\"g0\",{\"1\":{\"1087\":2,\"1089\":2,\"1091\":1,\"1092\":1}}],[\"gdead变为\",{\"1\":{\"1095\":1}}],[\"gdead\",{\"1\":{\"1086\":1,\"1088\":1,\"1095\":5,\"1096\":3,\"1100\":2}}],[\"gdb\",{\"1\":{\"8\":1}}],[\"g结构体的指针\",{\"1\":{\"1089\":1}}],[\"g结构体\",{\"1\":{\"1086\":1}}],[\"gsignalstack\",{\"1\":{\"1087\":1}}],[\"gsignal\",{\"1\":{\"1087\":2,\"1089\":3}}],[\"gscanstatus\",{\"1\":{\"1107\":1}}],[\"gscanrunning\",{\"1\":{\"1098\":1,\"1101\":1,\"1107\":1}}],[\"gscan\",{\"1\":{\"1086\":1,\"1102\":1}}],[\"gsyscall切换为\",{\"1\":{\"1097\":1}}],[\"gsyscall状态切换为\",{\"1\":{\"1097\":1}}],[\"gsyscall\",{\"1\":{\"1086\":1,\"1097\":5,\"1102\":2}}],[\"gs\",{\"1\":{\"1061\":1,\"1138\":1}}],[\"glist\",{\"1\":{\"1061\":6,\"1088\":1,\"1132\":1}}],[\"glog\",{\"1\":{\"54\":2}}],[\"globrunqget\",{\"1\":{\"1104\":1}}],[\"globrunqput\",{\"1\":{\"1097\":1,\"1106\":1}}],[\"globalmiddleware\",{\"1\":{\"993\":2,\"994\":1,\"995\":2,\"996\":1}}],[\"globaloptions\",{\"1\":{\"958\":1}}],[\"globaloptionshandler\",{\"1\":{\"958\":1}}],[\"global\",{\"1\":{\"840\":2,\"1088\":1,\"1104\":1}}],[\"glob\",{\"1\":{\"41\":1}}],[\"gwaiting时\",{\"1\":{\"1102\":1}}],[\"gwaiting\",{\"1\":{\"1086\":1,\"1098\":4,\"1102\":1,\"1104\":1,\"1138\":1}}],[\"gwaitting状态\",{\"1\":{\"1066\":1}}],[\"gwaitting状态直到再次被接收方唤醒\",{\"1\":{\"1059\":1}}],[\"gwwaiting状态\",{\"1\":{\"1060\":1}}],[\"gws\",{\"1\":{\"612\":1}}],[\"g参数指定文件名\",{\"1\":{\"1017\":1}}],[\"gmp\",{\"0\":{\"1083\":1},\"1\":{\"1083\":2,\"1085\":2}}],[\"gmt\",{\"1\":{\"965\":1,\"986\":2}}],[\"gmap2\",{\"1\":{\"572\":1}}],[\"gmap1\",{\"1\":{\"572\":1}}],[\"g2\",{\"1\":{\"766\":4}}],[\"g2beysu+wfnoycgxfelmcg==\",{\"1\":{\"45\":5}}],[\"g通常为如下格式\",{\"1\":{\"765\":1}}],[\"g指group\",{\"1\":{\"765\":1}}],[\"gtfield\",{\"1\":{\"931\":1}}],[\"gte=19\",{\"1\":{\"945\":1}}],[\"gte=18\",{\"1\":{\"930\":1,\"942\":1,\"943\":1,\"952\":3}}],[\"gte\",{\"1\":{\"935\":1,\"942\":3,\"943\":1,\"944\":1,\"945\":1}}],[\"gtefield\",{\"1\":{\"931\":1}}],[\"gtecsfield\",{\"1\":{\"931\":1}}],[\"gtcsfield\",{\"1\":{\"931\":1}}],[\"gt\",{\"1\":{\"720\":3,\"728\":2,\"935\":1}}],[\"g的情况是表示最大有效位数\",{\"1\":{\"698\":1}}],[\"g\",{\"0\":{\"1086\":1},\"1\":{\"153\":1,\"265\":1,\"341\":2,\"416\":1,\"573\":1,\"698\":4,\"700\":1,\"710\":4,\"712\":1,\"765\":9,\"766\":3,\"767\":5,\"1016\":1,\"1017\":2,\"1059\":2,\"1060\":2,\"1061\":2,\"1067\":3,\"1073\":4,\"1074\":1,\"1078\":1,\"1080\":2,\"1083\":1,\"1085\":2,\"1086\":7,\"1087\":4,\"1088\":6,\"1089\":5,\"1090\":1,\"1095\":8,\"1096\":4,\"1097\":18,\"1098\":9,\"1100\":1,\"1101\":5,\"1102\":3,\"1104\":26,\"1105\":6,\"1106\":5,\"1107\":7,\"1132\":1,\"1138\":7,\"1139\":8,\"1167\":1}}],[\"gpreempted\",{\"1\":{\"1086\":1}}],[\"gprc\",{\"0\":{\"146\":1},\"1\":{\"162\":1}}],[\"gp\",{\"1\":{\"1059\":11,\"1060\":12,\"1061\":7,\"1067\":14,\"1074\":3,\"1075\":3,\"1079\":6,\"1080\":20,\"1089\":34,\"1091\":3,\"1093\":8,\"1095\":2,\"1096\":16,\"1097\":35,\"1098\":11,\"1101\":19,\"1102\":13,\"1104\":23,\"1106\":10,\"1107\":15,\"1120\":1,\"1137\":1,\"1138\":11,\"1139\":12,\"1145\":1}}],[\"gpg\",{\"1\":{\"140\":4}}],[\"gb\",{\"1\":{\"136\":1,\"820\":2}}],[\"gzip\",{\"1\":{\"963\":1}}],[\"gz\",{\"1\":{\"91\":3}}],[\"gfput\",{\"1\":{\"1096\":2}}],[\"gfget\",{\"1\":{\"1095\":1,\"1100\":1}}],[\"gfree\",{\"1\":{\"1088\":2}}],[\"gfdecba\",{\"1\":{\"706\":1}}],[\"gf\",{\"1\":{\"83\":1}}],[\"gg是一个比较老牌的二维的图形渲染引擎\",{\"1\":{\"831\":1}}],[\"gg\",{\"0\":{\"831\":1},\"1\":{\"76\":2,\"265\":1,\"831\":5,\"832\":1,\"833\":2,\"834\":2,\"835\":2}}],[\"gathering\",{\"1\":{\"527\":6}}],[\"gateway\",{\"1\":{\"178\":1}}],[\"game\",{\"1\":{\"72\":2}}],[\"garbage\",{\"1\":{\"4\":2,\"561\":1,\"1086\":2,\"1089\":1,\"1097\":1,\"1130\":1}}],[\"g3n\",{\"1\":{\"72\":2}}],[\"guard\",{\"1\":{\"1097\":1}}],[\"guaranteed\",{\"1\":{\"1138\":1}}],[\"guarantee\",{\"1\":{\"37\":1}}],[\"guestnice\",{\"1\":{\"912\":8}}],[\"guest\",{\"1\":{\"912\":8}}],[\"guintptr\",{\"1\":{\"1086\":1,\"1088\":4,\"1089\":1,\"1095\":1}}],[\"guides\",{\"1\":{\"146\":1}}],[\"guided\",{\"1\":{\"116\":1,\"117\":1}}],[\"guide\",{\"1\":{\"116\":1,\"821\":1}}],[\"gui\",{\"0\":{\"73\":1},\"1\":{\"73\":1,\"138\":1}}],[\"gun\",{\"1\":{\"64\":1}}],[\"gjson\",{\"1\":{\"63\":2}}],[\"grunnbale\",{\"1\":{\"1106\":1}}],[\"grunning切换为\",{\"1\":{\"1101\":1}}],[\"grunning状态\",{\"1\":{\"1097\":1}}],[\"grunning变为\",{\"1\":{\"1097\":1}}],[\"grunning变化为\",{\"1\":{\"1096\":1}}],[\"grunning\",{\"1\":{\"1086\":1,\"1096\":1,\"1097\":4,\"1098\":2,\"1101\":4,\"1104\":2,\"1106\":1,\"1107\":3}}],[\"grunnable变为\",{\"1\":{\"1097\":1,\"1098\":1}}],[\"grunnable\",{\"1\":{\"1086\":1,\"1095\":3,\"1097\":2,\"1098\":2,\"1102\":2,\"1104\":2,\"1106\":1,\"1138\":1}}],[\"grunnable状态\",{\"1\":{\"1059\":1,\"1060\":1,\"1097\":1}}],[\"grey表示的就是当前协程栈还未被扫描过\",{\"1\":{\"1144\":1}}],[\"grey\",{\"1\":{\"1144\":2}}],[\"greyobject\",{\"1\":{\"1137\":1}}],[\"grew\",{\"1\":{\"1120\":1}}],[\"greater\",{\"1\":{\"578\":1}}],[\"grep\",{\"1\":{\"503\":1,\"530\":1}}],[\"grab\",{\"1\":{\"1120\":1,\"1153\":1}}],[\"grafana\",{\"1\":{\"817\":5}}],[\"gradle\",{\"1\":{\"492\":1}}],[\"graphics\",{\"1\":{\"831\":1}}],[\"graph了解更多\",{\"1\":{\"560\":1}}],[\"graph命令会输出当前项目下的依赖图\",{\"1\":{\"27\":1}}],[\"graph\",{\"0\":{\"27\":1},\"1\":{\"22\":3,\"27\":3,\"506\":1,\"559\":4,\"560\":2}}],[\"griesemer\",{\"1\":{\"87\":1}}],[\"grow方法\",{\"1\":{\"1122\":1}}],[\"grow方法向mheap申请分配一个新的mspan\",{\"1\":{\"1117\":1}}],[\"grow来进行扩容\",{\"1\":{\"1120\":1,\"1125\":1}}],[\"growth\",{\"1\":{\"1120\":1}}],[\"growwork\",{\"1\":{\"1042\":3}}],[\"growwork函数完成的\",{\"1\":{\"1042\":1}}],[\"growing方法来完成\",{\"1\":{\"1042\":1}}],[\"growing\",{\"1\":{\"1030\":1,\"1041\":2,\"1042\":3}}],[\"growslice函数来完成\",{\"1\":{\"1025\":1}}],[\"growslice\",{\"1\":{\"1024\":4,\"1025\":3}}],[\"grow函数就是一个闭包函数\",{\"1\":{\"399\":1}}],[\"grow函数引用了exp函数的两个变量\",{\"1\":{\"399\":1}}],[\"grow\",{\"1\":{\"399\":2,\"1097\":1,\"1117\":2,\"1120\":1,\"1122\":2,\"1125\":1}}],[\"group和having方法多用于分组操作\",{\"1\":{\"878\":1}}],[\"group角色的资源进行写操作\",{\"1\":{\"766\":1}}],[\"group\",{\"0\":{\"878\":1},\"1\":{\"389\":3,\"766\":8,\"878\":3,\"988\":4,\"989\":2,\"990\":2,\"993\":2,\"994\":2,\"995\":1,\"996\":2,\"999\":3}}],[\"gron\",{\"1\":{\"66\":2}}],[\"grom\",{\"1\":{\"52\":1}}],[\"grpc将调用resolvenow来尝试再次解析目标名称\",{\"1\":{\"174\":1}}],[\"grpcserver\",{\"1\":{\"153\":3}}],[\"grpc\",{\"1\":{\"6\":1,\"141\":4,\"145\":24,\"146\":6,\"147\":6,\"148\":6,\"150\":1,\"152\":3,\"153\":4,\"154\":6,\"155\":3,\"156\":1,\"157\":1,\"158\":12,\"159\":9,\"160\":5,\"163\":2,\"164\":5,\"165\":16,\"166\":41,\"167\":6,\"168\":5,\"169\":3,\"170\":14,\"171\":2,\"174\":13,\"175\":19,\"180\":1,\"200\":5,\"201\":10,\"406\":1}}],[\"gnu\",{\"1\":{\"8\":1,\"10\":1}}],[\"give\",{\"1\":{\"1138\":1}}],[\"given\",{\"1\":{\"3\":2,\"1030\":1}}],[\"gidle变为\",{\"1\":{\"1095\":1}}],[\"gidle\",{\"1\":{\"1086\":1,\"1095\":1,\"1100\":1}}],[\"girl\",{\"1\":{\"707\":2,\"985\":1}}],[\"gim\",{\"1\":{\"611\":1}}],[\"gif\",{\"1\":{\"559\":1}}],[\"giongto35\",{\"1\":{\"72\":1}}],[\"ginswagger\",{\"1\":{\"1011\":2,\"1016\":3}}],[\"gin中其实还内置了许多了快速响应的方法例如\",{\"1\":{\"981\":1}}],[\"gin中的参数解析总共支持三种方式\",{\"1\":{\"967\":1}}],[\"gin内置的校验工具其实是github\",{\"1\":{\"976\":1}}],[\"gin也是如此\",{\"1\":{\"955\":1}}],[\"gin框架的标准默认验证组件\",{\"1\":{\"927\":1}}],[\"gin两个引用的是同一个依赖但是本地存放的路径不同\",{\"1\":{\"509\":1}}],[\"gin和go\",{\"1\":{\"509\":1}}],[\"ginkgo\",{\"1\":{\"55\":2}}],[\"gin\",{\"0\":{\"961\":1},\"1\":{\"19\":12,\"51\":3,\"164\":1,\"503\":33,\"509\":11,\"610\":3,\"954\":1,\"961\":7,\"962\":4,\"963\":4,\"964\":5,\"965\":5,\"966\":2,\"968\":5,\"969\":4,\"970\":5,\"971\":5,\"975\":1,\"977\":3,\"978\":1,\"979\":1,\"980\":3,\"982\":8,\"983\":1,\"984\":3,\"985\":2,\"986\":4,\"988\":6,\"989\":3,\"990\":5,\"991\":4,\"992\":6,\"993\":5,\"994\":2,\"995\":8,\"996\":3,\"998\":3,\"999\":2,\"1000\":3,\"1002\":6,\"1003\":7,\"1004\":1,\"1005\":3,\"1006\":1,\"1007\":11,\"1008\":9,\"1009\":3,\"1010\":3,\"1011\":12,\"1016\":2}}],[\"gitub\",{\"1\":{\"509\":1}}],[\"gitbash\",{\"1\":{\"201\":1}}],[\"gitlab\",{\"1\":{\"62\":1}}],[\"gitea\",{\"1\":{\"52\":1}}],[\"git\",{\"1\":{\"7\":2,\"10\":2,\"13\":1,\"18\":4,\"82\":1,\"493\":1,\"495\":3,\"499\":12,\"817\":3,\"923\":2}}],[\"git|hg\",{\"1\":{\"7\":2,\"18\":1}}],[\"github\",{\"1\":{\"6\":4,\"7\":20,\"18\":1,\"19\":20,\"20\":11,\"23\":4,\"24\":17,\"26\":3,\"27\":14,\"28\":14,\"51\":10,\"52\":6,\"53\":10,\"54\":6,\"55\":8,\"56\":9,\"57\":4,\"58\":9,\"59\":4,\"60\":6,\"61\":6,\"62\":17,\"63\":9,\"64\":8,\"65\":6,\"66\":6,\"67\":4,\"68\":2,\"69\":2,\"70\":3,\"71\":11,\"72\":7,\"73\":2,\"74\":2,\"75\":8,\"76\":4,\"77\":1,\"78\":2,\"79\":1,\"80\":1,\"81\":8,\"82\":2,\"83\":1,\"84\":3,\"85\":1,\"88\":2,\"95\":2,\"99\":1,\"104\":1,\"112\":1,\"116\":1,\"145\":3,\"147\":1,\"148\":1,\"156\":2,\"158\":1,\"159\":2,\"168\":1,\"178\":1,\"194\":1,\"198\":1,\"200\":1,\"204\":2,\"219\":2,\"222\":1,\"223\":1,\"226\":1,\"227\":1,\"228\":1,\"229\":1,\"231\":2,\"239\":1,\"240\":2,\"241\":1,\"493\":1,\"495\":5,\"496\":2,\"497\":1,\"498\":3,\"499\":2,\"500\":5,\"503\":42,\"504\":12,\"507\":2,\"509\":26,\"510\":5,\"512\":2,\"513\":3,\"515\":1,\"558\":1,\"579\":1,\"603\":2,\"615\":1,\"621\":1,\"629\":2,\"681\":2,\"757\":1,\"776\":4,\"786\":2,\"787\":1,\"801\":1,\"802\":2,\"804\":1,\"805\":2,\"806\":2,\"808\":1,\"810\":2,\"811\":1,\"814\":1,\"818\":2,\"819\":1,\"820\":1,\"821\":2,\"822\":2,\"823\":3,\"824\":3,\"831\":3,\"832\":1,\"833\":1,\"836\":1,\"841\":1,\"844\":2,\"846\":1,\"847\":1,\"848\":1,\"904\":2,\"905\":1,\"923\":2,\"926\":4,\"928\":1,\"929\":1,\"942\":1,\"952\":10,\"953\":1,\"954\":1,\"955\":1,\"956\":1,\"957\":1,\"960\":1,\"961\":1,\"964\":2,\"965\":1,\"966\":1,\"968\":1,\"969\":1,\"970\":1,\"971\":1,\"982\":2,\"995\":2,\"1002\":1,\"1003\":2,\"1009\":2,\"1010\":4,\"1011\":4,\"1050\":1,\"1052\":1}}],[\"gcflushbgcredit\",{\"1\":{\"1139\":1}}],[\"gcflags即编译器gc的参数\",{\"1\":{\"550\":1}}],[\"gcflags=\",{\"1\":{\"9\":2,\"550\":2,\"551\":1,\"552\":1,\"553\":2}}],[\"gcflags\",{\"0\":{\"9\":1},\"1\":{\"8\":1,\"9\":1}}],[\"gcassistalloc1\",{\"1\":{\"1139\":1}}],[\"gcassistalloc\",{\"1\":{\"1139\":2}}],[\"gcassistbytes\",{\"1\":{\"1139\":10}}],[\"gcbackgroundutilization\",{\"1\":{\"1138\":1}}],[\"gcblackenenabled\",{\"1\":{\"1138\":2,\"1139\":1,\"1140\":1}}],[\"gcbgmarkworkernode\",{\"1\":{\"1138\":3}}],[\"gcbgmarkworkernode结构体\",{\"1\":{\"1138\":1}}],[\"gcbgmarkworkerpool\",{\"1\":{\"1138\":3}}],[\"gcbgmarkworker\",{\"1\":{\"1138\":2}}],[\"gcbgmarkworkercount++\",{\"1\":{\"1138\":1}}],[\"gcbgmarkworkercount\",{\"1\":{\"1138\":1}}],[\"gcbgmarkworker函数\",{\"1\":{\"1138\":1}}],[\"gcbgmarkstartworkers\",{\"1\":{\"1138\":1}}],[\"gcbgmarkstartworkers来进行任务的分配\",{\"1\":{\"1138\":1}}],[\"gcdrainn\",{\"1\":{\"1139\":2}}],[\"gcdrainflags\",{\"1\":{\"1137\":1,\"1145\":1}}],[\"gcdrain\",{\"1\":{\"1137\":1,\"1145\":1}}],[\"gcdrain函数\",{\"1\":{\"1137\":1}}],[\"gcphase\",{\"1\":{\"1140\":1}}],[\"gcphase的状态为\",{\"1\":{\"1137\":1}}],[\"gcphase用于表示\",{\"1\":{\"1137\":1}}],[\"gcmarkdone\",{\"1\":{\"1145\":1}}],[\"gcmarkdoneflushed\",{\"1\":{\"1140\":3}}],[\"gcmarkdone函数来完成\",{\"1\":{\"1140\":1}}],[\"gcmark状态过渡到\",{\"1\":{\"1140\":1}}],[\"gcmarkworkerfractionalmode\",{\"1\":{\"1138\":1}}],[\"gcmarkworkerdedicatedmode\",{\"1\":{\"1138\":1}}],[\"gcmarkworkernotworker\",{\"1\":{\"1138\":1}}],[\"gcmarkworkeridlemode\",{\"1\":{\"1138\":2}}],[\"gcmarkworkermode\",{\"1\":{\"1138\":1}}],[\"gcmarkworkavailable\",{\"1\":{\"1138\":1,\"1140\":1}}],[\"gcmarktermination状态\",{\"1\":{\"1140\":1}}],[\"gcmarktermination\",{\"1\":{\"1137\":1,\"1140\":1}}],[\"gcmark\",{\"1\":{\"1137\":2,\"1140\":1}}],[\"gcmiscsys\",{\"1\":{\"1119\":1,\"1122\":1}}],[\"gcoverassistwork\",{\"1\":{\"1139\":2}}],[\"gcoff\",{\"1\":{\"1137\":1}}],[\"gcopystack切换为\",{\"1\":{\"1101\":1}}],[\"gcopystack是协程栈扩张时具有的状态\",{\"1\":{\"1094\":1}}],[\"gcopystack\",{\"1\":{\"1086\":1,\"1101\":4}}],[\"gc函数\",{\"1\":{\"1132\":1}}],[\"gctriggerheap\",{\"1\":{\"1132\":3}}],[\"gctriggercycle\",{\"1\":{\"1132\":4}}],[\"gctriggertime\",{\"1\":{\"1132\":5}}],[\"gctriggerkind\",{\"1\":{\"1132\":2}}],[\"gctrigger结构体\",{\"1\":{\"1132\":1}}],[\"gctrigger\",{\"1\":{\"1132\":7,\"1138\":1}}],[\"gcsweepdone\",{\"1\":{\"1148\":1}}],[\"gcsweepstart\",{\"1\":{\"1148\":1}}],[\"gcsweep函数清理垃圾对象\",{\"1\":{\"1140\":1}}],[\"gcstart函数来开启\",{\"1\":{\"1132\":1}}],[\"gcstart\",{\"1\":{\"1132\":4}}],[\"gcsys\",{\"1\":{\"1128\":1}}],[\"gc相关的统计\",{\"1\":{\"1128\":1}}],[\"gcwakeallassists\",{\"1\":{\"1140\":1}}],[\"gcwaiting\",{\"1\":{\"1137\":1,\"1145\":1}}],[\"gcw`字段\",{\"1\":{\"1137\":1}}],[\"gcwork是一个采用了生产者\",{\"1\":{\"1137\":1}}],[\"gcwork参数是一个缓冲池\",{\"1\":{\"1137\":1}}],[\"gcwork\",{\"1\":{\"1102\":1,\"1137\":2,\"1140\":1,\"1145\":1}}],[\"gcw\",{\"1\":{\"1102\":1,\"1137\":11,\"1139\":3,\"1140\":3,\"1145\":7}}],[\"gc++lang\",{\"1\":{\"715\":1}}],[\"gclinkptr\",{\"1\":{\"1100\":1,\"1125\":4}}],[\"gclang\",{\"1\":{\"715\":1}}],[\"gclocals\",{\"1\":{\"9\":2,\"45\":5}}],[\"gce\",{\"1\":{\"141\":1}}],[\"gcinit\",{\"1\":{\"114\":5}}],[\"gccpulimiter\",{\"1\":{\"1131\":1,\"1140\":1}}],[\"gccpufraction\",{\"1\":{\"1128\":1}}],[\"gccontrollerstate\",{\"1\":{\"1138\":1}}],[\"gccontroller全局变量\",{\"1\":{\"1131\":1}}],[\"gccontroller\",{\"1\":{\"1122\":1,\"1138\":5,\"1139\":9,\"1140\":1}}],[\"gccgoflags\",{\"1\":{\"8\":1}}],[\"gccgo或者gc\",{\"1\":{\"8\":1}}],[\"gccgo\",{\"1\":{\"7\":2,\"8\":2}}],[\"gcc\",{\"1\":{\"7\":1,\"8\":1,\"537\":1,\"545\":3,\"546\":1}}],[\"gc\",{\"0\":{\"1130\":1},\"1\":{\"4\":3,\"8\":5,\"9\":1,\"88\":3,\"117\":1,\"127\":1,\"129\":1,\"130\":1,\"390\":1,\"485\":4,\"529\":1,\"533\":1,\"543\":1,\"553\":3,\"561\":1,\"751\":2,\"1042\":1,\"1043\":1,\"1053\":1,\"1058\":1,\"1067\":1,\"1083\":1,\"1086\":10,\"1088\":1,\"1093\":1,\"1095\":1,\"1097\":2,\"1100\":1,\"1101\":1,\"1102\":1,\"1107\":1,\"1109\":1,\"1128\":1,\"1129\":1,\"1130\":5,\"1132\":10,\"1133\":1,\"1137\":2,\"1138\":8,\"1139\":4,\"1140\":1,\"1148\":1}}],[\"ge\",{\"1\":{\"728\":2}}],[\"gev\",{\"1\":{\"612\":1}}],[\"gerrand\",{\"1\":{\"598\":1}}],[\"geomean\",{\"1\":{\"526\":3}}],[\"geoip2\",{\"1\":{\"68\":2}}],[\"gentraceback\",{\"1\":{\"1101\":1}}],[\"gentleman\",{\"1\":{\"70\":2}}],[\"gender\",{\"1\":{\"629\":6}}],[\"genericity\",{\"1\":{\"579\":1}}],[\"generictype\",{\"1\":{\"573\":2}}],[\"genericstruct\",{\"1\":{\"572\":3,\"573\":2}}],[\"genericslice\",{\"1\":{\"572\":2}}],[\"genericmap\",{\"1\":{\"572\":3}}],[\"generating\",{\"1\":{\"559\":1}}],[\"generates\",{\"1\":{\"1080\":1}}],[\"generate上方最合适不过\",{\"1\":{\"1016\":1}}],[\"generate就可以再次生成\",{\"1\":{\"823\":1}}],[\"generatedtime\",{\"1\":{\"1016\":1}}],[\"generated\",{\"1\":{\"823\":2,\"824\":1}}],[\"generatekey\",{\"1\":{\"785\":1}}],[\"generate指令可以用于执行任何命令\",{\"1\":{\"40\":1}}],[\"generate指令与其它指令不同\",{\"1\":{\"40\":1}}],[\"generate指令顾名思义就是跟生成有关的\",{\"1\":{\"40\":1}}],[\"generate指令\",{\"1\":{\"39\":1}}],[\"generate\",{\"0\":{\"40\":1},\"1\":{\"2\":1,\"4\":1,\"40\":9,\"156\":1,\"158\":1,\"160\":1,\"504\":1,\"823\":1,\"824\":1,\"1009\":2,\"1016\":2}}],[\"general\",{\"1\":{\"7\":1,\"563\":1}}],[\"genproto\",{\"1\":{\"168\":1}}],[\"gen2brain\",{\"1\":{\"65\":1}}],[\"genuineintel\",{\"1\":{\"909\":1}}],[\"genuine\",{\"1\":{\"37\":1}}],[\"gen\",{\"1\":{\"6\":4,\"148\":6,\"156\":1,\"158\":1,\"159\":1,\"164\":1,\"200\":6,\"201\":2,\"525\":1,\"526\":3,\"588\":1,\"823\":1,\"824\":1}}],[\"getargp\",{\"1\":{\"1079\":1}}],[\"getcallersp\",{\"1\":{\"1074\":1,\"1075\":1,\"1079\":1,\"1089\":1}}],[\"getcallerpc\",{\"1\":{\"1059\":1,\"1066\":1,\"1074\":1,\"1079\":1,\"1089\":1,\"1095\":1}}],[\"getg函数由汇编实现\",{\"1\":{\"1089\":1}}],[\"getg\",{\"1\":{\"1059\":1,\"1060\":1,\"1067\":1,\"1074\":1,\"1075\":1,\"1079\":1,\"1080\":1,\"1082\":1,\"1089\":5,\"1091\":2,\"1092\":1,\"1093\":2,\"1095\":2,\"1096\":1,\"1097\":3,\"1098\":2,\"1101\":1,\"1104\":2,\"1107\":1,\"1120\":2,\"1121\":1,\"1139\":2,\"1153\":1,\"1167\":1}}],[\"getindexes\",{\"1\":{\"863\":1}}],[\"getintslice\",{\"1\":{\"791\":1}}],[\"getint\",{\"1\":{\"791\":1,\"794\":1}}],[\"getinsecure\",{\"1\":{\"18\":1}}],[\"getbool\",{\"1\":{\"791\":1}}],[\"getperson函数中创建了mom变量\",{\"1\":{\"550\":1}}],[\"getperson\",{\"1\":{\"550\":2}}],[\"getpersoninfotream\",{\"1\":{\"166\":4,\"167\":2}}],[\"getpersoninfo\",{\"1\":{\"164\":2,\"166\":6,\"167\":1,\"168\":2,\"171\":1}}],[\"getstringslice\",{\"1\":{\"791\":1}}],[\"getstringmapstring\",{\"1\":{\"791\":1}}],[\"getstringmap\",{\"1\":{\"791\":1}}],[\"getstring\",{\"1\":{\"791\":1}}],[\"gets\",{\"1\":{\"520\":1}}],[\"get引用库\",{\"1\":{\"500\":1}}],[\"get枚举项的别名\",{\"1\":{\"190\":1}}],[\"getvalue\",{\"1\":{\"158\":5}}],[\"get或者go\",{\"1\":{\"25\":1}}],[\"get更新\",{\"1\":{\"18\":1}}],[\"getu\",{\"1\":{\"18\":1}}],[\"gettranslator\",{\"1\":{\"952\":2,\"953\":1}}],[\"gettables\",{\"1\":{\"863\":1}}],[\"gettypealiases\",{\"1\":{\"863\":1}}],[\"gettime\",{\"1\":{\"791\":1}}],[\"getting\",{\"1\":{\"7\":1}}],[\"gett\",{\"1\":{\"18\":1}}],[\"getmessage\",{\"1\":{\"157\":3}}],[\"getm\",{\"1\":{\"18\":1}}],[\"getfloat64\",{\"1\":{\"791\":1}}],[\"getfix\",{\"1\":{\"18\":1}}],[\"getf\",{\"1\":{\"18\":1}}],[\"getduration\",{\"1\":{\"791\":1}}],[\"getd\",{\"1\":{\"18\":1}}],[\"get命令来删除该依赖\",{\"1\":{\"503\":1}}],[\"get命令\",{\"1\":{\"503\":1}}],[\"get命令现在用于下载源码依赖\",{\"1\":{\"127\":1}}],[\"get命令现在最常用的作用就是对\",{\"1\":{\"18\":1}}],[\"get命令总共有下面几种用法\",{\"1\":{\"18\":1}}],[\"get命令实际上是基于\",{\"1\":{\"18\":1}}],[\"get命令会将指定的包的源代码下载到本地的全局依赖目录中\",{\"1\":{\"18\":1}}],[\"get命令还支持build\",{\"1\":{\"18\":1}}],[\"get命令绝对是\",{\"1\":{\"18\":1}}],[\"get的作用和go\",{\"1\":{\"18\":1}}],[\"get下载的依赖所存放的位置\",{\"1\":{\"7\":1}}],[\"get下载的依赖的地方\",{\"1\":{\"7\":1}}],[\"get\",{\"0\":{\"18\":1,\"638\":1},\"1\":{\"2\":1,\"4\":1,\"7\":24,\"18\":15,\"19\":16,\"22\":1,\"25\":2,\"41\":2,\"109\":1,\"110\":1,\"111\":1,\"112\":1,\"144\":2,\"145\":1,\"148\":1,\"159\":1,\"190\":3,\"208\":5,\"213\":4,\"220\":1,\"231\":2,\"234\":1,\"240\":2,\"241\":1,\"247\":2,\"248\":1,\"254\":1,\"256\":2,\"412\":2,\"450\":2,\"484\":2,\"485\":3,\"498\":1,\"500\":1,\"503\":4,\"509\":3,\"510\":2,\"535\":2,\"621\":1,\"629\":1,\"638\":1,\"641\":1,\"642\":1,\"758\":1,\"776\":1,\"787\":1,\"791\":1,\"801\":2,\"804\":1,\"808\":1,\"811\":1,\"816\":1,\"819\":1,\"822\":1,\"832\":1,\"837\":1,\"841\":1,\"846\":1,\"850\":1,\"851\":1,\"905\":2,\"928\":1,\"952\":4,\"955\":1,\"956\":1,\"958\":2,\"960\":2,\"964\":1,\"965\":2,\"968\":4,\"969\":3,\"971\":1,\"974\":1,\"980\":2,\"982\":3,\"986\":2,\"988\":2,\"989\":3,\"990\":2,\"991\":3,\"993\":4,\"994\":2,\"996\":3,\"1000\":2,\"1002\":1,\"1003\":3,\"1007\":2,\"1008\":2,\"1010\":3,\"1011\":5,\"1016\":1,\"1097\":1,\"1100\":1,\"1114\":1,\"1116\":1,\"1120\":1,\"1137\":1,\"1147\":1}}],[\"gounpark\",{\"1\":{\"1138\":1}}],[\"goutil\",{\"1\":{\"20\":1,\"24\":1,\"27\":1}}],[\"go函数\",{\"1\":{\"1089\":1}}],[\"gogetenv\",{\"1\":{\"1089\":2}}],[\"gogo来恢复\",{\"1\":{\"1104\":1}}],[\"gogo函数让\",{\"1\":{\"1101\":1}}],[\"gogo函数\",{\"1\":{\"1092\":1}}],[\"gogo\",{\"1\":{\"1080\":1,\"1092\":1,\"1101\":1,\"1104\":1,\"1106\":1}}],[\"gogo回到用户函数的正常逻辑流程中\",{\"1\":{\"1080\":1}}],[\"gogf\",{\"1\":{\"83\":1}}],[\"go解析接口文档的基本信息\",{\"1\":{\"1017\":1}}],[\"go里面查找\",{\"1\":{\"1017\":1}}],[\"go里面了解到更多内容\",{\"1\":{\"550\":1}}],[\"go或main函数上\",{\"1\":{\"1016\":1}}],[\"go代码\",{\"1\":{\"1011\":1}}],[\"go代码如下\",{\"1\":{\"518\":2}}],[\"go同级的\",{\"1\":{\"1011\":1}}],[\"go语言在标准库中总共有互斥锁和读写锁两种锁的实现\",{\"1\":{\"1149\":1}}],[\"go语言内置的flag包实现了命令行参数的解析\",{\"1\":{\"630\":1}}],[\"go语言格式化包\",{\"1\":{\"616\":1}}],[\"go语言的标准库非常的丰富\",{\"1\":{\"616\":1}}],[\"go源代码抽象语法树映射的包\",{\"1\":{\"616\":1}}],[\"goworld\",{\"1\":{\"613\":1}}],[\"gowork\",{\"1\":{\"7\":1,\"34\":1}}],[\"gozero\",{\"1\":{\"610\":1}}],[\"go看到一些相关信息\",{\"1\":{\"537\":1}}],[\"go的printcomment函数中找到\",{\"1\":{\"1114\":1}}],[\"go的部分代码\",{\"1\":{\"1016\":1}}],[\"go的发行版已经来到了1\",{\"1\":{\"616\":1}}],[\"go的文化\",{\"1\":{\"520\":1}}],[\"go的所有工具链都是由\",{\"1\":{\"6\":1}}],[\"go结尾\",{\"1\":{\"517\":1,\"525\":1}}],[\"go结尾的文件\",{\"1\":{\"8\":1}}],[\"go关键字表示了当前编写当前项目所用到的\",{\"1\":{\"509\":1}}],[\"go关键字后面必须是一个函数调用\",{\"1\":{\"462\":1}}],[\"go了解\",{\"1\":{\"380\":1}}],[\"go是生成的grpc代码\",{\"1\":{\"201\":1}}],[\"go是生成的protobuf类型定义\",{\"1\":{\"201\":1}}],[\"go插件支持\",{\"1\":{\"201\":1}}],[\"go肯定是支持的\",{\"1\":{\"169\":1}}],[\"go中有关于string的简单描述\",{\"1\":{\"1051\":1}}],[\"go中有许多操作都是这个包实现的\",{\"1\":{\"616\":1}}],[\"go中的walkrange函数来完成\",{\"1\":{\"1055\":1}}],[\"go中的walkrange函数展开成如下形式\",{\"1\":{\"1028\":1}}],[\"go中的mapbuckettype函数的功能就是在编译时构造\",{\"1\":{\"1030\":1}}],[\"go中的源代码\",{\"1\":{\"582\":1}}],[\"go中的examplewithdeadline测试函数\",{\"1\":{\"520\":1}}],[\"go中导入头文件\",{\"1\":{\"532\":1}}],[\"go中获取更加详细的信息\",{\"1\":{\"529\":1}}],[\"go中写入如下代码\",{\"1\":{\"154\":1}}],[\"go中编写如下代码\",{\"1\":{\"153\":1}}],[\"go中可以发现我们定义的服务\",{\"1\":{\"152\":1}}],[\"go可以发现我们定义的\",{\"1\":{\"152\":1}}],[\"go和hello\",{\"1\":{\"152\":1}}],[\"go2\",{\"1\":{\"113\":3}}],[\"go+\",{\"1\":{\"75\":1}}],[\"goja\",{\"1\":{\"75\":2}}],[\"goji\",{\"1\":{\"51\":2}}],[\"go3d\",{\"1\":{\"72\":1}}],[\"gomaxprocs=n\",{\"1\":{\"1085\":1}}],[\"gomaxprocs\",{\"1\":{\"1085\":1,\"1089\":2,\"1106\":1,\"1138\":2,\"1140\":1,\"1153\":2}}],[\"gomaxprocs默认值变为机器的逻辑核数\",{\"1\":{\"132\":1}}],[\"gomail\",{\"1\":{\"71\":3}}],[\"gomonkey\",{\"1\":{\"55\":2}}],[\"gomodcache=你的模块缓存路径\",{\"1\":{\"507\":1}}],[\"gomodcache=go\",{\"1\":{\"92\":1}}],[\"gomodcache表示存放go\",{\"1\":{\"7\":1}}],[\"gomodcache\",{\"1\":{\"7\":2,\"18\":1,\"507\":2}}],[\"gomod\",{\"1\":{\"7\":6,\"19\":3,\"20\":1,\"21\":2,\"22\":1,\"23\":1,\"26\":1,\"28\":1,\"126\":1}}],[\"goquery\",{\"1\":{\"69\":2}}],[\"gosched\",{\"1\":{\"1097\":1,\"1106\":2}}],[\"goschedg\",{\"1\":{\"1097\":1}}],[\"gosigstack\",{\"1\":{\"1087\":2}}],[\"goslice\",{\"1\":{\"539\":4}}],[\"gostartcallfn\",{\"1\":{\"1095\":1}}],[\"gostringn\",{\"1\":{\"536\":1}}],[\"gostring\",{\"1\":{\"536\":1}}],[\"gostl\",{\"1\":{\"58\":2}}],[\"gossi\",{\"1\":{\"142\":1}}],[\"gossip\",{\"1\":{\"84\":1,\"141\":1,\"142\":5,\"143\":1}}],[\"gosseract\",{\"1\":{\"85\":2}}],[\"gosumdb用于设置依赖库的校验和检测数据库地址\",{\"1\":{\"7\":1}}],[\"gosumdb\",{\"1\":{\"7\":1,\"510\":3,\"511\":1}}],[\"gosumdb=sum\",{\"1\":{\"7\":1}}],[\"godeferstmt\",{\"1\":{\"1074\":3}}],[\"godeferstmt方法的这一小段\",{\"1\":{\"1074\":1}}],[\"godebug=cgocheck=0\",{\"1\":{\"533\":1}}],[\"godebug=http2client=0\",{\"1\":{\"7\":1}}],[\"godebugs\",{\"1\":{\"20\":1}}],[\"godebug\",{\"1\":{\"7\":1,\"21\":1}}],[\"godoc\",{\"1\":{\"1011\":2}}],[\"godailylib\",{\"1\":{\"67\":1}}],[\"gods\",{\"1\":{\"58\":2}}],[\"gobuf\",{\"1\":{\"1086\":2}}],[\"gobuffalo\",{\"1\":{\"51\":1}}],[\"gob\",{\"1\":{\"862\":1}}],[\"gobytes\",{\"1\":{\"536\":1}}],[\"goby\",{\"1\":{\"75\":3}}],[\"gobin=go\",{\"1\":{\"92\":1}}],[\"gobin是用于存放go\",{\"1\":{\"7\":1}}],[\"gobin\",{\"1\":{\"7\":3}}],[\"gorecover\",{\"1\":{\"1080\":1}}],[\"gorecover函数的调用\",{\"1\":{\"1080\":1}}],[\"goready来唤醒协程\",{\"1\":{\"1168\":1}}],[\"goready唤醒\",{\"1\":{\"1061\":1}}],[\"goready去唤醒发送方协程\",{\"1\":{\"1060\":1}}],[\"goready\",{\"1\":{\"1059\":1,\"1060\":2,\"1061\":1}}],[\"goready函数使接收方协程变为\",{\"1\":{\"1059\":1}}],[\"gorilla\",{\"1\":{\"1009\":1}}],[\"gordon\",{\"1\":{\"956\":2,\"960\":1}}],[\"gorm在单个创建和更新时都会开启事务以保持数据一致性\",{\"1\":{\"852\":1}}],[\"gorm\",{\"0\":{\"848\":1},\"1\":{\"25\":6,\"26\":2,\"29\":4,\"30\":6,\"52\":2,\"63\":1,\"510\":1,\"610\":1,\"810\":1,\"848\":5,\"849\":1,\"850\":3,\"851\":17,\"852\":3,\"853\":2,\"854\":1,\"855\":1,\"856\":2,\"857\":2,\"861\":9,\"862\":1,\"864\":2,\"866\":2,\"869\":2,\"874\":1,\"875\":1,\"881\":1,\"887\":2,\"888\":1,\"890\":1,\"892\":1,\"893\":1,\"896\":1,\"897\":1,\"900\":2,\"901\":1,\"903\":2,\"1003\":1}}],[\"goroutineready函数的作用就是用于唤醒挂起的协程\",{\"1\":{\"1098\":1}}],[\"goroutineready\",{\"1\":{\"1098\":2}}],[\"goroutineprofile\",{\"1\":{\"556\":1}}],[\"goroutine\",{\"1\":{\"543\":1,\"556\":1,\"557\":1,\"560\":1,\"561\":1,\"743\":2,\"982\":1,\"1085\":1,\"1086\":3,\"1087\":2,\"1089\":3,\"1097\":1,\"1101\":1,\"1106\":1,\"1144\":1}}],[\"goroutines\",{\"1\":{\"4\":1,\"470\":1,\"472\":1,\"561\":1,\"1088\":2,\"1140\":1}}],[\"goroot=$home\",{\"1\":{\"91\":1}}],[\"goroot的值无法被直接修改\",{\"1\":{\"7\":1}}],[\"goroot代表\",{\"1\":{\"7\":1}}],[\"goroot\",{\"1\":{\"7\":2,\"21\":1,\"90\":2}}],[\"go=version\",{\"1\":{\"24\":2,\"26\":1,\"27\":2}}],[\"goframe\",{\"1\":{\"83\":1}}],[\"gofrs\",{\"1\":{\"74\":1}}],[\"gofound\",{\"1\":{\"62\":2}}],[\"gofiber\",{\"1\":{\"51\":1}}],[\"gofiles\",{\"1\":{\"21\":1}}],[\"gofmt完全没有提供任何的自定义配置\",{\"1\":{\"17\":1}}],[\"gofmt命令有以下参数\",{\"1\":{\"17\":1}}],[\"gofmt使用tab进行缩进\",{\"1\":{\"17\":1}}],[\"gofmt\",{\"1\":{\"17\":13,\"119\":1}}],[\"gofmt查看其详细文档\",{\"1\":{\"17\":1}}],[\"goexit0\",{\"1\":{\"1096\":1}}],[\"goexit0来负责协程的退出工作\",{\"1\":{\"1096\":1}}],[\"goexit函数作为协程的栈底\",{\"1\":{\"1096\":1}}],[\"goexit作为栈底由它来进行协程的退出处理\",{\"1\":{\"1095\":1}}],[\"goexit\",{\"1\":{\"603\":1,\"1078\":1,\"1080\":1,\"1095\":1,\"1096\":1}}],[\"goexperiment\",{\"1\":{\"20\":1}}],[\"goenv环境变量可以手动指定env配置文件的地址\",{\"1\":{\"7\":1}}],[\"goenv\",{\"1\":{\"7\":3}}],[\"gonet\",{\"1\":{\"72\":2,\"613\":1}}],[\"gonum\",{\"1\":{\"59\":3,\"76\":1}}],[\"gonic\",{\"1\":{\"19\":6,\"51\":1,\"503\":10,\"509\":5,\"961\":3,\"964\":2,\"965\":1,\"966\":3,\"968\":1,\"969\":1,\"970\":1,\"971\":1,\"982\":2,\"995\":2,\"1002\":1,\"1011\":2}}],[\"gonosumdb\",{\"1\":{\"7\":1,\"511\":2}}],[\"gonoproxy\",{\"1\":{\"7\":1,\"511\":2}}],[\"go入口文件\",{\"1\":{\"19\":1}}],[\"go入口文件作为编译目标\",{\"1\":{\"8\":1}}],[\"go文件是自动生成的\",{\"1\":{\"1016\":1}}],[\"go文件来定义\",{\"1\":{\"824\":1}}],[\"go文件的代码\",{\"1\":{\"600\":1}}],[\"go文件分别创建两个函数进行两种方式的字符串拼接\",{\"1\":{\"525\":1}}],[\"go文件如下代码\",{\"1\":{\"503\":1}}],[\"go文件\",{\"1\":{\"12\":2,\"20\":1,\"152\":1,\"293\":1,\"521\":1,\"525\":1,\"817\":1,\"954\":1}}],[\"go文件中的f32hash\",{\"1\":{\"1033\":1}}],[\"go文件中的filed\",{\"1\":{\"952\":1}}],[\"go文件中找到\",{\"1\":{\"930\":1}}],[\"go文件中\",{\"1\":{\"4\":1,\"1019\":1,\"1085\":1,\"1114\":1,\"1146\":1,\"1151\":1,\"1155\":1,\"1166\":1,\"1176\":1}}],[\"goland\",{\"1\":{\"94\":1,\"166\":1,\"193\":2}}],[\"golang1\",{\"1\":{\"365\":1}}],[\"golangci\",{\"1\":{\"6\":1}}],[\"golang\",{\"1\":{\"5\":1,\"6\":1,\"7\":18,\"14\":6,\"16\":4,\"17\":1,\"18\":8,\"26\":1,\"37\":2,\"54\":1,\"61\":2,\"65\":1,\"66\":1,\"68\":2,\"87\":1,\"88\":1,\"91\":1,\"98\":1,\"99\":1,\"101\":2,\"105\":1,\"106\":1,\"107\":1,\"108\":1,\"109\":1,\"110\":1,\"111\":1,\"112\":2,\"114\":2,\"116\":1,\"145\":6,\"148\":3,\"153\":1,\"154\":2,\"158\":7,\"159\":4,\"164\":1,\"165\":1,\"166\":3,\"168\":1,\"175\":4,\"194\":1,\"200\":2,\"219\":2,\"239\":2,\"501\":1,\"503\":14,\"504\":3,\"509\":17,\"510\":3,\"526\":1,\"589\":1,\"629\":2,\"639\":1,\"641\":1,\"642\":1,\"646\":2,\"715\":6,\"757\":1,\"776\":4,\"810\":2,\"848\":2,\"904\":1,\"944\":1,\"961\":1,\"962\":1,\"1052\":1}}],[\"goleran\",{\"1\":{\"559\":1,\"603\":2}}],[\"goleveldb\",{\"1\":{\"62\":2}}],[\"golearn表示要编译的模块\",{\"1\":{\"8\":1}}],[\"golearn\",{\"1\":{\"8\":7,\"11\":3,\"12\":2,\"15\":8,\"20\":2,\"21\":8,\"26\":1,\"27\":15,\"30\":1,\"38\":2,\"44\":2,\"503\":2,\"509\":2,\"518\":6,\"520\":2,\"521\":4,\"522\":1,\"523\":4,\"525\":3,\"526\":5,\"527\":6,\"550\":1,\"551\":1,\"552\":1,\"553\":2,\"559\":1,\"588\":2,\"603\":2,\"824\":2,\"1011\":1}}],[\"goverter\",{\"1\":{\"810\":1}}],[\"goversion\",{\"1\":{\"7\":1,\"14\":1,\"21\":2}}],[\"govm\",{\"1\":{\"93\":4,\"615\":1}}],[\"govalidator\",{\"1\":{\"24\":1,\"27\":1}}],[\"govcs仅支持\",{\"1\":{\"18\":1}}],[\"govcs=\",{\"1\":{\"7\":2}}],[\"govcs=github\",{\"1\":{\"7\":1,\"18\":1}}],[\"govcs\",{\"1\":{\"7\":1}}],[\"goidcache++\",{\"1\":{\"1095\":1}}],[\"goidcache\",{\"1\":{\"1095\":1}}],[\"goid和parentgoid表示当前协程和父协程的唯一标识\",{\"1\":{\"1086\":1}}],[\"goid\",{\"1\":{\"1086\":2,\"1095\":2}}],[\"goinsecure\",{\"1\":{\"7\":1,\"511\":1}}],[\"goimports\",{\"1\":{\"6\":1}}],[\"gohper\",{\"1\":{\"7\":2}}],[\"gohostos\",{\"1\":{\"7\":1}}],[\"gohostarch\",{\"1\":{\"7\":1}}],[\"got\",{\"1\":{\"496\":1}}],[\"gotest\",{\"1\":{\"138\":1,\"547\":2}}],[\"gotempdir\",{\"1\":{\"7\":1}}],[\"gotmpdir=go\",{\"1\":{\"92\":1}}],[\"goto也是类似的\",{\"1\":{\"582\":1}}],[\"goto等关键字时表现的像一个普通循环体代码段一样\",{\"1\":{\"582\":1}}],[\"goto将控制权传递给在同一函数中对应标签的语句\",{\"1\":{\"352\":1}}],[\"goto\",{\"0\":{\"352\":1},\"1\":{\"138\":1,\"298\":1,\"352\":1,\"1037\":1,\"1038\":1,\"1039\":2,\"1041\":1,\"1067\":14,\"1117\":3,\"1120\":1,\"1122\":1,\"1140\":1}}],[\"gotour\",{\"1\":{\"23\":5}}],[\"gotooldir\",{\"1\":{\"7\":1}}],[\"gotoolchain=auto\",{\"1\":{\"7\":1}}],[\"gotypes\",{\"1\":{\"16\":1}}],[\"gochat\",{\"1\":{\"611\":1}}],[\"goccy\",{\"1\":{\"503\":2,\"509\":1}}],[\"gocv\",{\"1\":{\"76\":2}}],[\"gocolly\",{\"1\":{\"69\":1}}],[\"goconvey\",{\"1\":{\"55\":2}}],[\"gocache=go\",{\"1\":{\"92\":1}}],[\"gocache\",{\"1\":{\"7\":3,\"61\":2}}],[\"goctl\",{\"1\":{\"6\":1}}],[\"gopc\",{\"1\":{\"1095\":1}}],[\"gopanic\",{\"1\":{\"1079\":1}}],[\"gopanic函数中\",{\"1\":{\"1079\":1}}],[\"goparkunlock\",{\"1\":{\"1167\":1}}],[\"gopark挂起当前协程等待信号量的释放\",{\"1\":{\"1153\":1}}],[\"gopark会更新\",{\"1\":{\"1098\":1}}],[\"gopark使得当前的协程挂起\",{\"1\":{\"1098\":1}}],[\"gopark使当前协程阻塞\",{\"1\":{\"1059\":1}}],[\"gopark阻塞\",{\"1\":{\"1067\":1}}],[\"gopark函数让协程其陷入休眠\",{\"1\":{\"1138\":1}}],[\"gopark函数\",{\"1\":{\"1066\":1}}],[\"gopark将当前协程变为\",{\"1\":{\"1060\":1}}],[\"gopark\",{\"1\":{\"1059\":2,\"1060\":2,\"1066\":1,\"1067\":1,\"1098\":2,\"1138\":1}}],[\"gopath就只是一个用来存放go\",{\"1\":{\"7\":1}}],[\"gopath=$home\",{\"1\":{\"91\":1}}],[\"gopath=\",{\"1\":{\"7\":1}}],[\"gopath是专门用来存放各种第三方库的\",{\"1\":{\"7\":1}}],[\"gopath默认值是$home\",{\"1\":{\"7\":1}}],[\"gopath\",{\"1\":{\"7\":6,\"28\":1,\"90\":2,\"91\":1,\"492\":1}}],[\"gop\",{\"1\":{\"75\":1}}],[\"gopl\",{\"1\":{\"99\":1}}],[\"goplus\",{\"1\":{\"75\":1}}],[\"gopls\",{\"1\":{\"6\":1}}],[\"gopsutils\",{\"0\":{\"904\":1},\"1\":{\"904\":1}}],[\"gopsutil\",{\"1\":{\"74\":2,\"904\":3,\"905\":1}}],[\"gopeedlab\",{\"1\":{\"70\":1}}],[\"gopeed\",{\"1\":{\"70\":2}}],[\"gopkg\",{\"1\":{\"28\":4,\"503\":2,\"509\":1,\"510\":1,\"798\":1,\"816\":1,\"817\":1}}],[\"gophers\",{\"1\":{\"946\":2}}],[\"gopherlua\",{\"1\":{\"802\":1,\"803\":1}}],[\"gopher\",{\"0\":{\"802\":1},\"1\":{\"7\":1,\"75\":2,\"320\":4,\"598\":1,\"802\":3,\"804\":1,\"805\":2,\"946\":4,\"953\":3,\"1071\":1}}],[\"gopreempt\",{\"1\":{\"1106\":2,\"1107\":1}}],[\"goproject\",{\"1\":{\"629\":1,\"636\":9}}],[\"goproxy=file\",{\"1\":{\"7\":1}}],[\"goproxy=https\",{\"1\":{\"7\":1,\"501\":1}}],[\"goproxy还可以是文件地址\",{\"1\":{\"7\":1}}],[\"goproxy\",{\"1\":{\"7\":25,\"19\":16,\"25\":2,\"501\":3,\"511\":2,\"612\":1}}],[\"goprivate=github\",{\"1\":{\"7\":1}}],[\"goprivate=\",{\"1\":{\"7\":1}}],[\"goprivate环境变量用于设置私有的库\",{\"1\":{\"7\":1}}],[\"goprivate\",{\"1\":{\"7\":1,\"511\":1}}],[\"go自身也是一个二进制文件\",{\"1\":{\"6\":1}}],[\"goapi\",{\"1\":{\"803\":2}}],[\"goarh代表的是\",{\"1\":{\"525\":1}}],[\"goarch=\",{\"1\":{\"11\":3}}],[\"goarch=amd64\",{\"1\":{\"6\":1,\"7\":1}}],[\"goarch的值将会决定编译时采用哪个\",{\"1\":{\"7\":1}}],[\"goarch\",{\"1\":{\"7\":2,\"11\":2,\"14\":8,\"20\":1,\"525\":1,\"526\":3,\"588\":1,\"1054\":1,\"1095\":1,\"1122\":1,\"1137\":1}}],[\"goamd64=v1\",{\"1\":{\"6\":1}}],[\"good\",{\"1\":{\"520\":1,\"527\":4}}],[\"goodbye\",{\"1\":{\"486\":2,\"518\":3,\"520\":3}}],[\"gooxml\",{\"1\":{\"81\":2}}],[\"goos代表是运行的操作系统\",{\"1\":{\"525\":1}}],[\"goos设置目标系统\",{\"1\":{\"11\":1}}],[\"goos=\",{\"1\":{\"11\":3}}],[\"goos=windows\",{\"1\":{\"6\":1}}],[\"goos和goarch并不能随意的进行组合\",{\"1\":{\"7\":1}}],[\"goos的值将会决定将源代码编译成哪个目标系统的二进制文件\",{\"1\":{\"7\":1}}],[\"goos\",{\"1\":{\"7\":1,\"11\":1,\"14\":1,\"20\":1,\"525\":1,\"526\":3,\"588\":1,\"1107\":2}}],[\"googleapis\",{\"1\":{\"168\":3}}],[\"googleplex\",{\"1\":{\"132\":2}}],[\"googlesource\",{\"1\":{\"116\":1,\"579\":1}}],[\"google\",{\"1\":{\"6\":3,\"20\":1,\"57\":1,\"58\":2,\"67\":1,\"74\":1,\"88\":2,\"91\":1,\"93\":1,\"145\":6,\"147\":1,\"148\":3,\"153\":1,\"154\":2,\"157\":3,\"158\":10,\"159\":5,\"164\":4,\"165\":1,\"166\":3,\"167\":5,\"168\":3,\"175\":4,\"179\":1,\"180\":1,\"194\":2,\"197\":3,\"200\":3,\"202\":5,\"503\":2,\"504\":1,\"509\":1,\"510\":2,\"558\":1,\"735\":1,\"736\":2,\"821\":2,\"822\":2,\"823\":3,\"824\":3}}],[\"go111module值默认为auto\",{\"1\":{\"124\":1}}],[\"go111module\",{\"1\":{\"7\":4,\"494\":1}}],[\"go111module=on\",{\"1\":{\"7\":2,\"92\":1,\"494\":1}}],[\"go1\",{\"1\":{\"6\":17,\"7\":3,\"8\":1,\"14\":1,\"18\":3,\"40\":1,\"87\":2,\"88\":1,\"90\":1,\"91\":3,\"92\":2,\"93\":14,\"110\":2,\"113\":7,\"114\":2,\"115\":2,\"116\":4,\"117\":7,\"118\":2,\"119\":2,\"120\":2,\"121\":2,\"122\":2,\"123\":2,\"124\":2,\"125\":2,\"126\":2,\"127\":2,\"128\":2,\"129\":2,\"130\":2,\"131\":2,\"132\":2,\"133\":2,\"134\":2,\"135\":2,\"136\":3,\"137\":2,\"138\":2,\"371\":1,\"372\":1,\"387\":2,\"492\":1,\"527\":1,\"563\":2,\"579\":1,\"580\":1,\"603\":2,\"804\":1,\"1062\":1,\"1095\":1,\"1103\":1,\"1106\":1,\"1107\":1,\"1130\":5,\"1144\":2,\"1145\":1}}],[\"go仓库的\",{\"1\":{\"5\":1}}],[\"go\",{\"0\":{\"287\":1,\"288\":1,\"509\":1,\"510\":1,\"531\":1,\"532\":1,\"533\":1,\"696\":1,\"814\":1},\"1\":{\"0\":9,\"2\":3,\"3\":9,\"4\":20,\"5\":2,\"6\":17,\"7\":72,\"8\":27,\"9\":18,\"10\":5,\"11\":8,\"12\":3,\"13\":6,\"14\":13,\"15\":8,\"16\":21,\"17\":35,\"18\":36,\"19\":19,\"20\":13,\"21\":20,\"22\":11,\"23\":5,\"24\":11,\"25\":4,\"26\":6,\"27\":9,\"28\":17,\"29\":5,\"30\":3,\"31\":5,\"32\":4,\"33\":4,\"34\":13,\"35\":2,\"36\":2,\"37\":30,\"38\":28,\"39\":5,\"40\":11,\"41\":5,\"42\":2,\"43\":3,\"44\":4,\"45\":2,\"46\":2,\"47\":2,\"48\":1,\"49\":1,\"52\":2,\"53\":13,\"54\":1,\"55\":6,\"56\":7,\"57\":7,\"58\":4,\"60\":1,\"61\":2,\"62\":23,\"63\":6,\"64\":9,\"65\":5,\"66\":1,\"68\":2,\"70\":3,\"71\":11,\"72\":2,\"73\":4,\"74\":1,\"75\":13,\"83\":1,\"87\":13,\"88\":26,\"89\":2,\"90\":7,\"91\":4,\"92\":11,\"93\":7,\"94\":2,\"95\":2,\"96\":8,\"98\":2,\"99\":19,\"100\":4,\"101\":6,\"102\":2,\"104\":7,\"105\":1,\"107\":1,\"110\":2,\"111\":1,\"112\":2,\"113\":8,\"114\":2,\"115\":2,\"116\":4,\"117\":2,\"118\":1,\"119\":1,\"121\":1,\"122\":1,\"124\":1,\"125\":1,\"127\":3,\"129\":2,\"132\":2,\"133\":2,\"134\":1,\"136\":2,\"138\":2,\"139\":1,\"140\":1,\"145\":2,\"146\":2,\"147\":3,\"148\":9,\"150\":2,\"151\":1,\"152\":2,\"156\":4,\"158\":4,\"159\":6,\"164\":5,\"166\":2,\"171\":1,\"180\":2,\"182\":1,\"184\":1,\"185\":1,\"197\":1,\"198\":2,\"200\":12,\"201\":24,\"202\":1,\"203\":1,\"204\":2,\"205\":1,\"206\":1,\"210\":1,\"217\":1,\"218\":1,\"219\":3,\"220\":2,\"221\":3,\"222\":5,\"223\":3,\"226\":3,\"227\":3,\"228\":3,\"229\":3,\"230\":1,\"231\":3,\"239\":2,\"240\":5,\"241\":1,\"285\":2,\"286\":2,\"287\":4,\"288\":2,\"289\":2,\"290\":4,\"291\":2,\"292\":2,\"293\":2,\"294\":2,\"295\":1,\"296\":12,\"297\":1,\"298\":2,\"299\":4,\"304\":1,\"305\":1,\"307\":2,\"308\":2,\"309\":2,\"310\":1,\"311\":1,\"312\":1,\"313\":2,\"314\":1,\"315\":1,\"316\":1,\"319\":1,\"326\":3,\"328\":1,\"329\":1,\"331\":2,\"332\":5,\"334\":1,\"335\":1,\"336\":1,\"338\":1,\"341\":4,\"347\":1,\"353\":2,\"358\":1,\"359\":2,\"363\":1,\"370\":1,\"373\":1,\"375\":1,\"376\":1,\"380\":2,\"381\":1,\"382\":1,\"388\":1,\"389\":2,\"390\":1,\"392\":3,\"394\":3,\"395\":3,\"396\":2,\"397\":2,\"401\":1,\"402\":1,\"403\":3,\"405\":4,\"406\":1,\"407\":1,\"410\":2,\"412\":1,\"413\":1,\"414\":3,\"415\":2,\"427\":2,\"428\":3,\"429\":5,\"430\":2,\"431\":1,\"432\":3,\"461\":1,\"462\":17,\"463\":2,\"465\":1,\"466\":1,\"467\":3,\"468\":1,\"469\":2,\"470\":2,\"471\":11,\"472\":2,\"473\":1,\"476\":1,\"477\":4,\"478\":1,\"479\":4,\"480\":2,\"481\":5,\"482\":5,\"483\":1,\"484\":1,\"485\":1,\"486\":2,\"488\":1,\"490\":1,\"492\":8,\"493\":2,\"494\":6,\"495\":4,\"496\":3,\"497\":4,\"498\":2,\"499\":11,\"500\":6,\"501\":5,\"502\":2,\"503\":59,\"504\":26,\"505\":3,\"506\":11,\"507\":9,\"508\":2,\"509\":24,\"510\":14,\"511\":2,\"512\":3,\"513\":8,\"515\":4,\"516\":3,\"517\":4,\"518\":12,\"519\":1,\"520\":3,\"521\":16,\"522\":4,\"523\":13,\"525\":3,\"526\":5,\"527\":20,\"528\":1,\"529\":8,\"530\":5,\"531\":5,\"532\":3,\"533\":17,\"534\":3,\"535\":2,\"536\":20,\"537\":4,\"538\":2,\"539\":4,\"540\":2,\"541\":2,\"543\":7,\"544\":2,\"545\":7,\"546\":3,\"547\":10,\"548\":1,\"549\":2,\"550\":14,\"551\":14,\"552\":6,\"553\":21,\"557\":1,\"558\":1,\"559\":3,\"560\":4,\"561\":2,\"563\":2,\"567\":2,\"568\":2,\"570\":3,\"578\":1,\"579\":3,\"580\":1,\"581\":2,\"582\":3,\"586\":1,\"587\":1,\"588\":1,\"589\":5,\"590\":3,\"591\":3,\"592\":4,\"593\":2,\"595\":1,\"597\":2,\"598\":14,\"599\":1,\"603\":5,\"604\":1,\"606\":2,\"609\":1,\"610\":5,\"611\":1,\"612\":1,\"613\":1,\"614\":1,\"615\":4,\"616\":4,\"617\":2,\"620\":1,\"621\":3,\"624\":1,\"629\":2,\"636\":4,\"637\":2,\"643\":1,\"647\":1,\"650\":1,\"673\":3,\"674\":1,\"681\":1,\"682\":1,\"683\":1,\"690\":1,\"696\":1,\"701\":1,\"702\":2,\"716\":8,\"722\":2,\"725\":1,\"727\":1,\"736\":1,\"739\":3,\"740\":1,\"745\":2,\"750\":1,\"776\":3,\"786\":2,\"787\":1,\"788\":1,\"801\":1,\"802\":1,\"803\":3,\"804\":1,\"806\":2,\"808\":1,\"810\":1,\"811\":1,\"814\":4,\"816\":1,\"817\":2,\"819\":1,\"821\":2,\"822\":2,\"823\":3,\"824\":6,\"831\":3,\"832\":1,\"836\":5,\"837\":2,\"841\":1,\"843\":1,\"844\":2,\"845\":1,\"846\":1,\"848\":3,\"850\":1,\"851\":1,\"904\":2,\"905\":2,\"923\":1,\"926\":4,\"927\":1,\"928\":2,\"929\":1,\"942\":1,\"952\":12,\"953\":1,\"957\":3,\"961\":1,\"962\":1,\"964\":2,\"976\":1,\"982\":1,\"1003\":1,\"1008\":1,\"1009\":4,\"1010\":5,\"1011\":3,\"1016\":5,\"1017\":7,\"1018\":1,\"1019\":2,\"1020\":1,\"1024\":4,\"1028\":1,\"1029\":2,\"1030\":7,\"1032\":2,\"1033\":2,\"1037\":6,\"1038\":5,\"1039\":2,\"1041\":2,\"1042\":7,\"1043\":1,\"1044\":1,\"1050\":1,\"1051\":4,\"1052\":5,\"1053\":1,\"1054\":1,\"1056\":2,\"1060\":1,\"1061\":2,\"1063\":1,\"1065\":1,\"1067\":5,\"1071\":2,\"1072\":1,\"1073\":1,\"1074\":1,\"1076\":2,\"1077\":1,\"1082\":1,\"1083\":5,\"1084\":2,\"1085\":5,\"1087\":4,\"1089\":5,\"1095\":1,\"1096\":1,\"1099\":1,\"1100\":1,\"1101\":1,\"1103\":1,\"1106\":4,\"1109\":4,\"1110\":1,\"1111\":1,\"1113\":2,\"1114\":2,\"1115\":2,\"1118\":1,\"1123\":4,\"1125\":1,\"1128\":1,\"1129\":1,\"1130\":10,\"1131\":2,\"1132\":1,\"1133\":1,\"1134\":2,\"1135\":1,\"1138\":4,\"1141\":1,\"1143\":1,\"1144\":1,\"1146\":1,\"1149\":1,\"1164\":1,\"1165\":2,\"1171\":2,\"1175\":1}}],[\"f的值\",{\"1\":{\"1098\":1}}],[\"fd\",{\"1\":{\"1072\":2,\"1073\":1}}],[\"f32hash\",{\"1\":{\"1033\":1}}],[\"fqdn\",{\"1\":{\"932\":2}}],[\"fc\",{\"1\":{\"901\":1}}],[\"fghijk\",{\"1\":{\"713\":1}}],[\"ff\",{\"1\":{\"527\":1}}],[\"ffiles\",{\"1\":{\"21\":1}}],[\"fn表示从这里开始执行\",{\"1\":{\"1095\":1}}],[\"fn3\",{\"1\":{\"1073\":1}}],[\"fn2\",{\"1\":{\"1073\":1}}],[\"fn就类似于一个单元测试函数的逻辑\",{\"1\":{\"527\":1}}],[\"fn\",{\"1\":{\"459\":4,\"527\":1,\"813\":2,\"1073\":1,\"1074\":3,\"1075\":4,\"1079\":2,\"1080\":2,\"1089\":3,\"1091\":4,\"1095\":6}}],[\"fn1\",{\"1\":{\"402\":3,\"1073\":1,\"1074\":2}}],[\"f或者\",{\"1\":{\"341\":1}}],[\"fp\",{\"1\":{\"592\":1,\"1153\":1}}],[\"fprint\",{\"1\":{\"960\":2}}],[\"fprintf函数中\",{\"1\":{\"485\":1}}],[\"fprintf\",{\"1\":{\"396\":1,\"397\":1,\"485\":1,\"955\":1,\"956\":2}}],[\"fprintln\",{\"1\":{\"340\":1}}],[\"fp+0\",{\"1\":{\"302\":1}}],[\"f7ff\",{\"1\":{\"141\":3}}],[\"fee\",{\"1\":{\"847\":2}}],[\"fe\",{\"1\":{\"629\":3,\"952\":2}}],[\"fe3a3abad311\",{\"1\":{\"503\":2,\"509\":3}}],[\"feat\",{\"1\":{\"499\":6}}],[\"feb\",{\"1\":{\"137\":2}}],[\"fetch\",{\"1\":{\"93\":1,\"838\":3}}],[\"fe54fb35175b\",{\"1\":{\"6\":1}}],[\"fyne\",{\"1\":{\"73\":3}}],[\"favicon\",{\"1\":{\"999\":3}}],[\"family\",{\"1\":{\"909\":1}}],[\"fantastic\",{\"1\":{\"848\":2}}],[\"fangs\",{\"1\":{\"786\":2}}],[\"faststr\",{\"1\":{\"1038\":2}}],[\"fastrandn生成\",{\"1\":{\"1067\":1}}],[\"fastrandn\",{\"1\":{\"1067\":1}}],[\"fastrand64\",{\"1\":{\"1037\":1}}],[\"fastrand\",{\"1\":{\"1033\":1,\"1034\":1,\"1037\":1,\"1039\":1,\"1040\":1}}],[\"fast\",{\"1\":{\"818\":2,\"836\":1,\"1153\":2,\"1169\":1}}],[\"fat32\",{\"1\":{\"915\":1}}],[\"father\",{\"1\":{\"460\":3,\"725\":1}}],[\"fatalpanic\",{\"1\":{\"1079\":1}}],[\"fatalpanic函数\",{\"1\":{\"1079\":1}}],[\"fatallevel\",{\"1\":{\"842\":2}}],[\"fatalln\",{\"1\":{\"647\":1,\"791\":1,\"968\":1,\"969\":1,\"977\":1,\"980\":1,\"982\":1,\"984\":1,\"985\":1,\"986\":1,\"989\":1,\"990\":1,\"991\":1,\"993\":1,\"994\":1,\"996\":1,\"1007\":1,\"1008\":1}}],[\"fatal级别的问题一般很少会显式的去触发\",{\"1\":{\"608\":1}}],[\"fatal是一种极其严重的问题\",{\"1\":{\"608\":1}}],[\"fatalf内部使用的是t\",{\"1\":{\"521\":1}}],[\"fatalf\",{\"1\":{\"496\":1,\"521\":3,\"522\":1,\"523\":1,\"524\":2,\"797\":1,\"798\":1,\"1074\":1}}],[\"fatal\",{\"0\":{\"608\":1},\"1\":{\"37\":1,\"389\":1,\"470\":1,\"472\":1,\"486\":2,\"533\":1,\"556\":3,\"598\":1,\"608\":2,\"647\":1,\"676\":1,\"953\":1,\"955\":1,\"956\":1,\"960\":1,\"998\":1,\"1036\":1,\"1037\":1,\"1038\":2,\"1054\":1,\"1154\":1,\"1159\":2,\"1162\":2}}],[\"fallback\",{\"1\":{\"731\":2,\"732\":1}}],[\"fallthrough\",{\"1\":{\"298\":1,\"350\":2}}],[\"false为假值\",{\"1\":{\"315\":1}}],[\"false\",{\"1\":{\"18\":5,\"107\":2,\"108\":1,\"112\":2,\"141\":11,\"166\":4,\"167\":2,\"205\":1,\"321\":1,\"384\":1,\"399\":1,\"416\":1,\"435\":1,\"436\":1,\"437\":1,\"448\":2,\"460\":2,\"470\":1,\"484\":2,\"485\":3,\"486\":1,\"513\":2,\"521\":5,\"522\":1,\"523\":1,\"524\":5,\"568\":1,\"581\":1,\"582\":1,\"587\":2,\"636\":1,\"659\":1,\"694\":6,\"695\":2,\"701\":1,\"706\":1,\"728\":2,\"764\":2,\"779\":1,\"809\":1,\"813\":3,\"817\":1,\"840\":1,\"862\":2,\"867\":2,\"899\":1,\"1002\":1,\"1025\":1,\"1046\":1,\"1047\":2,\"1048\":2,\"1053\":1,\"1054\":1,\"1059\":5,\"1060\":4,\"1061\":2,\"1062\":1,\"1066\":4,\"1067\":4,\"1070\":1,\"1076\":3,\"1096\":2,\"1097\":4,\"1104\":8,\"1106\":1,\"1107\":2,\"1117\":1,\"1119\":2,\"1125\":1,\"1132\":1,\"1138\":3,\"1139\":1,\"1140\":2,\"1147\":1,\"1148\":1,\"1152\":2,\"1153\":4,\"1154\":1,\"1157\":2,\"1158\":1,\"1159\":2,\"1160\":2,\"1161\":1,\"1162\":2,\"1177\":2}}],[\"failing\",{\"1\":{\"527\":4,\"1121\":1}}],[\"failnow\",{\"1\":{\"521\":1}}],[\"failnow同样会标记为测试失败\",{\"1\":{\"521\":1}}],[\"fail\",{\"1\":{\"521\":7,\"527\":8,\"817\":1}}],[\"fail用于将当前用例标记为测试失败\",{\"1\":{\"521\":1}}],[\"failure\",{\"1\":{\"520\":1,\"527\":1,\"1013\":3}}],[\"failed\",{\"1\":{\"212\":1,\"214\":1,\"215\":1,\"234\":2,\"513\":1,\"838\":3,\"942\":1,\"943\":2,\"944\":4,\"945\":2,\"946\":2,\"948\":2,\"949\":1,\"950\":1,\"951\":2,\"971\":1,\"974\":2,\"977\":1,\"985\":1,\"1080\":1,\"1120\":1}}],[\"failedprecondition\",{\"1\":{\"168\":1}}],[\"failfast\",{\"1\":{\"38\":1,\"518\":1,\"519\":1}}],[\"facing\",{\"1\":{\"167\":2}}],[\"facebook\",{\"1\":{\"52\":1}}],[\"f90\",{\"1\":{\"21\":1}}],[\"fstype\",{\"1\":{\"914\":1,\"915\":3}}],[\"fsnotify\",{\"1\":{\"793\":1}}],[\"fs作为文件系统\",{\"1\":{\"736\":1}}],[\"fsys\",{\"1\":{\"736\":1}}],[\"fs库\",{\"1\":{\"415\":1}}],[\"fscanln\",{\"1\":{\"345\":1}}],[\"fs类型\",{\"1\":{\"121\":1}}],[\"fs接口\",{\"1\":{\"41\":1}}],[\"fs的全局变量上方\",{\"1\":{\"41\":1}}],[\"fs\",{\"1\":{\"20\":1,\"41\":9,\"121\":1,\"416\":15,\"426\":1,\"600\":5,\"616\":1,\"736\":6,\"981\":1,\"999\":1}}],[\"f11d552287458c0fce625abe50bf928c487064c36bbb1251ad8b1968772c3e4b\",{\"1\":{\"19\":1}}],[\"f1\",{\"1\":{\"19\":1,\"593\":4,\"595\":3}}],[\"f1lzbaqm=\",{\"1\":{\"6\":1}}],[\"fruit\",{\"1\":{\"968\":2}}],[\"friendly\",{\"1\":{\"848\":2}}],[\"fractionalutilizationgoal\",{\"1\":{\"1138\":1}}],[\"fragmentation\",{\"1\":{\"1139\":1}}],[\"fragment\",{\"1\":{\"174\":1}}],[\"fragid1\",{\"1\":{\"174\":1}}],[\"framepc\",{\"1\":{\"1073\":1}}],[\"framepointer\",{\"1\":{\"37\":1,\"1086\":1}}],[\"framework\",{\"1\":{\"961\":2}}],[\"frameworks\",{\"1\":{\"193\":1}}],[\"frame中的grpc\",{\"1\":{\"169\":1}}],[\"frame\",{\"1\":{\"169\":1,\"1073\":2,\"1095\":1,\"1101\":1}}],[\"frees\",{\"1\":{\"1128\":2}}],[\"freespanlocked\",{\"1\":{\"1121\":1}}],[\"freeidx\",{\"1\":{\"1125\":4}}],[\"freeindex\",{\"1\":{\"1114\":1,\"1117\":6,\"1125\":6,\"1126\":1}}],[\"freezestopwait\",{\"1\":{\"1097\":1}}],[\"freezetheworld\",{\"1\":{\"1097\":1}}],[\"freemspanlocked\",{\"1\":{\"1121\":2}}],[\"freem\",{\"1\":{\"1092\":2}}],[\"freemwait\",{\"1\":{\"1092\":1}}],[\"freelink\",{\"1\":{\"1092\":1}}],[\"freewait\",{\"1\":{\"1092\":2}}],[\"freebytebase\",{\"1\":{\"1117\":2}}],[\"freebytes\",{\"1\":{\"920\":1}}],[\"freebsd\",{\"1\":{\"7\":1,\"904\":1}}],[\"freedefer函数将defer结构释放回池中\",{\"1\":{\"1075\":1}}],[\"freedefer\",{\"1\":{\"1075\":1,\"1079\":1}}],[\"freed\",{\"1\":{\"536\":2}}],[\"free\",{\"1\":{\"485\":2,\"536\":7,\"543\":2,\"914\":1,\"918\":1,\"919\":1,\"1089\":2,\"1099\":2,\"1100\":3,\"1111\":1,\"1112\":1,\"1120\":1,\"1121\":5,\"1122\":1,\"1125\":1}}],[\"french\",{\"1\":{\"87\":1}}],[\"fromlen\",{\"1\":{\"1026\":4}}],[\"fromptr\",{\"1\":{\"1026\":4}}],[\"fromvalue\",{\"1\":{\"812\":2}}],[\"fromerror\",{\"1\":{\"168\":3}}],[\"fromincomingcontext函数来获取\",{\"1\":{\"162\":1}}],[\"fromincomingcontext\",{\"1\":{\"159\":1,\"162\":3}}],[\"from=<none>\",{\"1\":{\"141\":1}}],[\"from\",{\"1\":{\"7\":1,\"16\":1,\"17\":3,\"21\":4,\"22\":1,\"31\":1,\"93\":2,\"158\":22,\"159\":32,\"160\":1,\"234\":2,\"237\":1,\"477\":1,\"550\":4,\"551\":3,\"552\":1,\"553\":5,\"806\":2,\"810\":2,\"824\":1,\"871\":1,\"872\":1,\"873\":1,\"874\":2,\"875\":5,\"876\":2,\"877\":1,\"878\":1,\"879\":1,\"880\":5,\"881\":2,\"888\":7,\"896\":5,\"897\":3,\"898\":6,\"899\":2,\"1037\":2,\"1059\":1,\"1060\":3,\"1067\":3,\"1089\":1,\"1100\":2,\"1111\":1,\"1114\":2,\"1116\":1}}],[\"f\",{\"1\":{\"7\":2,\"15\":1,\"18\":1,\"20\":2,\"21\":6,\"41\":3,\"166\":2,\"216\":1,\"258\":2,\"296\":1,\"305\":1,\"320\":1,\"341\":2,\"349\":2,\"350\":3,\"383\":3,\"399\":2,\"402\":2,\"417\":2,\"418\":3,\"419\":1,\"424\":1,\"484\":5,\"486\":1,\"523\":1,\"527\":12,\"538\":1,\"551\":3,\"567\":4,\"581\":4,\"582\":4,\"592\":1,\"593\":4,\"595\":3,\"645\":3,\"694\":2,\"698\":12,\"700\":1,\"701\":1,\"710\":6,\"713\":1,\"751\":2,\"826\":3,\"839\":2,\"1033\":4,\"1049\":2,\"1074\":1,\"1076\":2,\"1098\":2,\"1112\":44,\"1173\":4}}],[\"fun\",{\"1\":{\"428\":1}}],[\"funcpcabi0\",{\"1\":{\"1095\":1,\"1107\":1}}],[\"funcval\",{\"1\":{\"1095\":1}}],[\"func1\",{\"1\":{\"982\":2,\"995\":4}}],[\"funcs\",{\"1\":{\"728\":1}}],[\"funcs方法来添加自定义函数\",{\"1\":{\"728\":1}}],[\"funcmap\",{\"1\":{\"728\":4}}],[\"funcname\",{\"1\":{\"728\":1}}],[\"func风格\",{\"1\":{\"581\":1}}],[\"func来进行获取\",{\"1\":{\"451\":1}}],[\"func是函数声明关键字\",{\"1\":{\"292\":1}}],[\"functionkey\",{\"1\":{\"839\":3,\"840\":1}}],[\"function\",{\"1\":{\"520\":2,\"567\":3,\"582\":2,\"923\":1,\"1073\":1,\"1080\":1,\"1086\":1,\"1091\":1,\"1095\":1,\"1097\":2}}],[\"functionality\",{\"1\":{\"22\":1,\"814\":1}}],[\"functions\",{\"1\":{\"4\":1,\"160\":1}}],[\"funcdata\",{\"1\":{\"9\":3,\"45\":5,\"1073\":1}}],[\"funcid=0x0\",{\"1\":{\"9\":1}}],[\"func\",{\"1\":{\"4\":2,\"10\":1,\"12\":2,\"13\":1,\"16\":2,\"17\":4,\"20\":1,\"37\":1,\"41\":7,\"43\":2,\"44\":6,\"45\":5,\"46\":1,\"47\":1,\"48\":1,\"49\":1,\"111\":1,\"112\":2,\"114\":6,\"115\":2,\"129\":1,\"133\":1,\"137\":1,\"145\":12,\"152\":2,\"153\":2,\"154\":1,\"158\":8,\"159\":12,\"160\":1,\"161\":3,\"162\":5,\"163\":4,\"164\":2,\"165\":9,\"166\":12,\"167\":1,\"168\":11,\"174\":1,\"175\":8,\"202\":2,\"205\":1,\"207\":1,\"208\":1,\"209\":1,\"210\":1,\"212\":1,\"213\":1,\"214\":1,\"215\":1,\"216\":4,\"221\":1,\"231\":1,\"232\":1,\"234\":4,\"235\":1,\"236\":1,\"237\":1,\"238\":4,\"241\":1,\"242\":2,\"292\":1,\"295\":1,\"297\":1,\"298\":1,\"307\":3,\"309\":2,\"320\":1,\"326\":1,\"329\":2,\"331\":1,\"332\":3,\"333\":2,\"334\":1,\"337\":1,\"338\":1,\"339\":1,\"340\":2,\"341\":2,\"343\":1,\"344\":5,\"345\":1,\"346\":1,\"348\":3,\"349\":2,\"350\":5,\"351\":1,\"352\":1,\"354\":1,\"355\":1,\"356\":2,\"357\":2,\"362\":3,\"365\":1,\"368\":1,\"369\":2,\"371\":1,\"372\":2,\"375\":4,\"376\":3,\"377\":2,\"378\":2,\"379\":3,\"380\":5,\"382\":1,\"383\":3,\"384\":3,\"385\":3,\"386\":2,\"387\":2,\"388\":1,\"389\":2,\"391\":6,\"392\":1,\"393\":2,\"395\":6,\"396\":3,\"397\":6,\"398\":4,\"399\":8,\"400\":8,\"401\":1,\"402\":10,\"405\":1,\"406\":11,\"411\":1,\"412\":4,\"413\":3,\"414\":14,\"416\":7,\"417\":8,\"418\":9,\"419\":5,\"420\":2,\"421\":4,\"422\":1,\"424\":4,\"425\":3,\"426\":2,\"429\":2,\"431\":1,\"432\":4,\"433\":2,\"434\":1,\"435\":1,\"436\":3,\"437\":3,\"438\":1,\"439\":2,\"440\":2,\"441\":8,\"442\":2,\"443\":2,\"445\":2,\"446\":2,\"447\":1,\"448\":2,\"449\":2,\"450\":3,\"451\":9,\"452\":1,\"454\":2,\"455\":2,\"456\":2,\"457\":2,\"458\":2,\"459\":6,\"460\":3,\"462\":8,\"464\":2,\"465\":1,\"466\":3,\"467\":10,\"468\":9,\"469\":5,\"470\":5,\"471\":16,\"472\":9,\"475\":6,\"476\":3,\"477\":8,\"478\":5,\"479\":5,\"480\":2,\"481\":11,\"482\":12,\"484\":14,\"485\":9,\"486\":14,\"487\":1,\"489\":2,\"490\":3,\"491\":2,\"496\":4,\"498\":1,\"499\":3,\"503\":1,\"513\":3,\"518\":5,\"520\":6,\"521\":13,\"522\":5,\"523\":11,\"524\":4,\"525\":4,\"527\":10,\"530\":1,\"531\":2,\"532\":1,\"533\":7,\"534\":1,\"535\":1,\"536\":9,\"537\":1,\"538\":1,\"539\":2,\"540\":1,\"541\":2,\"542\":2,\"543\":2,\"545\":1,\"546\":1,\"547\":6,\"550\":2,\"551\":5,\"552\":1,\"553\":3,\"555\":3,\"556\":3,\"557\":4,\"559\":2,\"560\":4,\"566\":1,\"567\":19,\"568\":4,\"571\":4,\"572\":2,\"573\":6,\"574\":6,\"575\":4,\"577\":5,\"578\":10,\"580\":1,\"581\":9,\"582\":9,\"583\":10,\"584\":4,\"585\":16,\"587\":30,\"588\":7,\"591\":2,\"592\":3,\"594\":2,\"595\":4,\"598\":3,\"600\":1,\"601\":2,\"602\":2,\"603\":14,\"604\":1,\"605\":3,\"606\":15,\"607\":10,\"608\":2,\"618\":3,\"619\":1,\"620\":1,\"621\":2,\"622\":1,\"623\":1,\"624\":2,\"625\":1,\"627\":2,\"628\":1,\"629\":1,\"635\":3,\"638\":1,\"639\":1,\"641\":1,\"642\":1,\"644\":1,\"645\":4,\"646\":3,\"647\":1,\"648\":3,\"649\":4,\"654\":1,\"655\":1,\"656\":1,\"657\":1,\"658\":1,\"659\":1,\"660\":1,\"661\":1,\"662\":1,\"663\":1,\"664\":1,\"665\":1,\"666\":1,\"667\":1,\"668\":1,\"669\":1,\"670\":1,\"671\":1,\"672\":1,\"675\":2,\"676\":2,\"677\":2,\"678\":2,\"679\":2,\"680\":2,\"681\":2,\"682\":3,\"684\":1,\"685\":1,\"686\":1,\"687\":1,\"688\":4,\"689\":1,\"692\":2,\"693\":2,\"694\":2,\"695\":2,\"696\":1,\"697\":2,\"698\":2,\"699\":2,\"700\":2,\"701\":1,\"704\":2,\"705\":2,\"706\":6,\"707\":2,\"708\":3,\"709\":2,\"710\":5,\"711\":3,\"712\":7,\"713\":6,\"714\":2,\"715\":4,\"716\":5,\"717\":5,\"718\":6,\"719\":2,\"720\":2,\"721\":2,\"723\":3,\"725\":5,\"727\":1,\"728\":3,\"733\":3,\"734\":3,\"736\":4,\"737\":12,\"740\":1,\"741\":2,\"742\":2,\"743\":2,\"748\":2,\"749\":2,\"750\":2,\"751\":6,\"752\":2,\"753\":3,\"754\":2,\"755\":2,\"756\":2,\"779\":1,\"781\":1,\"782\":2,\"783\":2,\"784\":2,\"785\":2,\"791\":1,\"792\":5,\"793\":2,\"794\":1,\"798\":1,\"805\":2,\"812\":5,\"813\":3,\"817\":1,\"820\":3,\"823\":6,\"824\":6,\"826\":4,\"827\":3,\"828\":6,\"829\":6,\"830\":2,\"833\":1,\"834\":1,\"835\":1,\"839\":5,\"840\":4,\"841\":1,\"842\":1,\"843\":3,\"847\":1,\"851\":2,\"852\":1,\"855\":1,\"856\":1,\"863\":2,\"866\":2,\"869\":1,\"870\":1,\"871\":1,\"872\":1,\"873\":1,\"874\":2,\"875\":3,\"876\":1,\"877\":2,\"878\":2,\"879\":1,\"882\":1,\"885\":1,\"886\":1,\"887\":1,\"888\":1,\"894\":1,\"901\":3,\"902\":3,\"907\":2,\"909\":2,\"910\":2,\"911\":2,\"912\":2,\"914\":2,\"915\":2,\"916\":2,\"918\":2,\"919\":2,\"920\":2,\"942\":2,\"943\":2,\"944\":2,\"945\":2,\"946\":1,\"948\":1,\"949\":2,\"950\":2,\"951\":2,\"952\":7,\"953\":1,\"955\":2,\"956\":3,\"958\":1,\"959\":1,\"960\":5,\"965\":2,\"968\":3,\"969\":2,\"970\":3,\"971\":3,\"975\":1,\"977\":2,\"979\":1,\"980\":2,\"981\":22,\"982\":4,\"984\":2,\"985\":2,\"986\":3,\"988\":6,\"989\":3,\"990\":4,\"991\":3,\"992\":2,\"993\":3,\"994\":1,\"995\":2,\"996\":3,\"998\":1,\"999\":4,\"1000\":2,\"1002\":2,\"1003\":2,\"1007\":4,\"1008\":2,\"1011\":4,\"1016\":4,\"1019\":9,\"1020\":2,\"1021\":1,\"1025\":1,\"1026\":2,\"1027\":2,\"1030\":1,\"1032\":1,\"1033\":3,\"1034\":1,\"1036\":2,\"1037\":3,\"1038\":2,\"1039\":1,\"1040\":2,\"1041\":2,\"1042\":5,\"1046\":2,\"1047\":3,\"1048\":2,\"1049\":2,\"1051\":1,\"1052\":2,\"1053\":7,\"1054\":9,\"1056\":2,\"1058\":2,\"1059\":10,\"1060\":11,\"1061\":2,\"1062\":3,\"1063\":2,\"1065\":1,\"1066\":7,\"1067\":6,\"1069\":3,\"1070\":3,\"1071\":4,\"1073\":1,\"1074\":5,\"1075\":1,\"1077\":3,\"1079\":4,\"1080\":5,\"1082\":2,\"1083\":3,\"1089\":2,\"1091\":5,\"1093\":2,\"1095\":2,\"1096\":1,\"1097\":3,\"1098\":1,\"1099\":1,\"1100\":1,\"1101\":1,\"1102\":2,\"1104\":1,\"1106\":3,\"1107\":6,\"1111\":1,\"1112\":5,\"1114\":2,\"1115\":1,\"1116\":3,\"1117\":1,\"1119\":1,\"1120\":3,\"1121\":2,\"1122\":2,\"1123\":1,\"1125\":4,\"1126\":1,\"1128\":2,\"1132\":5,\"1137\":2,\"1138\":5,\"1139\":4,\"1140\":1,\"1145\":3,\"1147\":1,\"1148\":1,\"1149\":2,\"1152\":1,\"1153\":4,\"1154\":1,\"1157\":1,\"1158\":1,\"1159\":1,\"1160\":1,\"1161\":1,\"1162\":2,\"1165\":3,\"1167\":3,\"1168\":1,\"1169\":1,\"1171\":3,\"1173\":4,\"1175\":2,\"1177\":1,\"1178\":1}}],[\"fullswept\",{\"1\":{\"1117\":1}}],[\"fullsaveassociations\",{\"1\":{\"852\":1}}],[\"fullunswept\",{\"1\":{\"1117\":1}}],[\"fullpath\",{\"1\":{\"995\":2}}],[\"fulldatatypeof\",{\"1\":{\"863\":1}}],[\"fullnameencoder\",{\"1\":{\"840\":1}}],[\"fullname\",{\"1\":{\"202\":1}}],[\"fullmethod\",{\"1\":{\"165\":4}}],[\"full\",{\"1\":{\"37\":1,\"953\":1,\"1059\":1,\"1066\":1,\"1117\":1,\"1137\":1,\"1145\":1}}],[\"fuzzing\",{\"1\":{\"527\":1}}],[\"fuzzing来了解更多概念\",{\"1\":{\"527\":1}}],[\"fuzz参数再次执行\",{\"1\":{\"527\":1}}],[\"fuzz时\",{\"1\":{\"527\":1}}],[\"fuzzreverse\",{\"1\":{\"527\":26}}],[\"fuzzminimizetime\",{\"1\":{\"519\":1}}],[\"fuzztime参数限制时间\",{\"1\":{\"527\":1}}],[\"fuzztime\",{\"1\":{\"519\":1,\"527\":3}}],[\"fuzz\",{\"1\":{\"7\":1,\"15\":3,\"519\":1,\"527\":43,\"528\":1}}],[\"fuzzcache\",{\"1\":{\"7\":1,\"15\":2}}],[\"future\",{\"1\":{\"7\":1,\"113\":1}}],[\"fl\",{\"1\":{\"949\":2}}],[\"flushed\",{\"1\":{\"1140\":1}}],[\"flushedwork\",{\"1\":{\"1140\":2}}],[\"flushgen\",{\"1\":{\"1099\":1,\"1116\":2}}],[\"flush\",{\"1\":{\"340\":2,\"1137\":1}}],[\"flutter\",{\"1\":{\"70\":1,\"73\":4}}],[\"floor\",{\"1\":{\"661\":1}}],[\"flow\",{\"1\":{\"550\":2,\"551\":2,\"552\":1,\"553\":3}}],[\"floats\",{\"1\":{\"575\":4,\"685\":3,\"687\":3,\"748\":2}}],[\"float32\",{\"1\":{\"184\":1,\"317\":1,\"432\":3,\"528\":1,\"538\":1,\"748\":1,\"1012\":1,\"1033\":1}}],[\"float\",{\"1\":{\"184\":1,\"538\":4,\"597\":1,\"632\":1,\"697\":4,\"862\":1}}],[\"float64bits\",{\"1\":{\"751\":3}}],[\"float64slice\",{\"1\":{\"687\":1}}],[\"float64s\",{\"1\":{\"685\":1}}],[\"float64构成了一个类型约束\",{\"1\":{\"571\":1}}],[\"float64\",{\"1\":{\"184\":1,\"216\":1,\"307\":1,\"317\":1,\"320\":1,\"384\":1,\"385\":1,\"386\":1,\"391\":1,\"395\":2,\"397\":2,\"398\":1,\"405\":2,\"406\":2,\"432\":3,\"528\":1,\"538\":1,\"571\":3,\"573\":3,\"575\":1,\"593\":4,\"595\":3,\"597\":1,\"632\":1,\"685\":1,\"687\":1,\"697\":1,\"698\":1,\"751\":7,\"791\":1,\"820\":1,\"834\":2,\"911\":1,\"1114\":2,\"1128\":1,\"1138\":4,\"1139\":6}}],[\"float64frombits\",{\"1\":{\"4\":1,\"751\":2}}],[\"flock\",{\"1\":{\"74\":2}}],[\"flosch\",{\"1\":{\"60\":1}}],[\"flamingo\",{\"1\":{\"1009\":1}}],[\"flame\",{\"1\":{\"560\":1}}],[\"flate\",{\"1\":{\"616\":1}}],[\"flat\",{\"1\":{\"559\":6}}],[\"flavor\",{\"1\":{\"205\":1}}],[\"flas\",{\"1\":{\"8\":1}}],[\"flag解析会在第一个非命令行参数之前停止\",{\"1\":{\"634\":1}}],[\"flag=xxx\",{\"1\":{\"634\":2}}],[\"flag包使得开发命令行工具更加简单\",{\"1\":{\"630\":1}}],[\"flags的状态为samesizegrow\",{\"1\":{\"1043\":1}}],[\"flags的参数之一\",{\"1\":{\"18\":1}}],[\"flags这类构建标志\",{\"1\":{\"18\":1}}],[\"flags\",{\"1\":{\"4\":1,\"8\":1,\"13\":1,\"14\":2,\"15\":2,\"17\":2,\"18\":1,\"19\":1,\"20\":2,\"21\":5,\"26\":1,\"34\":1,\"37\":3,\"38\":6,\"40\":1,\"64\":2,\"143\":3,\"504\":1,\"649\":1,\"909\":1,\"1030\":2,\"1036\":1,\"1037\":1,\"1038\":4,\"1042\":9,\"1043\":2,\"1107\":1,\"1137\":1,\"1145\":1}}],[\"flag\",{\"0\":{\"630\":1,\"649\":1},\"1\":{\"3\":3,\"18\":7,\"37\":1,\"64\":1,\"416\":1,\"429\":1,\"496\":3,\"504\":2,\"615\":2,\"616\":1,\"631\":1,\"633\":6,\"634\":2,\"636\":4,\"649\":2,\"1076\":1,\"1097\":1}}],[\"follows\",{\"1\":{\"498\":1}}],[\"following\",{\"1\":{\"38\":1,\"160\":1}}],[\"fogleman\",{\"1\":{\"76\":1,\"831\":3,\"832\":1,\"833\":1}}],[\"foxcpp\",{\"1\":{\"71\":1}}],[\"fossil\",{\"1\":{\"18\":1,\"493\":1}}],[\"font\",{\"1\":{\"17\":1}}],[\"found<\",{\"1\":{\"989\":2,\"990\":1}}],[\"foundation\",{\"1\":{\"146\":1}}],[\"found\",{\"0\":{\"959\":1},\"1\":{\"7\":2,\"17\":5,\"18\":1,\"19\":6,\"166\":2,\"167\":5,\"168\":5,\"213\":1,\"513\":1,\"559\":1,\"708\":4,\"952\":4,\"1120\":1,\"1180\":1}}],[\"four\",{\"1\":{\"4\":1}}],[\"foodbar\",{\"1\":{\"828\":2}}],[\"fooer\",{\"1\":{\"826\":3}}],[\"foobarbaz\",{\"1\":{\"823\":14}}],[\"foobar\",{\"1\":{\"799\":1,\"828\":7,\"830\":4}}],[\"foo\",{\"1\":{\"7\":2,\"129\":1,\"192\":3,\"296\":2,\"809\":2,\"823\":9,\"826\":3,\"827\":8,\"828\":6,\"830\":4,\"840\":2,\"1014\":2}}],[\"forward\",{\"1\":{\"646\":1}}],[\"forever\",{\"1\":{\"1066\":1}}],[\"foreachp\",{\"1\":{\"1140\":1,\"1145\":1}}],[\"foreach\",{\"1\":{\"582\":1}}],[\"foreignkey\",{\"1\":{\"860\":8,\"862\":1,\"891\":1,\"892\":3,\"893\":4}}],[\"foreign\",{\"1\":{\"233\":2}}],[\"for循环\",{\"1\":{\"369\":1,\"471\":1}}],[\"for语句可以被当作while来使用\",{\"1\":{\"353\":1}}],[\"for之类的语法规则\",{\"1\":{\"96\":1}}],[\"fork\",{\"1\":{\"62\":1,\"65\":1,\"509\":5}}],[\"fortran\",{\"1\":{\"21\":2}}],[\"fortest\",{\"1\":{\"21\":1}}],[\"forcegc\",{\"1\":{\"1132\":5}}],[\"forcegchelper\",{\"1\":{\"1132\":1}}],[\"forcegchelper函数\",{\"1\":{\"1132\":1}}],[\"forcegcperiod常量决定\",{\"1\":{\"1132\":1}}],[\"forcegcperiod\",{\"1\":{\"1132\":1}}],[\"force\",{\"1\":{\"16\":3,\"141\":1,\"1086\":1,\"1132\":1}}],[\"formdata\",{\"1\":{\"1012\":1}}],[\"formfile\",{\"1\":{\"984\":1}}],[\"formb\",{\"1\":{\"975\":3}}],[\"formbinding\",{\"1\":{\"971\":1}}],[\"forma`\",{\"1\":{\"975\":1}}],[\"forma\",{\"1\":{\"975\":1}}],[\"formatjson\",{\"1\":{\"953\":1}}],[\"formatcomplex\",{\"1\":{\"700\":4}}],[\"formatfloat\",{\"1\":{\"698\":7}}],[\"formatbool\",{\"1\":{\"695\":3}}],[\"format的调用格式是否符合正确的语法\",{\"1\":{\"37\":1}}],[\"formatting\",{\"1\":{\"17\":3}}],[\"formats\",{\"1\":{\"17\":1,\"798\":1}}],[\"format\",{\"0\":{\"21\":1},\"1\":{\"3\":1,\"20\":1,\"37\":2,\"168\":2,\"200\":1,\"233\":1,\"344\":1,\"396\":3,\"397\":2,\"485\":2,\"559\":2,\"616\":1,\"739\":3,\"840\":1,\"981\":1,\"1007\":1,\"1011\":2,\"1030\":1}}],[\"formmultipartbinding\",{\"1\":{\"971\":1}}],[\"formmultipart\",{\"1\":{\"971\":1,\"975\":1}}],[\"formpostbinding\",{\"1\":{\"971\":1}}],[\"formpost\",{\"1\":{\"971\":1,\"975\":1}}],[\"form\",{\"1\":{\"3\":1,\"10\":1,\"107\":2,\"108\":2,\"112\":2,\"970\":10,\"971\":3,\"973\":2,\"975\":1,\"977\":2,\"984\":1,\"985\":5}}],[\"for\",{\"0\":{\"354\":1,\"355\":1,\"470\":1},\"1\":{\"3\":3,\"4\":7,\"7\":9,\"8\":1,\"9\":2,\"13\":1,\"14\":3,\"15\":1,\"16\":2,\"17\":3,\"18\":2,\"19\":1,\"20\":1,\"21\":10,\"22\":4,\"28\":1,\"31\":2,\"32\":1,\"33\":1,\"34\":3,\"37\":7,\"38\":1,\"112\":1,\"114\":3,\"115\":3,\"117\":1,\"133\":2,\"137\":2,\"145\":2,\"158\":4,\"159\":4,\"164\":1,\"167\":1,\"175\":2,\"198\":1,\"205\":1,\"216\":2,\"219\":2,\"233\":1,\"239\":1,\"298\":1,\"312\":3,\"324\":1,\"344\":1,\"346\":1,\"353\":1,\"354\":8,\"355\":9,\"356\":4,\"357\":4,\"369\":3,\"370\":3,\"380\":5,\"386\":2,\"387\":1,\"388\":1,\"389\":3,\"399\":2,\"401\":3,\"406\":1,\"417\":1,\"418\":2,\"424\":2,\"428\":2,\"446\":1,\"448\":1,\"451\":4,\"452\":1,\"456\":1,\"459\":1,\"462\":4,\"467\":2,\"470\":9,\"471\":4,\"472\":1,\"476\":1,\"477\":4,\"478\":1,\"479\":1,\"480\":1,\"481\":2,\"482\":4,\"484\":1,\"485\":1,\"486\":4,\"490\":1,\"503\":1,\"504\":2,\"524\":1,\"525\":4,\"526\":3,\"527\":5,\"536\":2,\"539\":3,\"547\":1,\"551\":1,\"552\":2,\"553\":4,\"555\":2,\"557\":1,\"558\":1,\"559\":4,\"560\":3,\"561\":3,\"578\":2,\"580\":1,\"581\":2,\"582\":9,\"583\":3,\"584\":4,\"585\":4,\"587\":9,\"588\":9,\"682\":3,\"725\":4,\"727\":1,\"733\":1,\"734\":1,\"742\":1,\"753\":2,\"755\":1,\"802\":1,\"810\":2,\"821\":1,\"834\":1,\"841\":1,\"848\":2,\"881\":2,\"882\":1,\"893\":1,\"899\":4,\"904\":1,\"942\":2,\"943\":2,\"944\":4,\"945\":2,\"946\":2,\"948\":2,\"949\":1,\"950\":1,\"951\":2,\"952\":2,\"961\":1,\"966\":1,\"977\":1,\"985\":1,\"995\":1,\"1003\":1,\"1009\":2,\"1019\":1,\"1024\":2,\"1025\":1,\"1027\":2,\"1028\":3,\"1030\":4,\"1034\":1,\"1035\":1,\"1036\":2,\"1037\":2,\"1038\":3,\"1039\":4,\"1040\":3,\"1042\":3,\"1047\":2,\"1048\":1,\"1049\":1,\"1050\":1,\"1052\":2,\"1053\":3,\"1055\":3,\"1059\":1,\"1061\":3,\"1067\":8,\"1069\":1,\"1073\":3,\"1074\":1,\"1075\":1,\"1076\":1,\"1079\":1,\"1080\":2,\"1086\":2,\"1087\":2,\"1088\":1,\"1089\":4,\"1091\":1,\"1092\":1,\"1096\":1,\"1097\":3,\"1098\":1,\"1099\":2,\"1100\":1,\"1101\":2,\"1104\":2,\"1106\":1,\"1107\":3,\"1115\":1,\"1116\":1,\"1117\":2,\"1118\":7,\"1119\":1,\"1120\":1,\"1122\":3,\"1132\":2,\"1136\":1,\"1137\":2,\"1138\":2,\"1139\":3,\"1145\":1,\"1147\":1,\"1148\":1,\"1149\":1,\"1153\":1,\"1155\":4,\"1159\":2,\"1160\":1,\"1165\":3,\"1168\":1,\"1169\":1,\"1171\":1,\"1175\":1,\"1177\":2,\"1178\":1}}],[\"finalizer\",{\"1\":{\"1086\":1,\"1131\":1}}],[\"finalsize\",{\"1\":{\"995\":2}}],[\"final\",{\"1\":{\"823\":1}}],[\"finally这种语句\",{\"1\":{\"598\":1}}],[\"finished\",{\"1\":{\"521\":13,\"522\":4,\"523\":7,\"1056\":1,\"1063\":4}}],[\"findobject\",{\"1\":{\"1137\":1}}],[\"findoneandreplace\",{\"1\":{\"227\":1}}],[\"findone\",{\"1\":{\"224\":2}}],[\"findrunnablegcworker函数来唤醒休眠的\",{\"1\":{\"1138\":1}}],[\"findrunnablegcworker\",{\"1\":{\"1138\":3}}],[\"findrunnable和runtime\",{\"1\":{\"1104\":1}}],[\"findrunnable\",{\"1\":{\"1104\":1,\"1138\":1}}],[\"findstringsubmatch\",{\"1\":{\"1016\":1}}],[\"finduser\",{\"1\":{\"968\":4,\"969\":5}}],[\"findinbatches\",{\"1\":{\"849\":1}}],[\"find\",{\"0\":{\"873\":1},\"1\":{\"20\":1,\"37\":1,\"225\":9,\"416\":1,\"587\":3,\"849\":2,\"869\":2,\"871\":1,\"873\":2,\"874\":1,\"875\":3,\"876\":2,\"877\":1,\"878\":1,\"879\":1,\"880\":2,\"881\":2,\"894\":1,\"896\":3,\"898\":2,\"899\":3}}],[\"fifo\",{\"1\":{\"416\":1,\"465\":1}}],[\"fibn\",{\"1\":{\"583\":2}}],[\"fibonacci\",{\"1\":{\"581\":3,\"582\":2,\"583\":2}}],[\"fib\",{\"1\":{\"399\":5,\"583\":2}}],[\"fiber\",{\"1\":{\"51\":2,\"1009\":1}}],[\"firstname\",{\"1\":{\"948\":4,\"951\":9}}],[\"firstpassword\",{\"1\":{\"946\":7}}],[\"first\",{\"0\":{\"869\":1},\"1\":{\"346\":2,\"527\":18,\"723\":2,\"725\":3,\"730\":2,\"869\":2,\"874\":2,\"875\":4,\"884\":1,\"885\":1,\"886\":1,\"888\":3,\"896\":2,\"897\":2,\"898\":4,\"1030\":1,\"1037\":1,\"1047\":1,\"1057\":1,\"1100\":1,\"1112\":7,\"1114\":1,\"1117\":1,\"1121\":1}}],[\"fizz\",{\"1\":{\"201\":3}}],[\"fielderror\",{\"1\":{\"952\":3}}],[\"fieldexcludes\",{\"1\":{\"931\":1}}],[\"fieldlevel\",{\"1\":{\"949\":1}}],[\"fieldcontains\",{\"1\":{\"931\":1}}],[\"fieldnames\",{\"1\":{\"828\":1}}],[\"fieldnamemapping\",{\"1\":{\"812\":2,\"813\":1}}],[\"fieldslice\",{\"1\":{\"1076\":1}}],[\"fieldsfunc\",{\"1\":{\"710\":2}}],[\"fields\",{\"1\":{\"710\":2,\"1030\":1}}],[\"fieldbyname\",{\"1\":{\"448\":2,\"449\":2,\"450\":1}}],[\"fielddescriptor\",{\"1\":{\"202\":1}}],[\"field\",{\"1\":{\"167\":1,\"186\":1,\"200\":1,\"448\":6,\"449\":2,\"540\":2,\"838\":1,\"863\":8,\"926\":4,\"934\":1,\"942\":2,\"943\":2,\"944\":4,\"945\":2,\"946\":2,\"948\":2,\"949\":2,\"950\":1,\"951\":2,\"952\":7,\"977\":1}}],[\"fill\",{\"1\":{\"587\":4,\"833\":1,\"834\":1}}],[\"filter\",{\"1\":{\"582\":1,\"587\":6}}],[\"filters\",{\"1\":{\"58\":1}}],[\"file=\",{\"1\":{\"984\":1}}],[\"fileattachment\",{\"1\":{\"981\":1,\"986\":1}}],[\"fileattributes\",{\"1\":{\"416\":1}}],[\"filefromfs\",{\"1\":{\"981\":1}}],[\"filed\",{\"1\":{\"938\":1}}],[\"filepath\",{\"1\":{\"426\":5,\"616\":1,\"790\":1,\"957\":1,\"968\":6,\"981\":3,\"999\":1,\"1016\":1}}],[\"file提供的方法readfrom\",{\"1\":{\"419\":1}}],[\"file结构体提供了以下几种方法以供写入数据\",{\"1\":{\"418\":1}}],[\"file类型提供了以下几个公开的方法\",{\"1\":{\"417\":1}}],[\"filetype\",{\"1\":{\"416\":1}}],[\"fileinfo\",{\"1\":{\"416\":2,\"426\":1}}],[\"filemode\",{\"1\":{\"416\":1,\"418\":1,\"425\":2,\"426\":1}}],[\"filebox\",{\"1\":{\"81\":2}}],[\"filename=\",{\"1\":{\"986\":1}}],[\"filenames\",{\"1\":{\"736\":1}}],[\"filename\",{\"1\":{\"43\":1,\"792\":4,\"841\":1,\"981\":1,\"984\":2,\"985\":1,\"986\":10}}],[\"files=\",{\"1\":{\"985\":3}}],[\"filesystem\",{\"1\":{\"981\":1,\"999\":1}}],[\"filesizelow\",{\"1\":{\"416\":1}}],[\"filesizehigh\",{\"1\":{\"416\":1}}],[\"fileserver\",{\"1\":{\"41\":1}}],[\"files\",{\"1\":{\"7\":1,\"14\":2,\"16\":2,\"21\":22,\"37\":1,\"518\":1,\"817\":2,\"953\":1,\"985\":6,\"1010\":1,\"1011\":1}}],[\"file\",{\"1\":{\"3\":1,\"6\":1,\"7\":4,\"9\":2,\"14\":2,\"17\":4,\"18\":1,\"21\":3,\"31\":2,\"33\":1,\"34\":2,\"40\":1,\"41\":1,\"156\":1,\"193\":1,\"201\":2,\"330\":2,\"335\":1,\"416\":12,\"417\":13,\"418\":12,\"419\":2,\"424\":4,\"499\":6,\"504\":1,\"519\":1,\"527\":2,\"533\":1,\"583\":1,\"584\":3,\"598\":5,\"600\":4,\"814\":1,\"817\":1,\"818\":2,\"840\":1,\"936\":1,\"965\":1,\"981\":1,\"984\":5,\"985\":3}}],[\"fixallocchunk\",{\"1\":{\"1112\":3}}],[\"fixalloc\",{\"1\":{\"1112\":8,\"1118\":7}}],[\"fixedstack\",{\"1\":{\"1100\":1,\"1102\":1}}],[\"fixedstack<<\",{\"1\":{\"1100\":1}}],[\"fixed64\",{\"1\":{\"184\":1}}],[\"fixed32\",{\"1\":{\"184\":1}}],[\"fixed\",{\"1\":{\"16\":3,\"17\":1,\"844\":1}}],[\"fixes\",{\"1\":{\"16\":5}}],[\"fix修正\",{\"1\":{\"16\":1}}],[\"fixname\",{\"1\":{\"16\":2}}],[\"fix标志来传递参数以表明进行何种修改\",{\"1\":{\"16\":1}}],[\"fix命令就是为此而生的\",{\"1\":{\"16\":1}}],[\"fix\",{\"0\":{\"16\":1},\"1\":{\"2\":1,\"4\":1,\"14\":2,\"16\":10,\"18\":1,\"108\":1}}],[\"fmt|\",{\"1\":{\"26\":1}}],[\"fmt其实就是是gofmt\",{\"1\":{\"17\":1}}],[\"fmt命令加上\",{\"1\":{\"17\":1}}],[\"fmt命令实际上用到的是gofmt命令\",{\"1\":{\"17\":1}}],[\"fmt命令是\",{\"1\":{\"17\":1}}],[\"fmtcmd\",{\"1\":{\"4\":1}}],[\"fmt\",{\"0\":{\"17\":1,\"108\":1,\"339\":1,\"344\":1},\"1\":{\"2\":1,\"10\":2,\"12\":4,\"13\":3,\"16\":3,\"17\":14,\"20\":3,\"34\":3,\"37\":2,\"41\":2,\"44\":4,\"108\":2,\"111\":2,\"112\":2,\"114\":1,\"115\":2,\"145\":3,\"153\":2,\"165\":4,\"166\":9,\"175\":2,\"202\":1,\"205\":2,\"207\":1,\"208\":1,\"209\":1,\"210\":1,\"212\":1,\"213\":1,\"214\":1,\"215\":1,\"216\":4,\"221\":2,\"224\":1,\"225\":2,\"226\":2,\"227\":4,\"228\":2,\"234\":5,\"235\":3,\"236\":3,\"237\":3,\"238\":1,\"241\":3,\"246\":1,\"247\":2,\"248\":1,\"249\":2,\"252\":1,\"254\":1,\"255\":1,\"256\":2,\"258\":3,\"292\":3,\"295\":2,\"297\":2,\"307\":1,\"309\":2,\"312\":1,\"332\":2,\"333\":6,\"334\":2,\"339\":2,\"340\":1,\"341\":33,\"344\":4,\"345\":2,\"346\":1,\"348\":1,\"349\":2,\"350\":3,\"352\":2,\"354\":4,\"355\":4,\"356\":2,\"357\":2,\"361\":1,\"362\":6,\"365\":1,\"366\":3,\"367\":4,\"368\":3,\"369\":2,\"370\":3,\"371\":4,\"372\":3,\"375\":4,\"376\":5,\"377\":4,\"378\":2,\"379\":3,\"380\":5,\"382\":1,\"383\":7,\"384\":4,\"385\":4,\"386\":2,\"387\":2,\"388\":1,\"389\":1,\"391\":9,\"392\":1,\"397\":1,\"399\":2,\"400\":9,\"401\":1,\"402\":11,\"407\":2,\"408\":1,\"411\":1,\"412\":3,\"413\":2,\"414\":6,\"416\":10,\"417\":10,\"418\":9,\"419\":11,\"420\":2,\"421\":4,\"424\":5,\"425\":2,\"431\":1,\"432\":1,\"433\":4,\"434\":5,\"435\":4,\"436\":2,\"437\":2,\"438\":1,\"439\":1,\"440\":1,\"441\":10,\"442\":2,\"443\":1,\"445\":4,\"446\":1,\"448\":4,\"449\":2,\"450\":2,\"451\":8,\"452\":2,\"454\":1,\"455\":1,\"456\":1,\"457\":1,\"458\":1,\"459\":2,\"460\":4,\"462\":15,\"465\":1,\"466\":2,\"467\":10,\"468\":4,\"469\":1,\"470\":3,\"471\":20,\"472\":7,\"476\":2,\"477\":8,\"478\":2,\"479\":2,\"480\":2,\"481\":5,\"482\":5,\"484\":2,\"485\":2,\"486\":5,\"487\":1,\"489\":2,\"491\":2,\"496\":4,\"497\":1,\"498\":2,\"513\":2,\"518\":3,\"520\":5,\"527\":5,\"531\":4,\"532\":2,\"535\":2,\"536\":2,\"539\":3,\"540\":3,\"541\":5,\"542\":3,\"543\":5,\"545\":2,\"546\":2,\"547\":3,\"553\":3,\"566\":1,\"567\":9,\"568\":8,\"572\":1,\"578\":3,\"581\":1,\"582\":7,\"583\":4,\"584\":7,\"585\":8,\"587\":4,\"591\":2,\"593\":1,\"594\":3,\"595\":2,\"596\":2,\"597\":3,\"598\":4,\"600\":1,\"602\":1,\"603\":6,\"606\":30,\"607\":9,\"608\":2,\"616\":1,\"619\":2,\"620\":1,\"622\":2,\"623\":3,\"625\":2,\"627\":2,\"628\":2,\"629\":5,\"636\":1,\"638\":2,\"639\":1,\"645\":2,\"654\":1,\"655\":1,\"656\":1,\"657\":2,\"658\":1,\"659\":2,\"660\":2,\"661\":1,\"662\":1,\"663\":2,\"664\":2,\"665\":1,\"666\":2,\"667\":1,\"668\":2,\"669\":2,\"670\":2,\"671\":2,\"672\":2,\"675\":2,\"676\":3,\"677\":3,\"678\":3,\"679\":3,\"680\":2,\"681\":4,\"682\":2,\"685\":1,\"687\":1,\"688\":1,\"692\":1,\"693\":1,\"694\":3,\"695\":2,\"696\":2,\"697\":2,\"698\":8,\"699\":2,\"700\":5,\"701\":1,\"704\":2,\"705\":4,\"706\":8,\"707\":3,\"708\":1,\"709\":3,\"710\":2,\"711\":2,\"712\":5,\"713\":3,\"714\":2,\"715\":4,\"716\":4,\"717\":4,\"718\":5,\"719\":2,\"720\":1,\"721\":2,\"723\":3,\"728\":5,\"737\":1,\"739\":3,\"740\":3,\"741\":1,\"742\":1,\"743\":2,\"748\":7,\"749\":5,\"750\":3,\"751\":9,\"752\":2,\"753\":2,\"754\":1,\"755\":1,\"756\":1,\"779\":2,\"780\":1,\"781\":1,\"782\":4,\"783\":5,\"784\":2,\"785\":4,\"793\":1,\"794\":1,\"812\":6,\"813\":2,\"817\":8,\"820\":6,\"847\":6,\"899\":5,\"942\":13,\"943\":1,\"944\":2,\"945\":2,\"946\":2,\"948\":1,\"949\":3,\"950\":2,\"951\":1,\"952\":5,\"953\":1,\"955\":2,\"956\":3,\"960\":3,\"971\":2,\"974\":1,\"993\":1,\"995\":1,\"996\":1,\"1002\":2,\"1007\":1,\"1011\":4,\"1019\":13,\"1028\":1,\"1051\":2,\"1052\":2,\"1054\":6,\"1055\":1,\"1056\":2,\"1069\":1,\"1070\":11,\"1071\":4,\"1077\":1,\"1083\":3,\"1149\":2,\"1165\":2,\"1171\":3,\"1175\":2}}],[\"ep\",{\"1\":{\"1059\":11,\"1060\":20,\"1066\":2}}],[\"erlang\",{\"1\":{\"1084\":3}}],[\"er\",{\"1\":{\"953\":3}}],[\"errb2\",{\"1\":{\"975\":2}}],[\"errb\",{\"1\":{\"975\":2}}],[\"erra\",{\"1\":{\"975\":2}}],[\"errata\",{\"1\":{\"77\":1}}],[\"errinfoformat\",{\"1\":{\"952\":2}}],[\"errinvalid\",{\"1\":{\"600\":2}}],[\"errtokennotvalidyet\",{\"1\":{\"783\":1}}],[\"errtokenexpired\",{\"1\":{\"783\":1}}],[\"errtokenmalformed\",{\"1\":{\"783\":1}}],[\"errdeadlineexceeded\",{\"1\":{\"600\":2}}],[\"errdetails\",{\"1\":{\"168\":2}}],[\"errclosed\",{\"1\":{\"600\":2}}],[\"errexist\",{\"1\":{\"600\":2}}],[\"errput\",{\"1\":{\"840\":3}}],[\"errpermission\",{\"1\":{\"600\":2}}],[\"errprintf\",{\"1\":{\"397\":1}}],[\"erros\",{\"1\":{\"600\":1}}],[\"errormessage\",{\"1\":{\"1007\":1}}],[\"errortypebind\",{\"1\":{\"971\":1}}],[\"errorlevel\",{\"1\":{\"842\":2}}],[\"errorlog\",{\"1\":{\"644\":1}}],[\"erroroutputpaths\",{\"1\":{\"839\":3,\"840\":1}}],[\"error本身是一个预定义的接口\",{\"1\":{\"599\":1}}],[\"erroring\",{\"1\":{\"485\":1}}],[\"errorinfo\",{\"1\":{\"168\":2}}],[\"errorf函数来进行创建\",{\"1\":{\"602\":1}}],[\"errorf内部使用的是t\",{\"1\":{\"521\":1}}],[\"errorf等同于t\",{\"1\":{\"521\":1}}],[\"errorf\",{\"1\":{\"152\":1,\"158\":2,\"168\":4,\"175\":1,\"521\":3,\"527\":4,\"600\":1,\"602\":1,\"603\":2,\"782\":1,\"783\":1,\"1024\":1,\"1061\":1}}],[\"errors包提供了几个方便函数用于处理错误\",{\"1\":{\"603\":1}}],[\"errorstring结构体\",{\"1\":{\"601\":1}}],[\"errorstring\",{\"1\":{\"601\":3,\"1025\":2}}],[\"errorstatus\",{\"1\":{\"194\":1}}],[\"errorsas\",{\"1\":{\"37\":1}}],[\"errors\",{\"1\":{\"17\":1,\"21\":1,\"28\":3,\"37\":2,\"107\":1,\"158\":4,\"164\":2,\"167\":2,\"397\":1,\"417\":1,\"513\":3,\"527\":1,\"571\":1,\"598\":1,\"600\":2,\"602\":1,\"603\":9,\"682\":2,\"783\":3,\"813\":1,\"823\":2,\"952\":2}}],[\"error\",{\"0\":{\"599\":1},\"1\":{\"9\":2,\"14\":1,\"17\":1,\"21\":9,\"24\":1,\"41\":3,\"108\":1,\"116\":1,\"117\":3,\"144\":1,\"145\":2,\"152\":2,\"153\":1,\"158\":14,\"159\":9,\"162\":6,\"163\":1,\"164\":2,\"165\":8,\"166\":11,\"167\":7,\"168\":17,\"170\":1,\"174\":1,\"175\":1,\"205\":1,\"232\":1,\"238\":3,\"242\":2,\"330\":1,\"344\":3,\"389\":2,\"396\":3,\"397\":1,\"416\":3,\"417\":5,\"418\":6,\"419\":2,\"420\":1,\"421\":2,\"424\":2,\"425\":2,\"426\":3,\"470\":1,\"472\":1,\"474\":2,\"475\":1,\"477\":1,\"485\":1,\"486\":1,\"496\":1,\"504\":1,\"513\":2,\"527\":1,\"533\":1,\"553\":1,\"571\":1,\"584\":2,\"596\":1,\"598\":3,\"599\":5,\"600\":5,\"601\":4,\"602\":5,\"603\":20,\"618\":3,\"621\":2,\"624\":2,\"627\":1,\"675\":1,\"676\":1,\"677\":1,\"678\":1,\"679\":1,\"680\":1,\"692\":1,\"694\":1,\"697\":1,\"699\":1,\"723\":2,\"725\":1,\"728\":1,\"733\":2,\"734\":2,\"736\":3,\"751\":1,\"782\":1,\"783\":1,\"784\":1,\"785\":1,\"792\":4,\"797\":2,\"812\":2,\"813\":3,\"823\":4,\"824\":4,\"829\":2,\"851\":4,\"861\":9,\"863\":21,\"866\":1,\"869\":1,\"870\":1,\"882\":1,\"901\":6,\"902\":6,\"907\":1,\"909\":1,\"910\":1,\"911\":1,\"912\":1,\"914\":1,\"915\":1,\"916\":1,\"918\":1,\"919\":1,\"920\":1,\"942\":2,\"943\":2,\"944\":4,\"945\":2,\"946\":2,\"948\":2,\"949\":1,\"950\":1,\"951\":2,\"952\":1,\"960\":1,\"971\":1,\"977\":1,\"1069\":2,\"1077\":1,\"1112\":1}}],[\"errnodeadline\",{\"1\":{\"600\":2}}],[\"errnotexist\",{\"1\":{\"600\":2}}],[\"errno\",{\"1\":{\"531\":4}}],[\"err\",{\"0\":{\"1184\":1},\"1\":{\"0\":1,\"16\":1,\"21\":2,\"41\":3,\"145\":21,\"153\":6,\"154\":6,\"158\":24,\"159\":32,\"163\":7,\"164\":4,\"165\":14,\"166\":26,\"167\":15,\"168\":8,\"170\":2,\"171\":2,\"174\":6,\"175\":9,\"205\":7,\"207\":6,\"208\":6,\"209\":6,\"210\":6,\"212\":6,\"213\":6,\"214\":6,\"215\":6,\"216\":18,\"221\":3,\"224\":3,\"225\":12,\"226\":6,\"227\":13,\"228\":6,\"229\":6,\"232\":1,\"234\":10,\"235\":8,\"236\":8,\"237\":8,\"238\":3,\"241\":4,\"344\":3,\"396\":1,\"416\":11,\"417\":20,\"418\":17,\"419\":26,\"420\":3,\"421\":6,\"422\":8,\"424\":9,\"425\":3,\"426\":21,\"474\":3,\"475\":1,\"477\":6,\"478\":1,\"485\":2,\"496\":3,\"513\":6,\"520\":1,\"527\":4,\"531\":4,\"556\":9,\"583\":4,\"584\":13,\"598\":15,\"600\":2,\"602\":4,\"603\":13,\"607\":9,\"619\":3,\"620\":3,\"621\":2,\"622\":3,\"623\":6,\"625\":3,\"627\":3,\"628\":3,\"629\":6,\"638\":4,\"639\":3,\"675\":4,\"676\":3,\"677\":6,\"678\":6,\"679\":6,\"680\":3,\"681\":6,\"682\":16,\"692\":2,\"694\":6,\"697\":4,\"721\":3,\"723\":4,\"725\":15,\"727\":3,\"733\":6,\"734\":18,\"736\":6,\"740\":6,\"779\":2,\"780\":2,\"781\":2,\"782\":4,\"783\":4,\"784\":2,\"785\":8,\"791\":6,\"797\":3,\"798\":3,\"805\":6,\"812\":11,\"813\":5,\"817\":3,\"823\":3,\"824\":12,\"829\":3,\"840\":3,\"847\":3,\"851\":6,\"852\":1,\"863\":1,\"866\":1,\"869\":1,\"870\":1,\"882\":4,\"901\":10,\"902\":12,\"942\":14,\"944\":4,\"945\":4,\"948\":2,\"951\":2,\"952\":7,\"953\":2,\"971\":4,\"974\":3,\"977\":3,\"984\":6,\"985\":2,\"1002\":2,\"1016\":2,\"1062\":2,\"1069\":15,\"1072\":3,\"1077\":3}}],[\"either\",{\"1\":{\"1073\":1}}],[\"eight\",{\"1\":{\"809\":2}}],[\"einval\",{\"1\":{\"531\":1}}],[\"eyj1c2vyijoimte0nte0iiwiaxnzijoiu2vydmvyiiwizxhwijoxnjczmdg4mdu2lcjuymyioje2nzmwodq0ntysimlhdci6mty3mza4ndq1nn0\",{\"1\":{\"784\":1}}],[\"eyj1c2vyijoimte0nte0iiwiaxnzijoiu2vydmvyiiwizxhwijoxnjczmdg1nzk2lcjuymyioje2nzmwodixotysimlhdci6mty3mza4mje5nn0\",{\"1\":{\"781\":1}}],[\"eyjpc3mioij0zxn0iiwizxhwijoxnte2mjm5mdiyfq\",{\"1\":{\"780\":1}}],[\"eyjpzci6mtizndu2lcjuyw1lijoiamfjayj9\",{\"1\":{\"779\":1,\"782\":1,\"783\":1}}],[\"eyjzdwiioiixmjm0nty3odkwiiwibmftzsi6ikpvag4grg9liiwiawf0ijoxnte2mjm5mdiyfq\",{\"1\":{\"774\":1}}],[\"eyjhbgcioijiuzi1niisinr5cci6ikpxvcj9\",{\"1\":{\"774\":1,\"779\":1,\"780\":1,\"781\":1,\"782\":1,\"783\":1,\"784\":1}}],[\"eyb\",{\"1\":{\"527\":1}}],[\"e2\",{\"1\":{\"763\":1}}],[\"e即指effect\",{\"1\":{\"763\":1}}],[\"et\",{\"1\":{\"1020\":7,\"1025\":9,\"1027\":1}}],[\"eth\",{\"1\":{\"934\":1}}],[\"etree\",{\"1\":{\"620\":1}}],[\"etcd\",{\"1\":{\"84\":3,\"175\":2,\"510\":1,\"614\":1}}],[\"etc\",{\"1\":{\"14\":1,\"140\":1,\"763\":1,\"1114\":1}}],[\"eog\",{\"1\":{\"559\":2}}],[\"eof\",{\"1\":{\"14\":2,\"17\":4,\"19\":1,\"158\":2,\"159\":4,\"164\":1,\"417\":1,\"682\":1}}],[\"eqfield=seconddpaswod\",{\"1\":{\"946\":1}}],[\"eqfield=secondpassword\",{\"1\":{\"946\":1}}],[\"eqfield\",{\"1\":{\"931\":1,\"946\":1}}],[\"eqcsfield\",{\"1\":{\"931\":1}}],[\"eq\",{\"1\":{\"728\":3,\"729\":1,\"731\":2,\"732\":1,\"935\":1}}],[\"equalfold\",{\"1\":{\"709\":4}}],[\"equal\",{\"1\":{\"521\":5,\"522\":1,\"523\":16,\"524\":2,\"526\":2,\"578\":2,\"587\":2,\"737\":1,\"1036\":1,\"1037\":2,\"1038\":1,\"1039\":1,\"1042\":1,\"1043\":1}}],[\"eqq+otexm5vhfbrbrepcsvqbvofip6kiz+mx5tuh7k=\",{\"1\":{\"6\":1}}],[\"ebpf\",{\"1\":{\"504\":1}}],[\"ebiten\",{\"1\":{\"72\":1}}],[\"ebitengine\",{\"1\":{\"72\":1}}],[\"e0a39a4cb421\",{\"1\":{\"503\":2,\"509\":1}}],[\"e0ab4d29\",{\"1\":{\"140\":1}}],[\"e6fbc62\",{\"1\":{\"499\":3}}],[\"eft\",{\"1\":{\"759\":1,\"760\":1,\"763\":11,\"764\":1,\"765\":1,\"766\":1,\"767\":1}}],[\"eface\",{\"1\":{\"428\":1,\"432\":3,\"433\":6}}],[\"efficient\",{\"1\":{\"923\":1}}],[\"eff\",{\"1\":{\"236\":2,\"237\":2}}],[\"effect定义\",{\"1\":{\"763\":1}}],[\"effects如下\",{\"1\":{\"763\":1}}],[\"effects\",{\"1\":{\"763\":1}}],[\"effect\",{\"1\":{\"7\":1,\"759\":2,\"763\":1,\"764\":1,\"765\":1,\"766\":1,\"767\":1}}],[\"effectively\",{\"1\":{\"1089\":1}}],[\"effective\",{\"0\":{\"288\":1},\"1\":{\"7\":2,\"99\":2,\"288\":1,\"370\":1}}],[\"e和n\",{\"1\":{\"399\":1}}],[\"e7\",{\"1\":{\"380\":1}}],[\"e4\",{\"1\":{\"380\":1,\"527\":1}}],[\"e相同\",{\"1\":{\"341\":1}}],[\"e+0i\",{\"1\":{\"303\":1}}],[\"e+0\",{\"1\":{\"302\":1}}],[\"e164\",{\"1\":{\"934\":1}}],[\"e1\",{\"1\":{\"295\":1}}],[\"essential\",{\"0\":{\"1182\":1}}],[\"esc\",{\"1\":{\"1074\":1}}],[\"escnever\",{\"1\":{\"1074\":2}}],[\"escape\",{\"1\":{\"550\":2,\"551\":2,\"553\":1,\"1074\":1}}],[\"escapes\",{\"1\":{\"550\":1,\"551\":2,\"552\":2,\"553\":4}}],[\"es384\",{\"1\":{\"777\":1}}],[\"es256\",{\"1\":{\"777\":1}}],[\"es\",{\"1\":{\"205\":1,\"216\":1,\"217\":1}}],[\"es8+默认使用\",{\"1\":{\"205\":1}}],[\"es8\",{\"1\":{\"204\":2}}],[\"es512\",{\"1\":{\"777\":1}}],[\"es5\",{\"1\":{\"75\":1}}],[\"eureka\",{\"1\":{\"175\":2}}],[\"ewogicjuyw1lijoiy29uc3vsigp9\",{\"1\":{\"143\":3}}],[\"ecdsa\",{\"1\":{\"776\":1,\"777\":3}}],[\"ecdh\",{\"1\":{\"117\":1}}],[\"ecdh库\",{\"1\":{\"117\":1}}],[\"ecin\",{\"1\":{\"527\":1}}],[\"ecosystem\",{\"1\":{\"166\":2}}],[\"echo\",{\"1\":{\"40\":1,\"51\":2,\"140\":1,\"610\":1,\"1009\":1}}],[\"earlier\",{\"1\":{\"1078\":1,\"1120\":1}}],[\"easy\",{\"1\":{\"806\":2}}],[\"easyjson\",{\"1\":{\"63\":2}}],[\"eat即行为\",{\"1\":{\"760\":1}}],[\"eat\",{\"1\":{\"760\":1}}],[\"ea0xadu+shlu7x5o3gkhrpq1ikimrsihttpf0ybecua=\",{\"1\":{\"510\":1}}],[\"each\",{\"1\":{\"3\":1,\"4\":1,\"1138\":1}}],[\"eko\",{\"1\":{\"61\":1}}],[\"eknkc\",{\"1\":{\"60\":1}}],[\"ed25519\",{\"1\":{\"777\":1}}],[\"eddsa\",{\"1\":{\"777\":1}}],[\"eddycjy\",{\"1\":{\"102\":1}}],[\"ed57c72ffdec\",{\"1\":{\"141\":3}}],[\"edwingeng\",{\"1\":{\"58\":1}}],[\"edit子命令的作用同go\",{\"1\":{\"34\":1}}],[\"edit是一个命令行接口\",{\"1\":{\"26\":1}}],[\"editing\",{\"1\":{\"26\":1,\"34\":2}}],[\"edit\",{\"0\":{\"26\":1,\"34\":1},\"1\":{\"22\":3,\"26\":3,\"31\":2,\"34\":7,\"108\":1,\"111\":1,\"112\":1,\"506\":1,\"514\":1,\"823\":1,\"824\":1}}],[\"editor进行测试\",{\"1\":{\"764\":1}}],[\"editor\",{\"1\":{\"17\":1}}],[\"emc\",{\"1\":{\"788\":1}}],[\"employee\",{\"1\":{\"185\":1,\"407\":2,\"736\":2}}],[\"emptymspan\",{\"1\":{\"1116\":2}}],[\"emptyone\",{\"1\":{\"1030\":1,\"1039\":2}}],[\"emptyrest\",{\"1\":{\"1030\":1,\"1036\":1,\"1038\":1,\"1039\":4,\"1040\":1}}],[\"emptyctx通常是用来当作最顶层的上下文\",{\"1\":{\"475\":1}}],[\"emptyctx的底层类型实际上是一个int\",{\"1\":{\"475\":1}}],[\"emptyctx就可以通过context\",{\"1\":{\"475\":1}}],[\"emptyctx就是空的上下文\",{\"1\":{\"475\":1}}],[\"emptyctx\",{\"0\":{\"475\":1},\"1\":{\"473\":1,\"475\":7}}],[\"emptyinterface\",{\"1\":{\"428\":3}}],[\"emptyservice\",{\"1\":{\"197\":1}}],[\"empty\",{\"0\":{\"197\":1},\"1\":{\"7\":1,\"197\":4,\"200\":1,\"411\":2,\"1024\":1,\"1051\":1,\"1060\":2,\"1061\":1,\"1066\":1,\"1104\":1,\"1120\":3,\"1139\":2}}],[\"emersion\",{\"1\":{\"71\":2}}],[\"email\",{\"1\":{\"71\":4,\"817\":2,\"934\":1,\"1011\":2}}],[\"emirpasic\",{\"1\":{\"58\":1}}],[\"embed指令来将一些静态文件嵌入到程序中\",{\"1\":{\"121\":1}}],[\"embed指令还支持全局变量的类型可以为\",{\"1\":{\"41\":1}}],[\"embed指令要求必须位于一个类型为embed\",{\"1\":{\"41\":1}}],[\"embed指令是\",{\"1\":{\"41\":1}}],[\"embedfiles\",{\"1\":{\"21\":1}}],[\"embed\",{\"0\":{\"41\":1},\"1\":{\"21\":3,\"39\":1,\"41\":12,\"736\":3}}],[\"embedpatterns\",{\"1\":{\"21\":2}}],[\"embeddedprefix\",{\"1\":{\"862\":1}}],[\"embedded\",{\"1\":{\"21\":1,\"862\":1}}],[\"e参数可以输出的更详细\",{\"1\":{\"17\":1}}],[\"eglconfig\",{\"1\":{\"16\":1}}],[\"eglconf\",{\"1\":{\"16\":1}}],[\"egldisplay\",{\"1\":{\"16\":1}}],[\"egl\",{\"1\":{\"16\":1}}],[\"e\",{\"0\":{\"665\":1},\"1\":{\"8\":1,\"9\":1,\"10\":1,\"17\":3,\"20\":1,\"24\":2,\"28\":4,\"36\":1,\"222\":4,\"258\":2,\"265\":1,\"270\":1,\"295\":2,\"324\":1,\"341\":5,\"349\":1,\"380\":3,\"399\":3,\"410\":1,\"539\":2,\"577\":4,\"578\":2,\"582\":4,\"585\":11,\"587\":44,\"601\":2,\"602\":4,\"606\":1,\"653\":1,\"698\":5,\"707\":1,\"710\":4,\"759\":1,\"762\":1,\"763\":3,\"764\":1,\"765\":1,\"766\":1,\"767\":1,\"793\":2,\"915\":2,\"934\":1,\"968\":4,\"969\":3,\"970\":4,\"971\":5,\"977\":3,\"980\":4,\"982\":3,\"984\":3,\"985\":4,\"986\":5,\"988\":3,\"989\":5,\"990\":7,\"991\":4,\"993\":5,\"994\":5,\"996\":5,\"1007\":3,\"1008\":3,\"1021\":1,\"1028\":2,\"1030\":1,\"1036\":4,\"1037\":4,\"1039\":4,\"1042\":15,\"1043\":1,\"1046\":4,\"1047\":14,\"1048\":7,\"1049\":2,\"1052\":1,\"1054\":1,\"1074\":5,\"1079\":4,\"1091\":1}}],[\"ele\",{\"1\":{\"441\":10,\"442\":4}}],[\"elem表示接收或发送元素的指针\",{\"1\":{\"1064\":1}}],[\"elem就是for\",{\"1\":{\"1037\":1}}],[\"elemtype\",{\"1\":{\"1024\":1,\"1030\":1,\"1057\":1,\"1058\":1,\"1059\":2,\"1060\":7,\"1067\":4}}],[\"elem\",{\"0\":{\"433\":1,\"440\":1},\"1\":{\"433\":4,\"436\":3,\"437\":3,\"440\":2,\"441\":2,\"442\":1,\"448\":2,\"449\":3,\"450\":1,\"451\":2,\"452\":1,\"454\":2,\"455\":2,\"458\":1,\"459\":1,\"1019\":2,\"1021\":3,\"1023\":1,\"1024\":2,\"1026\":1,\"1027\":4,\"1037\":5,\"1038\":9,\"1039\":3,\"1042\":3,\"1058\":7,\"1059\":7,\"1060\":3,\"1061\":1,\"1064\":1,\"1066\":4,\"1067\":12,\"1086\":1}}],[\"elemsize\",{\"1\":{\"1028\":1,\"1057\":1,\"1058\":1,\"1100\":1,\"1114\":1,\"1125\":2,\"1126\":1}}],[\"elems\",{\"1\":{\"365\":1,\"1025\":1,\"1030\":2,\"1032\":1}}],[\"elems是待添加的元素\",{\"1\":{\"365\":1}}],[\"elements\",{\"1\":{\"582\":1,\"1057\":1}}],[\"element\",{\"1\":{\"16\":2,\"550\":1,\"553\":1,\"1057\":1,\"1064\":1}}],[\"elapsed\",{\"1\":{\"527\":18}}],[\"elaticsearch\",{\"1\":{\"205\":1}}],[\"elastisearch\",{\"1\":{\"203\":1}}],[\"elastic\",{\"1\":{\"203\":2,\"204\":2,\"205\":1}}],[\"elasticsearch提供的\",{\"1\":{\"205\":1}}],[\"elasticsearch\",{\"0\":{\"203\":1},\"1\":{\"62\":3,\"203\":4,\"204\":2,\"205\":2}}],[\"elliptic\",{\"1\":{\"117\":1}}],[\"elf\",{\"1\":{\"8\":2,\"10\":3}}],[\"else的基础上创建更多的判断分支\",{\"1\":{\"349\":1}}],[\"else\",{\"0\":{\"348\":1,\"349\":1},\"1\":{\"7\":1,\"138\":1,\"158\":2,\"159\":1,\"164\":1,\"241\":1,\"298\":1,\"348\":4,\"349\":16,\"352\":1,\"383\":1,\"398\":1,\"399\":1,\"416\":5,\"417\":5,\"418\":2,\"419\":2,\"420\":1,\"421\":2,\"424\":2,\"425\":1,\"426\":1,\"484\":2,\"581\":1,\"584\":1,\"596\":1,\"682\":1,\"713\":1,\"719\":1,\"730\":2,\"731\":4,\"732\":1,\"782\":1,\"783\":3,\"784\":1,\"785\":1,\"791\":1,\"960\":1,\"971\":1,\"974\":1,\"977\":1,\"1003\":1,\"1024\":4,\"1025\":2,\"1026\":1,\"1027\":2,\"1037\":2,\"1039\":5,\"1042\":3,\"1043\":1,\"1047\":1,\"1054\":2,\"1055\":1,\"1060\":2,\"1066\":2,\"1067\":9,\"1074\":1,\"1079\":1,\"1089\":4,\"1097\":1,\"1100\":2,\"1107\":2,\"1122\":1,\"1125\":1,\"1126\":1,\"1139\":2,\"1147\":1,\"1148\":1,\"1153\":1,\"1154\":1,\"1167\":1,\"1168\":1}}],[\"evacdst\",{\"1\":{\"1042\":2}}],[\"evacuate函数\",{\"1\":{\"1042\":1}}],[\"evacuate\",{\"1\":{\"1042\":2}}],[\"evacuatedn\",{\"1\":{\"1042\":1}}],[\"evacuatedempty\",{\"1\":{\"1030\":1,\"1037\":1,\"1042\":1}}],[\"evacuatedy\",{\"1\":{\"1030\":1,\"1037\":1,\"1042\":3}}],[\"evacuatedx^1\",{\"1\":{\"1042\":1}}],[\"evacuatedx+1\",{\"1\":{\"1042\":1}}],[\"evacuatedx\",{\"1\":{\"1030\":1,\"1037\":1,\"1042\":2}}],[\"evacuated\",{\"1\":{\"1030\":1,\"1042\":1}}],[\"evacuation\",{\"1\":{\"1030\":1,\"1042\":1}}],[\"eval\",{\"1\":{\"283\":1}}],[\"evalsha\",{\"1\":{\"283\":1}}],[\"evince\",{\"1\":{\"559\":2}}],[\"evil\",{\"1\":{\"7\":2}}],[\"every\",{\"1\":{\"587\":1,\"1088\":2}}],[\"everything\",{\"1\":{\"7\":1,\"1041\":1,\"1089\":1}}],[\"event\",{\"1\":{\"561\":1,\"793\":1}}],[\"events\",{\"1\":{\"107\":1}}],[\"even\",{\"1\":{\"4\":1,\"16\":1,\"520\":1}}],[\"exwrite\",{\"1\":{\"396\":1}}],[\"exwriter\",{\"1\":{\"396\":1}}],[\"ext\",{\"1\":{\"1016\":1}}],[\"extra指向溢出桶数组\",{\"1\":{\"1032\":1}}],[\"extraheaders\",{\"1\":{\"981\":1}}],[\"extra\",{\"1\":{\"341\":2,\"1030\":2,\"1034\":2,\"1037\":2,\"1040\":3,\"1042\":11,\"1095\":1}}],[\"extract\",{\"1\":{\"93\":1}}],[\"extensible\",{\"1\":{\"618\":1}}],[\"extendslice\",{\"1\":{\"1024\":1}}],[\"extend\",{\"1\":{\"202\":2}}],[\"extern\",{\"1\":{\"533\":1}}],[\"external\",{\"1\":{\"145\":1}}],[\"exist\",{\"1\":{\"241\":1,\"383\":2,\"384\":4,\"600\":1,\"1035\":1}}],[\"exists\",{\"1\":{\"144\":1,\"233\":1,\"600\":1}}],[\"exit也就永远无法输出\",{\"1\":{\"1106\":1}}],[\"exitsyscall0\",{\"1\":{\"1097\":1}}],[\"exitsyscallfast\",{\"1\":{\"1097\":4}}],[\"exitsyscallfast函数会判断原来的\",{\"1\":{\"1097\":1}}],[\"exitsyscall函数来完成这个善后的工作\",{\"1\":{\"1097\":1}}],[\"exitthread\",{\"1\":{\"1092\":1}}],[\"exitprocess退出程序\",{\"1\":{\"1079\":1}}],[\"exit函数通过系统调用\",{\"1\":{\"1079\":1}}],[\"exit\",{\"1\":{\"9\":1,\"10\":1,\"346\":2,\"527\":2,\"584\":1,\"608\":1,\"647\":1,\"817\":1,\"1023\":1,\"1076\":2,\"1079\":1,\"1106\":1,\"1138\":1}}],[\"excl\",{\"1\":{\"416\":2}}],[\"excluded\",{\"1\":{\"936\":6}}],[\"excludesrune\",{\"1\":{\"933\":1}}],[\"excludesall\",{\"1\":{\"933\":1}}],[\"excludes\",{\"1\":{\"933\":1}}],[\"exclude关键字表示了不加载指定版本的依赖\",{\"1\":{\"509\":1}}],[\"exclude\",{\"1\":{\"509\":3}}],[\"exclude=path\",{\"1\":{\"26\":1}}],[\"excluding\",{\"1\":{\"21\":1}}],[\"exceeded\",{\"1\":{\"170\":1,\"478\":1,\"520\":1}}],[\"excel\",{\"1\":{\"81\":1}}],[\"excelize\",{\"1\":{\"81\":2}}],[\"expunged则代表着该\",{\"1\":{\"1047\":1}}],[\"expunged是一个空的接口对象\",{\"1\":{\"1045\":1}}],[\"expunged\",{\"1\":{\"1045\":1,\"1047\":1,\"1048\":1}}],[\"expose\",{\"1\":{\"1000\":1}}],[\"export字段值为包含指定包的最新的导出信息的文件\",{\"1\":{\"20\":1}}],[\"export\",{\"1\":{\"9\":1,\"20\":1,\"21\":4,\"91\":3,\"503\":1,\"533\":11}}],[\"exported\",{\"1\":{\"4\":1,\"1016\":1}}],[\"expiration\",{\"1\":{\"773\":1,\"778\":1}}],[\"expiresat\",{\"1\":{\"778\":1,\"780\":1,\"781\":1,\"785\":1}}],[\"expired\",{\"1\":{\"520\":1}}],[\"expire\",{\"1\":{\"247\":1}}],[\"exp函数的返回值是一个函数\",{\"1\":{\"399\":1}}],[\"exp\",{\"1\":{\"399\":2,\"504\":1,\"524\":3,\"665\":1,\"773\":1,\"778\":1}}],[\"exprcheckptr函数中的部分代码\",{\"1\":{\"1021\":1}}],[\"exprcheckptr函数中的如下部分代码\",{\"1\":{\"1021\":1}}],[\"expr\",{\"1\":{\"324\":1,\"350\":1,\"863\":1,\"887\":5,\"1021\":1}}],[\"expression3\",{\"1\":{\"349\":1}}],[\"expression2\",{\"1\":{\"349\":1}}],[\"expression1\",{\"1\":{\"349\":1}}],[\"expression必须是一个布尔表达式\",{\"1\":{\"348\":1}}],[\"expression\",{\"1\":{\"348\":2,\"354\":2,\"1054\":1}}],[\"express\",{\"1\":{\"51\":1}}],[\"expect+num\",{\"1\":{\"490\":1}}],[\"expect\",{\"1\":{\"141\":1,\"143\":1,\"490\":2}}],[\"expected\",{\"1\":{\"17\":5,\"22\":1,\"496\":4,\"521\":38,\"522\":8,\"523\":8,\"524\":5}}],[\"experiment\",{\"1\":{\"114\":1}}],[\"explicit\",{\"1\":{\"28\":5,\"536\":2}}],[\"explicitly\",{\"1\":{\"21\":1}}],[\"explain\",{\"1\":{\"22\":1}}],[\"explanation\",{\"1\":{\"21\":1}}],[\"examine\",{\"1\":{\"504\":1}}],[\"examines\",{\"1\":{\"37\":1}}],[\"example<\",{\"1\":{\"980\":1}}],[\"examplewithdeadline\",{\"1\":{\"520\":1}}],[\"examplegoodbye\",{\"1\":{\"518\":3,\"520\":3}}],[\"examplehello\",{\"1\":{\"518\":3,\"520\":3}}],[\"example1\",{\"1\":{\"295\":3}}],[\"example\",{\"1\":{\"7\":2,\"18\":2,\"22\":1,\"44\":3,\"129\":1,\"174\":4,\"294\":1,\"295\":7,\"498\":2,\"499\":9,\"507\":1,\"509\":8,\"512\":1,\"513\":2,\"518\":2,\"520\":2,\"550\":1,\"551\":1,\"552\":1,\"553\":2,\"559\":1,\"615\":1,\"823\":2,\"949\":4,\"950\":4,\"1011\":2,\"1014\":2}}],[\"examples仓库\",{\"1\":{\"966\":1}}],[\"examplesay\",{\"1\":{\"518\":4,\"520\":3}}],[\"exampleservice\",{\"1\":{\"196\":2}}],[\"examples\",{\"1\":{\"7\":1,\"222\":4,\"223\":3,\"226\":3,\"227\":3,\"228\":3,\"229\":3,\"831\":1,\"926\":1,\"953\":1,\"961\":2,\"966\":2}}],[\"exact\",{\"1\":{\"16\":1}}],[\"exercise\",{\"1\":{\"567\":1}}],[\"execlock\",{\"1\":{\"1091\":2}}],[\"exectmpl\",{\"1\":{\"725\":5,\"727\":1,\"733\":2}}],[\"execerr\",{\"1\":{\"723\":2}}],[\"execs\",{\"1\":{\"527\":12}}],[\"executing\",{\"1\":{\"1087\":3,\"1101\":1}}],[\"execution\",{\"1\":{\"38\":1}}],[\"execute在执行过后并不会返回\",{\"1\":{\"1104\":1}}],[\"execute来运行\",{\"1\":{\"1104\":1}}],[\"execute函数中可见\",{\"1\":{\"1088\":1}}],[\"executetemplate\",{\"1\":{\"733\":2}}],[\"execute方法将data数据应用于模板中\",{\"1\":{\"723\":1}}],[\"execute\",{\"1\":{\"354\":3,\"504\":1,\"723\":2,\"725\":1,\"734\":1,\"736\":2,\"1016\":1,\"1097\":1,\"1104\":2}}],[\"exec来指明由哪个程序来运行二进制文件\",{\"1\":{\"13\":1}}],[\"exec\",{\"1\":{\"13\":1,\"38\":1,\"138\":1,\"235\":1,\"236\":1,\"237\":1,\"504\":1,\"519\":1,\"616\":1}}],[\"exe是表示输出路径\",{\"1\":{\"8\":1}}],[\"exe\",{\"1\":{\"6\":17,\"8\":3,\"11\":1,\"12\":2,\"13\":2,\"14\":20,\"15\":6,\"17\":3,\"19\":1,\"148\":1,\"166\":1,\"200\":2,\"530\":1,\"532\":2,\"545\":2,\"546\":1,\"636\":4}}],[\"enable\",{\"1\":{\"1140\":1}}],[\"enablegc\",{\"1\":{\"1128\":1}}],[\"enabled是否设置为1\",{\"1\":{\"530\":1}}],[\"enabled=0这一项禁用了\",{\"1\":{\"11\":1}}],[\"enabled=0\",{\"1\":{\"11\":3}}],[\"enabled=1\",{\"1\":{\"6\":1,\"530\":1}}],[\"enabled\",{\"1\":{\"7\":1,\"141\":2,\"1086\":1}}],[\"ensured\",{\"1\":{\"1140\":1}}],[\"ensure\",{\"1\":{\"1091\":1,\"1138\":1}}],[\"enqueue\",{\"1\":{\"1059\":1,\"1060\":1,\"1067\":2}}],[\"enough\",{\"1\":{\"1037\":1}}],[\"enforce\",{\"1\":{\"762\":1,\"817\":4}}],[\"enc\",{\"1\":{\"839\":1}}],[\"encoding\",{\"1\":{\"616\":1,\"624\":1,\"839\":3,\"840\":1,\"986\":1}}],[\"encoded\",{\"1\":{\"932\":1,\"934\":1,\"1030\":1,\"1051\":1}}],[\"encodeduration\",{\"1\":{\"839\":1,\"840\":1}}],[\"encoder\",{\"1\":{\"839\":2,\"840\":3,\"843\":5}}],[\"encoderconfig来进行改造\",{\"1\":{\"840\":1}}],[\"encoderconfig\",{\"1\":{\"839\":5,\"840\":11}}],[\"encodename\",{\"1\":{\"839\":1,\"840\":1}}],[\"encodecaller\",{\"1\":{\"839\":1,\"840\":1}}],[\"encodetime\",{\"1\":{\"839\":1,\"840\":1}}],[\"encodelevel\",{\"1\":{\"839\":1,\"840\":1}}],[\"encode\",{\"0\":{\"617\":1},\"1\":{\"598\":1,\"840\":5}}],[\"encrypt\",{\"1\":{\"141\":1}}],[\"encryption\",{\"1\":{\"141\":1}}],[\"enumerating\",{\"1\":{\"495\":1,\"499\":1}}],[\"enumvalueoptions\",{\"1\":{\"202\":1}}],[\"enum\",{\"1\":{\"167\":1,\"190\":2,\"202\":1,\"542\":3,\"629\":1}}],[\"endcycle\",{\"1\":{\"1140\":2}}],[\"end指向内存空间的末尾地址\",{\"1\":{\"1111\":1}}],[\"endwith=市\",{\"1\":{\"942\":1}}],[\"endswith=l\",{\"1\":{\"945\":1}}],[\"endswith=市\",{\"1\":{\"943\":1,\"952\":3}}],[\"endswith\",{\"1\":{\"933\":1,\"945\":1}}],[\"endsnotwith\",{\"1\":{\"933\":1}}],[\"end永远也不会输出\",{\"1\":{\"471\":1}}],[\"endl\",{\"1\":{\"392\":4}}],[\"endindex\",{\"1\":{\"362\":1}}],[\"end\",{\"1\":{\"159\":6,\"209\":7,\"462\":9,\"471\":1,\"472\":3,\"730\":4,\"731\":2,\"732\":7,\"733\":14,\"735\":2,\"736\":3,\"743\":2,\"1037\":2,\"1080\":1,\"1111\":4,\"1114\":1,\"1117\":2,\"1122\":7,\"1139\":1,\"1145\":1,\"1147\":1}}],[\"english\",{\"1\":{\"167\":1}}],[\"engoengine\",{\"1\":{\"72\":1}}],[\"engo\",{\"1\":{\"72\":2}}],[\"engine\",{\"1\":{\"59\":2,\"72\":3,\"233\":1,\"503\":1,\"800\":1,\"965\":3,\"989\":2,\"990\":2,\"992\":4,\"1011\":7,\"1016\":1}}],[\"en\",{\"1\":{\"41\":2,\"731\":3,\"980\":1}}],[\"entersyscallblock\",{\"1\":{\"1097\":1}}],[\"entersyscall\",{\"1\":{\"1097\":2}}],[\"entersyscall函数完成这一过程\",{\"1\":{\"1097\":1}}],[\"enter\",{\"1\":{\"1088\":1}}],[\"entering\",{\"1\":{\"559\":1}}],[\"ent等\",{\"1\":{\"848\":1}}],[\"ent这些库\",{\"1\":{\"230\":1}}],[\"ent\",{\"1\":{\"52\":3,\"610\":1}}],[\"entries\",{\"1\":{\"21\":1,\"168\":1}}],[\"entry\",{\"1\":{\"8\":2,\"10\":2,\"382\":1,\"424\":4,\"527\":1,\"604\":1,\"1038\":1,\"1045\":4,\"1047\":3,\"1048\":2,\"1059\":1,\"1089\":2,\"1120\":2}}],[\"entire\",{\"1\":{\"4\":1}}],[\"envfile\",{\"1\":{\"788\":1,\"791\":1,\"798\":1}}],[\"env的配置文件\",{\"1\":{\"7\":1}}],[\"envcmd\",{\"1\":{\"4\":1}}],[\"environment可以查看每一个环境变量的介绍\",{\"1\":{\"7\":1}}],[\"environment\",{\"1\":{\"3\":6,\"7\":7,\"14\":1,\"503\":1}}],[\"env\",{\"0\":{\"7\":1},\"1\":{\"2\":1,\"3\":9,\"7\":24,\"18\":1,\"92\":4,\"494\":2,\"501\":1,\"503\":1,\"507\":3,\"530\":2}}],[\"测试一下\",{\"1\":{\"990\":1}}],[\"测试切片长度为\",{\"1\":{\"588\":1}}],[\"测试代码如下\",{\"1\":{\"588\":1}}],[\"测试代码也需要稍作修改\",{\"1\":{\"527\":1}}],[\"测试结果如下\",{\"1\":{\"547\":1,\"588\":1}}],[\"测试的输入数据都是手动声明的一个个变量\",{\"1\":{\"524\":1}}],[\"测试的输出风格变为\",{\"1\":{\"38\":1}}],[\"测试有着非常多的标志参数\",{\"1\":{\"519\":1}}],[\"测试函数的命名的风格也不同\",{\"1\":{\"517\":1}}],[\"测试函数\",{\"1\":{\"517\":1}}],[\"测试文件通常以bench\",{\"1\":{\"525\":1}}],[\"测试文件通常以\",{\"1\":{\"517\":1}}],[\"测试文件\",{\"1\":{\"517\":1}}],[\"测试文件最好单独放在一个包中\",{\"1\":{\"517\":1}}],[\"测试包\",{\"1\":{\"517\":1,\"616\":1}}],[\"测试服务是否可以用\",{\"1\":{\"205\":1}}],[\"测试现在会缓存测试结果\",{\"1\":{\"127\":1}}],[\"测试组件\",{\"0\":{\"55\":1}}],[\"测试执行超时时间\",{\"1\":{\"38\":1}}],[\"测试\",{\"0\":{\"497\":1,\"516\":1},\"1\":{\"2\":2,\"38\":1,\"88\":1,\"96\":1,\"977\":1,\"980\":1,\"982\":1,\"984\":1,\"985\":1,\"986\":1,\"991\":1,\"993\":1,\"994\":1,\"996\":1}}],[\"日式输出\",{\"0\":{\"841\":1}}],[\"日下午\",{\"1\":{\"739\":1}}],[\"日后很难知道原来的指向是否还是想要的数据\",{\"1\":{\"1052\":1}}],[\"日后下载依赖就会非常的迅速\",{\"1\":{\"501\":1}}],[\"日后如果别人要下载你的依赖就需要通过此模块路径来作为依据\",{\"1\":{\"23\":1}}],[\"日本語\",{\"1\":{\"306\":1}}],[\"日正式发布之后停止\",{\"1\":{\"138\":1}}],[\"日以\",{\"1\":{\"87\":1}}],[\"日开了一个短会来讨论和设计这个语言的初步原型\",{\"1\":{\"87\":1}}],[\"日期\",{\"1\":{\"649\":1}}],[\"日期工具库\",{\"1\":{\"66\":1}}],[\"日期分割\",{\"1\":{\"54\":1}}],[\"日志写入文件\",{\"0\":{\"1007\":1}}],[\"日志管理\",{\"0\":{\"1005\":1}}],[\"日志初始化完成\",{\"1\":{\"843\":1}}],[\"日志输出分为控制台输出和文件输出\",{\"1\":{\"841\":1}}],[\"日志输出到哪里\",{\"1\":{\"840\":1}}],[\"日志文件配置结构体\",{\"1\":{\"840\":1}}],[\"日志文件输出路径\",{\"1\":{\"839\":1}}],[\"日志书写\",{\"1\":{\"839\":1}}],[\"日志编码主要涉及到对于日志的一些细节的格式化\",{\"1\":{\"840\":1}}],[\"日志编码\",{\"0\":{\"840\":1},\"1\":{\"839\":1}}],[\"日志级别大写\",{\"1\":{\"840\":1}}],[\"日志级别\",{\"0\":{\"842\":1},\"1\":{\"839\":1}}],[\"日志器名称编码器\",{\"1\":{\"839\":1}}],[\"日志分割库\",{\"1\":{\"54\":1}}],[\"日志\",{\"1\":{\"54\":1,\"166\":1,\"647\":1,\"648\":1,\"649\":1}}],[\"日志组件\",{\"0\":{\"54\":1}}],[\"日\",{\"1\":{\"0\":1,\"87\":1,\"113\":1,\"138\":1}}],[\"0代表的是没有正在工作的读者协程\",{\"1\":{\"1157\":1}}],[\"0这个分支可以看到\",{\"1\":{\"1060\":1}}],[\"0db8\",{\"1\":{\"677\":1}}],[\"0s\",{\"1\":{\"527\":6}}],[\"0µ\",{\"1\":{\"526\":1}}],[\"0m\",{\"1\":{\"526\":2}}],[\"0并不存在\",{\"1\":{\"509\":1}}],[\"0时\",{\"1\":{\"424\":1}}],[\"0不能作为被除数\",{\"1\":{\"397\":1}}],[\"0+0i\",{\"1\":{\"699\":1}}],[\"0+1\",{\"1\":{\"331\":1}}],[\"0+40\",{\"1\":{\"9\":2}}],[\"0i\",{\"1\":{\"303\":1}}],[\"0b00\",{\"1\":{\"301\":1}}],[\"0b101\",{\"1\":{\"124\":1}}],[\"0o777\",{\"1\":{\"416\":1}}],[\"0o123\",{\"1\":{\"303\":1}}],[\"0o123i\",{\"1\":{\"303\":1}}],[\"0o10\",{\"1\":{\"124\":1}}],[\"0o24\",{\"1\":{\"301\":1}}],[\"0就是永不过期\",{\"1\":{\"241\":1}}],[\"0即放行所有来源的请求\",{\"1\":{\"143\":1}}],[\"05t10\",{\"1\":{\"205\":1}}],[\"05t21\",{\"1\":{\"140\":1}}],[\"05\",{\"1\":{\"122\":1,\"128\":1,\"130\":1,\"135\":2,\"136\":1,\"138\":1,\"141\":1,\"205\":1,\"526\":2,\"739\":2,\"840\":2,\"994\":1,\"1114\":1}}],[\"0666\",{\"1\":{\"416\":1,\"417\":2,\"418\":4,\"419\":5,\"425\":1}}],[\"06\",{\"1\":{\"113\":1,\"115\":2,\"116\":1,\"117\":1,\"118\":1,\"124\":1,\"128\":1,\"134\":1,\"138\":1,\"847\":1}}],[\"064s\",{\"1\":{\"7\":1}}],[\"03125\",{\"1\":{\"912\":1}}],[\"035\",{\"1\":{\"847\":1}}],[\"0370\",{\"1\":{\"677\":1}}],[\"037s\",{\"1\":{\"521\":1}}],[\"033s\",{\"1\":{\"527\":1}}],[\"038s\",{\"1\":{\"518\":1}}],[\"034361\",{\"1\":{\"132\":2}}],[\"03\",{\"1\":{\"113\":1,\"114\":1,\"119\":1,\"121\":2,\"124\":1,\"137\":1,\"138\":2,\"145\":7,\"741\":1,\"994\":1}}],[\"08875\",{\"1\":{\"847\":2}}],[\"084306\",{\"1\":{\"132\":2}}],[\"084s\",{\"1\":{\"25\":1}}],[\"08\",{\"1\":{\"113\":3,\"114\":1,\"115\":1,\"116\":3,\"118\":1,\"120\":2,\"122\":2,\"124\":1,\"126\":2,\"128\":1,\"130\":1,\"132\":1,\"136\":1,\"138\":1,\"140\":1,\"141\":3,\"145\":9,\"174\":1,\"175\":10,\"205\":1,\"824\":1,\"965\":1,\"986\":1}}],[\"00387\",{\"1\":{\"1067\":1}}],[\"00386\",{\"1\":{\"1067\":1}}],[\"00379\",{\"1\":{\"1067\":2}}],[\"00374\",{\"1\":{\"1067\":1}}],[\"00369\",{\"1\":{\"1067\":1}}],[\"00364\",{\"1\":{\"1067\":1}}],[\"00357\",{\"1\":{\"1067\":1}}],[\"00352\",{\"1\":{\"1067\":1}}],[\"00347\",{\"1\":{\"1067\":1}}],[\"00345\",{\"1\":{\"1067\":1}}],[\"00340\",{\"1\":{\"1067\":1}}],[\"00335\",{\"1\":{\"1067\":1}}],[\"00330\",{\"1\":{\"1067\":1}}],[\"00325\",{\"1\":{\"1067\":1}}],[\"00320\",{\"1\":{\"1067\":1}}],[\"00315\",{\"1\":{\"1067\":1}}],[\"00313\",{\"1\":{\"1067\":1}}],[\"00308\",{\"1\":{\"1067\":1}}],[\"00303\",{\"1\":{\"1067\":1}}],[\"00298\",{\"1\":{\"1067\":1}}],[\"00293\",{\"1\":{\"1067\":1}}],[\"00288\",{\"1\":{\"1067\":1}}],[\"00285\",{\"1\":{\"1067\":1}}],[\"00283\",{\"1\":{\"1067\":1}}],[\"00278\",{\"1\":{\"1067\":1}}],[\"00273\",{\"1\":{\"1067\":1}}],[\"00268\",{\"1\":{\"1067\":1}}],[\"00263\",{\"1\":{\"1067\":1}}],[\"00258\",{\"1\":{\"1067\":1}}],[\"00256\",{\"1\":{\"1067\":1}}],[\"00255\",{\"1\":{\"1067\":1}}],[\"00250\",{\"1\":{\"1067\":1}}],[\"00245\",{\"1\":{\"1067\":1}}],[\"00240\",{\"1\":{\"1067\":1}}],[\"00235\",{\"1\":{\"1067\":1}}],[\"00230\",{\"1\":{\"1067\":2}}],[\"00228\",{\"1\":{\"1067\":1}}],[\"00224\",{\"1\":{\"1067\":1}}],[\"00222\",{\"1\":{\"1067\":1}}],[\"00220\",{\"1\":{\"1067\":1}}],[\"00216\",{\"1\":{\"1067\":1}}],[\"00214\",{\"1\":{\"1067\":2}}],[\"00208\",{\"1\":{\"1067\":1}}],[\"00205\",{\"1\":{\"1067\":1}}],[\"00200\",{\"1\":{\"1067\":1}}],[\"00138\",{\"1\":{\"1038\":1}}],[\"00131\",{\"1\":{\"1038\":1}}],[\"001\",{\"1\":{\"968\":2,\"969\":1}}],[\"001627901\",{\"1\":{\"743\":1}}],[\"009508401\",{\"1\":{\"742\":1}}],[\"00i\",{\"1\":{\"700\":1}}],[\"008\",{\"1\":{\"526\":7}}],[\"007908001\",{\"1\":{\"741\":1}}],[\"007095001\",{\"1\":{\"737\":1}}],[\"007\",{\"1\":{\"304\":1}}],[\"00s\",{\"1\":{\"38\":2,\"497\":1,\"518\":3,\"520\":3,\"521\":8,\"522\":2,\"523\":10,\"527\":8,\"654\":1,\"655\":1,\"656\":1,\"657\":1,\"658\":1,\"659\":1,\"660\":1,\"661\":1,\"662\":1,\"663\":1,\"664\":1,\"665\":1,\"666\":1,\"667\":1,\"668\":1,\"669\":1,\"670\":1,\"671\":1,\"672\":1,\"692\":1,\"693\":1,\"694\":1,\"695\":1,\"696\":1,\"697\":1,\"698\":1,\"699\":1,\"700\":1,\"701\":1,\"704\":1,\"705\":1,\"706\":3,\"707\":1,\"708\":1,\"709\":1,\"710\":1,\"711\":1,\"712\":1,\"713\":1,\"714\":1,\"715\":2,\"716\":1,\"717\":1,\"718\":1,\"719\":1,\"721\":1}}],[\"00\",{\"1\":{\"15\":1,\"145\":1,\"406\":1,\"478\":1,\"526\":9,\"675\":1,\"737\":1,\"740\":3,\"843\":1,\"1114\":3}}],[\"00067\",{\"1\":{\"1067\":1}}],[\"00058\",{\"1\":{\"1067\":1}}],[\"00049\",{\"1\":{\"1067\":1}}],[\"00040\",{\"1\":{\"1067\":1}}],[\"00035\",{\"1\":{\"1067\":1}}],[\"00090\",{\"1\":{\"1038\":1}}],[\"00085\",{\"1\":{\"1038\":1}}],[\"00078\",{\"1\":{\"1038\":1}}],[\"000\",{\"1\":{\"124\":1,\"294\":1,\"301\":2,\"304\":1,\"525\":2,\"526\":6,\"547\":1}}],[\"00029\",{\"1\":{\"9\":1}}],[\"00024\",{\"1\":{\"9\":1}}],[\"00018\",{\"1\":{\"9\":4}}],[\"00014\",{\"1\":{\"9\":1}}],[\"00011\",{\"1\":{\"9\":1}}],[\"00010\",{\"1\":{\"9\":2}}],[\"0000\",{\"1\":{\"677\":2}}],[\"00004\",{\"1\":{\"9\":2}}],[\"000001000\",{\"1\":{\"341\":1}}],[\"000000001\",{\"1\":{\"341\":1}}],[\"00000\",{\"1\":{\"9\":2,\"840\":1,\"1067\":1}}],[\"0x3d\",{\"1\":{\"938\":1}}],[\"0x31d99ff884\",{\"1\":{\"392\":2}}],[\"0x31d99ff880\",{\"1\":{\"392\":2}}],[\"0x7c\",{\"1\":{\"938\":1}}],[\"0x7ff0000000000000\",{\"1\":{\"4\":1}}],[\"0xn\",{\"1\":{\"780\":1}}],[\"0xd\",{\"1\":{\"698\":2}}],[\"0xe69720\",{\"1\":{\"568\":1}}],[\"0xe61a00\",{\"1\":{\"568\":1}}],[\"0xe62e00\",{\"1\":{\"568\":1}}],[\"0xe62ac0\",{\"1\":{\"568\":1}}],[\"0xe63d80\",{\"1\":{\"568\":1}}],[\"0xe63580\",{\"1\":{\"568\":1}}],[\"0xeb8b00\",{\"1\":{\"568\":1}}],[\"0xeb8b08\",{\"1\":{\"568\":1}}],[\"0xeb8c58\",{\"1\":{\"568\":1}}],[\"0xeb8c48\",{\"1\":{\"568\":1}}],[\"0xe27bb2\",{\"1\":{\"376\":2}}],[\"0xc00010e4b0\",{\"1\":{\"441\":4}}],[\"0xc000018190\",{\"1\":{\"1019\":1}}],[\"0xc00001c088\",{\"1\":{\"391\":1,\"751\":2}}],[\"0xc0000200a0\",{\"1\":{\"1019\":1}}],[\"0xc000008150\",{\"1\":{\"779\":1}}],[\"0xc0000080d8\",{\"1\":{\"568\":1}}],[\"0xc00005e5e0\",{\"1\":{\"704\":1}}],[\"0xc00005e5d0\",{\"1\":{\"704\":1}}],[\"0xc00007a7b0\",{\"1\":{\"568\":1}}],[\"0xc0000a6058\",{\"1\":{\"441\":5}}],[\"0xabc\",{\"1\":{\"303\":1}}],[\"0xabci\",{\"1\":{\"303\":1}}],[\"0x\",{\"1\":{\"302\":2,\"751\":1}}],[\"0x2d\",{\"1\":{\"938\":1}}],[\"0x2c\",{\"1\":{\"938\":1}}],[\"0x2\",{\"1\":{\"302\":1}}],[\"0x1dd043b6e30\",{\"1\":{\"540\":1}}],[\"0x10ffff\",{\"1\":{\"380\":1}}],[\"0x15e\",{\"1\":{\"302\":2}}],[\"0x1\",{\"1\":{\"302\":1,\"698\":1}}],[\"0x1p1023\",{\"1\":{\"652\":1}}],[\"0x1p127\",{\"1\":{\"652\":1}}],[\"0x1p\",{\"1\":{\"302\":1,\"303\":2,\"652\":6}}],[\"0x1b\",{\"1\":{\"124\":1}}],[\"0x0183\",{\"1\":{\"1067\":1}}],[\"0x0182\",{\"1\":{\"1067\":1}}],[\"0x017b\",{\"1\":{\"1067\":2}}],[\"0x0176\",{\"1\":{\"1067\":1}}],[\"0x0171\",{\"1\":{\"1067\":1}}],[\"0x016c\",{\"1\":{\"1067\":1}}],[\"0x0165\",{\"1\":{\"1067\":1}}],[\"0x0160\",{\"1\":{\"1067\":1}}],[\"0x015b\",{\"1\":{\"1067\":1}}],[\"0x0159\",{\"1\":{\"1067\":1}}],[\"0x0154\",{\"1\":{\"1067\":1}}],[\"0x014f\",{\"1\":{\"1067\":1}}],[\"0x014a\",{\"1\":{\"1067\":1}}],[\"0x0145\",{\"1\":{\"1067\":1}}],[\"0x0140\",{\"1\":{\"1067\":1}}],[\"0x013b\",{\"1\":{\"1067\":1}}],[\"0x0139\",{\"1\":{\"1067\":1}}],[\"0x0134\",{\"1\":{\"1067\":1}}],[\"0x012f\",{\"1\":{\"1067\":1}}],[\"0x012a\",{\"1\":{\"1067\":1}}],[\"0x0125\",{\"1\":{\"1067\":1}}],[\"0x0120\",{\"1\":{\"1067\":1}}],[\"0x011d\",{\"1\":{\"1067\":1}}],[\"0x011b\",{\"1\":{\"1067\":1}}],[\"0x0116\",{\"1\":{\"1067\":1}}],[\"0x0111\",{\"1\":{\"1067\":1}}],[\"0x010c\",{\"1\":{\"1067\":1}}],[\"0x0107\",{\"1\":{\"1067\":1}}],[\"0x0102\",{\"1\":{\"1067\":1}}],[\"0x0100\",{\"1\":{\"1067\":1}}],[\"0x0\",{\"1\":{\"301\":1}}],[\"0x00ff\",{\"1\":{\"1067\":1}}],[\"0x00fa\",{\"1\":{\"1067\":1}}],[\"0x00f5\",{\"1\":{\"1067\":1}}],[\"0x00f0\",{\"1\":{\"1067\":1}}],[\"0x00eb\",{\"1\":{\"1067\":1}}],[\"0x00e6\",{\"1\":{\"1067\":2}}],[\"0x00e4\",{\"1\":{\"1067\":1}}],[\"0x00e0\",{\"1\":{\"1067\":1}}],[\"0x00de\",{\"1\":{\"1067\":1}}],[\"0x00dc\",{\"1\":{\"1067\":1}}],[\"0x00d8\",{\"1\":{\"1067\":1}}],[\"0x00d6\",{\"1\":{\"1067\":2}}],[\"0x00d0\",{\"1\":{\"1067\":1}}],[\"0x00cd\",{\"1\":{\"1067\":1}}],[\"0x00c8\",{\"1\":{\"1067\":1}}],[\"0x0043\",{\"1\":{\"1067\":1}}],[\"0x004e\",{\"1\":{\"1038\":1}}],[\"0x003a\",{\"1\":{\"1067\":1}}],[\"0x0031\",{\"1\":{\"1067\":1}}],[\"0x0028\",{\"1\":{\"1067\":1}}],[\"0x0023\",{\"1\":{\"1067\":1}}],[\"0x008a\",{\"1\":{\"1038\":1}}],[\"0x0083\",{\"1\":{\"1038\":1}}],[\"0x005a\",{\"1\":{\"1038\":1}}],[\"0x0055\",{\"1\":{\"1038\":1}}],[\"0x00\",{\"1\":{\"301\":1}}],[\"0x001d\",{\"1\":{\"9\":1}}],[\"0x0018\",{\"1\":{\"9\":1}}],[\"0x0012\",{\"1\":{\"9\":4}}],[\"0x000e\",{\"1\":{\"9\":1}}],[\"0x000b\",{\"1\":{\"9\":1}}],[\"0x000a\",{\"1\":{\"9\":2}}],[\"0x0004\",{\"1\":{\"9\":2}}],[\"0x0000\",{\"1\":{\"9\":2,\"380\":1,\"1067\":1}}],[\"029s\",{\"1\":{\"588\":1}}],[\"024\",{\"1\":{\"301\":1}}],[\"024s\",{\"1\":{\"7\":1}}],[\"022s\",{\"1\":{\"19\":1}}],[\"027s\",{\"1\":{\"19\":5}}],[\"02\",{\"1\":{\"15\":1,\"67\":1,\"113\":1,\"115\":1,\"117\":2,\"118\":1,\"121\":1,\"123\":2,\"125\":2,\"127\":1,\"129\":2,\"131\":1,\"739\":2,\"740\":1,\"840\":1,\"847\":1}}],[\"028s\",{\"1\":{\"7\":1,\"19\":1,\"38\":1}}],[\"023s\",{\"1\":{\"7\":1,\"497\":1}}],[\"013496401\",{\"1\":{\"743\":1}}],[\"013s\",{\"1\":{\"7\":1}}],[\"016742001\",{\"1\":{\"742\":1}}],[\"016s\",{\"1\":{\"7\":1}}],[\"017790301\",{\"1\":{\"742\":1}}],[\"0123i\",{\"1\":{\"303\":1}}],[\"01\",{\"1\":{\"15\":1,\"117\":1,\"119\":1,\"120\":1,\"127\":1,\"131\":1,\"135\":1,\"138\":1,\"739\":2,\"740\":1,\"784\":3,\"824\":1,\"840\":3,\"843\":1}}],[\"014s\",{\"1\":{\"7\":1,\"19\":1}}],[\"015s\",{\"1\":{\"7\":1}}],[\"049844236760125\",{\"1\":{\"911\":1}}],[\"040s\",{\"1\":{\"518\":1}}],[\"041s\",{\"1\":{\"38\":2}}],[\"04\",{\"1\":{\"7\":1,\"123\":1,\"132\":1,\"145\":1,\"208\":1,\"526\":1,\"561\":3,\"739\":3,\"840\":1,\"986\":1}}],[\"0\",{\"0\":{\"137\":1},\"1\":{\"6\":11,\"7\":16,\"9\":1,\"14\":1,\"18\":4,\"19\":8,\"20\":10,\"25\":1,\"26\":2,\"27\":12,\"28\":9,\"34\":2,\"38\":6,\"41\":4,\"44\":1,\"45\":1,\"93\":1,\"107\":3,\"113\":4,\"114\":1,\"115\":2,\"116\":2,\"136\":1,\"137\":6,\"141\":4,\"143\":27,\"144\":6,\"148\":1,\"156\":1,\"158\":2,\"159\":2,\"160\":1,\"164\":1,\"168\":1,\"174\":2,\"175\":7,\"187\":2,\"190\":3,\"191\":1,\"200\":2,\"202\":1,\"205\":4,\"209\":2,\"212\":2,\"213\":1,\"214\":1,\"215\":1,\"216\":1,\"227\":2,\"232\":2,\"233\":2,\"234\":2,\"236\":1,\"237\":1,\"241\":2,\"243\":1,\"246\":1,\"247\":1,\"252\":1,\"254\":1,\"256\":1,\"263\":1,\"265\":1,\"267\":1,\"268\":3,\"276\":1,\"280\":1,\"283\":2,\"301\":5,\"302\":9,\"303\":2,\"312\":1,\"315\":1,\"321\":1,\"325\":3,\"331\":3,\"341\":2,\"349\":2,\"350\":6,\"354\":2,\"356\":7,\"357\":26,\"361\":2,\"362\":8,\"364\":2,\"365\":4,\"366\":2,\"367\":1,\"368\":13,\"369\":1,\"370\":76,\"372\":6,\"375\":4,\"377\":3,\"380\":5,\"382\":2,\"383\":5,\"385\":2,\"386\":2,\"388\":2,\"389\":3,\"391\":6,\"392\":3,\"396\":1,\"397\":1,\"398\":4,\"399\":3,\"400\":2,\"401\":1,\"406\":2,\"411\":1,\"412\":2,\"414\":3,\"416\":10,\"417\":2,\"418\":2,\"434\":4,\"445\":2,\"448\":3,\"449\":6,\"451\":6,\"455\":2,\"456\":2,\"458\":1,\"462\":8,\"466\":1,\"467\":5,\"470\":7,\"471\":5,\"472\":4,\"479\":2,\"480\":2,\"481\":7,\"482\":3,\"484\":7,\"485\":2,\"486\":6,\"487\":2,\"495\":4,\"497\":2,\"499\":13,\"500\":4,\"503\":39,\"504\":16,\"507\":12,\"509\":37,\"510\":9,\"512\":1,\"515\":2,\"518\":7,\"520\":4,\"521\":11,\"522\":3,\"523\":13,\"525\":4,\"526\":11,\"527\":23,\"531\":4,\"539\":37,\"541\":8,\"542\":1,\"547\":1,\"551\":6,\"552\":5,\"555\":1,\"556\":2,\"557\":2,\"559\":11,\"560\":8,\"561\":4,\"572\":1,\"577\":4,\"578\":15,\"581\":4,\"582\":3,\"583\":1,\"585\":1,\"587\":4,\"588\":4,\"593\":2,\"595\":5,\"600\":2,\"605\":3,\"608\":1,\"620\":1,\"621\":2,\"623\":2,\"629\":1,\"644\":5,\"651\":1,\"653\":1,\"654\":3,\"655\":3,\"656\":1,\"657\":1,\"658\":1,\"659\":2,\"660\":1,\"661\":1,\"662\":1,\"663\":1,\"664\":2,\"665\":1,\"666\":1,\"667\":1,\"668\":1,\"669\":3,\"670\":4,\"671\":3,\"672\":3,\"676\":1,\"678\":4,\"679\":4,\"682\":8,\"685\":1,\"687\":1,\"692\":1,\"693\":1,\"694\":2,\"695\":1,\"696\":1,\"697\":1,\"698\":1,\"699\":1,\"700\":1,\"701\":1,\"704\":1,\"705\":3,\"706\":3,\"707\":1,\"708\":1,\"709\":1,\"710\":1,\"711\":1,\"712\":1,\"713\":1,\"714\":1,\"715\":3,\"716\":1,\"717\":1,\"718\":1,\"719\":1,\"721\":1,\"728\":1,\"732\":2,\"742\":1,\"748\":2,\"749\":1,\"751\":1,\"752\":1,\"753\":5,\"754\":1,\"755\":2,\"780\":1,\"809\":2,\"823\":1,\"824\":4,\"833\":3,\"834\":3,\"835\":7,\"841\":1,\"845\":1,\"847\":1,\"895\":1,\"897\":4,\"899\":4,\"907\":2,\"909\":3,\"912\":48,\"914\":4,\"916\":10,\"918\":32,\"919\":6,\"934\":2,\"944\":4,\"952\":4,\"953\":1,\"955\":2,\"968\":4,\"969\":4,\"970\":4,\"972\":2,\"973\":2,\"974\":2,\"1003\":1,\"1009\":3,\"1011\":4,\"1016\":2,\"1019\":29,\"1020\":2,\"1023\":4,\"1024\":2,\"1025\":5,\"1026\":4,\"1027\":6,\"1028\":2,\"1030\":1,\"1033\":3,\"1034\":4,\"1036\":6,\"1037\":6,\"1038\":4,\"1039\":7,\"1040\":3,\"1042\":11,\"1043\":3,\"1046\":1,\"1049\":1,\"1052\":4,\"1053\":5,\"1054\":6,\"1055\":1,\"1058\":3,\"1059\":6,\"1060\":11,\"1061\":2,\"1062\":1,\"1065\":1,\"1066\":3,\"1067\":11,\"1074\":3,\"1076\":2,\"1079\":1,\"1080\":4,\"1087\":2,\"1089\":15,\"1091\":1,\"1093\":1,\"1095\":1,\"1096\":3,\"1097\":8,\"1098\":2,\"1099\":1,\"1100\":3,\"1101\":2,\"1104\":8,\"1106\":2,\"1107\":7,\"1112\":5,\"1114\":26,\"1115\":2,\"1116\":1,\"1117\":2,\"1120\":7,\"1122\":1,\"1123\":1,\"1124\":7,\"1125\":6,\"1126\":3,\"1130\":2,\"1137\":9,\"1138\":5,\"1139\":11,\"1140\":4,\"1145\":5,\"1147\":2,\"1148\":3,\"1152\":1,\"1153\":13,\"1154\":5,\"1156\":1,\"1157\":1,\"1158\":3,\"1159\":4,\"1160\":2,\"1161\":2,\"1162\":5,\"1165\":1,\"1167\":1,\"1173\":2,\"1177\":16,\"1178\":4}}],[\"099a8bf\",{\"1\":{\"499\":2}}],[\"09b\",{\"1\":{\"341\":1}}],[\"09d\",{\"1\":{\"341\":1}}],[\"09t17\",{\"1\":{\"7\":1}}],[\"09\",{\"1\":{\"0\":1,\"118\":1,\"124\":1,\"133\":1,\"134\":1,\"138\":2,\"208\":1,\"741\":1,\"742\":3,\"743\":2,\"840\":2,\"843\":1}}],[\"078125\",{\"1\":{\"912\":1}}],[\"079\",{\"1\":{\"526\":1}}],[\"0755\",{\"1\":{\"426\":1}}],[\"072\",{\"1\":{\"302\":1}}],[\"07\",{\"1\":{\"0\":1,\"129\":1,\"138\":2,\"155\":2,\"158\":18,\"159\":31,\"166\":18,\"167\":9,\"784\":3,\"986\":1,\"1114\":1}}],[\"月卸任\",{\"1\":{\"87\":1}}],[\"月发布了第一个正式版本\",{\"1\":{\"87\":1}}],[\"月\",{\"1\":{\"0\":1,\"87\":3,\"113\":1,\"138\":2,\"739\":1}}],[\"​\",{\"1\":{\"0\":1}}],[\"精益求精\",{\"1\":{\"0\":1}}],[\"希望更人性化一点\",{\"1\":{\"952\":1}}],[\"希望不管在什么时候\",{\"1\":{\"0\":1}}],[\"希望可以帮助到其他想要学习的人\",{\"1\":{\"0\":1}}],[\"年发表的论文\",{\"1\":{\"1136\":1}}],[\"年发表了一篇关于\",{\"1\":{\"1084\":1}}],[\"年龄必须大于或等于18\",{\"1\":{\"952\":5}}],[\"年龄\",{\"1\":{\"633\":2,\"636\":2,\"952\":4}}],[\"年代的\",{\"1\":{\"1130\":1}}],[\"年代\",{\"1\":{\"618\":1}}],[\"年开源的语言无关\",{\"1\":{\"180\":1}}],[\"年\",{\"1\":{\"0\":2,\"87\":6,\"88\":2,\"113\":1,\"138\":2,\"288\":1,\"739\":1}}],[\"不加锁直接判断\",{\"1\":{\"1168\":1}}],[\"不加锁判断管道是否为空\",{\"1\":{\"1060\":1}}],[\"不变性\",{\"0\":{\"1136\":1}}],[\"不允许被抢占时\",{\"1\":{\"1100\":1}}],[\"不允许写入为nil的map\",{\"1\":{\"1038\":1}}],[\"不为\",{\"1\":{\"1087\":1}}],[\"不遵守既定的顺序可以让每个管道都相对公平地得到执行\",{\"1\":{\"1063\":1}}],[\"不相等就继续遍历\",{\"1\":{\"1036\":1}}],[\"不相等就继续遍历溢出桶\",{\"1\":{\"1036\":1}}],[\"不相等就采用up重新计算\",{\"1\":{\"1034\":1}}],[\"不断重复上述步骤\",{\"1\":{\"1135\":1}}],[\"不断的倒序遍历bmap链表\",{\"1\":{\"1039\":1}}],[\"不断循环直到\",{\"1\":{\"1034\":1}}],[\"不断学习\",{\"1\":{\"0\":1}}],[\"不安全\",{\"1\":{\"1003\":1}}],[\"不妨不用框架的方法\",{\"1\":{\"986\":1}}],[\"不妨试试\",{\"1\":{\"88\":1}}],[\"不等于\",{\"1\":{\"935\":1}}],[\"不一定非得是实体类型的切片\",{\"1\":{\"871\":1}}],[\"不一定非得去访问根对象来获取值\",{\"1\":{\"725\":1}}],[\"不冲突的话就会创建一个新的记录\",{\"1\":{\"867\":1}}],[\"不去看文档恐怕根本就不知道到底该传什么参数\",{\"1\":{\"849\":1}}],[\"不去动它\",{\"1\":{\"144\":1}}],[\"不采用官方的直接反序列化\",{\"1\":{\"840\":1}}],[\"不然一个个讲解没完没了了\",{\"1\":{\"1153\":1}}],[\"不然到时候发生错误的话都没法排查\",{\"1\":{\"840\":1}}],[\"不然会找不到\",{\"1\":{\"546\":1}}],[\"不应复杂化\",{\"1\":{\"823\":1}}],[\"不应该使用原始context\",{\"1\":{\"982\":1}}],[\"不应该使用==操作符\",{\"1\":{\"603\":1}}],[\"不应该依赖retract所指定依赖的版本或版本范围\",{\"1\":{\"509\":1}}],[\"不应该将其作为值传递和存储\",{\"1\":{\"481\":1}}],[\"不匹配的签名算法\",{\"1\":{\"782\":1,\"783\":1}}],[\"不匹配就会返回字符串\",{\"1\":{\"718\":2}}],[\"不包括其引用内容的大小\",{\"1\":{\"748\":1}}],[\"不包含重复元素的集合\",{\"1\":{\"388\":1}}],[\"不要返回任何具体实现的零值\",{\"1\":{\"1070\":1}}],[\"不要在生产环境中直接返回html代码\",{\"1\":{\"989\":1}}],[\"不要在项目中引入\",{\"1\":{\"547\":1}}],[\"不要试图将builder作为值进行传递\",{\"1\":{\"719\":1}}],[\"不处理就返回\",{\"1\":{\"598\":1}}],[\"不存在于\",{\"1\":{\"1047\":1}}],[\"不存在时会为其分配一个位置\",{\"1\":{\"1038\":1}}],[\"不存在时会写入\",{\"1\":{\"792\":1}}],[\"不存在时如何处理\",{\"1\":{\"989\":1}}],[\"不存在的外键被创建显然是不被允许的\",{\"1\":{\"891\":1}}],[\"不存在会报错\",{\"1\":{\"792\":1}}],[\"不存在隐式类型转换\",{\"1\":{\"595\":1}}],[\"不存在构造方法\",{\"1\":{\"405\":1}}],[\"不知道这行日志是哪里输出的\",{\"1\":{\"840\":1}}],[\"不知道为什么没有并入标准库\",{\"1\":{\"603\":1}}],[\"不知道各位还是否记得在函数小节中讲解的闭包求解斐波那契数列的例子\",{\"1\":{\"581\":1}}],[\"不知道在哪个版本被删掉了\",{\"1\":{\"48\":1}}],[\"不论是基本接口\",{\"1\":{\"575\":1}}],[\"不指定类型\",{\"1\":{\"571\":1}}],[\"不影响之前的使用\",{\"1\":{\"567\":1}}],[\"不同类别的接口对应不同的功能\",{\"1\":{\"988\":1}}],[\"不同于动态链接库\",{\"1\":{\"546\":1}}],[\"不同的是\",{\"1\":{\"1024\":1}}],[\"不同的是run命令在编译完成后会直接运行\",{\"1\":{\"13\":1}}],[\"不同的\",{\"1\":{\"963\":1,\"1105\":1}}],[\"不同的系统结果会有所不同\",{\"1\":{\"905\":1}}],[\"不同的系统可能会有不同的结果\",{\"1\":{\"745\":1}}],[\"不同的签名算法所需要的密钥的类型也不同\",{\"1\":{\"777\":1}}],[\"不同的类型所需的内存占用不同\",{\"1\":{\"1034\":1}}],[\"不同的类型无法进行运算\",{\"1\":{\"593\":1}}],[\"不同的类型可能还会有其他的额外方法\",{\"1\":{\"489\":1}}],[\"不进行替换\",{\"1\":{\"713\":1}}],[\"不进行\",{\"1\":{\"511\":1}}],[\"不从代理中下载的模块路径前缀的通用模式列表\",{\"1\":{\"511\":1}}],[\"不传递任何数据\",{\"1\":{\"474\":1}}],[\"不\",{\"1\":{\"462\":1}}],[\"不受操作系统直接调度\",{\"1\":{\"462\":1}}],[\"不受干扰\",{\"1\":{\"333\":1}}],[\"不严谨的说\",{\"1\":{\"429\":1}}],[\"不占用内存空间\",{\"1\":{\"411\":1}}],[\"不足的则补齐\",{\"1\":{\"410\":1}}],[\"不考虑复用的话\",{\"1\":{\"398\":1}}],[\"不定长参数根据传入类型的不同而不同\",{\"1\":{\"393\":1}}],[\"不定期更新\",{\"1\":{\"113\":1}}],[\"不是饥饿模式\",{\"1\":{\"1154\":1}}],[\"不是\",{\"1\":{\"1003\":1}}],[\"不是一个接口\",{\"1\":{\"563\":1}}],[\"不是指针\",{\"1\":{\"393\":1}}],[\"不是数组\",{\"1\":{\"360\":1}}],[\"不支持复杂情况下的处理\",{\"1\":{\"722\":1}}],[\"不支持泛型方法\",{\"1\":{\"573\":1}}],[\"不支持\",{\"1\":{\"543\":1}}],[\"不支持转义\",{\"1\":{\"374\":1}}],[\"不支持多行书写\",{\"1\":{\"374\":1}}],[\"不带返回值即可\",{\"1\":{\"397\":1}}],[\"不带参数进行切片即可\",{\"1\":{\"362\":1}}],[\"不带任何参数\",{\"1\":{\"38\":1}}],[\"不带任何参数执行该命令\",{\"1\":{\"7\":1}}],[\"不想要第二个\",{\"1\":{\"330\":1}}],[\"不像其它语言通常会有一个enum来表示\",{\"1\":{\"326\":1}}],[\"不管如何最终都会得到一个可用的地址\",{\"1\":{\"1124\":1}}],[\"不管是哪一种都成功获得了信号量\",{\"1\":{\"1153\":1}}],[\"不管是哪种情况\",{\"1\":{\"1143\":1}}],[\"不管是原来的栈还是新的栈它们的内存地址都是连续的\",{\"1\":{\"1103\":1}}],[\"不管是直接的还是间接的\",{\"1\":{\"295\":1}}],[\"不管元素是否存在于\",{\"1\":{\"1039\":1}}],[\"不管用何种方式初始化\",{\"1\":{\"1034\":1}}],[\"不管什么类型\",{\"1\":{\"725\":1}}],[\"不管执行多少次\",{\"1\":{\"472\":1}}],[\"不管调用者是不是指针\",{\"1\":{\"414\":1}}],[\"不管具名返回值如何声明\",{\"1\":{\"397\":1}}],[\"不管哪一方主动关闭流\",{\"1\":{\"159\":1}}],[\"不可重用\",{\"1\":{\"975\":1}}],[\"不可重复声明\",{\"1\":{\"198\":1}}],[\"不可能保证每一次运行内存分布都完全一致\",{\"1\":{\"1033\":1}}],[\"不可能直接在回调函数中\",{\"1\":{\"582\":1}}],[\"不可能返回具体的类型\",{\"1\":{\"577\":1}}],[\"不可比较\",{\"1\":{\"568\":2}}],[\"不可预知\",{\"1\":{\"485\":1}}],[\"不可以直接使用\",{\"1\":{\"463\":1}}],[\"不可控的因素非常多\",{\"1\":{\"462\":1}}],[\"不可否认的是作为一门年轻的语言\",{\"1\":{\"0\":1}}],[\"不会存在黑色对象直接引用白色对象的情况\",{\"1\":{\"1144\":1}}],[\"不会出现已使用内存达到临界值时因函数调用而频繁的触发扩缩容这种情况\",{\"1\":{\"1103\":1}}],[\"不会留到运行时\",{\"1\":{\"1061\":1}}],[\"不会重新创建\",{\"1\":{\"1028\":1}}],[\"不会产生任何内存垃圾\",{\"1\":{\"954\":1}}],[\"不会影响\",{\"1\":{\"898\":1}}],[\"不会损失精度\",{\"1\":{\"845\":1}}],[\"不会默认配置搜索路径\",{\"1\":{\"791\":1}}],[\"不会执行任何善后工作\",{\"1\":{\"608\":1}}],[\"不会触发当前协程的善后工作\",{\"1\":{\"606\":1}}],[\"不会冲突\",{\"1\":{\"534\":1}}],[\"不会开始新的测试\",{\"1\":{\"519\":1}}],[\"不会被访问\",{\"1\":{\"1136\":1}}],[\"不会被\",{\"1\":{\"520\":1}}],[\"不会被其他的任何协程打断\",{\"1\":{\"487\":1}}],[\"不会被序列化\",{\"1\":{\"187\":1}}],[\"不会等到最后才去调用sum函数\",{\"1\":{\"402\":1}}],[\"不会对html特殊字符串进行转义\",{\"1\":{\"981\":1}}],[\"不会对\",{\"1\":{\"239\":1}}],[\"不会修改go\",{\"1\":{\"25\":1}}],[\"不建议\",{\"1\":{\"539\":1}}],[\"不建议去修改超时时间\",{\"1\":{\"171\":1}}],[\"不建议强制杀死进程\",{\"1\":{\"141\":1}}],[\"不止这点功能\",{\"1\":{\"156\":1}}],[\"不参与选举\",{\"1\":{\"142\":1}}],[\"不能进行自旋\",{\"1\":{\"1153\":1}}],[\"不能自定义\",{\"1\":{\"763\":1}}],[\"不能使用其他字符代替\",{\"1\":{\"762\":1,\"763\":1}}],[\"不能定位\",{\"1\":{\"603\":1}}],[\"不能赋值字符串\",{\"1\":{\"591\":1}}],[\"不能用其他字符代替\",{\"1\":{\"760\":1,\"761\":1,\"765\":1}}],[\"不能用作类型声明\",{\"1\":{\"574\":1}}],[\"不能用静态地址\",{\"1\":{\"174\":1}}],[\"不能是变量\",{\"1\":{\"360\":1}}],[\"不能是\",{\"1\":{\"323\":1}}],[\"不能是基本类型\",{\"1\":{\"181\":1}}],[\"不能与参数名重复\",{\"1\":{\"397\":1}}],[\"不能与\",{\"1\":{\"298\":1}}],[\"不能与任何已存在的标识符重复\",{\"1\":{\"298\":1}}],[\"不能与bootstrap同时使用\",{\"1\":{\"141\":1}}],[\"不能单独执行\",{\"1\":{\"200\":1}}],[\"不能单独出现\",{\"1\":{\"183\":1}}],[\"不能超过一个\",{\"1\":{\"141\":1}}],[\"不被允许\",{\"1\":{\"133\":1,\"573\":2}}],[\"不再需要新的栈空间了后就又会触发缩容\",{\"1\":{\"1103\":1}}],[\"不再阻塞\",{\"1\":{\"1097\":1}}],[\"不再过多阐述\",{\"1\":{\"1024\":1}}],[\"不再演示\",{\"1\":{\"907\":1}}],[\"不再自动解引用\",{\"1\":{\"133\":1}}],[\"不再只局限于\",{\"1\":{\"132\":1}}],[\"不再包含任何\",{\"1\":{\"132\":1}}],[\"不再用于下载依赖\",{\"1\":{\"127\":1}}],[\"不再限制堆大小\",{\"1\":{\"126\":1}}],[\"不再做过多的赘述\",{\"1\":{\"36\":1}}],[\"不嫌弃的话可以将\",{\"1\":{\"93\":1}}],[\"不善于听取社区意见等等\",{\"1\":{\"88\":1}}],[\"不怎么更新了\",{\"1\":{\"62\":1}}],[\"不需要解锁\",{\"1\":{\"1162\":1}}],[\"不需要解引用就可以直接访问结构体的内容\",{\"1\":{\"408\":1}}],[\"不需要一口气完成所有的标记工作\",{\"1\":{\"1137\":1}}],[\"不需要从堆上复制参数\",{\"1\":{\"1076\":1}}],[\"不需要去遍历数组\",{\"1\":{\"1019\":1}}],[\"不需要初始化即可安全使用\",{\"1\":{\"845\":1}}],[\"不需要指定一个完整路径\",{\"1\":{\"791\":1}}],[\"不需要绑定到根对象中\",{\"1\":{\"728\":1}}],[\"不需要阻塞等待\",{\"1\":{\"1167\":1}}],[\"不需要阻塞\",{\"1\":{\"682\":1}}],[\"不需要开发者做什么工作\",{\"1\":{\"500\":1}}],[\"不需要开发者手动管理内存\",{\"1\":{\"88\":1}}],[\"不需要void\",{\"1\":{\"397\":1}}],[\"不需要使用指针\",{\"1\":{\"331\":1}}],[\"不需要使用额外的工具或配置\",{\"1\":{\"11\":1}}],[\"不需要操作一次就关闭一次连接\",{\"1\":{\"244\":1}}],[\"不需要你来手动注册\",{\"1\":{\"231\":1}}],[\"不需要手动编写\",{\"1\":{\"194\":1}}],[\"不需要我们去手动操作context\",{\"1\":{\"160\":1}}],[\"不需要再等待所有的包都初始化完毕\",{\"1\":{\"137\":1}}],[\"不需要安装\",{\"1\":{\"104\":1}}],[\"不需要\",{\"1\":{\"62\":1,\"823\":1}}],[\"不写回文件\",{\"1\":{\"34\":1}}],[\"不太建议使用一些特殊符号作为模块路径\",{\"1\":{\"23\":1}}],[\"不解析这些包的依赖关系\",{\"1\":{\"20\":1}}],[\"不用去手动执行这些工具的二进制文件\",{\"1\":{\"14\":1}}],[\"不生成\",{\"1\":{\"10\":1}}],[\"不直接叫gomodule\",{\"1\":{\"7\":1}}],[\"不使用\",{\"1\":{\"7\":1}}],[\"不过当其内存不足时需要访问mcentral\",{\"1\":{\"1116\":1}}],[\"不过协程也是依附于线程的\",{\"1\":{\"1085\":1}}],[\"不过不能直接读管道\",{\"1\":{\"1062\":1}}],[\"不过不建议大规模使用\",{\"1\":{\"44\":1}}],[\"不过后面很快就被删掉了\",{\"1\":{\"1062\":1}}],[\"不过返回的字节不能被修改\",{\"1\":{\"1054\":1}}],[\"不过跟源切片没什么关系\",{\"1\":{\"1019\":1}}],[\"不过作者一般很少使用单纯的\",{\"1\":{\"1002\":1}}],[\"不过更多时候是注册到路由组上\",{\"1\":{\"994\":1}}],[\"不过大多数时候并不会这么做\",{\"1\":{\"988\":1}}],[\"不过大部分情况并不需要手动的修改go\",{\"1\":{\"509\":1}}],[\"不过并不建议将上面这种的信息返回给前端\",{\"1\":{\"952\":1}}],[\"不过并没有什么特别晦涩难懂的词汇\",{\"1\":{\"286\":1}}],[\"不过你可能会得到如下结果\",{\"1\":{\"952\":1}}],[\"不过你也可以通过unsafe库来实现无复制转换\",{\"1\":{\"376\":1}}],[\"不过如果主键匹配不到的话就会进行插入操作了\",{\"1\":{\"884\":1}}],[\"不过只适用于只读的情况下\",{\"1\":{\"756\":1}}],[\"不过只能通过protoc来调用\",{\"1\":{\"200\":1}}],[\"不过对于存放在堆栈上的字符串变量而言\",{\"1\":{\"755\":1}}],[\"不过通常建议使用\",{\"1\":{\"728\":1}}],[\"不过通常我们不会去手动序列化\",{\"1\":{\"629\":1}}],[\"不过本文要讲述的主角是\",{\"1\":{\"722\":1}}],[\"不过已经足够满足日常使用\",{\"1\":{\"672\":1}}],[\"不过传统的\",{\"1\":{\"620\":1}}],[\"不过panic在退出之前会做好程序的善后工作\",{\"1\":{\"604\":1}}],[\"不过标准库已经提供好了类似的函数\",{\"1\":{\"603\":1}}],[\"不过缺点也不少\",{\"1\":{\"598\":1}}],[\"不过我们看待事物要辩证的来看\",{\"1\":{\"598\":1}}],[\"不过我们把拦截器中创建好的流对象包装一下就可以实现拦截收发消息了\",{\"1\":{\"166\":1}}],[\"不过总的来说\",{\"1\":{\"589\":1}}],[\"不过iter\",{\"1\":{\"583\":1}}],[\"不过好在\",{\"1\":{\"580\":1}}],[\"不过毫无意义而且可能会造成数值溢出的问题\",{\"1\":{\"573\":1}}],[\"不过有第三方中间件支持\",{\"1\":{\"1003\":1}}],[\"不过有一点怪\",{\"1\":{\"570\":1}}],[\"不过有时候还是无法满足开发人员的需求\",{\"1\":{\"168\":1}}],[\"不过是一个匿名空接口\",{\"1\":{\"568\":1}}],[\"不过可以被声明\",{\"1\":{\"566\":1}}],[\"不过可以使用\",{\"1\":{\"534\":1}}],[\"不过一般情况下这些模板文件都不会放在根路径\",{\"1\":{\"980\":1}}],[\"不过一般下载的驱动库都会自动注册驱动\",{\"1\":{\"231\":1}}],[\"不过一点也不影响之前接口的使用\",{\"1\":{\"563\":1}}],[\"不过示例测试主要是由output注释来体现的\",{\"1\":{\"520\":1}}],[\"不过由于go接口实现优于约定的特性\",{\"1\":{\"1150\":1}}],[\"不过由于签名和验证都使用相同的密钥\",{\"1\":{\"777\":1}}],[\"不过由于yml本身有着严格的缩进语法\",{\"1\":{\"622\":1}}],[\"不过由于其服务器部署在国外\",{\"1\":{\"501\":1}}],[\"不过由于内部用到了反射\",{\"1\":{\"339\":1}}],[\"不过真正的效率要结合具体使用场景来看\",{\"1\":{\"490\":1}}],[\"不过filepath标准库已经提供了类似功能的函数\",{\"1\":{\"426\":1}}],[\"不过两者并不应该混合使用\",{\"1\":{\"414\":1}}],[\"不过实际上也是由swap方法来完成\",{\"1\":{\"1047\":1}}],[\"不过实际上来说\",{\"1\":{\"1030\":1}}],[\"不过实际上它们执行的\",{\"1\":{\"899\":1}}],[\"不过实际上它可以执行任何命令\",{\"1\":{\"40\":1}}],[\"不过实际编码过程中\",{\"1\":{\"410\":1}}],[\"不过也可以添加自己的钩子\",{\"1\":{\"776\":1}}],[\"不过也可以省略字段名称\",{\"1\":{\"405\":1}}],[\"不过也可以不使用默认的配置文件\",{\"1\":{\"7\":1}}],[\"不过条件是它们必须相邻\",{\"1\":{\"396\":1}}],[\"不过为了可读性一般还是建议尽量给参数加上名称\",{\"1\":{\"396\":1}}],[\"不过区别在于\",{\"1\":{\"539\":1}}],[\"不过区别在于指针无法偏移\",{\"1\":{\"392\":1}}],[\"不过区别在于get命令下载的是源码\",{\"1\":{\"19\":1}}],[\"不过指针不能光声明\",{\"1\":{\"391\":1}}],[\"不过背后的安全问题需要自己承担\",{\"1\":{\"376\":1}}],[\"不过仅支持有序类型的参数\",{\"1\":{\"332\":1}}],[\"不过官方提供的errors包其实并不够用\",{\"1\":{\"603\":1}}],[\"不过官方也标注了该文档已经很久没有进行大幅度更新\",{\"1\":{\"288\":1}}],[\"不过官方的\",{\"1\":{\"219\":1}}],[\"不过grpc\",{\"1\":{\"169\":1}}],[\"不过上述只是\",{\"1\":{\"168\":1}}],[\"不过尽管\",{\"1\":{\"168\":1}}],[\"不过需要明白的一点是\",{\"1\":{\"513\":1}}],[\"不过需要注意的是在\",{\"1\":{\"739\":1}}],[\"不过需要注意的是\",{\"1\":{\"163\":1,\"1054\":1}}],[\"不过需要付费\",{\"1\":{\"94\":1}}],[\"不过\",{\"1\":{\"160\":1,\"307\":1,\"405\":1,\"511\":1,\"553\":1,\"821\":1,\"1033\":1,\"1038\":1,\"1052\":1}}],[\"不过这种问题也仅限于\",{\"1\":{\"1106\":1}}],[\"不过这种场景比较少见\",{\"1\":{\"529\":1}}],[\"不过这样也是有副作用的\",{\"1\":{\"1062\":1}}],[\"不过这部分操作并不由mapassign函数来完成\",{\"1\":{\"1038\":1}}],[\"不过这些字段对我们是不可见的\",{\"1\":{\"1030\":1}}],[\"不过这会产生非常大的麻烦\",{\"1\":{\"1019\":1}}],[\"不过这同样也会带来一些不容易发现的问题\",{\"1\":{\"1019\":1}}],[\"不过这并不在本章的讨论范围内\",{\"1\":{\"1005\":1}}],[\"不过这并不是最好的解决办法\",{\"1\":{\"948\":1}}],[\"不过这更像是一种\",{\"1\":{\"567\":1}}],[\"不过这是错误处理一节中才会涉及到的东西\",{\"1\":{\"400\":1}}],[\"不过这次去掉了超时的判定逻辑\",{\"1\":{\"159\":1}}],[\"不过这个指令不适合执行特别复杂的命令\",{\"1\":{\"40\":1}}],[\"不过双向流式\",{\"1\":{\"158\":1}}],[\"不过在此之前还有很多事处理\",{\"1\":{\"1153\":1}}],[\"不过在很多时候调度器内部的工作细节都使用者来说都是一个黑盒\",{\"1\":{\"1106\":1}}],[\"不过在简单的背后\",{\"1\":{\"1083\":1}}],[\"不过在使用值接收者时\",{\"1\":{\"414\":1}}],[\"不过在编码的时候可以省去\",{\"1\":{\"408\":1}}],[\"不过在创建之前\",{\"1\":{\"160\":1}}],[\"不过在\",{\"1\":{\"146\":1,\"294\":1,\"563\":1,\"753\":1}}],[\"不过它们实际上只是对runtime\",{\"1\":{\"1060\":1}}],[\"不过它们的主要区别在于发送的时机\",{\"1\":{\"162\":1}}],[\"不过它确实很直观\",{\"1\":{\"1052\":1}}],[\"不过它并不对外暴露\",{\"1\":{\"1052\":1}}],[\"不过它是按行读取的\",{\"1\":{\"346\":1}}],[\"不过它有以下缺点\",{\"1\":{\"326\":1}}],[\"不过它的学习难度就远没有\",{\"1\":{\"88\":1}}],[\"不过它不会允许\",{\"1\":{\"41\":1}}],[\"不过现在都\",{\"1\":{\"42\":1}}],[\"不过其实它还是保留了一个自定义项的\",{\"1\":{\"17\":1}}],[\"不过即便是在\",{\"1\":{\"0\":1}}],[\"但无论如何\",{\"1\":{\"1171\":1}}],[\"但未必了解go语言的锁内部是如何实现的\",{\"1\":{\"1149\":1}}],[\"但仍然在缓存中\",{\"1\":{\"1148\":1}}],[\"但仍然需要删除写屏障来满足弱三色不变式\",{\"1\":{\"1144\":1}}],[\"但仍旧有大量的系统还是使用单体架构的情况\",{\"1\":{\"999\":1}}],[\"但屏障机制并非毫无成本\",{\"1\":{\"1141\":1}}],[\"但第二种情况就没法接受了\",{\"1\":{\"1136\":1}}],[\"但堆又被分为了两部分\",{\"1\":{\"1129\":1}}],[\"但堆就不一样了\",{\"1\":{\"578\":1}}],[\"但代码却是最少\",{\"1\":{\"1125\":1}}],[\"但mspan只是持有页的地址引用\",{\"1\":{\"1115\":1}}],[\"但因为它根本就不调用函数\",{\"1\":{\"1106\":1}}],[\"但缺点也十分的明显\",{\"1\":{\"1103\":1}}],[\"但前者也只是对runtime\",{\"1\":{\"1097\":1}}],[\"但毕竟它不是直接进行函数调用\",{\"1\":{\"1076\":1}}],[\"但唯独接口不一样\",{\"1\":{\"1070\":1}}],[\"但写这么多if判断感觉不太优雅\",{\"1\":{\"1069\":1}}],[\"但管道已经关闭了\",{\"1\":{\"1067\":1}}],[\"但假设ch1已经被协程\",{\"1\":{\"1067\":1}}],[\"但大致意思是差不多的\",{\"1\":{\"1067\":1}}],[\"但可能已经找到了一个合适的位置分配给key\",{\"1\":{\"1038\":1}}],[\"但可以通过函数调用的方式来实现\",{\"1\":{\"725\":1}}],[\"但最终都会用到memclrnoheappointers函数\",{\"1\":{\"1027\":1}}],[\"但最终只可能会有一个类型被使用\",{\"1\":{\"195\":1}}],[\"但切片长度是可变的\",{\"1\":{\"1025\":1}}],[\"但内容是相同的\",{\"1\":{\"1007\":1}}],[\"但内置的可排序类型只有数字和字符串\",{\"1\":{\"578\":1}}],[\"但创建的是唯一索引\",{\"1\":{\"862\":1}}],[\"但却非常的实用\",{\"1\":{\"812\":1}}],[\"但目前单个\",{\"1\":{\"791\":1}}],[\"但目前的执行只是使用硬编码的政策效果\",{\"1\":{\"763\":1}}],[\"但不会是nil\",{\"1\":{\"1051\":1}}],[\"但不会去更新uinptr所保存的值\",{\"1\":{\"751\":1}}],[\"但不执行后续方法\",{\"1\":{\"1000\":1}}],[\"但不能多次调用这个方法\",{\"1\":{\"975\":1}}],[\"但不运行\",{\"1\":{\"519\":1}}],[\"但由于黑色对象\",{\"1\":{\"1136\":1}}],[\"但由于在op参数前后添加了\",{\"1\":{\"725\":1}}],[\"但由于类型未知\",{\"1\":{\"577\":1}}],[\"但随着时代的更替\",{\"1\":{\"618\":1}}],[\"但没有人会去说它这一点\",{\"1\":{\"598\":1}}],[\"但没有使用它\",{\"1\":{\"329\":1}}],[\"但同时也会引入了些许复杂度\",{\"1\":{\"589\":1}}],[\"但同时带来的弊端也很明显\",{\"1\":{\"427\":1}}],[\"但拉取式迭代器要比前面两个慢了几乎两个数量级\",{\"1\":{\"588\":1}}],[\"但我们可以自己通过结构体来记录迭代器\",{\"1\":{\"586\":1}}],[\"但我们可以通过给自定义类型添加方法来返回其字符串表现形式\",{\"1\":{\"326\":1}}],[\"但自从诞生以来\",{\"1\":{\"570\":1}}],[\"但number的方法集确实是person\",{\"1\":{\"567\":1}}],[\"但有一定的风险\",{\"1\":{\"536\":1}}],[\"但结果是乱码\",{\"1\":{\"527\":1}}],[\"但事实上recover\",{\"1\":{\"607\":1}}],[\"但事实上要学会\",{\"1\":{\"505\":1}}],[\"但事实并非如此\",{\"1\":{\"479\":1}}],[\"但建议还是不要使用特殊字符\",{\"1\":{\"495\":1}}],[\"但也不是原子操作\",{\"1\":{\"487\":1}}],[\"但也有不同\",{\"1\":{\"393\":1}}],[\"但并不保证用于创建对象的new函数就一定是并发安全的\",{\"1\":{\"485\":1}}],[\"但并不等同\",{\"1\":{\"322\":1}}],[\"但主协程依旧在等待\",{\"1\":{\"472\":1}}],[\"但其变量类型是由编译器自行推断的\",{\"1\":{\"591\":1}}],[\"但其实只是将notifylist\",{\"1\":{\"1167\":1}}],[\"但其实现不再像以前一样简单\",{\"1\":{\"1133\":1}}],[\"但其实我们根本就不需要判断管道是否关闭\",{\"1\":{\"1062\":1}}],[\"但其实本质上和用原生的net\",{\"1\":{\"983\":1}}],[\"但其实是有问题的\",{\"1\":{\"527\":1}}],[\"但其实内部实现都差不多\",{\"1\":{\"378\":1}}],[\"但其引用依旧是同一个\",{\"1\":{\"469\":1}}],[\"但\",{\"1\":{\"462\":1,\"479\":1,\"531\":1,\"534\":1,\"543\":1,\"1003\":1,\"1104\":1}}],[\"但这样会有一个问题\",{\"1\":{\"1106\":1}}],[\"但这样会引发另一个问题\",{\"1\":{\"414\":1}}],[\"但这不一定够用\",{\"1\":{\"1101\":1}}],[\"但这一次不会对源切片造成影响\",{\"1\":{\"1019\":1}}],[\"但这也是完全允许的\",{\"1\":{\"582\":1}}],[\"但这也并不代表可以在两三天内迅速掌握\",{\"1\":{\"0\":1}}],[\"但这种同步读写的方式是非常危险的\",{\"1\":{\"467\":1}}],[\"但一定会提高开发人员的血压和心智负担\",{\"1\":{\"410\":1}}],[\"但除了更加方便以外与第一种方式没有任何的区别\",{\"1\":{\"407\":1}}],[\"但本质上没有任何变化\",{\"1\":{\"407\":1}}],[\"但fn1\",{\"1\":{\"402\":1}}],[\"但过程也许不对\",{\"1\":{\"401\":1}}],[\"但变量e和n的生命周期并没有结束\",{\"1\":{\"399\":1}}],[\"但依旧有返回值\",{\"1\":{\"383\":1}}],[\"但如果管道中还有元素存在\",{\"1\":{\"1060\":1}}],[\"但如果是一个大点的项目\",{\"1\":{\"550\":1}}],[\"但如果是一个指针\",{\"1\":{\"414\":1}}],[\"但如果只是一些简单的任务\",{\"1\":{\"547\":1}}],[\"但如果想要测试多组数据时\",{\"1\":{\"524\":1}}],[\"但如果包含非\",{\"1\":{\"380\":1}}],[\"但如果对应性能有更高要求\",{\"1\":{\"379\":1}}],[\"但如果使用了\",{\"1\":{\"512\":1}}],[\"但如果使用了line指令\",{\"1\":{\"43\":1}}],[\"但如果使用\",{\"1\":{\"175\":1}}],[\"但功能有着不小的区别\",{\"1\":{\"358\":1}}],[\"但实际上当缓冲区容量不为\",{\"1\":{\"1060\":1}}],[\"但实际上它会将\",{\"1\":{\"331\":1}}],[\"但实际上并不会执行\",{\"1\":{\"8\":1}}],[\"但必须加上花括号\",{\"1\":{\"312\":1}}],[\"但在使用时至少应当提供一个配置文件\",{\"1\":{\"791\":1}}],[\"但在没有设置配置文件的时候将会非常有用\",{\"1\":{\"790\":1}}],[\"但在这\",{\"1\":{\"479\":1}}],[\"但在\",{\"1\":{\"312\":1,\"547\":1,\"886\":1}}],[\"但又不需要用到包中的类型\",{\"1\":{\"295\":1}}],[\"但对于包外而言并不是这样\",{\"1\":{\"294\":1}}],[\"但条件不满足\",{\"1\":{\"168\":1}}],[\"但已经有相当多的公司将\",{\"1\":{\"88\":1}}],[\"但它所直接引用的对象并未全部访问\",{\"1\":{\"1135\":1}}],[\"但它们所管理的页内存之间是不连续的\",{\"1\":{\"1115\":1}}],[\"但它本质上还是协作式调度策略\",{\"1\":{\"1106\":1}}],[\"但它永远也不会等于nil\",{\"1\":{\"1070\":1}}],[\"但它就是不等于nil\",{\"1\":{\"1070\":1}}],[\"但它和源切片所引用的都是同一个底层数组\",{\"1\":{\"1019\":1}}],[\"但它只适用于处理小字符串的情况\",{\"1\":{\"722\":1}}],[\"但它只是把依赖下载到本地的依赖缓存中\",{\"1\":{\"25\":1}}],[\"但它并不是锁\",{\"1\":{\"482\":1}}],[\"但它提供了更多可用的方法\",{\"1\":{\"481\":1}}],[\"但它依旧是基于官方的\",{\"1\":{\"104\":1}}],[\"但它又确确实实是静态类型编译语言\",{\"1\":{\"0\":1}}],[\"但是有协程正在等待wg完成\",{\"1\":{\"1177\":1}}],[\"但是有一个官方的代理仓库\",{\"1\":{\"501\":1}}],[\"但是有一种情况除外\",{\"1\":{\"329\":1}}],[\"但是使用它的代价非常大\",{\"1\":{\"1128\":1}}],[\"但是与\",{\"1\":{\"1066\":1}}],[\"但是如果它返回了false\",{\"1\":{\"1062\":1}}],[\"但是如果要新增一个元素的话\",{\"1\":{\"1050\":1}}],[\"但是如果有多个协程访问的话就可能会出现问题了\",{\"1\":{\"484\":1}}],[\"但是编译后的代码可以看见\",{\"1\":{\"1038\":1}}],[\"但是允许同时并发遍历\",{\"1\":{\"1037\":1}}],[\"但是更通用些\",{\"1\":{\"1033\":1}}],[\"但是该元素后面有可用的键值\",{\"1\":{\"1030\":1}}],[\"但是上面的问题同样不可忽视\",{\"1\":{\"1019\":1}}],[\"但是打印出来的确是空切片\",{\"1\":{\"1019\":1}}],[\"但是后续对s1添加了过多的元素超过了数组所能容纳的数量\",{\"1\":{\"1019\":1}}],[\"但是由第三方社区开发的\",{\"1\":{\"992\":1}}],[\"但是由于一个实例只能映射一个配置文件\",{\"1\":{\"799\":1}}],[\"但是由于go\",{\"1\":{\"510\":1}}],[\"但是由于grow函数引用了它们\",{\"1\":{\"399\":1}}],[\"但是gin\",{\"1\":{\"966\":1}}],[\"但是还不足以纳入使用\",{\"1\":{\"952\":1}}],[\"但是只需满足其中一个即可\",{\"1\":{\"938\":1}}],[\"但是没有预加载学校关系\",{\"1\":{\"899\":1}}],[\"但是一个学生只能上一个学校\",{\"1\":{\"892\":1}}],[\"但是文档是全英文的\",{\"1\":{\"849\":1}}],[\"但是依旧建议信息不要太大\",{\"1\":{\"775\":1}}],[\"但是大部分中小公司承受不起这种开发成本\",{\"1\":{\"758\":1}}],[\"但是大部分教程都仍然适用\",{\"1\":{\"288\":1}}],[\"但是uintptr只是一个整数值\",{\"1\":{\"751\":1}}],[\"但是针对html\",{\"1\":{\"736\":1}}],[\"但是每一次都要自定义一个结构体将会十分的繁琐\",{\"1\":{\"645\":1}}],[\"但是调用者本身不负责处理错误\",{\"1\":{\"602\":1}}],[\"但是int类型无法代表interface\",{\"1\":{\"596\":1}}],[\"但是int类型无法被string和bool类型代表\",{\"1\":{\"595\":1}}],[\"但是num2并没有\",{\"1\":{\"595\":1}}],[\"但是又采用了下划线\",{\"1\":{\"577\":1}}],[\"但是receiver可以拥有泛型形参\",{\"1\":{\"573\":1}}],[\"但是sum函数的逻辑都是一模一样的\",{\"1\":{\"571\":1}}],[\"但是这种写法编译器不允许\",{\"1\":{\"1054\":1}}],[\"但是这一部分是公共可读的\",{\"1\":{\"773\":1}}],[\"但是这一差别在流式\",{\"1\":{\"162\":1}}],[\"但是这并不利于人为观察\",{\"1\":{\"627\":1}}],[\"但是这毫无意义\",{\"1\":{\"574\":1}}],[\"但是这样写会显得十分复杂\",{\"1\":{\"571\":1}}],[\"但是它被son的mom字段所引用了\",{\"1\":{\"550\":1}}],[\"但是它不能存储nil\",{\"1\":{\"491\":1}}],[\"但是反过来\",{\"1\":{\"543\":1}}],[\"但是反过来的话\",{\"1\":{\"414\":1}}],[\"但是导出的\",{\"1\":{\"533\":1}}],[\"但是前者失败后还会继续执行\",{\"1\":{\"521\":1}}],[\"但是输出结果太简介了\",{\"1\":{\"518\":1}}],[\"但是存储依赖的文件夹是分大小写的\",{\"1\":{\"509\":1}}],[\"但是对于接口类型的话\",{\"1\":{\"575\":1}}],[\"但是对于上面的操作而言\",{\"1\":{\"490\":1}}],[\"但是对于管道而言\",{\"1\":{\"470\":1}}],[\"但是为了保险起见\",{\"1\":{\"478\":1}}],[\"但是保险起见\",{\"1\":{\"477\":1}}],[\"但是提供了对应的函数来创建上下文\",{\"1\":{\"475\":1}}],[\"但是死循环+select会导致主协程永久阻塞\",{\"1\":{\"471\":1}}],[\"但是顺序还是乱的\",{\"1\":{\"462\":1}}],[\"但是其实这个例子执行过后在大部分情况下什么都不会输出\",{\"1\":{\"462\":1}}],[\"但是和接口一起使用后\",{\"1\":{\"414\":1}}],[\"但是不会输出任何的错误信息\",{\"1\":{\"607\":1}}],[\"但是不会造成任何影响\",{\"1\":{\"413\":1}}],[\"但是不建议使用\",{\"1\":{\"593\":1}}],[\"但是不带索引\",{\"1\":{\"585\":1}}],[\"但是不断的循环对于\",{\"1\":{\"490\":1}}],[\"但是不能一个都没有\",{\"1\":{\"133\":1}}],[\"但是我们可以调整字段\",{\"1\":{\"410\":1}}],[\"但是可以使用已有的泛型类型\",{\"1\":{\"573\":1}}],[\"但是可以通过遍历访问到\",{\"1\":{\"386\":1}}],[\"但是可以覆盖\",{\"1\":{\"375\":1}}],[\"但是官方认为没有必要去修改\",{\"1\":{\"384\":1}}],[\"但是也存在一个特殊情况\",{\"1\":{\"384\":1}}],[\"但是无法存放元素\",{\"1\":{\"382\":1}}],[\"但是实际求得的长度却比英文字符串长\",{\"1\":{\"377\":1}}],[\"但是字节切片是可以修改的\",{\"1\":{\"376\":1}}],[\"但是拓展表达式只有切片能够使用\",{\"1\":{\"371\":1}}],[\"但是遇到换行停止扫描\",{\"1\":{\"344\":1}}],[\"但是在编译时却不会有任何的报错\",{\"1\":{\"409\":1}}],[\"但是在后续赋值时\",{\"1\":{\"329\":1}}],[\"但是在那个时候确实没有更好的方案了\",{\"1\":{\"28\":1}}],[\"但是专用于存放指针运算\",{\"1\":{\"316\":1}}],[\"但是仅支持基础的配置\",{\"1\":{\"839\":1}}],[\"但是仅支持强类型输出的日志\",{\"1\":{\"838\":1}}],[\"但是仅允许在前缀符号之后和数字之间使用\",{\"1\":{\"301\":1}}],[\"但是仅最后一个会生效\",{\"1\":{\"166\":1}}],[\"但是会阻塞写协程\",{\"1\":{\"481\":1}}],[\"但是会受到父块中的影响\",{\"1\":{\"333\":1}}],[\"但是会缺少一些特性\",{\"1\":{\"198\":1}}],[\"但是会依赖反射进行序列化\",{\"1\":{\"198\":1}}],[\"但是倘若换回旧版本的编号的话就会造成字段对应的编号不一致从而产生错误\",{\"1\":{\"188\":1}}],[\"但是本站的内容大部分都是\",{\"1\":{\"147\":1}}],[\"但是语法更加严格\",{\"1\":{\"42\":1}}],[\"但是\",{\"1\":{\"11\":1,\"201\":1,\"387\":1,\"388\":1,\"403\":1,\"1047\":1,\"1085\":1}}],[\"但是区别是它只是输出这些指令\",{\"1\":{\"8\":1}}],[\"=utf\",{\"1\":{\"986\":1}}],[\"=400x400\",{\"1\":{\"834\":1,\"835\":1}}],[\"==>\",{\"1\":{\"141\":2}}],[\"==\",{\"1\":{\"112\":1,\"168\":1,\"236\":1,\"237\":1,\"241\":1,\"299\":1,\"302\":9,\"303\":7,\"322\":1,\"332\":3,\"346\":1,\"349\":2,\"352\":1,\"397\":1,\"417\":1,\"476\":1,\"477\":1,\"484\":6,\"487\":1,\"496\":1,\"513\":1,\"521\":1,\"568\":2,\"578\":2,\"587\":2,\"603\":1,\"605\":2,\"608\":1,\"710\":1,\"719\":1,\"759\":4,\"762\":3,\"763\":9,\"764\":4,\"765\":3,\"766\":2,\"767\":4,\"795\":1,\"823\":1,\"841\":4,\"949\":1,\"950\":1,\"951\":2,\"952\":2,\"960\":2,\"971\":1,\"974\":1,\"975\":3,\"977\":1,\"1000\":1,\"1003\":1,\"1016\":2,\"1021\":1,\"1025\":1,\"1026\":4,\"1030\":1,\"1033\":1,\"1034\":1,\"1036\":3,\"1037\":7,\"1038\":7,\"1039\":5,\"1042\":5,\"1045\":1,\"1047\":3,\"1048\":2,\"1053\":3,\"1054\":2,\"1058\":2,\"1059\":5,\"1060\":6,\"1061\":2,\"1065\":3,\"1066\":2,\"1067\":8,\"1070\":4,\"1074\":6,\"1076\":1,\"1079\":3,\"1080\":2,\"1088\":1,\"1089\":5,\"1091\":1,\"1092\":1,\"1095\":1,\"1097\":3,\"1098\":1,\"1100\":5,\"1106\":6,\"1107\":8,\"1112\":1,\"1115\":1,\"1116\":1,\"1117\":4,\"1120\":8,\"1122\":3,\"1124\":2,\"1125\":3,\"1137\":6,\"1139\":1,\"1140\":2,\"1145\":4,\"1147\":1,\"1148\":5,\"1153\":6,\"1154\":3,\"1162\":6,\"1167\":1,\"1168\":4,\"1169\":1,\"1173\":2,\"1177\":4,\"1178\":2}}],[\"========================\",{\"1\":{\"559\":1}}],[\"===\",{\"1\":{\"38\":2,\"497\":1,\"518\":3,\"520\":3,\"521\":8,\"522\":2,\"523\":24,\"527\":12,\"582\":1,\"654\":1,\"655\":1,\"656\":1,\"657\":1,\"658\":1,\"659\":1,\"660\":1,\"661\":1,\"662\":1,\"663\":1,\"664\":1,\"665\":1,\"666\":1,\"667\":1,\"668\":1,\"669\":1,\"670\":1,\"671\":1,\"672\":1,\"692\":1,\"693\":1,\"694\":1,\"695\":1,\"696\":1,\"697\":1,\"698\":1,\"699\":1,\"700\":1,\"701\":1,\"704\":1,\"705\":1,\"706\":3,\"707\":1,\"708\":1,\"709\":1,\"710\":1,\"711\":1,\"712\":1,\"713\":1,\"714\":1,\"715\":2,\"716\":1,\"717\":1,\"718\":1,\"719\":1,\"721\":1}}],[\"=new\",{\"1\":{\"34\":2}}],[\"=>\",{\"1\":{\"18\":1,\"20\":1,\"120\":1,\"509\":5,\"512\":1,\"515\":1,\"582\":2}}],[\"=\",{\"1\":{\"0\":1,\"4\":2,\"16\":1,\"18\":6,\"41\":2,\"44\":1,\"45\":6,\"114\":3,\"115\":3,\"129\":1,\"132\":2,\"133\":1,\"135\":1,\"137\":7,\"145\":24,\"151\":4,\"153\":5,\"154\":5,\"158\":35,\"159\":40,\"161\":5,\"162\":2,\"163\":15,\"164\":10,\"165\":5,\"166\":13,\"167\":14,\"168\":33,\"170\":4,\"171\":2,\"174\":5,\"175\":12,\"181\":5,\"182\":3,\"185\":1,\"186\":2,\"187\":5,\"188\":5,\"189\":2,\"190\":22,\"191\":4,\"192\":1,\"194\":2,\"195\":3,\"196\":2,\"197\":1,\"198\":2,\"202\":6,\"205\":5,\"207\":6,\"208\":5,\"209\":6,\"210\":5,\"212\":6,\"213\":5,\"214\":6,\"215\":5,\"216\":20,\"221\":3,\"222\":4,\"224\":3,\"225\":9,\"226\":5,\"227\":9,\"228\":4,\"229\":5,\"232\":1,\"233\":6,\"234\":8,\"235\":4,\"236\":6,\"237\":5,\"238\":2,\"241\":3,\"243\":1,\"294\":2,\"299\":3,\"312\":1,\"313\":1,\"324\":9,\"325\":8,\"326\":1,\"329\":15,\"330\":1,\"331\":15,\"332\":2,\"333\":5,\"335\":3,\"340\":2,\"341\":1,\"343\":1,\"344\":4,\"345\":2,\"346\":2,\"348\":3,\"349\":16,\"350\":6,\"351\":2,\"352\":1,\"354\":53,\"355\":8,\"356\":4,\"357\":4,\"360\":7,\"361\":1,\"362\":8,\"364\":3,\"365\":3,\"366\":4,\"367\":5,\"368\":2,\"369\":4,\"370\":6,\"371\":17,\"372\":3,\"375\":6,\"376\":8,\"377\":4,\"378\":5,\"379\":7,\"380\":13,\"382\":5,\"383\":4,\"384\":13,\"385\":5,\"386\":7,\"387\":3,\"388\":3,\"389\":5,\"391\":7,\"392\":4,\"395\":1,\"397\":6,\"398\":1,\"399\":14,\"400\":2,\"401\":2,\"402\":17,\"405\":2,\"406\":9,\"407\":2,\"408\":1,\"412\":2,\"413\":3,\"414\":14,\"416\":30,\"417\":16,\"418\":12,\"419\":16,\"420\":2,\"421\":4,\"422\":6,\"424\":8,\"425\":2,\"426\":18,\"431\":2,\"432\":3,\"433\":5,\"436\":1,\"437\":1,\"438\":2,\"439\":2,\"440\":3,\"441\":4,\"442\":4,\"443\":3,\"445\":3,\"446\":3,\"448\":5,\"449\":8,\"450\":2,\"451\":8,\"452\":5,\"454\":1,\"455\":2,\"456\":2,\"457\":1,\"458\":1,\"459\":2,\"460\":5,\"462\":4,\"464\":3,\"465\":2,\"466\":4,\"467\":12,\"468\":7,\"469\":2,\"470\":10,\"471\":29,\"472\":1,\"475\":2,\"476\":1,\"477\":6,\"478\":1,\"479\":5,\"480\":5,\"481\":5,\"482\":6,\"484\":5,\"485\":14,\"486\":6,\"487\":2,\"490\":1,\"496\":8,\"498\":1,\"513\":5,\"520\":2,\"521\":32,\"522\":8,\"523\":8,\"524\":8,\"525\":6,\"527\":24,\"531\":3,\"532\":1,\"533\":6,\"535\":2,\"536\":6,\"539\":10,\"540\":2,\"541\":2,\"543\":6,\"545\":1,\"546\":1,\"547\":5,\"550\":5,\"551\":4,\"552\":2,\"553\":7,\"555\":3,\"556\":11,\"557\":2,\"559\":2,\"560\":5,\"567\":3,\"568\":11,\"571\":2,\"572\":3,\"573\":4,\"577\":5,\"578\":17,\"581\":10,\"582\":7,\"583\":8,\"584\":10,\"585\":16,\"586\":1,\"587\":21,\"588\":13,\"591\":2,\"593\":2,\"594\":5,\"595\":4,\"596\":3,\"597\":1,\"598\":13,\"600\":9,\"602\":2,\"603\":6,\"604\":1,\"607\":6,\"619\":3,\"620\":4,\"622\":3,\"623\":4,\"625\":3,\"627\":3,\"628\":4,\"629\":13,\"633\":3,\"638\":3,\"639\":5,\"641\":3,\"642\":3,\"644\":1,\"646\":5,\"649\":2,\"651\":16,\"652\":4,\"653\":11,\"675\":2,\"676\":2,\"677\":4,\"678\":4,\"679\":4,\"680\":2,\"681\":4,\"682\":13,\"684\":1,\"685\":1,\"686\":1,\"687\":1,\"688\":2,\"689\":1,\"692\":1,\"693\":1,\"694\":3,\"697\":2,\"698\":1,\"701\":4,\"704\":2,\"708\":7,\"711\":1,\"719\":3,\"720\":1,\"721\":4,\"723\":6,\"725\":26,\"727\":14,\"729\":1,\"730\":2,\"732\":1,\"733\":10,\"734\":16,\"736\":5,\"737\":1,\"738\":8,\"739\":1,\"740\":4,\"741\":2,\"742\":3,\"743\":2,\"748\":5,\"749\":1,\"750\":1,\"751\":9,\"752\":2,\"753\":8,\"754\":3,\"755\":4,\"756\":2,\"759\":4,\"760\":2,\"761\":1,\"762\":3,\"763\":3,\"764\":4,\"765\":6,\"766\":6,\"767\":5,\"774\":1,\"779\":3,\"780\":4,\"781\":4,\"782\":6,\"783\":4,\"784\":4,\"785\":9,\"791\":5,\"795\":1,\"797\":2,\"798\":3,\"799\":2,\"805\":6,\"809\":2,\"812\":14,\"813\":8,\"817\":9,\"820\":9,\"823\":5,\"824\":11,\"826\":3,\"827\":2,\"828\":4,\"829\":3,\"833\":1,\"834\":2,\"835\":1,\"838\":3,\"839\":1,\"840\":10,\"841\":5,\"843\":6,\"847\":8,\"851\":5,\"852\":1,\"866\":9,\"869\":3,\"870\":3,\"875\":19,\"877\":2,\"882\":4,\"884\":2,\"885\":2,\"886\":2,\"887\":2,\"888\":7,\"893\":2,\"895\":7,\"896\":3,\"897\":9,\"898\":11,\"899\":6,\"901\":7,\"902\":16,\"907\":1,\"909\":1,\"910\":1,\"911\":1,\"912\":1,\"914\":1,\"915\":1,\"916\":1,\"918\":1,\"919\":1,\"920\":1,\"938\":1,\"941\":1,\"942\":4,\"943\":4,\"944\":6,\"945\":4,\"946\":2,\"948\":3,\"949\":1,\"950\":2,\"951\":3,\"952\":17,\"953\":7,\"955\":1,\"956\":3,\"958\":3,\"959\":1,\"960\":4,\"965\":1,\"968\":4,\"969\":3,\"970\":3,\"971\":17,\"974\":3,\"975\":5,\"977\":3,\"980\":1,\"982\":2,\"984\":5,\"985\":6,\"986\":4,\"988\":3,\"989\":3,\"990\":5,\"991\":1,\"992\":1,\"993\":3,\"994\":3,\"995\":5,\"996\":5,\"998\":2,\"999\":1,\"1000\":3,\"1002\":4,\"1003\":6,\"1007\":6,\"1008\":2,\"1011\":2,\"1016\":14,\"1019\":24,\"1020\":12,\"1021\":22,\"1023\":16,\"1024\":26,\"1025\":17,\"1026\":9,\"1027\":14,\"1028\":10,\"1030\":14,\"1032\":2,\"1033\":2,\"1034\":20,\"1035\":3,\"1036\":13,\"1037\":40,\"1038\":30,\"1039\":25,\"1040\":13,\"1041\":1,\"1042\":79,\"1043\":15,\"1046\":7,\"1047\":22,\"1048\":6,\"1049\":7,\"1052\":6,\"1053\":20,\"1054\":21,\"1055\":8,\"1056\":1,\"1058\":13,\"1059\":29,\"1060\":34,\"1061\":10,\"1062\":4,\"1063\":2,\"1065\":3,\"1066\":5,\"1067\":86,\"1069\":17,\"1070\":3,\"1071\":2,\"1072\":2,\"1074\":31,\"1075\":8,\"1076\":5,\"1077\":4,\"1079\":22,\"1080\":19,\"1082\":2,\"1086\":4,\"1087\":1,\"1089\":57,\"1091\":6,\"1092\":8,\"1093\":3,\"1095\":23,\"1096\":16,\"1097\":26,\"1098\":22,\"1099\":3,\"1100\":19,\"1101\":13,\"1102\":4,\"1104\":27,\"1106\":4,\"1107\":22,\"1111\":2,\"1112\":26,\"1114\":2,\"1115\":8,\"1116\":8,\"1117\":18,\"1119\":2,\"1120\":20,\"1121\":3,\"1122\":24,\"1124\":14,\"1125\":23,\"1126\":10,\"1128\":1,\"1132\":4,\"1137\":11,\"1138\":15,\"1139\":26,\"1140\":3,\"1144\":1,\"1145\":4,\"1147\":9,\"1148\":13,\"1149\":2,\"1151\":2,\"1152\":2,\"1153\":23,\"1154\":5,\"1156\":1,\"1158\":5,\"1159\":4,\"1160\":2,\"1162\":1,\"1165\":3,\"1167\":8,\"1168\":10,\"1169\":7,\"1171\":1,\"1175\":1,\"1177\":12,\"1178\":8}}],[\"这总好过对象被误清理而导致的内存错误\",{\"1\":{\"1143\":1}}],[\"这可能会导致两种情况\",{\"1\":{\"1136\":1}}],[\"这可能会导致主协程一直阻塞等待\",{\"1\":{\"472\":1}}],[\"这相当于是把mspan看了一个对象数组\",{\"1\":{\"1125\":1}}],[\"这相当于给该枚举值加了一个元信息\",{\"1\":{\"202\":1}}],[\"这同样是一个进行抢占检测的良好时机\",{\"1\":{\"1106\":1}}],[\"这同样也是一个轻量\",{\"1\":{\"954\":1}}],[\"这表示defer在堆上分配\",{\"1\":{\"1074\":1}}],[\"这表明当前协程是唤醒方通过close函数唤醒的\",{\"1\":{\"1067\":1}}],[\"这几个特点对于经常使用\",{\"1\":{\"1051\":1}}],[\"这三种状态并非独立的\",{\"1\":{\"1151\":1}}],[\"这三种方式所用到的函数都不相同\",{\"1\":{\"1035\":1}}],[\"这三个栈缓存在后续分配空间的时候都会用到\",{\"1\":{\"1099\":1}}],[\"这三个参与者以及调度器本身在运行时都有其对应的类型表示\",{\"1\":{\"1085\":1}}],[\"这三个成员组成\",{\"1\":{\"1083\":1}}],[\"这三个定律便是\",{\"1\":{\"430\":1}}],[\"这需要用到registertranslation方法\",{\"1\":{\"952\":1}}],[\"这主要由hmap\",{\"1\":{\"1042\":1}}],[\"这主要会用到association方法\",{\"1\":{\"894\":1}}],[\"这主要归功于编译器本身使用\",{\"1\":{\"116\":1}}],[\"这篇文章讲的就是关于\",{\"1\":{\"848\":1}}],[\"这使得生成带有私钥的令牌成为可能\",{\"1\":{\"777\":1}}],[\"这使得我们可以直接一键运行\",{\"1\":{\"557\":1}}],[\"这使得我们可以暂时使用一些本地来不及发版的修改\",{\"1\":{\"512\":1}}],[\"这由开发者自己决定什么是请求主体\",{\"1\":{\"761\":1}}],[\"这四个特殊操作构成了整个unsafe包的基石\",{\"1\":{\"751\":1}}],[\"这才是本文主要讲解的内容\",{\"1\":{\"723\":1}}],[\"这将会用到http\",{\"1\":{\"640\":1}}],[\"这必然会导致编译速度变慢\",{\"1\":{\"579\":1}}],[\"这并不属于切片范围的知识\",{\"1\":{\"1028\":1}}],[\"这并不是什么稀奇事\",{\"1\":{\"11\":1}}],[\"这并非多此一举\",{\"1\":{\"577\":1}}],[\"这适用于简单的场景\",{\"1\":{\"531\":1}}],[\"这下可以很清楚的看到每一个测试用例的执行顺序\",{\"1\":{\"518\":1}}],[\"这台机器上能用的路径可能到另一台机器上就不能用了\",{\"1\":{\"512\":1}}],[\"这单单靠一个go\",{\"1\":{\"510\":1}}],[\"这其实是对应版本的\",{\"1\":{\"509\":1}}],[\"这其中\",{\"1\":{\"172\":1}}],[\"这款官方的依赖管理工具\",{\"1\":{\"492\":1}}],[\"这会产生缓存一致性问题\",{\"1\":{\"1153\":1}}],[\"这会导致一种情况\",{\"1\":{\"1104\":1}}],[\"这会对性能造成轻微影响\",{\"1\":{\"975\":1}}],[\"这会十分的繁琐\",{\"1\":{\"620\":1}}],[\"这会覆盖原有的类型\",{\"1\":{\"593\":1}}],[\"这会消耗很多的系统资源\",{\"1\":{\"481\":1}}],[\"这会极大的降低维护人员的心智负担\",{\"1\":{\"308\":1}}],[\"这在\",{\"1\":{\"479\":1}}],[\"这在进行参数校验的时候尤其有用\",{\"1\":{\"198\":1}}],[\"这次的路由后面加了一个\",{\"1\":{\"956\":1}}],[\"这次的问题是对字符串做了两次反转后不相等\",{\"1\":{\"527\":1}}],[\"这次需要测试的是一个反转字符串的函数\",{\"1\":{\"527\":1}}],[\"这次将样本数修改为\",{\"1\":{\"526\":1}}],[\"这次就正常了\",{\"1\":{\"402\":1}}],[\"这次可以非常明显的看到了main\",{\"1\":{\"45\":1}}],[\"这部分信号量的逻辑跟互斥锁那块基本上一致\",{\"1\":{\"1158\":1}}],[\"这部分代码主要在runtime\",{\"1\":{\"1146\":1}}],[\"这部分代码对应如下\",{\"1\":{\"1038\":1}}],[\"这部分工作由mcache\",{\"1\":{\"1125\":1}}],[\"这部分工作由runtime\",{\"1\":{\"1107\":1}}],[\"这部分的工作由mcache\",{\"1\":{\"1116\":1}}],[\"这部分的声明同样也是自定义的\",{\"1\":{\"773\":1}}],[\"这部分判断逻辑可以追溯到cmd\",{\"1\":{\"1076\":1}}],[\"这部分数据不可能抛弃掉\",{\"1\":{\"1059\":1}}],[\"这部分逻辑对应如下代码\",{\"1\":{\"1112\":1}}],[\"这部分逻辑对应runtime\",{\"1\":{\"1042\":1}}],[\"这部分逻辑可以追溯到cmd\",{\"1\":{\"1074\":1}}],[\"这部分逻辑我们可以在runtime\",{\"1\":{\"1060\":1}}],[\"这部分逻辑是由发送方来进行判断的\",{\"1\":{\"1060\":1}}],[\"这部分逻辑比较简单\",{\"1\":{\"1058\":1}}],[\"这部分对应的代码如下\",{\"1\":{\"1038\":1,\"1039\":1}}],[\"这部分对应下面的代码\",{\"1\":{\"1037\":1}}],[\"这部分对应代码如下\",{\"1\":{\"1036\":1}}],[\"这部分应该是希望它们在函数体执行结束后再执行\",{\"1\":{\"402\":1}}],[\"这部分是对站内收集的第三方库和框架做一个整理分类\",{\"1\":{\"50\":1}}],[\"这超出了基础的范围\",{\"1\":{\"381\":1}}],[\"这显然违背了字符串的初衷\",{\"1\":{\"1054\":1}}],[\"这显然会出现乱码\",{\"1\":{\"380\":1}}],[\"这显然是不太现实的\",{\"1\":{\"172\":1}}],[\"这\",{\"1\":{\"377\":1}}],[\"这么多的协程所需要的内存空间也要1tb左右\",{\"1\":{\"1151\":1}}],[\"这么做只会让迭代停止而已\",{\"1\":{\"582\":1}}],[\"这么做可以减少\",{\"1\":{\"410\":1}}],[\"这么做是为了内存安全\",{\"1\":{\"376\":1}}],[\"这么做通常是为了加载包下的init函数\",{\"1\":{\"295\":1}}],[\"这么简单了\",{\"1\":{\"88\":1}}],[\"这段代码可以正常运行\",{\"1\":{\"1071\":1}}],[\"这段代码通过将\",{\"1\":{\"1063\":1}}],[\"这段代码的意图很明显\",{\"1\":{\"598\":1}}],[\"这段代码的输出依旧是不确定的\",{\"1\":{\"462\":1}}],[\"这段代码永远都是先输出\",{\"1\":{\"472\":1}}],[\"这段代码结果是正确的\",{\"1\":{\"401\":1}}],[\"这段代码在\",{\"1\":{\"115\":1}}],[\"这段聚合操作就是匹配所有\",{\"1\":{\"229\":1}}],[\"这方面的库比较少\",{\"1\":{\"219\":1}}],[\"这方面做的比较出名的有很多\",{\"1\":{\"175\":1}}],[\"这就可能导致例子里面的错误\",{\"1\":{\"1070\":1}}],[\"这就导致了写性能的低下\",{\"1\":{\"1050\":1}}],[\"这就会导致被引用表和引用表的注释都是重复的\",{\"1\":{\"864\":1}}],[\"这就会出现一个问题\",{\"1\":{\"509\":1}}],[\"这就叫面向接口编程\",{\"1\":{\"567\":1}}],[\"这就叫实现\",{\"1\":{\"567\":1}}],[\"这就叫接口\",{\"1\":{\"567\":1}}],[\"这就形成了死锁\",{\"1\":{\"472\":1}}],[\"这就是sync\",{\"1\":{\"1045\":1}}],[\"这就是一个多对多的关系\",{\"1\":{\"893\":1}}],[\"这就是一个非常简单的使用案例\",{\"1\":{\"824\":1}}],[\"这就是一个\",{\"1\":{\"771\":1}}],[\"这就是一个最简单的\",{\"1\":{\"155\":1}}],[\"这就是面向接口编程的好处\",{\"1\":{\"567\":1}}],[\"这就是问题所在\",{\"1\":{\"484\":1}}],[\"这就是间接的循环导入\",{\"1\":{\"295\":1}}],[\"这就相当是有关于protobuf的反射\",{\"1\":{\"202\":1}}],[\"这就好像\",{\"1\":{\"195\":1}}],[\"这只是一个提示\",{\"1\":{\"174\":1}}],[\"这只是笔者比较喜欢的一个目录风格\",{\"1\":{\"92\":1}}],[\"这应该是最上游应该考虑的问题\",{\"1\":{\"171\":1}}],[\"这也说明了为什么recover过后函数会直接返回\",{\"1\":{\"1080\":1}}],[\"这也就是分段栈的由来\",{\"1\":{\"1103\":1}}],[\"这也就是为什么前面会说接口也是一个中间件\",{\"1\":{\"995\":1}}],[\"这也就导致了例子中的结果\",{\"1\":{\"414\":1}}],[\"这也就导致了第一个例子中的奇怪现象\",{\"1\":{\"402\":1}}],[\"这也是它受欢迎的原因之一\",{\"1\":{\"1083\":1}}],[\"这也是它的优点\",{\"1\":{\"962\":1}}],[\"这也是lockorder要按照地址大小来进行排序的根本原因\",{\"1\":{\"1067\":1}}],[\"这也是拉取式迭代器的一种模式\",{\"1\":{\"583\":1}}],[\"这也是一个空接口\",{\"1\":{\"568\":1}}],[\"这也是通常而言推荐模块名格式\",{\"1\":{\"509\":1}}],[\"这也是为什么要先讲写锁的原因\",{\"1\":{\"1160\":1}}],[\"这也是为什么管道关闭后仍然允许读取的原因\",{\"1\":{\"1060\":1}}],[\"这也是为什么在图中哈希桶数组与溢出桶数组是相邻的\",{\"1\":{\"1034\":1}}],[\"这也是为什么不允许被值拷贝的原因\",{\"1\":{\"719\":1}}],[\"这也是为什么需要as函数的原因\",{\"1\":{\"603\":1}}],[\"这也是为什么上例中对象计数要用到原子值的原因\",{\"1\":{\"485\":1}}],[\"这也是为什么\",{\"1\":{\"462\":1}}],[\"这也是为什么前面提到了只要有反射就离不开空接口\",{\"1\":{\"429\":1}}],[\"这也是为什么客户端接收到的错误会有\",{\"1\":{\"167\":1}}],[\"这也解释了为什么下面看起来很正常的代码会发生死锁\",{\"1\":{\"466\":1}}],[\"这也造成了每次哈希值都不相同\",{\"1\":{\"384\":1}}],[\"这也代表了编译器是如何看待你的代码的\",{\"1\":{\"311\":1}}],[\"这也正是\",{\"1\":{\"8\":1,\"1071\":1}}],[\"这时你才刚被唤醒\",{\"1\":{\"1173\":1}}],[\"这时仍然需要加锁\",{\"1\":{\"1116\":1}}],[\"这时会直接将其全部标记为黑色\",{\"1\":{\"1144\":1}}],[\"这时会直接将\",{\"1\":{\"1049\":1}}],[\"这时需要将其添加到\",{\"1\":{\"1047\":1}}],[\"这时\",{\"1\":{\"725\":1,\"975\":1}}],[\"这时候直接进入阻塞流程\",{\"1\":{\"1153\":1}}],[\"这时候我们就需要用到国际化多语言组件\",{\"1\":{\"952\":1}}],[\"这时候就需要用到了泛型\",{\"1\":{\"571\":1}}],[\"这时候就需要用到读写锁\",{\"1\":{\"481\":1}}],[\"这时候再手动修改一下goroot就可以切换到指定的版本了\",{\"1\":{\"18\":1}}],[\"这时应该通过指针来修改其元素值\",{\"1\":{\"442\":1}}],[\"这时名称不再重要\",{\"1\":{\"398\":1}}],[\"这时可以选择再嵌套一层t\",{\"1\":{\"523\":1}}],[\"这时可以加上参数\",{\"1\":{\"518\":1}}],[\"这时可以使用grpc\",{\"1\":{\"162\":1}}],[\"这时可以通过工具来进行管理\",{\"1\":{\"156\":1}}],[\"这时在\",{\"1\":{\"143\":1}}],[\"这块不断的探索\",{\"1\":{\"116\":1}}],[\"这两个方法\",{\"1\":{\"1176\":1}}],[\"这两个都是随机选的\",{\"1\":{\"1037\":1}}],[\"这两个函数会自动根据请求的content\",{\"1\":{\"971\":1}}],[\"这两个函数实际是math包下的两个函数\",{\"1\":{\"751\":1}}],[\"这两个例子的输出都是相同的\",{\"1\":{\"380\":1}}],[\"这两个通常放一块用\",{\"1\":{\"10\":1}}],[\"这两门语言笔者都很喜欢\",{\"1\":{\"88\":1}}],[\"这是错误的使用方式\",{\"1\":{\"1177\":1}}],[\"这是tryrlock的代码\",{\"1\":{\"1160\":1}}],[\"这是为了通知其它读者协程现在正有写者协程尝试持有锁\",{\"1\":{\"1158\":1}}],[\"这是为了减少传输过程的空间损耗\",{\"1\":{\"627\":1}}],[\"这是必须要避免的问题\",{\"1\":{\"1136\":1}}],[\"这是早期版本\",{\"1\":{\"1134\":1}}],[\"这是二进制取余操作\",{\"1\":{\"1036\":1}}],[\"这是最原始的响应方法\",{\"1\":{\"981\":1}}],[\"这是最常用的日志核心\",{\"1\":{\"839\":1}}],[\"这是库中提供的预定义\",{\"1\":{\"778\":1}}],[\"这是角色之间的继承关系\",{\"1\":{\"765\":1}}],[\"这是自定义函数的途径之一\",{\"1\":{\"728\":1}}],[\"这是具名返回值的使用方式\",{\"1\":{\"577\":1}}],[\"这是这门语言的核心所在\",{\"1\":{\"461\":1}}],[\"这是两个不同的类型\",{\"1\":{\"414\":1}}],[\"这是因为管道的使用场景通常都是多协程的情况\",{\"1\":{\"1062\":1}}],[\"这是因为map可以存储各种类型的键值对\",{\"1\":{\"1030\":1}}],[\"这是因为\",{\"1\":{\"414\":1,\"509\":1}}],[\"这是因为在unicode编码中\",{\"1\":{\"377\":1}}],[\"这是因为某种不可抗力中国大陆地区的用户无法访问服务器\",{\"1\":{\"112\":1}}],[\"这是计算斐波那契数列的一小段代码\",{\"1\":{\"331\":1}}],[\"这是启动函数main函数\",{\"1\":{\"297\":1}}],[\"这是main包\",{\"1\":{\"297\":1}}],[\"这是直接循环导入\",{\"1\":{\"295\":1}}],[\"这是由官方编写的一个比较全面的教程\",{\"1\":{\"288\":1}}],[\"这是由官方编写的一个非常简洁明了的教程\",{\"1\":{\"287\":1}}],[\"这是在设置文件生成的路径模式\",{\"1\":{\"201\":1}}],[\"这是未来会下载第三方依赖的二进制文件存放地址\",{\"1\":{\"90\":1}}],[\"这是\",{\"1\":{\"90\":1,\"548\":1,\"600\":1}}],[\"这是官网最初的样子\",{\"1\":{\"87\":1}}],[\"这是一段非常简单的代码\",{\"1\":{\"1175\":1}}],[\"这是一段输出\",{\"1\":{\"354\":1}}],[\"这是一些关于\",{\"1\":{\"289\":1}}],[\"这是一张\",{\"1\":{\"142\":1}}],[\"这是一种保守的做法\",{\"1\":{\"1143\":1}}],[\"这是一种异步抢占策略\",{\"1\":{\"1107\":1}}],[\"这是一种解决办法\",{\"1\":{\"952\":1}}],[\"这是一种计算机界的编译器优化技术\",{\"1\":{\"117\":1}}],[\"这是一种方便调试源码的信息\",{\"1\":{\"10\":1}}],[\"这是一个由社区共同维护的gin示例仓库\",{\"1\":{\"966\":1}}],[\"这是一个十分重要的字段language\",{\"1\":{\"953\":1}}],[\"这是一个十分重要的字段\",{\"1\":{\"953\":1}}],[\"这是一个一对一关联查询的例子\",{\"1\":{\"899\":1}}],[\"这是一个初始化\",{\"1\":{\"824\":1}}],[\"这是一个最简单的acl示例\",{\"1\":{\"764\":1}}],[\"这是一个最简单的acl访问控制模型\",{\"1\":{\"759\":1}}],[\"这是一个原始错误\",{\"1\":{\"602\":1}}],[\"这是一个原生字符串\",{\"1\":{\"374\":1}}],[\"这是一个错误\",{\"1\":{\"600\":1}}],[\"这是一个计算文件哈希值的\",{\"1\":{\"598\":1}}],[\"这是一个典型的数值溢出问题\",{\"1\":{\"595\":1}}],[\"这是一个二维\",{\"1\":{\"594\":1}}],[\"这是一个函数指针\",{\"1\":{\"592\":1}}],[\"这是一个泛型结构体\",{\"1\":{\"572\":1}}],[\"这是一个泛型哈希表\",{\"1\":{\"572\":1}}],[\"这是一个泛型切片形参的例子\",{\"1\":{\"572\":1}}],[\"这是一个泛型切片\",{\"1\":{\"572\":1}}],[\"这是一个功能十分简单的函数\",{\"1\":{\"571\":1}}],[\"这是一个person接口\",{\"1\":{\"565\":1}}],[\"这是一个非常简单的测试\",{\"1\":{\"547\":1}}],[\"这是一个手动声明多个变量来创建测试数据的例子\",{\"1\":{\"524\":1}}],[\"这是一个很简单的模板文件使用案例\",{\"1\":{\"736\":1}}],[\"这是一个很简单的示例\",{\"1\":{\"550\":1}}],[\"这是一个很简单的\",{\"1\":{\"498\":1,\"1011\":1}}],[\"这是一个很经典的循环案例\",{\"1\":{\"354\":1}}],[\"这是一个使用互斥锁的例子\",{\"1\":{\"490\":1}}],[\"这是一个管道的声明语句\",{\"1\":{\"463\":1}}],[\"这是一个在循环体中开启协程的例子\",{\"1\":{\"462\":1}}],[\"这是一个自定义排序规则的例子\",{\"1\":{\"398\":1}}],[\"这是一个无序比较双精度浮点数的指令\",{\"1\":{\"384\":1}}],[\"这是一个字符串\",{\"1\":{\"377\":2}}],[\"这是一个普通字符串\",{\"1\":{\"374\":4}}],[\"这是一个变量\",{\"1\":{\"360\":1}}],[\"这是一个双循环\",{\"1\":{\"356\":1}}],[\"这是一个死循环\",{\"1\":{\"354\":1}}],[\"这是一个语句\",{\"1\":{\"297\":1}}],[\"这是一个相当简单的示例\",{\"1\":{\"151\":1}}],[\"这是一个强大的二进制序列化工具集和语言\",{\"1\":{\"147\":1}}],[\"这是一个困扰了\",{\"1\":{\"116\":1}}],[\"这是一个比较实用的特性\",{\"1\":{\"114\":1}}],[\"这是一个不对外暴露的变量\",{\"1\":{\"4\":1}}],[\"这类\",{\"1\":{\"739\":1}}],[\"这类问题不关心给出的类型是什么\",{\"1\":{\"571\":1}}],[\"这类名称必须要遵守\",{\"1\":{\"174\":1}}],[\"这类指令需要谨慎使用\",{\"1\":{\"39\":1}}],[\"这类是\",{\"1\":{\"39\":1}}],[\"这里可能是多个协程在竞争互斥锁\",{\"1\":{\"1173\":1}}],[\"这里可以体现出\",{\"1\":{\"17\":1}}],[\"这里再加上\",{\"1\":{\"1159\":1}}],[\"这里也只是简单提一嘴\",{\"1\":{\"1150\":1}}],[\"这里还是要讲一下\",{\"1\":{\"1143\":1}}],[\"这里简单介绍一下重要的\",{\"1\":{\"1112\":1}}],[\"这里简单解释下其参数\",{\"1\":{\"1067\":1}}],[\"这里\",{\"1\":{\"1093\":1}}],[\"这里调用的runtime\",{\"1\":{\"1089\":1}}],[\"这里仅介绍部分字段方便理解\",{\"1\":{\"1087\":1}}],[\"这里返回的casi为\",{\"1\":{\"1067\":1}}],[\"这里会将创建若干个sudog并将其和对应的管道链接起来\",{\"1\":{\"1067\":1}}],[\"这里会调用runitme\",{\"1\":{\"1067\":1}}],[\"这里会先解锁然后panic\",{\"1\":{\"1067\":1}}],[\"这里会先解锁然后直接返回\",{\"1\":{\"1067\":1}}],[\"这里会直接从缓冲区中读取数据\",{\"1\":{\"1067\":1}}],[\"这里会走到runtime\",{\"1\":{\"1067\":1}}],[\"这里会出现很多搜索结果\",{\"1\":{\"503\":1}}],[\"这里值得注意的是\",{\"1\":{\"1067\":1}}],[\"这里为了方便理解省去了部分代码\",{\"1\":{\"1067\":1}}],[\"这里为了演示\",{\"1\":{\"144\":1}}],[\"这里推荐一个开源实现orcaman\",{\"1\":{\"1050\":1}}],[\"这里修改的只是启动时输出路由信息的的日志\",{\"1\":{\"1008\":1}}],[\"这里用required举个例子\",{\"1\":{\"952\":1}}],[\"这里安装\",{\"1\":{\"851\":1}}],[\"这里并不重要所以省略\",{\"1\":{\"764\":1}}],[\"这里有一些数据\",{\"1\":{\"701\":2}}],[\"这里有两篇\",{\"1\":{\"598\":1}}],[\"这里就不展开了\",{\"1\":{\"1055\":1}}],[\"这里就不再演示\",{\"1\":{\"988\":1}}],[\"这里就不再做过多的介绍\",{\"1\":{\"139\":1}}],[\"这里就不举例子演示了\",{\"1\":{\"981\":1}}],[\"这里就不演示了\",{\"1\":{\"584\":1}}],[\"这里面主要包含了以下几个部分\",{\"1\":{\"561\":1}}],[\"这里采用反转两次的方法来进行验证\",{\"1\":{\"527\":1}}],[\"这里以删除\",{\"1\":{\"503\":1}}],[\"这里先按下不表\",{\"1\":{\"503\":1}}],[\"这里直接选择第一个\",{\"1\":{\"503\":1}}],[\"这里选择七牛云的代理\",{\"1\":{\"501\":1}}],[\"这里开启1000个协程\",{\"1\":{\"485\":1}}],[\"这里开两个服务端\",{\"1\":{\"175\":1}}],[\"这里使用时就不能省略掉类型实参\",{\"1\":{\"572\":1}}],[\"这里使用了sync\",{\"1\":{\"472\":1}}],[\"这里使用的是sqlx库\",{\"1\":{\"230\":1}}],[\"这里总共创建了\",{\"1\":{\"467\":1}}],[\"这里是生成go文件所以使用\",{\"1\":{\"201\":1}}],[\"这里的操作就相当于len\",{\"1\":{\"1167\":1}}],[\"这里的类型是locker接口\",{\"1\":{\"1166\":1}}],[\"这里的类型内存大小更为清晰明确\",{\"1\":{\"537\":1}}],[\"这里的\",{\"1\":{\"1076\":1}}],[\"这里的语言通常可以在http的请求头中的accept\",{\"1\":{\"952\":2}}],[\"这里的数据大多数可读性并不高\",{\"1\":{\"557\":1}}],[\"这里的官方文档给出的解释实在是太繁琐了\",{\"1\":{\"195\":1}}],[\"这里的链接是在学习过程中慢慢收集的\",{\"1\":{\"97\":1}}],[\"这里传入的是sync\",{\"1\":{\"482\":1}}],[\"这里传入的\",{\"1\":{\"175\":1}}],[\"这里必须要updatestate\",{\"1\":{\"175\":1}}],[\"这里介绍手动创建\",{\"1\":{\"161\":1}}],[\"这里演示是消息服务\",{\"1\":{\"158\":1}}],[\"这里下载\",{\"1\":{\"145\":1}}],[\"这里只关注它删除的逻辑\",{\"1\":{\"1039\":1}}],[\"这里只讨论其自带的日志服务\",{\"1\":{\"1005\":1}}],[\"这里只是演示\",{\"1\":{\"989\":1}}],[\"这里只是简单的介绍下如何使用test命令\",{\"1\":{\"38\":1}}],[\"这里只需要将它的地址复制下来\",{\"1\":{\"503\":1}}],[\"这里只介绍通过\",{\"1\":{\"145\":1}}],[\"这里事先准备一个\",{\"1\":{\"145\":1}}],[\"这里让\",{\"1\":{\"144\":1}}],[\"这里将其称为\",{\"1\":{\"1139\":1}}],[\"这里将切片的底层数组的指针传递给了\",{\"1\":{\"539\":1}}],[\"这里将称成为grow函数\",{\"1\":{\"399\":1}}],[\"这里将\",{\"1\":{\"143\":1}}],[\"这种饥饿模式的设计\",{\"1\":{\"1151\":1}}],[\"这种是一般的情况\",{\"1\":{\"1151\":1}}],[\"这种算法的缺点就在于耗时较长\",{\"1\":{\"1134\":1}}],[\"这种做法也一直沿用到现在\",{\"1\":{\"1130\":1}}],[\"这种嵌入字段在内存分配组件中尤为常见\",{\"1\":{\"1129\":1}}],[\"这种嵌套的测试用例一般称为子测试\",{\"1\":{\"523\":1}}],[\"这种分级的做法能较为有效的解决内存碎片的问题\",{\"1\":{\"1123\":1}}],[\"这种分配方式的优点就是快速和简单\",{\"1\":{\"1111\":1}}],[\"这种策略得依赖函数调用这一时机才能触发抢占并且主动让权\",{\"1\":{\"1106\":1}}],[\"这种操作所造成的性能损耗是非常大的\",{\"1\":{\"1103\":1}}],[\"这种操作经常在标准库尤其是runtime中出现\",{\"1\":{\"44\":1}}],[\"这种优化方式有以下几个限制条件\",{\"1\":{\"1076\":1}}],[\"这种优化带来的提升是显而易见的\",{\"1\":{\"485\":1}}],[\"这种只是看起来要比上面好一点点\",{\"1\":{\"1062\":1}}],[\"这种实现相比上面那种更慢\",{\"1\":{\"1033\":1}}],[\"这种\",{\"1\":{\"810\":1,\"1141\":1}}],[\"这种格式纯粹是个人觉得看的顺眼\",{\"1\":{\"725\":1}}],[\"这种格式\",{\"1\":{\"725\":1}}],[\"这种判断语句\",{\"1\":{\"598\":1}}],[\"这种主动传递元素的迭代器我们一般称之为推送式迭代器\",{\"1\":{\"582\":1}}],[\"这种需求\",{\"1\":{\"533\":1}}],[\"这种复制方式需要先将源文件的全部内容读取到内存中\",{\"1\":{\"419\":1}}],[\"这种我们一般称之为内存泄漏\",{\"1\":{\"401\":1}}],[\"这种理念是否正确见仁见智\",{\"1\":{\"395\":1}}],[\"这种代码是可以通过编译的\",{\"1\":{\"329\":1}}],[\"这种情况会将其翻译成一个对runtime\",{\"1\":{\"1066\":1}}],[\"这种情况编译器会直接将其翻译成对管道的收发操作\",{\"1\":{\"1066\":1}}],[\"这种情况就是发生了哈希冲突\",{\"1\":{\"1032\":1}}],[\"这种情况就没法直接访问了\",{\"1\":{\"534\":1}}],[\"这种情况一般出现在对切片进行切割的时候\",{\"1\":{\"1019\":1}}],[\"这种情况一般是有特殊用途\",{\"1\":{\"471\":1}}],[\"这种情况panic确实会恢复\",{\"1\":{\"607\":1}}],[\"这种情况下对管道的接收或发送是非阻塞式的\",{\"1\":{\"1066\":1}}],[\"这种情况下生成代码会报错\",{\"1\":{\"830\":1}}],[\"这种情况下\",{\"1\":{\"594\":1}}],[\"这种情况下就会占用很大的内存并且给\",{\"1\":{\"485\":1}}],[\"这种情况经常会在遍历字符串时遇到\",{\"1\":{\"380\":1}}],[\"这种情况要么是\",{\"1\":{\"162\":1}}],[\"这种情况发生\",{\"1\":{\"7\":1}}],[\"这种方案被取消了\",{\"1\":{\"1130\":1}}],[\"这种方式来直接访问\",{\"1\":{\"534\":1}}],[\"这种方式可以类比一下\",{\"1\":{\"202\":1}}],[\"这种方式可读性要比原来那种高得多\",{\"1\":{\"42\":1}}],[\"这种方法是相对而言比较好的一种\",{\"1\":{\"1085\":1}}],[\"这种方法也被称为增量扩容\",{\"1\":{\"1042\":1}}],[\"这种方法性能不会造成损失\",{\"1\":{\"810\":1}}],[\"这种方法仅适用于支持这种通配符的\",{\"1\":{\"201\":1}}],[\"这种方法可以绕过\",{\"1\":{\"44\":1}}],[\"这种依赖管理方式现在看起来确实很愚蠢\",{\"1\":{\"28\":1}}],[\"这一部分就主要是\",{\"1\":{\"1104\":1}}],[\"这一部分的作用渐渐的被废弃了\",{\"1\":{\"18\":1}}],[\"这一理念同样也体现在标准库中\",{\"1\":{\"1071\":1}}],[\"这一段的接口判断的逻辑可以参考自cmd\",{\"1\":{\"1070\":1}}],[\"这一段代码将会无法通过编译\",{\"1\":{\"414\":1}}],[\"这一条策略便是定义了具有角色data\",{\"1\":{\"766\":1}}],[\"这一条规则意味在匹配结果中\",{\"1\":{\"763\":1}}],[\"这一条规则意为在匹配结果中只要不存在deny的结果\",{\"1\":{\"763\":1}}],[\"这一条规则意为在匹配结果中有一条结果allow\",{\"1\":{\"763\":1}}],[\"这一行定义只是描述了policy该如何书写\",{\"1\":{\"760\":1}}],[\"这一小节会简单的介绍下\",{\"1\":{\"590\":1}}],[\"这一堆概念很死板\",{\"1\":{\"563\":1}}],[\"这一过程过程都发生在runtime\",{\"1\":{\"1107\":1}}],[\"这一过程可以用go\",{\"1\":{\"513\":1}}],[\"这一过程通常不会花费太多时间\",{\"1\":{\"504\":1}}],[\"这一串网址同时也是\",{\"1\":{\"509\":1}}],[\"这一点可以在cmd\",{\"1\":{\"1065\":1}}],[\"这一点已经在语言入门中阐述过了\",{\"1\":{\"1034\":1}}],[\"这一点引发了困扰\",{\"1\":{\"1028\":1}}],[\"这一点你会在以后的编码中慢慢体会到\",{\"1\":{\"609\":1}}],[\"这一点是我们不希望看到的\",{\"1\":{\"512\":1}}],[\"这一点会在后续的管道原理中说明\",{\"1\":{\"469\":1}}],[\"这一点跟get命令一致\",{\"1\":{\"19\":1}}],[\"这一概念\",{\"1\":{\"399\":1}}],[\"这一键值对\",{\"1\":{\"383\":1}}],[\"这一节就来讲一下在\",{\"1\":{\"334\":1}}],[\"这一块\",{\"1\":{\"180\":1}}],[\"这样避免了频繁线程上下文\",{\"1\":{\"1153\":1}}],[\"这样其余的白色子对象都会处于灰色对象的保护之下\",{\"1\":{\"1143\":1}}],[\"这样看起来似乎要更好一点\",{\"1\":{\"1069\":1}}],[\"这样我们就可以在程序退出时做收尾工作\",{\"1\":{\"1063\":1}}],[\"这样操作直到当前桶全部搬迁完毕\",{\"1\":{\"1042\":1}}],[\"这样会导致系统中的其他线程无法得到足够的\",{\"1\":{\"1153\":1}}],[\"这样会导致主协程永远无法被调度\",{\"1\":{\"1106\":1}}],[\"这样会导致\",{\"1\":{\"1042\":1}}],[\"这样会简单很多\",{\"1\":{\"1041\":1}}],[\"这样会有利于其缓存一些数据\",{\"1\":{\"940\":1}}],[\"这样明白append实际上是怎么工作的\",{\"1\":{\"1024\":1}}],[\"这样指定数据库数据类型也是支持的\",{\"1\":{\"862\":1}}],[\"这样它就会自动具备gorm\",{\"1\":{\"857\":1}}],[\"这样在小字符串转换的时候可以节省内存\",{\"1\":{\"1054\":1}}],[\"这样在添加时就会触发扩容\",{\"1\":{\"1019\":1}}],[\"这样在实体映射的时候\",{\"1\":{\"854\":1}}],[\"这样在后续的学习中会更加方便\",{\"1\":{\"517\":1}}],[\"这样\",{\"1\":{\"751\":1,\"963\":1}}],[\"这样处理起来就跟普通的错误处理没什么区别\",{\"1\":{\"584\":1}}],[\"这样做效率更高\",{\"1\":{\"1145\":1}}],[\"这样做会造成很大的内存空间浪费\",{\"1\":{\"1111\":1}}],[\"这样做会更安全\",{\"1\":{\"536\":1}}],[\"这样做的好处在于不用拷贝原有的栈\",{\"1\":{\"1103\":1}}],[\"这样做的好处就是传递的过程不再需要拷贝\",{\"1\":{\"536\":1}}],[\"这样做有一个非常明显的缺点\",{\"1\":{\"1085\":1}}],[\"这样做是希望扩容后的数据能够更加均匀的分布\",{\"1\":{\"1042\":1}}],[\"这样做是为了避免内存对齐带来的空间浪费\",{\"1\":{\"1030\":1}}],[\"这样做确实不太安全\",{\"1\":{\"1002\":1}}],[\"这样做肯定比以前使用interface\",{\"1\":{\"578\":1}}],[\"这样使用就等同于单元测试\",{\"1\":{\"527\":1}}],[\"这样可以挑选自己感兴趣的去了解\",{\"1\":{\"616\":1}}],[\"这样可以存放任意类型\",{\"1\":{\"578\":1}}],[\"这样可以使得分析日志时定位更准确\",{\"1\":{\"522\":1}}],[\"这样可以避免黑色对象直接引用白色对象\",{\"1\":{\"1142\":1}}],[\"这样可以避免阻塞全局\",{\"1\":{\"1050\":1}}],[\"这样可以避免覆盖原切片的后续元素\",{\"1\":{\"372\":1}}],[\"这样可以避免频繁的栈扩容缩容\",{\"1\":{\"118\":1}}],[\"这样就只涉及到了协程间的切换\",{\"1\":{\"1085\":1}}],[\"这样就能阻止迭代器继续迭代\",{\"1\":{\"1040\":1}}],[\"这样就完成了一次迭代\",{\"1\":{\"1037\":1}}],[\"这样就完成了一对一关系的关联\",{\"1\":{\"891\":1}}],[\"这样就不需要去一个个对比\",{\"1\":{\"1036\":1}}],[\"这样就可能会出现一部分\",{\"1\":{\"1104\":1}}],[\"这样就可能会造成程序错误\",{\"1\":{\"509\":1}}],[\"这样就可以避免出现上述问题\",{\"1\":{\"527\":1}}],[\"这样就实现了一个简单的互斥锁\",{\"1\":{\"467\":1}}],[\"这样类似的中央仓库\",{\"1\":{\"501\":1}}],[\"这样无锁化的操作虽然不会导致协程阻塞\",{\"1\":{\"490\":1}}],[\"这样确实三个管道都能用上了\",{\"1\":{\"471\":1}}],[\"这样用起来太麻烦了\",{\"1\":{\"343\":1}}],[\"这样的分配无法利用充分利用多核\",{\"1\":{\"1085\":1}}],[\"这样的\",{\"1\":{\"866\":1}}],[\"这样的话使用起来非常的不灵活\",{\"1\":{\"580\":1}}],[\"这样的依赖管理\",{\"1\":{\"544\":1}}],[\"这样的测试数据看起来就要直观很多\",{\"1\":{\"524\":1}}],[\"这样的代码依旧不能修改内部的值\",{\"1\":{\"413\":1}}],[\"这样的代码连编译都过不了\",{\"1\":{\"309\":1}}],[\"这样的程序将无法通过编译\",{\"1\":{\"392\":1}}],[\"这样的参数来获取其可能的值\",{\"1\":{\"8\":1}}],[\"这样才能覆盖原有的tag\",{\"1\":{\"953\":1}}],[\"这样才能确保程序正常通过编译\",{\"1\":{\"530\":1}}],[\"这样才能方便服务端客户端两端都能解析\",{\"1\":{\"168\":1}}],[\"这样才能还原其本来的形式\",{\"1\":{\"9\":1}}],[\"这样一来其标记效率相比于标记\",{\"1\":{\"1136\":1}}],[\"这样一来当重新切换回用户代码的时候\",{\"1\":{\"1107\":1}}],[\"这样一来传递字符串的成本就会非常低\",{\"1\":{\"1052\":1}}],[\"这样一来传递切片的成本就会非常低\",{\"1\":{\"1019\":1}}],[\"这样一来可能很多桶都是空的\",{\"1\":{\"1043\":1}}],[\"这样一来的话就会导致整个\",{\"1\":{\"1042\":1}}],[\"这样一来就能满足弱三色不变式\",{\"1\":{\"1143\":1}}],[\"这样一来就不会出现上述的问题了\",{\"1\":{\"1070\":1}}],[\"这样一来就完成了桶的清除\",{\"1\":{\"1040\":1}}],[\"这样一来就是一个简单的枚举实现了\",{\"1\":{\"326\":1}}],[\"这样一来我们就可以通过next和stop函数来手动控制迭代的逻辑了\",{\"1\":{\"583\":1}}],[\"这样一来自定义迭代器也就成为了可能\",{\"1\":{\"580\":1}}],[\"这样一来即便不需要注释也可以知晓这是什么类型的测试\",{\"1\":{\"517\":1}}],[\"这样一来将协程\",{\"1\":{\"484\":1}}],[\"这样一来对于不同实例化的需求只需要一个构造函数即可完成\",{\"1\":{\"406\":1}}],[\"这样一来最上游调用时传入的超时时间\",{\"1\":{\"169\":1}}],[\"这样一来\",{\"1\":{\"47\":1,\"479\":1,\"534\":1,\"1019\":1,\"1104\":1,\"1106\":1}}],[\"这些实现位于runtime\",{\"1\":{\"1166\":1}}],[\"这些协程会在共享资源\",{\"1\":{\"1165\":1}}],[\"这些问题都会在下面的内容得到解答\",{\"1\":{\"1077\":1}}],[\"这些错误早在编译期的类型检查阶段就会找出来\",{\"1\":{\"1061\":1}}],[\"这些工作实际上是由runtime\",{\"1\":{\"1042\":1}}],[\"这些工具存放在goroot\",{\"1\":{\"14\":1}}],[\"这些桶的指针连起来就形成了一个bmap链表\",{\"1\":{\"1032\":1}}],[\"这些操作会非常频繁的出现\",{\"1\":{\"1030\":1}}],[\"这些组可以无限制地嵌套而不会降低性能\",{\"1\":{\"963\":1}}],[\"这些需求可以通过使用router\",{\"1\":{\"958\":1}}],[\"这些配置文件应当提前被\",{\"1\":{\"792\":1}}],[\"这些定义的模板在并不会生成在最终的模板中\",{\"1\":{\"733\":1}}],[\"这些内置的基础类型\",{\"1\":{\"590\":1}}],[\"这些数据要看懂还挺不容易的\",{\"1\":{\"561\":1}}],[\"这些函数实际上并不存在\",{\"1\":{\"536\":1}}],[\"这些变量的内存会随着出栈而被回收\",{\"1\":{\"399\":1}}],[\"这些枚举实际上就是数字\",{\"1\":{\"326\":1}}],[\"这些是比较常用的\",{\"1\":{\"210\":1}}],[\"这些插件也是单独的二进制文件\",{\"1\":{\"200\":1}}],[\"这些符号是不允许出现在导入路径中的\",{\"1\":{\"193\":1}}],[\"这些编号用于在二进制消息体中识别和定义这些字段\",{\"1\":{\"187\":1}}],[\"这些方法乍一看是看不出来入参和返回值是什么类型的\",{\"1\":{\"158\":1}}],[\"这些指令通常以注释的形式存在\",{\"1\":{\"39\":1}}],[\"这些分析器的源代码位于cmd\",{\"1\":{\"37\":1}}],[\"这些缓存默认存放在gocache\",{\"1\":{\"15\":1}}],[\"这些设置是为了方便在版本更新过程中而出现了不兼容变化时\",{\"1\":{\"7\":1}}],[\"这些命令都位于src\",{\"1\":{\"4\":1}}],[\"这些命令涵盖了文档\",{\"1\":{\"2\":1}}],[\"这提醒着作者学习之路还十分漫长\",{\"1\":{\"0\":1}}],[\"这个协程通过\",{\"1\":{\"1165\":1}}],[\"这个协议应当所有节点一致\",{\"1\":{\"143\":1}}],[\"这个r代表的就是现在正在工作的读者协程数量\",{\"1\":{\"1158\":1}}],[\"这个runtime\",{\"1\":{\"1098\":1}}],[\"这个饥饿指的是等待协程长时间无法持有锁而一直处于阻塞状态\",{\"1\":{\"1151\":1}}],[\"这个案例对于大部分人来说都很简单\",{\"1\":{\"1149\":1}}],[\"这个案例只是一个很简单的示例\",{\"1\":{\"166\":1}}],[\"这个相当好理解\",{\"1\":{\"1142\":1}}],[\"这个相对路径不是指的导入文件与被导入文件的相对路径\",{\"1\":{\"193\":1}}],[\"这个时间由runtime\",{\"1\":{\"1132\":1}}],[\"这个时候就可以使用retract指令\",{\"1\":{\"509\":1}}],[\"这个时候就可以使用\",{\"1\":{\"168\":1}}],[\"这个时候\",{\"1\":{\"87\":1}}],[\"这个范围内的小对象\",{\"1\":{\"1125\":1}}],[\"这个由所有heaparena组成的二维数组就构成了\",{\"1\":{\"1115\":1}}],[\"这个值在初始化时就被设置好了\",{\"1\":{\"1112\":1}}],[\"这个值是固定的且没法修改\",{\"1\":{\"1089\":1}}],[\"这个操作会清除原来buckets的内存\",{\"1\":{\"1040\":1}}],[\"这个结构体只有三个字段\",{\"1\":{\"1019\":1}}],[\"这个函数的逻辑十分简单\",{\"1\":{\"1026\":1}}],[\"这个函数的作用是负责翻译内容\",{\"1\":{\"952\":1}}],[\"这个函数的作用是注册翻译模板\",{\"1\":{\"952\":1}}],[\"这个函数没有函数体只有一个签名\",{\"1\":{\"44\":1}}],[\"这个标签用于给结构体字段做中文名\",{\"1\":{\"952\":2}}],[\"这个规则适用于所有的增删改查操作\",{\"1\":{\"869\":1}}],[\"这个规则仅适用于函数内的变量\",{\"1\":{\"329\":1}}],[\"这个表达式在生成代码时会被复制到\",{\"1\":{\"827\":1}}],[\"这个声明不应该被调用\",{\"1\":{\"823\":1}}],[\"这个库使用起来非常简单\",{\"1\":{\"812\":1}}],[\"这个库支持解析和验证以及\",{\"1\":{\"776\":1}}],[\"这个文档只是简单的讲解如何去使用dockerapi\",{\"1\":{\"800\":1}}],[\"这个管道与chan是两个东西\",{\"1\":{\"729\":1}}],[\"这个方向\",{\"1\":{\"613\":1}}],[\"这个包相当于是标准库errors包的加强版\",{\"1\":{\"603\":1}}],[\"这个包通常命名为test\",{\"1\":{\"517\":1}}],[\"这个类型约束内规定了哪些类型是允许的\",{\"1\":{\"571\":1}}],[\"这个很好理解\",{\"1\":{\"551\":1}}],[\"这个过程由runtime\",{\"1\":{\"1140\":1}}],[\"这个过程中需要持有锁\",{\"1\":{\"1120\":1}}],[\"这个过程将会相当消耗性能\",{\"1\":{\"1053\":1}}],[\"这个过程就叫等量扩容\",{\"1\":{\"1043\":1}}],[\"这个过程就被称为扩容\",{\"1\":{\"1025\":1}}],[\"这个过程就类似下面的代码\",{\"1\":{\"1020\":1}}],[\"这个过程叫传递\",{\"1\":{\"602\":1}}],[\"这个过程是自动完成的\",{\"1\":{\"500\":1}}],[\"这个过程主要发生在本地开发完成后\",{\"1\":{\"35\":1}}],[\"这个有很多选择\",{\"1\":{\"495\":1}}],[\"这个坑还是非常隐晦的\",{\"1\":{\"402\":1}}],[\"这个效果就更为明显\",{\"1\":{\"331\":1}}],[\"这个序号其实就是代码的相对行号\",{\"1\":{\"325\":1}}],[\"这个可见性的规则适用于整个\",{\"1\":{\"294\":1}}],[\"这个\",{\"1\":{\"244\":1}}],[\"这个回滚自然是无效的\",{\"1\":{\"238\":1}}],[\"这个模式主要是用于将其直接生成在模块中\",{\"1\":{\"201\":1}}],[\"这个扫描路径应该跟你编译时指定的路径是一致的\",{\"1\":{\"193\":1}}],[\"这个字段里面\",{\"1\":{\"167\":1}}],[\"这个领域\",{\"1\":{\"146\":1}}],[\"这个领域只是一名初学者\",{\"1\":{\"0\":1}}],[\"这个指令一般用于一些低级的系统调用\",{\"1\":{\"48\":1}}],[\"这个指令的操作可以用于链接其它包的函数或者全局变量\",{\"1\":{\"44\":1}}],[\"这个链接过程在编译期完成\",{\"1\":{\"44\":1}}],[\"这个例子非常的简单\",{\"1\":{\"682\":1}}],[\"这个例子是执行\",{\"1\":{\"40\":1}}],[\"这个例子表示的是在\",{\"1\":{\"12\":1}}],[\"这个功能相当的重要\",{\"1\":{\"38\":1}}],[\"这个小小的文档站初衷是代表着作者在\",{\"1\":{\"0\":1}}],[\"这大概就是笔者对于\",{\"1\":{\"0\":1}}],[\"这门语言\",{\"1\":{\"0\":1}}],[\"门槛低\",{\"1\":{\"0\":1}}],[\"在sync标准库里它几乎无处不在\",{\"1\":{\"1176\":1}}],[\"在select的case中对值为nil的管道进行操作的话\",{\"1\":{\"471\":1}}],[\"在server\",{\"1\":{\"153\":1}}],[\"在trylock部分已经讲过了\",{\"1\":{\"1158\":1}}],[\"在饥饿模式下\",{\"1\":{\"1151\":1,\"1154\":1}}],[\"在清理时\",{\"1\":{\"1147\":1}}],[\"在清除阶段只需将白色集合中对象的内存释放即可\",{\"1\":{\"1135\":1}}],[\"在垃圾回收中\",{\"1\":{\"1146\":1}}],[\"在采用混合写屏障后\",{\"1\":{\"1145\":1}}],[\"在采用异步抢占策略以后\",{\"1\":{\"1107\":1}}],[\"在拦截到写操作时都是立即标记对象颜色\",{\"1\":{\"1145\":1}}],[\"在扫描完毕后\",{\"1\":{\"1144\":1}}],[\"在扫描开始时需要\",{\"1\":{\"1143\":1}}],[\"在由全灰变为全黑的过程中是需要暂停当前协程的\",{\"1\":{\"1144\":1}}],[\"在赋值前做一些指定的操作\",{\"1\":{\"1141\":1}}],[\"在工作时\",{\"1\":{\"1137\":1}}],[\"在工作目录下查找\",{\"1\":{\"791\":1}}],[\"在三色标记工作开始时\",{\"1\":{\"1135\":1}}],[\"在回收的过程中\",{\"1\":{\"1134\":1}}],[\"在内存中\",{\"1\":{\"1134\":1}}],[\"在内存利用率最低的情况下\",{\"1\":{\"1034\":1}}],[\"在写下本文时\",{\"1\":{\"1130\":1}}],[\"在写入时传入的数字有以下几个含义\",{\"1\":{\"556\":1}}],[\"在刚触发\",{\"1\":{\"1138\":1}}],[\"在刚发布时\",{\"1\":{\"1130\":1}}],[\"在刚初始化时\",{\"1\":{\"1116\":1}}],[\"在今天来看垃圾回收\",{\"1\":{\"1130\":1}}],[\"在今天几乎所有的\",{\"1\":{\"492\":1}}],[\"在为对象分配内存的时候\",{\"1\":{\"1123\":1}}],[\"在正常情况下\",{\"1\":{\"1117\":1}}],[\"在正常情况下随着exp函数的调用结束\",{\"1\":{\"399\":1}}],[\"在mpan部分中提到过\",{\"1\":{\"1123\":1}}],[\"在mheap中\",{\"1\":{\"1120\":1}}],[\"在mcache申请内存时也是由mcentral进行分配\",{\"1\":{\"1117\":1}}],[\"在module的上一行开头注释deprecated来表示该模块已弃用\",{\"1\":{\"509\":1}}],[\"在并发调度一文中就已经出现过\",{\"1\":{\"1116\":1}}],[\"在并发执行测试用例时\",{\"1\":{\"523\":1}}],[\"在释放内存时\",{\"1\":{\"1112\":1}}],[\"在分配对象内存时\",{\"1\":{\"1123\":1}}],[\"在分配内存的时候会执行不同的逻辑\",{\"1\":{\"1123\":1}}],[\"在分配时会首先检查是否有可复用的内存块\",{\"1\":{\"1112\":1}}],[\"在分布式架构中用的会比较多\",{\"1\":{\"785\":1}}],[\"在复用内存块时\",{\"1\":{\"1112\":1}}],[\"在复制切片的时候并不是一个个遍历元素去复制的\",{\"1\":{\"1026\":1}}],[\"在该函数中\",{\"1\":{\"1167\":1}}],[\"在该函数中涉及到runtime\",{\"1\":{\"1107\":1}}],[\"在该文件中还有一个名为typehash的函数\",{\"1\":{\"1033\":1}}],[\"在系统监控的循环中\",{\"1\":{\"1107\":1}}],[\"在操作系统中这种工作方式被称之为并发\",{\"1\":{\"1105\":1}}],[\"在拷贝前\",{\"1\":{\"1101\":1}}],[\"在新建协程时\",{\"1\":{\"1100\":1}}],[\"在退出系统调用后\",{\"1\":{\"1097\":1}}],[\"在准备工作完成后\",{\"1\":{\"1097\":1}}],[\"在解绑以后可能会与其它空闲的\",{\"1\":{\"1097\":1}}],[\"在解包封包的时候更加的快速\",{\"1\":{\"180\":1}}],[\"在协程创建的整个过程中\",{\"1\":{\"1095\":1}}],[\"在协程栈部分进行讲解\",{\"1\":{\"1094\":1}}],[\"在保存的时候用的是getcallerpc\",{\"1\":{\"1092\":1}}],[\"在初始的时候提到过\",{\"1\":{\"1092\":1}}],[\"在初始化时期\",{\"1\":{\"1119\":1}}],[\"在初始化迭代器时指定\",{\"1\":{\"1037\":1}}],[\"在初始化切片\",{\"1\":{\"137\":1}}],[\"在初始化\",{\"1\":{\"132\":1,\"382\":1}}],[\"在销毁时会释放\",{\"1\":{\"1089\":1}}],[\"在调度循环中\",{\"1\":{\"1104\":2}}],[\"在调度器初始化部分提到过\",{\"1\":{\"1104\":1}}],[\"在调度器初始化的时候\",{\"1\":{\"1099\":1}}],[\"在调度器初始化的时候就设置了\",{\"1\":{\"1089\":1}}],[\"在调度器中\",{\"1\":{\"1090\":1}}],[\"在调用runtime\",{\"1\":{\"1132\":1}}],[\"在调用mstart1函数时将执行现场保存在了\",{\"1\":{\"1092\":1}}],[\"在调用方法时会去调用具体类型的具体值\",{\"1\":{\"568\":1}}],[\"在调用\",{\"1\":{\"531\":1}}],[\"在调用一个函数时\",{\"1\":{\"398\":1}}],[\"在调用远程方法时就跟调用本地方法一样\",{\"1\":{\"155\":1}}],[\"在调用双重引用类型的方法时\",{\"1\":{\"133\":1}}],[\"在runitme\",{\"1\":{\"1124\":1}}],[\"在runtime\",{\"1\":{\"1088\":1,\"1098\":1,\"1104\":1,\"1107\":1}}],[\"在require时\",{\"1\":{\"509\":1}}],[\"在reflect包下\",{\"1\":{\"429\":1}}],[\"在日后的工作中说不定会有些许帮助\",{\"1\":{\"1083\":1}}],[\"在日后发布新版本后再将其去掉\",{\"1\":{\"512\":1}}],[\"在每一轮循环中\",{\"1\":{\"1082\":1}}],[\"在堆上分配的defer来源是new函数\",{\"1\":{\"1074\":1}}],[\"在栈上分配时是defer结构的来源是直接创建的结构体\",{\"1\":{\"1074\":1}}],[\"在阻塞前会将管道解锁\",{\"1\":{\"1067\":1}}],[\"在唤醒之前回调函数会将全部管道解锁\",{\"1\":{\"1067\":1}}],[\"在blcok为false时都有一个快速路径可以在不加锁的情况下判断是否可以发送或接收数据\",{\"1\":{\"1066\":1}}],[\"在builtin\",{\"1\":{\"1051\":1}}],[\"在build\",{\"1\":{\"42\":1}}],[\"在只有一个\",{\"1\":{\"1066\":1}}],[\"在管道的发送与接收的源代码中可以看到对于\",{\"1\":{\"1063\":1}}],[\"在很早的时候\",{\"1\":{\"1062\":1}}],[\"在非阻塞发送情况下\",{\"1\":{\"1059\":1}}],[\"在标记工作进行时\",{\"1\":{\"1145\":1}}],[\"在标记结束后\",{\"1\":{\"1135\":1}}],[\"在标记过程中从未被访问过\",{\"1\":{\"1135\":1}}],[\"在标记过程中对象已访问过\",{\"1\":{\"1135\":2}}],[\"在标记阶段会扫描堆的所有对象\",{\"1\":{\"1134\":1}}],[\"在标记\",{\"1\":{\"1058\":1}}],[\"在标准库和许多开源框架都能看到测试的身影\",{\"1\":{\"516\":1}}],[\"在循环中\",{\"1\":{\"1055\":1}}],[\"在循环次数很大或次数不确定时\",{\"1\":{\"401\":1}}],[\"在展开的代码中\",{\"1\":{\"1055\":1}}],[\"在于变量str存储的是字符串字面量\",{\"1\":{\"1054\":1}}],[\"在版本更新到go1\",{\"1\":{\"1054\":1}}],[\"在版本go1\",{\"1\":{\"1027\":1}}],[\"在性能和使用体验上都会好一些\",{\"1\":{\"1050\":1}}],[\"在性能敏感的场景不建议大量使用\",{\"1\":{\"339\":1}}],[\"在获取锁的期间\",{\"1\":{\"1047\":1}}],[\"在获得了编码的头部和编码的载荷部分后\",{\"1\":{\"774\":1}}],[\"在自旋的期间\",{\"1\":{\"1047\":1}}],[\"在自定义包和函数时命名应当尽量避免与之重复\",{\"1\":{\"292\":1}}],[\"在hashgrow函数中\",{\"1\":{\"1043\":1}}],[\"在hello\",{\"1\":{\"152\":1}}],[\"在搬迁后\",{\"1\":{\"1042\":1}}],[\"在搬迁开始之前\",{\"1\":{\"1042\":1}}],[\"在搬迁时被标记\",{\"1\":{\"1030\":1}}],[\"在修改和删除元素时就有可能触发扩容\",{\"1\":{\"1041\":1}}],[\"在哈希冲突部分已经阐述过\",{\"1\":{\"1041\":1}}],[\"在桶末尾时\",{\"1\":{\"1039\":1}}],[\"在删除完元素后\",{\"1\":{\"1039\":1}}],[\"在代码里面看不见\",{\"1\":{\"1038\":1}}],[\"在代码生成期间就能找出来\",{\"1\":{\"821\":1}}],[\"在溢出桶中分配一个位置给key\",{\"1\":{\"1038\":1}}],[\"在遍历时只会遍历\",{\"1\":{\"1049\":1}}],[\"在遍历时\",{\"1\":{\"1037\":1}}],[\"在遍历开始前\",{\"1\":{\"1037\":1}}],[\"在定位哈希桶时\",{\"1\":{\"1036\":1}}],[\"在访问过后会变为灰色\",{\"1\":{\"1135\":1}}],[\"在访问元素时\",{\"1\":{\"1042\":1}}],[\"在访问的一开始先进行边界情况处理\",{\"1\":{\"1036\":1}}],[\"在访问时\",{\"1\":{\"1036\":1}}],[\"在哪个哈希桶取决于哈希值的低位\",{\"1\":{\"1036\":1}}],[\"在哪个哈希桶后\",{\"1\":{\"1036\":1}}],[\"在哪个哈希桶\",{\"1\":{\"1036\":1}}],[\"在语法上对defer关键字的使用\",{\"1\":{\"1074\":1}}],[\"在语法入门当中讲到过\",{\"1\":{\"1035\":1}}],[\"在语言不断更新和修改的过程中\",{\"1\":{\"16\":1}}],[\"在知晓了外部是如何使用selectgo函数以后\",{\"1\":{\"1067\":1}}],[\"在知晓了\",{\"1\":{\"1036\":1}}],[\"在知晓了哈希桶的容量后\",{\"1\":{\"1034\":1}}],[\"在知晓了上述的中间件原理后\",{\"1\":{\"996\":1}}],[\"在先前的内部结构中已经提到过\",{\"1\":{\"1034\":1}}],[\"在先前的案例中\",{\"1\":{\"174\":1}}],[\"在扩容前哈希桶数组的指针\",{\"1\":{\"1030\":1}}],[\"在扩容时\",{\"1\":{\"1025\":1}}],[\"在整个遍历过程中从始至终都是一个变量\",{\"1\":{\"1028\":1}}],[\"在需要访问元素的时候才转换成unsafe\",{\"1\":{\"1028\":1}}],[\"在需要的时候并不会被回收掉\",{\"1\":{\"751\":1}}],[\"在通过len和cap函数访问切片的长度和容量时\",{\"1\":{\"1021\":1}}],[\"在通过值类型调用指针接收者的方法时\",{\"1\":{\"414\":1}}],[\"在切割时\",{\"1\":{\"1019\":1}}],[\"在平时它只是一个结构体\",{\"1\":{\"1019\":1}}],[\"在平时我们经常会使用fmt\",{\"1\":{\"722\":1}}],[\"在多个实例时尤其要如此\",{\"1\":{\"1016\":1}}],[\"在多个协程调用同一个迭代器的next函数是错误的做法\",{\"1\":{\"583\":1}}],[\"在认证这块支持\",{\"1\":{\"1015\":1}}],[\"在描述响应用例时\",{\"1\":{\"1013\":1}}],[\"在五六年前用的比较多\",{\"1\":{\"1002\":1}}],[\"在目前的时代中\",{\"1\":{\"1001\":1}}],[\"在注册局部路由时\",{\"1\":{\"995\":1}}],[\"在注册时为了安全考虑\",{\"1\":{\"946\":1}}],[\"在路由树中找到了对应的路由后\",{\"1\":{\"995\":1}}],[\"在路由分配与调度的过程中\",{\"1\":{\"954\":1}}],[\"在evacuate函数中\",{\"1\":{\"1043\":1}}],[\"在engine\",{\"1\":{\"995\":1}}],[\"在errors\",{\"1\":{\"952\":1}}],[\"在功能上没有任何作用\",{\"1\":{\"988\":1}}],[\"在所有的\",{\"1\":{\"962\":1}}],[\"在有些时候\",{\"1\":{\"948\":1}}],[\"在有大量输入需要读取的时候\",{\"1\":{\"345\":1}}],[\"在单独使用validator没有集成其他框架的情况下\",{\"1\":{\"941\":1}}],[\"在验证之前\",{\"1\":{\"927\":1}}],[\"在关联更新时\",{\"1\":{\"897\":1}}],[\"在迁移时\",{\"1\":{\"864\":1}}],[\"在迁移数据库时忽略关联引用\",{\"1\":{\"852\":1}}],[\"在迁移数据库时忽略外键\",{\"1\":{\"852\":1}}],[\"在结构体中定义外键关系\",{\"1\":{\"860\":1}}],[\"在结构体和切片都是可比较元素组成的情况下\",{\"1\":{\"137\":1}}],[\"在跨时区的情况下\",{\"1\":{\"856\":1}}],[\"在实现的方法中\",{\"1\":{\"855\":1}}],[\"在实际情况下\",{\"1\":{\"1085\":1}}],[\"在实际情况中\",{\"1\":{\"175\":1,\"856\":1}}],[\"在实际进行遍历时\",{\"1\":{\"1037\":1}}],[\"在实际操作中是通过移动\",{\"1\":{\"1030\":1}}],[\"在实际生成的代码中\",{\"1\":{\"1021\":1}}],[\"在实际生产环境中为了安全考虑应该开启\",{\"1\":{\"143\":1}}],[\"在实际的使用情况中大多数都是将模板放在文件中\",{\"1\":{\"736\":1}}],[\"在实际的网络环境中不总是那么稳定\",{\"1\":{\"174\":1}}],[\"在实际开发中一般用的是html\",{\"1\":{\"722\":1}}],[\"在实际应用中goto用的很少\",{\"1\":{\"352\":1}}],[\"在限制日志对性能占用的情况下仅记录部分比较有代表性的日志\",{\"1\":{\"839\":1}}],[\"在程序结束时将缓存同步到文件中\",{\"1\":{\"838\":1}}],[\"在程序的生命周期都不会再发生改变\",{\"1\":{\"591\":1}}],[\"在生产者和消费者双方都是可以被信任的时候\",{\"1\":{\"777\":1}}],[\"在生成中的某个阶段的中间代码大概率长这样\",{\"1\":{\"1023\":1}}],[\"在生成文档时\",{\"1\":{\"1017\":1}}],[\"在生成代码后可以通过descriptor来进行访问\",{\"1\":{\"202\":1}}],[\"在生成时\",{\"1\":{\"201\":1,\"1017\":1}}],[\"在发挥作用\",{\"1\":{\"1104\":1}}],[\"在发送方runtime\",{\"1\":{\"1060\":1}}],[\"在发起请求时就必须携带上\",{\"1\":{\"775\":1}}],[\"在发生panic时\",{\"1\":{\"131\":1}}],[\"在身份验证中\",{\"1\":{\"775\":1}}],[\"在进行准备期间\",{\"1\":{\"1097\":1}}],[\"在进行修改和删除操作时\",{\"1\":{\"1042\":1}}],[\"在进行关联创建时\",{\"1\":{\"895\":1}}],[\"在进行匹配时\",{\"1\":{\"762\":1}}],[\"在进行多个变量赋值运算时\",{\"1\":{\"331\":1}}],[\"在配置文件中\",{\"1\":{\"760\":1,\"761\":1,\"762\":1,\"763\":1}}],[\"在项目修改授权机制时\",{\"1\":{\"759\":1}}],[\"在项目中的话一般不会直接使用驱动来进行数据库操作\",{\"1\":{\"230\":1}}],[\"在官方文档和文章中可能会出现以下的一些概念\",{\"1\":{\"1131\":1}}],[\"在官方文档中对每一个api有着更详细的解释\",{\"1\":{\"800\":1}}],[\"在官方文档的描述中\",{\"1\":{\"751\":1}}],[\"在官方网站中可以及时的了解到关于\",{\"1\":{\"285\":1}}],[\"在with语句中声明的变量\",{\"1\":{\"730\":1}}],[\"在模板语法的案例中\",{\"1\":{\"736\":1}}],[\"在模板中也可以声明变量\",{\"1\":{\"727\":1}}],[\"在模糊测试中\",{\"1\":{\"527\":1}}],[\"在例子中之所以会在两边额外加个空格写成\",{\"1\":{\"725\":1}}],[\"在花括号中\",{\"1\":{\"725\":1}}],[\"在花括号内\",{\"1\":{\"725\":1}}],[\"在以后新建协程时仍有可能被重复利用\",{\"1\":{\"1096\":1}}],[\"在以后模板引擎的使用中\",{\"1\":{\"723\":1}}],[\"在以前的版本\",{\"1\":{\"513\":1}}],[\"在以前是golang\",{\"1\":{\"87\":1}}],[\"在以前应该还有一个notinheaps指令用于表示一个类型不允许分配内存到堆上\",{\"1\":{\"48\":1}}],[\"在案例代码中\",{\"1\":{\"723\":1}}],[\"在忽略大小写情况下是否相等\",{\"1\":{\"709\":1}}],[\"在字符串\",{\"1\":{\"707\":1}}],[\"在字符串单位是字节\",{\"1\":{\"527\":1}}],[\"在处理网络\",{\"1\":{\"673\":1}}],[\"在反序列化时需要注意\",{\"1\":{\"628\":1}}],[\"在游戏服务器这个领域\",{\"1\":{\"613\":1}}],[\"在网络编程这块也有非常多的应用\",{\"1\":{\"612\":1}}],[\"在历史上也有过大改\",{\"1\":{\"599\":1}}],[\"在数据库迁移的时候\",{\"1\":{\"855\":1}}],[\"在数字的类型转换中\",{\"1\":{\"595\":1}}],[\"在数组初始化时\",{\"1\":{\"360\":1}}],[\"在许多层面的设计都是为了可读性而服务的\",{\"1\":{\"592\":1}}],[\"在之前提到的屏障机制中\",{\"1\":{\"1145\":1}}],[\"在之前的章节提到过\",{\"1\":{\"1070\":1}}],[\"在之前的所有操作中\",{\"1\":{\"1041\":1}}],[\"在之前的数据类型的小节中已经简单了介绍过了\",{\"1\":{\"590\":1}}],[\"在之前示例中我们是按照下面的方式使用迭代器的\",{\"1\":{\"582\":1}}],[\"在迭代时发生了错误怎么办\",{\"1\":{\"584\":1}}],[\"在迭代过程中会将序列中的元素逐个传递给回调函数yield\",{\"1\":{\"582\":1}}],[\"在泛型结构体中\",{\"1\":{\"572\":1}}],[\"在比较空接口时\",{\"1\":{\"568\":1}}],[\"在开发时通常会使用匿名空接口来表示接收任何类型的值\",{\"1\":{\"568\":1}}],[\"在开始前\",{\"1\":{\"1091\":1}}],[\"在开始时\",{\"1\":{\"1038\":1,\"1079\":1,\"1140\":1}}],[\"在开始编写测试之前\",{\"1\":{\"517\":1}}],[\"在开始之前我们先看一个类型sync\",{\"1\":{\"1150\":1}}],[\"在开始之前确保你的版本足以完全支持\",{\"1\":{\"494\":1}}],[\"在开始之前先简单的了解一下位于runtime包下的两个接口\",{\"1\":{\"428\":1}}],[\"在开始之前先来看一个例子\",{\"1\":{\"167\":1}}],[\"在开始之前\",{\"1\":{\"285\":1,\"571\":1,\"1089\":1}}],[\"在开始之前要确保protobuf文件中的go\",{\"1\":{\"201\":1}}],[\"在接口里\",{\"1\":{\"565\":1}}],[\"在命令行中查看数据一般使用top命令\",{\"1\":{\"559\":1}}],[\"在命令行中执行go\",{\"1\":{\"516\":1}}],[\"在得到了采集的数据文件后\",{\"1\":{\"558\":1}}],[\"在传递过后实际上是在\",{\"1\":{\"536\":1}}],[\"在传递给\",{\"1\":{\"536\":2}}],[\"在传输过程中它以在帧字段的形式存在中\",{\"1\":{\"171\":1}}],[\"在记录日志时输出的行号也是帮助函数的调用者的行号\",{\"1\":{\"522\":1}}],[\"在下一轮测试中会继续执行\",{\"1\":{\"521\":1}}],[\"在下载依赖时也可以指定\",{\"1\":{\"509\":1}}],[\"在引用依赖时由于路径都一致\",{\"1\":{\"509\":1}}],[\"在依赖注入时\",{\"1\":{\"826\":1}}],[\"在依赖版本选择时\",{\"1\":{\"508\":1}}],[\"在依赖地址后面加上\",{\"1\":{\"503\":1}}],[\"在$gomodcache\",{\"1\":{\"507\":1}}],[\"在$home\",{\"1\":{\"91\":1}}],[\"在缓存中解压的依赖源文件都是只读的\",{\"1\":{\"507\":1}}],[\"在里面搜索著名的\",{\"1\":{\"503\":1}}],[\"在撰写本文时\",{\"1\":{\"492\":1}}],[\"在早期并没有一个成熟的依赖管理解决方案\",{\"1\":{\"492\":1}}],[\"在早期没有\",{\"1\":{\"7\":1}}],[\"在cmd\",{\"1\":{\"1030\":1}}],[\"在casbin中\",{\"1\":{\"759\":1}}],[\"在cas的例子中\",{\"1\":{\"490\":1}}],[\"在client\",{\"1\":{\"154\":1}}],[\"在执行用户代码时如果进行了系统调用\",{\"1\":{\"1097\":1}}],[\"在执行最后一个defer时\",{\"1\":{\"606\":1}}],[\"在执行时会行尾添加\",{\"1\":{\"518\":1}}],[\"在执行测试时\",{\"1\":{\"517\":1,\"521\":1}}],[\"在执行完毕前\",{\"1\":{\"487\":1}}],[\"在执行的过程中每一个表达式的判断是从左到右\",{\"1\":{\"349\":1}}],[\"在计算机学科中\",{\"1\":{\"487\":1}}],[\"在计算sum函数返回值时\",{\"1\":{\"331\":1}}],[\"在fmt\",{\"1\":{\"485\":1}}],[\"在读数据的时候都会先获得读锁\",{\"1\":{\"481\":1}}],[\"在相关流程结束后\",{\"1\":{\"478\":1}}],[\"在相应的流程结束后就应该调用cancel函数\",{\"1\":{\"477\":1}}],[\"在后续其它模板使用插槽时\",{\"1\":{\"735\":1}}],[\"在后续的内容中\",{\"1\":{\"1030\":1}}],[\"在后续的with\",{\"1\":{\"729\":1}}],[\"在后续的更新中\",{\"1\":{\"568\":1}}],[\"在后续使用时\",{\"1\":{\"727\":1}}],[\"在后续使用中就不需要再额外的创建对象可以直接复用\",{\"1\":{\"485\":1}}],[\"在后\",{\"1\":{\"469\":1}}],[\"在前\",{\"1\":{\"469\":1}}],[\"在前面的几节已经很多次提到过内置函数new和make\",{\"1\":{\"393\":1}}],[\"在向管道写入数据时必须立刻有其他协程来读取数据\",{\"1\":{\"466\":1}}],[\"在某些语言\",{\"1\":{\"582\":1}}],[\"在某些情况下\",{\"1\":{\"122\":1}}],[\"在某些情况下可以提供内存利用效率\",{\"1\":{\"118\":1}}],[\"在某一个时机触发调度以后\",{\"1\":{\"1104\":1}}],[\"在某一个时刻\",{\"1\":{\"465\":1,\"467\":1}}],[\"在某一次编写代码的过程中\",{\"1\":{\"1069\":1}}],[\"在某一时刻\",{\"1\":{\"471\":1}}],[\"在创建协程的时候提到过\",{\"1\":{\"1104\":1}}],[\"在创建的时候\",{\"1\":{\"1096\":1}}],[\"在创建的时候提到过save方法\",{\"1\":{\"884\":1}}],[\"在创建时首先会锁住\",{\"1\":{\"1095\":1}}],[\"在创建分组的时候\",{\"1\":{\"988\":1}}],[\"在创建完上述三种关联关系后\",{\"1\":{\"894\":1}}],[\"在创建更新查询的时候都会起作用\",{\"1\":{\"874\":1}}],[\"在创建新的记录时\",{\"1\":{\"866\":1}}],[\"在创建表时createtable方法需要保证被引用表比引用表先创建\",{\"1\":{\"864\":1}}],[\"在创建或更新记录时\",{\"1\":{\"856\":1}}],[\"在创建模板时从text\",{\"1\":{\"728\":1}}],[\"在创建条件变量时\",{\"1\":{\"482\":1}}],[\"在创建上下文时通过闭包将其包装为返回值以供外界调用\",{\"1\":{\"477\":1}}],[\"在创建其他三种上下文时作为父上下文传入\",{\"1\":{\"475\":1}}],[\"在创建管道时\",{\"1\":{\"464\":1}}],[\"在创建一个文件时\",{\"1\":{\"418\":1}}],[\"在运行时有一个字段gcassistbytes\",{\"1\":{\"1139\":1}}],[\"在运行时会启动一个单独的协程来运行runtime\",{\"1\":{\"1132\":1}}],[\"在运行时主要有以下四个工作要做\",{\"1\":{\"1118\":1}}],[\"在运行时它作为全局变量runtime\",{\"1\":{\"1118\":1}}],[\"在运行时总共有\",{\"1\":{\"1117\":1}}],[\"在运行时的表现类型是runtime\",{\"1\":{\"1086\":1}}],[\"在运行时以链表的形式存在\",{\"1\":{\"1073\":1}}],[\"在运行时对于的表示是runtime\",{\"1\":{\"1057\":1}}],[\"在运行时\",{\"1\":{\"1019\":1,\"1020\":1,\"1024\":1,\"1114\":1,\"1138\":1}}],[\"在运行时修改其底层的数据是完全可行的\",{\"1\":{\"755\":1}}],[\"在运行时由runtime\",{\"1\":{\"1088\":1}}],[\"在运行时由eface\",{\"1\":{\"428\":1}}],[\"在运行时由如下的结构体iface来进行表示\",{\"1\":{\"428\":1}}],[\"在运行时将接口分为了两大类\",{\"1\":{\"428\":1}}],[\"在过程中会使用runtime\",{\"1\":{\"1091\":1}}],[\"在过程中\",{\"1\":{\"426\":1}}],[\"在过程中可以看到有这么一段\",{\"1\":{\"14\":1}}],[\"在方法中对值接收者修改并不会产生任何影响\",{\"1\":{\"414\":1}}],[\"在原来的代码中\",{\"1\":{\"414\":1}}],[\"在声明结构体字段时\",{\"1\":{\"404\":1}}],[\"在声明的proto文件中是不会出现具体的数据的\",{\"1\":{\"187\":1}}],[\"在函数返回之前这些\",{\"1\":{\"400\":1}}],[\"在函数内部\",{\"1\":{\"333\":1}}],[\"在growwork函数中\",{\"1\":{\"1042\":1}}],[\"在grow函数内还能直接修改这两个变量\",{\"1\":{\"399\":1}}],[\"在go1\",{\"1\":{\"1040\":1}}],[\"在gin中\",{\"1\":{\"971\":1}}],[\"在generate指令中执行的命令还支持以下几个内置参数\",{\"1\":{\"40\":1}}],[\"在本文开头就已经提到过\",{\"1\":{\"380\":1}}],[\"在本例中\",{\"1\":{\"155\":1,\"606\":1}}],[\"在对象被标记为白色对象后\",{\"1\":{\"1136\":1}}],[\"在对象被标记为黑色对象后\",{\"1\":{\"1136\":1}}],[\"在对s2进行读写时\",{\"1\":{\"371\":1}}],[\"在对切片进行分隔时\",{\"1\":{\"135\":1}}],[\"在输入输出这方面\",{\"1\":{\"346\":1}}],[\"在文件中可以发现绝大多数的依赖地址都带有github等字眼\",{\"1\":{\"509\":1}}],[\"在文件\",{\"1\":{\"340\":1}}],[\"在os包下有三个外暴露的文件描述符\",{\"1\":{\"335\":1}}],[\"在已经赋值的常量后面的常量可以不用赋值\",{\"1\":{\"324\":1}}],[\"在同一个常量分组中\",{\"1\":{\"324\":1}}],[\"在同级目录下不带任何参数执行go\",{\"1\":{\"37\":1}}],[\"在同级目录下还会有一个名为sumdb的文件夹\",{\"1\":{\"7\":1}}],[\"在其他语言比如\",{\"1\":{\"701\":1}}],[\"在其他领域也有不少的应用\",{\"1\":{\"615\":1}}],[\"在其它语言中的\",{\"1\":{\"312\":1}}],[\"在其维护期间发布的所有补丁版本可以前往go1\",{\"1\":{\"114\":1,\"115\":1,\"116\":1,\"117\":1,\"118\":1,\"119\":1,\"120\":1,\"121\":1,\"122\":1,\"123\":1,\"124\":1,\"125\":1,\"126\":1,\"127\":1,\"128\":1,\"129\":1,\"130\":1,\"131\":1,\"132\":1,\"133\":1,\"134\":1,\"135\":1,\"136\":1,\"137\":1}}],[\"在格式化后\",{\"1\":{\"311\":1}}],[\"在线编译\",{\"0\":{\"290\":1}}],[\"在参考值后面插入值\",{\"1\":{\"265\":1}}],[\"在参考值前面插入值\",{\"1\":{\"265\":1}}],[\"在当前文件夹下寻找\",{\"1\":{\"791\":1}}],[\"在当前互联网时代中\",{\"1\":{\"617\":1}}],[\"在当前目录初始化\",{\"1\":{\"506\":1}}],[\"在当前目录初始化一个\",{\"1\":{\"22\":1}}],[\"在当前节点实例上\",{\"1\":{\"242\":1}}],[\"在使用waitgroup时\",{\"1\":{\"1179\":1}}],[\"在使用wire\",{\"1\":{\"827\":1}}],[\"在使用append添加元素时\",{\"1\":{\"1025\":1}}],[\"在使用数组创建切片时\",{\"1\":{\"1020\":1}}],[\"在使用数字时\",{\"1\":{\"341\":1}}],[\"在使用create创建记录时\",{\"1\":{\"891\":1}}],[\"在使用指定数据库数据类型时\",{\"1\":{\"862\":1}}],[\"在使用之前应该先了解下它们之间的区别以便更好的去选择签名算法\",{\"1\":{\"777\":1}}],[\"在使用之前你就要先使用sql\",{\"1\":{\"231\":1}}],[\"在使用unsafe包函数时编辑器甚至会提示你类型不匹配\",{\"1\":{\"747\":1}}],[\"在使用完\",{\"1\":{\"741\":1,\"742\":1}}],[\"在使用完一个管道后一定要记得关闭该管道\",{\"1\":{\"464\":1}}],[\"在使用模板参数时\",{\"1\":{\"725\":1}}],[\"在使用类型转换时\",{\"1\":{\"595\":1}}],[\"在使用的时候各位可以根据自己的实际情况来进行考虑\",{\"1\":{\"588\":1}}],[\"在使用网页分析时\",{\"1\":{\"560\":1}}],[\"在使用\",{\"1\":{\"537\":1,\"867\":1}}],[\"在使用install命令时\",{\"1\":{\"504\":1}}],[\"在使用第三方依赖时\",{\"1\":{\"503\":1}}],[\"在使用sync\",{\"1\":{\"485\":1}}],[\"在使用时只需要将其嵌入到你的实体模型中即可\",{\"1\":{\"857\":1}}],[\"在使用时\",{\"1\":{\"484\":1,\"940\":1}}],[\"在使用时需要显式的指定字段p\",{\"1\":{\"407\":1}}],[\"在使用for\",{\"1\":{\"380\":1,\"1028\":1}}],[\"在使用过程中会发现\",{\"1\":{\"162\":1}}],[\"在构造查询条件的时候\",{\"1\":{\"225\":1}}],[\"在建立\",{\"1\":{\"205\":1}}],[\"在import\",{\"1\":{\"193\":1}}],[\"在init函数中使用的协程会直接启动\",{\"1\":{\"137\":1}}],[\"在导入的时候都是使用的相对路径\",{\"1\":{\"193\":1}}],[\"在导入的时候不能省略文件拓展名\",{\"1\":{\"193\":1}}],[\"在基本类型前面加上repeated修饰符表示这是一个数组类型\",{\"1\":{\"185\":1}}],[\"在微服务领域中\",{\"1\":{\"172\":1}}],[\"在链式操作中使用多个where会构建多个and语句\",{\"1\":{\"875\":1}}],[\"在链路传递过程中\",{\"1\":{\"171\":1}}],[\"在链接之前首先要匿名导入这个包\",{\"1\":{\"44\":1}}],[\"在与客户端建立新连接的时候设置一个超时时间\",{\"1\":{\"170\":1}}],[\"在客户端就可以拿到数据做出处理\",{\"1\":{\"168\":1}}],[\"在客户端代码中\",{\"1\":{\"167\":1}}],[\"在上图中\",{\"1\":{\"1032\":1}}],[\"在上面发送的逻辑中没有看到对于缓冲区溢出数据的处理\",{\"1\":{\"1059\":1}}],[\"在上面的示例中\",{\"1\":{\"1165\":1}}],[\"在上面的几门编程语言中无一不受到了\",{\"1\":{\"1084\":1}}],[\"在上面的过程中一定会找到一个唤醒方协程所处理的管道\",{\"1\":{\"1067\":1}}],[\"在上面的这个过程中\",{\"1\":{\"1059\":1}}],[\"在上面的扩容判断条件中\",{\"1\":{\"1037\":1}}],[\"在上面的代码中\",{\"1\":{\"1019\":1,\"1171\":1}}],[\"在上面的结构体中\",{\"1\":{\"859\":1}}],[\"在上面的go\",{\"1\":{\"509\":1}}],[\"在上面的例子中\",{\"1\":{\"201\":1}}],[\"在上面创建一个新项目\",{\"1\":{\"495\":1}}],[\"在上面这些\",{\"1\":{\"210\":1}}],[\"在上一个拦截器案例中\",{\"1\":{\"167\":1}}],[\"在上述一大段代码中\",{\"1\":{\"1038\":1}}],[\"在上述类型声明中\",{\"1\":{\"593\":1}}],[\"在上述示例中yield也只是一个回调函数\",{\"1\":{\"581\":1}}],[\"在上述的地面中\",{\"1\":{\"734\":1}}],[\"在上述的单元测试中\",{\"1\":{\"524\":1}}],[\"在上述的例子中第一个子测试未执行完毕第二个子测试是不会执行的\",{\"1\":{\"523\":1}}],[\"在上述的限制中\",{\"1\":{\"7\":1}}],[\"在上述例子中\",{\"1\":{\"156\":1}}],[\"在请求完成后\",{\"1\":{\"163\":1}}],[\"在此期间任何新创建对象也会被标记为黑色\",{\"1\":{\"1144\":1}}],[\"在此期间\",{\"1\":{\"1088\":1,\"1097\":1}}],[\"在此期间不执行用户代码\",{\"1\":{\"1086\":1}}],[\"在此前的内容中\",{\"1\":{\"548\":1}}],[\"在此之前为了数据更加多样化\",{\"1\":{\"560\":1}}],[\"在此之前\",{\"1\":{\"162\":1,\"168\":1,\"555\":1}}],[\"在此列出以表示感谢\",{\"1\":{\"97\":1}}],[\"在一般情况下它们是会造成协程阻塞的\",{\"1\":{\"1066\":1}}],[\"在一个单独的结构中\",{\"1\":{\"931\":5}}],[\"在一个系统中\",{\"1\":{\"758\":1}}],[\"在一个结构良好的message中\",{\"1\":{\"187\":1}}],[\"在一定程度上保证了性能\",{\"1\":{\"390\":1}}],[\"在一些情况中\",{\"1\":{\"468\":1,\"602\":1}}],[\"在一些情况下我们需要将其序列化成人类能够观察的形式\",{\"1\":{\"627\":1}}],[\"在一些情况下\",{\"1\":{\"162\":1,\"523\":1,\"1077\":1}}],[\"在一些语言中又被称为\",{\"1\":{\"399\":1}}],[\"在一些导致\",{\"1\":{\"162\":1}}],[\"在一块\",{\"1\":{\"145\":1}}],[\"在吗\",{\"1\":{\"158\":4}}],[\"在policy中\",{\"1\":{\"765\":1}}],[\"在pop和peek方法中\",{\"1\":{\"577\":1}}],[\"在powershell中执行go\",{\"1\":{\"90\":1}}],[\"在pb\",{\"1\":{\"151\":1}}],[\"在服务端领域应用较为广泛\",{\"1\":{\"615\":1}}],[\"在服务端同样也可以设置连接超时\",{\"1\":{\"170\":1}}],[\"在服务关闭时\",{\"1\":{\"145\":1}}],[\"在服务启动时向\",{\"1\":{\"145\":1}}],[\"在图中的集群中\",{\"1\":{\"142\":1}}],[\"在任期内\",{\"1\":{\"142\":1}}],[\"在包的组织方式和标准库以及命令行方面相较于预览版本都有着非常大的改变\",{\"1\":{\"137\":1}}],[\"在小容量\",{\"1\":{\"134\":1}}],[\"在活跃时造成的延时\",{\"1\":{\"127\":1}}],[\"在没有clear函数之前\",{\"1\":{\"1027\":1}}],[\"在没有考虑周全之前\",{\"1\":{\"547\":1}}],[\"在没有协程来读取之前\",{\"1\":{\"467\":1}}],[\"在没有泛型之前\",{\"1\":{\"332\":1}}],[\"在没有达到指定数量之前\",{\"1\":{\"141\":1}}],[\"在没有\",{\"1\":{\"117\":1}}],[\"在未来版本中不再提供支持\",{\"1\":{\"117\":1}}],[\"在将切片类型转换为数组时\",{\"1\":{\"117\":1}}],[\"在错误处理\",{\"1\":{\"88\":1}}],[\"在大多数情况可以避免内存移动\",{\"1\":{\"543\":1}}],[\"在大多数情况下\",{\"1\":{\"169\":1,\"414\":1,\"488\":1,\"971\":1}}],[\"在大部分时间里\",{\"1\":{\"87\":1}}],[\"在大二暑假接触到了\",{\"1\":{\"0\":1}}],[\"在浏览器可视化中测试\",{\"1\":{\"55\":1}}],[\"在列表模式下\",{\"1\":{\"38\":1}}],[\"在这些场景中\",{\"1\":{\"1170\":1}}],[\"在这些情况下就不能使用静态地址访问服务了\",{\"1\":{\"174\":1}}],[\"在这之前\",{\"1\":{\"1095\":1}}],[\"在这之前selectgo会将当前协程加入所有监听管道的recvq\",{\"1\":{\"1067\":1}}],[\"在这里我们就看到了接收方对于溢出缓冲区数据的处理方式\",{\"1\":{\"1060\":1}}],[\"在这里如果read\",{\"1\":{\"1047\":1}}],[\"在这里\",{\"1\":{\"1041\":1}}],[\"在这里就不作细致的讲解\",{\"1\":{\"1004\":1}}],[\"在这里代表的是任意类型\",{\"1\":{\"746\":1}}],[\"在这里你会找到\",{\"1\":{\"4\":1}}],[\"在这期间会让printpanics打印panic的信息\",{\"1\":{\"1079\":1}}],[\"在这期间\",{\"1\":{\"743\":1}}],[\"在这一小段代码中总共出现了三次if\",{\"1\":{\"598\":1}}],[\"在这方面有一定的应用但是较少\",{\"1\":{\"175\":1}}],[\"在这个项目中\",{\"1\":{\"513\":1}}],[\"在这个过程中\",{\"1\":{\"479\":1}}],[\"在这个时间点\",{\"1\":{\"87\":1}}],[\"在这个例子中\",{\"1\":{\"41\":1}}],[\"在这种情况不用进行内存复制\",{\"1\":{\"1054\":1}}],[\"在这种情况下让使用者也参与到调度工作中并非是什么好事\",{\"1\":{\"1106\":1}}],[\"在这种情况下就需要使用mapaccessk函数去重新获取实际的键值\",{\"1\":{\"1037\":1}}],[\"在这种情况下\",{\"1\":{\"376\":1,\"389\":1,\"1019\":1}}],[\"在这种情况下一般函数的实现是由汇编实现的\",{\"1\":{\"47\":1}}],[\"在这种模式下\",{\"1\":{\"38\":1}}],[\"在测试中\",{\"1\":{\"527\":1}}],[\"在测试这一方面提供了非常简便实用的命令行工具go\",{\"1\":{\"516\":1}}],[\"在测试时\",{\"1\":{\"38\":1}}],[\"在测试开始之前执行一些其它的命令\",{\"1\":{\"38\":1}}],[\"在古早时期\",{\"1\":{\"18\":1}}],[\"在编写服务端逻辑的时候\",{\"1\":{\"158\":1}}],[\"在编写代码的时候也会非常难受\",{\"1\":{\"95\":1}}],[\"在编译期间会通过opstore操作生成类似如下的伪代码\",{\"1\":{\"1023\":1}}],[\"在编译后它们会被转换成其它的操作\",{\"1\":{\"536\":1}}],[\"在编译的时候会转换为\",{\"1\":{\"408\":1}}],[\"在编译的时候它会忽略掉所有以\",{\"1\":{\"8\":1}}],[\"在编译过程中不会生成调试信息\",{\"1\":{\"13\":1}}],[\"在编译时设置godebug=panicnil=1允许向panic传入nil\",{\"1\":{\"116\":1}}],[\"在编译时\",{\"1\":{\"12\":1,\"512\":1,\"1027\":1}}],[\"在编译前执行的一些\",{\"1\":{\"8\":1}}],[\"在编码的过程中感觉有点动态语言的影子\",{\"1\":{\"0\":1}}],[\"在默认情况下是查询所有字段\",{\"1\":{\"874\":1}}],[\"在默认情况下不会进行深拷贝\",{\"1\":{\"812\":1}}],[\"在默认情况下该环境变量是默认启用的\",{\"1\":{\"530\":1}}],[\"在默认情况下以上所有的分析器都会启用\",{\"1\":{\"37\":1}}],[\"在默认情况下格式化后的代码将会输出到标准输出中\",{\"1\":{\"17\":1}}],[\"在默认情况下\",{\"1\":{\"8\":1,\"92\":1,\"853\":1,\"858\":1,\"860\":1}}],[\"在\",{\"1\":{\"7\":1,\"19\":1,\"53\":2,\"56\":1,\"60\":1,\"115\":1,\"116\":3,\"117\":2,\"133\":1,\"136\":1,\"138\":2,\"141\":1,\"142\":1,\"143\":2,\"144\":1,\"160\":2,\"164\":1,\"167\":1,\"171\":1,\"174\":1,\"186\":1,\"219\":1,\"222\":1,\"293\":1,\"309\":1,\"315\":1,\"328\":1,\"329\":1,\"331\":1,\"332\":1,\"336\":1,\"341\":1,\"347\":1,\"353\":1,\"358\":1,\"365\":2,\"372\":1,\"373\":1,\"381\":1,\"382\":1,\"387\":1,\"392\":1,\"394\":1,\"401\":1,\"407\":1,\"427\":1,\"428\":1,\"430\":1,\"462\":1,\"471\":2,\"512\":1,\"516\":1,\"525\":1,\"530\":1,\"531\":1,\"533\":1,\"534\":1,\"536\":1,\"549\":1,\"563\":2,\"568\":1,\"570\":1,\"574\":1,\"580\":1,\"582\":1,\"592\":1,\"593\":2,\"595\":1,\"597\":1,\"598\":1,\"599\":1,\"617\":1,\"624\":1,\"683\":1,\"735\":2,\"771\":1,\"828\":1,\"833\":1,\"848\":2,\"853\":1,\"888\":1,\"982\":1,\"992\":1,\"1009\":1,\"1030\":2,\"1032\":1,\"1036\":1,\"1038\":3,\"1039\":2,\"1042\":1,\"1052\":1,\"1060\":1,\"1073\":1,\"1095\":1,\"1106\":1,\"1109\":1,\"1110\":1,\"1115\":3,\"1130\":1,\"1131\":2,\"1137\":1,\"1138\":1,\"1145\":1}}],[\"在根目录下有以下几个比较重要的文件夹或文件\",{\"1\":{\"7\":1}}],[\"在不带任何参数执行的情况下\",{\"1\":{\"6\":1}}],[\"在不带任何参数的情况\",{\"1\":{\"4\":1}}],[\"在学习的过程中会遇到各式各样的\",{\"1\":{\"146\":1}}],[\"在学习的过程中遇到琢磨不透的难点可以先跳过\",{\"1\":{\"95\":1}}],[\"在学习的过程中\",{\"1\":{\"0\":1}}],[\"觉得这是一门很新奇的语言\",{\"1\":{\"0\":1}}],[\"离骚\",{\"1\":{\"0\":1}}],[\"屈原\",{\"1\":{\"0\":1}}],[\"吾将上下而求索\",{\"1\":{\"0\":2}}]],\"version\":2}}")).map(([e,t])=>[e,It(t,{fields:["h","t","c"],storeFields:["h","t","c"]})]));self.onmessage=({data:{type:e="all",query:t,locale:s,options:n,id:o}})=>{const r=Ct[s];e==="suggest"?self.postMessage([e,o,et(t,r,n)]):e==="search"?self.postMessage([e,o,tt(t,r,n)]):self.postMessage({suggestions:[e,o,et(t,r,n)],results:[e,o,tt(t,r,n)]})};
//# sourceMappingURL=index.js.map
