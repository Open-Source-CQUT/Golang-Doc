import{_ as r,V as d,W as c,X as n,Y as e,Z as s,$ as l,a0 as i,F as t}from"./framework-f06be456.js";const p="/images/eggs.png",u="/images/download.png",h={},g=n("h1",{id:"入门指南",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#入门指南","aria-hidden":"true"},"#"),e(" 入门指南")],-1),v=n("h2",{id:"背景",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#背景","aria-hidden":"true"},"#"),e(" 背景")],-1),m=n("p",null,"Go语言诞生于2007年9月20日，由三位大佬共同创造，他们分别是",-1),b={href:"https://github.com/ken",target:"_blank",rel:"noopener noreferrer"},_={href:"https://github.com/robpike",target:"_blank",rel:"noopener noreferrer"},k={href:"https://github.com/griesemer",target:"_blank",rel:"noopener noreferrer"},G=n("p",null,"对了还有一位是领头人的妻子Renee French，她主导设计了Go语言的Logo，就是一只蓝色的土拨鼠。",-1),f=n("p",null,"他们在等待某一次C++项目漫长的编译时，迸发出了一个新奇的想法，希望能够设计出一个简洁小巧，编译快速的编程语言。在短暂的头脑风暴后，三人与2009年9月20日开了一个短会来讨论和设计这个语言的初步原型，于是Go便在这个时间点诞生了，随后又加入了各路人马，Go语言由谷歌公司于2009年11月10日以BSD-3-Clause协议正式开源，并推出了最初的版本，再经过了三年的设计与研发，于2012年3月发布了第一个正式版本Go1，此后每半年发布一个二级版本。",-1),O=n("figure",null,[n("img",{src:p,alt:"",tabindex:"0",loading:"lazy"}),n("figcaption")],-1),x=n("div",{class:"hint-container tip"},[n("p",{class:"hint-container-title"},"提示"),n("p",null,"图中便是三位大佬设计Go语言的情景，里面不少典故")],-1),w={href:"https://github.com/rsc",target:"_blank",rel:"noopener noreferrer"},T={href:"https://github.com/aclements",target:"_blank",rel:"noopener noreferrer"},C=i('<h2 id="特性" tabindex="-1"><a class="header-anchor" href="#特性" aria-hidden="true">#</a> 特性</h2><ul><li><strong>语法简单</strong> Go语言在自由度和灵活度上做了取舍，以此换来了更好的维护性和平滑的学习曲线。</li><li><strong>部署友好</strong> Go静态编译后的二进制文件不依赖额外的运行环境，编译速度也非常快。</li><li><strong>交叉编译</strong> Go仅需要在编译时简单设置两个参数，就可以编译出能在其它平台上运行的程序</li><li><strong>天然并发</strong> Go语言对于并发的支持是纯天然的，仅需一个关键字，就可以开启一个异步协程。</li><li><strong>垃圾回收</strong> Go有着优秀的GC性能，大部分情况下GC延时都不会超过1毫秒。</li><li><strong>丰富的标准库</strong> 从字符串处理到源码AST解析，功能强大且丰富的标准库是Go语言坚实的基础。</li><li><strong>完善的工具链</strong> Go有着完善的开发工具链，涵盖了编译，测试，依赖管理，性能分析等方方面面。</li></ul><p>Go语言抛弃了继承，弱化了OOP，类，元编程，泛型，Lamda表达式等这些特性，拥有良好的性能和较低的上手难度，它适合用于云服务开发，应用服务端开发，以及网络编程。它自带GC，不需要开发者手动管理内存，静态编译和交叉编译这两点对于运维而言也十分友好。</p><p>Go语言的缺点同样也有很多，比如令人诟病的错误处理，残缺的泛型，标准库虽然很丰富但内置的数据结构却没几个，<code>interface{}</code>类型满天飞，没有枚举类型，除此之外，Go开发团队非常固执己见，不善于听取社区意见等等。（相比之下，Rust在错误处理，泛型，依赖管理，枚举，接口等方面做的要好得多）</p><p>总的来说，我们需要辩证的看待一门语言，作为一门工程化的语言，Go可以很大程度上提高团队的下限，就算开发人员水平再差也能兜底，很少出现一颗老鼠屎坏了一锅粥这种情况，同时因为简单的语法和较低的学习难度，可以让人很快的上手一个项目。尽管Go面世只有十余年不到，但已经有相当多的公司将Go作为了首选语言，也能侧面说明Go正在逐渐流行起来。</p><p>顺便一提，Go还是一门完全开源的语言，由社区和谷歌共同维护Go语言的发展，官方地址是在谷歌仓库里，Github上有一份同样的镜像仓库，如果有心你也可以参与到语言的设计当中。</p>',6),R={href:"https://go.dev/",target:"_blank",rel:"noopener noreferrer"},A={href:"https://cs.opensource.google/go",target:"_blank",rel:"noopener noreferrer"},B={href:"https://github.com/golang/go",target:"_blank",rel:"noopener noreferrer"},P={class:"hint-container tip"},E=n("p",{class:"hint-container-title"},"提示",-1),M={href:"https://246859.github.io/posts/code/go/contribute2go.html",target:"_blank",rel:"noopener noreferrer"},H={href:"https://www.rust-lang.org/zh-CN/",target:"_blank",rel:"noopener noreferrer"},y=n("br",null,null,-1),z=n("h2",{id:"安装",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#安装","aria-hidden":"true"},"#"),e(" 安装")],-1),$={href:"https://go.dev/dl/",target:"_blank",rel:"noopener noreferrer"},D=n("figure",null,[n("img",{src:u,alt:"",tabindex:"0",loading:"lazy"}),n("figcaption")],-1),V=i(`<h3 id="windows" tabindex="-1"><a class="header-anchor" href="#windows" aria-hidden="true">#</a> windows</h3><p>对于windows平台而言，有installer和archive两种类型可选，前者就是安装包，只需要点点点，推荐使用后者，会让你更熟悉go语言的目录结构，未来出问题不至于手足无措。选择下载zip文件，压缩文件中包含go语言的源代码以及工具链和一些文档，将其解压指定的路径，然后需要配置两个系统环境变量。</p><ul><li>GOROOT - go语言的安装路径</li><li>GOPATH - go语言依赖存放路径</li></ul><p>设置好后，给系统环境变量<code>PATH</code>添加两条新的项</p><ul><li><code>%GOROOT%\\bin</code>：这是go二进制程序地址</li><li><code>%GOPATH%\\bin</code>：这是未来会下载第三方依赖的二进制文件存放地址</li></ul><p>在<code>powershell</code>中执行<code>go version</code>命令，最后能正常显示版本就说明安装正确。</p><div class="language-powershell line-numbers-mode" data-ext="powershell"><pre class="language-powershell"><code><span class="token function">PS</span> C:\\user\\username&gt; go version
go version go1<span class="token punctuation">.</span>21<span class="token punctuation">.</span>3 windows/amd64
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>更新的话只需要下载新的zip覆盖原安装目录即可。</p><h3 id="linux" tabindex="-1"><a class="header-anchor" href="#linux" aria-hidden="true">#</a> linux</h3><p>拿ubuntu举例，复制想要的版本的链接，下载到本地</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ <span class="token function">wget</span> https://golang.google.cn/dl/go1.21.1.linux-amd64.tar.gz
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>解压到指定目录</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ <span class="token function">tar</span> <span class="token parameter variable">-C</span> ~/go <span class="token parameter variable">-xzf</span> go1.21.1.linux-amd64.tar.gz
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>在<code>$HOME/.bashrc</code>文件中设置环境变量</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token builtin class-name">export</span> <span class="token assign-left variable">GOROOT</span><span class="token operator">=</span><span class="token environment constant">$HOME</span>/go
<span class="token builtin class-name">export</span> <span class="token assign-left variable">GOPATH</span><span class="token operator">=</span><span class="token environment constant">$HOME</span>/gopath
<span class="token builtin class-name">export</span> <span class="token assign-left variable"><span class="token environment constant">PATH</span></span><span class="token operator">=</span><span class="token environment constant">$PATH</span><span class="token builtin class-name">:</span><span class="token variable">$GOROOT</span>/bin:<span class="token variable">$GOPATH</span>/bin
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>完成后查看安装版本，确认正确安装</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ go version
go version go1.21.1 linux/amd64
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>更新的话只需要下载新的tar.gz覆盖原安装目录即可。</p><br><h3 id="自定义结构" tabindex="-1"><a class="header-anchor" href="#自定义结构" aria-hidden="true">#</a> 自定义结构</h3><p>只是基本使用而言，上面的安装方式对于基本使用已经够用了，个人推荐用以下的目录结构来存放go语言及其衍生文件</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>go/
|
|--root/
|	|
|	|--go1.21.3/
|	|
|	|--go1.20.10/
|
|--mod/
|	|
|	|--bin/
|	|
|	|--libs/
|	
|--cache/
|
|--temp/
|
|--env
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>释义如下</p><ul><li><code>go/root</code>目录用于存放各个版本go语言源文件</li><li><code>go/mod</code>对应<code>GOAPTH</code></li><li><code>go/mod/libs</code>对应<code>GOMODCACHE</code>，也就是下载的第三方依赖存放地址</li><li><code>go/mod/bin</code>对应<code>GOBIN</code>，第三方依赖二进制文件存放地址</li><li><code>go/cache</code>，对应<code>GOCACHE</code>，存放缓存文件</li><li><code>go/temp</code>，对应<code>GOTMPDIR</code>，存放临时文件</li><li><code>go/env</code>，对应<code>GOENV</code>，全局环境变量配置文件</li></ul><p>该方式更新时不需要覆盖原安装目录，只需要将其存放到<code>go/root</code>目录下，然后修改<code>GOROOT</code>系统环境变量为该目录下指定版本的文件夹即可。在默认情况下env文件是读取的路径<code>GOROOT/env</code>，通过设置<code>GOENV</code>系统变量将其与<code>GOROOT</code>分离开，避免了因版本变更时go环境变量配置的变化，下面是<code>env</code>文件的初始设置。</p><div class="language-ini line-numbers-mode" data-ext="ini"><pre class="language-ini"><code><span class="token key attr-name">GO111MODULE</span><span class="token punctuation">=</span><span class="token value attr-value">on</span>
<span class="token key attr-name">GOCACHE</span><span class="token punctuation">=</span><span class="token value attr-value">go/cache</span>
<span class="token key attr-name">GOMODCACHE</span><span class="token punctuation">=</span><span class="token value attr-value">go/mod/libs</span>
<span class="token key attr-name">GOBIN</span><span class="token punctuation">=</span><span class="token value attr-value">go/mod/bin</span>
<span class="token key attr-name">GOTMPDIR</span><span class="token punctuation">=</span><span class="token value attr-value">go/temp</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这只是笔者比较喜欢的一个目录风格，前往<a href="/cmd#env">命令-环境变量</a>了解更多关于环境变量的信息，你可以完全按照个人喜好来进行自定义。</p><h3 id="多版本管理" tabindex="-1"><a class="header-anchor" href="#多版本管理" aria-hidden="true">#</a> 多版本管理</h3>`,28),L={href:"https://github.com/Open-Source-CQUT/govm/blob/main/README.zh.md",target:"_blank",rel:"noopener noreferrer"},N=i(`<div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ govm search <span class="token number">1.22</span> <span class="token parameter variable">-n</span> <span class="token number">10</span>
go1.22.6           <span class="token number">76</span> MB
go1.22.5           <span class="token number">76</span> MB
go1.22.4           <span class="token number">76</span> MB
go1.22.3           <span class="token number">76</span> MB
go1.22.2           <span class="token number">76</span> MB
go1.22.1           <span class="token number">76</span> MB
go1.22.0           <span class="token number">76</span> MB

$ govm <span class="token function">install</span> <span class="token number">1.22</span>.4
Fetch go1.22.4 from https://dl.google.com/go/go1.22.4.windows-amd64.zip
Downloading go1.22.4.windows-amd64.zip <span class="token number">100</span>% <span class="token operator">|</span>████████████████████████████████████████<span class="token operator">|</span> <span class="token punctuation">(</span><span class="token number">76</span>/76 MB, <span class="token number">32</span> MB/s<span class="token punctuation">)</span> <span class="token punctuation">[</span>2s<span class="token punctuation">]</span>
Extract go1.22.4.windows-amd64.zip to <span class="token builtin class-name">local</span> store
Remove archive from cache
Version go1.22.4 installed

$ govm use <span class="token number">1.22</span>.4
Use go1.22.4 now

<span class="token comment"># 重新登陆shell</span>
$ go version
go version go1.22.4 windows/amd64
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果你想了解如何用Go编写命令行工具，不嫌弃的话可以将govm作为一个项目参考，它也是由Go编写的。</p><h3 id="编辑器" tabindex="-1"><a class="header-anchor" href="#编辑器" aria-hidden="true">#</a> 编辑器</h3><p>主流的go语言IDE目前个人只推荐下面两个</p><ol><li>goland：jetbrain出品，功能强大，全方位支持，不过需要付费，可以考虑IDEA社区版配合插件</li><li>vscode：无需付费，万能的编辑器，有插件加持什么语言都能写</li></ol>`,5),S={href:"https://go.dev/play/",target:"_blank",rel:"noopener noreferrer"},I={class:"hint-container tip"},U=n("p",{class:"hint-container-title"},"提示",-1),F={href:"https://github.com/246859/AutoToolBox",target:"_blank",rel:"noopener noreferrer"},J=n("img",{src:"https://github.com/246859/AutoToolBox/raw/main/image/preview.png",style:{zoom:"67%"}},null,-1),j=n("h2",{id:"寄语",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#寄语","aria-hidden":"true"},"#"),e(" 寄语")],-1),K=n("p",null,"虽然Go语言整体难度并不高，如果你有其他语言基础学起来会非常简单，在学习的过程中遇到琢磨不透的难点可以先跳过，学习任何一门语言都是先笼统的了解这个语言的大致语法与结构，再去深究一些特性和细节，文档中的理念也是如此，适合入门学习。笔者本人也仅仅只是一名普通学生，难免会有疏漏和勘误，如果有发现任何错误可以在Github提交PR，如果觉得文档还不错可以在Github上点一个Star。",-1),Q=n("p",null,"如果你是强OOP语言的开发者，比如Java，C#等，请不要带着OOP的思想先入为主，否则会对go的很多设计感到匪夷所思，在编写代码的也会非常难受，笔者最开始也是这样。",-1),W=n("h2",{id:"概览",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#概览","aria-hidden":"true"},"#"),e(" 概览")],-1),X=n("p",null,"下面对本站的内容进行一个简单的介绍，以便各位可以按需阅读，部分页面是空白的代表着还未更新。",-1),Y=n("code",null,"if",-1),Z=n("code",null,"for",-1);function q(nn,en){const a=t("ExternalLinkIcon"),o=t("RouterLink");return d(),c("div",null,[g,v,m,n("ul",null,[n("li",null,[n("a",b,[e("Ken Thompson"),s(a)]),e("，图灵奖获得者，Unix系统创始人，B语言创始人，C语言创始人")]),n("li",null,[n("a",_,[e("Rob Pike"),s(a)]),e("，Plan9操作系统作者之一，UTF-8发明者之一，Go语言设计领头人")]),n("li",null,[n("a",k,[e("Robert Griesemer"),s(a)]),e("，JS V8引擎研发者，三人之中最年轻")])]),G,f,O,x,n("p",null,[e("不过三位创始人在很早以前就退隐了，在大部分时间里，团队领头人是"),n("a",w,[e("Russ Cox"),s(a)]),e("，他早在Go语言未对外发布时就已经参与到了开发工作当中，此后一直管理Go团队长达12年，直到2024年8月卸任，由"),n("a",T,[e("Austin Clements"),s(a)]),e("接手并领导后续的开发工作。")]),C,n("p",null,[e("官方网站："),n("a",R,[e("The Go Programming Language"),s(a)])]),n("p",null,[e("谷歌开源仓库："),n("a",A,[e("google/go: Google Open Source"),s(a)])]),n("p",null,[e("Github仓库："),n("a",B,[e("golang/go: The Go programming language"),s(a)])]),n("div",P,[E,n("p",null,[e("笔者曾经给Go提过PR，如果你想了解如何向Go贡献代码，可以看看我写的这篇文章："),n("a",M,[e("如何向Go贡献代码"),s(a)]),e("。")])]),n("p",null,[e("相信很多人应该都或多或少听说过"),n("a",H,[e("Rust"),s(a)]),e("，它是一个高性能的通用编程语言，其诞生时间与Go仅相差一年，Go1正式发布的时间是2012年，Rust的第一个正式版发布时间为2015年，它们都是较为现代化的语言，这两门语言笔者都很喜欢，它们发展的领域各不相同，如果你不满足于Go的运行效率和表达能力，不妨试试Rust，不过它的学习难度就远没有Go这么简单了。")]),y,z,n("p",null,[e("Go语言下载："),n("a",$,[e("Downloads - The Go Programming Language"),s(a)])]),D,n("p",null,[e("Stable Version指的是目前处于维护状态的两个稳定版本，Archived Version指的是不再维护的历史版本，前往"),s(o,{to:"/release.html"},{default:l(()=>[e("更新日志")]),_:1}),e("了解更多关于维护规则以及历史版本的信息。")]),V,n("p",null,[e("如果你有在本地安装不同版本Go的需求，手动下载然后安装多个版本会很繁琐，这件事曾经让我感到比较困扰，为了能够方便随时切换版本，我编写了一个命令行工具"),n("a",L,[e("govm"),s(a)]),e("，它可以搜索并下载可用的版本，然后安装到本地，而且可以非常方便的随时切换，效果大概如下所示，通过工具结合上面的结构管理go语言会更好。")]),N,n("p",null,[e("如果有其它的编辑器更符合自身的使用习惯也都可以用，用什么编辑器倒无所谓，如果只是写一些简短的练习代码，可以试试官方提供的"),n("a",S,[e("goplay"),s(a)]),e("，可以在线运行go代码。")]),n("div",I,[U,n("p",null,[e("如果你正在使用JetBrains Toolbox，可以尝试我写的一个命令行工具"),n("a",F,[e("AutoToolBox"),s(a)]),e("，可以为Toolbox生成windows右键菜单，效果图如下。")]),J]),j,K,Q,W,X,n("ul",null,[n("li",null,[e("语言入门：主要讲解关于Go语言本身的内容，偏理论。 "),n("ul",null,[n("li",null,[s(o,{to:"/essential/base/"},{default:l(()=>[e("语法基础")]),_:1}),e("：主要讲一些十分基础的语法，像是"),Y,e("，"),Z,e("之类的语法规则。")]),n("li",null,[s(o,{to:"/essential/senior/"},{default:l(()=>[e("语法进阶")]),_:1}),e("：讲一些Go独有的东西，关于模块，测试，协程等相关内容。")]),n("li",null,[s(o,{to:"/essential/std/"},{default:l(()=>[e("标准库")]),_:1}),e("：对Go自带的标准库的一个简单介绍，因为标准库的内容实在太过庞大所以随缘更新。")]),n("li",null,[s(o,{to:"/essential/impl/"},{default:l(()=>[e("实现原理")]),_:1}),e("：主要讲Go语言的一些内部设计原理，比如协程调度，内存管理，垃圾回收等。")])])]),n("li",null,[e("社区生态：主要讲解Go周边的生态，偏应用。 "),n("ul",null,[n("li",null,[s(o,{to:"/community/database/"},{default:l(()=>[e("数据库")]),_:1}),e("：通过Go操作主流的数据库。")]),n("li",null,[s(o,{to:"/community/micro/"},{default:l(()=>[e("微服务")]),_:1}),e("：介绍一些与Go有关的微服务工具。")]),n("li",null,[s(o,{to:"/community/pkgs/"},{default:l(()=>[e("第三方库")]),_:1}),e("：介绍一些由Go编写的第三方库，随缘更新，也可以直接在"),s(o,{to:"/deb.html"},{default:l(()=>[e("依赖导航")]),_:1}),e("里面查看。")])])])]),n("p",null,[e("前往"),s(o,{to:"/essential/base/0.ready.html"},{default:l(()=>[e("准备开始")]),_:1}),e("进行入门学习")])])}const an=r(h,[["render",q],["__file","guide.html.vue"]]);export{an as default};
