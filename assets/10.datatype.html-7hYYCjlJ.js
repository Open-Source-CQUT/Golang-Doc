import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as d,d as l,o as a}from"./app-BvieFAlR.js";const o={};function r(n,t){return a(),d("div",null,t[0]||(t[0]=[l('<h1 id="数据类型" tabindex="-1"><a class="header-anchor" href="#数据类型"><span>数据类型</span></a></h1><p>下面列出 Go 语言中全部的内置类型，以供参考，更多细节可以前往<a href="https://go.dev/ref/spec#Types" target="_blank" rel="noopener noreferrer">参考手册-类型</a>。</p><h2 id="布尔类型" tabindex="-1"><a class="header-anchor" href="#布尔类型"><span>布尔类型</span></a></h2><p>布尔类型只有真值和假值。</p><table><thead><tr><th>类型</th><th>描述</th></tr></thead><tbody><tr><td><code>bool</code></td><td><code>true</code>为真值，<code>false</code>为假值</td></tr></tbody></table><div class="hint-container tip"><p class="hint-container-title">提示</p><p>在 Go 中，整数 0 并不代表假值，非零整数也不能代表真值，即数字无法代替布尔值进行逻辑判断，两者是完全不同的类型。</p></div><h2 id="整型" tabindex="-1"><a class="header-anchor" href="#整型"><span>整型</span></a></h2><p>Go 中为不同位数的整数分配了不同的类型，主要分为无符号整型与有符号整型。</p><table><thead><tr><th style="text-align:left;">序号</th><th style="text-align:left;">类型和描述</th></tr></thead><tbody><tr><td style="text-align:left;"><code>uint8</code></td><td style="text-align:left;">无符号 8 位整型</td></tr><tr><td style="text-align:left;"><code>uint16</code></td><td style="text-align:left;">无符号 16 位整型</td></tr><tr><td style="text-align:left;"><code>uint32</code></td><td style="text-align:left;">无符号 32 位整型</td></tr><tr><td style="text-align:left;"><code>uint64</code></td><td style="text-align:left;">无符号 64 位整型</td></tr><tr><td style="text-align:left;"><code>int8</code></td><td style="text-align:left;">有符号 8 位整型</td></tr><tr><td style="text-align:left;"><code>int16</code></td><td style="text-align:left;">有符号 16 位整型</td></tr><tr><td style="text-align:left;"><code>int32</code></td><td style="text-align:left;">有符号 32 位整型</td></tr><tr><td style="text-align:left;"><code>int64</code></td><td style="text-align:left;">有符号 64 位整型</td></tr><tr><td style="text-align:left;"><code>uint</code></td><td style="text-align:left;">无符号整型 至少 32 位</td></tr><tr><td style="text-align:left;"><code>int</code></td><td style="text-align:left;">整型 至少 32 位</td></tr><tr><td style="text-align:left;"><code>uintptr</code></td><td style="text-align:left;">等价于无符号 64 位整型，但是专用于存放指针运算，用于存放死的指针地址。</td></tr></tbody></table><h2 id="浮点型" tabindex="-1"><a class="header-anchor" href="#浮点型"><span>浮点型</span></a></h2><p><code>IEEE-754</code>浮点数，主要分为单精度浮点数与双精度浮点数。</p><table><thead><tr><th style="text-align:left;">类型</th><th style="text-align:left;">类型和描述</th></tr></thead><tbody><tr><td style="text-align:left;"><code>float32</code></td><td style="text-align:left;">IEEE-754 32 位浮点数</td></tr><tr><td style="text-align:left;"><code>float64</code></td><td style="text-align:left;">IEEE-754 64 位浮点数</td></tr></tbody></table><h2 id="复数类型" tabindex="-1"><a class="header-anchor" href="#复数类型"><span>复数类型</span></a></h2><table><thead><tr><th>类型</th><th>描述</th></tr></thead><tbody><tr><td><code>complex128</code></td><td>64 位实数和虚数</td></tr><tr><td><code>complex64</code></td><td>32 位实数和虚数</td></tr></tbody></table><h2 id="字符类型" tabindex="-1"><a class="header-anchor" href="#字符类型"><span>字符类型</span></a></h2><p>go 语言字符串完全兼容 UTF-8</p><table><thead><tr><th>类型</th><th style="text-align:left;">描述</th></tr></thead><tbody><tr><td><code>byte</code></td><td style="text-align:left;">等价 <code>uint8</code> 可以表达 ANSCII 字符</td></tr><tr><td><code>rune</code></td><td style="text-align:left;">等价 <code>int32</code> 可以表达 Unicode 字符</td></tr><tr><td><code>string</code></td><td style="text-align:left;">字符串即字节序列，可以转换为<code>[]byte</code>类型即字节切片</td></tr></tbody></table><h2 id="派生类型" tabindex="-1"><a class="header-anchor" href="#派生类型"><span>派生类型</span></a></h2><table><thead><tr><th>类型</th><th>例子</th></tr></thead><tbody><tr><td>数组</td><td><code>[5]int</code>，长度为 5 的整型数组</td></tr><tr><td>切片</td><td><code>[]float64</code>，64 位浮点数切片</td></tr><tr><td>映射表</td><td><code>map[string]int</code>，键为字符串类型，值为整型的映射表</td></tr><tr><td>结构体</td><td><code>type Gopher struct{}</code>，Gopher 结构体</td></tr><tr><td>指针</td><td><code>*int</code>，一个整型指针。</td></tr><tr><td>函数</td><td><code>type f func()</code>，一个没有参数，没有返回值的函数类型</td></tr><tr><td>接口</td><td><code>type Gopher interface{}</code>，Gopher 接口</td></tr><tr><td>通道</td><td><code>chan int</code>，整型通道</td></tr></tbody></table><h2 id="零值" tabindex="-1"><a class="header-anchor" href="#零值"><span>零值</span></a></h2><p>官方文档中零值称为<code>zero value</code>，零值并不仅仅只是字面上的数字零，而是一个类型的空值或者说默认值更为准确。</p><table><thead><tr><th>类型</th><th>零值</th></tr></thead><tbody><tr><td>数字类型</td><td><code>0</code></td></tr><tr><td>布尔类型</td><td><code>false</code></td></tr><tr><td>字符串类型</td><td><code>&quot;&quot;</code></td></tr><tr><td>数组</td><td>固定长度的对应类型的零值集合</td></tr><tr><td>结构体</td><td>内部字段都是零值的结构体</td></tr><tr><td>切片，映射表，函数，接口，通道，指针</td><td><code>nil</code></td></tr></tbody></table><h3 id="nil" tabindex="-1"><a class="header-anchor" href="#nil"><span>nil</span></a></h3><p><code>nil</code>类似于其它语言中的<code>none</code>或者<code>null</code>，但并不等同。<code>nil</code>仅仅只是一些引用类型的零值，并且不属于任何类型，从源代码中的<code>nil</code>可以看出它仅仅只是一个变量。</p><div class="language-go line-numbers-mode" data-highlighter="shiki" data-ext="go" data-title="go" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">var</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> nil</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> Type</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>并且<code>nil == nil</code>这样的语句是无法通过编译的。</p>',26)]))}const s=e(o,[["render",r],["__file","10.datatype.html.vue"]]),h=JSON.parse('{"path":"/essential/base/10.datatype.html","title":"数据类型","lang":"zh-CN","frontmatter":{"date":"2022-08-12T00:00:00.000Z","description":"数据类型 下面列出 Go 语言中全部的内置类型，以供参考，更多细节可以前往参考手册-类型。 布尔类型 布尔类型只有真值和假值。 提示 在 Go 中，整数 0 并不代表假值，非零整数也不能代表真值，即数字无法代替布尔值进行逻辑判断，两者是完全不同的类型。 整型 Go 中为不同位数的整数分配了不同的类型，主要分为无符号整型与有符号整型。 浮点型 IEEE-...","head":[["meta",{"property":"og:url","content":"https://golang.halfiisland.com/essential/base/10.datatype.html"}],["meta",{"property":"og:site_name","content":"Golang 中文学习文档"}],["meta",{"property":"og:title","content":"数据类型"}],["meta",{"property":"og:description","content":"数据类型 下面列出 Go 语言中全部的内置类型，以供参考，更多细节可以前往参考手册-类型。 布尔类型 布尔类型只有真值和假值。 提示 在 Go 中，整数 0 并不代表假值，非零整数也不能代表真值，即数字无法代替布尔值进行逻辑判断，两者是完全不同的类型。 整型 Go 中为不同位数的整数分配了不同的类型，主要分为无符号整型与有符号整型。 浮点型 IEEE-..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-12-15T16:58:36.000Z"}],["meta",{"property":"article:published_time","content":"2022-08-12T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-12-15T16:58:36.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"数据类型\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2022-08-12T00:00:00.000Z\\",\\"dateModified\\":\\"2024-12-15T16:58:36.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"寒江蓑笠翁\\",\\"url\\":\\"https://246859.github.io/\\",\\"email\\":\\"2633565580@qq.com\\"}]}"]]},"headers":[{"level":2,"title":"布尔类型","slug":"布尔类型","link":"#布尔类型","children":[]},{"level":2,"title":"整型","slug":"整型","link":"#整型","children":[]},{"level":2,"title":"浮点型","slug":"浮点型","link":"#浮点型","children":[]},{"level":2,"title":"复数类型","slug":"复数类型","link":"#复数类型","children":[]},{"level":2,"title":"字符类型","slug":"字符类型","link":"#字符类型","children":[]},{"level":2,"title":"派生类型","slug":"派生类型","link":"#派生类型","children":[]},{"level":2,"title":"零值","slug":"零值","link":"#零值","children":[{"level":3,"title":"nil","slug":"nil","link":"#nil","children":[]}]}],"git":{"createdTime":1674913151000,"updatedTime":1734281916000,"contributors":[{"name":"Mister-Hope","username":"Mister-Hope","email":"mister-hope@outlook.com","commits":1,"url":"https://github.com/Mister-Hope"},{"name":"246859","username":"246859","email":"2633565580@qq.com","commits":9,"url":"https://github.com/246859"}]},"readingTime":{"minutes":4.77,"words":716},"filePathRelative":"essential/base/10.datatype.md","localizedDate":"2022年8月12日","autoDesc":true,"excerpt":"\\n<p>下面列出 Go 语言中全部的内置类型，以供参考，更多细节可以前往<a href=\\"https://go.dev/ref/spec#Types\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">参考手册-类型</a>。</p>\\n<h2>布尔类型</h2>\\n<p>布尔类型只有真值和假值。</p>\\n<table>\\n<thead>\\n<tr>\\n<th>类型</th>\\n<th>描述</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td><code>bool</code></td>\\n<td><code>true</code>为真值，<code>false</code>为假值</td>\\n</tr>\\n</tbody>\\n</table>"}');export{s as comp,h as data};
