import{_ as n,V as s,W as a,a0 as t}from"./framework-f06be456.js";const p={},e=t(`<h1 id="sort" tabindex="-1"><a class="header-anchor" href="#sort" aria-hidden="true">#</a> sort</h1><div class="hint-container tip"><p class="hint-container-title">提示</p><p>如果你是1.21版本以上的开发者，我建议使用<code>slices</code>标准库来进行排序，它支持泛型，API设计更加合理。</p></div><p>在go中的<code>sort</code>包下提供了官方实现的排序方法，大部分可以直接开箱即用。倘若想要对结构体进行排序的话必须实现<code>sort.Interface</code>下的三个方法<code>Len()</code> <code>swap()</code> <code>Less()</code>。由于官方已经帮我们实现了<code>Float64Slice</code> <code>StringSlice</code> <code>IntSlice</code>三个类型，所以这三个类型可以不用我们自己实现直接使用即可。</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">type</span> Interface <span class="token keyword">interface</span> <span class="token punctuation">{</span>
   <span class="token comment">// 长度方法</span>
   <span class="token function">Len</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">int</span>

   <span class="token comment">// 比较方法</span>
   <span class="token function">Less</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> j <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">bool</span>

   <span class="token comment">// 交换方法</span>
   <span class="token function">Swap</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> j <span class="token builtin">int</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="整型排序" tabindex="-1"><a class="header-anchor" href="#整型排序" aria-hidden="true">#</a> 整型排序</h2><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
   ints <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">111</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">99</span><span class="token punctuation">,</span> <span class="token number">23</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">66</span><span class="token punctuation">}</span>
   sort<span class="token punctuation">.</span><span class="token function">Ints</span><span class="token punctuation">(</span>ints<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="浮点排序" tabindex="-1"><a class="header-anchor" href="#浮点排序" aria-hidden="true">#</a> 浮点排序</h2><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
   floats <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">float64</span><span class="token punctuation">{</span><span class="token number">1.0</span><span class="token punctuation">,</span> <span class="token number">2.5</span><span class="token punctuation">,</span> <span class="token number">3.8</span><span class="token punctuation">,</span> <span class="token number">1.11</span><span class="token punctuation">,</span> <span class="token number">5.5</span><span class="token punctuation">,</span> <span class="token number">99.99999</span><span class="token punctuation">,</span> <span class="token number">23.9999</span><span class="token punctuation">,</span> <span class="token number">5.66</span><span class="token punctuation">,</span> <span class="token number">66</span><span class="token punctuation">}</span>
   sort<span class="token punctuation">.</span><span class="token function">Float64s</span><span class="token punctuation">(</span>floats<span class="token punctuation">)</span>
   fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>floats<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="字符串排序" tabindex="-1"><a class="header-anchor" href="#字符串排序" aria-hidden="true">#</a> 字符串排序</h2><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
   strings <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">{</span><span class="token string">&quot;helloworld&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;aaa&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;bbb&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;ccc&quot;</span><span class="token punctuation">}</span>
   sort<span class="token punctuation">.</span><span class="token function">Strings</span><span class="token punctuation">(</span>strings<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="逆向排序" tabindex="-1"><a class="header-anchor" href="#逆向排序" aria-hidden="true">#</a> 逆向排序</h2><p>需要先进行<code>sort.Reverse</code>包装再进行排序</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	floats <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">float64</span><span class="token punctuation">{</span><span class="token number">1.0</span><span class="token punctuation">,</span> <span class="token number">2.5</span><span class="token punctuation">,</span> <span class="token number">3.8</span><span class="token punctuation">,</span> <span class="token number">1.11</span><span class="token punctuation">,</span> <span class="token number">5.5</span><span class="token punctuation">,</span> <span class="token number">99.99999</span><span class="token punctuation">,</span> <span class="token number">23.9999</span><span class="token punctuation">,</span> <span class="token number">5.66</span><span class="token punctuation">,</span> <span class="token number">66</span><span class="token punctuation">}</span>
	sort<span class="token punctuation">.</span><span class="token function">Sort</span><span class="token punctuation">(</span>sort<span class="token punctuation">.</span><span class="token function">Reverse</span><span class="token punctuation">(</span>sort<span class="token punctuation">.</span><span class="token function">Float64Slice</span><span class="token punctuation">(</span>floats<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>floats<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="自定义排序" tabindex="-1"><a class="header-anchor" href="#自定义排序" aria-hidden="true">#</a> 自定义排序</h2><p>如果想要自定义结构体排序的话，就必须实现三个方法。</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">type</span> Person <span class="token keyword">struct</span> <span class="token punctuation">{</span>
	UserId   <span class="token builtin">string</span> 
	Username <span class="token builtin">string</span> 
	Age      <span class="token builtin">int</span>    
	Address  <span class="token builtin">string</span> 
<span class="token punctuation">}</span>

<span class="token keyword">type</span> PersonSlice <span class="token punctuation">[</span><span class="token punctuation">]</span>Person

<span class="token comment">//返回切片的长度</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>p PersonSlice<span class="token punctuation">)</span> <span class="token function">Len</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token punctuation">{</span>
	<span class="token keyword">return</span> <span class="token function">len</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token comment">//比较方法</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>p PersonSlice<span class="token punctuation">)</span> <span class="token function">Less</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> j <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">bool</span> <span class="token punctuation">{</span>
	<span class="token keyword">return</span> p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>Age <span class="token operator">&lt;</span> p<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span>Age
<span class="token punctuation">}</span>

<span class="token comment">//交换方法</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>p PersonSlice<span class="token punctuation">)</span> <span class="token function">Swap</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> j <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> p<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> p<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> p<span class="token punctuation">[</span>i<span class="token punctuation">]</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>由于是根据年龄比较的，所有结果是根据年龄的大小来排序。</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
   persons <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>Person<span class="token punctuation">{</span><span class="token punctuation">{</span>
      UserId<span class="token punctuation">:</span>   <span class="token string">&quot;1&quot;</span><span class="token punctuation">,</span>
      Username<span class="token punctuation">:</span> <span class="token string">&quot;wyh&quot;</span><span class="token punctuation">,</span>
      Age<span class="token punctuation">:</span>      <span class="token number">18</span><span class="token punctuation">,</span>
      Address<span class="token punctuation">:</span>  <span class="token string">&quot;us&quot;</span><span class="token punctuation">,</span>
   <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
      UserId<span class="token punctuation">:</span>   <span class="token string">&quot;2&quot;</span><span class="token punctuation">,</span>
      Username<span class="token punctuation">:</span> <span class="token string">&quot;jack&quot;</span><span class="token punctuation">,</span>
      Age<span class="token punctuation">:</span>      <span class="token number">17</span><span class="token punctuation">,</span>
      Address<span class="token punctuation">:</span>  <span class="token string">&quot;ch&quot;</span><span class="token punctuation">,</span>
   <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
      UserId<span class="token punctuation">:</span>   <span class="token string">&quot;3&quot;</span><span class="token punctuation">,</span>
      Username<span class="token punctuation">:</span> <span class="token string">&quot;mike&quot;</span><span class="token punctuation">,</span>
      Age<span class="token punctuation">:</span>      <span class="token number">15</span><span class="token punctuation">,</span>
      Address<span class="token punctuation">:</span>  <span class="token string">&quot;india&quot;</span><span class="token punctuation">,</span>
   <span class="token punctuation">}</span><span class="token punctuation">}</span>

   sort<span class="token punctuation">.</span><span class="token function">Sort</span><span class="token punctuation">(</span><span class="token function">PersonSlice</span><span class="token punctuation">(</span>persons<span class="token punctuation">)</span><span class="token punctuation">)</span>

   fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>persons<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="是否有序" tabindex="-1"><a class="header-anchor" href="#是否有序" aria-hidden="true">#</a> 是否有序</h2><p>判断一个切片是否有序，其内部并不会进行排序操作，而是通过循环调用<code>Less()</code>来判断</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
   persons <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>Person<span class="token punctuation">{</span><span class="token punctuation">{</span>
      UserId<span class="token punctuation">:</span>   <span class="token string">&quot;1&quot;</span><span class="token punctuation">,</span>
      Username<span class="token punctuation">:</span> <span class="token string">&quot;wyh&quot;</span><span class="token punctuation">,</span>
      Age<span class="token punctuation">:</span>      <span class="token number">18</span><span class="token punctuation">,</span>
      Address<span class="token punctuation">:</span>  <span class="token string">&quot;us&quot;</span><span class="token punctuation">,</span>
   <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
      UserId<span class="token punctuation">:</span>   <span class="token string">&quot;2&quot;</span><span class="token punctuation">,</span>
      Username<span class="token punctuation">:</span> <span class="token string">&quot;jack&quot;</span><span class="token punctuation">,</span>
      Age<span class="token punctuation">:</span>      <span class="token number">17</span><span class="token punctuation">,</span>
      Address<span class="token punctuation">:</span>  <span class="token string">&quot;ch&quot;</span><span class="token punctuation">,</span>
   <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
      UserId<span class="token punctuation">:</span>   <span class="token string">&quot;3&quot;</span><span class="token punctuation">,</span>
      Username<span class="token punctuation">:</span> <span class="token string">&quot;mike&quot;</span><span class="token punctuation">,</span>
      Age<span class="token punctuation">:</span>      <span class="token number">15</span><span class="token punctuation">,</span>
      Address<span class="token punctuation">:</span>  <span class="token string">&quot;india&quot;</span><span class="token punctuation">,</span>
   <span class="token punctuation">}</span><span class="token punctuation">}</span>

   sort<span class="token punctuation">.</span><span class="token function">Sort</span><span class="token punctuation">(</span><span class="token function">PersonSlice</span><span class="token punctuation">(</span>persons<span class="token punctuation">)</span><span class="token punctuation">)</span>

   <span class="token function">println</span><span class="token punctuation">(</span>sort<span class="token punctuation">.</span><span class="token function">IsSorted</span><span class="token punctuation">(</span><span class="token function">PersonSlice</span><span class="token punctuation">(</span>persons<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,21),o=[e];function c(i,u){return s(),a("div",null,o)}const k=n(p,[["render",c],["__file","sort.html.vue"]]);export{k as default};
