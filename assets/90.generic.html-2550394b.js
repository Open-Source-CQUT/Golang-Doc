import{_ as e,V as o,W as c,X as n,Y as s,Z as t,a0 as p,F as i}from"./framework-f06be456.js";const l={},u=p(`<h1 id="泛型" tabindex="-1"><a class="header-anchor" href="#泛型" aria-hidden="true">#</a> 泛型</h1><p>最初的Go是没有泛型这一说法的，但自从诞生以来，社区关于Go呼声最高的事情就是希望加入泛型。终于Go在1.18版本加入了对泛型的支持，不过有一点怪。</p><br><h2 id="示例" tabindex="-1"><a class="header-anchor" href="#示例" aria-hidden="true">#</a> 示例</h2><p>在开始之前，先来看一个简单的例子。</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">Sum</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token punctuation">{</span>
   <span class="token keyword">return</span> a <span class="token operator">+</span> b
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这是一个功能十分简单的函数，作用就是将两个<code>int</code>类型的整数相加并返回结果，倘若想要传入两个<code>float64</code>类型的浮点数求和的话，显然是不可以的，因为类型不匹配。一种解决办法就是再定义一个新的函数，如下</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">SumFloat64</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b <span class="token builtin">float64</span><span class="token punctuation">)</span> <span class="token builtin">float64</span> <span class="token punctuation">{</span>
	<span class="token keyword">return</span> a <span class="token operator">+</span> b
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>那么问题来了，如果开发一个数学工具包，计算所有数字类型的两数之和，难道要每一个类型都要编写一个函数吗？显然是不太可能的，或者也可以使用<code>any</code>类型加反射来判断，如下</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">SumAny</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b any<span class="token punctuation">)</span> <span class="token punctuation">(</span>any<span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	tA<span class="token punctuation">,</span> tB <span class="token operator">:=</span> reflect<span class="token punctuation">.</span><span class="token function">ValueOf</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">,</span> reflect<span class="token punctuation">.</span><span class="token function">ValueOf</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span>
	<span class="token keyword">if</span> tA<span class="token punctuation">.</span><span class="token function">Kind</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> tB<span class="token punctuation">.</span><span class="token function">Kind</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> errors<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span><span class="token string">&quot;disMatch type&quot;</span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span>

	<span class="token keyword">switch</span> tA<span class="token punctuation">.</span><span class="token function">Kind</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">case</span> reflect<span class="token punctuation">.</span>Int<span class="token punctuation">:</span>
	<span class="token keyword">case</span> reflect<span class="token punctuation">.</span>Int32<span class="token punctuation">:</span>
		<span class="token operator">...</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>但是这样写会显得十分复杂，而且性能低下。但是<code>Sum</code>函数的逻辑都是一模一样的，都只不过是将两个数相加而已，这时候就需要用到了泛型，所以为什么需要泛型，<strong>泛型是为了解决执行逻辑与类型无关的问题</strong>，这类问题不关心给出的类型是什么，只需要完成对应的操作就足够。所以泛型的写法如下</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> Sum<span class="token punctuation">[</span>T <span class="token builtin">int</span> <span class="token operator">|</span> <span class="token builtin">float64</span><span class="token punctuation">]</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b T<span class="token punctuation">)</span> T <span class="token punctuation">{</span>
   <span class="token keyword">return</span> a <span class="token operator">+</span> b
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>类型形参</strong>：T就是一个类型形参，形参具体是什么类型取决于传进来什么类型</p><p><strong>类型约束</strong>：<code>int | float64</code>构成了一个类型约束，这个类型约束内规定了哪些类型是允许的，约束了类型形参的类型范围</p><p><strong>类型实参</strong>：<code>Sum[int](1,2)</code>，手动指定了<code>int</code>类型，<code>int</code>就是类型实参。</p><p>第一种用法，显式的指明使用哪种类型，如下</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>Sum<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token number">2012</span><span class="token punctuation">,</span> <span class="token number">2022</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>第二种用法，不指定类型，让编译器自行推断，如下</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token function">Sum</span><span class="token punctuation">(</span><span class="token number">3.1415926</span><span class="token punctuation">,</span> <span class="token number">1.114514</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>看到这里后，应该对为什么要使用泛型，以及泛型解决了哪种问题有了一个大概的了解。将泛型引入项目后，开发上确实会比较方便，随之而来的是项目复杂度的增加，毫无节制的使用泛型会使得代码难以维护，所以应该在正确的地方使用泛型，而不是为了泛型而泛型。</p><br><h2 id="泛型结构" tabindex="-1"><a class="header-anchor" href="#泛型结构" aria-hidden="true">#</a> 泛型结构</h2><p>这是一个泛型切片，类型约束为<code>int | int32 | int64</code></p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">type</span> GenericSlice<span class="token punctuation">[</span>T <span class="token builtin">int</span> <span class="token operator">|</span> <span class="token builtin">int32</span> <span class="token operator">|</span> <span class="token builtin">int64</span><span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>T
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>这里使用时就不能省略掉类型实参</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>GenericSlice<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><br><p>这是一个泛型哈希表，键的类型必须是可比较的，所以使用<code>comparable</code>接口，值的类型约束为<code>V int | string | byte</code></p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">type</span> GenericMap<span class="token punctuation">[</span>K comparable<span class="token punctuation">,</span> V <span class="token builtin">int</span> <span class="token operator">|</span> <span class="token builtin">string</span> <span class="token operator">|</span> <span class="token builtin">byte</span><span class="token punctuation">]</span> <span class="token keyword">map</span><span class="token punctuation">[</span>K<span class="token punctuation">]</span>V
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>使用</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>gmap1 <span class="token operator">:=</span> GenericMap<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token builtin">string</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">:</span> <span class="token string">&quot;hello world&quot;</span><span class="token punctuation">}</span>
gmap2 <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span>GenericMap<span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token builtin">byte</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><br><p>这是一个泛型结构体，类型约束为<code>T int | string</code></p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">type</span> GenericStruct<span class="token punctuation">[</span>T <span class="token builtin">int</span> <span class="token operator">|</span> <span class="token builtin">string</span><span class="token punctuation">]</span> <span class="token keyword">struct</span> <span class="token punctuation">{</span>
   Name <span class="token builtin">string</span>
   Id   T
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>GenericStruct<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">{</span>
   Name<span class="token punctuation">:</span> <span class="token string">&quot;jack&quot;</span><span class="token punctuation">,</span>
   Id<span class="token punctuation">:</span>   <span class="token number">1024</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
GenericStruct<span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token punctuation">{</span>
   Name<span class="token punctuation">:</span> <span class="token string">&quot;Mike&quot;</span><span class="token punctuation">,</span>
   Id<span class="token punctuation">:</span>   <span class="token string">&quot;1024&quot;</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><br><p>这是一个泛型切片形参的例子</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">type</span> Company<span class="token punctuation">[</span>T <span class="token builtin">int</span> <span class="token operator">|</span> <span class="token builtin">string</span><span class="token punctuation">,</span> S <span class="token punctuation">[</span><span class="token punctuation">]</span>T<span class="token punctuation">]</span> <span class="token keyword">struct</span> <span class="token punctuation">{</span>
   Name  <span class="token builtin">string</span>
   Id    T
   Stuff S
<span class="token punctuation">}</span>

<span class="token comment">//也可以如下</span>
<span class="token keyword">type</span> Company<span class="token punctuation">[</span>T <span class="token builtin">int</span> <span class="token operator">|</span> <span class="token builtin">string</span><span class="token punctuation">,</span> S <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span> <span class="token operator">|</span> <span class="token builtin">string</span><span class="token punctuation">]</span> <span class="token keyword">struct</span> <span class="token punctuation">{</span>
	Name  <span class="token builtin">string</span>
	Id    T
	Stuff S
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>Company<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">{</span>
   Name<span class="token punctuation">:</span>  <span class="token string">&quot;lili&quot;</span><span class="token punctuation">,</span>
   Id<span class="token punctuation">:</span>    <span class="token number">1</span><span class="token punctuation">,</span>
   Stuff<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container tip"><p class="hint-container-title">提示</p><p>在泛型结构体中，更推荐这种写法</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">type</span> Company<span class="token punctuation">[</span>T <span class="token builtin">int</span> <span class="token operator">|</span> <span class="token builtin">string</span><span class="token punctuation">,</span> S <span class="token builtin">int</span> <span class="token operator">|</span> <span class="token builtin">string</span><span class="token punctuation">]</span> <span class="token keyword">struct</span> <span class="token punctuation">{</span>
	Name  <span class="token builtin">string</span>
	Id    T
	Stuff <span class="token punctuation">[</span><span class="token punctuation">]</span>S
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><p><code>SayAble</code>是一个泛型接口，<code>Person</code>实现了该接口。</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">type</span> SayAble<span class="token punctuation">[</span>T <span class="token builtin">int</span> <span class="token operator">|</span> <span class="token builtin">string</span><span class="token punctuation">]</span> <span class="token keyword">interface</span> <span class="token punctuation">{</span>
   <span class="token function">Say</span><span class="token punctuation">(</span><span class="token punctuation">)</span> T
<span class="token punctuation">}</span>

<span class="token keyword">type</span> Person<span class="token punctuation">[</span>T <span class="token builtin">int</span> <span class="token operator">|</span> <span class="token builtin">string</span><span class="token punctuation">]</span> <span class="token keyword">struct</span> <span class="token punctuation">{</span>
   msg T
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>p Person<span class="token punctuation">[</span>T<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token function">Say</span><span class="token punctuation">(</span><span class="token punctuation">)</span> T <span class="token punctuation">{</span>
   <span class="token keyword">return</span> p<span class="token punctuation">.</span>msg
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">var</span> s SayAble<span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span>
	s <span class="token operator">=</span> Person<span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token string">&quot;hello world&quot;</span><span class="token punctuation">}</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">Say</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="泛型结构注意点" tabindex="-1"><a class="header-anchor" href="#泛型结构注意点" aria-hidden="true">#</a> 泛型结构注意点</h3><p><strong>泛型不能作为一个类型的基本类型</strong></p><p>以下写法是错误的，泛型形参T是不能作为基础类型的</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">type</span> GenericType<span class="token punctuation">[</span>T <span class="token builtin">int</span> <span class="token operator">|</span> <span class="token builtin">int32</span> <span class="token operator">|</span> <span class="token builtin">int64</span><span class="token punctuation">]</span> T
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>虽然下列的写法是允许的，不过毫无意义而且可能会造成数值溢出的问题，所以并不推荐</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">type</span> GenericType<span class="token punctuation">[</span>T <span class="token builtin">int</span> <span class="token operator">|</span> <span class="token builtin">int32</span> <span class="token operator">|</span> <span class="token builtin">int64</span><span class="token punctuation">]</span> <span class="token builtin">int</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>泛型类型无法使用类型断言</strong></p><p>对泛型类型使用类型断言将会无法通过编译，泛型要解决的问题是<strong>类型无关</strong>的，如果一个问题需要根据不同类型做出不同的逻辑，那么就根本不应该使用泛型，应该使用<code>interface{}</code>或者<code>any</code>。</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> Sum<span class="token punctuation">[</span>T <span class="token builtin">int</span> <span class="token operator">|</span> <span class="token builtin">float64</span><span class="token punctuation">]</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b T<span class="token punctuation">)</span> T <span class="token punctuation">{</span>
   ints<span class="token punctuation">,</span>ok <span class="token operator">:=</span> a<span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token comment">// 不被允许</span>
   <span class="token keyword">switch</span> a<span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token keyword">type</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// 不被允许</span>
   <span class="token keyword">case</span> <span class="token builtin">int</span><span class="token punctuation">:</span>
   <span class="token keyword">case</span> <span class="token builtin">bool</span><span class="token punctuation">:</span>
      <span class="token operator">...</span>
   <span class="token punctuation">}</span>
   <span class="token keyword">return</span> a <span class="token operator">+</span> b
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>匿名结构不支持泛型</strong></p><p>匿名结构体是不支持泛型的，如下的代码将无法通过编译</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>testStruct <span class="token operator">:=</span> <span class="token keyword">struct</span><span class="token punctuation">[</span>T <span class="token builtin">int</span> <span class="token operator">|</span> <span class="token builtin">string</span><span class="token punctuation">]</span> <span class="token punctuation">{</span>
   Name <span class="token builtin">string</span>
   Id T
<span class="token punctuation">}</span><span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">{</span>
   Name<span class="token punctuation">:</span> <span class="token string">&quot;jack&quot;</span><span class="token punctuation">,</span>
   Id<span class="token punctuation">:</span> <span class="token number">1</span>  
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>匿名函数不支持自定义泛型</strong></p><p>以下两种写法都将无法通过编译</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">var</span> sum<span class="token punctuation">[</span>T <span class="token builtin">int</span> <span class="token operator">|</span> <span class="token builtin">string</span><span class="token punctuation">]</span> <span class="token keyword">func</span> <span class="token punctuation">(</span>a<span class="token punctuation">,</span> b T<span class="token punctuation">)</span> T
sum <span class="token operator">:=</span> <span class="token keyword">func</span><span class="token punctuation">[</span>T <span class="token builtin">int</span> <span class="token operator">|</span> <span class="token builtin">string</span><span class="token punctuation">]</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b T<span class="token punctuation">)</span> T<span class="token punctuation">{</span>
    <span class="token operator">...</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>但是可以<strong>使用</strong>已有的泛型类型，例如闭包中</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> Sum<span class="token punctuation">[</span>T <span class="token builtin">int</span> <span class="token operator">|</span> <span class="token builtin">float64</span><span class="token punctuation">]</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b T<span class="token punctuation">)</span> T <span class="token punctuation">{</span>
	sub <span class="token operator">:=</span> <span class="token keyword">func</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span> d T<span class="token punctuation">)</span> T <span class="token punctuation">{</span>
		<span class="token keyword">return</span> c <span class="token operator">-</span> d
	<span class="token punctuation">}</span>
	<span class="token keyword">return</span> <span class="token function">sub</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span> <span class="token operator">+</span> a <span class="token operator">+</span> b
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>不支持泛型方法</strong></p><p>方法是不能拥有泛型形参的，但是<code>receiver</code>可以拥有泛型形参。如下的代码将会无法通过编译</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">type</span> GenericStruct<span class="token punctuation">[</span>T <span class="token builtin">int</span> <span class="token operator">|</span> <span class="token builtin">string</span><span class="token punctuation">]</span> <span class="token keyword">struct</span> <span class="token punctuation">{</span>
   Name <span class="token builtin">string</span>
   Id   T
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>g GenericStruct<span class="token punctuation">[</span>T<span class="token punctuation">]</span><span class="token punctuation">)</span> name<span class="token punctuation">[</span>S <span class="token builtin">int</span> <span class="token operator">|</span> <span class="token builtin">float64</span><span class="token punctuation">]</span><span class="token punctuation">(</span>a S<span class="token punctuation">)</span> S <span class="token punctuation">{</span>
   <span class="token keyword">return</span> a
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="类型集" tabindex="-1"><a class="header-anchor" href="#类型集" aria-hidden="true">#</a> 类型集</h2><p>在1.18以后，接口的定义变为了类型集<code>(type set)</code>，含有类型集的接口又称为<code>General interfaces</code>即通用接口。</p>`,66),r={href:"https://go.dev/ref/spec#Interface_types",target:"_blank",rel:"noopener noreferrer"},k=p(`<p>类型集主要用于类型约束，不能用作类型声明，既然是集合，就会有空集，并集，交集，接下来将会讲解这三种情况。</p><br><p><strong>并集</strong></p><p>接口类型<code>SignedInt</code>是一个类型集，有符号整数类型的并集就是<code>SignedInt</code>，反过来<code>SignedInt</code>就是它们的超集。</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">type</span> SignedInt <span class="token keyword">interface</span> <span class="token punctuation">{</span>
   <span class="token builtin">int8</span> <span class="token operator">|</span> <span class="token builtin">int16</span> <span class="token operator">|</span> <span class="token builtin">int</span> <span class="token operator">|</span> <span class="token builtin">int32</span> <span class="token operator">|</span> <span class="token builtin">int64</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>基本数据类型如此，对待其它通用接口也是如此</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">type</span> SignedInt <span class="token keyword">interface</span> <span class="token punctuation">{</span>
	<span class="token builtin">int8</span> <span class="token operator">|</span> <span class="token builtin">int16</span> <span class="token operator">|</span> <span class="token builtin">int</span> <span class="token operator">|</span> <span class="token builtin">int32</span> <span class="token operator">|</span> <span class="token builtin">int64</span>
<span class="token punctuation">}</span>

<span class="token keyword">type</span> UnSignedInt <span class="token keyword">interface</span> <span class="token punctuation">{</span>
	<span class="token builtin">uint8</span> <span class="token operator">|</span> <span class="token builtin">uint16</span> <span class="token operator">|</span> <span class="token builtin">uint32</span> <span class="token operator">|</span> <span class="token builtin">uint64</span>
<span class="token punctuation">}</span>

<span class="token keyword">type</span> Integer <span class="token keyword">interface</span> <span class="token punctuation">{</span>
	SignedInt <span class="token operator">|</span> UnSignedInt
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>交集</strong></p><p>非空接口的类型集是其所有元素的类型集的交集，翻译成人话就是：如果一个接口包含多个非空类型集，那么该接口就是这些类型集的交集，例子如下</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">type</span> SignedInt <span class="token keyword">interface</span> <span class="token punctuation">{</span>
   <span class="token builtin">int8</span> <span class="token operator">|</span> <span class="token builtin">int16</span> <span class="token operator">|</span> <span class="token builtin">int</span> <span class="token operator">|</span> <span class="token builtin">int32</span> <span class="token operator">|</span> <span class="token builtin">int64</span>
<span class="token punctuation">}</span>

<span class="token keyword">type</span> Integer <span class="token keyword">interface</span> <span class="token punctuation">{</span>
   <span class="token builtin">int8</span> <span class="token operator">|</span> <span class="token builtin">int16</span> <span class="token operator">|</span> <span class="token builtin">int</span> <span class="token operator">|</span> <span class="token builtin">int32</span> <span class="token operator">|</span> <span class="token builtin">int64</span> <span class="token operator">|</span> <span class="token builtin">uint8</span> <span class="token operator">|</span> <span class="token builtin">uint16</span> <span class="token operator">|</span> <span class="token builtin">uint</span> <span class="token operator">|</span> <span class="token builtin">uint32</span> <span class="token operator">|</span> <span class="token builtin">uint64</span>
<span class="token punctuation">}</span>

<span class="token keyword">type</span> Number <span class="token keyword">interface</span> <span class="token punctuation">{</span>
	SignedInt
	Integer
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>例子中的交集肯定就是<code>SignedInt</code>，</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> Do<span class="token punctuation">[</span>T Number<span class="token punctuation">]</span><span class="token punctuation">(</span>n T<span class="token punctuation">)</span> T <span class="token punctuation">{</span>
   <span class="token keyword">return</span> n
<span class="token punctuation">}</span>

Do<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>
DO<span class="token punctuation">[</span><span class="token builtin">uint</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token comment">//无法通过编译</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>空集</strong></p><p>空集就是没有交集，例子如下，下面例子中的<code>Integer</code>就是一个类型空集。</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">type</span> SignedInt <span class="token keyword">interface</span> <span class="token punctuation">{</span>
	<span class="token builtin">int8</span> <span class="token operator">|</span> <span class="token builtin">int16</span> <span class="token operator">|</span> <span class="token builtin">int</span> <span class="token operator">|</span> <span class="token builtin">int32</span> <span class="token operator">|</span> <span class="token builtin">int64</span>
<span class="token punctuation">}</span>

<span class="token keyword">type</span> UnsignedInt <span class="token keyword">interface</span> <span class="token punctuation">{</span>
	<span class="token builtin">uint8</span> <span class="token operator">|</span> <span class="token builtin">uint16</span> <span class="token operator">|</span> <span class="token builtin">uint</span> <span class="token operator">|</span> <span class="token builtin">uint32</span> <span class="token operator">|</span> <span class="token builtin">uint64</span>
<span class="token punctuation">}</span>

<span class="token keyword">type</span> Integer <span class="token keyword">interface</span> <span class="token punctuation">{</span>
	SignedInt
	UnsignedInt
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>因为无符号整数和有符号整数两个肯定没有交集，所以交集就是个空集，下方例子中不管传什么类型都无法通过编译。</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>Do<span class="token punctuation">[</span>Integer<span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
Do<span class="token punctuation">[</span>Integer<span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">100</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>空接口</strong></p><p>空接口与空集并不同，空接口是所有类型集的集合，即包含所有类型。</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> Do<span class="token punctuation">[</span>T <span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">(</span>n T<span class="token punctuation">)</span> T <span class="token punctuation">{</span>
   <span class="token keyword">return</span> n
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
   Do<span class="token punctuation">[</span><span class="token keyword">struct</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token keyword">struct</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
   Do<span class="token punctuation">[</span>any<span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token string">&quot;abc&quot;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>底层类型</strong></p><p>当使用<code>type</code>关键字声明了一个新的类型时，即便其底层类型包含在类型集内，当传入时也依旧会无法通过编译。</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">type</span> Int <span class="token keyword">interface</span> <span class="token punctuation">{</span>
   <span class="token builtin">int8</span> <span class="token operator">|</span> <span class="token builtin">int16</span> <span class="token operator">|</span> <span class="token builtin">int</span> <span class="token operator">|</span> <span class="token builtin">int32</span> <span class="token operator">|</span> <span class="token builtin">int64</span> <span class="token operator">|</span> <span class="token builtin">uint8</span> <span class="token operator">|</span> <span class="token builtin">uint16</span> <span class="token operator">|</span> <span class="token builtin">uint</span> <span class="token operator">|</span> <span class="token builtin">uint32</span> <span class="token operator">|</span> <span class="token builtin">uint64</span>
<span class="token punctuation">}</span>

<span class="token keyword">type</span> TinyInt <span class="token builtin">int8</span>

<span class="token keyword">func</span> Do<span class="token punctuation">[</span>T Int<span class="token punctuation">]</span><span class="token punctuation">(</span>n T<span class="token punctuation">)</span> T <span class="token punctuation">{</span>
   <span class="token keyword">return</span> n
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
   Do<span class="token punctuation">[</span>TinyInt<span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment">// 无法通过编译，即便其底层类型属于Int类型集的范围内</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>有两种解决办法，第一种是往类型集中并入该类型，但是这毫无意义，因为<code>TinyInt</code>与<code>int8</code>底层类型就是一致的，所以就有了第二种解决办法。</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">type</span> Int <span class="token keyword">interface</span> <span class="token punctuation">{</span>
   <span class="token builtin">int8</span> <span class="token operator">|</span> <span class="token builtin">int16</span> <span class="token operator">|</span> <span class="token builtin">int</span> <span class="token operator">|</span> <span class="token builtin">int32</span> <span class="token operator">|</span> <span class="token builtin">int64</span> <span class="token operator">|</span> <span class="token builtin">uint8</span> <span class="token operator">|</span> <span class="token builtin">uint16</span> <span class="token operator">|</span> <span class="token builtin">uint</span> <span class="token operator">|</span> <span class="token builtin">uint32</span> <span class="token operator">|</span> <span class="token builtin">uint64</span> <span class="token operator">|</span> TinyInt
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用<code>~</code>符号，来表示底层类型，如果一个类型的底层类型属于该类型集，那么该类型就属于该类型集，如下所示</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">type</span> Int <span class="token keyword">interface</span> <span class="token punctuation">{</span>
   ~<span class="token builtin">int8</span> <span class="token operator">|</span> ~<span class="token builtin">int16</span> <span class="token operator">|</span> ~<span class="token builtin">int</span> <span class="token operator">|</span> ~<span class="token builtin">int32</span> <span class="token operator">|</span> ~<span class="token builtin">int64</span> <span class="token operator">|</span> ~<span class="token builtin">uint8</span> <span class="token operator">|</span> ~<span class="token builtin">uint16</span> <span class="token operator">|</span> ~<span class="token builtin">uint</span> <span class="token operator">|</span> ~<span class="token builtin">uint32</span> <span class="token operator">|</span> ~<span class="token builtin">uint64</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>修改过后就可以通过编译了。</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
   Do<span class="token punctuation">[</span>TinyInt<span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment">// 可以通过编译，因为TinyInt在类型集Int内</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="类型集注意点" tabindex="-1"><a class="header-anchor" href="#类型集注意点" aria-hidden="true">#</a> 类型集注意点</h3><p><strong>带有方法集的接口无法并入类型集</strong></p><p>只要是带有方法集的接口，不论是基本接口，泛型接口，又或者是通用接口，都无法并入类型集中，同样的也无法在类型约束中并入。以下两种写法都是错误的，都无法通过编译。</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">type</span> Integer <span class="token keyword">interface</span> <span class="token punctuation">{</span>
	<span class="token function">Sum</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">int</span>
	<span class="token function">Sub</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">int</span>
<span class="token punctuation">}</span>

<span class="token keyword">type</span> SignedInt <span class="token keyword">interface</span> <span class="token punctuation">{</span>
   <span class="token builtin">int8</span> <span class="token operator">|</span> <span class="token builtin">int16</span> <span class="token operator">|</span> <span class="token builtin">int</span> <span class="token operator">|</span> <span class="token builtin">int32</span> <span class="token operator">|</span> <span class="token builtin">int64</span> <span class="token operator">|</span> Integer
<span class="token punctuation">}</span>

<span class="token keyword">func</span> Do<span class="token punctuation">[</span>T Integer <span class="token operator">|</span> <span class="token builtin">float64</span><span class="token punctuation">]</span><span class="token punctuation">(</span>n T<span class="token punctuation">)</span> T <span class="token punctuation">{</span>
	<span class="token keyword">return</span> n
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>类型集无法当作类型实参使用</strong></p><p>只要是带有类型集的接口，都无法当作类型实参。</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">type</span> SignedInt <span class="token keyword">interface</span> <span class="token punctuation">{</span>
	<span class="token builtin">int8</span> <span class="token operator">|</span> <span class="token builtin">int16</span> <span class="token operator">|</span> <span class="token builtin">int</span> <span class="token operator">|</span> <span class="token builtin">int32</span> <span class="token operator">|</span> <span class="token builtin">int64</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> Do<span class="token punctuation">[</span>T SignedInt<span class="token punctuation">]</span><span class="token punctuation">(</span>n T<span class="token punctuation">)</span> T <span class="token punctuation">{</span>
   <span class="token keyword">return</span> n
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
   Do<span class="token punctuation">[</span>SignedInt<span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment">// 无法通过编译</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>类型集中的交集问题</strong></p><p>对于非接口类型，类型并集中不能有交集，例如下例中的<code>TinyInt</code>与<code>~int8</code>有交集。</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">type</span> Int <span class="token keyword">interface</span> <span class="token punctuation">{</span>
   ~<span class="token builtin">int8</span> <span class="token operator">|</span> ~<span class="token builtin">int16</span> <span class="token operator">|</span> ~<span class="token builtin">int</span> <span class="token operator">|</span> ~<span class="token builtin">int32</span> <span class="token operator">|</span> ~<span class="token builtin">int64</span> <span class="token operator">|</span> ~<span class="token builtin">uint8</span> <span class="token operator">|</span> ~<span class="token builtin">uint16</span> <span class="token operator">|</span> ~<span class="token builtin">uint</span> <span class="token operator">|</span> ~<span class="token builtin">uint32</span> <span class="token operator">|</span> ~<span class="token builtin">uint64</span> <span class="token operator">|</span> TinyInt <span class="token comment">// 无法通过编译</span>
<span class="token punctuation">}</span>

<span class="token keyword">type</span> TinyInt <span class="token builtin">int8</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>但是对于接口类型的话，就允许有交集，如下例</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">type</span> Int <span class="token keyword">interface</span> <span class="token punctuation">{</span>
   ~<span class="token builtin">int8</span> <span class="token operator">|</span> ~<span class="token builtin">int16</span> <span class="token operator">|</span> ~<span class="token builtin">int</span> <span class="token operator">|</span> ~<span class="token builtin">int32</span> <span class="token operator">|</span> ~<span class="token builtin">int64</span> <span class="token operator">|</span> ~<span class="token builtin">uint8</span> <span class="token operator">|</span> ~<span class="token builtin">uint16</span> <span class="token operator">|</span> ~<span class="token builtin">uint</span> <span class="token operator">|</span> ~<span class="token builtin">uint32</span> <span class="token operator">|</span> ~<span class="token builtin">uint64</span> <span class="token operator">|</span> TinyInt <span class="token comment">// 可以通过编译</span>
<span class="token punctuation">}</span>

<span class="token keyword">type</span> TinyInt <span class="token keyword">interface</span> <span class="token punctuation">{</span>
	<span class="token builtin">int8</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>类型集不能直接或间接的并入自身</strong></p><p>以下示例中，<code>Floats</code> 直接的并入了自身，而<code>Double</code>又并入了<code>Floats</code>，所以又间接的并入了自身。</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">type</span> Floats <span class="token keyword">interface</span> <span class="token punctuation">{</span>  <span class="token comment">// 代码无法通过编译</span>
   Floats <span class="token operator">|</span> Double
<span class="token punctuation">}</span>

<span class="token keyword">type</span> Double <span class="token keyword">interface</span> <span class="token punctuation">{</span>
   Floats
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>comparable</code><strong>接口无法并入类型集</strong></p><p>同样的，也无法并入类型约束中，所以基本上都是单独使用。</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> Do<span class="token punctuation">[</span>T comparable <span class="token operator">|</span> Integer<span class="token punctuation">]</span><span class="token punctuation">(</span>n T<span class="token punctuation">)</span> T <span class="token punctuation">{</span> <span class="token comment">//无法通过编译</span>
   <span class="token keyword">return</span> n
<span class="token punctuation">}</span>

<span class="token keyword">type</span> Number <span class="token keyword">interface</span> <span class="token punctuation">{</span> <span class="token comment">// 无法通过编译</span>
	Integer <span class="token operator">|</span> comparable
<span class="token punctuation">}</span>

<span class="token keyword">type</span> Comparable <span class="token keyword">interface</span> <span class="token punctuation">{</span> <span class="token comment">// 可以通过编译但是毫无意义</span>
	comparable
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="使用" tabindex="-1"><a class="header-anchor" href="#使用" aria-hidden="true">#</a> 使用</h2><p>数据结构是泛型最常见的使用场景，下面借由两个数据结构来展示下泛型如何使用。</p><h3 id="队列" tabindex="-1"><a class="header-anchor" href="#队列" aria-hidden="true">#</a> 队列</h3><p>下面用泛型实现一个简单的队列，首先声明队列类型，队列中的元素类型可以是任意的，所以类型约束为<code>any</code></p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">type</span> Queue<span class="token punctuation">[</span>T any<span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>T
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>总共只有四个方法<code>Pop</code> ，<code>Peek</code>，<code>Push</code>，<code>Size</code>，代码如下。</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">type</span> Queue<span class="token punctuation">[</span>T any<span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>T

<span class="token keyword">func</span> <span class="token punctuation">(</span>q <span class="token operator">*</span>Queue<span class="token punctuation">[</span>T<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token function">Push</span><span class="token punctuation">(</span>e T<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token operator">*</span>q <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span><span class="token operator">*</span>q<span class="token punctuation">,</span> e<span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>q <span class="token operator">*</span>Queue<span class="token punctuation">[</span>T<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token function">Pop</span><span class="token punctuation">(</span>e T<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token boolean">_</span> T<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">if</span> q<span class="token punctuation">.</span><span class="token function">Size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token punctuation">{</span>
		res <span class="token operator">:=</span> q<span class="token punctuation">.</span><span class="token function">Peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
		<span class="token operator">*</span>q <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token operator">*</span>q<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span>
		<span class="token keyword">return</span> res
	<span class="token punctuation">}</span>
	<span class="token keyword">return</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>q <span class="token operator">*</span>Queue<span class="token punctuation">[</span>T<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token function">Peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token boolean">_</span> T<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">if</span> q<span class="token punctuation">.</span><span class="token function">Size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token punctuation">{</span>
		<span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token operator">*</span>q<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">return</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>q <span class="token operator">*</span>Queue<span class="token punctuation">[</span>T<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token function">Size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token punctuation">{</span>
	<span class="token keyword">return</span> <span class="token function">len</span><span class="token punctuation">(</span><span class="token operator">*</span>q<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在<code>Pop</code>和<code>Peek</code>方法中，可以看到返回值是<code>_ T</code>，这是具名返回值的使用方式，但是又采用了下划线<code>_</code>表示这是匿名的，这并非多此一举，而是为了表示泛型零值。由于采用了泛型，当队列为空时，需要返回零值，但由于类型未知，不可能返回具体的类型，借由上面的那种方式就可以返回泛型零值。也可以声明泛型变量的方式来解决零值问题，对于一个泛型变量，其默认的值就是该类型的零值，如下</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token punctuation">(</span>q <span class="token operator">*</span>Queue<span class="token punctuation">[</span>T<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token function">Pop</span><span class="token punctuation">(</span>e T<span class="token punctuation">)</span> T <span class="token punctuation">{</span>
    <span class="token keyword">var</span> res T
	<span class="token keyword">if</span> q<span class="token punctuation">.</span><span class="token function">Size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token punctuation">{</span>
		res <span class="token operator">=</span> q<span class="token punctuation">.</span><span class="token function">Peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
		<span class="token operator">*</span>q <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token operator">*</span>q<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span>
		<span class="token keyword">return</span> res
	<span class="token punctuation">}</span>
	<span class="token keyword">return</span> res
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="堆" tabindex="-1"><a class="header-anchor" href="#堆" aria-hidden="true">#</a> 堆</h3><p>上面队列的例子，由于对元素没有任何的要求，所以类型约束为<code>any</code>。但堆就不一样了，堆是一种特殊的数据结构，它可以在O(1)的时间内判断最大或最小值，所以它对元素有一个要求，那就是必须是可以排序的类型，但内置的可排序类型只有数字和字符串，并且go的泛型约束不允许存在带方法的接口，所以在堆的初始化时，需要传入一个自定义的比较器，比较器由调用者提供，并且比较器也必须使用泛型，如下</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">type</span> Comparator<span class="token punctuation">[</span>T any<span class="token punctuation">]</span> <span class="token keyword">func</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b T<span class="token punctuation">)</span> <span class="token builtin">int</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>下面是一个简单二项堆的实现，先声明泛型结构体，依旧采用<code>any</code>进行约束，这样可以存放任意类型</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">type</span> Comparator<span class="token punctuation">[</span>T any<span class="token punctuation">]</span> <span class="token keyword">func</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b T<span class="token punctuation">)</span> <span class="token builtin">int</span>

<span class="token keyword">type</span> BinaryHeap<span class="token punctuation">[</span>T any<span class="token punctuation">]</span> <span class="token keyword">struct</span> <span class="token punctuation">{</span>
	s <span class="token punctuation">[</span><span class="token punctuation">]</span>T
	c Comparator<span class="token punctuation">[</span>T<span class="token punctuation">]</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>几个方法实现</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token punctuation">(</span>heap <span class="token operator">*</span>BinaryHeap<span class="token punctuation">[</span>T<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token function">Peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token boolean">_</span> T<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">if</span> heap<span class="token punctuation">.</span><span class="token function">Size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token punctuation">{</span>
		<span class="token keyword">return</span> heap<span class="token punctuation">.</span>s<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">return</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>heap <span class="token operator">*</span>BinaryHeap<span class="token punctuation">[</span>T<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token function">Pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token boolean">_</span> T<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	size <span class="token operator">:=</span> heap<span class="token punctuation">.</span><span class="token function">Size</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token keyword">if</span> size <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token punctuation">{</span>
		res <span class="token operator">:=</span> heap<span class="token punctuation">.</span>s<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>
		heap<span class="token punctuation">.</span>s<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> heap<span class="token punctuation">.</span>s<span class="token punctuation">[</span>size<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> heap<span class="token punctuation">.</span>s<span class="token punctuation">[</span>size<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> heap<span class="token punctuation">.</span>s<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>
		heap<span class="token punctuation">.</span>s <span class="token operator">=</span> heap<span class="token punctuation">.</span>s<span class="token punctuation">[</span><span class="token punctuation">:</span>size<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>
		heap<span class="token punctuation">.</span><span class="token function">down</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>
		<span class="token keyword">return</span> res
	<span class="token punctuation">}</span>
	<span class="token keyword">return</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>heap <span class="token operator">*</span>BinaryHeap<span class="token punctuation">[</span>T<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token function">Push</span><span class="token punctuation">(</span>e T<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	heap<span class="token punctuation">.</span>s <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>heap<span class="token punctuation">.</span>s<span class="token punctuation">,</span> e<span class="token punctuation">)</span>
	heap<span class="token punctuation">.</span><span class="token function">up</span><span class="token punctuation">(</span>heap<span class="token punctuation">.</span><span class="token function">Size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>heap <span class="token operator">*</span>BinaryHeap<span class="token punctuation">[</span>T<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token function">up</span><span class="token punctuation">(</span>i <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">if</span> heap<span class="token punctuation">.</span><span class="token function">Size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">||</span> i <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span> i <span class="token operator">&gt;=</span> heap<span class="token punctuation">.</span><span class="token function">Size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">return</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">for</span> parentIndex <span class="token operator">:=</span> i<span class="token operator">&gt;&gt;</span><span class="token number">1</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> parentIndex <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token punctuation">;</span> parentIndex <span class="token operator">=</span> i<span class="token operator">&gt;&gt;</span><span class="token number">1</span> <span class="token operator">-</span> <span class="token number">1</span> <span class="token punctuation">{</span>
		<span class="token comment">// greater than or equal to</span>
		<span class="token keyword">if</span> heap<span class="token punctuation">.</span><span class="token function">compare</span><span class="token punctuation">(</span>heap<span class="token punctuation">.</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> heap<span class="token punctuation">.</span>s<span class="token punctuation">[</span>parentIndex<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&gt;=</span> <span class="token number">0</span> <span class="token punctuation">{</span>
			<span class="token keyword">break</span>
		<span class="token punctuation">}</span>
		heap<span class="token punctuation">.</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> heap<span class="token punctuation">.</span>s<span class="token punctuation">[</span>parentIndex<span class="token punctuation">]</span> <span class="token operator">=</span> heap<span class="token punctuation">.</span>s<span class="token punctuation">[</span>parentIndex<span class="token punctuation">]</span><span class="token punctuation">,</span> heap<span class="token punctuation">.</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span>
		i <span class="token operator">=</span> parentIndex
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>heap <span class="token operator">*</span>BinaryHeap<span class="token punctuation">[</span>T<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token function">down</span><span class="token punctuation">(</span>i <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">if</span> heap<span class="token punctuation">.</span><span class="token function">Size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">||</span> i <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span> i <span class="token operator">&gt;=</span> heap<span class="token punctuation">.</span><span class="token function">Size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">return</span>
	<span class="token punctuation">}</span>
	size <span class="token operator">:=</span> heap<span class="token punctuation">.</span><span class="token function">Size</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token keyword">for</span> lsonIndex <span class="token operator">:=</span> i<span class="token operator">&lt;&lt;</span><span class="token number">1</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> lsonIndex <span class="token operator">&lt;</span> size<span class="token punctuation">;</span> lsonIndex <span class="token operator">=</span> i<span class="token operator">&lt;&lt;</span><span class="token number">1</span> <span class="token operator">+</span> <span class="token number">1</span> <span class="token punctuation">{</span>
		rsonIndex <span class="token operator">:=</span> lsonIndex <span class="token operator">+</span> <span class="token number">1</span>

		<span class="token keyword">if</span> rsonIndex <span class="token operator">&lt;</span> size <span class="token operator">&amp;&amp;</span> heap<span class="token punctuation">.</span><span class="token function">compare</span><span class="token punctuation">(</span>heap<span class="token punctuation">.</span>s<span class="token punctuation">[</span>rsonIndex<span class="token punctuation">]</span><span class="token punctuation">,</span> heap<span class="token punctuation">.</span>s<span class="token punctuation">[</span>lsonIndex<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token punctuation">{</span>
			lsonIndex <span class="token operator">=</span> rsonIndex
		<span class="token punctuation">}</span>

		<span class="token comment">// less than or equal to</span>
		<span class="token keyword">if</span> heap<span class="token punctuation">.</span><span class="token function">compare</span><span class="token punctuation">(</span>heap<span class="token punctuation">.</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> heap<span class="token punctuation">.</span>s<span class="token punctuation">[</span>lsonIndex<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&lt;=</span> <span class="token number">0</span> <span class="token punctuation">{</span>
			<span class="token keyword">break</span>
		<span class="token punctuation">}</span>
		heap<span class="token punctuation">.</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> heap<span class="token punctuation">.</span>s<span class="token punctuation">[</span>lsonIndex<span class="token punctuation">]</span> <span class="token operator">=</span> heap<span class="token punctuation">.</span>s<span class="token punctuation">[</span>lsonIndex<span class="token punctuation">]</span><span class="token punctuation">,</span> heap<span class="token punctuation">.</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span>
		i <span class="token operator">=</span> lsonIndex
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>heap <span class="token operator">*</span>BinaryHeap<span class="token punctuation">[</span>T<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token function">Size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token punctuation">{</span>
	<span class="token keyword">return</span> <span class="token function">len</span><span class="token punctuation">(</span>heap<span class="token punctuation">.</span>s<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用起来如下</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">type</span> Person <span class="token keyword">struct</span> <span class="token punctuation">{</span>
	Age  <span class="token builtin">int</span>
	Name <span class="token builtin">string</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	heap <span class="token operator">:=</span> NewHeap<span class="token punctuation">[</span>Person<span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token keyword">func</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b Person<span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token punctuation">{</span>
		<span class="token keyword">return</span> cmp<span class="token punctuation">.</span><span class="token function">Compare</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>Age<span class="token punctuation">,</span> b<span class="token punctuation">.</span>Age<span class="token punctuation">)</span>
	<span class="token punctuation">}</span><span class="token punctuation">)</span>
	heap<span class="token punctuation">.</span><span class="token function">Push</span><span class="token punctuation">(</span>Person<span class="token punctuation">{</span>Age<span class="token punctuation">:</span> <span class="token number">10</span><span class="token punctuation">,</span> Name<span class="token punctuation">:</span> <span class="token string">&quot;John&quot;</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
	heap<span class="token punctuation">.</span><span class="token function">Push</span><span class="token punctuation">(</span>Person<span class="token punctuation">{</span>Age<span class="token punctuation">:</span> <span class="token number">18</span><span class="token punctuation">,</span> Name<span class="token punctuation">:</span> <span class="token string">&quot;mike&quot;</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
	heap<span class="token punctuation">.</span><span class="token function">Push</span><span class="token punctuation">(</span>Person<span class="token punctuation">{</span>Age<span class="token punctuation">:</span> <span class="token number">9</span><span class="token punctuation">,</span> Name<span class="token punctuation">:</span> <span class="token string">&quot;lili&quot;</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
	heap<span class="token punctuation">.</span><span class="token function">Push</span><span class="token punctuation">(</span>Person<span class="token punctuation">{</span>Age<span class="token punctuation">:</span> <span class="token number">32</span><span class="token punctuation">,</span> Name<span class="token punctuation">:</span> <span class="token string">&quot;miki&quot;</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>heap<span class="token punctuation">.</span><span class="token function">Peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>heap<span class="token punctuation">.</span><span class="token function">Pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>heap<span class="token punctuation">.</span><span class="token function">Peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>输出</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>{9 lili}
{9 lili} 
{10 John}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>有泛型的加持，原本不可排序的类型传入比较器后也可以使用堆了，这样做肯定比以前使用<code>interface{}</code>来进行类型转换和断言要优雅和方便很多。</p><h2 id="小结" tabindex="-1"><a class="header-anchor" href="#小结" aria-hidden="true">#</a> 小结</h2><p>go的一大特点就是编译速度非常快，编译快是因为编译期做的优化少，泛型的加入会导致编译器的工作量增加，工作更加复杂，这必然会导致编译速度变慢，事实上当初go1.18刚推出泛型的时候确实导致编译更慢了，go团队既想加入泛型又不想太拖累编译速度，开发者用的顺手，编译器就难受，反过来编译器轻松了（最轻松的当然是直接不要泛型），开发者就难受了，现如今的泛型就是这两者之间妥协后的产物。</p>`,70),d={class:"hint-container tip"},v=n("p",{class:"hint-container-title"},"提示",-1),b={href:"https://github.com/246859/containers",target:"_blank",rel:"noopener noreferrer"},m={href:"https://go.googlesource.com/proposal/+/refs/heads/master/design/43651-type-parameters.md",target:"_blank",rel:"noopener noreferrer"};function g(y,f){const a=i("ExternalLinkIcon");return o(),c("div",null,[u,n("blockquote",null,[n("p",null,[s("An interface type defines a "),n("strong",null,[n("a",r,[s("type set"),t(a)])])])]),k,n("div",d,[v,n("p",null,[s("如果想要了解更多关于泛型的实际案例，可以看看这个泛型数据结构库"),n("a",b,[s("246859/containers: base data structure in go genericity (github.com)"),t(a)]),s("。如果想要了解更多关于泛型的一些设计理念和细节，可以前往"),n("a",m,[s("Type Parameters Proposal (googlesource.com)"),t(a)]),s("。")])])])}const w=e(l,[["render",g],["__file","90.generic.html.vue"]]);export{w as default};
